#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x0 (0x28 - 0x28)
// Class Engine.PrimalReplicationDriver
class UPrimalReplicationDriver : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPrimalReplicationDriver* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ReplicationDriver
class UReplicationDriver : public UPrimalReplicationDriver
{
public:

	static class UClass* StaticClass();
	static class UReplicationDriver* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ReplicationConnectionDriver
class UReplicationConnectionDriver : public UObject
{
public:

	static class UClass* StaticClass();
	static class UReplicationConnectionDriver* GetDefaultObj();

};

// 0x1F8 (0x220 - 0x28)
// Class Engine.PrimalActor
class UPrimalActor : public UObject
{
public:
	uint8                                        Pad_15B[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_1 : 7;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventSaving : 1;                                // Mask: 0x80, PropSize: 0x10x30(0x1)(None)
	uint8                                        bEnableMultiUse : 1;                               // Mask: 0x1, PropSize: 0x10x31(0x1)(None)
	uint8                                        bBlueprintMultiUseEntries : 1;                     // Mask: 0x2, PropSize: 0x10x31(0x1)(None)
	uint8                                        BitPad_2 : 6;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15C[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseCanMoveThroughActor : 1;                       // Mask: 0x1, PropSize: 0x10x34(0x1)(None)
	uint8                                        bUseBPFilterMultiUseEntries : 1;                   // Mask: 0x2, PropSize: 0x10x34(0x1)(None)
	uint8                                        BitPad_3 : 6;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPGetMultiUseCenterText : 1;                   // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        bMultiUseCenterHUD : 1;                            // Mask: 0x2, PropSize: 0x10x38(0x1)(None)
	uint8                                        bUseNetworkSpatialization : 1;                     // Mask: 0x4, PropSize: 0x10x38(0x1)(None)
	uint8                                        bNetworkSpatializationForceRelevancyCheck : 1;     // Mask: 0x8, PropSize: 0x10x38(0x1)(None)
	uint8                                        bNetUseClientRelevancy : 1;                        // Mask: 0x10, PropSize: 0x10x38(0x1)(None)
	uint8                                        bAttachmentReplicationUseNetworkParent : 1;        // Mask: 0x20, PropSize: 0x10x38(0x1)(None)
	uint8                                        bUseBPChangedActorTeam : 1;                        // Mask: 0x40, PropSize: 0x10x38(0x1)(None)
	uint8                                        bForceNetworkSpatialization : 1;                   // Mask: 0x80, PropSize: 0x10x38(0x1)(None)
	uint8                                        bForcedHudDrawingRequiresSameTeam : 1;             // Mask: 0x1, PropSize: 0x10x39(0x1)(None)
	uint8                                        bIsMapActor : 1;                                   // Mask: 0x2, PropSize: 0x10x39(0x1)(None)
	uint8                                        bUseOnlyPointForLevelBounds : 1;                   // Mask: 0x4, PropSize: 0x10x39(0x1)(None)
	uint8                                        bUseBPCheckForErrors : 1;                          // Mask: 0x8, PropSize: 0x10x39(0x1)(None)
	uint8                                        bHasHighVolumeRPCs : 1;                            // Mask: 0x10, PropSize: 0x10x39(0x1)(None)
	uint8                                        bAutoStasis : 1;                                   // Mask: 0x20, PropSize: 0x10x39(0x1)(None)
	uint8                                        bClimbable : 1;                                    // Mask: 0x40, PropSize: 0x10x39(0x1)(None)
	uint8                                        BitPad_4 : 1;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15E[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPDrawEntry : 1;                               // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_5 : 7;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPreventCliffPlatforms : 1;                        // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        bUseBPOverrideUILocation : 1;                      // Mask: 0x2, PropSize: 0x10x40(0x1)(None)
	uint8                                        bStasised : 1;                                     // Mask: 0x4, PropSize: 0x10x40(0x1)(None)
	uint8                                        bPreventActorStasis : 1;                           // Mask: 0x8, PropSize: 0x10x40(0x1)(None)
	uint8                                        bUseBPGetBonesToHideOnAllocation : 1;              // Mask: 0x10, PropSize: 0x10x40(0x1)(None)
	uint8                                        bReplicateHidden : 1;                              // Mask: 0x20, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_6 : 1;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHibernateChange : 1;                              // Mask: 0x80, PropSize: 0x10x40(0x1)(None)
	uint8                                        bSavedWhenStasised : 1;                            // Mask: 0x1, PropSize: 0x10x41(0x1)(None)
	uint8                                        bLoadedFromSaveGame : 1;                           // Mask: 0x2, PropSize: 0x10x41(0x1)(None)
	uint8                                        bPreventCharacterBasing : 1;                       // Mask: 0x4, PropSize: 0x10x41(0x1)(None)
	uint8                                        bPreventCharacterBasingAllowSteppingUp : 1;        // Mask: 0x8, PropSize: 0x10x41(0x1)(None)
	uint8                                        bIgnoreNetworkRangeScaling : 1;                    // Mask: 0x10, PropSize: 0x10x41(0x1)(None)
	uint8                                        BitPad_7 : 3;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_160[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceReplicateDormantChildrenWithoutSpatialRelevancy : 1; // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        BitPad_8 : 7;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_161[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForcePreventSeamlessTravel : 1;                   // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        bPreventLevelBoundsRelevant : 1;                   // Mask: 0x2, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPInventoryItemUsed : 1;                       // Mask: 0x4, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPInventoryItemDropped : 1;                    // Mask: 0x8, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPOverrideTargetingLocation : 1;               // Mask: 0x10, PropSize: 0x10x48(0x1)(None)
	uint8                                        bForceAllowNetMulticast : 1;                       // Mask: 0x20, PropSize: 0x10x48(0x1)(None)
	uint8                                        bBPInventoryItemUsedHandlesDurability : 1;         // Mask: 0x40, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPForceAllowsInventoryUse : 1;                 // Mask: 0x80, PropSize: 0x10x48(0x1)(None)
	uint8                                        bAlwaysRelevantPrimalStructure : 1;                // Mask: 0x1, PropSize: 0x10x49(0x1)(None)
	uint8                                        bPreventNPCSpawnFloor : 1;                         // Mask: 0x2, PropSize: 0x10x49(0x1)(None)
	uint8                                        bForceHiddenReplication : 1;                       // Mask: 0x4, PropSize: 0x10x49(0x1)(None)
	uint8                                        bNetCritical : 1;                                  // Mask: 0x8, PropSize: 0x10x49(0x1)(None)
	uint8                                        bOnlyReplicateOnNetForcedUpdate : 1;               // Mask: 0x10, PropSize: 0x10x49(0x1)(None)
	uint8                                        bPreventRegularForceNetUpdate : 1;                 // Mask: 0x20, PropSize: 0x10x49(0x1)(None)
	uint8                                        bOnlyInitialReplication : 1;                       // Mask: 0x40, PropSize: 0x10x49(0x1)(None)
	uint8                                        bPreventOnDedicatedServer : 1;                     // Mask: 0x80, PropSize: 0x10x49(0x1)(None)
	uint8                                        bUseAttachmentReplication : 1;                     // Mask: 0x1, PropSize: 0x10x4A(0x1)(None)
	uint8                                        bStasisComponentRadiusForceDistanceCheck : 1;      // Mask: 0x2, PropSize: 0x10x4A(0x1)(None)
	uint8                                        bIgnoredByCharacterEncroachment : 1;               // Mask: 0x4, PropSize: 0x10x4A(0x1)(None)
	uint8                                        BitPad_9 : 5;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPGetHUDDrawLocationOffset : 1;                // Mask: 0x1, PropSize: 0x10x4B(0x1)(None)
	uint8                                        bUseBPPreventAttachments : 1;                      // Mask: 0x2, PropSize: 0x10x4B(0x1)(None)
	uint8                                        bUseBPGetShowDebugAnimationComponents : 1;         // Mask: 0x4, PropSize: 0x10x4B(0x1)(None)
	uint8                                        bUnstreamComponentsUseEndOverlap : 1;              // Mask: 0x8, PropSize: 0x10x4B(0x1)(None)
	uint8                                        bWantsPerformanceThrottledTick : 1;                // Mask: 0x10, PropSize: 0x10x4B(0x1)(None)
	uint8                                        BitPad_A : 2;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWantsServerThrottledTick : 1;                     // Mask: 0x80, PropSize: 0x10x4B(0x1)(None)
	uint8                                        BitPad_B : 1;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBPPreInitializeComponents : 1;                    // Mask: 0x2, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bBPPostInitializeComponents : 1;                   // Mask: 0x4, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bUseBPCustomIsRelevantForClient : 1;               // Mask: 0x8, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bUseStasisGrid : 1;                                // Mask: 0x10, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bAlwaysCreatePhysicsState : 1;                     // Mask: 0x20, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bForceInfiniteDrawDistance : 1;                    // Mask: 0x40, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bIsFromChildActorComponent : 1;                    // Mask: 0x80, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bIsDestroyedFromChildActorComponent : 1;           // Mask: 0x1, PropSize: 0x10x4D(0x1)(None)
	uint8                                        bIsValidUnstasisCaster : 1;                        // Mask: 0x2, PropSize: 0x10x4D(0x1)(None)
	uint8                                        bUseBPAllowActorSpawn : 1;                         // Mask: 0x4, PropSize: 0x10x4D(0x1)(None)
	uint8                                        BitPad_C : 5;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_162[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnTargetingTeamChanged;                            // 0x50(0x10)(ZeroConstructor)
	uint8                                        Pad_163[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TargetingTeam;                                     // 0x78(0x4)(None)
	int32                                        CustomActorFlags;                                  // 0x7C(0x4)(None)
	class AActor*                                ActorUsingQuickAction;                             // 0x80(0x8)(ZeroConstructor)
	class FName                                  CustomTag;                                         // 0x88(0x8)(None)
	int32                                        CustomData;                                        // 0x90(0x4)(None)
	uint8                                        Pad_164[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnActorCustomEvent;                                // 0x98(0x10)(ZeroConstructor)
	double                                       LastThrottledTickTime;                             // 0xA8(0x8)(None)
	uint8                                        bWantsRealtimeThrottledTick : 1;                   // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_D : 1;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bRealtimeThrottledTickUseNativeTick : 1;           // Mask: 0x4, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_E : 5;                                      // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_165[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMatineeUpdated;                                  // 0xB8(0x10)(ZeroConstructor)
	uint8                                        Pad_166[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EReplicationGraphBehavior         RepGraphBehavior;                                  // 0xE0(0x1)(None)
	enum class EReplicationGraphBehavior         DesiredRepGraphBehavior;                           // 0xE1(0x1)(None)
	bool                                         bDesiredRepGraphBehaviorHasBeenSet;                // 0xE2(0x1)(None)
	uint8                                        Pad_167[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceMaximumReplicationRateUntilTime;              // 0xE8(0x8)(None)
	double                                       LastActorForceReplicationTime;                     // 0xF0(0x8)(None)
	float                                        NetworkAndStasisRangeMultiplier;                   // 0xF8(0x4)(None)
	float                                        NetworkRangeMultiplier;                            // 0xFC(0x4)(None)
	float                                        NetCullDistanceSquaredDormant;                     // 0x100(0x4)(None)
	uint8                                        Pad_168[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        NetworkSpatializationChildren;                     // 0x110(0x10)(ZeroConstructor)
	TArray<class AActor*>                        NetworkSpatializationChildrenDormant;              // 0x120(0x10)(ZeroConstructor)
	class AActor*                                NetworkSpatializationParent;                       // 0x130(0x8)(ZeroConstructor)
	int32                                        DefaultStasisComponentOctreeFlags;                 // 0x138(0x4)(None)
	int32                                        DefaultStasisedOctreeFlags;                        // 0x13C(0x4)(None)
	int32                                        DefaultUnstasisedOctreeFlags;                      // 0x140(0x4)(None)
	float                                        OverrideStasisComponentRadius;                     // 0x144(0x4)(None)
	class UPrimitiveComponent*                   StasisCheckComponent;                              // 0x148(0x8)(ZeroConstructor)
	double                                       UnstasisLastInRangeTime;                           // 0x150(0x8)(None)
	double                                       LastPreReplicationTime;                            // 0x158(0x8)(None)
	double                                       LastEnterStasisTime;                               // 0x160(0x8)(None)
	double                                       LastExitStasisTime;                                // 0x168(0x8)(None)
	class FString                                LastSelectedWindSourceComponentName;               // 0x170(0x10)(None)
	uint8                                        Pad_169[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class UActorComponent>> StasisUnRegisteredComponents;                      // 0x198(0x10)(ZeroConstructor)
	float                                        ReplicationIntervalMultiplier;                     // 0x1A8(0x4)(None)
	float                                        ClientReplicationSendNowThreshold;                 // 0x1AC(0x4)(None)
	uint8                                        Pad_16A[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class USoundBase>             LastPostProcessVolumeSound;                        // 0x1B4(0x8)(ZeroConstructor)
	uint8                                        Pad_16B[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSemaphoreTaken;                                  // 0x1C0(0x10)(ZeroConstructor)
	bool                                         bForceNonBlockingHits;                             // 0x1D0(0x1)(None)
	uint8                                        Pad_16C[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       OriginalCreationTime;                              // 0x1D8(0x8)(None)
	uint8                                        Pad_16D[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AMatineeActor*>                 ControllingMatineeActors;                          // 0x200(0x10)(None)
	int32                                        NetCriticalPriorityAdjustment;                     // 0x210(0x4)(None)
	uint8                                        Pad_16E[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalActor* GetDefaultObj();

	void Unstasis();
	void TryMultiUse(class APlayerController* ForPC, int32 UseIndex, int32 HitBodyIndex, bool ReturnValue);
	void ThrottledTick();
	void TargetingTeamChanged();
	void SetTickFunctionEnabled(bool bEnableTick);
	void SetDesiredRepGraphBehavior(enum class EReplicationGraphBehavior NewBehavior);
	void RecieveMatineeUpdated();
	void RealtimeThrottledTick(double DeltaTime);
	void PreventNotifySound(class USoundBase* SoundIn, bool ReturnValue);
	void PlaySoundOnActor(class USoundCue* InSoundCue, float VolumeMultiplier, float PitchMultiplier);
	void PerformanceThrottledTick();
	void OnInventoryItemGrind();
	void OffsetHUDFromCenterScreenY(class AHUD* ForHUD, float ReturnValue);
	void OffsetHUDFromBottomScreenY(class AHUD* ForHUD, float ReturnValue);
	void MulticastPropertyToPlayer(class FName PropertyName, class APlayerController* PC, bool bUnreliable);
	void MulticastProperty(class FName PropertyName, bool bUnreliable);
	void ModifyHudMultiUseLoc(const struct FVector2D& TheVec, class APlayerController* PC, int32 Index);
	void MatineeUpdated();
	void K2_GetWorld(class UWorld* ReturnValue);
	void IsValidLockOnTarget(class APawn* AttackerPawn, bool ReturnValue);
	void IsTargetable(bool ReturnValue);
	void IsShooterWeapon(bool ReturnValue);
	void IsShooterPlayerController(bool ReturnValue);
	void IsShooterCharacter(bool ReturnValue);
	void IsPrimalStructureTurret(bool ReturnValue);
	void IsPrimalStructureItemContainer(bool ReturnValue);
	void IsPrimalStructureExplosive(bool ReturnValue);
	void IsPrimalStructure(bool ReturnValue);
	void IsPrimalDino(bool ReturnValue);
	void IsPrimalCharacterOrStructure(bool ReturnValue);
	void IsPrimalCharacter(bool ReturnValue);
	void IsNetworkStressTestClientMode(bool ReturnValue);
	void IsLocallyControlledByPlayer(bool ReturnValue);
	void IsInstancedFoliage(bool ReturnValue);
	void IsFirstPersonMeshVisible(bool ReturnValue);
	void IsFirstPersonCamera(bool ReturnValue);
	void IsDead(bool ReturnValue);
	void IsARaft(bool ReturnValue);
	void InputDismissPOI_BP(class APlayerController* ForPC, int32 Index);
	void InputDismissPOI(class APlayerController* ForPC, int32 Index);
	void GetWheelOptionInfoBP(class APlayerController* ForPC, int32 WheelCategory, const struct FMultiUseWheelOption& ReturnValue);
	void GetWheelOptionInfo(class APlayerController* ForPC, int32 WheelCategory, const struct FMultiUseWheelOption& ReturnValue);
	void GetWheelOptionByUseIndex(class APlayerController* ForPC, int32 Index, const struct FMultiUseWheelOption& ReturnValue);
	void GetUsablePriority(float ReturnValue);
	void GetTargetingLocation(class AActor* Attacker, const struct FVector& ReturnValue);
	void GetSecondaryMountedActor(class AActor* ReturnValue);
	void GetMultiUseIconBP(class APlayerController* ForPC, const struct FMultiUseEntry& MultiUseEntry, class UTexture2D* ReturnValue);
	void GetMultiUseIcon(class APlayerController* ForPC, const struct FMultiUseEntry& MultiUseEntry, class UTexture2D* ReturnValue);
	void GetMultiUseEntries(class APlayerController* ForPC, const TArray<struct FMultiUseEntry>& MultiUseEntries, int32 HitBodyIndex);
	void GetInterpolatedVelocity(const struct FVector& ReturnValue);
	void GetInterpolatedRotation(const struct FRotator& ReturnValue);
	void GetInterpolatedLocation(const struct FVector& ReturnValue);
	void GetEditTextString(class APlayerController* ForPC, class UObject* AssociatedObject1, int32 ExtraID1, int32 ExtraID2, const class FString& ReturnValue);
	void GetCharacterController(class AController* ReturnValue);
	void GetAttachedSoundVolumeMultiplier(float ReturnValue);
	void GetAttachedSoundPitchMultiplier(float ReturnValue);
	void GetAllSceneComponents(const TArray<class USceneComponent*>& OutComponents);
	void GetAimedTutorialHintString(const class FString& ReturnValue);
	void GetActorViewDirection(const struct FVector& ReturnValue);
	void ForceReplicateNowIfNoChannel();
	void ForceReplicateNow(bool bForceCreateChannel, bool bForceCreateChannelIfRelevant, bool bOnlyIfNoChannel);
	void DrawBasicFloatingHUD(class AHUD* ForHUD);
	void DrawActorFloatingHUD(class AHUD* ForHUD);
	void CurrentlyHasRider(bool ReturnValue);
	void ClientMultiUse(class APlayerController* ForPC, int32 UseIndex, int32 HitBodyIndex);
	void CheckRegisterCharacterMesh();
	void CheckBPAllowActorSpawn(class UWorld* World, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* ForOwner, class APawn* ForInstigator, bool ReturnValue);
	void ChangeActorTeam(int32 NewTeam);
	void CanMoveThroughActor(class AActor* Actor, bool ReturnValue);
	void BPTryMultiUse(class APlayerController* ForPC, int32 UseIndex, bool ReturnValue);
	void BPSetNetworkAndStasisRangeMultiplier(float Value);
	void BPPreventAttachments(class UObject* ForItem, bool ReturnValue);
	void BPPreInitializeComponents();
	void BPPostInitializeComponents();
	void BPOverrideUILocation(class APlayerController* ForPC, const struct FVector& ReturnValue);
	void BPOverrideServerMultiUseAcceptRange(float ReturnValue);
	void BPIsMarkedForSeamlessTravel(bool ReturnValue);
	void BPInventoryItemUsed(class UObject* InventoryItemObject);
	void BPInventoryItemDropped(class UObject* InventoryItemObject);
	void BPGetShowDebugAnimationComponents(const TArray<class USkeletalMeshComponent*>& SkelMeshComponents);
	void BPGetQuickActionUseEntry(class APlayerController* ForPC, const struct FQuickActionOption& ReturnValue);
	void BPGetMultiUseEntries(class APlayerController* ForPC, const TArray<struct FMultiUseEntry>& MultiUseEntries, const TArray<struct FMultiUseEntry>& ReturnValue);
	void BPGetMultiUseCenterText(class APlayerController* ForPC, int32 UseIndex, const class FString& OutCenterText, const struct FLinearColor& OutCenterTextColor, bool ReturnValue);
	void BPGetExtraSpecialBlueprintInt(int32 ToCheck, int32 ReturnValue);
	void BPGetCustomBlueprintData(class FName DataName, const struct FBPNetExecParams& InData, const struct FBPNetExecParams& OutData, bool ReturnValue);
	void BPGetBonesToHideOnAllocation(const TArray<class FName>& ReturnValue);
	void BPGetActorEyesViewPoint(const struct FVector& Location, const struct FRotator& Rotation);
	void BPForceAllowsInventoryUse(class UObject* InventoryItemObject, bool ReturnValue);
	void BPFilterMultiUseEntries(class APlayerController* ForPC, const TArray<struct FMultiUseEntry>& MultiUseEntries, const TArray<struct FMultiUseEntry>& ReturnValue);
	void BPDrawMultiUseEntry(const struct FMultiUseEntry& Entry, class APlayerController* ForPC, class UCanvas* Canvas, const struct FVector2D& CanvasPosition);
	void BPDrawMultiUseCustomEntry(int32 Index, class FName Text, class APlayerController* ForPC, class UCanvas* Canvas, const struct FVector2D& CanvasPosition);
	void BPCustomIsRelevantForClient(class APlayerController* ForPC, bool ReturnValue);
	void BPControlRigNotify(class FName NotifyName, class FName NotifyCustomTag, const struct FHitResult& WorldSpaceHitResult, const struct FVector& Velocity);
	void BPConsumeUsePinCode(class AActor* FromKeypadActor, class APlayerController* ForPC, int32 AppledPinCode, bool bIsActivating, bool ReturnValue);
	void BPConsumeSetPinCode(class APlayerController* ForPC, int32 AppledPinCode, bool bIsSetting, int32 TheCustomIndex, bool ReturnValue);
	void BPClientDoMultiUse(class APlayerController* ForPC, int32 ClientUseIndex);
	void BPCheckForErrors(const TArray<struct FBPMapCheckEntry>& ReturnValue);
	void BPChangedActorTeam();
	void BPAttachedRootComponent();
	void BPAllowActorSpawn(class UWorld* ForWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* ForOwner, class APawn* ForInstigator, bool ReturnValue);
	void BP_OverrideTargetingLocation(class AActor* Attacker, const struct FVector& ReturnValue);
	void BP_GetHUDWorldDrawLocation(class FName HUDTag, const struct FVector& ReturnValue);
	void AllowManualMultiUseActivation(class APlayerController* ForPC, bool ReturnValue);
	void AllowIgnoreCharacterEncroachment(class UPrimitiveComponent* HitComponent, class AActor* EncroachingCharacter, bool ReturnValue);
	void AllowGrappling(bool ReturnValue);
	void AllowEmulatedMovement(bool ReturnValue);
};

// 0x298 (0x4B8 - 0x220)
// Class Engine.Actor
class AActor : public UPrimalActor
{
public:
	struct FActorTickFunction                    PrimaryActorTick;                                  // 0x220(0x38)(None)
	uint8                                        bNetTemporary : 1;                                 // Mask: 0x1, PropSize: 0x10x258(0x1)(None)
	uint8                                        BitPad_11 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOnlyRelevantToOwner : 1;                          // Mask: 0x4, PropSize: 0x10x258(0x1)(None)
	uint8                                        bAlwaysRelevant : 1;                               // Mask: 0x8, PropSize: 0x10x258(0x1)(None)
	uint8                                        bReplicateMovement : 1;                            // Mask: 0x10, PropSize: 0x10x258(0x1)(None)
	uint8                                        bCallPreReplication : 1;                           // Mask: 0x20, PropSize: 0x10x258(0x1)(None)
	uint8                                        bCallPreReplicationForReplay : 1;                  // Mask: 0x40, PropSize: 0x10x258(0x1)(None)
	uint8                                        bHidden : 1;                                       // Mask: 0x80, PropSize: 0x10x258(0x1)(None)
	uint8                                        bTearOff : 1;                                      // Mask: 0x1, PropSize: 0x10x259(0x1)(None)
	uint8                                        bForceNetAddressable : 1;                          // Mask: 0x2, PropSize: 0x10x259(0x1)(None)
	uint8                                        bExchangedRoles : 1;                               // Mask: 0x4, PropSize: 0x10x259(0x1)(None)
	uint8                                        bNetLoadOnClient : 1;                              // Mask: 0x8, PropSize: 0x10x259(0x1)(None)
	uint8                                        bNetUseOwnerRelevancy : 1;                         // Mask: 0x10, PropSize: 0x10x259(0x1)(None)
	uint8                                        bRelevantForNetworkReplays : 1;                    // Mask: 0x20, PropSize: 0x10x259(0x1)(None)
	uint8                                        bRelevantForLevelBounds : 1;                       // Mask: 0x40, PropSize: 0x10x259(0x1)(None)
	uint8                                        bReplayRewindable : 1;                             // Mask: 0x80, PropSize: 0x10x259(0x1)(None)
	uint8                                        bAllowTickBeforeBeginPlay : 1;                     // Mask: 0x1, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bForceHighQualityViewerReplication : 1;            // Mask: 0x2, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bActorPreventPhysicsSceneRegistration : 1;         // Mask: 0x4, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bAutoDestroyWhenFinished : 1;                      // Mask: 0x8, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bCanBeDamaged : 1;                                 // Mask: 0x10, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bBlockInput : 1;                                   // Mask: 0x20, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bCollideWhenPlacing : 1;                           // Mask: 0x40, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bFindCameraComponentWhenViewTarget : 1;            // Mask: 0x80, PropSize: 0x10x25A(0x1)(None)
	uint8                                        bGenerateOverlapEventsDuringLevelStreaming : 1;    // Mask: 0x1, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bIgnoresOriginShifting : 1;                        // Mask: 0x2, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bEnableAutoLODGeneration : 1;                      // Mask: 0x4, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bIsEditorOnlyActor : 1;                            // Mask: 0x8, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bActorSeamlessTraveled : 1;                        // Mask: 0x10, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bDisableRigidBodyAnimNodes : 1;                    // Mask: 0x20, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bReplicates : 1;                                   // Mask: 0x40, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bCanBeInCluster : 1;                               // Mask: 0x80, PropSize: 0x10x25B(0x1)(None)
	uint8                                        bAllowReceiveTickEventOnDedicatedServer : 1;       // Mask: 0x1, PropSize: 0x10x25C(0x1)(None)
	uint8                                        BitPad_12 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReplicateUsingRegisteredSubObjectList : 1;        // Mask: 0x4, PropSize: 0x10x25C(0x1)(None)
	uint8                                        BitPad_13 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_14 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bActorEnableCollision : 1;                         // Mask: 0x10, PropSize: 0x10x25D(0x1)(None)
	uint8                                        bActorIsBeingDestroyed : 1;                        // Mask: 0x20, PropSize: 0x10x25D(0x1)(None)
	uint8                                        BitPad_15 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_16 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAsyncPhysicsTickEnabled : 1;                      // Mask: 0x8, PropSize: 0x10x25E(0x1)(None)
	uint8                                        BitPad_17 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EActorUpdateOverlapsMethod        UpdateOverlapsMethodDuringLevelStreaming;          // 0x25F(0x1)(None)
	enum class EActorUpdateOverlapsMethod        DefaultUpdateOverlapsMethodDuringLevelStreaming;   // 0x260(0x1)(None)
	uint8                                        Pad_243[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InitialLifeSpan;                                   // 0x268(0x4)(None)
	float                                        CustomTimeDilation;                                // 0x26C(0x4)(None)
	enum class ENetRole                          RemoteRole;                                        // 0x270(0x1)(None)
	uint8                                        Pad_244[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RayTracingGroupId;                                 // 0x274(0x4)(None)
	struct FRepAttachment                        AttachmentReplication;                             // 0x278(0x60)(ZeroConstructor)
	struct FRepMovement                          ReplicatedMovement;                                // 0x2D8(0x70)(None)
	class AActor*                                Owner;                                             // 0x348(0x8)(ZeroConstructor)
	class FName                                  NetDriverName;                                     // 0x350(0x8)(None)
	enum class ENetRole                          Role;                                              // 0x358(0x1)(None)
	enum class ENetDormancy                      NetDormancy;                                       // 0x359(0x1)(None)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod;                      // 0x35A(0x1)(None)
	enum class EAutoReceiveInput                 AutoReceiveInput;                                  // 0x35B(0x1)(None)
	int32                                        InputPriority;                                     // 0x35C(0x4)(None)
	double                                       CreationTime;                                      // 0x360(0x8)(None)
	class UInputComponent*                       InputComponent;                                    // 0x368(0x8)(ZeroConstructor)
	float                                        NetCullDistanceSquared;                            // 0x370(0x4)(None)
	int32                                        NetTag;                                            // 0x374(0x4)(None)
	float                                        NetUpdateFrequency;                                // 0x378(0x4)(None)
	float                                        MinNetUpdateFrequency;                             // 0x37C(0x4)(None)
	float                                        NetPriority;                                       // 0x380(0x4)(None)
	uint8                                        Pad_245[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastRenderTime;                                    // 0x388(0x8)(None)
	double                                       LastRenderTimeOnScreen;                            // 0x390(0x8)(None)
	double                                       LastRenderTimeIgnoreShadow;                        // 0x398(0x8)(None)
	class APawn*                                 Instigator;                                        // 0x3A0(0x8)(ZeroConstructor)
	TArray<class AActor*>                        Children;                                          // 0x3A8(0x10)(ZeroConstructor)
	class USceneComponent*                       RootComponent;                                     // 0x3B8(0x8)(ZeroConstructor)
	uint8                                        Pad_246[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          Layers;                                            // 0x3C8(0x10)(None)
	TWeakObjectPtr<class UChildActorComponent>   ParentComponent;                                   // 0x3D8(0x8)(ZeroConstructor)
	TArray<class FName>                          Tags;                                              // 0x3E0(0x10)(None)
	uint8                                        Pad_247[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastSparseDelegateProperty_            OnTakeAnyDamage;                                   // 0x3F4(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnTakePointDamage;                                 // 0x3F5(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnTakeRadialDamage;                                // 0x3F6(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnActorBeginOverlap;                               // 0x3F7(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnActorEndOverlap;                                 // 0x3F8(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnBeginCursorOver;                                 // 0x3F9(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnEndCursorOver;                                   // 0x3FA(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnClicked;                                         // 0x3FB(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnReleased;                                        // 0x3FC(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchBegin;                                 // 0x3FD(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchEnd;                                   // 0x3FE(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchEnter;                                 // 0x3FF(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchLeave;                                 // 0x400(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnActorHit;                                        // 0x401(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnDestroyed;                                       // 0x402(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnEndPlay;                                         // 0x403(0x1)(ZeroConstructor)
	uint8                                        Pad_248[0x84];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UActorComponent*>               InstanceComponents;                                // 0x488(0x10)(ZeroConstructor)
	TArray<class UActorComponent*>               BlueprintCreatedComponents;                        // 0x498(0x10)(ZeroConstructor)
	uint8                                        Pad_249[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AActor* GetDefaultObj();

	void WasRecentlyRendered(float Tolerance, bool ReturnValue);
	void UserConstructionScript();
	void TearOff();
	void StopActorSound(class USoundBase* SoundAsset, float FadeOutTime);
	void SetTickGroup(enum class ETickingGroup NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetRayTracingGroupId(int32 InRaytracingGroupId);
	void SetOwner(class AActor* NewOwner);
	void SetNetDormancy(enum class ENetDormancy NewDormancy);
	void SetLifeSpan(float InLifespan);
	void SetAutoDestroyWhenFinished(bool bVal);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void ServerSendSimpleExecCommandToEveryone(class FName CommandName, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendExecCommandToPlayer(class APrimalPlayerController* ToPC, class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendExecCommandToEveryone(class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ReregisterAllComponents();
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void NetSpawnedActor(class AActor* SpawnedActor);
	void NetActorSpawnActorUnreliable(class UClass* ActorClass, const struct FVector& AtLoc, const struct FRotator& AtRot, bool bIgnoreOnDedicatedServer, class USceneComponent* AttachToComponent, class FName BoneName, class AActor* SpawnOwner);
	void NetActorSpawnActor(class UClass* ActorClass, const struct FVector& AtLoc, const struct FRotator& AtRot, bool bIgnoreOnDedicatedServer, class USceneComponent* AttachToComponent, class FName BoneName, class AActor* SpawnOwner);
	void MulticastDrawDebugString(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugSphere(const struct FVector& Center, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugPlane(const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugLineTraceHitResult(const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool EnableInShipping);
	void MulticastDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool EnableInShipping);
	void MulticastDrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness, bool EnableInShipping);
	void MulticastDrawDebugCapsuleWithExtents(const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent, bool EnableInShipping);
	void MulticastDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool EnableInShipping);
	void MulticastDrawDebugBox(const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool EnableInShipping);
	void MulticastDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool EnableInShipping);
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, class FName Tag);
	void K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bSimpleTeleport, bool ReturnValue);
	void K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport, bool ReturnValue);
	void K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics, bool ReturnValue);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport, bool ReturnValue);
	void K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport, bool ReturnValue);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	void K2_GetRootComponent(class USceneComponent* ReturnValue);
	void K2_GetComponentsByClass(class UClass* ComponentClass, const TArray<class UActorComponent*>& ReturnValue);
	void K2_GetActorRotation(const struct FRotator& ReturnValue);
	void K2_GetActorLocation(const struct FVector& ReturnValue);
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool ReturnValue);
	void K2_AttachToActor(class AActor* ParentActor, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool ReturnValue);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, class FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, class FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void IsOwnedOrControlledBy(class AActor* TestOwner, bool ReturnValue);
	void IsOverlappingActor(class AActor* Other, bool ReturnValue);
	void IsChildActor(bool ReturnValue);
	void IsActorTickEnabled(bool ReturnValue);
	void IsActorBeingDestroyed(bool ReturnValue);
	void HasAuthority(bool ReturnValue);
	void GetVisibleUnhiddenComponentByClass(class UClass* ComponentClass, class UPrimitiveComponent* ReturnValue);
	void GetVisibleComponentByClass(class UClass* ComponentClass, class UPrimitiveComponent* ReturnValue);
	void GetVerticalDistanceTo(class AActor* OtherActor, float ReturnValue);
	void GetVelocity(bool bIsForRagdoll, const struct FVector& ReturnValue);
	void GetTransform(const struct FTransform& ReturnValue);
	void GetTickableWhenPaused(bool ReturnValue);
	void GetSquaredHorizontalDistanceTo(class AActor* OtherActor, float ReturnValue);
	void GetSquaredDistanceTo(class AActor* OtherActor, float ReturnValue);
	void GetRemoteRole(enum class ENetRole ReturnValue);
	void GetRayTracingGroupId(int32 ReturnValue);
	void GetParentComponent(class UChildActorComponent* ReturnValue);
	void GetParentActor(class AActor* ReturnValue);
	void GetOwnerController(class APlayerController* ReturnValue);
	void GetOwner(class AActor* ReturnValue);
	void GetOverlappingComponents(const TArray<class UPrimitiveComponent*>& OverlappingComponents);
	void GetOverlappingActors(const TArray<class AActor*>& OverlappingActors, class UClass* ClassFilter);
	void GetLocalRole(enum class ENetRole ReturnValue);
	void GetLifeSpan(float ReturnValue);
	void GetLevelTransform(const struct FTransform& ReturnValue);
	void GetLevel(class ULevel* ReturnValue);
	void GetInstigatorController(class AController* ReturnValue);
	void GetInstigator(class APawn* ReturnValue);
	void GetInputVectorAxisValue(const struct FKey& InputAxisKey, const struct FVector& ReturnValue);
	void GetInputAxisValue(class FName InputAxisName, float ReturnValue);
	void GetInputAxisKeyValue(const struct FKey& InputAxisKey, float ReturnValue);
	void GetHorizontalDotProductTo(class AActor* OtherActor, float ReturnValue);
	void GetHorizontalDistanceTo(class AActor* OtherActor, float ReturnValue);
	void GetGameTimeSinceCreation(float ReturnValue);
	void GetDotProductTo(class AActor* OtherActor, float ReturnValue);
	void GetDistanceTo(class AActor* OtherActor, float ReturnValue);
	void GetComponentsByTag(class UClass* ComponentClass, class FName Tag, const TArray<class UActorComponent*>& ReturnValue);
	void GetComponentsByInterface(class UClass* Interface, const TArray<class UActorComponent*>& ReturnValue);
	void GetComponentsByCustomTag(class FName TheTag, const TArray<class UActorComponent*>& ReturnValue);
	void GetComponentByCustomTag(class FName TheTag, class UActorComponent* ReturnValue);
	void GetComponentByClass(class UClass* ComponentClass, class UActorComponent* ReturnValue);
	void GetAttachParentSocketName(class FName ReturnValue);
	void GetAttachParentActor(class AActor* ReturnValue);
	void GetAttachedActors(const TArray<class AActor*>& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors);
	void GetAllChildActors(const TArray<class AActor*>& ChildActors, bool bIncludeDescendants);
	void GetActorUpVector(const struct FVector& ReturnValue);
	void GetActorTimeDilation(float ReturnValue);
	void GetActorTickInterval(float ReturnValue);
	void GetActorScale3D(const struct FVector& ReturnValue);
	void GetActorRightVector(const struct FVector& ReturnValue);
	void GetActorRelativeScale3D(const struct FVector& ReturnValue);
	void GetActorForwardVector(const struct FVector& ReturnValue);
	void GetActorEyesViewPoint(const struct FVector& OutLocation, const struct FRotator& OutRotation);
	void GetActorEnableCollision(bool ReturnValue);
	void GetActorBounds(bool bOnlyCollidingComponents, const struct FVector& Origin, const struct FVector& BoxExtent, bool bIncludeFromChildActors);
	void ForceNetUpdate(bool bDormantDontReplicateProperties, bool bAbsoluteForceNetUpdate, bool bDontUpdateChannel);
	void ForceDestroy();
	void FlushNetDormancy();
	void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform);
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void CreateInputComponent(class UClass* InputComponentToCreate);
	void CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding, bool bIncludeFromChildActors, const struct FBox& ReturnValue);
	void BPServerHandleNetExecCommand(class APlayerController* FromPC, class FName CommandName, const struct FBPNetExecParams& ExecParams, bool ReturnValue);
	void BPIsA(class UClass* AnActorClass, bool ReturnValue);
	void BPClientHandleNetExecCommand(class FName CommandName, const struct FBPNetExecParams& ExecParams, class APlayerController* ForPC, bool ReturnValue);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void AddComponentByClass(class UClass* Class, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish, class UActorComponent* ReturnValue);
	void AddComponent(class FName TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish, class UActorComponent* ReturnValue);
	void ActorPlaySoundUnreliable(class USoundBase* SoundAsset, bool bAttach, class FName BoneName, const struct FVector& LocOffset);
	void ActorPlaySound(class USoundBase* SoundAsset, bool bAttach, class FName BoneName, const struct FVector& LocOffset);
	void ActorHasTag(class FName Tag, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintFunctionLibrary
class UBlueprintFunctionLibrary : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBlueprintFunctionLibrary* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.StreamableRenderAsset
class UStreamableRenderAsset : public UObject
{
public:
	uint8                                        Pad_25B[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceMipLevelsToBeResidentTimestamp;               // 0x40(0x8)(None)
	int32                                        NumCinematicMipLevels;                             // 0x48(0x4)(None)
	uint8                                        Pad_25D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   NoRefStreamingLODBias;                             // 0x50(0x68)(None)
	int32                                        StreamingIndex;                                    // 0xB8(0x4)(None)
	uint8                                        NeverStream : 1;                                   // Mask: 0x1, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bGlobalForceMipLevelsToBeResident : 1;             // Mask: 0x2, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bHasStreamingUpdatePending : 1;                    // Mask: 0x4, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bForceMiplevelsToBeResident : 1;                   // Mask: 0x8, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bIgnoreStreamingMipBias : 1;                       // Mask: 0x10, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bUseCinematicMipLevels : 1;                        // Mask: 0x20, PropSize: 0x10xBC(0x1)(None)
	uint8                                        Pad_25E[0xB];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStreamableRenderAsset* GetDefaultObj();

	void SetForceMipLevelsToBeResident(float Seconds, int32 CinematicLODGroupMask);
};

// 0x110 (0x1D8 - 0xC8)
// Class Engine.Texture
class UTexture : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_262[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LightingGuid;                                      // 0xD8(0x10)(None)
	int32                                        LevelIndex;                                        // 0xE8(0x4)(None)
	struct FPerPlatformInt                       LODBias;                                           // 0xEC(0x4)(None)
	enum class ETextureCompressionSettings       CompressionSettings;                               // 0xF0(0x1)(None)
	enum class ETextureFilter                    Filter;                                            // 0xF1(0x1)(None)
	enum class ETextureMipLoadOptions            MipLoadOptions;                                    // 0xF2(0x1)(None)
	enum class ETextureCookPlatformTilingSettings CookPlatformTilingSettings;                        // 0xF3(0x1)(None)
	enum class ETextureGroup                     LODGroup;                                          // 0xF4(0x1)(None)
	uint8                                        Pad_264[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformFloat                     Downscale;                                         // 0xF8(0x4)(None)
	enum class ETextureDownscaleOptions          DownscaleOptions;                                  // 0xFC(0x1)(None)
	uint8                                        SRGB : 1;                                          // Mask: 0x1, PropSize: 0x10xFD(0x1)(None)
	uint8                                        bNoTiling : 1;                                     // Mask: 0x2, PropSize: 0x10xFD(0x1)(None)
	uint8                                        VirtualTextureStreaming : 1;                       // Mask: 0x4, PropSize: 0x10xFD(0x1)(None)
	uint8                                        CompressionYCoCg : 1;                              // Mask: 0x8, PropSize: 0x10xFD(0x1)(None)
	uint8                                        bNotOfflineProcessed : 1;                          // Mask: 0x10, PropSize: 0x10xFD(0x1)(None)
	uint8                                        bAsyncResourceReleaseHasBeenStarted : 1;           // Mask: 0x20, PropSize: 0x10xFD(0x1)(None)
	uint8                                        BitPad_18 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_265[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x100(0x10)(None)
	uint8                                        Pad_266[0xC8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTexture* GetDefaultObj();

	void ComputeTextureSourceChannelMinMax(const struct FLinearColor& OutColorMin, const struct FLinearColor& OutColorMax, bool ReturnValue);
	void Blueprint_GetTextureSourceDiskAndMemorySize(int64 OutDiskSize, int64 OutMemorySize);
	void Blueprint_GetMemorySize(int64 ReturnValue);
};

// 0x90 (0xB8 - 0x28)
// Class Engine.ActorComponent
class UActorComponent : public UObject
{
public:
	uint8                                        Pad_292[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FActorComponentTickFunction           PrimaryComponentTick;                              // 0x30(0x38)(None)
	TArray<class FName>                          ComponentTags;                                     // 0x68(0x10)(None)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x78(0x10)(ZeroConstructor)
	uint8                                        Pad_293[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UCSSerializationIndex;                             // 0x8C(0x4)(None)
	uint8                                        BitPad_1B : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetAddressable : 1;                               // Mask: 0x8, PropSize: 0x10x90(0x1)(None)
	uint8                                        bReplicateUsingRegisteredSubObjectList : 1;        // Mask: 0x10, PropSize: 0x10x90(0x1)(None)
	uint8                                        bReplicates : 1;                                   // Mask: 0x20, PropSize: 0x10x90(0x1)(None)
	uint8                                        BitPad_1C : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_294[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_1D : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAutoActivate : 1;                                 // Mask: 0x2, PropSize: 0x10x92(0x1)(None)
	uint8                                        bIsActive : 1;                                     // Mask: 0x4, PropSize: 0x10x92(0x1)(None)
	uint8                                        bEditableWhenInherited : 1;                        // Mask: 0x8, PropSize: 0x10x92(0x1)(None)
	uint8                                        bOnlyRelevantToOwner : 1;                          // Mask: 0x10, PropSize: 0x10x92(0x1)(None)
	uint8                                        BitPad_1E : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanEverAffectNavigation : 1;                      // Mask: 0x40, PropSize: 0x10x92(0x1)(None)
	uint8                                        BitPad_1F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsEditorOnly : 1;                                 // Mask: 0x1, PropSize: 0x10x93(0x1)(None)
	uint8                                        BitPad_20 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_296[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EComponentCreationMethod          CreationMethod;                                    // 0x95(0x1)(None)
	FMulticastSparseDelegateProperty_            OnComponentActivated;                              // 0x96(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentDeactivated;                            // 0x97(0x1)(None)
	uint8                                        Pad_297[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bStasisPreventUnregister : 1;                      // Mask: 0x1, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bOnlyInitialReplication : 1;                       // Mask: 0x2, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bPreventOnDedicatedServer : 1;                     // Mask: 0x4, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bPreventOnConsoles : 1;                            // Mask: 0x8, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bPreventOnClient : 1;                              // Mask: 0x10, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bPreventOnNonDedicatedHost : 1;                    // Mask: 0x20, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bDedicatedForceTickingEveryFrame : 1;              // Mask: 0x40, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bAlwaysReplicatePropertyConditional : 1;           // Mask: 0x80, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bUseBPOnComponentTick : 1;                         // Mask: 0x1, PropSize: 0x10xA9(0x1)(None)
	uint8                                        bUseBPOnComponentDestroyed : 1;                    // Mask: 0x2, PropSize: 0x10xA9(0x1)(None)
	uint8                                        bUseBPOnComponentCreated : 1;                      // Mask: 0x4, PropSize: 0x10xA9(0x1)(None)
	uint8                                        BitPad_21 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_298[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CustomTag;                                         // 0xAC(0x8)(None)
	int32                                        CustomData;                                        // 0xB4(0x4)(None)

	static class UClass* StaticClass();
	static class UActorComponent* GetDefaultObj();

	void ToggleActive();
	void SetTickGroup(enum class ETickingGroup NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetOwner(class AActor* NewOwner);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickIntervalAndCooldown(float TickInterval);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void ReregisterComponent();
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	void IsComponentTickEnabled(bool ReturnValue);
	void IsBeingDestroyed(bool ReturnValue);
	void IsActive(bool ReturnValue);
	void GetOwner(class AActor* ReturnValue);
	void GetComponentTickInterval(float ReturnValue);
	void Deactivate();
	void ComponentHasTag(class FName Tag, bool ReturnValue);
	void BPTickComponent(float DeltaTime);
	void BPOnComponentTick(float DeltaTime);
	void BPOnComponentDestroyed();
	void BPOnComponentCreated();
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void AddedAsPrimalItemAttachment();
	void Activate(bool bReset);
};

// 0x210 (0x2C8 - 0xB8)
// Class Engine.SceneComponent
class USceneComponent : public UActorComponent
{
public:
	uint8                                        Pad_30D[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APhysicsVolume>         PhysicsVolume;                                     // 0xC0(0x8)(ZeroConstructor)
	class USceneComponent*                       AttachParent;                                      // 0xC8(0x8)(ZeroConstructor)
	class FName                                  AttachSocketName;                                  // 0xD0(0x8)(None)
	TArray<class USceneComponent*>               AttachChildren;                                    // 0xD8(0x10)(ZeroConstructor)
	TArray<class USceneComponent*>               ClientAttachedChildren;                            // 0xE8(0x10)(ZeroConstructor)
	uint8                                        Pad_311[0x48];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RelativeLocation;                                  // 0x140(0x18)(None)
	struct FRotator                              RelativeRotation;                                  // 0x158(0x18)(None)
	struct FVector                               RelativeScale3D;                                   // 0x170(0x18)(None)
	struct FVector                               ComponentVelocity;                                 // 0x188(0x18)(None)
	uint8                                        bClientSyncAlwaysUpdatePhysicsCollision : 1;       // Mask: 0x1, PropSize: 0x10x1A0(0x1)(None)
	uint8                                        BitPad_29 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_314[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bComponentToWorldUpdated : 1;                      // Mask: 0x1, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        BitPad_2A : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAbsoluteLocation : 1;                             // Mask: 0x4, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bAbsoluteRotation : 1;                             // Mask: 0x8, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bAbsoluteScale : 1;                                // Mask: 0x10, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bVisible : 1;                                      // Mask: 0x20, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bShouldBeAttached : 1;                             // Mask: 0x40, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bShouldSnapLocationWhenAttached : 1;               // Mask: 0x80, PropSize: 0x10x1A4(0x1)(None)
	uint8                                        bShouldSnapRotationWhenAttached : 1;               // Mask: 0x1, PropSize: 0x10x1A5(0x1)(None)
	uint8                                        bShouldSnapScaleWhenAttached : 1;                  // Mask: 0x2, PropSize: 0x10x1A5(0x1)(None)
	uint8                                        bShouldUpdatePhysicsVolume : 1;                    // Mask: 0x4, PropSize: 0x10x1A5(0x1)(None)
	uint8                                        bHiddenInGame : 1;                                 // Mask: 0x8, PropSize: 0x10x1A5(0x1)(None)
	uint8                                        BitPad_2B : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_317[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAttachedSoundsForceHighPriority : 1;              // Mask: 0x1, PropSize: 0x10x1A8(0x1)(None)
	uint8                                        BitPad_2C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_318[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bBoundsChangeTriggersStreamingDataRebuild : 1;     // Mask: 0x1, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        bUseAttachParentBound : 1;                         // Mask: 0x2, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        bComputeFastLocalBounds : 1;                       // Mask: 0x4, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        bComputeBoundsOnceForGame : 1;                     // Mask: 0x8, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        bComputedBoundsOnceForGame : 1;                    // Mask: 0x10, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        bIsNotRenderAttachmentRoot : 1;                    // Mask: 0x20, PropSize: 0x10x1AC(0x1)(None)
	uint8                                        BitPad_2D : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_319[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EComponentMobility                Mobility;                                          // 0x1AE(0x1)(None)
	enum class EDetailMode                       DetailMode;                                        // 0x1AF(0x1)(None)
	FMulticastSparseDelegateProperty_            PhysicsVolumeChangedDelegate;                      // 0x1B0(0x1)(ZeroConstructor)
	uint8                                        Pad_31A[0x10F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIgnoreParentTransformUpdate : 1;                  // Mask: 0x1, PropSize: 0x10x2C0(0x1)(None)
	uint8                                        bUpdateChildOverlaps : 1;                          // Mask: 0x2, PropSize: 0x10x2C0(0x1)(None)
	uint8                                        BitPad_2E : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AttachmentChangedIncrementer;                      // 0x2C4(0x4)(None)

	static class UClass* StaticClass();
	static class USceneComponent* GetDefaultObj();

	void ToggleVisibility(bool bPropagateToChildren);
	void StopSound(class USoundBase* SoundToStop, float FadeOutTime);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, bool bSetChildrenRenderState);
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetMobility(enum class EComponentMobility NewMobility);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren, bool bSetChildrenRenderState);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_GetComponentToWorld(const struct FTransform& ReturnValue);
	void K2_GetComponentScale(const struct FVector& ReturnValue);
	void K2_GetComponentRotation(const struct FRotator& ReturnValue);
	void K2_GetComponentLocation(const struct FVector& ReturnValue);
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify);
	void K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool ReturnValue);
	void K2_AttachTo(class USceneComponent* InParent, class FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies, bool ReturnValue);
	void K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, const struct FHitResult& SweepHitResult, bool bTeleport);
	void IsVisible(bool ReturnValue);
	void IsSimulatingPhysics(class FName BoneName, bool ReturnValue);
	void IsAnySimulatingPhysics(bool ReturnValue);
	void GetUpVector(const struct FVector& ReturnValue);
	void GetSocketTransform(class FName InSocketName, enum class ERelativeTransformSpace TransformSpace, const struct FTransform& ReturnValue);
	void GetSocketRotation(class FName InSocketName, const struct FRotator& ReturnValue);
	void GetSocketQuaternion(class FName InSocketName, const struct FQuat& ReturnValue);
	void GetSocketLocation(class FName InSocketName, const struct FVector& ReturnValue);
	void GetShouldUpdatePhysicsVolume(bool ReturnValue);
	void GetRightVector(const struct FVector& ReturnValue);
	void GetRelativeTransform(const struct FTransform& ReturnValue);
	void GetPhysicsVolume(class APhysicsVolume* ReturnValue);
	void GetParentComponents(const TArray<class USceneComponent*>& Parents);
	void GetNumChildrenComponents(int32 ReturnValue);
	void GetForwardVector(const struct FVector& ReturnValue);
	void GetComponentVelocity(const struct FVector& ReturnValue);
	void GetChildrenComponents(bool bIncludeAllDescendants, const TArray<class USceneComponent*>& Children);
	void GetChildComponent(int32 ChildIndex, class USceneComponent* ReturnValue);
	void GetAttachSocketName(class FName ReturnValue);
	void GetAttachParent(class USceneComponent* ReturnValue);
	void GetAllSocketNames(const TArray<class FName>& ReturnValue);
	void DoesSocketExist(class FName InSocketName, bool ReturnValue);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};

// 0x3B8 (0x680 - 0x2C8)
// Class Engine.PrimitiveComponent
class UPrimitiveComponent : public USceneComponent
{
public:
	uint8                                        Pad_47A[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDrawDistance;                                   // 0x2E0(0x4)(None)
	float                                        LDMaxDrawDistance;                                 // 0x2E4(0x4)(None)
	float                                        CachedMaxDrawDistance;                             // 0x2E8(0x4)(None)
	enum class ESceneDepthPriorityGroup          DepthPriorityGroup;                                // 0x2EC(0x1)(None)
	enum class ESceneDepthPriorityGroup          ViewOwnerDepthPriorityGroup;                       // 0x2ED(0x1)(None)
	enum class EIndirectLightingCacheQuality     IndirectLightingCacheQuality;                      // 0x2EE(0x1)(None)
	enum class ELightmapType                     LightmapType;                                      // 0x2EF(0x1)(None)
	enum class EHLODBatchingPolicy               HLODBatchingPolicy;                                // 0x2F0(0x1)(None)
	uint8                                        bEnableAutoLODGeneration : 1;                      // Mask: 0x1, PropSize: 0x10x2F1(0x1)(None)
	uint8                                        bIsActorTextureStreamingBuiltData : 1;             // Mask: 0x2, PropSize: 0x10x2F1(0x1)(None)
	uint8                                        bIsValidTextureStreamingBuiltData : 1;             // Mask: 0x4, PropSize: 0x10x2F1(0x1)(None)
	uint8                                        bNeverDistanceCull : 1;                            // Mask: 0x8, PropSize: 0x10x2F1(0x1)(None)
	uint8                                        BitPad_41 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_42 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAlwaysCreatePhysicsState : 1;                     // Mask: 0x2, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bGenerateOverlapEvents : 1;                        // Mask: 0x4, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bMultiBodyOverlap : 1;                             // Mask: 0x8, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bTraceComplexOnMove : 1;                           // Mask: 0x10, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bReturnMaterialOnMove : 1;                         // Mask: 0x20, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bUseViewOwnerDepthPriorityGroup : 1;               // Mask: 0x40, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bAllowCullDistanceVolume : 1;                      // Mask: 0x80, PropSize: 0x10x2F2(0x1)(None)
	uint8                                        bVisibleInReflectionCaptures : 1;                  // Mask: 0x1, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bVisibleInRealTimeSkyCaptures : 1;                 // Mask: 0x2, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bVisibleInRayTracing : 1;                          // Mask: 0x4, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bRenderInMainPass : 1;                             // Mask: 0x8, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bRenderInDepthPass : 1;                            // Mask: 0x10, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bReceivesDecals : 1;                               // Mask: 0x20, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bHoldout : 1;                                      // Mask: 0x40, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bOwnerNoSee : 1;                                   // Mask: 0x80, PropSize: 0x10x2F3(0x1)(None)
	uint8                                        bOnlyOwnerSee : 1;                                 // Mask: 0x1, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bTreatAsBackgroundForOcclusion : 1;                // Mask: 0x2, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bUseAsOccluder : 1;                                // Mask: 0x4, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bSelectable : 1;                                   // Mask: 0x8, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bForceMipStreaming : 1;                            // Mask: 0x10, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bHasPerInstanceHitProxies : 1;                     // Mask: 0x20, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        CastShadow : 1;                                    // Mask: 0x40, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bEmissiveLightSource : 1;                          // Mask: 0x80, PropSize: 0x10x2F4(0x1)(None)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x1, PropSize: 0x10x2F5(0x1)(None)
	uint8                                        bAffectIndirectLightingWhileHidden : 1;            // Mask: 0x2, PropSize: 0x10x2F5(0x1)(None)
	uint8                                        bAffectDistanceFieldLighting : 1;                  // Mask: 0x4, PropSize: 0x10x2F5(0x1)(None)
	uint8                                        bCastDynamicShadow : 1;                            // Mask: 0x8, PropSize: 0x10x2F5(0x1)(None)
	uint8                                        bCastStaticShadow : 1;                             // Mask: 0x10, PropSize: 0x10x2F5(0x1)(None)
	uint8                                        BitPad_43 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EShadowCacheInvalidationBehavior  ShadowCacheInvalidationBehavior;                   // 0x2F6(0x1)(None)
	uint8                                        bCastVolumetricTranslucentShadow : 1;              // Mask: 0x1, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastContactShadow : 1;                            // Mask: 0x2, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bSelfShadowOnly : 1;                               // Mask: 0x4, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastFarShadow : 1;                                // Mask: 0x8, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastInsetShadow : 1;                              // Mask: 0x10, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastCinematicShadow : 1;                          // Mask: 0x20, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastHiddenShadow : 1;                             // Mask: 0x40, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bCastShadowAsTwoSided : 1;                         // Mask: 0x80, PropSize: 0x10x2F7(0x1)(None)
	uint8                                        bLightAsIfStatic : 1;                              // Mask: 0x1, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bLightAttachmentsAsGroup : 1;                      // Mask: 0x2, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bExcludeFromLightAttachmentGroup : 1;              // Mask: 0x4, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bReceiveMobileCSMShadows : 1;                      // Mask: 0x8, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bSingleSampleShadowFromStationaryLights : 1;       // Mask: 0x10, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bIgnoreRadialImpulse : 1;                          // Mask: 0x20, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bIgnoreRadialForce : 1;                            // Mask: 0x40, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bApplyImpulseOnDamage : 1;                         // Mask: 0x80, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bReplicatePhysicsToAutonomousProxy : 1;            // Mask: 0x1, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bFillCollisionUnderneathForNavmesh : 1;            // Mask: 0x2, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        AlwaysLoadOnClient : 1;                            // Mask: 0x4, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        AlwaysLoadOnServer : 1;                            // Mask: 0x8, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bUseEditorCompositing : 1;                         // Mask: 0x10, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bIsBeingMovedByEditor : 1;                         // Mask: 0x20, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bRenderCustomDepth : 1;                            // Mask: 0x40, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bVisibleInSceneCaptureOnly : 1;                    // Mask: 0x80, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        bHiddenInSceneCapture : 1;                         // Mask: 0x1, PropSize: 0x10x2FA(0x1)(None)
	uint8                                        bRayTracingFarField : 1;                           // Mask: 0x2, PropSize: 0x10x2FA(0x1)(None)
	uint8                                        BitPad_44 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasNoStreamableTextures : 1;                      // Mask: 0x8, PropSize: 0x10x2FA(0x1)(None)
	uint8                                        bStaticWhenNotMoveable : 1;                        // Mask: 0x10, PropSize: 0x10x2FA(0x1)(None)
	uint8                                        BitPad_45 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIgnoreUpdatingOwnersLastRenderTime : 1;           // Mask: 0x80, PropSize: 0x10x2FA(0x1)(None)
	uint8                                        Pad_481[0x1D];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EHasCustomNavigableGeometry       bHasCustomNavigableGeometry;                       // 0x318(0x1)(None)
	uint8                                        Pad_482[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECanBeCharacterBase               CanCharacterStepUpOn;                              // 0x31A(0x1)(None)
	struct FLightingChannels                     LightingChannels;                                  // 0x31B(0x1)(None)
	int32                                        RayTracingGroupId;                                 // 0x31C(0x4)(None)
	int32                                        VisibilityId;                                      // 0x320(0x4)(None)
	int32                                        CustomDepthStencilValue;                           // 0x324(0x4)(None)
	struct FCustomPrimitiveData                  CustomPrimitiveData;                               // 0x328(0x10)(None)
	struct FCustomPrimitiveData                  CustomPrimitiveDataInternal;                       // 0x338(0x10)(None)
	uint8                                        Pad_485[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TranslucencySortPriority;                          // 0x350(0x4)(None)
	float                                        TranslucencySortDistanceOffset;                    // 0x354(0x4)(None)
	TArray<class URuntimeVirtualTexture*>        RuntimeVirtualTextures;                            // 0x358(0x10)(ZeroConstructor)
	int8                                         VirtualTextureLodBias;                             // 0x368(0x1)(None)
	int8                                         VirtualTextureCullMips;                            // 0x369(0x1)(None)
	int8                                         VirtualTextureMinCoverage;                         // 0x36A(0x1)(None)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType;                      // 0x36B(0x1)(None)
	uint8                                        Pad_486[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BoundsScale;                                       // 0x37C(0x4)(None)
	uint8                                        Pad_487[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        MoveIgnoreActors;                                  // 0x3A0(0x10)(ZeroConstructor)
	TArray<class UPrimitiveComponent*>           MoveIgnoreComponents;                              // 0x3B0(0x10)(ZeroConstructor)
	uint8                                        Pad_488[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         BodyInstance;                                      // 0x420(0x138)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentHit;                                    // 0x558(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentBeginOverlap;                           // 0x559(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentEndOverlap;                             // 0x55A(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentWake;                                   // 0x55B(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnComponentSleep;                                  // 0x55C(0x1)(ZeroConstructor)
	uint8                                        Pad_48B[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastSparseDelegateProperty_            OnComponentPhysicsStateChanged;                    // 0x55E(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnBeginCursorOver;                                 // 0x55F(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnEndCursorOver;                                   // 0x560(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnClicked;                                         // 0x561(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnReleased;                                        // 0x562(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchBegin;                                 // 0x563(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchEnd;                                   // 0x564(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchEnter;                                 // 0x565(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            OnInputTouchLeave;                                 // 0x566(0x1)(ZeroConstructor)
	enum class ERayTracingGroupCullingPriority   RayTracingGroupCullingPriority;                    // 0x567(0x1)(None)
	enum class ERendererStencilMask              CustomDepthStencilWriteMask;                       // 0x568(0x1)(None)
	uint8                                        Pad_48D[0x1F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        ExcludeFromHLODLevels;                             // 0x588(0x1)(None)
	uint8                                        Pad_48E[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimitiveComponent*                   LODParentPrimitive;                                // 0x590(0x8)(ZeroConstructor)
	uint8                                        bForcePreventBlockingProjectiles : 1;              // Mask: 0x1, PropSize: 0x10x598(0x1)(None)
	uint8                                        bForceOverlapEvents : 1;                           // Mask: 0x2, PropSize: 0x10x598(0x1)(None)
	uint8                                        bIsInForeground : 1;                               // Mask: 0x4, PropSize: 0x10x598(0x1)(None)
	uint8                                        bUseInternalOctree : 1;                            // Mask: 0x8, PropSize: 0x10x598(0x1)(None)
	uint8                                        bUseInternalOctreeOnClient : 1;                    // Mask: 0x10, PropSize: 0x10x598(0x1)(None)
	uint8                                        BitPad_46 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceDynamicPhysics : 1;                          // Mask: 0x40, PropSize: 0x10x598(0x1)(None)
	uint8                                        bPreventCharacterBasing : 1;                       // Mask: 0x80, PropSize: 0x10x598(0x1)(None)
	uint8                                        BitPad_47 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsAbstractBasingComponent : 1;                    // Mask: 0x2, PropSize: 0x10x599(0x1)(None)
	uint8                                        bClimbable : 1;                                    // Mask: 0x4, PropSize: 0x10x599(0x1)(None)
	uint8                                        bUseAbsoluteMaxDrawDisatance : 1;                  // Mask: 0x8, PropSize: 0x10x599(0x1)(None)
	uint8                                        bMovableUseDynamicDrawDistance : 1;                // Mask: 0x10, PropSize: 0x10x599(0x1)(None)
	uint8                                        bIncludeBoundsRadiusInDrawDistances : 1;           // Mask: 0x20, PropSize: 0x10x599(0x1)(None)
	uint8                                        bExcludeFromLevelBounds : 1;                       // Mask: 0x40, PropSize: 0x10x599(0x1)(None)
	uint8                                        bIgnoredByCharacterEncroachment : 1;               // Mask: 0x80, PropSize: 0x10x599(0x1)(None)
	uint8                                        bPreventDamage : 1;                                // Mask: 0x1, PropSize: 0x10x59A(0x1)(None)
	uint8                                        BitPad_48 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_492[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ObjectLayer;                                       // 0x59C(0x4)(None)
	float                                        OverrideStepHeight;                                // 0x5A0(0x4)(None)
	uint8                                        Pad_493[0x98];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        InternalOctreeMask;                                // 0x63C(0x4)(None)
	uint8                                        Pad_494[0x1C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ProxyMeshID;                                       // 0x65C(0x4)(None)
	bool                                         bIsProxyMeshParent;                                // 0x660(0x1)(None)
	uint8                                        Pad_495[0x1F];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimitiveComponent* GetDefaultObj();

	void WasRecentlyVisible(bool ReturnValue);
	void WasRecentlyRendered(float Tolerance, bool ReturnValue);
	void WakeRigidBody(class FName BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetVisibleInSceneCaptureOnly(bool bValue);
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);
	void SetVectorParameterForDefaultCustomPrimitiveData(class FName ParameterName, const struct FVector4& Value);
	void SetVectorParameterForCustomPrimitiveData(class FName ParameterName, const struct FVector4& Value);
	void SetUseCCD(bool InUseCCD, class FName BoneName);
	void SetTranslucentSortPriority(int32 NewTranslucentSortPriority);
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);
	void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable);
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
	void SetSimulatePhysics(bool bSimulate);
	void SetScalarParameterForDefaultCustomPrimitiveData(class FName ParameterName, float Value);
	void SetScalarParameterForCustomPrimitiveData(class FName ParameterName, float Value);
	void SetRenderInMainPass(bool bValue);
	void SetRenderInDepthPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetReceivesDecals(bool bNewReceivesDecals);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, class FName BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(class FName MaterialSlotName, class UMaterialInterface* Material);
	void SetMaterial(int32 ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(class FName BoneName, float InMassScale);
	void SetMassOverrideInKg(class FName BoneName, float MassInKg, bool bOverrideMass);
	void SetLinearDamping(float InDamping);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);
	void SetInternalOctreeMask(int32 InOctreeMask, bool bReregisterWithTree);
	void SetHoldout(bool bNewHoldout);
	void SetHiddenInSceneCapture(bool bValue);
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);
	void SetExcludeForSpecificHLODLevels(const TArray<int32>& InExcludeForSpecificHLODLevels);
	void SetExcludedFromHLODLevel(enum class EHLODLevelExclusion HLODLevel, bool bExcluded);
	void SetEnableGravity(bool bGravityEnabled);
	void SetEmissiveLightSource(bool NewEmissiveLightSource);
	void SetDefaultCustomPrimitiveDataVector4(int32 DataIndex, const struct FVector4& Value);
	void SetDefaultCustomPrimitiveDataVector3(int32 DataIndex, const struct FVector& Value);
	void SetDefaultCustomPrimitiveDataVector2(int32 DataIndex, const struct FVector2D& Value);
	void SetDefaultCustomPrimitiveDataFloat(int32 DataIndex, float Value);
	void SetCustomPrimitiveDataVector4(int32 DataIndex, const struct FVector4& Value);
	void SetCustomPrimitiveDataVector3(int32 DataIndex, const struct FVector& Value);
	void SetCustomPrimitiveDataVector2(int32 DataIndex, const struct FVector2D& Value);
	void SetCustomPrimitiveDataFloat(int32 DataIndex, float Value);
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit);
	void SetCustomDepthStencilValue(int32 Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(enum class EDOFMode ConstraintMode);
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse);
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse);
	void SetCollisionResponseSet(const struct FCollisionResponseSet& Responses);
	void SetCollisionProfileName(class FName InCollisionProfileName, bool bUpdateOverlaps);
	void SetCollisionObjectType(enum class ECollisionChannel Channel);
	void SetCollisionEnabled(enum class ECollisionEnabled NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, class FName BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetCastInsetShadow(bool bInCastInsetShadow);
	void SetCastHiddenShadow(bool NewCastHiddenShadow);
	void SetCastContactShadow(bool bInCastContactShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllUseCCD(bool InUseCCD);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden);
	void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting);
	void SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting);
	void ScaleByMomentOfInertia(const struct FVector& InputVector, class FName BoneName, const struct FVector& ReturnValue);
	void PutRigidBodyToSleep(class FName BoneName);
	void K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, const struct FVector& HitLocation, const struct FVector& HitNormal, class FName BoneName, const struct FHitResult& OutHit, bool ReturnValue);
	void K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, const struct FVector& HitLocation, const struct FVector& HitNormal, class FName BoneName, const struct FHitResult& OutHit, bool ReturnValue);
	void K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, const struct FVector& HitLocation, const struct FVector& HitNormal, class FName BoneName, const struct FHitResult& OutHit, bool ReturnValue);
	void K2_IsQueryCollisionEnabled(bool ReturnValue);
	void K2_IsPhysicsCollisionEnabled(bool ReturnValue);
	void K2_IsCollisionEnabled(bool ReturnValue);
	void K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, const struct FVector& HitLocation, const struct FVector& HitNormal, class FName BoneName, const struct FHitResult& OutHit, bool ReturnValue);
	void IsOverlappingComponent(class UPrimitiveComponent* OtherComp, bool ReturnValue);
	void IsOverlappingActor(class AActor* Other, bool ReturnValue);
	void IsGravityEnabled(bool ReturnValue);
	void IsExcludedFromHLODLevel(enum class EHLODLevelExclusion HLODLevel, bool ReturnValue);
	void IsAnyRigidBodyAwake(bool ReturnValue);
	void InvalidateLumenSurfaceCache();
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	void GetWalkableSlopeOverride(const struct FWalkableSlopeOverride& ReturnValue);
	void GetStaticWhenNotMoveable(bool ReturnValue);
	void GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, class FName BoneName, const struct FVector& ReturnValue);
	void GetPhysicsLinearVelocity(class FName BoneName, const struct FVector& ReturnValue);
	void GetPhysicsAngularVelocityInRadians(class FName BoneName, const struct FVector& ReturnValue);
	void GetPhysicsAngularVelocityInDegrees(class FName BoneName, const struct FVector& ReturnValue);
	void GetOverlappingComponents(const TArray<class UPrimitiveComponent*>& OutOverlappingComponents);
	void GetOverlappingActors(const TArray<class AActor*>& OverlappingActors, class UClass* ClassFilter);
	void GetNumMaterials(int32 ReturnValue);
	void GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32 SectionIndex, class UMaterialInterface* ReturnValue);
	void GetMaterial(int32 ElementIndex, class UMaterialInterface* ReturnValue);
	void GetMassScale(class FName BoneName, float ReturnValue);
	void GetMass(float ReturnValue);
	void GetLinearDamping(float ReturnValue);
	void GetInertiaTensor(class FName BoneName, const struct FVector& ReturnValue);
	void GetGenerateOverlapEvents(bool ReturnValue);
	void GetExcludeForSpecificHLODLevels(const TArray<int32>& ReturnValue);
	void GetCustomPrimitiveDataIndexForVectorParameter(class FName ParameterName, int32 ReturnValue);
	void GetCustomPrimitiveDataIndexForScalarParameter(class FName ParameterName, int32 ReturnValue);
	void GetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse ReturnValue);
	void GetCollisionResponseSet(const struct FCollisionResponseSet& OutResponses);
	void GetCollisionProfileName(class FName ReturnValue);
	void GetCollisionObjectType(enum class ECollisionChannel ReturnValue);
	void GetCollisionEnabled(enum class ECollisionEnabled ReturnValue);
	void GetClosestPointOnCollision(const struct FVector& Point, const struct FVector& OutPointOnBody, class FName BoneName, float ReturnValue);
	void GetCenterOfMass(class FName BoneName, const struct FVector& ReturnValue);
	void GetBodyInstanceAsyncPhysicsTickHandle(class FName BoneName, bool bGetWelded, int32 Index, const struct FBodyInstanceAsyncPhysicsTickHandle& ReturnValue);
	void GetAngularDamping(float ReturnValue);
	void CreateDynamicMaterialInstance(int32 ElementIndex, class UMaterialInterface* SourceMaterial, class FName OptionalName, class UMaterialInstanceDynamic* ReturnValue);
	void CreateAndSetMaterialInstanceDynamicFromMaterial(int32 ElementIndex, class UMaterialInterface* Parent, class UMaterialInstanceDynamic* ReturnValue);
	void CreateAndSetMaterialInstanceDynamic(int32 ElementIndex, class UMaterialInstanceDynamic* ReturnValue);
	void CopyArrayOfMoveIgnoreComponents(const TArray<class UPrimitiveComponent*>& ReturnValue);
	void CopyArrayOfMoveIgnoreActors(const TArray<class AActor*>& ReturnValue);
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	void CanCharacterStepUp(class APawn* Pawn, bool ReturnValue);
	void AddVelocityChangeImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void AddTorqueInRadians(const struct FVector& Torque, class FName BoneName, bool bAccelChange);
	void AddTorqueInDegrees(const struct FVector& Torque, class FName BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void AddImpulse(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddForceAtLocationLocal(const struct FVector& Force, const struct FVector& Location, class FName BoneName);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, class FName BoneName);
	void AddForce(const struct FVector& Force, class FName BoneName, bool bAccelChange);
	void AddAngularImpulseInRadians(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
};

// 0x0 (0x680 - 0x680)
// Class Engine.FXSystemComponent
class UFXSystemComponent : public UPrimitiveComponent
{
public:

	static class UClass* StaticClass();
	static class UFXSystemComponent* GetDefaultObj();

	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);
	void SetUseAutoManageAttachment(bool bAutoManage);
	void SetIntParameter(class FName ParameterName, int32 Param);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetEmitterEnable(class FName EmitterName, bool bNewEnableState);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetBoolParameter(class FName ParameterName, bool Param);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule);
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	void ReleaseToPool();
	void GetFXSystemAsset(class UFXSystemAsset* ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class Engine.BlueprintAsyncActionBase
class UBlueprintAsyncActionBase : public UObject
{
public:
	uint8                                        Pad_52F[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlueprintAsyncActionBase* GetDefaultObj();

	void Activate();
};

// 0x48 (0x70 - 0x28)
// Class Engine.FXSystemAsset
class UFXSystemAsset : public UObject
{
public:
	uint32                                       MaxPoolSize;                                       // 0x28(0x4)(None)
	uint32                                       PoolPrimeSize;                                     // 0x2C(0x4)(None)
	uint8                                        Pad_533[0x40];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFXSystemAsset* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.AnimNotifyState
class UAnimNotifyState : public UObject
{
public:
	uint8                                        Pad_544[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIgnoreOnDediServer;                               // 0x29(0x1)(None)
	bool                                         bCanClobberEventReference;                         // 0x2A(0x1)(None)
	uint8                                        Pad_545[0x5];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState* GetDefaultObj();

	void Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
	void Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
	void Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
	void GetNotifyName(const class FString& ReturnValue);
	void GetDefaultTriggerWeightThreshold(float ReturnValue);
};

// 0x18 (0x40 - 0x28)
// Class Engine.AnimNotify
class UAnimNotify : public UObject
{
public:
	uint8                                        Pad_554[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIgnoreOnDediServer;                               // 0x38(0x1)(None)
	bool                                         bCanClobberEventReference;                         // 0x39(0x1)(None)
	uint8                                        Pad_555[0x6];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify* GetDefaultObj();

	void Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
	void GetNotifyName(const class FString& ReturnValue);
	void GetDefaultTriggerWeightThreshold(float ReturnValue);
};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.TrueSkyActorParent
class ATrueSkyActorParent : public AActor
{
public:

	static class UClass* StaticClass();
	static class ATrueSkyActorParent* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.Subsystem
class USubsystem : public UObject
{
public:
	uint8                                        Pad_559[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USubsystem* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.DynamicSubsystem
class UDynamicSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass();
	static class UDynamicSubsystem* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.EngineSubsystem
class UEngineSubsystem : public UDynamicSubsystem
{
public:

	static class UClass* StaticClass();
	static class UEngineSubsystem* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.OnlineBlueprintCallProxyBase
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:

	static class UClass* StaticClass();
	static class UOnlineBlueprintCallProxyBase* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.Player
class UPlayer : public UObject
{
public:
	uint8                                        Pad_560[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerController*                     PlayerController;                                  // 0x30(0x8)(None)
	int32                                        CurrentNetSpeed;                                   // 0x38(0x4)(None)
	int32                                        ConfiguredInternetSpeed;                           // 0x3C(0x4)(None)
	int32                                        ConfiguredLanSpeed;                                // 0x40(0x4)(None)
	uint8                                        Pad_562[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayer* GetDefaultObj();

};

// 0x1D98 (0x1DE8 - 0x50)
// Class Engine.NetConnection
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>              Children;                                          // 0x50(0x10)(ZeroConstructor)
	class UNetDriver*                            Driver;                                            // 0x60(0x8)(ZeroConstructor)
	class UClass*                                PackageMapClass;                                   // 0x68(0x8)(ZeroConstructor)
	class UPackageMap*                           PackageMap;                                        // 0x70(0x8)(ZeroConstructor)
	TArray<class UChannel*>                      OpenChannels;                                      // 0x78(0x10)(ZeroConstructor)
	TArray<class AActor*>                        SentTemporaries;                                   // 0x88(0x10)(ZeroConstructor)
	class AActor*                                ViewTarget;                                        // 0x98(0x8)(ZeroConstructor)
	class AActor*                                OwningActor;                                       // 0xA0(0x8)(ZeroConstructor)
	int32                                        MaxPacket;                                         // 0xA8(0x4)(None)
	uint8                                        InternalAck : 1;                                   // Mask: 0x1, PropSize: 0x10xAC(0x1)(None)
	uint8                                        BitPad_5A : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_567[0xBB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FUniqueNetIdRepl                      PlayerID;                                          // 0x168(0x30)(None)
	uint8                                        Pad_568[0x48];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastReceiveTime;                                   // 0x1E0(0x8)(None)
	uint8                                        Pad_569[0x11E0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DefaultMaxChannelSize;                             // 0x13C8(0x4)(None)
	uint8                                        Pad_56A[0x304];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UChannel*>                      ChannelsToTick;                                    // 0x16D0(0x10)(ZeroConstructor)
	uint8                                        Pad_56B[0x700];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHasArkLoginLock : 1;                              // Mask: 0x1, PropSize: 0x10x1DE0(0x1)(None)
	uint8                                        Pad_56C[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNetConnection* GetDefaultObj();

};

// 0x768 (0x790 - 0x28)
// Class Engine.NetDriver
class UNetDriver : public UObject
{
public:
	uint8                                        Pad_56D[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NetConnectionClassName;                            // 0x30(0x10)(None)
	class FString                                ReplicationDriverClassName;                        // 0x40(0x10)(None)
	class FString                                ReplicationBridgeClassName;                        // 0x50(0x10)(None)
	int32                                        MaxDownloadSize;                                   // 0x60(0x4)(None)
	uint8                                        bClampListenServerTickRate : 1;                    // Mask: 0x1, PropSize: 0x10x64(0x1)(None)
	uint8                                        BitPad_5B : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_56E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NetServerMaxTickRate;                              // 0x68(0x4)(None)
	int32                                        MaxNetTickRate;                                    // 0x6C(0x4)(None)
	int32                                        MaxInternetClientRate;                             // 0x70(0x4)(None)
	int32                                        MaxClientRate;                                     // 0x74(0x4)(None)
	float                                        ServerTravelPause;                                 // 0x78(0x4)(None)
	float                                        SpawnPrioritySeconds;                              // 0x7C(0x4)(None)
	float                                        RelevantTimeout;                                   // 0x80(0x4)(None)
	float                                        KeepAliveTime;                                     // 0x84(0x4)(None)
	float                                        InitialConnectTimeout;                             // 0x88(0x4)(None)
	float                                        ConnectionTimeout;                                 // 0x8C(0x4)(None)
	float                                        TimeoutMultiplierForUnoptimizedBuilds;             // 0x90(0x4)(None)
	uint8                                        Pad_56F[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        ServerConnection;                                  // 0x98(0x8)(ZeroConstructor)
	TArray<class UNetConnection*>                ClientConnections;                                 // 0xA0(0x10)(ZeroConstructor)
	uint8                                        Pad_570[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RecentlyDisconnectedTrackingTime;                  // 0x110(0x4)(None)
	uint8                                        Pad_571[0x3C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x150(0x8)(ZeroConstructor)
	class UPackage*                              WorldPackage;                                      // 0x158(0x8)(ZeroConstructor)
	uint8                                        Pad_572[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                NetConnectionClass;                                // 0x180(0x8)(ZeroConstructor)
	class UClass*                                ReplicationDriverClass;                            // 0x188(0x8)(ZeroConstructor)
	class UClass*                                ReplicationBridgeClass;                            // 0x190(0x8)(ZeroConstructor)
	uint8                                        Pad_573[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  NetDriverName;                                     // 0x1A8(0x8)(None)
	TArray<struct FChannelDefinition>            ChannelDefinitions;                                // 0x1B0(0x10)(ZeroConstructor)
	TMap<class FName, struct FChannelDefinition> ChannelDefinitionMap;                              // 0x1C0(0x50)(ZeroConstructor)
	TArray<class UChannel*>                      ActorChannelPool;                                  // 0x210(0x10)(ZeroConstructor)
	uint8                                        Pad_574[0x21];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_5C : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNoTimeouts : 1;                                   // Mask: 0x40, PropSize: 0x10x241(0x1)(None)
	uint8                                        bNeverApplyNetworkEmulationSettings : 1;           // Mask: 0x80, PropSize: 0x10x241(0x1)(None)
	uint8                                        Pad_575[0x4DE];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UReplicationDriver*                    ReplicationDriver;                                 // 0x720(0x8)(None)
	uint8                                        Pad_576[0x68];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNetDriver* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineEngineInterface
class UOnlineEngineInterface : public UObject
{
public:

	static class UClass* StaticClass();
	static class UOnlineEngineInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineSession
class UOnlineSession : public UObject
{
public:

	static class UClass* StaticClass();
	static class UOnlineSession* GetDefaultObj();

};

// 0x40 (0x6C0 - 0x680)
// Class Engine.MeshComponent
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>            OverrideMaterials;                                 // 0x680(0x10)(ZeroConstructor)
	class UMaterialInterface*                    OverlayMaterial;                                   // 0x690(0x8)(ZeroConstructor)
	float                                        OverlayMaterialMaxDrawDistance;                    // 0x698(0x4)(None)
	uint8                                        Pad_593[0x14];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableMaterialParameterCaching : 1;               // Mask: 0x1, PropSize: 0x10x6B0(0x1)(None)
	uint8                                        BitPad_5E : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_594[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DamageFXActorToSpawn;                              // 0x6B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMeshComponent* GetDefaultObj();

	void SetVectorParameterValueOnMaterials(class FName ParameterName, const struct FVector& ParameterValue);
	void SetScalarParameterValueOnMaterials(class FName ParameterName, float ParameterValue);
	void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);
	void SetOverlayMaterial(class UMaterialInterface* NewOverlayMaterial);
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32 CinematicTextureGroups);
	void MulticastShowInstance(int32 OriginalIndex);
	void MulticastHideInstance(int32 OriginalIndex, const struct FVector& HitDirection, float Damage, float TotalHealth, bool bCheckHideAttachedDecals);
	void IsMaterialSlotNameValid(class FName MaterialSlotName, bool ReturnValue);
	void GetOverlayMaterial(class UMaterialInterface* ReturnValue);
	void GetMaterialSlotNames(const TArray<class FName>& ReturnValue);
	void GetMaterials(const TArray<class UMaterialInterface*>& ReturnValue);
	void GetMaterialIndex(class FName MaterialSlotName, int32 ReturnValue);
};

// 0x88 (0xB0 - 0x28)
// Class Engine.MaterialExpression
class UMaterialExpression : public UObject
{
public:
	int32                                        MaterialExpressionEditorX;                         // 0x28(0x4)(None)
	int32                                        MaterialExpressionEditorY;                         // 0x2C(0x4)(None)
	class UEdGraphNode*                          GraphNode;                                         // 0x30(0x8)(ZeroConstructor)
	class UMaterialExpression*                   SubgraphExpression;                                // 0x38(0x8)(ZeroConstructor)
	uint8                                        Pad_599[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 MaterialExpressionGuid;                            // 0x50(0x10)(None)
	class UMaterial*                             Material;                                          // 0x60(0x8)(ZeroConstructor)
	class UMaterialFunction*                     Function;                                          // 0x68(0x8)(None)
	class FString                                Desc;                                              // 0x70(0x10)(None)
	uint8                                        Pad_59A[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bRealtimePreview : 1;                              // Mask: 0x1, PropSize: 0x10x84(0x1)(None)
	uint8                                        bNeedToUpdatePreview : 1;                          // Mask: 0x2, PropSize: 0x10x84(0x1)(None)
	uint8                                        BitPad_5F : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_59B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsParameterExpression : 1;                        // Mask: 0x1, PropSize: 0x10x88(0x1)(None)
	uint8                                        BitPad_60 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_59C[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCommentBubbleVisible : 1;                         // Mask: 0x1, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bShowOutputNameOnPin : 1;                          // Mask: 0x2, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bShowMaskColorsOnPin : 1;                          // Mask: 0x4, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bHidePreviewWindow : 1;                            // Mask: 0x8, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bCollapsed : 1;                                    // Mask: 0x10, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bShaderInputData : 1;                              // Mask: 0x20, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bShowInputs : 1;                                   // Mask: 0x40, PropSize: 0x10x8C(0x1)(None)
	uint8                                        bShowOutputs : 1;                                  // Mask: 0x80, PropSize: 0x10x8C(0x1)(None)
	uint8                                        Pad_59E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FText>                          MenuCategories;                                    // 0x90(0x10)(None)
	TArray<struct FExpressionOutput>             Outputs;                                           // 0xA0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpression* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class Engine.Channel
class UChannel : public UObject
{
public:
	class UNetConnection*                        Connection;                                        // 0x28(0x8)(None)
	uint8                                        Pad_59F[0x40];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UChannel* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.ControlChannel
class UControlChannel : public UChannel
{
public:
	uint8                                        Pad_5A0[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UControlChannel* GetDefaultObj();

};

// 0x198 (0x1C0 - 0x28)
// Class Engine.GameInstance
class UGameInstance : public UObject
{
public:
	uint8                                        Pad_5B3[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULocalPlayer*>                  LocalPlayers;                                      // 0x38(0x10)(ZeroConstructor)
	class UOnlineSession*                        OnlineSession;                                     // 0x48(0x8)(ZeroConstructor)
	TArray<class UObject*>                       ReferencedObjects;                                 // 0x50(0x10)(ZeroConstructor)
	uint8                                        Pad_5B4[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPawnControllerChangedDelegates;                  // 0x78(0x10)(ZeroConstructor)
	uint8                                        Pad_5B6[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInputDeviceConnectionChange;                     // 0xA0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnUserInputDevicePairingChange;                    // 0xB0(0x10)(None)
	uint8                                        Pad_5B7[0x100];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameInstance* GetDefaultObj();

	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(enum class ETravelFailure FailureType);
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer);
	void DebugRemovePlayer(int32 ControllerId);
	void DebugCreatePlayer(int32 ControllerId);
};

// 0x0 (0x30 - 0x30)
// Class Engine.GameInstanceSubsystem
class UGameInstanceSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass();
	static class UGameInstanceSubsystem* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.WorldSubsystem
class UWorldSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass();
	static class UWorldSubsystem* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.RecentPlayersWorldSubsystemBase
class URecentPlayersWorldSubsystemBase : public UWorldSubsystem
{
public:

	static class UClass* StaticClass();
	static class URecentPlayersWorldSubsystemBase* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetImportData
class UAssetImportData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAssetImportData* GetDefaultObj();

};

// 0x360 (0xA20 - 0x6C0)
// Class Engine.SkinnedMeshComponent
class USkinnedMeshComponent : public UMeshComponent
{
public:
	uint8                                        Pad_62A[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         SkeletalMesh;                                      // 0x6C8(0x8)(ZeroConstructor)
	class USkinnedAsset*                         SkinnedAsset;                                      // 0x6D0(0x8)(ZeroConstructor)
	TWeakObjectPtr<class USkinnedMeshComponent>  LeaderPoseComponent;                               // 0x6D8(0x8)(ZeroConstructor)
	TArray<enum class ESkinCacheUsage>           SkinCacheUsage;                                    // 0x6E0(0x10)(None)
	bool                                         bSetMeshDeformer;                                  // 0x6F0(0x1)(None)
	uint8                                        Pad_62F[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UMeshDeformer*                         MeshDeformer;                                      // 0x6F8(0x8)(ZeroConstructor)
	class UMeshDeformerInstanceSettings*         MeshDeformerInstanceSettings;                      // 0x700(0x8)(ZeroConstructor)
	class UMeshDeformerInstance*                 MeshDeformerInstance;                              // 0x708(0x8)(ZeroConstructor)
	uint8                                        Pad_631[0x178];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsAsset*                         PhysicsAssetOverride;                              // 0x888(0x8)(ZeroConstructor)
	int32                                        ForcedLodModel;                                    // 0x890(0x4)(None)
	int32                                        MinLodModel;                                       // 0x894(0x4)(None)
	uint8                                        Pad_632[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StreamingDistanceMultiplier;                       // 0x8A0(0x4)(None)
	uint8                                        Pad_634[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkelMeshComponentLODInfo>     LODInfo;                                           // 0x8B0(0x10)(None)
	uint8                                        Pad_635[0x24];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EVisibilityBasedAnimTickOption    VisibilityBasedAnimTickOption;                     // 0x8E4(0x1)(None)
	uint8                                        Pad_637[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_6D : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideMinLod : 1;                               // Mask: 0x8, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bUseBoundsFromLeaderPoseComponent : 1;             // Mask: 0x10, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bForceWireframe : 1;                               // Mask: 0x20, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bDisableMorphTarget : 1;                           // Mask: 0x40, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bHideSkin : 1;                                     // Mask: 0x80, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bPerBoneMotionBlur : 1;                            // Mask: 0x1, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bComponentUseFixedSkelBounds : 1;                  // Mask: 0x2, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bConsiderAllBodiesForBounds : 1;                   // Mask: 0x4, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bSyncAttachParentLOD : 1;                          // Mask: 0x8, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bCanHighlightSelectedSections : 1;                 // Mask: 0x10, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bRecentlyRendered : 1;                             // Mask: 0x20, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bCastCapsuleDirectShadow : 1;                      // Mask: 0x40, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bCastCapsuleIndirectShadow : 1;                    // Mask: 0x80, PropSize: 0x10x8E7(0x1)(None)
	uint8                                        bCPUSkinning : 1;                                  // Mask: 0x1, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bEnableUpdateRateOptimizations : 1;                // Mask: 0x2, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bDisplayDebugUpdateRateOptimizations : 1;          // Mask: 0x4, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bRenderStatic : 1;                                 // Mask: 0x8, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bIgnoreLeaderPoseComponentLOD : 1;                 // Mask: 0x10, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        BitPad_6E : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCachedLocalBoundsUpToDate : 1;                    // Mask: 0x80, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bCachedWorldSpaceBoundsUpToDate : 1;               // Mask: 0x1, PropSize: 0x10x8E9(0x1)(None)
	uint8                                        BitPad_6F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceMeshObjectUpdate : 1;                        // Mask: 0x4, PropSize: 0x10x8E9(0x1)(None)
	uint8                                        bForceUpdateDynamicDataImmediately : 1;            // Mask: 0x8, PropSize: 0x10x8E9(0x1)(None)
	uint8                                        BitPad_70 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_71 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFollowerShouldTickPose : 1;                       // Mask: 0x2, PropSize: 0x10x8EA(0x1)(None)
	uint8                                        BitPad_72 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_638[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CapsuleIndirectShadowMinVisibility;                // 0x8EC(0x4)(None)
	uint8                                        Pad_639[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoxSphereBounds                      CachedWorldOrLocalSpaceBounds;                     // 0x928(0x38)(None)
	struct FMatrix                               CachedWorldToLocalTransform;                       // 0x960(0x80)(None)
	uint8                                        Pad_63A[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceUpdateKinematic : 1;                         // Mask: 0x1, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bChartDistanceFactor : 1;                          // Mask: 0x2, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bFreeSpaceBasesOnUnregister : 1;                   // Mask: 0x4, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bForceTickPoseWithinRange : 1;                     // Mask: 0x8, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bAlwaysUpdateMeshForShadowRendering : 1;           // Mask: 0x10, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bAddAttachedParentBounds : 1;                      // Mask: 0x20, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        bBasedPawnsTriggerChildTick : 1;                   // Mask: 0x40, PropSize: 0x10x9F8(0x1)(None)
	uint8                                        BitPad_73 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_63B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceTickPoseWithinRangeSquared;                   // 0x9FC(0x4)(None)
	class USkinnedMeshComponent*                 OverrideTickingVisiblityMesh;                      // 0xA00(0x8)(ZeroConstructor)
	float                                        ShadowedRecentlyRenderedBoundsScaleMultiplier;     // 0xA08(0x4)(None)
	uint8                                        Pad_63C[0x14];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkinnedMeshComponent* GetDefaultObj();

	void UnsetMeshDeformer();
	void UnloadSkinWeightProfile(class FName InProfileName);
	void UnHideBoneByName(class FName BoneName);
	void TransformToBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, const struct FVector& OutPosition, const struct FRotator& OutRotation);
	void TransformFromBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, const struct FVector& OutPosition, const struct FRotator& OutRotation);
	void ShowMaterialSection(int32 MaterialID, int32 SectionIndex, bool bShow, int32 LODIndex);
	void ShowAllMaterialSections(int32 LODIndex);
	void SetVertexOffsetUsage(int32 LODIndex, int32 Usage);
	void SetVertexColorOverride_LinearColor(int32 LODIndex, const TArray<struct FLinearColor>& VertexColors);
	void SetSkinWeightProfile(class FName InProfileName, bool ReturnValue);
	void SetSkinWeightOverride(int32 LODIndex, const TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights);
	void SetSkinnedAssetAndUpdate(class USkinnedAsset* NewMesh, bool bReinitPose);
	void SetRenderStatic(bool bNewValue);
	void SetPreSkinningOffsets(int32 LODIndex, const TArray<struct FVector>& Offsets);
	void SetPostSkinningOffsets(int32 LODIndex, const TArray<struct FVector>& Offsets);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int32 InNewMinLOD);
	void SetMeshDeformer(class UMeshDeformer* InMeshDeformer);
	void SetLeaderPoseComponent(class USkinnedMeshComponent* NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose);
	void SetForcedLOD(int32 InNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);
	void IsUsingSkinWeightProfile(bool ReturnValue);
	void IsMaterialSectionShown(int32 MaterialID, int32 LODIndex, bool ReturnValue);
	void IsBoneHiddenByName(class FName BoneName, bool ReturnValue);
	void HideBoneByName(class FName BoneName, enum class EPhysBodyOp PhysBodyOption);
	void GetVertexOffsetUsage(int32 LODIndex, int32 ReturnValue);
	void GetTwistAndSwingAngleOfDeltaRotationFromRefPose(class FName BoneName, float OutTwistAngle, float OutSwingAngle, bool ReturnValue);
	void GetSocketBoneName(class FName InSocketName, class FName ReturnValue);
	void GetSkinnedAsset(class USkinnedAsset* ReturnValue);
	void GetSkeletalMesh_DEPRECATED(class USkeletalMesh* ReturnValue);
	void GetRefPoseTransform(int32 BoneIndex, const struct FTransform& ReturnValue);
	void GetRefPosePosition(int32 BoneIndex, const struct FVector& ReturnValue);
	void GetPredictedLODLevel(int32 ReturnValue);
	void GetParentBone(class FName BoneName, class FName ReturnValue);
	void GetNumLODs(int32 ReturnValue);
	void GetNumBones(int32 ReturnValue);
	void GetMeshDeformerInstance(class UMeshDeformerInstance* ReturnValue);
	void GetForcedLOD(int32 ReturnValue);
	void GetDeltaTransformFromRefPose(class FName BoneName, class FName BaseName, const struct FTransform& ReturnValue);
	void GetCurrentSkinWeightProfileName(class FName ReturnValue);
	void GetBoneName(int32 BoneIndex, class FName ReturnValue);
	void GetBoneIndex(class FName BoneName, int32 ReturnValue);
	void FindClosestBone_K2(const struct FVector& TestLocation, const struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset, class FName ReturnValue);
	void ClearVertexColorOverride(int32 LODIndex);
	void ClearSkinWeightProfile();
	void ClearSkinWeightOverride(int32 LODIndex);
	void BoneIsChildOf(class FName BoneName, class FName ParentBoneName, bool ReturnValue);
};

// 0x9B8 (0x13D8 - 0xA20)
// Class Engine.SkeletalMeshComponent
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	uint8                                        Pad_69D[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         SkeletalMeshAsset;                                 // 0xA28(0x8)(ZeroConstructor)
	class UClass*                                AnimBlueprintGeneratedClass;                       // 0xA30(0x8)(ZeroConstructor)
	class UClass*                                AnimClass;                                         // 0xA38(0x8)(ZeroConstructor)
	class UAnimInstance*                         AnimScriptInstance;                                // 0xA40(0x8)(ZeroConstructor)
	class UAnimInstance*                         PostProcessAnimInstance;                           // 0xA48(0x8)(ZeroConstructor)
	struct FSingleAnimationPlayData              AnimationData;                                     // 0xA50(0x18)(ZeroConstructor)
	uint8                                        Pad_69E[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RootBoneTranslation;                               // 0xA78(0x18)(None)
	struct FVector                               LineCheckBoundsScale;                              // 0xA90(0x18)(None)
	uint8                                        Pad_69F[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimInstance*>                 LinkedInstances;                                   // 0xAD8(0x10)(ZeroConstructor)
	TArray<struct FTransform>                    CachedBoneSpaceTransforms;                         // 0xAE8(0x10)(None)
	TArray<struct FTransform>                    CachedComponentSpaceTransforms;                    // 0xAF8(0x10)(None)
	uint8                                        Pad_6A0[0xB0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalAnimRateScale;                               // 0xBB8(0x4)(None)
	enum class EKinematicBonesUpdateToPhysics    KinematicBonesUpdateType;                          // 0xBBC(0x1)(None)
	enum class EPhysicsTransformUpdateMode       PhysicsTransformUpdateMode;                        // 0xBBD(0x1)(None)
	uint8                                        Pad_6A1[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECollisionEnabled                 PreSleepingKinematicsCollisionType;                // 0xBBF(0x1)(None)
	enum class EAnimationMode                    AnimationMode;                                     // 0xBC0(0x1)(None)
	uint8                                        Pad_6A2[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisablePostProcessBlueprint : 1;                  // Mask: 0x1, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        BitPad_74 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUpdateOverlapsOnAnimationFinalize : 1;            // Mask: 0x4, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        BitPad_75 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasValidBodies : 1;                               // Mask: 0x10, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        bBlendPhysics : 1;                                 // Mask: 0x20, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        bEnablePhysicsOnDedicatedServer : 1;               // Mask: 0x40, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        bUpdateMeshWhenKinematic : 1;                      // Mask: 0x80, PropSize: 0x10xBC2(0x1)(None)
	uint8                                        bUpdateJointsFromAnimation : 1;                    // Mask: 0x1, PropSize: 0x10xBC3(0x1)(None)
	uint8                                        bAllowClothActors : 1;                             // Mask: 0x2, PropSize: 0x10xBC3(0x1)(None)
	uint8                                        bDisableClothSimulation : 1;                       // Mask: 0x4, PropSize: 0x10xBC3(0x1)(None)
	uint8                                        BitPad_76 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6A3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisableRigidBodyAnimNode : 1;                     // Mask: 0x1, PropSize: 0x10xBC8(0x1)(None)
	uint8                                        bAllowAnimCurveEvaluation : 1;                     // Mask: 0x2, PropSize: 0x10xBC8(0x1)(None)
	uint8                                        BitPad_77 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCollideWithEnvironment : 1;                       // Mask: 0x20, PropSize: 0x10xBC8(0x1)(None)
	uint8                                        bCollideWithAttachedChildren : 1;                  // Mask: 0x40, PropSize: 0x10xBC8(0x1)(None)
	uint8                                        bForceCollisionUpdate : 1;                         // Mask: 0x80, PropSize: 0x10xBC8(0x1)(None)
	uint8                                        bLocalSpaceSimulation : 1;                         // Mask: 0x1, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bResetAfterTeleport : 1;                           // Mask: 0x2, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        BitPad_78 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDeferKinematicBoneUpdate : 1;                     // Mask: 0x8, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bNoSkeletonUpdate : 1;                             // Mask: 0x10, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bPauseAnims : 1;                                   // Mask: 0x20, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bUseRefPoseOnInitAnim : 1;                         // Mask: 0x40, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x80, PropSize: 0x10xBC9(0x1)(None)
	uint8                                        bForceRefpose : 1;                                 // Mask: 0x1, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bOnlyAllowAutonomousTickPose : 1;                  // Mask: 0x2, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bIsAutonomousTickPose : 1;                         // Mask: 0x4, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bOldForceRefPose : 1;                              // Mask: 0x8, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bShowPrePhysBones : 1;                             // Mask: 0x10, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bRequiredBonesUpToDate : 1;                        // Mask: 0x20, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bAnimTreeInitialised : 1;                          // Mask: 0x40, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bIncludeComponentLocationIntoBounds : 1;           // Mask: 0x80, PropSize: 0x10xBCA(0x1)(None)
	uint8                                        bEnableLineCheckWithBounds : 1;                    // Mask: 0x1, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        bPropagateCurvesToFollowers : 1;                   // Mask: 0x2, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        bSkipKinematicUpdateWhenInterpolating : 1;         // Mask: 0x4, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        bSkipBoundsUpdateWhenInterpolating : 1;            // Mask: 0x8, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        bPreventDediServerAutoUnregistration : 1;          // Mask: 0x10, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        BitPad_79 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNeedsQueuedAnimEventsDispatched : 1;              // Mask: 0x80, PropSize: 0x10xBCB(0x1)(None)
	uint8                                        Pad_6A4[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint16                                       CachedAnimCurveUidVersion;                         // 0xBCE(0x2)(None)
	float                                        ClothBlendWeight;                                  // 0xBD0(0x4)(None)
	bool                                         bWaitForParallelClothTask;                         // 0xBD4(0x1)(None)
	uint8                                        Pad_6A5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DisallowedAnimCurves;                              // 0xBD8(0x10)(None)
	class UBodySetup*                            BodySetup;                                         // 0xBE8(0x8)(ZeroConstructor)
	uint8                                        Pad_6A6[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClothMaxDistanceScale;                             // 0xBF4(0x4)(None)
	FMulticastInlineDelegateProperty_            OnConstraintBroken;                                // 0xBF8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPlasticDeformation;                              // 0xC08(0x10)(ZeroConstructor)
	class UClass*                                ClothingSimulationFactory;                         // 0xC18(0x8)(ZeroConstructor)
	uint8                                        Pad_6A7[0xF8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TeleportDistanceThreshold;                         // 0xD18(0x4)(None)
	float                                        TeleportRotationThreshold;                         // 0xD1C(0x4)(None)
	uint8                                        Pad_6A8[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       LastPoseTickFrame;                                 // 0xD28(0x4)(None)
	uint8                                        Pad_6A9[0x94];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClothingSimulationInteractor*         ClothingInteractor;                                // 0xDC0(0x8)(ZeroConstructor)
	uint8                                        Pad_6AA[0xC8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAnimInitialized;                                 // 0xE90(0x10)(ZeroConstructor)
	uint8                                        Pad_6AB[0x1B0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       PreventSoundCuesTime;                              // 0x1050(0x8)(None)
	uint8                                        Pad_6AC[0x14C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DinoIKAnimationLegZOffsetingMultiplier;            // 0x11A4(0x4)(None)
	float                                        DinoIKDelayedTraceFreezeDurationMultiplier;        // 0x11A8(0x4)(None)
	float                                        DinoIKSlopeMatchingRootHeightOffset;               // 0x11AC(0x4)(None)
	float                                        DistanceFromGroundToStartIK;                       // 0x11B0(0x4)(None)
	float                                        DistanceFromGroundToStartIKBias;                   // 0x11B4(0x4)(None)
	float                                        FeetAlignmentLimit;                                // 0x11B8(0x4)(None)
	float                                        ForceUpdateValuesTimeLimit;                        // 0x11BC(0x4)(None)
	float                                        IkFabrikInterpSpeed;                               // 0x11C0(0x4)(None)
	float                                        IkFeetAlignmentInterpSpeed;                        // 0x11C4(0x4)(None)
	float                                        IkGroundPlaneInterpSpeed;                          // 0x11C8(0x4)(None)
	float                                        IkInterpSpeed;                                     // 0x11CC(0x4)(None)
	float                                        IkInterpSpeedUp;                                   // 0x11D0(0x4)(None)
	uint8                                        Pad_6AD[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               IkRootLocationOffset;                              // 0x11D8(0x18)(None)
	struct FRotator                              IkRootRotationOffset;                              // 0x11F0(0x18)(None)
	float                                        IkRootOffsetInterpSpeed;                           // 0x1208(0x4)(None)
	float                                        IkRootOffsetInterpSpeedUp;                         // 0x120C(0x4)(None)
	float                                        IkRootWorldOffsetInterpSpeed;                      // 0x1210(0x4)(None)
	float                                        IkRootWorldOffsetInterpSpeedUp;                    // 0x1214(0x4)(None)
	float                                        LegLimitRatioFromCylinderHeight;                   // 0x1218(0x4)(None)
	float                                        MatchSlopeRotationSpeed;                           // 0x121C(0x4)(None)
	float                                        RootPitchRotationLimit;                            // 0x1220(0x4)(None)
	float                                        RootRollRotationLimit;                             // 0x1224(0x4)(None)
	int32                                        MaxIterations;                                     // 0x1228(0x4)(None)
	uint8                                        Pad_6AE[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TwoLegVirtualHitLocationWS;                        // 0x1230(0x18)(None)
	struct FVector                               TwoLegVirtualHitLocationWSTarget;                  // 0x1248(0x18)(None)
	struct FVector                               TwoLegVirtualHitLocationCS;                        // 0x1260(0x18)(None)
	float                                        RootOffset;                                        // 0x1278(0x4)(None)
	uint8                                        Pad_6AF[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RootRotationOffset;                                // 0x1280(0x18)(None)
	uint8                                        bForceTickDisabled : 1;                            // Mask: 0x1, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bFreezeGroundPlaneIK : 1;                          // Mask: 0x2, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bSuppressAnimNotifies : 1;                         // Mask: 0x4, PropSize: 0x10x1298(0x1)(None)
	uint8                                        UseWorldSpaceFeetAlignment : 1;                    // Mask: 0x8, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bRotateFeetToAlignWithGround : 1;                  // Mask: 0x10, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bEnableMultiFabrik : 1;                            // Mask: 0x20, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bDinoIKUseExperimentalInvalidTraceZeroing : 1;     // Mask: 0x40, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bAlignRootOnlyToGround : 1;                        // Mask: 0x80, PropSize: 0x10x1298(0x1)(None)
	uint8                                        bDinoIKAnimationLegZOffseting : 1;                 // Mask: 0x1, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bIKRotationEnabled : 1;                            // Mask: 0x2, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bMovedLastFrame : 1;                               // Mask: 0x4, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKLerpFeet : 1;                               // Mask: 0x8, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKLerpLegs : 1;                               // Mask: 0x10, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKRootWorldSpaceLerpZ : 1;                    // Mask: 0x20, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKSmoothGroundPlaneLerping : 1;               // Mask: 0x40, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKSlopeMatchingRootHeightOffsetMultiplier : 1; // Mask: 0x80, PropSize: 0x10x1299(0x1)(None)
	uint8                                        bDinoIKUseLegLimits : 1;                           // Mask: 0x1, PropSize: 0x10x129A(0x1)(None)
	uint8                                        bEnableIkOnlyWhenIdle : 1;                         // Mask: 0x2, PropSize: 0x10x129A(0x1)(None)
	uint8                                        bEnableSimpleIK : 1;                               // Mask: 0x4, PropSize: 0x10x129A(0x1)(None)
	uint8                                        bForceSimpleIK : 1;                                // Mask: 0x8, PropSize: 0x10x129A(0x1)(None)
	uint8                                        bSetAttachmentMasterPoseComponent : 1;             // Mask: 0x10, PropSize: 0x10x129A(0x1)(None)
	uint8                                        bInterpolateRootPhys : 1;                          // Mask: 0x20, PropSize: 0x10x129A(0x1)(None)
	uint8                                        BitPad_7A : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6B1[0x35];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                OriginalBonesOffsets;                              // 0x12D0(0x10)(None)
	TArray<struct FIKLegInfo>                    IkLegs;                                            // 0x12E0(0x10)(None)
	TArray<struct FIKGroundPlaneOverrideInfo>    IkGroundPlaneOverrides;                            // 0x12F0(0x10)(None)
	TArray<struct FIKRootAdjustmentInfo>         IkRootAdjustmentPoints;                            // 0x1300(0x10)(None)
	float                                        MinHitNormalZForFeetAlignment;                     // 0x1310(0x4)(None)
	float                                        ComponentMassScale;                                // 0x1314(0x4)(None)
	float                                        GroundBoneInstantSyncTillTime;                     // 0x1318(0x4)(None)
	float                                        MinLinearDamping;                                  // 0x131C(0x4)(None)
	float                                        MinAngularDamping;                                 // 0x1320(0x4)(None)
	float                                        CachedFootZDiff;                                   // 0x1324(0x4)(None)
	uint8                                        bOnlyTickWhenRenderedDontDisableOnDedicatedServer : 1; // Mask: 0x1, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bSkipUpdateTransformIfBlendedPhysics : 1;          // Mask: 0x2, PropSize: 0x10x1328(0x1)(None)
	uint8                                        AnimationFrozen : 1;                               // Mask: 0x4, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bInitOffset : 1;                                   // Mask: 0x8, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bUpdatedKinematics : 1;                            // Mask: 0x10, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bUpdatedKinematicsOnce : 1;                        // Mask: 0x20, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bSetKinematicsSleeping : 1;                        // Mask: 0x40, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bNeverTickOnDediServer : 1;                        // Mask: 0x80, PropSize: 0x10x1328(0x1)(None)
	uint8                                        bAlwaysTeleportKinematic : 1;                      // Mask: 0x1, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bForceDisablePhysicsOnDediServer : 1;              // Mask: 0x2, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bForceDisablePhysicsOnDediServerAllowRagdoll : 1;  // Mask: 0x4, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bSleepKinematicsWhenNotRefreshingBones : 1;        // Mask: 0x8, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bPhysicsRequiredOnDediServer : 1;                  // Mask: 0x10, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bAlwaysForceUpdateKinematicsOnDedicatedServer : 1; // Mask: 0x20, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bRotateToMatchWalkingSlope : 1;                    // Mask: 0x40, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bFootZDiffIsCached : 1;                            // Mask: 0x80, PropSize: 0x10x1329(0x1)(None)
	uint8                                        bShouldCacheFootZDiff : 1;                         // Mask: 0x1, PropSize: 0x10x132A(0x1)(None)
	uint8                                        bEnableIKTraceFreezing : 1;                        // Mask: 0x2, PropSize: 0x10x132A(0x1)(None)
	uint8                                        BitPad_7B : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6B2[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bModifyBoneAnimNodeUseCurrentBoneModifiers : 1;    // Mask: 0x1, PropSize: 0x10x1330(0x1)(None)
	uint8                                        BitPad_7C : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHumanIKUseBoneModiferLegScalars : 1;              // Mask: 0x4, PropSize: 0x10x1330(0x1)(None)
	uint8                                        bApplyGroundBoneModifiers : 1;                     // Mask: 0x8, PropSize: 0x10x1330(0x1)(None)
	uint8                                        BitPad_7D : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6B3[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableIKCartGroundConforming : 1;                 // Mask: 0x1, PropSize: 0x10x1334(0x1)(None)
	uint8                                        BitPad_7E : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6B4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RotOffset;                                         // 0x1338(0x18)(None)
	uint8                                        bUseRotOffset : 1;                                 // Mask: 0x1, PropSize: 0x10x1350(0x1)(None)
	uint8                                        bUseItemSlotAttachmentTranformOffsets : 1;         // Mask: 0x2, PropSize: 0x10x1350(0x1)(None)
	uint8                                        bInitializedArticulated : 1;                       // Mask: 0x4, PropSize: 0x10x1350(0x1)(None)
	uint8                                        BitPad_7F : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_6B5[0xF];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BoneModifiersLegLengthPercentage;                  // 0x1360(0x4)(None)
	uint8                                        Pad_6B6[0x24];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastStartedRenderingTime;                          // 0x1388(0x8)(None)
	uint8                                        Pad_6B7[0x48];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkeletalMeshComponent* GetDefaultObj();

	void UnlinkAnimClassLayers(class UClass* InClass);
	void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace);
	void ToggleDisablePostProcessBlueprint();
	void TermBodiesBelow(class FName ParentBoneName);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(const struct FPoseSnapshot& Snapshot);
	void SetUpdateClothInEditor(bool NewUpdateState);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetupBetweenAnimationBlueprintBlending();
	void SetTeleportRotationThreshold(float Threshold);
	void SetTeleportDistanceThreshold(float Threshold);
	void SetSkeletalMeshAsset(class USkeletalMesh* NewMesh);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, class FName BoneName, bool bIncludeSelf);
	void SetMorphTarget(class FName MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, class FName BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, class FName BoneName);
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetConstraintProfileForAll(class FName ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(class FName JointName, class FName ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, class FName BoneName);
	void SetAnimClass(class UClass* NewClass);
	void SetAnimationMode(enum class EAnimationMode InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(class FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);
	void SetAllowedAnimCurvesEvaluation(const TArray<class FName>& List, bool bAllow);
	void SetAllowClothActors(bool bInAllow);
	void SetAllowAnimCurveEvaluation(bool bInAllow);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(class FName InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsDisabled(class FName InBoneName, bool bDisabled, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(class FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void SetAllBodiesBelowLinearVelocity(class FName InBoneName, const struct FVector& LinearVelocity, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType);
	void ResetAllowedAnimCurveEvaluation();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	void LinkAnimGraphByTag(class FName InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	void K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, const struct FVector& ClosestWorldPosition, const struct FVector& Normal, class FName BoneName, float Distance, bool ReturnValue);
	void IsPlayingMontage(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished, bool ReturnValue);
	void IsPlayingAnimationMontagesOnSlotName(class FName SlotName, bool ReturnValue);
	void IsPlaying(bool ReturnValue);
	void IsClothingSimulationSuspended(bool ReturnValue);
	void IsBodyGravityEnabled(class FName BoneName, bool ReturnValue);
	void IncrementIKLegMute(int32 LegIndex);
	void HasValidAnimationInstance(bool ReturnValue);
	void GetTrueBasedPawns(const TArray<class APawn*>& ReturnValue);
	void GetTransformAttribute_Ref(class FName BoneName, class FName AttributeName, const struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetTransformAttribute(class FName BoneName, class FName AttributeName, const struct FTransform& DefaultValue, const struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetTeleportRotationThreshold(float ReturnValue);
	void GetTeleportDistanceThreshold(float ReturnValue);
	void GetStringAttribute_Ref(class FName BoneName, class FName AttributeName, const class FString& OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetStringAttribute(class FName BoneName, class FName AttributeName, const class FString& DefaultValue, const class FString& OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetSkeletalMeshAsset(class USkeletalMesh* ReturnValue);
	void GetSkeletalCenterOfMass(const struct FVector& ReturnValue);
	void GetPostProcessInstance(class UAnimInstance* ReturnValue);
	void GetPosition(float ReturnValue);
	void GetPlayRate(float ReturnValue);
	void GetMorphTarget(class FName MorphTargetName, float ReturnValue);
	void GetLinkedAnimLayerInstanceByGroup(class FName InGroup, class UAnimInstance* ReturnValue);
	void GetLinkedAnimLayerInstanceByClass(class UClass* InClass, class UAnimInstance* ReturnValue);
	void GetLinkedAnimGraphInstancesByTag(class FName InTag, const TArray<class UAnimInstance*>& OutLinkedInstances);
	void GetLinkedAnimGraphInstanceByTag(class FName InTag, class UAnimInstance* ReturnValue);
	void GetIntegerAttribute_Ref(class FName BoneName, class FName AttributeName, int32 OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetIntegerAttribute(class FName BoneName, class FName AttributeName, int32 DefaultValue, int32 OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetFloatAttribute_Ref(class FName BoneName, class FName AttributeName, float OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetFloatAttribute(class FName BoneName, class FName AttributeName, float DefaultValue, float OutValue, enum class ECustomBoneAttributeLookup LookupType, bool ReturnValue);
	void GetFirstBoneWithChildren(class FName ReturnValue);
	void GetDisablePostProcessBlueprint(bool ReturnValue);
	void GetDisableAnimCurves(bool ReturnValue);
	void GetCurrentJointAngles(class FName InBoneName, float Swing1Angle, float TwistAngle, float Swing2Angle);
	void GetConstraintsFromBody(class FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, const TArray<struct FConstraintInstanceAccessor>& OutConstraints);
	void GetConstraints(bool bIncludesTerminated, const TArray<struct FConstraintInstanceAccessor>& OutConstraints);
	void GetConstraintByName(class FName ConstraintName, bool bIncludesTerminated, const struct FConstraintInstanceAccessor& ReturnValue);
	void GetClothMaxDistanceScale(float ReturnValue);
	void GetClothingSimulationInteractor(class UClothingSimulationInteractor* ReturnValue);
	void GetBoneMass(class FName BoneName, bool bScaleMass, float ReturnValue);
	void GetBoneLinearVelocity(class FName InBoneName, const struct FVector& ReturnValue);
	void GetAnimInstance(class UAnimInstance* ReturnValue);
	void GetAnimClass(class UClass* ReturnValue);
	void GetAnimationMode(enum class EAnimationMode ReturnValue);
	void GetAllowRigidBodyAnimNode(bool ReturnValue);
	void GetAllowedAnimCurveEvaluate(bool ReturnValue);
	void GetAllowClothActors(bool ReturnValue);
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	void FindConstraintBoneName(int32 ConstraintIndex, class FName ReturnValue);
	void EnableRagdoll(const struct FVector& WithVelocity);
	void DecrementIKLegMute(int32 LegIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, class FName InBoneName);
	void BPValidBoneToUnhide(int32 BoneIndex, bool ReturnValue);
	void BPTickPose(float DeltaTime);
	void BPSetBoneModifiers(const TArray<struct FBoneModifierNamed>& NamedBoneModifiers);
	void BPRefreshBoneTransforms();
	void BindClothToLeaderPoseComponent();
	void AllowAnimCurveEvaluation(class FName NameOfCurve, bool bAllow);
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, class FName BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& Force, class FName BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(class FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};

// 0x320 (0x348 - 0x28)
// Class Engine.AnimInstance
class UAnimInstance : public UObject
{
public:
	class USkeleton*                             CurrentSkeleton;                                   // 0x28(0x8)(ZeroConstructor)
	enum class ERootMotionMode                   RootMotionMode;                                    // 0x30(0x1)(None)
	uint8                                        bUseMultiThreadedAnimationUpdate : 1;              // Mask: 0x1, PropSize: 0x10x31(0x1)(None)
	uint8                                        bUsingCopyPoseFromMesh : 1;                        // Mask: 0x2, PropSize: 0x10x31(0x1)(None)
	uint8                                        BitPad_80 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReceiveNotifiesFromLinkedInstances : 1;           // Mask: 0x10, PropSize: 0x10x31(0x1)(None)
	uint8                                        bPropagateNotifiesToLinkedInstances : 1;           // Mask: 0x20, PropSize: 0x10x31(0x1)(None)
	uint8                                        bUseMainInstanceMontageEvaluationData : 1;         // Mask: 0x40, PropSize: 0x10x31(0x1)(None)
	uint8                                        bQueueMontageEvents : 1;                           // Mask: 0x80, PropSize: 0x10x31(0x1)(None)
	uint8                                        Pad_775[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMontageBlendingOut;                              // 0x38(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnMontageStarted;                                  // 0x48(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnMontageEnded;                                    // 0x58(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnAllMontageInstancesEnded;                        // 0x68(0x10)(ZeroConstructor)
	uint8                                        Pad_777[0xD8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimNotifyQueue                      NotifyQueue;                                       // 0x150(0x70)(ZeroConstructor)
	TArray<struct FAnimNotifyEvent>              ActiveAnimNotifyState;                             // 0x1C0(0x10)(ZeroConstructor)
	TArray<struct FAnimNotifyEventReference>     ActiveAnimNotifyEventReference;                    // 0x1D0(0x10)(None)
	uint8                                        Pad_778[0x168];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimInstance* GetDefaultObj();

	void WasAnimNotifyTriggeredInStateMachine(int32 MachineIndex, class UClass* AnimNotifyType, bool ReturnValue);
	void WasAnimNotifyTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, class UClass* AnimNotifyType, bool ReturnValue);
	void WasAnimNotifyTriggeredInAnyState(class UClass* AnimNotifyType, bool ReturnValue);
	void WasAnimNotifyStateActiveInStateMachine(int32 MachineIndex, class UClass* AnimNotifyStateType, bool ReturnValue);
	void WasAnimNotifyStateActiveInSourceState(int32 MachineIndex, int32 StateIndex, class UClass* AnimNotifyStateType, bool ReturnValue);
	void WasAnimNotifyStateActiveInAnyState(class UClass* AnimNotifyStateType, bool ReturnValue);
	void WasAnimNotifyNameTriggeredInStateMachine(int32 MachineIndex, class FName NotifyName, bool ReturnValue);
	void WasAnimNotifyNameTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, class FName NotifyName, bool ReturnValue);
	void WasAnimNotifyNameTriggeredInAnyState(class FName NotifyName, bool ReturnValue);
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	void UnlinkAnimClassLayers(class UClass* InClass);
	void TryGetPawnOwner(class APawn* ReturnValue);
	void StopSlotAnimation(float InBlendOutTime, class FName SlotNodeName);
	void SnapshotPose(const struct FPoseSnapshot& Snapshot);
	void SetUseMainInstanceMontageEvaluationData(bool bSet);
	void SetRootMotionMode(enum class ERootMotionMode Value);
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);
	void SetPropagateNotifiesToLinkedInstances(bool bSet);
	void SetMorphTarget(class FName MorphTargetName, float Value);
	void SavePoseSnapshot(class FName SnapshotName);
	void ResetDynamics(enum class ETeleportType InTeleportType);
	void RequestTransitionEvent(class FName EventName, double RequestTimeout, enum class ETransitionRequestQueueMode QueueMode, enum class ETransitionRequestOverwriteMode OverwriteMode, bool ReturnValue);
	void RequestSlotGroupInertialization(class FName InSlotGroupName, float Duration, class UBlendProfile* BlendProfile);
	void RemovePoseSnapshot(class FName SnapshotName);
	void QueryTransitionEvent(int32 MachineIndex, int32 TransitionIndex, class FName EventName, bool ReturnValue);
	void QueryAndMarkTransitionEvent(int32 MachineIndex, int32 TransitionIndex, class FName EventName, bool ReturnValue);
	void PlaySlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, class UAnimMontage* ReturnValue);
	void PlaySlotAnimationAsDynamicMontage_WithBlendArgs(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FAlphaBlendArgs& BlendIn, const struct FAlphaBlendArgs& BlendOut, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, class UAnimMontage* ReturnValue);
	void PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, class UAnimMontage* ReturnValue);
	void OnCharacterStepped(const struct FVector& PrevLocation, const struct FVector& NewLocation);
	void MontageSync_StopFollowing(class UAnimMontage* MontageFollower);
	void MontageSync_Follow(class UAnimMontage* MontageFollower, class UAnimInstance* OtherAnimInstance, class UAnimMontage* MontageLeader);
	void Montage_StopWithBlendSettings(const struct FMontageBlendSettings& BlendOutSettings, class UAnimMontage* Montage);
	void Montage_StopWithBlendOut(const struct FAlphaBlendArgs& BlendOut, class UAnimMontage* Montage);
	void Montage_StopGroupByName(float InBlendOutTime, class FName GroupName);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(class FName SectionNameToChange, class FName NextSection, class UAnimMontage* Montage);
	void Montage_Resume(class UAnimMontage* Montage);
	void Montage_PlayWithBlendSettings(class UAnimMontage* MontageToPlay, const struct FMontageBlendSettings& BlendInSettings, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, float ReturnValue);
	void Montage_PlayWithBlendIn(class UAnimMontage* MontageToPlay, const struct FAlphaBlendArgs& BlendIn, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, float ReturnValue);
	void Montage_Play_WithBlending(class UAnimMontage* MontageToPlay, float BlendInTime, float BlendOutTime, float InPlayRate, bool bPauseOnFinish, float ReturnValue);
	void Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, bool bPauseOnFinish, float ReturnValue);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(class FName SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(class FName SectionName, class UAnimMontage* Montage);
	void Montage_IsPlaying(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished, bool ReturnValue);
	void Montage_IsActive(class UAnimMontage* Montage, bool ReturnValue);
	void Montage_GetPosition(class UAnimMontage* Montage, float ReturnValue);
	void Montage_GetPlayRate(class UAnimMontage* Montage, float ReturnValue);
	void Montage_GetIsStopped(class UAnimMontage* Montage, bool ReturnValue);
	void Montage_GetEffectivePlayRate(class UAnimMontage* Montage, float ReturnValue);
	void Montage_GetCurrentTime(class UAnimMontage* Montage, float MontageTimeRemaining, float TotalMontageDuration, bool ReturnValue);
	void Montage_GetCurrentSection(class UAnimMontage* Montage, class FName ReturnValue);
	void Montage_GetBlendTime(class UAnimMontage* Montage, float ReturnValue);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	void LinkAnimGraphByTag(class FName InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	void IsUsingRootTransform(bool ReturnValue);
	void IsUsingMainInstanceMontageEvaluationData(bool ReturnValue);
	void IsSyncGroupBetweenMarkers(class FName InSyncGroupName, class FName PreviousMarker, class FName NextMarker, bool bRespectMarkerOrder, bool ReturnValue);
	void IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, class FName SlotNodeName, bool ReturnValue);
	void IsAnyMontagePlaying(bool ReturnValue);
	void HasMarkerBeenHitThisFrame(class FName SyncGroup, class FName MarkerName, bool ReturnValue);
	void GetTimeToClosestMarker(class FName SyncGroup, class FName MarkerName, float OutMarkerTime, bool ReturnValue);
	void GetSyncGroupPosition(class FName InSyncGroupName, const struct FMarkerSyncAnimPosition& ReturnValue);
	void GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetReceiveNotifiesFromLinkedInstances(bool ReturnValue);
	void GetPropagateNotifiesToLinkedInstances(bool ReturnValue);
	void GetOwningComponent(class USkeletalMeshComponent* ReturnValue);
	void GetOwningActor(class AActor* ReturnValue);
	void GetLinkedAnimLayerInstancesByGroup(class FName InGroup, const TArray<class UAnimInstance*>& OutLinkedInstances);
	void GetLinkedAnimLayerInstanceByGroupAndClass(class FName InGroup, class UClass* InClass, class UAnimInstance* ReturnValue);
	void GetLinkedAnimLayerInstanceByGroup(class FName InGroup, class UAnimInstance* ReturnValue);
	void GetLinkedAnimLayerInstanceByClass(class UClass* InClass, class UAnimInstance* ReturnValue);
	void GetLinkedAnimGraphInstancesByTag(class FName InTag, const TArray<class UAnimInstance*>& OutLinkedInstances);
	void GetLinkedAnimGraphInstanceByTag(class FName InTag, class UAnimInstance* ReturnValue);
	void GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex, float ReturnValue);
	void GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex, float ReturnValue);
	void GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex, float ReturnValue);
	void GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex, float ReturnValue);
	void GetInstanceMachineWeight(int32 MachineIndex, float ReturnValue);
	void GetInstanceCurrentStateElapsedTime(int32 MachineIndex, float ReturnValue);
	void GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex, float ReturnValue);
	void GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex, float ReturnValue);
	void GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex, float ReturnValue);
	void GetInstanceAssetPlayerTime(int32 AssetPlayerIndex, float ReturnValue);
	void GetInstanceAssetPlayerLength(int32 AssetPlayerIndex, float ReturnValue);
	void GetDeltaSeconds(float ReturnValue);
	void GetCurveValueWithDefault(class FName CurveName, float DefaultValue, float OutValue, bool ReturnValue);
	void GetCurveValue(class FName CurveName, float ReturnValue);
	void GetCurrentStateName(int32 MachineIndex, class FName ReturnValue);
	void GetCurrentActiveMontage(class UAnimMontage* ReturnValue);
	void GetAllCurveNames(const TArray<class FName>& OutNames);
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, const TArray<class FName>& OutNames);
	void ControlRigNotify(class FName NotifyName, class FName NotifyCustomTag, const struct FHitResult& WorldSpaceHitResult, const struct FVector& Velocity);
	void ClearTransitionEvents(class FName EventName);
	void ClearMorphTargets();
	void ClearAllTransitionEvents();
	void CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation, float ReturnValue);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintTriggerAnimationEvent(class FName AnimationEventName, float PlayedAnimLength);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintPostEvaluateAnimation();
	void BlueprintPlayAnimationEvent(class UAnimMontage* AnimationMontage, float PlayRate, bool bPauseOnFinish, float StartPosition, float PlayedAnimLength);
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
};

// 0x150 (0x370 - 0x220)
// Class Engine.BlueprintGeneratedClass
class UBlueprintGeneratedClass : public UClass
{
public:
	uint8                                        Pad_7B0[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumReplicatedProperties;                           // 0x228(0x4)(None)
	uint8                                        bHasNativizedParent : 1;                           // Mask: 0x1, PropSize: 0x10x22C(0x1)(None)
	uint8                                        bHasCookedComponentInstancingData : 1;             // Mask: 0x2, PropSize: 0x10x22C(0x1)(None)
	uint8                                        BitPad_81 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_7B1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDynamicBlueprintBinding*>      DynamicBindingObjects;                             // 0x230(0x10)(ZeroConstructor)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x240(0x10)(ZeroConstructor)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x250(0x10)(ZeroConstructor)
	TArray<struct FBPComponentClassOverride>     ComponentClassOverrides;                           // 0x260(0x10)(ZeroConstructor)
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x270(0x8)(ZeroConstructor)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0x278(0x8)(ZeroConstructor)
	class UStructProperty*                       UberGraphFramePointerProperty;                     // 0x280(0x8)(ZeroConstructor)
	uint8                                        Pad_7B4[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UFunction*                             UberGraphFunction;                                 // 0x290(0x8)(ZeroConstructor)
	TMap<class FName, struct FGuid>              CookedPropertyGuids;                               // 0x298(0x50)(None)
	TMap<class FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                     // 0x2E8(0x50)(None)
	uint8                                        Pad_7B6[0x38];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlueprintGeneratedClass* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.TimecodeProvider
class UTimecodeProvider : public UObject
{
public:
	float                                        FrameDelay;                                        // 0x28(0x4)(None)
	uint8                                        Pad_7C6[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTimecodeProvider* GetDefaultObj();

	void GetTimecode(const struct FTimecode& ReturnValue);
	void GetSynchronizationState(enum class ETimecodeProviderSynchronizationState ReturnValue);
	void GetQualifiedFrameTime(const struct FQualifiedFrameTime& ReturnValue);
	void GetFrameRate(const struct FFrameRate& ReturnValue);
	void GetDelayedTimecode(const struct FTimecode& ReturnValue);
	void GetDelayedQualifiedFrameTime(const struct FQualifiedFrameTime& ReturnValue);
	void FetchTimecode(const struct FQualifiedFrameTime& OutFrameTime, bool ReturnValue);
	void FetchAndUpdate();
};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformer
class UMeshDeformer : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMeshDeformer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformerInstanceSettings
class UMeshDeformerInstanceSettings : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMeshDeformerInstanceSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformerInstance
class UMeshDeformerInstance : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMeshDeformerInstance* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.Info
class AInfo : public AActor
{
public:

	static class UClass* StaticClass();
	static class AInfo* GetDefaultObj();

};

// 0xA0 (0x558 - 0x4B8)
// Class Engine.GameModeBase
class AGameModeBase : public AInfo
{
public:
	class FString                                OptionsString;                                     // 0x4B8(0x10)(None)
	class UClass*                                GameSessionClass;                                  // 0x4C8(0x8)(ZeroConstructor)
	class UClass*                                GameStateClass;                                    // 0x4D0(0x8)(ZeroConstructor)
	class UClass*                                PlayerControllerClass;                             // 0x4D8(0x8)(ZeroConstructor)
	class UClass*                                PlayerStateClass;                                  // 0x4E0(0x8)(ZeroConstructor)
	class UClass*                                HUDClass;                                          // 0x4E8(0x8)(ZeroConstructor)
	class UClass*                                DefaultPawnClass;                                  // 0x4F0(0x8)(ZeroConstructor)
	class UClass*                                SpectatorClass;                                    // 0x4F8(0x8)(ZeroConstructor)
	class UClass*                                ReplaySpectatorPlayerControllerClass;              // 0x500(0x8)(ZeroConstructor)
	class UClass*                                ServerStatReplicatorClass;                         // 0x508(0x8)(ZeroConstructor)
	class AGameSession*                          GameSession;                                       // 0x510(0x8)(ZeroConstructor)
	class AGameStateBase*                        GameState;                                         // 0x518(0x8)(ZeroConstructor)
	class AServerStatReplicator*                 ServerStatReplicator;                              // 0x520(0x8)(ZeroConstructor)
	class FText                                  DefaultPlayerName;                                 // 0x528(0x18)(None)
	uint8                                        bUseSeamlessTravel : 1;                            // Mask: 0x1, PropSize: 0x10x540(0x1)(None)
	uint8                                        bStartPlayersAsSpectators : 1;                     // Mask: 0x2, PropSize: 0x10x540(0x1)(None)
	uint8                                        bPauseable : 1;                                    // Mask: 0x4, PropSize: 0x10x540(0x1)(None)
	uint8                                        Pad_80B[0x17];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameModeBase* GetDefaultObj();

	void StartPlay();
	void SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot, class APawn* ReturnValue);
	void SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform, class APawn* ReturnValue);
	void ShouldReset(class AActor* ActorToReset, bool ReturnValue);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void ResetLevel();
	void PlayerCanRestart(class APlayerController* Player, bool ReturnValue);
	void MustSpectate(class APlayerController* NewPlayerController, bool ReturnValue);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange);
	void K2_FindPlayerStart(class AController* Player, const class FString& IncomingName, class AActor* ReturnValue);
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	void HasMatchStarted(bool ReturnValue);
	void HasMatchEnded(bool ReturnValue);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void GetNumSpectators(int32 ReturnValue);
	void GetNumPlayers(int32 ReturnValue);
	void GetDefaultPawnClassForController(class AController* InController, class UClass* ReturnValue);
	void FindPlayerStart(class AController* Player, const class FString& IncomingName, class AActor* ReturnValue);
	void ChoosePlayerStart(class AController* Player, class AActor* ReturnValue);
	void ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange);
	void CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineCustomTimeStep
class UEngineCustomTimeStep : public UObject
{
public:

	static class UClass* StaticClass();
	static class UEngineCustomTimeStep* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.PartitionActor
class APartitionActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class APartitionActor* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.TickableWorldSubsystem
class UTickableWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_81A[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTickableWorldSubsystem* GetDefaultObj();

};

// 0x38 (0x4F0 - 0x4B8)
// Class Engine.Brush
class ABrush : public AActor
{
public:
	enum class EBrushType                        BrushType;                                         // 0x4B8(0x1)(None)
	uint8                                        Pad_81B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                BrushColor;                                        // 0x4BC(0x4)(None)
	int32                                        PolyFlags;                                         // 0x4C0(0x4)(None)
	uint8                                        bColored : 1;                                      // Mask: 0x1, PropSize: 0x10x4C4(0x1)(None)
	uint8                                        bSolidWhenSelected : 1;                            // Mask: 0x2, PropSize: 0x10x4C4(0x1)(None)
	uint8                                        bPlaceableFromClassBrowser : 1;                    // Mask: 0x4, PropSize: 0x10x4C4(0x1)(None)
	uint8                                        bNotForClientOrServer : 1;                         // Mask: 0x8, PropSize: 0x10x4C4(0x1)(None)
	uint8                                        BitPad_82 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_81C[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UModel*                                Brush;                                             // 0x4C8(0x8)(ZeroConstructor)
	class UBrushComponent*                       BrushComponent;                                    // 0x4D0(0x8)(ZeroConstructor)
	uint8                                        bInManipulation : 1;                               // Mask: 0x1, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        BitPad_83 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_81D[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGeomSelection>                SavedSelections;                                   // 0x4E0(0x10)(None)

	static class UClass* StaticClass();
	static class ABrush* GetDefaultObj();

};

// 0x18 (0x508 - 0x4F0)
// Class Engine.Volume
class AVolume : public ABrush
{
public:
	TArray<struct FBoxOptimization>              BoxOptimization;                                   // 0x4F0(0x10)(None)
	bool                                         bAllowCollisionComponentWithZeroRadius;            // 0x500(0x1)(None)
	uint8                                        Pad_821[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AVolume* GetDefaultObj();

	void BPEncompassesPoint(const struct FVector& Point, float OutDistanceToPoint, float SphereRadius, bool ReturnValue);
};

// 0x34F8 (0x39B0 - 0x4B8)
// Class Engine.PlayerCameraManager
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                     PCOwner;                                           // 0x4B8(0x8)(ZeroConstructor)
	class USceneComponent*                       TransformComponent;                                // 0x4C0(0x8)(ZeroConstructor)
	uint8                                        Pad_89C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultFOV;                                        // 0x4D0(0x4)(None)
	uint8                                        Pad_89D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultOrthoWidth;                                 // 0x4D8(0x4)(None)
	uint8                                        Pad_89E[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultAspectRatio;                                // 0x4E0(0x4)(None)
	uint8                                        Pad_89F[0x6C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCameraCacheEntry                     CameraCache;                                       // 0x550(0x870)(ZeroConstructor)
	struct FCameraCacheEntry                     LastFrameCameraCache;                              // 0xDC0(0x870)(ZeroConstructor)
	struct FTViewTarget                          ViewTarget;                                        // 0x1630(0x880)(ZeroConstructor)
	struct FTViewTarget                          PendingViewTarget;                                 // 0x1EB0(0x880)(ZeroConstructor)
	uint8                                        Pad_8A1[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCameraCacheEntry                     CameraCachePrivate;                                // 0x2760(0x870)(ZeroConstructor)
	struct FCameraCacheEntry                     LastFrameCameraCachePrivate;                       // 0x2FD0(0x870)(ZeroConstructor)
	TArray<class UCameraModifier*>               ModifierList;                                      // 0x3840(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultModifiers;                                  // 0x3850(0x10)(ZeroConstructor)
	float                                        FreeCamDistance;                                   // 0x3860(0x4)(None)
	uint8                                        Pad_8AC[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FreeCamOffset;                                     // 0x3868(0x18)(None)
	struct FVector                               ViewTargetOffset;                                  // 0x3880(0x18)(None)
	FMulticastInlineDelegateProperty_            OnAudioFadeChangeEvent;                            // 0x3898(0x10)(ZeroConstructor)
	uint8                                        Pad_8AF[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TScriptInterface<class ICameraLensEffectInterface>> CameraLensEffects;                                 // 0x38C0(0x10)(ZeroConstructor)
	class UCameraModifier_CameraShake*           CachedCameraShakeMod;                              // 0x38D0(0x8)(ZeroConstructor)
	class UCameraAnimInst*                       AnimInstPool[0x8];                                 // 0x38D8(0x40)(ZeroConstructor)
	TArray<struct FPostProcessSettings>          PostProcessBlendCache;                             // 0x3918(0x10)(ZeroConstructor)
	uint8                                        Pad_8B4[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCameraAnimInst*>               ActiveAnims;                                       // 0x3938(0x10)(ZeroConstructor)
	TArray<class UCameraAnimInst*>               FreeAnims;                                         // 0x3948(0x10)(ZeroConstructor)
	class ACameraActor*                          AnimCameraActor;                                   // 0x3958(0x8)(ZeroConstructor)
	uint8                                        bIsOrthographic : 1;                               // Mask: 0x1, PropSize: 0x10x3960(0x1)(None)
	uint8                                        bDefaultConstrainAspectRatio : 1;                  // Mask: 0x2, PropSize: 0x10x3960(0x1)(None)
	uint8                                        BitPad_84 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bClientSimulatingViewTarget : 1;                   // Mask: 0x40, PropSize: 0x10x3960(0x1)(None)
	uint8                                        bUseClientSideCameraUpdates : 1;                   // Mask: 0x80, PropSize: 0x10x3960(0x1)(None)
	uint8                                        BitPad_85 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bGameCameraCutThisFrame : 1;                       // Mask: 0x4, PropSize: 0x10x3961(0x1)(None)
	uint8                                        BitPad_86 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_8B6[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ViewPitchMin;                                      // 0x3964(0x4)(None)
	float                                        ViewPitchMax;                                      // 0x3968(0x4)(None)
	float                                        ViewYawMin;                                        // 0x396C(0x4)(None)
	float                                        ViewYawMax;                                        // 0x3970(0x4)(None)
	float                                        ViewRollMin;                                       // 0x3974(0x4)(None)
	float                                        ViewRollMax;                                       // 0x3978(0x4)(None)
	uint8                                        Pad_8B8[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ServerUpdateCameraTimeout;                         // 0x3980(0x4)(None)
	uint8                                        Pad_8BA[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TPVCameraOffset;                                   // 0x3990(0x18)(None)
	float                                        TPVCameraCollisionHeightScaler;                    // 0x39A8(0x4)(None)
	uint8                                        Pad_8BC[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerCameraManager* GetDefaultObj();

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();
	void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	void StartMatineeCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, class UCameraShakeBase* ReturnValue);
	void StartMatineeCameraShake(class UClass* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, class UCameraShakeBase* ReturnValue);
	void StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, class UCameraShakeBase* ReturnValue);
	void StartCameraShake(class UClass* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, bool bForceUseWorldCameraShakeScale, class UCameraShakeBase* ReturnValue);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	void SetGameCameraCutThisFrame();
	void RemoveGenericCameraLensEffect(TScriptInterface<class ICameraLensEffectInterface> Emitter);
	void RemoveCameraModifier(class UCameraModifier* ModifierToRemove, bool ReturnValue);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	void PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, class UCameraAnimInst* ReturnValue);
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, const struct FVector& ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	void GetWorldCameraShakeScale(bool bForceReturnUserSettingScale, float ReturnValue);
	void GetOwningPlayerController(class APlayerController* ReturnValue);
	void GetFOVAngle(float ReturnValue);
	void GetCameraRotation(const struct FRotator& ReturnValue);
	void GetCameraLocation(const struct FVector& ReturnValue);
	void FindCameraModifierByClass(class UClass* ModifierClass, class UCameraModifier* ReturnValue);
	void ClearCameraLensEffects();
	void BlueprintUpdateCamera(class AActor* CameraTarget, const struct FVector& NewCameraLocation, const struct FRotator& NewCameraRotation, float NewCameraFOV, bool ReturnValue);
	void AddNewCameraModifier(class UClass* ModifierClass, class UCameraModifier* ReturnValue);
	void AddGenericCameraLensEffect(class UClass* LensEffectEmitterClass, TScriptInterface<class ICameraLensEffectInterface> ReturnValue);
	void AddCameraLensEffect(class UClass* LensEffectEmitterClass, class AEmitterCameraLensEffectBase* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.DynamicBlueprintBinding
class UDynamicBlueprintBinding : public UObject
{
public:

	static class UClass* StaticClass();
	static class UDynamicBlueprintBinding* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InputDelegateBinding
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static class UClass* StaticClass();
	static class UInputDelegateBinding* GetDefaultObj();

};

// 0x88 (0x140 - 0xB8)
// Class Engine.InputComponent
class UInputComponent : public UActorComponent
{
public:
	uint8                                        Pad_8E8[0x70];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedKeyToActionInfo>        CachedKeyToActionInfo;                             // 0x128(0x10)(ZeroConstructor)
	uint8                                        Pad_8E9[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputComponent* GetDefaultObj();

	void WasControllerKeyJustReleased(const struct FKey& Key, bool ReturnValue);
	void WasControllerKeyJustPressed(const struct FKey& Key, bool ReturnValue);
	void OnInputOwnerEndPlayed(class AActor* InOwner, enum class EEndPlayReason EndPlayReason);
	void IsControllerKeyDown(const struct FKey& Key, bool ReturnValue);
	void GetTouchState(int32 FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);
	void GetControllerVectorKeyState(const struct FKey& Key, const struct FVector& ReturnValue);
	void GetControllerMouseDelta(float DeltaX, float DeltaY);
	void GetControllerKeyTimeDown(const struct FKey& Key, float ReturnValue);
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float StickX, float StickY);
	void GetControllerAnalogKeyState(const struct FKey& Key, float ReturnValue);
};

// 0xFA8 (0xFD0 - 0x28)
// Class Engine.Engine
class UEngine : public UObject
{
public:
	uint8                                        Pad_8EF[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 TinyFont;                                          // 0x30(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       TinyFontName;                                      // 0x38(0x20)(None)
	class UFont*                                 SmallFont;                                         // 0x58(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       SmallFontName;                                     // 0x60(0x20)(None)
	class UFont*                                 MediumFont;                                        // 0x80(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       MediumFontName;                                    // 0x88(0x20)(None)
	class UFont*                                 LargeFont;                                         // 0xA8(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       LargeFontName;                                     // 0xB0(0x20)(None)
	class UFont*                                 SubtitleFont;                                      // 0xD0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       SubtitleFontName;                                  // 0xD8(0x20)(None)
	TArray<class UFont*>                         AdditionalFonts;                                   // 0xF8(0x10)(ZeroConstructor)
	TArray<class FString>                        AdditionalFontNames;                               // 0x108(0x10)(None)
	class UClass*                                ConsoleClass;                                      // 0x118(0x8)(ZeroConstructor)
	struct FSoftClassPath                        ConsoleClassName;                                  // 0x120(0x20)(None)
	class UClass*                                GameViewportClientClass;                           // 0x140(0x8)(ZeroConstructor)
	struct FSoftClassPath                        GameViewportClientClassName;                       // 0x148(0x20)(None)
	class UClass*                                LocalPlayerClass;                                  // 0x168(0x8)(ZeroConstructor)
	struct FSoftClassPath                        LocalPlayerClassName;                              // 0x170(0x20)(None)
	class UClass*                                WorldSettingsClass;                                // 0x190(0x8)(ZeroConstructor)
	struct FSoftClassPath                        WorldSettingsClassName;                            // 0x198(0x20)(None)
	struct FSoftClassPath                        NavigationSystemClassName;                         // 0x1B8(0x20)(None)
	class UClass*                                NavigationSystemClass;                             // 0x1D8(0x8)(ZeroConstructor)
	struct FSoftClassPath                        NavigationSystemConfigClassName;                   // 0x1E0(0x20)(None)
	class UClass*                                NavigationSystemConfigClass;                       // 0x200(0x8)(ZeroConstructor)
	struct FSoftClassPath                        AvoidanceManagerClassName;                         // 0x208(0x20)(None)
	class UClass*                                AvoidanceManagerClass;                             // 0x228(0x8)(ZeroConstructor)
	struct FSoftClassPath                        AIControllerClassName;                             // 0x230(0x20)(None)
	class UClass*                                PhysicsCollisionHandlerClass;                      // 0x250(0x8)(ZeroConstructor)
	struct FSoftClassPath                        PhysicsCollisionHandlerClassName;                  // 0x258(0x20)(None)
	struct FSoftClassPath                        GameUserSettingsClassName;                         // 0x278(0x20)(None)
	class UClass*                                GameUserSettingsClass;                             // 0x298(0x8)(ZeroConstructor)
	class UGameUserSettings*                     GameUserSettings;                                  // 0x2A0(0x8)(ZeroConstructor)
	class UClass*                                LevelScriptActorClass;                             // 0x2A8(0x8)(ZeroConstructor)
	struct FSoftClassPath                        LevelScriptActorClassName;                         // 0x2B0(0x20)(None)
	struct FSoftClassPath                        DefaultBlueprintBaseClassName;                     // 0x2D0(0x20)(None)
	struct FSoftClassPath                        GameSingletonClassName;                            // 0x2F0(0x20)(None)
	class UObject*                               GameSingleton;                                     // 0x310(0x8)(ZeroConstructor)
	struct FSoftClassPath                        AssetManagerClassName;                             // 0x318(0x20)(None)
	class UAssetManager*                         AssetManager;                                      // 0x338(0x8)(ZeroConstructor)
	class UTexture2D*                            DefaultTexture;                                    // 0x340(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultTextureName;                                // 0x348(0x20)(None)
	class UTexture*                              DefaultDiffuseTexture;                             // 0x368(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultDiffuseTextureName;                         // 0x370(0x20)(None)
	class UTexture2D*                            DefaultBSPVertexTexture;                           // 0x390(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultBSPVertexTextureName;                       // 0x398(0x20)(None)
	class UTexture2D*                            HighFrequencyNoiseTexture;                         // 0x3B8(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       HighFrequencyNoiseTextureName;                     // 0x3C0(0x20)(None)
	class UTexture2D*                            DefaultBokehTexture;                               // 0x3E0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultBokehTextureName;                           // 0x3E8(0x20)(None)
	class UTexture2D*                            DefaultBloomKernelTexture;                         // 0x408(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultBloomKernelTextureName;                     // 0x410(0x20)(None)
	class UTexture2D*                            DefaultFilmGrainTexture;                           // 0x430(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultFilmGrainTextureName;                       // 0x438(0x20)(None)
	class UMaterial*                             WireframeMaterial;                                 // 0x458(0x8)(ZeroConstructor)
	class FString                                WireframeMaterialName;                             // 0x460(0x10)(None)
	class UMaterial*                             DebugMeshMaterial;                                 // 0x470(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DebugMeshMaterialName;                             // 0x478(0x20)(None)
	class UMaterial*                             NaniteHiddenSectionMaterial;                       // 0x498(0x8)(ZeroConstructor)
	class FString                                NaniteHiddenSectionMaterialName;                   // 0x4A0(0x10)(None)
	class UMaterial*                             EmissiveMeshMaterial;                              // 0x4B0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       EmissiveMeshMaterialName;                          // 0x4B8(0x20)(None)
	class UMaterial*                             LevelColorationLitMaterial;                        // 0x4D8(0x8)(ZeroConstructor)
	class FString                                LevelColorationLitMaterialName;                    // 0x4E0(0x10)(None)
	class UMaterial*                             LevelColorationUnlitMaterial;                      // 0x4F0(0x8)(ZeroConstructor)
	class FString                                LevelColorationUnlitMaterialName;                  // 0x4F8(0x10)(None)
	class UMaterial*                             LightingTexelDensityMaterial;                      // 0x508(0x8)(ZeroConstructor)
	class FString                                LightingTexelDensityName;                          // 0x510(0x10)(None)
	class UMaterial*                             ShadedLevelColorationLitMaterial;                  // 0x520(0x8)(ZeroConstructor)
	class FString                                ShadedLevelColorationLitMaterialName;              // 0x528(0x10)(None)
	class UMaterial*                             ShadedLevelColorationUnlitMaterial;                // 0x538(0x8)(ZeroConstructor)
	class FString                                ShadedLevelColorationUnlitMaterialName;            // 0x540(0x10)(None)
	class UMaterial*                             RemoveSurfaceMaterial;                             // 0x550(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       RemoveSurfaceMaterialName;                         // 0x558(0x20)(None)
	class UMaterial*                             VertexColorMaterial;                               // 0x578(0x8)(ZeroConstructor)
	class FString                                VertexColorMaterialName;                           // 0x580(0x10)(None)
	class UMaterial*                             VertexColorViewModeMaterial_ColorOnly;             // 0x590(0x8)(ZeroConstructor)
	class FString                                VertexColorViewModeMaterialName_ColorOnly;         // 0x598(0x10)(None)
	class UMaterial*                             VertexColorViewModeMaterial_AlphaAsColor;          // 0x5A8(0x8)(ZeroConstructor)
	class FString                                VertexColorViewModeMaterialName_AlphaAsColor;      // 0x5B0(0x10)(None)
	class UMaterial*                             VertexColorViewModeMaterial_RedOnly;               // 0x5C0(0x8)(ZeroConstructor)
	class FString                                VertexColorViewModeMaterialName_RedOnly;           // 0x5C8(0x10)(None)
	class UMaterial*                             VertexColorViewModeMaterial_GreenOnly;             // 0x5D8(0x8)(ZeroConstructor)
	class FString                                VertexColorViewModeMaterialName_GreenOnly;         // 0x5E0(0x10)(None)
	class UMaterial*                             VertexColorViewModeMaterial_BlueOnly;              // 0x5F0(0x8)(ZeroConstructor)
	class FString                                VertexColorViewModeMaterialName_BlueOnly;          // 0x5F8(0x10)(None)
	struct FSoftObjectPath                       DebugEditorMaterialName;                           // 0x608(0x20)(None)
	class UMaterial*                             ConstraintLimitMaterial;                           // 0x628(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialX;                          // 0x630(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialXAxis;                      // 0x638(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialY;                          // 0x640(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialYAxis;                      // 0x648(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZ;                          // 0x650(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZAxis;                      // 0x658(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialPrismatic;                  // 0x660(0x8)(ZeroConstructor)
	class UMaterial*                             InvalidLightmapSettingsMaterial;                   // 0x668(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       InvalidLightmapSettingsMaterialName;               // 0x670(0x20)(None)
	class UMaterial*                             PreviewShadowsIndicatorMaterial;                   // 0x690(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       PreviewShadowsIndicatorMaterialName;               // 0x698(0x20)(None)
	class UMaterial*                             ArrowMaterial;                                     // 0x6B8(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ArrowMaterialYellow;                               // 0x6C0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       ArrowMaterialName;                                 // 0x6C8(0x20)(None)
	struct FLinearColor                          LightingOnlyBrightness;                            // 0x6E8(0x10)(None)
	TArray<struct FLinearColor>                  ShaderComplexityColors;                            // 0x6F8(0x10)(None)
	TArray<struct FLinearColor>                  QuadComplexityColors;                              // 0x708(0x10)(None)
	TArray<struct FLinearColor>                  LightComplexityColors;                             // 0x718(0x10)(None)
	TArray<struct FLinearColor>                  StationaryLightOverlapColors;                      // 0x728(0x10)(None)
	TArray<struct FLinearColor>                  LODColorationColors;                               // 0x738(0x10)(None)
	TArray<struct FLinearColor>                  HLODColorationColors;                              // 0x748(0x10)(None)
	TArray<struct FLinearColor>                  StreamingAccuracyColors;                           // 0x758(0x10)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationExcludedColor;            // 0x768(0x10)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationIncludedColor;            // 0x778(0x10)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationRecomputeTangentsColor;   // 0x788(0x10)(None)
	float                                        GPUSkinCacheVisualizationLowMemoryThresholdInMB;   // 0x798(0x4)(None)
	float                                        GPUSkinCacheVisualizationHighMemoryThresholdInMB;  // 0x79C(0x4)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationLowMemoryColor;           // 0x7A0(0x10)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationMidMemoryColor;           // 0x7B0(0x10)(None)
	struct FLinearColor                          GPUSkinCacheVisualizationHighMemoryColor;          // 0x7C0(0x10)(None)
	TArray<struct FLinearColor>                  GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x7D0(0x10)(None)
	float                                        MaxPixelShaderAdditiveComplexityCount;             // 0x7E0(0x4)(None)
	float                                        MaxES3PixelShaderAdditiveComplexityCount;          // 0x7E4(0x4)(None)
	float                                        MinLightMapDensity;                                // 0x7E8(0x4)(None)
	float                                        IdealLightMapDensity;                              // 0x7EC(0x4)(None)
	float                                        MaxLightMapDensity;                                // 0x7F0(0x4)(None)
	uint8                                        bRenderLightMapDensityGrayscale : 1;               // Mask: 0x1, PropSize: 0x10x7F4(0x1)(None)
	uint8                                        BitPad_87 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_900[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RenderLightMapDensityGrayscaleScale;               // 0x7F8(0x4)(None)
	float                                        RenderLightMapDensityColorScale;                   // 0x7FC(0x4)(None)
	struct FLinearColor                          LightMapDensityVertexMappedColor;                  // 0x800(0x10)(None)
	struct FLinearColor                          LightMapDensitySelectedColor;                      // 0x810(0x10)(None)
	TArray<struct FStatColorMapping>             StatColorMappings;                                 // 0x820(0x10)(None)
	class UPhysicalMaterial*                     DefaultPhysMaterial;                               // 0x830(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultPhysMaterialName;                           // 0x838(0x20)(None)
	class UPhysicalMaterial*                     DefaultDestructiblePhysMaterial;                   // 0x858(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultDestructiblePhysMaterialName;               // 0x860(0x20)(None)
	TArray<struct FGameNameRedirect>             ActiveGameNameRedirects;                           // 0x880(0x10)(None)
	TArray<struct FClassRedirect>                ActiveClassRedirects;                              // 0x890(0x10)(None)
	TArray<struct FPluginRedirect>               ActivePluginRedirects;                             // 0x8A0(0x10)(None)
	TArray<struct FStructRedirect>               ActiveStructRedirects;                             // 0x8B0(0x10)(None)
	class UTexture2D*                            PreIntegratedSkinBRDFTexture;                      // 0x8C0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       PreIntegratedSkinBRDFTextureName;                  // 0x8C8(0x20)(None)
	class UTexture2D*                            BlueNoiseScalarTexture;                            // 0x8E8(0x8)(ZeroConstructor)
	class UTexture2D*                            BlueNoiseVec2Texture;                              // 0x8F0(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       BlueNoiseScalarTextureName;                        // 0x8F8(0x20)(None)
	struct FSoftObjectPath                       BlueNoiseVec2TextureName;                          // 0x918(0x20)(None)
	class UTexture2D*                            MiniFontTexture;                                   // 0x938(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       MiniFontTextureName;                               // 0x940(0x20)(None)
	class UTexture*                              WeightMapPlaceholderTexture;                       // 0x960(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       WeightMapPlaceholderTextureName;                   // 0x968(0x20)(None)
	class UTexture2D*                            LightMapDensityTexture;                            // 0x988(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       LightMapDensityTextureName;                        // 0x990(0x20)(None)
	uint8                                        Pad_902[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   GameViewport;                                      // 0x9B8(0x8)(ZeroConstructor)
	TArray<class FString>                        DeferredCommands;                                  // 0x9C0(0x10)(None)
	float                                        NearClipPlane;                                     // 0x9D0(0x4)(None)
	uint8                                        bSubtitlesEnabled : 1;                             // Mask: 0x1, PropSize: 0x10x9D4(0x1)(None)
	uint8                                        bSubtitlesForcedOff : 1;                           // Mask: 0x2, PropSize: 0x10x9D4(0x1)(None)
	uint8                                        BitPad_88 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_903[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaximumLoopIterationCount;                         // 0x9D8(0x4)(None)
	uint8                                        bCanBlueprintsTickByDefault : 1;                   // Mask: 0x1, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        bOptimizeAnimBlueprintMemberVariableAccess : 1;    // Mask: 0x2, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        bAllowMultiThreadedAnimationUpdate : 1;            // Mask: 0x4, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        bEnableEditorPSysRealtimeLOD : 1;                  // Mask: 0x8, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        BitPad_89 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSmoothFrameRate : 1;                              // Mask: 0x20, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        bUseFixedFrameRate : 1;                            // Mask: 0x40, PropSize: 0x10x9DC(0x1)(None)
	uint8                                        BitPad_8A : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_904[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FixedFrameRate;                                    // 0x9E0(0x4)(None)
	struct FFloatRange                           SmoothedFrameRateRange;                            // 0x9E4(0x10)(None)
	uint8                                        Pad_905[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UEngineCustomTimeStep*                 CustomTimeStep;                                    // 0x9F8(0x8)(ZeroConstructor)
	uint8                                        Pad_906[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        CustomTimeStepClassName;                           // 0xA20(0x20)(None)
	class UTimecodeProvider*                     TimecodeProvider;                                  // 0xA40(0x8)(None)
	uint8                                        Pad_907[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        TimecodeProviderClassName;                         // 0xA68(0x20)(None)
	bool                                         bGenerateDefaultTimecode;                          // 0xA88(0x1)(None)
	uint8                                        Pad_908[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFrameRate                            GenerateDefaultTimecodeFrameRate;                  // 0xA8C(0x8)(None)
	float                                        GenerateDefaultTimecodeFrameDelay;                 // 0xA94(0x4)(None)
	uint8                                        bCheckForMultiplePawnsSpawnedInAFrame : 1;         // Mask: 0x1, PropSize: 0x10xA98(0x1)(None)
	uint8                                        BitPad_8B : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_909[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPawnsAllowedToBeSpawnedInAFrame;                // 0xA9C(0x4)(None)
	uint8                                        bShouldGenerateLowQualityLightmaps : 1;            // Mask: 0x1, PropSize: 0x10xAA0(0x1)(None)
	uint8                                        BitPad_8C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_90A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                C_WorldBox;                                        // 0xAA4(0x4)(None)
	struct FColor                                C_BrushWire;                                       // 0xAA8(0x4)(None)
	struct FColor                                C_AddWire;                                         // 0xAAC(0x4)(None)
	struct FColor                                C_SubtractWire;                                    // 0xAB0(0x4)(None)
	struct FColor                                C_SemiSolidWire;                                   // 0xAB4(0x4)(None)
	struct FColor                                C_NonSolidWire;                                    // 0xAB8(0x4)(None)
	struct FColor                                C_WireBackground;                                  // 0xABC(0x4)(None)
	struct FColor                                C_ScaleBoxHi;                                      // 0xAC0(0x4)(None)
	struct FColor                                C_VolumeCollision;                                 // 0xAC4(0x4)(None)
	struct FColor                                C_BSPCollision;                                    // 0xAC8(0x4)(None)
	struct FColor                                C_OrthoBackground;                                 // 0xACC(0x4)(None)
	struct FColor                                C_Volume;                                          // 0xAD0(0x4)(None)
	struct FColor                                C_BrushShape;                                      // 0xAD4(0x4)(None)
	uint8                                        Pad_90F[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDirectoryPath                        GameScreenshotSaveDirectory;                       // 0xAE0(0x10)(None)
	bool                                         UseStaticMeshMinLODPerQualityLevels;               // 0xAF0(0x1)(None)
	bool                                         UseSkeletalMeshMinLODPerQualityLevels;             // 0xAF1(0x1)(None)
	bool                                         UseGrassVarityPerQualityLevels;                    // 0xAF2(0x1)(None)
	enum class ETransitionType                   TransitionType;                                    // 0xAF3(0x1)(None)
	uint8                                        Pad_910[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TransitionDescription;                             // 0xAF8(0x10)(None)
	class FString                                TransitionGameMode;                                // 0xB08(0x10)(None)
	uint8                                        bAllowMatureLanguage : 1;                          // Mask: 0x1, PropSize: 0x10xB18(0x1)(None)
	uint8                                        BitPad_8D : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_911[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraRotationThreshold;                           // 0xB1C(0x4)(None)
	float                                        CameraTranslationThreshold;                        // 0xB20(0x4)(None)
	float                                        PrimitiveProbablyVisibleTime;                      // 0xB24(0x4)(None)
	float                                        MaxOcclusionPixelsFraction;                        // 0xB28(0x4)(None)
	uint8                                        bPauseOnLossOfFocus : 1;                           // Mask: 0x1, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        BitPad_8E : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_913[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxParticleResize;                                 // 0xB30(0x4)(None)
	int32                                        MaxParticleResizeWarn;                             // 0xB34(0x4)(None)
	TArray<struct FDropNoteInfo>                 PendingDroppedNotes;                               // 0xB38(0x10)(None)
	float                                        NetClientTicksPerSecond;                           // 0xB48(0x4)(None)
	float                                        DisplayGamma;                                      // 0xB4C(0x4)(None)
	float                                        MinDesiredFrameRate;                               // 0xB50(0x4)(None)
	struct FLinearColor                          DefaultSelectedMaterialColor;                      // 0xB54(0x10)(None)
	struct FLinearColor                          SelectedMaterialColor;                             // 0xB64(0x10)(None)
	struct FLinearColor                          SelectionOutlineColor;                             // 0xB74(0x10)(None)
	struct FLinearColor                          SubduedSelectionOutlineColor;                      // 0xB84(0x10)(None)
	struct FLinearColor                          SelectedMaterialColorOverride;                     // 0xB94(0x10)(None)
	bool                                         bIsOverridingSelectedColor;                        // 0xBA4(0x1)(None)
	uint8                                        Pad_915[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableOnScreenDebugMessages : 1;                  // Mask: 0x1, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bEnableOnScreenDebugMessagesDisplay : 1;           // Mask: 0x2, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bSuppressMapWarnings : 1;                          // Mask: 0x4, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bDisableAILogging : 1;                             // Mask: 0x8, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        BitPad_8F : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_919[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       bEnableVisualLogRecordingOnStart;                  // 0xBAC(0x4)(None)
	int32                                        ScreenSaverInhibitorSemaphore;                     // 0xBB0(0x4)(None)
	uint8                                        bLockReadOnlyLevels : 1;                           // Mask: 0x1, PropSize: 0x10xBB4(0x1)(None)
	uint8                                        BitPad_90 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_91B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ParticleEventManagerClassPath;                     // 0xBB8(0x10)(None)
	float                                        SelectionHighlightIntensity;                       // 0xBC8(0x4)(None)
	float                                        BSPSelectionHighlightIntensity;                    // 0xBCC(0x4)(None)
	float                                        SelectionHighlightIntensityBillboards;             // 0xBD0(0x4)(None)
	uint8                                        Pad_91C[0x294];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       GlobalNetTravelCount;                              // 0xE68(0x4)(None)
	uint8                                        Pad_91D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetDriverDefinition>          NetDriverDefinitions;                              // 0xE70(0x10)(None)
	TArray<struct FIrisNetDriverConfig>          IrisNetDriverConfigs;                              // 0xE80(0x10)(None)
	TArray<class FString>                        ServerActors;                                      // 0xE90(0x10)(None)
	TArray<class FString>                        RuntimeServerActors;                               // 0xEA0(0x10)(None)
	float                                        NetErrorLogInterval;                               // 0xEB0(0x4)(None)
	uint8                                        bStartedLoadMapMovie : 1;                          // Mask: 0x1, PropSize: 0x10xEB4(0x1)(None)
	uint8                                        BitPad_91 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_921[0x1B];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NextWorldContextHandle;                            // 0xED0(0x4)(None)
	uint8                                        Pad_923[0xF4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NetworkStressTestClientMode_MinFPS;                // 0xFC8(0x4)(None)
	float                                        NetworkStressTestClientMode_MaxFPS;                // 0xFCC(0x4)(None)


	static class UEngine* GetEngine();
	static class UClass* StaticClass();
	static class UEngine* GetDefaultObj();

};

// 0x468 (0x4B8 - 0x50)
// Class Engine.LocalPlayer
class ULocalPlayer : public UPlayer
{
public:
	uint8                                        Pad_932[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   ViewportClient;                                    // 0x80(0x8)(ZeroConstructor)
	uint8                                        Pad_933[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAspectRatioAxisConstraint        AspectRatioAxisConstraint;                         // 0xC0(0x1)(None)
	uint8                                        Pad_934[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PendingLevelPlayerControllerClass;                 // 0xC8(0x8)(ZeroConstructor)
	uint8                                        bSentSplitJoin : 1;                                // Mask: 0x1, PropSize: 0x10xD0(0x1)(None)
	uint8                                        BitPad_92 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_935[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bValidCachedViewFrustum;                           // 0xD4(0x1)(None)
	uint8                                        Pad_936[0x21B];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ControllerId;                                      // 0x2F0(0x4)(None)
	uint8                                        Pad_937[0x1C4];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULocalPlayer* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.LocalPlayerSubsystem
class ULocalPlayerSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass();
	static class ULocalPlayerSubsystem* GetDefaultObj();

};

// 0x4C0 (0x4E8 - 0x28)
// Class Engine.PlayerInput
class UPlayerInput : public UObject
{
public:
	uint8                                        Pad_952[0x178];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyBind>                      DebugExecBindings;                                 // 0x1A0(0x10)(None)
	uint8                                        Pad_953[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          InvertedAxis;                                      // 0x1E0(0x10)(None)
	uint8                                        Pad_954[0x2F8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerInput* GetDefaultObj();

	void SetMouseSensitivity(float Sensitivity);
	void SetBind(class FName BindName, const class FString& Command);
	void InvertAxisKey(const struct FKey& AxisKey);
	void InvertAxis(class FName AxisName);
	void GetOuterAPlayerController(class APlayerController* ReturnValue);
	void ClearSmoothing();
};

// 0x8 (0x30 - 0x28)
// Class Engine.DataAsset
class UDataAsset : public UObject
{
public:
	class UClass*                                NativeClass;                                       // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UDataAsset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.PrimaryDataAsset
class UPrimaryDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass();
	static class UPrimaryDataAsset* GetDefaultObj();

};

// 0x68 (0x120 - 0xB8)
// Class Engine.MovementComponent
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                       UpdatedComponent;                                  // 0xB8(0x8)(ZeroConstructor)
	class UPrimitiveComponent*                   UpdatedPrimitive;                                  // 0xC0(0x8)(ZeroConstructor)
	uint8                                        Pad_9DF[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Velocity;                                          // 0xD0(0x18)(None)
	struct FVector                               PlaneConstraintNormal;                             // 0xE8(0x18)(None)
	struct FVector                               PlaneConstraintOrigin;                             // 0x100(0x18)(None)
	uint8                                        bUpdateOnlyIfRendered : 1;                         // Mask: 0x1, PropSize: 0x10x118(0x1)(None)
	uint8                                        bAutoUpdateTickRegistration : 1;                   // Mask: 0x2, PropSize: 0x10x118(0x1)(None)
	uint8                                        bTickBeforeOwner : 1;                              // Mask: 0x4, PropSize: 0x10x118(0x1)(None)
	uint8                                        bAutoRegisterUpdatedComponent : 1;                 // Mask: 0x8, PropSize: 0x10x118(0x1)(None)
	uint8                                        bConstrainToPlane : 1;                             // Mask: 0x10, PropSize: 0x10x118(0x1)(None)
	uint8                                        bSnapToPlaneAtStart : 1;                           // Mask: 0x20, PropSize: 0x10x118(0x1)(None)
	uint8                                        bAutoRegisterPhysicsVolumeUpdates : 1;             // Mask: 0x40, PropSize: 0x10x118(0x1)(None)
	uint8                                        bComponentShouldUpdatePhysicsVolume : 1;           // Mask: 0x80, PropSize: 0x10x118(0x1)(None)
	uint8                                        Pad_9E3[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPlaneConstraintAxisSetting       PlaneConstraintAxisSetting;                        // 0x11B(0x1)(None)
	uint8                                        Pad_9E4[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMovementComponent* GetDefaultObj();

	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	void K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, const struct FHitResult& OutHit, bool bSweep, bool bTeleport, bool ReturnValue);
	void IsExceedingMaxSpeed(float MaxSpeed, bool ReturnValue);
	void GetPlaneConstraintOrigin(const struct FVector& ReturnValue);
	void GetPlaneConstraintNormal(const struct FVector& ReturnValue);
	void GetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting ReturnValue);
	void GetPhysicsVolume(class APhysicsVolume* ReturnValue);
	void GetMaxSpeed(float ReturnValue);
	void GetGravityZ(float ReturnValue);
	void ConstrainNormalToPlane(const struct FVector& Normal, const struct FVector& ReturnValue);
	void ConstrainLocationToPlane(const struct FVector& Location, const struct FVector& ReturnValue);
	void ConstrainDirectionToPlane(const struct FVector& Direction, const struct FVector& ReturnValue);
};

// 0x48 (0x168 - 0x120)
// Class Engine.NavMovementComponent
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                   NavAgentProps;                                     // 0x120(0x38)(None)
	float                                        FixedPathBrakingDistance;                          // 0x158(0x4)(None)
	uint8                                        bUpdateNavAgentWithOwnersCollision : 1;            // Mask: 0x1, PropSize: 0x10x15C(0x1)(None)
	uint8                                        bUseAccelerationForPaths : 1;                      // Mask: 0x2, PropSize: 0x10x15C(0x1)(None)
	uint8                                        bUseFixedBrakingDistanceForPaths : 1;              // Mask: 0x4, PropSize: 0x10x15C(0x1)(None)
	uint8                                        BitPad_93 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FMovementProperties                   MovementState;                                     // 0x15D(0x1)(None)
	uint8                                        Pad_9F5[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UObject*                               PathFollowingComp;                                 // 0x160(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UNavMovementComponent* GetDefaultObj();

	void StopMovementKeepPathing();
	void StopActiveMovement();
	void IsSwimming(bool ReturnValue);
	void IsMovingOnGround(bool ReturnValue);
	void IsFlying(bool ReturnValue);
	void IsFalling(bool ReturnValue);
	void IsCrouching(bool ReturnValue);
};

// 0x8 (0x170 - 0x168)
// Class Engine.PawnMovementComponent
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                 PawnOwner;                                         // 0x168(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPawnMovementComponent* GetDefaultObj();

	void IsMoveInputIgnored(bool ReturnValue);
	void GetPendingInputVector(const struct FVector& ReturnValue);
	void GetPawnOwner(class APawn* ReturnValue);
	void GetLastInputVector(const struct FVector& ReturnValue);
	void ConsumeInputVector(const struct FVector& ReturnValue);
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};

// 0x18 (0x188 - 0x170)
// Class Engine.FloatingPawnMovement
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                        MaxSpeed;                                          // 0x170(0x4)(None)
	float                                        Acceleration;                                      // 0x174(0x4)(None)
	float                                        Deceleration;                                      // 0x178(0x4)(None)
	float                                        TurningBoost;                                      // 0x17C(0x4)(None)
	uint8                                        bPositionCorrected : 1;                            // Mask: 0x1, PropSize: 0x10x180(0x1)(None)
	uint8                                        Pad_A02[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFloatingPawnMovement* GetDefaultObj();

};

// 0x8 (0x190 - 0x188)
// Class Engine.SpectatorPawnMovement
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x188(0x1)(None)
	uint8                                        Pad_A06[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpectatorPawnMovement* GetDefaultObj();

};

// 0x98 (0x550 - 0x4B8)
// Class Engine.Pawn
class APawn : public AActor
{
public:
	uint8                                        Pad_A42[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseControllerRotationPitch : 1;                   // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bUseControllerRotationYaw : 1;                     // Mask: 0x2, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bUseControllerRotationRoll : 1;                    // Mask: 0x4, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bCanAffectNavigationGeneration : 1;                // Mask: 0x8, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bForceUseCustomCameraComponent : 1;                // Mask: 0x10, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bDisableControllerDesiredRotation : 1;             // Mask: 0x20, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        BitPad_94 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsLocalViewTarget : 1;                            // Mask: 0x1, PropSize: 0x10x4C1(0x1)(None)
	uint8                                        BitPad_95 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A43[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseEyeHeight;                                     // 0x4C4(0x4)(None)
	enum class EAutoReceiveInput                 AutoPossessPlayer;                                 // 0x4C8(0x1)(None)
	enum class EAutoPossessAI                    AutoPossessAI;                                     // 0x4C9(0x1)(None)
	uint8                                        RemoteViewPitch;                                   // 0x4CA(0x1)(None)
	uint8                                        Pad_A44[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                AIControllerClass;                                 // 0x4D0(0x8)(ZeroConstructor)
	class APlayerState*                          PlayerState;                                       // 0x4D8(0x8)(ZeroConstructor)
	uint8                                        Pad_A46[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           LastHitBy;                                         // 0x4E8(0x8)(ZeroConstructor)
	class AController*                           Controller;                                        // 0x4F0(0x8)(ZeroConstructor)
	class AController*                           PreviousController;                                // 0x4F8(0x8)(ZeroConstructor)
	uint8                                        Pad_A47[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastSparseDelegateProperty_            ReceiveControllerChangedDelegate;                  // 0x504(0x1)(ZeroConstructor)
	FMulticastSparseDelegateProperty_            ReceiveRestartedDelegate;                          // 0x505(0x1)(ZeroConstructor)
	uint8                                        Pad_A48[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ControlInputVector;                                // 0x508(0x18)(None)
	struct FVector                               LastControlInputVector;                            // 0x520(0x18)(None)
	class UClass*                                OverrideInputComponentClass;                       // 0x538(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnMovementTetherSet;                               // 0x540(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APawn* GetDefaultObj();

	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceiveRestarted();
	void ReceivePossessed(class AController* NewController);
	void ReceiveControllerChanged(class AController* OldController, class AController* NewController);
	void PossessedBy(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void IsPlayerControlled(bool ReturnValue);
	void IsPawnControlled(bool ReturnValue);
	void IsMoveInputIgnored(bool ReturnValue);
	void IsLocallyViewed(bool ReturnValue);
	void IsLocallyControlled(bool ReturnValue);
	void IsControlled(bool ReturnValue);
	void IsBotControlled(bool ReturnValue);
	void GetPlatformUserId(const struct FPlatformUserId& ReturnValue);
	void GetPendingMovementInputVector(const struct FVector& ReturnValue);
	void GetOverrideInputComponentClass(class UClass* ReturnValue);
	void GetNavAgentLocation(const struct FVector& ReturnValue);
	void GetMovementComponent(class UPawnMovementComponent* ReturnValue);
	void GetMovementBaseActor(class APawn* Pawn, class AActor* ReturnValue);
	void GetLocalViewingPlayerController(class APlayerController* ReturnValue);
	void GetLastMovementInputVector(const struct FVector& ReturnValue);
	void GetControlRotation(const struct FRotator& ReturnValue);
	void GetController(class AController* ReturnValue);
	void GetBaseAimRotation(const struct FRotator& ReturnValue);
	void DetachFromControllerPendingDestroy();
	void ConsumeMovementInputVector(const struct FVector& ReturnValue);
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};

// 0x20 (0x570 - 0x550)
// Class Engine.PrimalPawn
class APrimalPawn : public APawn
{
public:
	struct FRotator_NetQuantizeSmartPitch        LastMovementDesiredRotation;                       // 0x550(0x18)(None)
	uint8                                        bUseBPPreventMovementMode : 1;                     // Mask: 0x1, PropSize: 0x10x568(0x1)(None)
	uint8                                        bReplicateDesiredRotation : 1;                     // Mask: 0x2, PropSize: 0x10x568(0x1)(None)
	uint8                                        bIsPlayingTurningAnim : 1;                         // Mask: 0x4, PropSize: 0x10x568(0x1)(None)
	uint8                                        bClearOnConsume : 1;                               // Mask: 0x8, PropSize: 0x10x568(0x1)(None)
	uint8                                        bUse_ModifySavedMoveAcceleration_PreRep : 1;       // Mask: 0x10, PropSize: 0x10x568(0x1)(None)
	uint8                                        bUse_ModifySavedMoveAcceleration_PostRep : 1;      // Mask: 0x20, PropSize: 0x10x568(0x1)(None)
	uint8                                        BitPad_96 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A82[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HarvestingDestructionMeshRangeMultipler;           // 0x56C(0x4)(None)

	static class UClass* StaticClass();
	static class APrimalPawn* GetDefaultObj();

	void ShouldIKBeForceDisabled(bool ReturnValue);
	void InterceptInputEvent(const class FString& InputName);
	void InitInputComponent();
	void GetLastMovementDesiredRotation(const struct FRotator& ReturnValue);
	void CanMove(bool ReturnValue);
	void BPSetupPlayerInputComponent(class UInputComponent* ForInputComponent);
	void BPModifyRootMotionDeltaRotation(const struct FRotator& Delta, const struct FRotator& ReturnValue);
	void BPAcknowledgeServerCorrection(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode, bool ReturnValue);
	void BP_PreventMovementMode(enum class EMovementMode NewMovementMode, uint8 NewCustomMode, bool ReturnValue);
};

// 0x28 (0x598 - 0x570)
// Class Engine.DefaultPawn
class ADefaultPawn : public APrimalPawn
{
public:
	float                                        BaseTurnRate;                                      // 0x570(0x4)(None)
	float                                        BaseLookUpRate;                                    // 0x574(0x4)(None)
	class UPawnMovementComponent*                MovementComponent;                                 // 0x578(0x8)(ZeroConstructor)
	class USphereComponent*                      CollisionComponent;                                // 0x580(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  MeshComponent;                                     // 0x588(0x8)(ZeroConstructor)
	uint8                                        bAddDefaultMovementBindings : 1;                   // Mask: 0x1, PropSize: 0x10x590(0x1)(None)
	uint8                                        Pad_A86[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADefaultPawn* GetDefaultObj();

	void TurnAtRate(float Rate);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
};

// 0xC8 (0xF0 - 0x28)
// Class Engine.CameraShakeBase
class UCameraShakeBase : public UObject
{
public:
	bool                                         bSingleInstance;                                   // 0x28(0x1)(None)
	uint8                                        Pad_A88[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShakeScale;                                        // 0x2C(0x4)(None)
	class UCameraShakePattern*                   RootShakePattern;                                  // 0x30(0x8)(ZeroConstructor)
	class APlayerCameraManager*                  CameraManager;                                     // 0x38(0x8)(None)
	uint8                                        Pad_A89[0xA8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Speed;                                             // 0xE8(0x4)(None)
	uint8                                        bIgnoreWhenBasedOnDino : 1;                        // Mask: 0x1, PropSize: 0x10xEC(0x1)(None)
	uint8                                        bIgnoreWorldShakeScaling : 1;                      // Mask: 0x2, PropSize: 0x10xEC(0x1)(None)
	uint8                                        bForceUseCameraShakeScale : 1;                     // Mask: 0x4, PropSize: 0x10xEC(0x1)(None)
	uint8                                        Pad_A8A[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraShakeBase* GetDefaultObj();

	void SetRootShakePattern(class UCameraShakePattern* InPattern);
	void GetRootShakePattern(class UCameraShakePattern* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraShakePattern
class UCameraShakePattern : public UObject
{
public:

	static class UClass* StaticClass();
	static class UCameraShakePattern* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.CameraModifier
class UCameraModifier : public UObject
{
public:
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        bExclusive : 1;                                    // Mask: 0x2, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_97 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AA4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Priority;                                          // 0x2C(0x1)(None)
	uint8                                        Pad_AA5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCameraManager*                  CameraOwner;                                       // 0x30(0x8)(None)
	float                                        AlphaInTime;                                       // 0x38(0x4)(None)
	float                                        AlphaOutTime;                                      // 0x3C(0x4)(None)
	float                                        Alpha;                                             // 0x40(0x4)(None)
	uint8                                        Pad_AA6[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraModifier* GetDefaultObj();

	void OnCameraOwnerDestroyed(class AActor* InOwner);
	void IsDisabled(bool ReturnValue);
	void GetViewTarget(class AActor* ReturnValue);
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float PostProcessBlendWeight, const struct FPostProcessSettings& PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, const struct FVector& NewViewLocation, const struct FRotator& NewViewRotation, float NewFOV);
};

// 0x58 (0x80 - 0x28)
// Class Engine.Commandlet
class UCommandlet : public UObject
{
public:
	class FString                                HelpDescription;                                   // 0x28(0x10)(None)
	class FString                                HelpUsage;                                         // 0x38(0x10)(None)
	class FString                                HelpWebLink;                                       // 0x48(0x10)(None)
	TArray<class FString>                        HelpParamNames;                                    // 0x58(0x10)(None)
	TArray<class FString>                        HelpParamDescriptions;                             // 0x68(0x10)(None)
	uint8                                        IsServer : 1;                                      // Mask: 0x1, PropSize: 0x10x78(0x1)(None)
	uint8                                        IsClient : 1;                                      // Mask: 0x2, PropSize: 0x10x78(0x1)(None)
	uint8                                        IsEditor : 1;                                      // Mask: 0x4, PropSize: 0x10x78(0x1)(None)
	uint8                                        LogToConsole : 1;                                  // Mask: 0x8, PropSize: 0x10x78(0x1)(None)
	uint8                                        ShowErrorCount : 1;                                // Mask: 0x10, PropSize: 0x10x78(0x1)(None)
	uint8                                        ShowProgress : 1;                                  // Mask: 0x20, PropSize: 0x10x78(0x1)(None)
	uint8                                        FastExit : 1;                                      // Mask: 0x40, PropSize: 0x10x78(0x1)(None)
	uint8                                        Pad_AA7[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCommandlet* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetUserData
class UAssetUserData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAssetUserData* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Engine.Exporter
class UExporter : public UObject
{
public:
	class UClass*                                SupportedClass;                                    // 0x28(0x8)(ZeroConstructor)
	class UObject*                               ExportRootScope;                                   // 0x30(0x8)(ZeroConstructor)
	TArray<class FString>                        FormatExtension;                                   // 0x38(0x10)(None)
	TArray<class FString>                        FormatDescription;                                 // 0x48(0x10)(None)
	int32                                        PreferredFormatIndex;                              // 0x58(0x4)(None)
	int32                                        TextIndent;                                        // 0x5C(0x4)(None)
	uint8                                        bText : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(None)
	uint8                                        bSelectedOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x60(0x1)(None)
	uint8                                        bForceFileOperations : 1;                          // Mask: 0x4, PropSize: 0x10x60(0x1)(None)
	uint8                                        BitPad_98 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AB8[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UAssetExportTask*                      ExportTask;                                        // 0x68(0x8)(None)
	uint8                                        Pad_AB9[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UExporter* GetDefaultObj();

	void ScriptRunAssetExportTask(class UAssetExportTask* Task, bool ReturnValue);
	void RunAssetExportTasks(const TArray<class UAssetExportTask*>& ExportTasks, bool ReturnValue);
	void RunAssetExportTask(class UAssetExportTask* Task, bool ReturnValue);
};

// 0x38 (0x60 - 0x28)
// Class Engine.EdGraph
class UEdGraph : public UObject
{
public:
	class UClass*                                Schema;                                            // 0x28(0x8)(ZeroConstructor)
	TArray<class UEdGraphNode*>                  Nodes;                                             // 0x30(0x10)(None)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        bAllowDeletion : 1;                                // Mask: 0x2, PropSize: 0x10x40(0x1)(None)
	uint8                                        bAllowRenaming : 1;                                // Mask: 0x4, PropSize: 0x10x40(0x1)(None)
	uint8                                        Pad_ABE[0x1F];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UEdGraph* GetDefaultObj();

};

// 0x140 (0x168 - 0x28)
// Class Engine.SoundBase
class USoundBase : public UObject
{
public:
	uint8                                        Pad_AC0[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundClass*                           SoundClassObject;                                  // 0x30(0x8)(ZeroConstructor)
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        bOverrideConcurrency : 1;                          // Mask: 0x2, PropSize: 0x10x38(0x1)(None)
	uint8                                        bEnableBusSends : 1;                               // Mask: 0x4, PropSize: 0x10x38(0x1)(None)
	uint8                                        bEnableBaseSubmix : 1;                             // Mask: 0x8, PropSize: 0x10x38(0x1)(None)
	uint8                                        bEnableSubmixSends : 1;                            // Mask: 0x10, PropSize: 0x10x38(0x1)(None)
	uint8                                        bHasDelayNode : 1;                                 // Mask: 0x20, PropSize: 0x10x38(0x1)(None)
	uint8                                        bHasConcatenatorNode : 1;                          // Mask: 0x40, PropSize: 0x10x38(0x1)(None)
	uint8                                        bBypassVolumeScaleForPriority : 1;                 // Mask: 0x80, PropSize: 0x10x38(0x1)(None)
	enum class EVirtualizationMode               VirtualizationMode;                                // 0x39(0x1)(None)
	uint8                                        Pad_AC1[0x56];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class USoundConcurrency*>               ConcurrencySet;                                    // 0x90(0x50)(ZeroConstructor)
	struct FSoundConcurrencySettings             ConcurrencyOverrides;                              // 0xE0(0x20)(None)
	float                                        Duration;                                          // 0x100(0x4)(None)
	float                                        MaxDistance;                                       // 0x104(0x4)(None)
	float                                        TotalSamples;                                      // 0x108(0x4)(None)
	float                                        Priority;                                          // 0x10C(0x4)(None)
	class USoundAttenuation*                     AttenuationSettings;                               // 0x110(0x8)(ZeroConstructor)
	class USoundSubmixBase*                      SoundSubmixObject;                                 // 0x118(0x8)(ZeroConstructor)
	TArray<struct FSoundSubmixSendInfo>          SoundSubmixSends;                                  // 0x120(0x10)(ZeroConstructor)
	class USoundEffectSourcePresetChain*         SourceEffectChain;                                 // 0x130(0x8)(ZeroConstructor)
	TArray<struct FSoundSourceBusSendInfo>       BusSends;                                          // 0x138(0x10)(ZeroConstructor)
	TArray<struct FSoundSourceBusSendInfo>       PreEffectBusSends;                                 // 0x148(0x10)(ZeroConstructor)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x158(0x10)(None)

	static class UClass* StaticClass();
	static class USoundBase* GetDefaultObj();

};

// 0x300 (0x468 - 0x168)
// Class Engine.SoundWave
class USoundWave : public USoundBase
{
public:
	uint8                                        Pad_ACA[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CompressionQuality;                                // 0x178(0x4)(None)
	int32                                        StreamingPriority;                                 // 0x17C(0x4)(None)
	enum class ESoundwaveSampleRateSettings      SampleRateQuality;                                 // 0x180(0x1)(None)
	uint8                                        Pad_ACC[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESoundGroup                       SoundGroup;                                        // 0x182(0x1)(None)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x183(0x1)(None)
	uint8                                        bStreaming : 1;                                    // Mask: 0x2, PropSize: 0x10x183(0x1)(None)
	uint8                                        BitPad_99 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESoundAssetCompressionType        SoundAssetCompressionType;                         // 0x184(0x1)(None)
	uint8                                        bSeekableStreaming : 1;                            // Mask: 0x1, PropSize: 0x10x185(0x1)(None)
	uint8                                        bUseBinkAudio : 1;                                 // Mask: 0x2, PropSize: 0x10x185(0x1)(None)
	uint8                                        BitPad_9A : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_ACD[0x1A];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDefaultRoutingSettings ModulationSettings;                                // 0x1A0(0x188)(ZeroConstructor)
	TArray<float>                                FrequenciesToAnalyze;                              // 0x328(0x10)(None)
	TArray<struct FSoundWaveSpectralTimeData>    CookedSpectralTimeData;                            // 0x338(0x10)(None)
	TArray<struct FSoundWaveEnvelopeTimeData>    CookedEnvelopeTimeData;                            // 0x348(0x10)(None)
	int32                                        InitialChunkSize;                                  // 0x358(0x4)(None)
	uint8                                        Pad_ACE[0x40];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_9B : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bMature : 1;                                       // Mask: 0x20, PropSize: 0x10x39C(0x1)(None)
	uint8                                        bManualWordWrap : 1;                               // Mask: 0x40, PropSize: 0x10x39C(0x1)(None)
	uint8                                        bSingleLine : 1;                                   // Mask: 0x80, PropSize: 0x10x39C(0x1)(None)
	uint8                                        bIsAmbisonics : 1;                                 // Mask: 0x1, PropSize: 0x10x39D(0x1)(None)
	uint8                                        BitPad_9C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESoundWaveLoadingBehavior         LoadingBehavior;                                   // 0x39E(0x1)(None)
	uint8                                        Pad_ACF[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0x3A0(0x10)(None)
	TArray<struct FLocalizedSpokenText>          LocalizedSpokenTexts;                              // 0x3B0(0x10)(None)
	uint8                                        SubtitleColorIndex;                                // 0x3C0(0x1)(None)
	uint8                                        Pad_AD1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SubtitlePriority;                                  // 0x3C4(0x4)(None)
	float                                        Volume;                                            // 0x3C8(0x4)(None)
	float                                        Pitch;                                             // 0x3CC(0x4)(None)
	int32                                        NumChannels;                                       // 0x3D0(0x4)(None)
	uint8                                        Pad_AD2[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSoundWaveCuePoint>            CuePoints;                                         // 0x3D8(0x10)(None)
	int32                                        SampleRate;                                        // 0x3E8(0x4)(None)
	uint8                                        Pad_AD3[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSubtitleCue>                  Subtitles;                                         // 0x3F8(0x10)(None)
	class UCurveTable*                           Curves;                                            // 0x408(0x8)(ZeroConstructor)
	class UCurveTable*                           InternalCurves;                                    // 0x410(0x8)(ZeroConstructor)
	uint8                                        Pad_AD5[0x50];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundWave* GetDefaultObj();

	void SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty);
	void GetSoundAssetCompressionType(enum class ESoundAssetCompressionType ReturnValue);
};

// 0x58 (0x4C0 - 0x468)
// Class Engine.SoundWaveProcedural
class USoundWaveProcedural : public USoundWave
{
public:
	uint8                                        Pad_AE1[0x58];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundWaveProcedural* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class Engine.SoundEffectPreset
class USoundEffectPreset : public UObject
{
public:
	uint8                                        Pad_AE2[0x40];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundEffectPreset* GetDefaultObj();

};

// 0x0 (0x68 - 0x68)
// Class Engine.SoundEffectSubmixPreset
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass();
	static class USoundEffectSubmixPreset* GetDefaultObj();

};

// 0x0 (0x68 - 0x68)
// Class Engine.SoundEffectSourcePreset
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass();
	static class USoundEffectSourcePreset* GetDefaultObj();

};

// 0xD0 (0x110 - 0x40)
// Class Engine.AnimNotify_PlayParticleEffect
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x40(0x8)(ZeroConstructor)
	struct FVector                               LocationOffset;                                    // 0x48(0x18)(None)
	struct FRotator                              RotationOffset;                                    // 0x60(0x18)(None)
	struct FVector                               Scale;                                             // 0x78(0x18)(None)
	uint8                                        Pad_AE4[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Attached : 1;                                      // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_9E : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AE5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketName;                                        // 0xB4(0x8)(None)
	uint8                                        Pad_AE6[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystem*>               PhysicalSurfacePSTemplates;                        // 0xC0(0x10)(None)
	float                                        MaxSpawnDistanceFromCamera;                        // 0xD0(0x4)(None)
	bool                                         bSpawnIfMeshNotVisible;                            // 0xD4(0x1)(None)
	uint8                                        Pad_AE7[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EPhysicalSurface>          PhysicalSurfaceArray;                              // 0xD8(0x10)(None)
	bool                                         bUsePhysicalSurfaceArray;                          // 0xE8(0x1)(None)
	bool                                         bReallyUseFootstepsPhysicalSurfaceArray;           // 0xE9(0x1)(None)
	bool                                         bNotAttachedUseSocketRotation;                     // 0xEA(0x1)(None)
	bool                                         bDontSpawnOutOfView;                               // 0xEB(0x1)(None)
	bool                                         bOnlySpawnIfFirstPersonMeshVisible;                // 0xEC(0x1)(None)
	uint8                                        Pad_AE8[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ParticleScale;                                     // 0xF0(0x18)(None)
	bool                                         bUseComponentTransform;                            // 0x108(0x1)(None)
	bool                                         bOnlySpawnInThirdPerson;                           // 0x109(0x1)(None)
	bool                                         bOnlySpawnInFirstPerson;                           // 0x10A(0x1)(None)
	bool                                         bOnlyOwnerSee;                                     // 0x10B(0x1)(None)
	uint8                                        Pad_AEA[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_PlayParticleEffect* GetDefaultObj();

};

// 0x98 (0x550 - 0x4B8)
// Class Engine.Controller
class AController : public AActor
{
public:
	uint8                                        Pad_B29[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerState*                          PlayerState;                                       // 0x4C0(0x8)(ZeroConstructor)
	uint8                                        Pad_B2A[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInstigatedAnyDamage;                             // 0x4D0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPossessedPawnChanged;                            // 0x4E0(0x10)(ZeroConstructor)
	class FName                                  StateName;                                         // 0x4F0(0x8)(None)
	class APawn*                                 Pawn;                                              // 0x4F8(0x8)(ZeroConstructor)
	uint8                                        Pad_B2C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            Character;                                         // 0x508(0x8)(ZeroConstructor)
	class USceneComponent*                       TransformComponent;                                // 0x510(0x8)(ZeroConstructor)
	uint8                                        Pad_B32[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ControlRotation;                                   // 0x530(0x18)(None)
	uint8                                        bAttachToPawn : 1;                                 // Mask: 0x1, PropSize: 0x10x548(0x1)(None)
	uint8                                        BitPad_9F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanPossessWithoutAuthority : 1;                   // Mask: 0x4, PropSize: 0x10x548(0x1)(None)
	uint8                                        Pad_B33[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AController* GetDefaultObj();

	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	void LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks, bool ReturnValue);
	void K2_GetPawn(class APawn* ReturnValue);
	void IsPlayerController(bool ReturnValue);
	void IsMoveInputIgnored(bool ReturnValue);
	void IsLookInputIgnored(bool ReturnValue);
	void IsLocalPlayerController(bool ReturnValue);
	void IsLocalController(bool ReturnValue);
	void GetViewTarget(class AActor* ReturnValue);
	void GetPlayerViewPoint(const struct FVector& Location, const struct FRotator& Rotation);
	void GetDesiredRotation(const struct FRotator& ReturnValue);
	void GetControlRotation(const struct FRotator& ReturnValue);
	void ForcePossess(class APawn* InPawn);
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void CastToPlayerController(class APlayerController* ReturnValue);
};

// 0x10 (0x560 - 0x550)
// Class Engine.PrimalController
class APrimalController : public AController
{
public:
	uint8                                        bDebugPathing : 1;                                 // Mask: 0x1, PropSize: 0x10x550(0x1)(None)
	uint8                                        BitPad_A0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_B3A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastValidUnstasisCasterFrame;                      // 0x554(0x4)(None)
	uint8                                        Pad_B3B[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalController* GetDefaultObj();

};

// 0x540 (0xAA0 - 0x560)
// Class Engine.PlayerController
class APlayerController : public APrimalController
{
public:
	uint8                                        Pad_E49[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UPlayer*                               Player;                                            // 0x568(0x8)(ZeroConstructor)
	class APawn*                                 AcknowledgedPawn;                                  // 0x570(0x8)(ZeroConstructor)
	class UInterpTrackInstDirector*              ControllingDirTrackInst;                           // 0x578(0x8)(ZeroConstructor)
	class AHUD*                                  MyHUD;                                             // 0x580(0x8)(ZeroConstructor)
	class APlayerCameraManager*                  PlayerCameraManager;                               // 0x588(0x8)(ZeroConstructor)
	class UClass*                                PlayerCameraManagerClass;                          // 0x590(0x8)(ZeroConstructor)
	bool                                         bAutoManageActiveCameraTarget;                     // 0x598(0x1)(None)
	uint8                                        Pad_E4B[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              TargetViewRotation;                                // 0x5A0(0x18)(None)
	uint8                                        Pad_E4C[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothTargetViewRotationSpeed;                     // 0x5D0(0x4)(None)
	uint8                                        Pad_E4D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        HiddenActors;                                      // 0x5D8(0x10)(ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenPrimitiveComponents;                         // 0x5E8(0x10)(ZeroConstructor)
	uint8                                        Pad_E4E[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastSpectatorStateSynchTime;                       // 0x600(0x8)(None)
	struct FVector                               LastSpectatorSyncLocation;                         // 0x608(0x18)(None)
	struct FRotator                              LastSpectatorSyncRotation;                         // 0x620(0x18)(None)
	int32                                        ClientCap;                                         // 0x638(0x4)(None)
	uint8                                        Pad_E4F[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UCheatManager*                         CheatManager;                                      // 0x640(0x8)(ZeroConstructor)
	class UClass*                                CheatClass;                                        // 0x648(0x8)(ZeroConstructor)
	class UPlayerInput*                          PlayerInput;                                       // 0x650(0x8)(ZeroConstructor)
	TArray<struct FActiveForceFeedbackEffect>    ActiveForceFeedbackEffects;                        // 0x658(0x10)(ZeroConstructor)
	class UClass*                                AsyncPhysicsDataClass;                             // 0x668(0x8)(ZeroConstructor)
	class UAsyncPhysicsInputComponent*           AsyncPhysicsDataComponent;                         // 0x670(0x8)(ZeroConstructor)
	uint8                                        Pad_E51[0x80];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_A7 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPlayerIsWaiting : 1;                              // Mask: 0x10, PropSize: 0x10x6F8(0x1)(None)
	uint8                                        BitPad_A8 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E52[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        NetPlayerIndex;                                    // 0x6FC(0x1)(None)
	uint8                                        Pad_E53[0x5B];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        PendingSwapConnection;                             // 0x758(0x8)(ZeroConstructor)
	class UNetConnection*                        NetConnection;                                     // 0x760(0x8)(ZeroConstructor)
	struct FRotator                              RotationInput;                                     // 0x768(0x18)(None)
	float                                        InputYawScale;                                     // 0x780(0x4)(None)
	float                                        InputPitchScale;                                   // 0x784(0x4)(None)
	float                                        InputRollScale;                                    // 0x788(0x4)(None)
	uint8                                        bShowMouseCursor : 1;                              // Mask: 0x1, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableClickEvents : 1;                            // Mask: 0x2, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableTouchEvents : 1;                            // Mask: 0x4, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableMouseOverEvents : 1;                        // Mask: 0x8, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableTouchOverEvents : 1;                        // Mask: 0x10, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bForceFeedbackEnabled : 1;                         // Mask: 0x20, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableMotionControls : 1;                         // Mask: 0x40, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bEnableStreamingSource : 1;                        // Mask: 0x80, PropSize: 0x10x78C(0x1)(None)
	uint8                                        bStreamingSourceShouldActivate : 1;                // Mask: 0x1, PropSize: 0x10x78D(0x1)(None)
	uint8                                        bStreamingSourceShouldBlockOnSlowStreaming : 1;    // Mask: 0x2, PropSize: 0x10x78D(0x1)(None)
	uint8                                        BitPad_A9 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E55[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingSourcePriority          StreamingSourcePriority;                           // 0x790(0x1)(None)
	uint8                                        Pad_E56[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                StreamingSourceDebugColor;                         // 0x794(0x4)(None)
	TArray<struct FStreamingSourceShape>         StreamingSourceShapes;                             // 0x798(0x10)(None)
	float                                        ForceFeedbackScale;                                // 0x7A8(0x4)(None)
	uint8                                        Pad_E58[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKey>                          ClickEventKeys;                                    // 0x7B0(0x10)(None)
	enum class EMouseCursor                      DefaultMouseCursor;                                // 0x7C0(0x1)(None)
	enum class EMouseCursor                      CurrentMouseCursor;                                // 0x7C1(0x1)(None)
	enum class ECollisionChannel                 DefaultClickTraceChannel;                          // 0x7C2(0x1)(None)
	enum class ECollisionChannel                 CurrentClickTraceChannel;                          // 0x7C3(0x1)(None)
	float                                        HitResultTraceDistance;                            // 0x7C4(0x4)(None)
	uint16                                       SeamlessTravelCount;                               // 0x7C8(0x2)(None)
	uint16                                       LastCompletedSeamlessTravelCount;                  // 0x7CA(0x2)(None)
	uint8                                        Pad_E59[0x84];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInputComponent*                       InactiveStateInputComponent;                       // 0x850(0x8)(ZeroConstructor)
	uint8                                        BitPad_AA : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bShouldPerformFullTickWhenPaused : 1;              // Mask: 0x4, PropSize: 0x10x858(0x1)(None)
	uint8                                        BitPad_AB : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E5A[0x17];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTouchInterface*                       CurrentTouchInterface;                             // 0x870(0x8)(ZeroConstructor)
	class UClass*                                OverridePlayerInputClass;                          // 0x878(0x8)(ZeroConstructor)
	uint8                                        Pad_E5B[0x78];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASpectatorPawn*                        SpectatorPawn;                                     // 0x8F8(0x8)(ZeroConstructor)
	uint8                                        Pad_E5C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsLocalPlayerController;                          // 0x908(0x1)(None)
	uint8                                        Pad_E5D[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnLocation;                                     // 0x910(0x18)(None)
	uint8                                        Pad_E5E[0x178];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerController* GetDefaultObj();

	void WasInputKeyJustReleased(const struct FKey& Key, bool ReturnValue);
	void WasInputKeyJustPressed(const struct FKey& Key, bool ReturnValue);
	void ToggleSpeaking(bool bInSpeaking);
	void TestServerLevelVisibilityChange(class FName PackageName, class FName Filename);
	void SwitchLevel(const class FString& URL);
	void StreamingSourceShouldBlockOnSlowStreaming(bool ReturnValue);
	void StreamingSourceShouldActivate(bool ReturnValue);
	void StopHapticEffect(enum class EControllerHand Hand);
	void StartFire(uint8 FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const class FString& S);
	void SetMouseLocation(int32 X, int32 Y);
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, class UUserWidget* CursorWidget);
	void SetMotionControlsEnabled(bool bEnabled);
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand);
	void SetDisableHaptics(bool bNewDisabled);
	void SetDeprecatedInputYawScale(float NewValue);
	void SetDeprecatedInputRollScale(float NewValue);
	void SetDeprecatedInputPitchScale(float NewValue);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(const TArray<struct FUpdateLevelVisibilityLevelInfo>& LevelVisibilities);
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int32 CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerUnblockPlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerSendLatestAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& Timestamp);
	void ServerRestartPlayer();
	void ServerRecvClientInputFrame(int32 RecvClientInputFrame, const TArray<uint8>& Data);
	void ServerPause();
	void ServerNotifyLoadedWorld(class FName WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerExecRPC(const class FString& Msg);
	void ServerExec(const class FString& Msg);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const class FString& S);
	void ServerCamera(class FName NewMode);
	void ServerBlockPlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const class FString& Command);
	void RestartLevel();
	void ResetControllerLightColor();
	void ProjectWorldLocationToScreen(const struct FVector& WorldLocation, const struct FVector2D& ScreenLocation, bool bPlayerViewportRelative, bool ReturnValue);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void OnRep_AsyncPhysicsDataComponent();
	void LocalTravel(const class FString& URL);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	void IsStreamingSourceEnabled(bool ReturnValue);
	void IsInputKeyDown(const struct FKey& Key, bool ReturnValue);
	void GetViewportSize(int32 SizeX, int32 SizeY);
	void GetStreamingSourceShapes(const TArray<struct FStreamingSourceShape>& OutShapes);
	void GetStreamingSourcePriority(enum class EStreamingSourcePriority ReturnValue);
	void GetStreamingSourceLocationAndRotation(const struct FVector& OutLocation, const struct FRotator& OutRotation);
	void GetSpectatorPawn(class ASpectatorPawn* ReturnValue);
	void GetPlatformUserId(const struct FPlatformUserId& ReturnValue);
	void GetOverridePlayerInputClass(class UClass* ReturnValue);
	void GetMousePosition(float LocationX, float LocationY, bool bEvenWhenMouseNotAttached, bool ReturnValue);
	void GetInputVectorKeyState(const struct FKey& Key, const struct FVector& ReturnValue);
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);
	void GetInputMouseDelta(float DeltaX, float DeltaY);
	void GetInputMotionState(const struct FVector& Tilt, const struct FVector& RotationRate, const struct FVector& Gravity, const struct FVector& Acceleration);
	void GetInputKeyTimeDown(const struct FKey& Key, float ReturnValue);
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float StickX, float StickY);
	void GetInputAnalogKeyState(const struct FKey& Key, float ReturnValue);
	void GetHUD(class AHUD* ReturnValue);
	void GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetHitResultUnderCursorForObjects(const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, const struct FHitResult& HitResult, bool ReturnValue);
	void GetFocalLocation(const struct FVector& ReturnValue);
	void GetDeprecatedInputYawScale(float ReturnValue);
	void GetDeprecatedInputRollScale(float ReturnValue);
	void GetDeprecatedInputPitchScale(float ReturnValue);
	void GetAsyncPhysicsDataToWrite(class UAsyncPhysicsData* ReturnValue);
	void GetAsyncPhysicsDataToConsume(class UAsyncPhysicsData* ReturnValue);
	void FOV(float NewFOV);
	void EnableCheats(const class FString& Pass);
	void DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, const struct FVector& WorldLocation, const struct FVector& WorldDirection, bool ReturnValue);
	void DeprojectMousePositionToWorld(const struct FVector& WorldLocation, const struct FVector& WorldDirection, bool ReturnValue);
	void CopyStringToClipboard(const class FString& S);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(class FText KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(const TArray<struct FUpdateLevelStreamingLevelStatus>& LevelStatuses);
	void ClientUpdateLevelStreamingStatus(class FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex, const struct FNetLevelVisibilityTransactionId& TransactionId, bool bNewShouldBlockOnUnload);
	void ClientUnmutePlayers(const TArray<struct FUniqueNetIdRepl>& PlayerIds);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ClientTravelInternal(const class FString& URL, enum class ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const class FString& URL, enum class ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, class FName Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);
	void ClientStartCameraShake(class UClass* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, bool bForceUseWorldCameraShakeScale);
	void ClientSpawnGenericCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(class FName NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(class FText ReturnReason);
	void ClientReturnToMainMenu(const class FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientRecvServerAckFrameDebug(uint8 NumBuffered, float TargetNumBufferedCmds);
	void ClientRecvServerAckFrame(int32 LastProcessedInputFrame, int32 RecvServerFrameNumber, int8 TimeDilation);
	void ClientReceiveLocalizedMessage(class UClass* Message, int32 SWITCH, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups);
	void ClientPrepareMapChange(class FName LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params, float IntensityMult);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ClientMessage(const class FString& S, class FName Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(class FName NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCorrectionAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& Timestamp);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int32 Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClientAckUpdateLevelVisibility(class FName PackageName, const struct FNetLevelVisibilityTransactionId& TransactionId, bool bClientAckCanMakeVisible);
	void ClientAckTimeDilation(float TimeDilation, int32 ServerStep);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	void CanRestartPlayer(bool ReturnValue);
	void Camera(class FName NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};

// 0x48 (0xAE8 - 0xAA0)
// Class Engine.PrimalPlayerController
class APrimalPlayerController : public APlayerController
{
public:
	uint8                                        Pad_EB7[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              PreviousRotationInput;                             // 0xAA8(0x18)(None)
	uint8                                        Pad_EB8[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bLockedInputUI : 1;                                // Mask: 0x1, PropSize: 0x10xAD8(0x1)(None)
	uint8                                        BitPad_AE : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCheatPlayer : 1;                                  // Mask: 0x4, PropSize: 0x10xAD8(0x1)(None)
	uint8                                        BitPad_AF : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EB9[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShowExtendedInfoKey : 1;                          // Mask: 0x1, PropSize: 0x10xADC(0x1)(None)
	uint8                                        BitPad_B0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EBA[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsAdmin : 1;                                      // Mask: 0x1, PropSize: 0x10xAE0(0x1)(None)
	uint8                                        BitPad_B1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EBB[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceShowMouseCursor : 1;                         // Mask: 0x1, PropSize: 0x10xAE4(0x1)(None)
	uint8                                        Pad_EBC[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalPlayerController* GetDefaultObj();

	void ServerProcessNetExecCommandUnreliable(class AActor* ForActor, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerProcessNetExecCommand(class AActor* ForActor, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void PropertyServerToClientsUnreliable(class AActor* ActorToRep, class FName PropertyName, const TArray<uint8>& ReplicationData);
	void PropertyServerToClients(class AActor* ActorToRep, class FName PropertyName, const TArray<uint8>& ReplicationData);
	void NetConnectionHasActiveActor(class AActor* AnActor, bool ReturnValue);
	void HandleRespawned(class APawn* NewPawn, bool IsFirstSpawn);
	void ClientTeleportSucceeded(const struct FVector& TeleportLoc, const struct FRotator& TeleportRot, bool bSimpleTeleport);
	void ClientSendNetExecCommandToServer(class AActor* ForActor, class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
	void ClientProcessSimpleNetExecCommandUnreliableBP(class AActor* ForActor, class FName CommandName);
	void ClientProcessSimpleNetExecCommandBP(class AActor* ForActor, class FName CommandName);
	void ClientProcessNetExecCommandUnreliableBP(class AActor* ForActor, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessNetExecCommandUnreliable(class AActor* ForActor, class FName CommandName, const struct FNetExecParams& ExecParams);
	void ClientProcessNetExecCommandBP(class AActor* ForActor, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessNetExecCommand(class AActor* ForActor, class FName CommandName, const struct FNetExecParams& ExecParams);
	void ClientNotifyRespawned(class APawn* NewPawn, bool IsFirstSpawn);
	void ClientNotifyReconnected(class APawn* NewPawn);
	void BPServerRestartPlayer();
	void BPGetAimedUseActor(class AActor* ReturnValue);
};

// 0xC8 (0x580 - 0x4B8)
// Class Engine.GameStateBase
class AGameStateBase : public AInfo
{
public:
	class UClass*                                GameModeClass;                                     // 0x4B8(0x8)(ZeroConstructor)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0x4C0(0x8)(ZeroConstructor)
	class UClass*                                SpectatorClass;                                    // 0x4C8(0x8)(ZeroConstructor)
	TArray<class APlayerState*>                  PlayerArray;                                       // 0x4D0(0x10)(ZeroConstructor)
	bool                                         bReplicatedHasBegunPlay;                           // 0x4E0(0x1)(None)
	uint8                                        Pad_ECB[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedWorldTimeSeconds;                        // 0x4E4(0x4)(None)
	double                                       ReplicatedWorldTimeSecondsDouble;                  // 0x4E8(0x8)(None)
	float                                        ServerWorldTimeSecondsDelta;                       // 0x4F0(0x4)(None)
	float                                        ServerWorldTimeSecondsUpdateFrequency;             // 0x4F4(0x4)(None)
	uint8                                        Pad_ECC[0x68];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAnyPostProcessVolumeEntered;                     // 0x560(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnAnyPostProcessVolumeLeft;                        // 0x570(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AGameStateBase* GetDefaultObj();

	void Semaphore_TryGrab(class FName SemaphoreName, class AActor* InObject, float PriorityWeight, int32 MaxToAllocate, bool ReturnValue);
	void Semaphore_Release(class FName SemaphoreName, class AActor* InObject, bool ReturnValue);
	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSecondsDouble();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	void HasMatchStarted(bool ReturnValue);
	void HasMatchEnded(bool ReturnValue);
	void HasBegunPlay(bool ReturnValue);
	void GetServerWorldTimeSeconds(double ReturnValue);
	void GetPlayerStartTime(class AController* Controller, float ReturnValue);
	void GetPlayerRespawnDelay(class AController* Controller, float ReturnValue);
};

// 0x20 (0x5A0 - 0x580)
// Class Engine.GameState
class AGameState : public AGameStateBase
{
public:
	class FName                                  MatchState;                                        // 0x580(0x8)(None)
	class FName                                  PreviousMatchState;                                // 0x588(0x8)(None)
	int32                                        ElapsedTime;                                       // 0x590(0x4)(None)
	uint8                                        Pad_ECF[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameState* GetDefaultObj();

	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};

// 0x48 (0x5A0 - 0x558)
// Class Engine.GameMode
class AGameMode : public AGameModeBase
{
public:
	class FName                                  MatchState;                                        // 0x558(0x8)(None)
	uint8                                        bDelayedStart : 1;                                 // Mask: 0x1, PropSize: 0x10x560(0x1)(None)
	uint8                                        BitPad_B2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_ED2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumSpectators;                                     // 0x564(0x4)(None)
	int32                                        NumPlayers;                                        // 0x568(0x4)(None)
	int32                                        NumBots;                                           // 0x56C(0x4)(None)
	float                                        MinRespawnDelay;                                   // 0x570(0x4)(None)
	int32                                        NumTravellingPlayers;                              // 0x574(0x4)(None)
	class UClass*                                EngineMessageClass;                                // 0x578(0x8)(ZeroConstructor)
	TArray<class APlayerState*>                  InactivePlayerArray;                               // 0x580(0x10)(ZeroConstructor)
	float                                        InactivePlayerStateLifeSpan;                       // 0x590(0x4)(None)
	int32                                        MaxInactivePlayers;                                // 0x594(0x4)(None)
	bool                                         bHandleDedicatedServerReplays;                     // 0x598(0x1)(None)
	uint8                                        Pad_ED3[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameMode* GetDefaultObj();

	void StartMatch();
	void Say(const class FString& Msg);
	void RestartGame();
	void ReadyToStartMatch(bool ReturnValue);
	void ReadyToEndMatch(bool ReturnValue);
	void K2_OnSetMatchState(class FName NewState);
	void IsMatchInProgress(bool ReturnValue);
	void GetMatchState(class FName ReturnValue);
	void EndMatch();
	void AbortMatch();
};

// 0x20 (0x5C0 - 0x5A0)
// Class Engine.PrimalGameMode
class APrimalGameMode : public AGameMode
{
public:
	uint8                                        Pad_ED5[0x20];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalGameMode* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.DestructibleBaseActor
class ADestructibleBaseActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class ADestructibleBaseActor* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.Light
class ALight : public AActor
{
public:
	class ULightComponent*                       LightComponent;                                    // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        Pad_ED7[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALight* GetDefaultObj();

	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	void IsEnabled(bool ReturnValue);
	void GetLightColor(const struct FLinearColor& ReturnValue);
	void GetBrightness(float ReturnValue);
};

// 0x18 (0x40 - 0x28)
// Class Engine.DamageType
class UDamageType : public UObject
{
public:
	uint8                                        bIsPassiveDamage : 1;                              // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        bCausedByWorld : 1;                                // Mask: 0x2, PropSize: 0x10x28(0x1)(None)
	uint8                                        bScaleMomentumByMass : 1;                          // Mask: 0x4, PropSize: 0x10x28(0x1)(None)
	uint8                                        bRadialDamageVelChange : 1;                        // Mask: 0x8, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_B3 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_ED8[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageImpulse;                                     // 0x2C(0x4)(None)
	float                                        DestructibleImpulse;                               // 0x30(0x4)(None)
	float                                        DestructibleDamageSpreadScale;                     // 0x34(0x4)(None)
	float                                        DamageFalloff;                                     // 0x38(0x4)(None)
	uint8                                        Pad_ED9[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDamageType* GetDefaultObj();

};

// 0x28 (0x68 - 0x40)
// Class Engine.PrimalDamageType
class UPrimalDamageType : public UDamageType
{
public:
	uint8                                        bIsPhysicalDamage : 1;                             // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        bAllowPerBoneDamageAdjustment : 1;                 // Mask: 0x2, PropSize: 0x10x40(0x1)(None)
	uint8                                        bImpulseAffectsLivePawns : 1;                      // Mask: 0x4, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_B4 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EDA[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpulseMinimumZPercent;                            // 0x44(0x4)(None)
	float                                        DestructibleImpulseScale;                          // 0x48(0x4)(None)
	float                                        ImpulseRagdollScale;                               // 0x4C(0x4)(None)
	float                                        DefaultImpulse;                                    // 0x50(0x4)(None)
	float                                        PointDamageArmorEffectiveness;                     // 0x54(0x4)(None)
	float                                        GeneralDamageArmorEffectiveness;                   // 0x58(0x4)(None)
	float                                        ArmorDurabilityDegradationMultiplier;              // 0x5C(0x4)(None)
	float                                        RadialPartiallyObstructedDamagePercent;            // 0x60(0x4)(None)
	uint8                                        Pad_EDB[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalDamageType* GetDefaultObj();

};

// 0xB0 (0x568 - 0x4B8)
// Class Engine.MatineeActor
class AMatineeActor : public AActor
{
public:
	class UInterpData*                           MatineeData;                                       // 0x4B8(0x8)(ZeroConstructor)
	class FName                                  MatineeControllerName;                             // 0x4C0(0x8)(None)
	float                                        PlayRate;                                          // 0x4C8(0x4)(None)
	uint8                                        bPlayOnLevelLoad : 1;                              // Mask: 0x1, PropSize: 0x10x4CC(0x1)(None)
	uint8                                        bForceStartPos : 1;                                // Mask: 0x2, PropSize: 0x10x4CC(0x1)(None)
	uint8                                        BitPad_B6 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EEF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceStartPosition;                                // 0x4D0(0x4)(None)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bRewindOnPlay : 1;                                 // Mask: 0x2, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bNoResetOnRewind : 1;                              // Mask: 0x4, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bRewindIfAlreadyPlaying : 1;                       // Mask: 0x8, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bDisableRadioFilter : 1;                           // Mask: 0x10, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bClientSideOnly : 1;                               // Mask: 0x20, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bSkipUpdateIfNotVisible : 1;                       // Mask: 0x40, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        bIsSkippable : 1;                                  // Mask: 0x80, PropSize: 0x10x4D4(0x1)(None)
	uint8                                        Pad_EF1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PreferredSplitScreenNum;                           // 0x4D8(0x4)(None)
	uint8                                        bDisableMovementInput : 1;                         // Mask: 0x1, PropSize: 0x10x4DC(0x1)(None)
	uint8                                        bDisableLookAtInput : 1;                           // Mask: 0x2, PropSize: 0x10x4DC(0x1)(None)
	uint8                                        bHidePlayer : 1;                                   // Mask: 0x4, PropSize: 0x10x4DC(0x1)(None)
	uint8                                        bHideHud : 1;                                      // Mask: 0x8, PropSize: 0x10x4DC(0x1)(None)
	uint8                                        BitPad_B7 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EF2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInterpGroupActorInfo>         GroupActorInfos;                                   // 0x4E0(0x10)(ZeroConstructor)
	uint8                                        bShouldShowGore : 1;                               // Mask: 0x1, PropSize: 0x10x4F0(0x1)(None)
	uint8                                        BitPad_B8 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EF3[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpGroupInst*>              GroupInst;                                         // 0x4F8(0x10)(ZeroConstructor)
	TArray<struct FCameraCutInfo>                CameraCuts;                                        // 0x508(0x10)(None)
	uint8                                        bIsPlaying : 1;                                    // Mask: 0x1, PropSize: 0x10x518(0x1)(None)
	uint8                                        bReversePlayback : 1;                              // Mask: 0x2, PropSize: 0x10x518(0x1)(None)
	uint8                                        bPaused : 1;                                       // Mask: 0x4, PropSize: 0x10x518(0x1)(None)
	uint8                                        bPendingStop : 1;                                  // Mask: 0x8, PropSize: 0x10x518(0x1)(None)
	uint8                                        BitPad_B9 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EF4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpPosition;                                    // 0x51C(0x4)(None)
	uint8                                        Pad_EF5[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        ReplicationForceIsPlaying;                         // 0x524(0x1)(None)
	uint8                                        Pad_EF6[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPlay;                                            // 0x528(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnStop;                                            // 0x538(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPause;                                           // 0x548(0x10)(ZeroConstructor)
	uint8                                        Pad_EF7[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsGameplayRelevant : 1;                           // Mask: 0x1, PropSize: 0x10x560(0x1)(None)
	uint8                                        bDedicatedServerUpdateInterpolations : 1;          // Mask: 0x2, PropSize: 0x10x560(0x1)(None)
	uint8                                        bReplicateGroupInfos : 1;                          // Mask: 0x4, PropSize: 0x10x560(0x1)(None)
	uint8                                        bUseGameStatePlayRate : 1;                         // Mask: 0x8, PropSize: 0x10x560(0x1)(None)
	uint8                                        bClientDontPlayMatineeIfCompleted : 1;             // Mask: 0x10, PropSize: 0x10x560(0x1)(None)
	uint8                                        Pad_EF8[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMatineeActor* GetDefaultObj();

	void Stop();
	void SetPosition(float NewPosition, bool bJump, bool bForceJumpFromBeginningForEvents, bool bSkipMatineeUpdate);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play(float OverrideSetPosition, bool bOverridePositionJump);
	void Pause();
	void OnRep_IsPlayingMatinee();
	void InitClientMatinee();
	void EnableGroupByName(const class FString& GroupName, bool bEnable);
	void ChangePlaybackDirection();
	void AddActorToGroup(class FName GroupName, class AActor* TheGroupActor);
};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.Note
class ANote : public AActor
{
public:

	static class UClass* StaticClass();
	static class ANote* GetDefaultObj();

};

// 0x130 (0x1A0 - 0x70)
// Class Engine.ParticleSystem
class UParticleSystem : public UFXSystemAsset
{
public:
	float                                        UpdateTime_FPS;                                    // 0x70(0x4)(None)
	float                                        UpdateTime_Delta;                                  // 0x74(0x4)(None)
	float                                        WarmupTime;                                        // 0x78(0x4)(None)
	float                                        WarmupTickRate;                                    // 0x7C(0x4)(None)
	TArray<class UParticleEmitter*>              Emitters;                                          // 0x80(0x10)(ZeroConstructor)
	class UParticleSystemComponent*              PreviewComponent;                                  // 0x90(0x8)(ZeroConstructor)
	class UInterpCurveEdSetup*                   CurveEdSetup;                                      // 0x98(0x8)(ZeroConstructor)
	float                                        LODDistanceCheckTime;                              // 0xA0(0x4)(None)
	float                                        MacroUVRadius;                                     // 0xA4(0x4)(None)
	TArray<float>                                LODDistances;                                      // 0xA8(0x10)(None)
	TArray<struct FParticleSystemLOD>            LODSettings;                                       // 0xB8(0x10)(None)
	struct FBox                                  FixedRelativeBoundingBox;                          // 0xC8(0x38)(None)
	float                                        SecondsBeforeInactive;                             // 0x100(0x4)(None)
	float                                        Delay;                                             // 0x104(0x4)(None)
	float                                        DelayLow;                                          // 0x108(0x4)(None)
	uint8                                        bOrientZAxisTowardCamera : 1;                      // Mask: 0x1, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bAllowLOD : 1;                                     // Mask: 0x2, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bUseFixedRelativeBoundingBox : 1;                  // Mask: 0x4, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bShouldResetPeakCounts : 1;                        // Mask: 0x8, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bHasPhysics : 1;                                   // Mask: 0x10, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bUseRealtimeThumbnail : 1;                         // Mask: 0x20, PropSize: 0x10x10C(0x1)(None)
	uint8                                        ThumbnailImageOutOfDate : 1;                       // Mask: 0x40, PropSize: 0x10x10C(0x1)(None)
	uint8                                        BitPad_BA : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_BB : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseDelayRange : 1;                                // Mask: 0x2, PropSize: 0x10x10D(0x1)(None)
	uint8                                        bAllowManagedTicking : 1;                          // Mask: 0x4, PropSize: 0x10x10D(0x1)(None)
	uint8                                        bAutoDeactivate : 1;                               // Mask: 0x8, PropSize: 0x10x10D(0x1)(None)
	uint8                                        bRegenerateLODDuplicate : 1;                       // Mask: 0x10, PropSize: 0x10x10D(0x1)(None)
	uint8                                        BitPad_BC : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSystemUpdateMode         SystemUpdateMode;                                  // 0x10E(0x1)(None)
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0x10F(0x1)(None)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction;                             // 0x110(0x1)(None)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;                             // 0x111(0x1)(None)
	uint8                                        Pad_EFE[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSignificanceLevel        MaxSignificanceLevel;                              // 0x113(0x1)(None)
	uint32                                       MinTimeBetweenTicks;                               // 0x114(0x4)(None)
	float                                        InsignificanceDelay;                               // 0x118(0x4)(None)
	uint8                                        Pad_EFF[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MacroUVPosition;                                   // 0x120(0x18)(None)
	struct FBox                                  CustomOcclusionBounds;                             // 0x138(0x38)(None)
	TArray<struct FLODSoloTrack>                 SoloTracking;                                      // 0x170(0x10)(None)
	TArray<struct FNamedEmitterMaterial>         NamedMaterialSlots;                                // 0x180(0x10)(None)
	uint8                                        Pad_F00[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bLocalSpaceUsesParticleBase : 1;                   // Mask: 0x1, PropSize: 0x10x194(0x1)(None)
	uint8                                        bForceHighQualityEmitter : 1;                      // Mask: 0x2, PropSize: 0x10x194(0x1)(None)
	uint8                                        bForcePreventInactiveLoopReset : 1;                // Mask: 0x4, PropSize: 0x10x194(0x1)(None)
	uint8                                        BitPad_BD : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F01[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideMaxDrawDistance;                           // 0x198(0x4)(None)
	float                                        CustomTimeDilation;                                // 0x19C(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleSystem* GetDefaultObj();

	void ContainsEmitterType(class UClass* TypeData, bool ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ParticleModule
class UParticleModule : public UObject
{
public:
	uint8                                        bSpawnModule : 1;                                  // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        bUpdateModule : 1;                                 // Mask: 0x2, PropSize: 0x10x28(0x1)(None)
	uint8                                        bFinalUpdateModule : 1;                            // Mask: 0x4, PropSize: 0x10x28(0x1)(None)
	uint8                                        bUpdateForGPUEmitter : 1;                          // Mask: 0x8, PropSize: 0x10x28(0x1)(None)
	uint8                                        bCurvesAsColor : 1;                                // Mask: 0x10, PropSize: 0x10x28(0x1)(None)
	uint8                                        b3DDrawMode : 1;                                   // Mask: 0x20, PropSize: 0x10x28(0x1)(None)
	uint8                                        bSupported3DDrawMode : 1;                          // Mask: 0x40, PropSize: 0x10x28(0x1)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x80, PropSize: 0x10x28(0x1)(None)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x29(0x1)(None)
	uint8                                        LODDuplicate : 1;                                  // Mask: 0x2, PropSize: 0x10x29(0x1)(None)
	uint8                                        bSupportsRandomSeed : 1;                           // Mask: 0x4, PropSize: 0x10x29(0x1)(None)
	uint8                                        bRequiresLoopingNotification : 1;                  // Mask: 0x8, PropSize: 0x10x29(0x1)(None)
	uint8                                        BitPad_BE : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        LODValidity;                                       // 0x2A(0x1)(None)
	uint8                                        Pad_F03[0x5];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModule* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.PrimalAssetsBase
class UPrimalAssetsBase : public UObject
{
public:
	uint8                                        Pad_F06[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAssetsBase* GetDefaultObj();

};

// 0x340 (0x8B0 - 0x570)
// Class Engine.Character
class ACharacter : public APrimalPawn
{
public:
	class USkeletalMeshComponent*                Mesh;                                              // 0x570(0x8)(ZeroConstructor)
	class UCharacterMovementComponent*           CharacterMovement;                                 // 0x578(0x8)(ZeroConstructor)
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x580(0x8)(ZeroConstructor)
	struct FBasedMovementInfo                    BasedMovement;                                     // 0x588(0x50)(ZeroConstructor)
	struct FReplicatedBasedMovementInfo          ReplicatedBasedMovement;                           // 0x5D8(0x58)(ZeroConstructor)
	float                                        AnimRootMotionTranslationScale;                    // 0x630(0x4)(None)
	uint8                                        Pad_F4F[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BaseTranslationOffset;                             // 0x638(0x18)(None)
	struct FQuat                                 BaseRotationOffset;                                // 0x650(0x20)(None)
	double                                       ReplicatedServerLastTransformUpdateTimeStamp;      // 0x670(0x8)(None)
	float                                        ReplayLastTransformUpdateTimeStamp;                // 0x678(0x4)(None)
	uint8                                        ReplicatedMovementMode;                            // 0x67C(0x1)(None)
	bool                                         bInBaseReplication;                                // 0x67D(0x1)(None)
	uint8                                        Pad_F50[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrouchedEyeHeight;                                 // 0x680(0x4)(None)
	uint8                                        bIsCrouched : 1;                                   // Mask: 0x1, PropSize: 0x10x684(0x1)(None)
	uint8                                        bProxyIsJumpForceApplied : 1;                      // Mask: 0x2, PropSize: 0x10x684(0x1)(None)
	uint8                                        BitPad_BF : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPressedJump : 1;                                  // Mask: 0x8, PropSize: 0x10x684(0x1)(None)
	uint8                                        bClientUpdating : 1;                               // Mask: 0x10, PropSize: 0x10x684(0x1)(None)
	uint8                                        bClientWasFalling : 1;                             // Mask: 0x20, PropSize: 0x10x684(0x1)(None)
	uint8                                        bClientResimulateRootMotion : 1;                   // Mask: 0x40, PropSize: 0x10x684(0x1)(None)
	uint8                                        bClientResimulateRootMotionSources : 1;            // Mask: 0x80, PropSize: 0x10x684(0x1)(None)
	uint8                                        bSimGravityDisabled : 1;                           // Mask: 0x1, PropSize: 0x10x685(0x1)(None)
	uint8                                        bClientCheckEncroachmentOnNetUpdate : 1;           // Mask: 0x2, PropSize: 0x10x685(0x1)(None)
	uint8                                        bServerMoveIgnoreRootMotion : 1;                   // Mask: 0x4, PropSize: 0x10x685(0x1)(None)
	uint8                                        bWasJumping : 1;                                   // Mask: 0x8, PropSize: 0x10x685(0x1)(None)
	uint8                                        BitPad_C0 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F51[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        JumpKeyHoldTime;                                   // 0x688(0x4)(None)
	float                                        JumpOfWaterKeyHoldTime;                            // 0x68C(0x4)(None)
	float                                        JumpForceTimeRemaining;                            // 0x690(0x4)(None)
	float                                        ProxyJumpForceStartedTime;                         // 0x694(0x4)(None)
	float                                        JumpMaxHoldTime;                                   // 0x698(0x4)(None)
	int32                                        JumpMaxCount;                                      // 0x69C(0x4)(None)
	int32                                        JumpCurrentCount;                                  // 0x6A0(0x4)(None)
	int32                                        JumpCurrentCountPreJump;                           // 0x6A4(0x4)(None)
	uint8                                        Pad_F52[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnReachedJumpApex;                                 // 0x6B0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            LandedDelegate;                                    // 0x6C0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            MovementModeChangedDelegate;                       // 0x6D0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnCharacterMovementUpdated;                        // 0x6E0(0x10)(ZeroConstructor)
	struct FRootMotionSourceGroup                SavedRootMotion;                                   // 0x6F0(0x48)(ZeroConstructor)
	uint8                                        Pad_F53[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionMovementParams             ClientRootMotionParams;                            // 0x740(0x70)(None)
	TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;                                // 0x7B0(0x10)(ZeroConstructor)
	struct FRepRootMotionMontage                 RepRootMotion;                                     // 0x7C0(0xD8)(ZeroConstructor)
	uint8                                        Pad_F54[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACharacter* GetDefaultObj();

	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, uint8 OldMoveFlags);
	void ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void RootMotionDebugClientPrintOnScreen(const class FString& InString);
	void PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, class FName StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float BlendInTime, float BlendOutTime, float ReturnValue);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	void IsPlayingRootMotion(bool ReturnValue);
	void IsPlayingNetworkedRootMotionMontage(bool ReturnValue);
	void IsJumpProvidingForce(bool ReturnValue);
	void HasAnyRootMotion(bool ReturnValue);
	void GetCurrentMontage(class UAnimMontage* ReturnValue);
	void GetBaseTranslationOffset(const struct FVector& ReturnValue);
	void GetBaseRotationOffsetRotator(const struct FRotator& ReturnValue);
	void GetAnimRootMotionTranslationScale(float ReturnValue);
	void Crouch(bool bClientSimulation);
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits);
	void ClientForceUpdateMovement(const struct FVector& NewLocation, const struct FVector& NewVelocity);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAckGoodMove(float Timestamp);
	void CanJumpInternal(bool ReturnValue);
	void CanJump(bool ReturnValue);
	void CanCrouch(bool ReturnValue);
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
};

// 0x58 (0x510 - 0x4B8)
// Class Engine.Emitter
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*              ParticleSystemComponent;                           // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bDestroyOnSystemFinish : 1;                        // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bPostUpdateTickGroup : 1;                          // Mask: 0x2, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bCurrentlyActive : 1;                              // Mask: 0x4, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        BitPad_C1 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F58[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnParticleSpawn;                                   // 0x4C8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleBurst;                                   // 0x4D8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleDeath;                                   // 0x4E8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleCollide;                                 // 0x4F8(0x10)(ZeroConstructor)
	uint8                                        bForceOnDediServer : 1;                            // Mask: 0x1, PropSize: 0x10x508(0x1)(None)
	uint8                                        BitPad_C2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F59[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         OmitHaptics;                                       // 0x50C(0x1)(None)
	uint8                                        Pad_F5A[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEmitter* GetDefaultObj();

	void ToggleActive();
	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void IsActive(bool ReturnValue);
	void Deactivate();
	void Activate();
};

// 0x7A8 (0xC60 - 0x4B8)
// Class Engine.CameraActor
class ACameraActor : public AActor
{
public:
	enum class EAutoReceiveInput                 AutoActivateForPlayer;                             // 0x4B8(0x1)(None)
	uint8                                        Pad_F5B[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UCameraComponent*                      CameraComponent;                                   // 0x4C0(0x8)(ZeroConstructor)
	class USceneComponent*                       SceneComponent;                                    // 0x4C8(0x8)(ZeroConstructor)
	uint8                                        Pad_F5C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        BitPad_C3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F5D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AspectRatio;                                       // 0x4DC(0x4)(None)
	float                                        FOVAngle;                                          // 0x4E0(0x4)(None)
	float                                        PostProcessBlendWeight;                            // 0x4E4(0x4)(None)
	uint8                                        Pad_F5E[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x4F0(0x770)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ACameraActor* GetDefaultObj();

	void GetAutoActivatePlayerIndex(int32 ReturnValue);
};

// 0xE08 (0xF78 - 0x170)
// Class Engine.CharacterMovementComponent
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                        Pad_F85[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            CharacterOwner;                                    // 0x180(0x8)(ZeroConstructor)
	float                                        GravityScale;                                      // 0x188(0x4)(None)
	float                                        MaxStepHeight;                                     // 0x18C(0x4)(None)
	float                                        JumpZVelocity;                                     // 0x190(0x4)(None)
	float                                        JumpOffJumpZFactor;                                // 0x194(0x4)(None)
	uint8                                        Pad_F86[0x1C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WalkableFloorAngle;                                // 0x1B4(0x4)(None)
	float                                        WalkableFloorZ;                                    // 0x1B8(0x4)(None)
	enum class EMovementMode                     MovementMode;                                      // 0x1BC(0x1)(None)
	uint8                                        CustomMovementMode;                                // 0x1BD(0x1)(None)
	enum class ENetworkSmoothingMode             NetworkSmoothingMode;                              // 0x1BE(0x1)(None)
	uint8                                        Pad_F89[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GroundFriction;                                    // 0x1C0(0x4)(None)
	uint8                                        Pad_F8A[0x44];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxWalkSpeed;                                      // 0x208(0x4)(None)
	float                                        MaxWalkSpeedCrouched;                              // 0x20C(0x4)(None)
	float                                        MaxSwimSpeed;                                      // 0x210(0x4)(None)
	float                                        MaxFlySpeed;                                       // 0x214(0x4)(None)
	float                                        MaxCustomMovementSpeed;                            // 0x218(0x4)(None)
	float                                        MaxAcceleration;                                   // 0x21C(0x4)(None)
	float                                        MinAnalogWalkSpeed;                                // 0x220(0x4)(None)
	float                                        BrakingFrictionFactor;                             // 0x224(0x4)(None)
	float                                        BrakingFriction;                                   // 0x228(0x4)(None)
	float                                        BrakingSubStepTime;                                // 0x22C(0x4)(None)
	float                                        BrakingDecelerationWalking;                        // 0x230(0x4)(None)
	float                                        BrakingDecelerationFalling;                        // 0x234(0x4)(None)
	float                                        BrakingDecelerationSwimming;                       // 0x238(0x4)(None)
	float                                        BrakingDecelerationFlying;                         // 0x23C(0x4)(None)
	float                                        AirControl;                                        // 0x240(0x4)(None)
	float                                        AirControlBoostMultiplier;                         // 0x244(0x4)(None)
	float                                        AirControlBoostVelocityThreshold;                  // 0x248(0x4)(None)
	float                                        FallingLateralFriction;                            // 0x24C(0x4)(None)
	float                                        CrouchedHalfHeight;                                // 0x250(0x4)(None)
	float                                        Buoyancy;                                          // 0x254(0x4)(None)
	float                                        PerchRadiusThreshold;                              // 0x258(0x4)(None)
	float                                        PerchAdditionalHeight;                             // 0x25C(0x4)(None)
	struct FRotator                              RotationRate;                                      // 0x260(0x18)(None)
	uint8                                        bUseSeparateBrakingFriction : 1;                   // Mask: 0x1, PropSize: 0x10x278(0x1)(None)
	uint8                                        bApplyGravityWhileJumping : 1;                     // Mask: 0x2, PropSize: 0x10x278(0x1)(None)
	uint8                                        bUseControllerDesiredRotation : 1;                 // Mask: 0x4, PropSize: 0x10x278(0x1)(None)
	uint8                                        bOrientRotationToMovement : 1;                     // Mask: 0x8, PropSize: 0x10x278(0x1)(None)
	uint8                                        bSweepWhileNavWalking : 1;                         // Mask: 0x10, PropSize: 0x10x278(0x1)(None)
	uint8                                        BitPad_C4 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bMovementInProgress : 1;                           // Mask: 0x40, PropSize: 0x10x278(0x1)(None)
	uint8                                        bEnableScopedMovementUpdates : 1;                  // Mask: 0x80, PropSize: 0x10x278(0x1)(None)
	uint8                                        bEnableServerDualMoveScopedMovementUpdates : 1;    // Mask: 0x1, PropSize: 0x10x279(0x1)(None)
	uint8                                        bForceMaxAccel : 1;                                // Mask: 0x2, PropSize: 0x10x279(0x1)(None)
	uint8                                        bRunPhysicsWithNoController : 1;                   // Mask: 0x4, PropSize: 0x10x279(0x1)(None)
	uint8                                        bForceNextFloorCheck : 1;                          // Mask: 0x8, PropSize: 0x10x279(0x1)(None)
	uint8                                        bShrinkProxyCapsule : 1;                           // Mask: 0x10, PropSize: 0x10x279(0x1)(None)
	uint8                                        bCanWalkOffLedges : 1;                             // Mask: 0x20, PropSize: 0x10x279(0x1)(None)
	uint8                                        bCanWalkOffLedgesWhenCrouching : 1;                // Mask: 0x40, PropSize: 0x10x279(0x1)(None)
	uint8                                        BitPad_C5 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_C6 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetworkSkipProxyPredictionOnNetUpdate : 1;        // Mask: 0x2, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // Mask: 0x4, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bDeferUpdateMoveComponent : 1;                     // Mask: 0x8, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bEnablePhysicsInteraction : 1;                     // Mask: 0x10, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bTouchForceScaledToMass : 1;                       // Mask: 0x20, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bPushForceScaledToMass : 1;                        // Mask: 0x40, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bPushForceUsingZOffset : 1;                        // Mask: 0x80, PropSize: 0x10x27A(0x1)(None)
	uint8                                        bScalePushForceToVelocity : 1;                     // Mask: 0x1, PropSize: 0x10x27B(0x1)(None)
	uint8                                        BitPad_C7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F8F[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       DeferredUpdatedMoveComponent;                      // 0x280(0x8)(ZeroConstructor)
	float                                        MaxOutOfWaterStepHeight;                           // 0x288(0x4)(None)
	float                                        OutOfWaterZ;                                       // 0x28C(0x4)(None)
	float                                        Mass;                                              // 0x290(0x4)(None)
	float                                        StandingDownwardForceScale;                        // 0x294(0x4)(None)
	float                                        InitialPushForceFactor;                            // 0x298(0x4)(None)
	float                                        PushForceFactor;                                   // 0x29C(0x4)(None)
	float                                        PushForcePointZOffsetFactor;                       // 0x2A0(0x4)(None)
	float                                        TouchForceFactor;                                  // 0x2A4(0x4)(None)
	float                                        MinTouchForce;                                     // 0x2A8(0x4)(None)
	float                                        MaxTouchForce;                                     // 0x2AC(0x4)(None)
	float                                        RepulsionForce;                                    // 0x2B0(0x4)(None)
	uint8                                        Pad_F90[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Acceleration;                                      // 0x2B8(0x18)(None)
	struct FQuat                                 LastUpdateRotation;                                // 0x2D0(0x20)(None)
	struct FVector                               LastUpdateLocation;                                // 0x2F0(0x18)(None)
	struct FVector                               LastUpdateVelocity;                                // 0x308(0x18)(None)
	double                                       ServerLastTransformUpdateTimeStamp;                // 0x320(0x8)(None)
	double                                       ServerLastClientGoodMoveAckTime;                   // 0x328(0x8)(None)
	double                                       ServerLastClientAdjustmentTime;                    // 0x330(0x8)(None)
	struct FVector                               PendingImpulseToApply;                             // 0x338(0x18)(None)
	struct FVector                               PendingForceToApply;                               // 0x350(0x18)(None)
	float                                        AnalogInputModifier;                               // 0x368(0x4)(None)
	uint8                                        Pad_F91[0x14];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxSimulationTimeStep;                             // 0x380(0x4)(None)
	int32                                        MaxSimulationIterations;                           // 0x384(0x4)(None)
	int32                                        MaxJumpApexAttemptsPerSimulation;                  // 0x388(0x4)(None)
	float                                        MaxDepenetrationWithGeometry;                      // 0x38C(0x4)(None)
	float                                        MaxDepenetrationWithGeometryAsProxy;               // 0x390(0x4)(None)
	float                                        MaxDepenetrationWithPawn;                          // 0x394(0x4)(None)
	float                                        MaxDepenetrationWithPawnAsProxy;                   // 0x398(0x4)(None)
	float                                        NetworkSimulatedSmoothLocationTime;                // 0x39C(0x4)(None)
	float                                        NetworkSimulatedSmoothRotationTime;                // 0x3A0(0x4)(None)
	float                                        ListenServerNetworkSimulatedSmoothLocationTime;    // 0x3A4(0x4)(None)
	float                                        ListenServerNetworkSimulatedSmoothRotationTime;    // 0x3A8(0x4)(None)
	float                                        NetProxyShrinkRadius;                              // 0x3AC(0x4)(None)
	float                                        NetProxyShrinkHalfHeight;                          // 0x3B0(0x4)(None)
	float                                        NetworkMaxSmoothUpdateDistance;                    // 0x3B4(0x4)(None)
	float                                        NetworkNoSmoothUpdateDistance;                     // 0x3B8(0x4)(None)
	float                                        NetworkMinTimeBetweenClientAckGoodMoves;           // 0x3BC(0x4)(None)
	float                                        NetworkMinTimeBetweenClientAdjustments;            // 0x3C0(0x4)(None)
	float                                        NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x3C4(0x4)(None)
	float                                        NetworkLargeClientCorrectionDistance;              // 0x3C8(0x4)(None)
	float                                        LedgeCheckThreshold;                               // 0x3CC(0x4)(None)
	float                                        JumpOutOfWaterPitch;                               // 0x3D0(0x4)(None)
	uint8                                        Pad_F92[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFindFloorResult                      CurrentFloor;                                      // 0x3D8(0x100)(ZeroConstructor)
	enum class EMovementMode                     DefaultLandMovementMode;                           // 0x4D8(0x1)(None)
	enum class EMovementMode                     DefaultWaterMovementMode;                          // 0x4D9(0x1)(None)
	enum class EMovementMode                     GroundMovementMode;                                // 0x4DA(0x1)(None)
	uint8                                        Pad_F93[0x9];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMaintainHorizontalGroundVelocity : 1;             // Mask: 0x1, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bImpartBaseVelocityX : 1;                          // Mask: 0x2, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bImpartBaseVelocityY : 1;                          // Mask: 0x4, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bImpartBaseVelocityZ : 1;                          // Mask: 0x8, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bImpartBaseAngularVelocity : 1;                    // Mask: 0x10, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bJustTeleported : 1;                               // Mask: 0x20, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bNetworkUpdateReceived : 1;                        // Mask: 0x40, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bNetworkMovementModeChanged : 1;                   // Mask: 0x80, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bIgnoreClientMovementErrorChecksAndCorrection : 1; // Mask: 0x1, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bServerAcceptClientAuthoritativePosition : 1;      // Mask: 0x2, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bNotifyApex : 1;                                   // Mask: 0x4, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bCheatFlying : 1;                                  // Mask: 0x8, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bWantsToCrouch : 1;                                // Mask: 0x10, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bCrouchMaintainsBaseLocation : 1;                  // Mask: 0x20, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bIgnoreBaseRotation : 1;                           // Mask: 0x40, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bFastAttachedMove : 1;                             // Mask: 0x80, PropSize: 0x10x4E5(0x1)(None)
	uint8                                        bAlwaysCheckFloor : 1;                             // Mask: 0x1, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bUseFlatBaseForFloorChecks : 1;                    // Mask: 0x2, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bPerformingJumpOff : 1;                            // Mask: 0x4, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bWantsToLeaveNavWalking : 1;                       // Mask: 0x8, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bUseRVOAvoidance : 1;                              // Mask: 0x10, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bRequestedMoveUseAcceleration : 1;                 // Mask: 0x20, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        BitPad_C8 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWasSimulatingRootMotion : 1;                      // Mask: 0x80, PropSize: 0x10x4E6(0x1)(None)
	uint8                                        bAllowPhysicsRotationDuringAnimRootMotion : 1;     // Mask: 0x1, PropSize: 0x10x4E7(0x1)(None)
	uint8                                        BitPad_C9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        FormerBaseVelocityDecayHalfLife;                   // 0x4E8(0x4)(None)
	uint8                                        bHasRequestedVelocity : 1;                         // Mask: 0x1, PropSize: 0x10x4EC(0x1)(None)
	uint8                                        bRequestedMoveWithMaxSpeed : 1;                    // Mask: 0x2, PropSize: 0x10x4EC(0x1)(None)
	uint8                                        BitPad_CA : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F95[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceModifyDesiredRotation : 1;                   // Mask: 0x1, PropSize: 0x10x4F0(0x1)(None)
	uint8                                        BitPad_CB : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F96[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bWasAvoidanceUpdated : 1;                          // Mask: 0x1, PropSize: 0x10x4F4(0x1)(None)
	uint8                                        BitPad_CC : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bProjectNavMeshWalking : 1;                        // Mask: 0x8, PropSize: 0x10x4F4(0x1)(None)
	uint8                                        bProjectNavMeshOnBothWorldChannels : 1;            // Mask: 0x10, PropSize: 0x10x4F4(0x1)(None)
	uint8                                        BitPad_CD : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F97[0x1F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AvoidanceConsiderationRadius;                      // 0x514(0x4)(None)
	struct FVector                               RequestedVelocity;                                 // 0x518(0x18)(None)
	struct FVector                               LastUpdateRequestedVelocity;                       // 0x530(0x18)(None)
	int32                                        AvoidanceUID;                                      // 0x548(0x4)(None)
	struct FNavAvoidanceMask                     AvoidanceGroup;                                    // 0x54C(0x4)(None)
	struct FNavAvoidanceMask                     GroupsToAvoid;                                     // 0x550(0x4)(None)
	struct FNavAvoidanceMask                     GroupsToIgnore;                                    // 0x554(0x4)(None)
	float                                        AvoidanceWeight;                                   // 0x558(0x4)(None)
	uint8                                        Pad_F98[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PendingLaunchVelocity;                             // 0x560(0x18)(None)
	uint8                                        Pad_F99[0x140];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NavMeshProjectionInterval;                         // 0x6B8(0x4)(None)
	float                                        NavMeshProjectionTimer;                            // 0x6BC(0x4)(None)
	float                                        NavMeshProjectionInterpSpeed;                      // 0x6C0(0x4)(None)
	float                                        NavMeshProjectionHeightScaleUp;                    // 0x6C4(0x4)(None)
	float                                        NavMeshProjectionHeightScaleDown;                  // 0x6C8(0x4)(None)
	float                                        NavWalkingFloorDistTolerance;                      // 0x6CC(0x4)(None)
	uint8                                        Pad_F9A[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x700(0x30)(None)
	uint8                                        Pad_F9B[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinTimeBetweenTimeStampResets;                     // 0x748(0x4)(None)
	uint8                                        Pad_F9C[0x55C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionSourceGroup                CurrentRootMotion;                                 // 0xCA8(0x48)(ZeroConstructor)
	struct FRootMotionSourceGroup                ServerCorrectionRootMotion;                        // 0xCF0(0x48)(ZeroConstructor)
	uint8                                        Pad_F9D[0x168];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionMovementParams             RootMotionParams;                                  // 0xEA0(0x70)(None)
	struct FVector                               AnimRootMotionVelocity;                            // 0xF10(0x18)(None)
	uint8                                        Pad_F9E[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumImpulseToApply;                             // 0xF48(0x4)(None)
	float                                        MaxImpulseVelocityMagnitude;                       // 0xF4C(0x4)(None)
	float                                        MaxImpulseVelocityZ;                               // 0xF50(0x4)(None)
	uint8                                        bUseBPAcknowledgeServerCorrection : 1;             // Mask: 0x1, PropSize: 0x10xF54(0x1)(None)
	uint8                                        bEnableSwimmingOutsideOfWater : 1;                 // Mask: 0x2, PropSize: 0x10xF54(0x1)(None)
	uint8                                        bAlwaysCheckForInvallidFloor : 1;                  // Mask: 0x4, PropSize: 0x10xF54(0x1)(None)
	uint8                                        Pad_F9F[0x23];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCharacterMovementComponent* GetDefaultObj();

	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(enum class EMovementMode NewMovementMode, uint8 NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int32 GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int32 GroupFlags);
	void SetCrouchedHalfHeight(float NewValue);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int32 GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void NewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime, const struct FVector& ReturnValue);
	void K2_GetWalkableFloorZ(float ReturnValue);
	void K2_GetWalkableFloorAngle(float ReturnValue);
	void K2_FindFloor(const struct FVector& CapsuleLocation, const struct FFindFloorResult& FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, const struct FFindFloorResult& FloorResult);
	void IsWalking(bool ReturnValue);
	void IsWalkable(const struct FHitResult& Hit, bool bIsSteppingUp, bool ReturnValue);
	void GetValidPerchRadius(float ReturnValue);
	void GetPerchRadiusThreshold(float ReturnValue);
	void GetMovementBase(class UPrimitiveComponent* ReturnValue);
	void GetMinAnalogSpeed(float ReturnValue);
	void GetMaxJumpHeightWithJumpTime(float ReturnValue);
	void GetMaxJumpHeight(float ReturnValue);
	void GetMaxBrakingDeceleration(float ReturnValue);
	void GetMaxAcceleration(float ReturnValue);
	void GetLastUpdateVelocity(const struct FVector& ReturnValue);
	void GetLastUpdateRotation(const struct FRotator& ReturnValue);
	void GetLastUpdateRequestedVelocity(const struct FVector& ReturnValue);
	void GetLastUpdateLocation(const struct FVector& ReturnValue);
	void GetImpartedMovementBaseVelocity(const struct FVector& ReturnValue);
	void GetCurrentAcceleration(const struct FVector& ReturnValue);
	void GetCrouchedHalfHeight(float ReturnValue);
	void GetCharacterOwner(class ACharacter* ReturnValue);
	void GetAnalogInputModifier(float ReturnValue);
	void DisableMovement();
	void ClearAccumulatedForces();
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
	void AddForce(const struct FVector& Force);
};

// 0x1718 (0x1C20 - 0x508)
// Class Engine.PostProcessVolume
class APostProcessVolume : public AVolume
{
public:
	uint8                                        Pad_FAC[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x510(0x770)(ZeroConstructor)
	struct FPostProcessSettings                  HDR_Override_Settings;                             // 0xC80(0x770)(ZeroConstructor)
	float                                        Priority;                                          // 0x13F0(0x4)(None)
	float                                        BlendRadius;                                       // 0x13F4(0x4)(None)
	float                                        BlendWeight;                                       // 0x13F8(0x4)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x13FC(0x1)(None)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10x13FC(0x1)(None)
	uint8                                        BitPad_CE : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FAD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPostProcessVolumeEntered;                        // 0x1400(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPostProcessVolumeLeft;                           // 0x1410(0x10)(ZeroConstructor)
	TMap<class UCurveFloat*, class UCurveFloat*> PostProcessFloatCurveOverrides;                    // 0x1420(0x50)(ZeroConstructor)
	float                                        GlobalExposureCompensationOffset;                  // 0x1470(0x4)(None)
	uint8                                        Pad_FAE[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AExponentialHeightFog*>         DisabledHeightFogs;                                // 0x1478(0x10)(ZeroConstructor)
	TArray<class AExponentialHeightFog*>         PrimaryLerpingHeightFogs;                          // 0x1488(0x10)(ZeroConstructor)
	uint8                                        bAbsolutePriority : 1;                             // Mask: 0x1, PropSize: 0x10x1498(0x1)(None)
	uint8                                        bWaterPP : 1;                                      // Mask: 0x2, PropSize: 0x10x1498(0x1)(None)
	uint8                                        bReallyWantToOverrideLumenSettingsOnlyJesseGetsToMakeThisCall : 1; // Mask: 0x4, PropSize: 0x10x1498(0x1)(None)
	uint8                                        BitPad_CF : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FAF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        WhatIsSquareRootOfFourtyNineCheckingYouReallyWantOverrideLumen; // 0x149C(0x4)(None)
	float                                        ViewDistanceMultiplier;                            // 0x14A0(0x4)(None)
	enum class EPostProcessVolumeType            VolumeType;                                        // 0x14A4(0x1)(None)
	uint8                                        Pad_FB0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaterialWaterLineParameterValue;                   // 0x14A8(0x4)(None)
	uint8                                        Pad_FB1[0x774];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APostProcessVolume* GetDefaultObj();

	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
};

// 0x90 (0x750 - 0x6C0)
// Class Engine.StaticMeshComponent
class UStaticMeshComponent : public UMeshComponent
{
public:
	int32                                        ForcedLodModel;                                    // 0x6C0(0x4)(None)
	int32                                        PreviousLODLevel;                                  // 0x6C4(0x4)(None)
	int32                                        MinLOD;                                            // 0x6C8(0x4)(None)
	int32                                        SubDivisionStepSize;                               // 0x6CC(0x4)(None)
	class UStaticMesh*                           StaticMesh;                                        // 0x6D0(0x8)(ZeroConstructor)
	struct FColor                                WireframeColorOverride;                            // 0x6D8(0x4)(None)
	uint8                                        bDisallowNanite : 1;                               // Mask: 0x1, PropSize: 0x10x6DC(0x1)(None)
	uint8                                        bForceDisableNanite : 1;                           // Mask: 0x2, PropSize: 0x10x6DC(0x1)(None)
	uint8                                        bEvaluateWorldPositionOffset : 1;                  // Mask: 0x4, PropSize: 0x10x6DC(0x1)(None)
	uint8                                        bEvaluateWorldPositionOffsetInRayTracing : 1;      // Mask: 0x8, PropSize: 0x10x6DC(0x1)(None)
	uint8                                        BitPad_D0 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FD4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        WorldPositionOffsetDisableDistance;                // 0x6E0(0x4)(None)
	int32                                        CustomDataOutDisableDistance;                      // 0x6E4(0x4)(None)
	uint8                                        BitPad_D1 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideWireframeColor : 1;                       // Mask: 0x2, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bOverrideMinLod : 1;                               // Mask: 0x4, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bOverrideNavigationExport : 1;                     // Mask: 0x8, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bForceNavigationObstacle : 1;                      // Mask: 0x10, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bDisallowMeshPaintPerInstance : 1;                 // Mask: 0x20, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bIgnoreInstanceForTextureStreaming : 1;            // Mask: 0x40, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bOverrideLightMapRes : 1;                          // Mask: 0x80, PropSize: 0x10x6E8(0x1)(None)
	uint8                                        bCastDistanceFieldIndirectShadow : 1;              // Mask: 0x1, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        bOverrideDistanceFieldSelfShadowBias : 1;          // Mask: 0x2, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        bUseSubDivisions : 1;                              // Mask: 0x4, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        bUseDefaultCollision : 1;                          // Mask: 0x8, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        bSortTriangles : 1;                                // Mask: 0x10, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        bReverseCulling : 1;                               // Mask: 0x20, PropSize: 0x10x6E9(0x1)(None)
	uint8                                        BitPad_D2 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FD6[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverriddenLightMapRes;                             // 0x6EC(0x4)(None)
	float                                        DistanceFieldIndirectShadowMinVisibility;          // 0x6F0(0x4)(None)
	float                                        DistanceFieldSelfShadowBias;                       // 0x6F4(0x4)(None)
	float                                        StreamingDistanceMultiplier;                       // 0x6F8(0x4)(None)
	uint8                                        Pad_FD7[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStaticMeshComponentLODInfo>   LODData;                                           // 0x700(0x10)(None)
	TArray<struct FStreamingTextureBuildInfo>    StreamingTextureData;                              // 0x710(0x10)(None)
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x720(0x18)(None)
	uint8                                        Pad_FD8[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseDirectionalShadowDistanceLimit : 1;            // Mask: 0x1, PropSize: 0x10x748(0x1)(None)
	uint8                                        BitPad_D3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FD9[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DirectionalShadowDistanceLimit;                    // 0x74C(0x4)(None)

	static class UClass* StaticClass();
	static class UStaticMeshComponent* GetDefaultObj();

	void SetWorldPositionOffsetDisableDistance(float NewValue);
	void SetStaticMesh(class UStaticMesh* NewMesh, bool ReturnValue);
	void SetReverseCulling(bool ReverseCulling);
	void SetForcedLodModel(int32 NewForcedLodModel);
	void SetForceDisableNanite(bool bInForceDisableNanite);
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);
	void SetEvaluateWorldPositionOffset(bool NewValue);
	void SetDistanceFieldSelfShadowBias(float NewValue);
	void SetCustomDataOutDisableDistance(float NewValue);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetWorldPositionOffsetDisableDistance(float ReturnValue);
	void GetLocalBounds(const struct FVector& Min, const struct FVector& Max);
	void GetInitialEvaluateWorldPositionOffset(bool ReturnValue);
	void GetCustomDataOutDisableDistance(float ReturnValue);
	void CopyPerInstanceDynamicCustomData(class UStaticMeshComponent* SrcComponent, int32 SrcInstanceIndex, int32 DstInstanceIndex, int32 NumInstances, bool ReturnValue);
};

// 0x348 (0x9C8 - 0x680)
// Class Engine.ParticleSystemComponent
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UParticleSystem*                       Template;                                          // 0x680(0x8)(ZeroConstructor)
	TArray<class UMaterialInterface*>            EmitterMaterials;                                  // 0x688(0x10)(ZeroConstructor)
	TArray<class USkeletalMeshComponent*>        SkelMeshComponents;                                // 0x698(0x10)(ZeroConstructor)
	uint8                                        BitPad_D4 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWasDeactivated : 1;                               // Mask: 0x10, PropSize: 0x10x6A8(0x1)(None)
	uint8                                        BitPad_D5 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bResetOnDetach : 1;                                // Mask: 0x1, PropSize: 0x10x6A9(0x1)(None)
	uint8                                        bUpdateOnDedicatedServer : 1;                      // Mask: 0x2, PropSize: 0x10x6A9(0x1)(None)
	uint8                                        BitPad_D6 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowRecycling : 1;                               // Mask: 0x10, PropSize: 0x10x6A9(0x1)(None)
	uint8                                        bAutoManageAttachment : 1;                         // Mask: 0x20, PropSize: 0x10x6A9(0x1)(None)
	uint8                                        bAutoAttachWeldSimulatedBodies : 1;                // Mask: 0x40, PropSize: 0x10x6A9(0x1)(None)
	uint8                                        BitPad_D7 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_D8 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWarmingUp : 1;                                    // Mask: 0x4, PropSize: 0x10x6AA(0x1)(None)
	uint8                                        bOverrideLODMethod : 1;                            // Mask: 0x8, PropSize: 0x10x6AA(0x1)(None)
	uint8                                        bSkipUpdateDynamicDataDuringTick : 1;              // Mask: 0x10, PropSize: 0x10x6AA(0x1)(None)
	uint8                                        BitPad_D9 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1047[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0x6B5(0x1)(None)
	enum class EParticleSignificanceLevel        RequiredSignificance;                              // 0x6B6(0x1)(None)
	uint8                                        Pad_1048[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleSysParam>             InstanceParameters;                                // 0x6B8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleSpawn;                                   // 0x6C8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleBurst;                                   // 0x6D8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleDeath;                                   // 0x6E8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnParticleCollide;                                 // 0x6F8(0x10)(ZeroConstructor)
	bool                                         bOldPositionValid;                                 // 0x708(0x1)(None)
	uint8                                        Pad_1049[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               OldPosition;                                       // 0x710(0x18)(None)
	struct FVector                               PartSysVelocity;                                   // 0x728(0x18)(None)
	float                                        WarmupTime;                                        // 0x740(0x4)(None)
	float                                        WarmupTickRate;                                    // 0x744(0x4)(None)
	uint8                                        Pad_104A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SecondsBeforeInactive;                             // 0x74C(0x4)(None)
	uint8                                        Pad_104B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxTimeBeforeForceUpdateTransform;                 // 0x754(0x4)(None)
	uint8                                        Pad_104C[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystemReplay*>         ReplayClips;                                       // 0x778(0x10)(ZeroConstructor)
	uint8                                        Pad_104D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomTimeDilation;                                // 0x790(0x4)(None)
	uint8                                        Pad_104E[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class USceneComponent>        AutoAttachParent;                                  // 0x7E8(0x8)(ZeroConstructor)
	class FName                                  AutoAttachSocketName;                              // 0x7F0(0x8)(None)
	enum class EAttachmentRule                   AutoAttachLocationRule;                            // 0x7F8(0x1)(None)
	enum class EAttachmentRule                   AutoAttachRotationRule;                            // 0x7F9(0x1)(None)
	enum class EAttachmentRule                   AutoAttachScaleRule;                               // 0x7FA(0x1)(None)
	uint8                                        Pad_104F[0x55];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSystemFinished;                                  // 0x850(0x10)(ZeroConstructor)
	uint8                                        Pad_1050[0x128];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceDisableParticleOcclusion : 1;                // Mask: 0x1, PropSize: 0x10x988(0x1)(None)
	uint8                                        bForceAllowParticleCollisions : 1;                 // Mask: 0x2, PropSize: 0x10x988(0x1)(None)
	uint8                                        bPreserveOnDedicatedServer : 1;                    // Mask: 0x4, PropSize: 0x10x988(0x1)(None)
	uint8                                        Pad_1051[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleSystemComponent* GetDefaultObj();

	void SetTrailSourceData(class FName InFirstSocketName, class FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetBeamTargetTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 TargetIndex);
	void SetBeamTargetStrength(int32 EmitterIndex, float NewTargetStrength, int32 TargetIndex);
	void SetBeamTargetPoint(int32 EmitterIndex, const struct FVector& NewTargetPoint, int32 TargetIndex);
	void SetBeamSourceTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 SourceIndex);
	void SetBeamSourceStrength(int32 EmitterIndex, float NewSourceStrength, int32 SourceIndex);
	void SetBeamSourcePoint(int32 EmitterIndex, const struct FVector& NewSourcePoint, int32 SourceIndex);
	void SetBeamEndPoint(int32 EmitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, class FName SocketName, enum class EAttachLocation LocationType);
	void GetVectorParameter(class FName InName, const struct FVector& OutVector, bool ReturnValue);
	void GetNumActiveParticles(int32 ReturnValue);
	void GetNamedMaterial(class FName InName, class UMaterialInterface* ReturnValue);
	void GetMaterialParameter(class FName InName, class UMaterialInterface* OutMaterial, bool ReturnValue);
	void GetFloatParameter(class FName InName, float OutFloat, bool ReturnValue);
	void GetColorParameter(class FName InName, const struct FLinearColor& OutColor, bool ReturnValue);
	void GetBeamTargetTangent(int32 EmitterIndex, int32 TargetIndex, const struct FVector& OutTangentPoint, bool ReturnValue);
	void GetBeamTargetStrength(int32 EmitterIndex, int32 TargetIndex, float OutTargetStrength, bool ReturnValue);
	void GetBeamTargetPoint(int32 EmitterIndex, int32 TargetIndex, const struct FVector& OutTargetPoint, bool ReturnValue);
	void GetBeamSourceTangent(int32 EmitterIndex, int32 SourceIndex, const struct FVector& OutTangentPoint, bool ReturnValue);
	void GetBeamSourceStrength(int32 EmitterIndex, int32 SourceIndex, float OutSourceStrength, bool ReturnValue);
	void GetBeamSourcePoint(int32 EmitterIndex, int32 SourceIndex, const struct FVector& OutSourcePoint, bool ReturnValue);
	void GetBeamEndPoint(int32 EmitterIndex, const struct FVector& OutEndPoint, bool ReturnValue);
	void GetActorParameter(class FName InName, class AActor* OutActor, bool ReturnValue);
	void GenerateParticleEvent(class FName InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	void CreateNamedDynamicMaterialInstance(class FName InName, class UMaterialInterface* SourceMaterial, class UMaterialInstanceDynamic* ReturnValue);
	void BeginTrails(class FName InFirstSocketName, class FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth);
};

// 0x1A0 (0x1C8 - 0x28)
// Class Engine.PrimalWorld
class UPrimalWorld : public UObject
{
public:
	int32                                        FrameCounter;                                      // 0x28(0x4)(None)
	uint8                                        Pad_1052[0x124];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_DA : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWorldWasPlayerView : 1;                           // Mask: 0x2, PropSize: 0x10x150(0x1)(None)
	uint8                                        bUseSimpleWorld : 1;                               // Mask: 0x4, PropSize: 0x10x150(0x1)(None)
	uint8                                        Pad_1053[0x77];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalWorld* GetDefaultObj();

};

// 0x8C8 (0xA90 - 0x1C8)
// Class Engine.World
class UWorld : public UPrimalWorld
{
public:
	uint8                                        Pad_1058[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                PersistentLevel;                                   // 0x1D0(0x8)(ZeroConstructor)
	class UNetDriver*                            NetDriver;                                         // 0x1D8(0x8)(ZeroConstructor)
	class ULineBatchComponent*                   LineBatcher;                                       // 0x1E0(0x8)(ZeroConstructor)
	class ULineBatchComponent*                   PersistentLineBatcher;                             // 0x1E8(0x8)(ZeroConstructor)
	class ULineBatchComponent*                   ForegroundLineBatcher;                             // 0x1F0(0x8)(ZeroConstructor)
	class AGameNetworkManager*                   NetworkManager;                                    // 0x1F8(0x8)(ZeroConstructor)
	class UPhysicsCollisionHandler*              PhysicsCollisionHandler;                           // 0x200(0x8)(ZeroConstructor)
	TArray<class UObject*>                       ExtraReferencedObjects;                            // 0x208(0x10)(ZeroConstructor)
	TArray<class UObject*>                       PerModuleDataObjects;                              // 0x218(0x10)(ZeroConstructor)
	TArray<class ULevelStreaming*>               StreamingLevels;                                   // 0x228(0x10)(ZeroConstructor)
	struct FStreamingLevelsToConsider            StreamingLevelsToConsider;                         // 0x238(0x28)(ZeroConstructor)
	class AServerStreamingLevelsVisibility*      ServerStreamingLevelsVisibility;                   // 0x260(0x8)(ZeroConstructor)
	class FString                                StreamingLevelsPrefix;                             // 0x268(0x10)(None)
	uint8                                        Pad_1059[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                CurrentLevelPendingVisibility;                     // 0x280(0x8)(ZeroConstructor)
	class ULevel*                                CurrentLevelPendingInvisibility;                   // 0x288(0x8)(ZeroConstructor)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0x290(0x8)(ZeroConstructor)
	class AParticleEventManager*                 MyParticleEventManager;                            // 0x298(0x8)(ZeroConstructor)
	class APhysicsVolume*                        DefaultPhysicsVolume;                              // 0x2A0(0x8)(ZeroConstructor)
	uint8                                        Pad_105A[0x36];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_DB : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAreConstraintsDirty : 1;                          // Mask: 0x4, PropSize: 0x10x2DE(0x1)(None)
	uint8                                        BitPad_DC : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_105B[0x9];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNavigationSystemBase*                 NavigationSystem;                                  // 0x2E8(0x8)(ZeroConstructor)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0x2F0(0x8)(ZeroConstructor)
	class AGameStateBase*                        GameState;                                         // 0x2F8(0x8)(ZeroConstructor)
	class UAISystemBase*                         AISystem;                                          // 0x300(0x8)(ZeroConstructor)
	class UAvoidanceManager*                     AvoidanceManager;                                  // 0x308(0x8)(ZeroConstructor)
	TArray<class ULevel*>                        Levels;                                            // 0x310(0x10)(ZeroConstructor)
	TArray<struct FLevelCollection>              LevelCollections;                                  // 0x320(0x10)(ZeroConstructor)
	uint8                                        Pad_105C[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameInstance*                         OwningGameInstance;                                // 0x358(0x8)(ZeroConstructor)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                      // 0x360(0x10)(ZeroConstructor)
	class UCanvas*                               CanvasForRenderingToTarget;                        // 0x370(0x8)(ZeroConstructor)
	class UCanvas*                               CanvasForDrawMaterialToRenderTarget;               // 0x378(0x8)(ZeroConstructor)
	uint8                                        Pad_105D[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsFieldComponent*                PhysicsField;                                      // 0x3F0(0x8)(ZeroConstructor)
	uint32                                       LWILastAssignedUID;                                // 0x3F8(0x4)(None)
	uint8                                        Pad_105E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class UActorComponent*>                 ComponentsThatNeedPreEndOfFrameSync;               // 0x400(0x50)(ZeroConstructor)
	TArray<class UActorComponent*>               ComponentsThatNeedEndOfFrameUpdate;                // 0x450(0x10)(ZeroConstructor)
	TArray<class UActorComponent*>               ComponentsThatNeedEndOfFrameUpdate_OnGameThread;   // 0x460(0x10)(ZeroConstructor)
	uint8                                        Pad_105F[0x448];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorldComposition*                     WorldComposition;                                  // 0x8B8(0x8)(ZeroConstructor)
	class UContentBundleManager*                 ContentBundleManager;                              // 0x8C0(0x8)(ZeroConstructor)
	uint8                                        Pad_1060[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWorldPSCPool                         PSCPool;                                           // 0x978(0x58)(None)
	uint8                                        Pad_1061[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]


	static class UWorld* GetWorld();
	static class UClass* StaticClass();
	static class UWorld* GetDefaultObj();

	void K2_GetWorldSettings(class AWorldSettings* ReturnValue);
	void K2_GetLastRenderedPostProcessSettings(const struct FPostProcessSettings& PostProcessSettings, int32 ViewIndex, bool ReturnValue);
	void K2_GetLastEyeAdaptationExposure(float EyeAdaptationExposure, int32 ViewIndex, bool ReturnValue);
	void K2_GetLastAverageSceneLuminance(float AverageSceneLuminance, int32 ViewIndex, bool ReturnValue);
	void HandleTimelineScrubbed();
	void GetWorldSettings(bool bCheckStreamingPersistent, bool bChecked, class AWorldSettings* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationSystemBase
class UNavigationSystemBase : public UObject
{
public:

	static class UClass* StaticClass();
	static class UNavigationSystemBase* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class Engine.NavigationSystemConfig
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                        NavigationSystemClass;                             // 0x28(0x20)(None)
	struct FNavAgentSelector                     SupportedAgentsMask;                               // 0x48(0x4)(None)
	class FName                                  DefaultAgentName;                                  // 0x4C(0x8)(None)
	uint8                                        bIsOverriden : 1;                                  // Mask: 0x1, PropSize: 0x10x54(0x1)(None)
	uint8                                        Pad_1062[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNavigationSystemConfig* GetDefaultObj();

};

// 0x1160 (0x1618 - 0x4B8)
// Class Engine.BasePrimalWorldSettings
class ABasePrimalWorldSettings : public AInfo
{
public:
	TMap<uint32, class AActor*>                  StructureIDMap;                                    // 0x4B8(0x50)(ZeroConstructor)
	bool                                         bSeamlessTravelWorld;                              // 0x508(0x1)(None)
	uint8                                        Pad_1063[0x203];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseNetStasisDistance;                             // 0x70C(0x4)(None)
	uint8                                        Pad_1064[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APostProcessVolume*                    GlobalPostProcessVolume;                           // 0x760(0x8)(ZeroConstructor)
	float                                        KillZIntervalMin;                                  // 0x768(0x4)(None)
	float                                        KillZIntervalMax;                                  // 0x76C(0x4)(None)
	uint8                                        Pad_1065[0xE38];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTreeStumpCreationTime>        TreeStumpCreationTimes;                            // 0x15A8(0x10)(ZeroConstructor)
	uint8                                        Pad_1066[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABasePrimalWorldSettings* GetDefaultObj();

	void GetGlobalPostProcessVolume(class APostProcessVolume* ReturnValue);
	void GetActorWithTag(class FName TheTag, class AActor* ReturnValue);
	void GetActorsWithTag(class FName TheTag, const TArray<class AActor*>& ReturnValue);
};

// 0x268 (0x1880 - 0x1618)
// Class Engine.WorldSettings
class AWorldSettings : public ABasePrimalWorldSettings
{
public:
	uint8                                        Pad_1067[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VisibilityCellSize;                                // 0x1620(0x4)(None)
	enum class EVisibilityAggressiveness         VisibilityAggressiveness;                          // 0x1624(0x1)(None)
	uint8                                        bPrecomputeVisibility : 1;                         // Mask: 0x1, PropSize: 0x10x1625(0x1)(None)
	uint8                                        bPlaceCellsOnlyAlongCameraTracks : 1;              // Mask: 0x2, PropSize: 0x10x1625(0x1)(None)
	uint8                                        bEnableWorldBoundsChecks : 1;                      // Mask: 0x4, PropSize: 0x10x1625(0x1)(None)
	uint8                                        BitPad_DD : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1068[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUse3DWorldCompStreaming : 1;                      // Mask: 0x1, PropSize: 0x10x1628(0x1)(None)
	uint8                                        bForceLoadAllLevelsOnDediServer : 1;               // Mask: 0x2, PropSize: 0x10x1628(0x1)(None)
	uint8                                        BitPad_DE : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1069[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          LevelsToForceInvisibleWhenExcluded;                // 0x1630(0x10)(None)
	TArray<class FName>                          LevelsToAbsolutelyNotLoadOnDediServer;             // 0x1640(0x10)(None)
	TArray<class FName>                          AlwaysVisibleLevelNames;                           // 0x1650(0x10)(None)
	uint8                                        bEnableNavigationSystem : 1;                       // Mask: 0x1, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bEnableAISystem : 1;                               // Mask: 0x2, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bEnableWorldComposition : 1;                       // Mask: 0x4, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bUseClientSideLevelStreamingVolumes : 1;           // Mask: 0x8, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bEnableWorldOriginRebasing : 1;                    // Mask: 0x10, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bWorldGravitySet : 1;                              // Mask: 0x20, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bGlobalGravitySet : 1;                             // Mask: 0x40, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bMinimizeBSPSections : 1;                          // Mask: 0x80, PropSize: 0x10x1660(0x1)(None)
	uint8                                        bForceNoPrecomputedLighting : 1;                   // Mask: 0x1, PropSize: 0x10x1661(0x1)(None)
	uint8                                        bHighPriorityLoading : 1;                          // Mask: 0x2, PropSize: 0x10x1661(0x1)(None)
	uint8                                        bHighPriorityLoadingLocal : 1;                     // Mask: 0x4, PropSize: 0x10x1661(0x1)(None)
	uint8                                        bOverrideDefaultBroadphaseSettings : 1;            // Mask: 0x8, PropSize: 0x10x1661(0x1)(None)
	uint8                                        bGenerateSingleClusterForLevel : 1;                // Mask: 0x10, PropSize: 0x10x1661(0x1)(None)
	uint8                                        BitPad_DF : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_106A[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UAISystemBase>           AISystemClass;                                     // 0x1668(0x30)(ZeroConstructor)
	struct FVector                               LevelInstancePivotOffset;                          // 0x1698(0x18)(None)
	class UNavigationSystemConfig*               NavigationSystemConfig;                            // 0x16B0(0x8)(ZeroConstructor)
	class UNavigationSystemConfig*               NavigationSystemConfigOverride;                    // 0x16B8(0x8)(ZeroConstructor)
	class UWorldPartition*                       WorldPartition;                                    // 0x16C0(0x8)(ZeroConstructor)
	TArray<class UDataLayerAsset*>               BaseNavmeshDataLayers;                             // 0x16C8(0x10)(ZeroConstructor)
	float                                        WorldToMeters;                                     // 0x16D8(0x4)(None)
	float                                        KillZ;                                             // 0x16DC(0x4)(None)
	class UClass*                                KillZDamageType;                                   // 0x16E0(0x8)(ZeroConstructor)
	float                                        WorldGravityZ;                                     // 0x16E8(0x4)(None)
	float                                        GlobalGravityZ;                                    // 0x16EC(0x4)(None)
	class UClass*                                DefaultPhysicsVolumeClass;                         // 0x16F0(0x8)(ZeroConstructor)
	class UClass*                                PhysicsCollisionHandlerClass;                      // 0x16F8(0x8)(ZeroConstructor)
	class UClass*                                DefaultGameMode;                                   // 0x1700(0x8)(ZeroConstructor)
	class UClass*                                GameNetworkManagerClass;                           // 0x1708(0x8)(ZeroConstructor)
	int32                                        PackedLightAndShadowMapTextureSize;                // 0x1710(0x4)(None)
	uint8                                        Pad_106B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DefaultColorScale;                                 // 0x1718(0x18)(None)
	float                                        DefaultMaxDistanceFieldOcclusionDistance;          // 0x1730(0x4)(None)
	float                                        GlobalDistanceFieldViewDistance;                   // 0x1734(0x4)(None)
	float                                        DynamicIndirectShadowsSelfShadowingIntensity;      // 0x1738(0x4)(None)
	uint8                                        Pad_106C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       DefaultReverbSettings;                             // 0x1740(0x20)(ZeroConstructor)
	struct FInteriorSettings                     DefaultAmbientZoneSettings;                        // 0x1760(0x24)(None)
	uint8                                        Pad_106D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundMix*                             DefaultBaseSoundMix;                               // 0x1788(0x8)(ZeroConstructor)
	float                                        TimeDilation;                                      // 0x1790(0x4)(None)
	float                                        MatineeTimeDilation;                               // 0x1794(0x4)(None)
	float                                        DemoPlayTimeDilation;                              // 0x1798(0x4)(None)
	float                                        MinGlobalTimeDilation;                             // 0x179C(0x4)(None)
	float                                        MaxGlobalTimeDilation;                             // 0x17A0(0x4)(None)
	float                                        MinUndilatedFrameTime;                             // 0x17A4(0x4)(None)
	float                                        MaxUndilatedFrameTime;                             // 0x17A8(0x4)(None)
	uint8                                        Pad_106E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBroadphaseSettings                   BroadphaseSettings;                                // 0x17B0(0x80)(None)
	TArray<struct FNetViewer>                    ReplicationViewers;                                // 0x1830(0x10)(ZeroConstructor)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x1840(0x10)(ZeroConstructor)
	class APlayerState*                          PauserPlayerState;                                 // 0x1850(0x8)(ZeroConstructor)
	int32                                        MaxNumberOfBookmarks;                              // 0x1858(0x4)(None)
	uint8                                        Pad_106F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DefaultBookmarkClass;                              // 0x1860(0x8)(ZeroConstructor)
	TArray<class UBookmarkBase*>                 BookmarkArray;                                     // 0x1868(0x10)(ZeroConstructor)
	class UClass*                                LastBookmarkClass;                                 // 0x1878(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AWorldSettings* GetDefaultObj();

	void OnRep_WorldGravityZ();
};

// 0xB0 (0x1930 - 0x1880)
// Class Engine.ARKNXWorldSettings
class AARKNXWorldSettings : public AWorldSettings
{
public:
	struct FNXSettings                           NXSettings;                                        // 0x1880(0x28)(ZeroConstructor)
	struct FPointLightReductionSettings          PointLightReduction;                               // 0x18A8(0x14)(None)
	uint8                                        Pad_1070[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FLayerNameArray>    SubmapToDataLayerMap;                              // 0x18C0(0x50)(None)
	TArray<TWeakObjectPtr<class UAudioComponent>> DeferredAudioActivates;                            // 0x1910(0x10)(ZeroConstructor)
	TArray<TWeakObjectPtr<class UHierarchicalInstancedStaticMeshComponent>> DeferredMeshNavigationUpdates;                     // 0x1920(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AARKNXWorldSettings* GetDefaultObj();

};

// 0x228 (0x298 - 0x70)
// Class Engine.ActorChannel
class UActorChannel : public UChannel
{
public:
	class AActor*                                Actor;                                             // 0x70(0x8)(ZeroConstructor)
	uint8                                        Pad_1071[0xE8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CreateSubObjects;                                  // 0x160(0x10)(ZeroConstructor)
	uint8                                        Pad_1072[0x128];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorChannel* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class Engine.CheatManager
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                DebugCameraControllerRef;                          // 0x28(0x8)(ZeroConstructor)
	class UClass*                                DebugCameraControllerClass;                        // 0x30(0x8)(ZeroConstructor)
	uint8                                        Pad_107E[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCheatManagerExtension*>        CheatManagerExtensions;                            // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UCheatManager* GetDefaultObj();

	void Walk();
	void ViewSelf();
	void ViewPlayer(const class FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(class FName ActorName);
	void UpdateSafeArea();
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const class FString& ClassName);
	void StreamLevelOut(class FName PackageName);
	void StreamLevelIn(class FName PackageName);
	void SpawnServerStatReplicator();
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void PlayersOnly();
	void OnPlayerEndPlayed(class AActor* Player, enum class EEndPlayReason EndPlayReason);
	void OnlyLoadLevel(class FName PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void GetPlayerController(class APlayerController* ReturnValue);
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(class UClass* AClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* AClass, bool bExactMatch);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const class FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, const class FString& GoString, const class FString& LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const class FString& ScreenShotDescription);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CheatManagerExtension
class UCheatManagerExtension : public UObject
{
public:

	static class UClass* StaticClass();
	static class UCheatManagerExtension* GetDefaultObj();

	void RemovedFromCheatManager();
	void GetPlayerController(class APlayerController* ReturnValue);
	void AddedToCheatManager();
};

// 0x58 (0x1028 - 0xFD0)
// Class Engine.GameEngine
class UGameEngine : public UEngine
{
public:
	float                                        MaxDeltaTime;                                      // 0xFD0(0x4)(None)
	float                                        ServerFlushLogInterval;                            // 0xFD4(0x4)(None)
	class UGameInstance*                         GameInstance;                                      // 0xFD8(0x8)(ZeroConstructor)
	uint8                                        Pad_107F[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]


	static class UGameEngine* GetEngine();
	static class UClass* StaticClass();
	static class UGameEngine* GetDefaultObj();

};

// 0x0 (0x1C0 - 0x1C0)
// Class Engine.PrimalGameInstance
class UPrimalGameInstance : public UGameInstance
{
public:

	static class UClass* StaticClass();
	static class UPrimalGameInstance* GetDefaultObj();

};

// 0x20 (0x4D8 - 0x4B8)
// Class Engine.GameSession
class AGameSession : public AInfo
{
public:
	int32                                        MaxSpectators;                                     // 0x4B8(0x4)(None)
	int32                                        MaxPlayers;                                        // 0x4BC(0x4)(None)
	uint8                                        ReservedPlayerSlots;                               // 0x4C0(0x1)(None)
	uint8                                        Pad_1080[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPartySize;                                      // 0x4C4(0x4)(None)
	uint8                                        MaxSplitscreensPerConnection;                      // 0x4C8(0x1)(None)
	bool                                         bRequiresPushToTalk;                               // 0x4C9(0x1)(None)
	uint8                                        Pad_1081[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SessionName;                                       // 0x4CC(0x8)(None)
	uint8                                        Pad_1082[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameSession* GetDefaultObj();

};

// 0x120 (0x148 - 0x28)
// Class Engine.GameUserSettings
class UGameUserSettings : public UObject
{
public:
	bool                                         bUseVSync;                                         // 0x28(0x1)(None)
	bool                                         bUseDynamicResolution;                             // 0x29(0x1)(None)
	uint8                                        Pad_1084[0x5E];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ResolutionSizeX;                                   // 0x88(0x4)(None)
	uint32                                       ResolutionSizeY;                                   // 0x8C(0x4)(None)
	uint32                                       LastUserConfirmedResolutionSizeX;                  // 0x90(0x4)(None)
	uint32                                       LastUserConfirmedResolutionSizeY;                  // 0x94(0x4)(None)
	int32                                        WindowPosX;                                        // 0x98(0x4)(None)
	int32                                        WindowPosY;                                        // 0x9C(0x4)(None)
	int32                                        FullscreenMode;                                    // 0xA0(0x4)(None)
	int32                                        LastConfirmedFullscreenMode;                       // 0xA4(0x4)(None)
	int32                                        PreferredFullscreenMode;                           // 0xA8(0x4)(None)
	uint32                                       Version;                                           // 0xAC(0x4)(None)
	int32                                        AudioQualityLevel;                                 // 0xB0(0x4)(None)
	int32                                        LastConfirmedAudioQualityLevel;                    // 0xB4(0x4)(None)
	float                                        FrameRateLimit;                                    // 0xB8(0x4)(None)
	uint8                                        Pad_1085[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenWidth;                                // 0xC0(0x4)(None)
	bool                                         bUseDesiredScreenHeight;                           // 0xC4(0x1)(None)
	uint8                                        Pad_1086[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenHeight;                               // 0xC8(0x4)(None)
	int32                                        LastUserConfirmedDesiredScreenWidth;               // 0xCC(0x4)(None)
	int32                                        LastUserConfirmedDesiredScreenHeight;              // 0xD0(0x4)(None)
	float                                        LastRecommendedScreenWidth;                        // 0xD4(0x4)(None)
	float                                        LastRecommendedScreenHeight;                       // 0xD8(0x4)(None)
	float                                        LastCPUBenchmarkResult;                            // 0xDC(0x4)(None)
	float                                        LastGPUBenchmarkResult;                            // 0xE0(0x4)(None)
	uint8                                        Pad_1087[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                LastCPUBenchmarkSteps;                             // 0xE8(0x10)(None)
	TArray<float>                                LastGPUBenchmarkSteps;                             // 0xF8(0x10)(None)
	float                                        LastGPUBenchmarkMultiplier;                        // 0x108(0x4)(None)
	bool                                         bUseHDRDisplayOutput;                              // 0x10C(0x1)(None)
	uint8                                        Pad_1088[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HDRDisplayOutputNits;                              // 0x110(0x4)(None)
	uint8                                        Pad_1089[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnGameUserSettingsUINeedsUpdate;                   // 0x138(0x10)(None)

	static class UClass* StaticClass();
	static class UGameUserSettings* GetDefaultObj();

	void ValidateSettings();
	void SupportsHDRDisplayOutput(bool ReturnValue);
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int32 Value);
	void SetViewDistanceQuality(int32 Value);
	void SetToDefaults();
	void SetTextureQuality(int32 Value);
	void SetShadowQuality(int32 Value);
	void SetShadingQuality(int32 Value);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int32 NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetReflectionQuality(int32 Value);
	void SetPostProcessingQuality(int32 Value);
	void SetOverallScalabilityLevel(int32 Value);
	void SetGlobalIlluminationQuality(int32 Value);
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int32 Value);
	void SetDynamicResolutionEnabled(bool bEnable);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int32 QualityLevel);
	void SetAntiAliasingQuality(int32 Value);
	void SaveSettings();
	void RunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	void IsVSyncEnabled(bool ReturnValue);
	void IsVSyncDirty(bool ReturnValue);
	void IsScreenResolutionDirty(bool ReturnValue);
	void IsHDREnabled(bool ReturnValue);
	void IsFullscreenModeDirty(bool ReturnValue);
	void IsDynamicResolutionEnabled(bool ReturnValue);
	void IsDynamicResolutionDirty(bool ReturnValue);
	void IsDirty(bool ReturnValue);
	void GetVisualEffectQuality(int32 ReturnValue);
	void GetViewDistanceQuality(int32 ReturnValue);
	void GetTextureQuality(int32 ReturnValue);
	void GetSyncInterval(int32 ReturnValue);
	void GetShadowQuality(int32 ReturnValue);
	void GetShadingQuality(int32 ReturnValue);
	void GetScreenResolution(const struct FIntPoint& ReturnValue);
	void GetResolutionScaleNormalized(float ReturnValue);
	void GetResolutionScaleInformationEx(float CurrentScaleNormalized, float CurrentScaleValue, float MinScaleValue, float MaxScaleValue);
	void GetResolutionScaleInformation(float CurrentScaleNormalized, int32 CurrentScaleValue, int32 MinScaleValue, int32 MaxScaleValue);
	void GetReflectionQuality(int32 ReturnValue);
	void GetRecommendedResolutionScale(float ReturnValue);
	void GetPreferredFullscreenMode(enum class EWindowMode ReturnValue);
	void GetPostProcessingQuality(int32 ReturnValue);
	void GetOverallScalabilityLevel(int32 ReturnValue);
	void GetLastConfirmedScreenResolution(const struct FIntPoint& ReturnValue);
	void GetLastConfirmedFullscreenMode(enum class EWindowMode ReturnValue);
	void GetGlobalIlluminationQuality(int32 ReturnValue);
	void GetGameUserSettings(class UGameUserSettings* ReturnValue);
	void GetFullscreenMode(enum class EWindowMode ReturnValue);
	void GetFrameRateLimit(float ReturnValue);
	void GetFramePace(int32 ReturnValue);
	void GetFoliageQuality(int32 ReturnValue);
	void GetDesktopResolution(const struct FIntPoint& ReturnValue);
	void GetDefaultWindowPosition(const struct FIntPoint& ReturnValue);
	void GetDefaultWindowMode(enum class EWindowMode ReturnValue);
	void GetDefaultResolutionScale(float ReturnValue);
	void GetDefaultResolution(const struct FIntPoint& ReturnValue);
	void GetCurrentHDRDisplayNits(int32 ReturnValue);
	void GetAudioQualityLevel(int32 ReturnValue);
	void GetAntiAliasingQuality(int32 ReturnValue);
	void EnableHDRDisplayOutput(bool bEnable, int32 DisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};

// 0x10 (0x38 - 0x28)
// Class Engine.ScriptViewportClient
class UScriptViewportClient : public UObject
{
public:
	uint8                                        Pad_108A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UScriptViewportClient* GetDefaultObj();

};

// 0x378 (0x3B0 - 0x38)
// Class Engine.GameViewportClient
class UGameViewportClient : public UScriptViewportClient
{
public:
	uint8                                        Pad_108B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UConsole*                              ViewportConsole;                                   // 0x40(0x8)(ZeroConstructor)
	TArray<struct FDebugDisplayProperty>         DebugProperties;                                   // 0x48(0x10)(ZeroConstructor)
	uint8                                        Pad_108C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxSplitscreenPlayers;                             // 0x68(0x4)(None)
	uint8                                        Pad_108D[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x78(0x8)(ZeroConstructor)
	class UGameInstance*                         GameInstance;                                      // 0x80(0x8)(None)
	uint8                                        Pad_108E[0x328];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGameViewportClient* GetDefaultObj();

	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int32 PlayerIndex);
};

// 0xF8 (0x5B0 - 0x4B8)
// Class Engine.HUD
class AHUD : public AActor
{
public:
	class APlayerController*                     PlayerOwner;                                       // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bLostFocusPaused : 1;                              // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bShowHUD : 1;                                      // Mask: 0x2, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        bShowDebugInfo : 1;                                // Mask: 0x4, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        BitPad_E0 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_109E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentTargetIndex;                                // 0x4C4(0x4)(None)
	uint8                                        bShowHitBoxDebugInfo : 1;                          // Mask: 0x1, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        bShowOverlays : 1;                                 // Mask: 0x2, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        bEnableDebugTextShadow : 1;                        // Mask: 0x4, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        BitPad_E1 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_109F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        PostRenderedActors;                                // 0x4D0(0x10)(ZeroConstructor)
	uint8                                        Pad_10A0[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DebugDisplay;                                      // 0x4F0(0x10)(None)
	TArray<class FName>                          ToggledDebugCategories;                            // 0x500(0x10)(None)
	class UCanvas*                               Canvas;                                            // 0x510(0x8)(ZeroConstructor)
	class UCanvas*                               DebugCanvas;                                       // 0x518(0x8)(ZeroConstructor)
	TArray<struct FDebugTextInfo>                DebugTextList;                                     // 0x520(0x10)(ZeroConstructor)
	class UClass*                                ShowDebugTargetDesiredClass;                       // 0x530(0x8)(ZeroConstructor)
	class AActor*                                ShowDebugTargetActor;                              // 0x538(0x8)(ZeroConstructor)
	uint8                                        Pad_10A1[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AHUD* GetDefaultObj();

	void ShowHUD();
	void ShowDebugToggleSubCategory(class FName Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(class FName DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(class FName BoxName);
	void ReceiveHitBoxEndCursorOver(class FName BoxName);
	void ReceiveHitBoxClick(class FName BoxName);
	void ReceiveHitBoxBeginCursorOver(class FName BoxName);
	void ReceiveDrawHUD(int32 SizeX, int32 SizeY);
	void Project(const struct FVector& Location, bool bClampToZeroPlane, const struct FVector& ReturnValue);
	void PreviousDebugTarget();
	void NextDebugTarget();
	void GetTextSize(const class FString& Text, float OutWidth, float OutHeight, class UFont* Font, float Scale);
	void GetOwningPlayerController(class APlayerController* ReturnValue);
	void GetOwningPawn(class APawn* ReturnValue);
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, const TArray<class AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, const struct FVector& WorldPosition, const struct FVector& WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, class FName InName, bool bConsumesInput, int32 Priority);
	void AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};

// 0x98 (0xC0 - 0x28)
// Class Engine.PendingNetGame
class UPendingNetGame : public UObject
{
public:
	uint8                                        Pad_10A2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetDriver*                            NetDriver;                                         // 0x30(0x8)(ZeroConstructor)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0x38(0x8)(None)
	uint8                                        Pad_10A3[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPendingNetGame* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SaveGame
class USaveGame : public UObject
{
public:

	static class UClass* StaticClass();
	static class USaveGame* GetDefaultObj();

};

// 0x118 (0x5D0 - 0x4B8)
// Class Engine.PlayerState
class APlayerState : public AInfo
{
public:
	float                                        Score;                                             // 0x4B8(0x4)(None)
	int32                                        PlayerID;                                          // 0x4BC(0x4)(None)
	uint8                                        CompressedPing;                                    // 0x4C0(0x1)(None)
	uint8                                        Pad_10A4[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShouldUpdateReplicatedPing : 1;                   // Mask: 0x1, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        bIsSpectator : 1;                                  // Mask: 0x2, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        bOnlySpectator : 1;                                // Mask: 0x4, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        bIsABot : 1;                                       // Mask: 0x8, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        BitPad_E2 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsInactive : 1;                                   // Mask: 0x20, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        bFromPreviousLevel : 1;                            // Mask: 0x40, PropSize: 0x10x4C2(0x1)(None)
	uint8                                        BitPad_E3 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10A5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StartTime;                                         // 0x4C4(0x4)(None)
	class UClass*                                EngineMessageClass;                                // 0x4C8(0x8)(ZeroConstructor)
	uint8                                        Pad_10A6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SavedNetworkAddress;                               // 0x4D8(0x10)(None)
	struct FUniqueNetIdRepl                      UniqueID;                                          // 0x4E8(0x30)(None)
	uint8                                        Pad_10A7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPawnSet;                                         // 0x520(0x10)(ZeroConstructor)
	class APawn*                                 PawnPrivate;                                       // 0x530(0x8)(ZeroConstructor)
	uint8                                        Pad_10A8[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerNamePrivate;                                 // 0x5B0(0x10)(None)
	uint8                                        Pad_10A9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerState* GetDefaultObj();

	void ReceiveOverrideWith(class APlayerState* OldPlayerState);
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	void OnPawnPrivateDestroyed(class AActor* InActor);
	void IsSpectator(bool ReturnValue);
	void IsOnlyASpectator(bool ReturnValue);
	void IsABot(bool ReturnValue);
	void GetScore(float ReturnValue);
	void GetPlayerName(const class FString& ReturnValue);
	void GetPlayerId(int32 ReturnValue);
	void GetPlayerController(class APlayerController* ReturnValue);
	void GetPingInMilliseconds(float ReturnValue);
	void GetPawn(class APawn* ReturnValue);
	void GetNetPlayerName(const class FString& ReturnValue);
	void GetExactPing(float ReturnValue);
	void GetCompressedPing(uint8 ReturnValue);
	void BP_GetUniqueId(const struct FUniqueNetIdRepl& ReturnValue);
};

// 0xF8 (0x218 - 0x120)
// Class Engine.ProjectileMovementComponent
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                        MinLifespanToUpdate;                               // 0x120(0x4)(None)
	float                                        InitialSpeed;                                      // 0x124(0x4)(None)
	float                                        MaxSpeed;                                          // 0x128(0x4)(None)
	uint8                                        bRotationFollowsVelocity : 1;                      // Mask: 0x1, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bShouldBounce : 1;                                 // Mask: 0x2, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bInitialVelocityInLocalSpace : 1;                  // Mask: 0x4, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x8, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bTriggerBounceImpactNotification : 1;              // Mask: 0x10, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bIsHomingProjectile : 1;                           // Mask: 0x20, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bCheckForProjectileUnderwater : 1;                 // Mask: 0x40, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bIsProjectileUnderwater : 1;                       // Mask: 0x80, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bKeepInitialBasedOnComponent : 1;                  // Mask: 0x1, PropSize: 0x10x12D(0x1)(None)
	uint8                                        BitPad_E4 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10AA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ProjectileUnderwaterExtraGravityScale;             // 0x130(0x4)(None)
	float                                        ProjectileUnderwaterExtraSpeedScale;               // 0x134(0x4)(None)
	float                                        ProjectileDampingFactor;                           // 0x138(0x4)(None)
	float                                        FallingProjectileDampingFactor;                    // 0x13C(0x4)(None)
	float                                        ProjectileGravityScale;                            // 0x140(0x4)(None)
	float                                        Buoyancy;                                          // 0x144(0x4)(None)
	struct FVector                               PreviousVelocity;                                  // 0x148(0x18)(None)
	float                                        ElapsedLifespan;                                   // 0x160(0x4)(None)
	float                                        Bounciness;                                        // 0x164(0x4)(None)
	float                                        Friction;                                          // 0x168(0x4)(None)
	float                                        BounceVelocityStopSimulatingThreshold;             // 0x16C(0x4)(None)
	FMulticastInlineDelegateProperty_            OnProjectileBounce;                                // 0x170(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnProjectileStop;                                  // 0x180(0x10)(ZeroConstructor)
	float                                        HomingAccelerationMagnitude;                       // 0x190(0x4)(None)
	TWeakObjectPtr<class USceneComponent>        HomingTargetComponent;                             // 0x194(0x8)(ZeroConstructor)
	uint8                                        Pad_10AB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               HomingTargetComponentOffset;                       // 0x1A0(0x18)(None)
	float                                        MaxSimulationTimeStep;                             // 0x1B8(0x4)(None)
	int32                                        MaxSimulationIterations;                           // 0x1BC(0x4)(None)
	class UPrimitiveComponent*                   BasedOnComponent;                                  // 0x1C0(0x8)(ZeroConstructor)
	struct FVector                               BasedLocation;                                     // 0x1C8(0x18)(None)
	struct FRotator                              BasedRotation;                                     // 0x1E0(0x18)(None)
	struct FVector                               BasedVelocity;                                     // 0x1F8(0x18)(None)
	uint8                                        bAffectedByBasedCompRotation : 1;                  // Mask: 0x1, PropSize: 0x10x210(0x1)(None)
	uint8                                        Pad_10AC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProjectileMovementComponent* GetDefaultObj();

	void UpdateBasedProjectileTransform();
	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void SetAffectedByBasedRotation(bool NewAffected);
	void RecalculateBasedTransform();
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void LimitVelocity(const struct FVector& NewVelocity, const struct FVector& ReturnValue);
	void GetBasedComponentTransform(const struct FTransform& ReturnValue);
};

// 0x0 (0x598 - 0x598)
// Class Engine.SpectatorPawn
class ASpectatorPawn : public ADefaultPawn
{
public:

	static class UClass* StaticClass();
	static class ASpectatorPawn* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.SoundNode
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                    ChildNodes;                                        // 0x28(0x10)(None)
	uint8                                        Pad_10AD[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNode* GetDefaultObj();

};

// 0x30 (0x78 - 0x48)
// Class Engine.SoundNodeRandom
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                Weights;                                           // 0x48(0x10)(None)
	TArray<bool>                                 HasBeenUsed;                                       // 0x58(0x10)(None)
	int32                                        NumRandomUsed;                                     // 0x68(0x4)(None)
	int32                                        PreselectAtLevelLoad;                              // 0x6C(0x4)(None)
	uint8                                        bShouldExcludeFromBranchCulling : 1;               // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        bSoundCueExcludedFromBranchCulling : 1;            // Mask: 0x2, PropSize: 0x10x70(0x1)(None)
	uint8                                        bRandomizeWithoutReplacement : 1;                  // Mask: 0x4, PropSize: 0x10x70(0x1)(None)
	uint8                                        Pad_10AE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeRandom* GetDefaultObj();

};

// 0x20 (0x528 - 0x508)
// Class Engine.PhysicsVolume
class APhysicsVolume : public AVolume
{
public:
	float                                        TerminalVelocity;                                  // 0x508(0x4)(None)
	int32                                        Priority;                                          // 0x50C(0x4)(None)
	float                                        FluidFriction;                                     // 0x510(0x4)(None)
	uint8                                        bWaterVolume : 1;                                  // Mask: 0x1, PropSize: 0x10x514(0x1)(None)
	uint8                                        bPhysicsOnContact : 1;                             // Mask: 0x2, PropSize: 0x10x514(0x1)(None)
	uint8                                        BitPad_E5 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10B1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WaterDensity;                                      // 0x518(0x4)(None)
	float                                        WaterDamping;                                      // 0x51C(0x4)(None)
	float                                        PhysicsMinWalkableFloorZ;                          // 0x520(0x4)(None)
	uint8                                        BitPad_E6 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventWaterSubmersion : 1;                       // Mask: 0x2, PropSize: 0x10x524(0x1)(None)
	uint8                                        bDynamicWaterVolume : 1;                           // Mask: 0x4, PropSize: 0x10x524(0x1)(None)
	uint8                                        bDontSetWaterNavCollision : 1;                     // Mask: 0x8, PropSize: 0x10x524(0x1)(None)
	uint8                                        Pad_10B2[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APhysicsVolume* GetDefaultObj();

	void GetVolumeZAtPosition2D(const struct FVector2D& Position, float ReturnValue);
	void GetVolumeZAtPosition(const struct FVector2D& Position, float ReturnValue);
};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.SkyLight
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                    LightComponent;                                    // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        Pad_10B3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASkyLight* GetDefaultObj();

	void OnRep_bEnabled();
};

// 0x98 (0x270 - 0x1D8)
// Class Engine.TextureCube
class UTextureCube : public UTexture
{
public:
	uint8                                        Pad_10B4[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureCube* GetDefaultObj();

};

// 0x70 (0x98 - 0x28)
// Class Engine.EdGraphNode
class UEdGraphNode : public UObject
{
public:
	uint8                                        Pad_10B5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEdGraphPin_Deprecated*>        DeprecatedPins;                                    // 0x38(0x10)(None)
	int32                                        NodePosX;                                          // 0x48(0x4)(None)
	int32                                        NodePosY;                                          // 0x4C(0x4)(None)
	int32                                        NodeWidth;                                         // 0x50(0x4)(None)
	int32                                        NodeHeight;                                        // 0x54(0x4)(None)
	enum class ENodeAdvancedPins                 AdvancedPinDisplay;                                // 0x58(0x1)(None)
	enum class ENodeEnabledState                 EnabledState;                                      // 0x59(0x1)(None)
	uint8                                        Pad_10B6[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_E7 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDisplayAsDisabled : 1;                            // Mask: 0x2, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bUserSetEnabledState : 1;                          // Mask: 0x4, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bIsIntermediateNode : 1;                           // Mask: 0x8, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bHasCompilerMessage : 1;                           // Mask: 0x10, PropSize: 0x10x5B(0x1)(None)
	uint8                                        BitPad_E8 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10B7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NodeComment;                                       // 0x60(0x10)(None)
	int32                                        ErrorType;                                         // 0x70(0x4)(None)
	uint8                                        Pad_10B8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ErrorMsg;                                          // 0x78(0x10)(None)
	struct FGuid                                 NodeGuid;                                          // 0x88(0x10)(None)

	static class UClass* StaticClass();
	static class UEdGraphNode* GetDefaultObj();

};

// 0x220 (0x970 - 0x750)
// Class Engine.InstancedStaticMeshComponent
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	uint8                                        Pad_10D0[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;                                 // 0x760(0x10)(None)
	TArray<struct FMatrix>                       PerInstancePrevTransform;                          // 0x770(0x10)(None)
	int32                                        NumCustomDataFloats;                               // 0x780(0x4)(None)
	uint8                                        Pad_10D1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                PerInstanceSMCustomData;                           // 0x788(0x10)(None)
	int32                                        InstancingRandomSeed;                              // 0x798(0x4)(None)
	uint8                                        Pad_10D2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds;                             // 0x7A0(0x10)(None)
	uint8                                        bIgnoreAutomaticBoundsWPODisableDistance : 1;      // Mask: 0x1, PropSize: 0x10x7B0(0x1)(None)
	uint8                                        BitPad_E9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10D3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        InstanceMinDrawDistance;                           // 0x7B4(0x4)(None)
	int32                                        InstanceStartCullDistance;                         // 0x7B8(0x4)(None)
	int32                                        InstanceEndCullDistance;                           // 0x7BC(0x4)(None)
	TArray<int32>                                InstanceReorderTable;                              // 0x7C0(0x10)(None)
	uint8                                        Pad_10D4[0xC0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPendingLightmaps;                               // 0x890(0x4)(None)
	uint8                                        Pad_10D5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                    // 0x898(0x10)(None)
	uint8                                        Pad_10D6[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UActorComponent*>               ReferencedAttachedComponentObjects;                // 0x8C8(0x10)(ZeroConstructor)
	uint8                                        Pad_10D7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AttachedComponentScaleFactor;                      // 0x8DC(0x4)(None)
	class UFoliageBaseType*                      FoliageTypeReference;                              // 0x8E0(0x8)(ZeroConstructor)
	float                                        MaxScaleForAttachedComponent;                      // 0x8E8(0x4)(None)
	float                                        MinScaleForAttachedComponent;                      // 0x8EC(0x4)(None)
	TArray<uint32>                               InstancesVisibility;                               // 0x8F0(0x10)(None)
	float                                        OverrideWalkableFloorZ;                            // 0x900(0x4)(None)
	float                                        PlayerOverrideWalkableFloorZ;                      // 0x904(0x4)(None)
	uint8                                        bIgnoreVisibilityCheck : 1;                        // Mask: 0x1, PropSize: 0x10x908(0x1)(None)
	uint8                                        bReplicateThisComponent : 1;                       // Mask: 0x2, PropSize: 0x10x908(0x1)(None)
	uint8                                        BitPad_EA : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsFallingTree : 1;                                // Mask: 0x8, PropSize: 0x10x908(0x1)(None)
	uint8                                        BitPad_EB : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bInstanceRequiresPhysXCollision : 1;               // Mask: 0x40, PropSize: 0x10x908(0x1)(None)
	uint8                                        bDontScaleAttachedComponent : 1;                   // Mask: 0x80, PropSize: 0x10x908(0x1)(None)
	uint8                                        Pad_10D8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                AttachedComponentClass;                            // 0x910(0x8)(ZeroConstructor)
	TArray<class UMaterialInterface*>            OverrideDestructionMaterials;                      // 0x918(0x10)(ZeroConstructor)
	class UClass*                                DestroyedMeshActorClass;                           // 0x928(0x8)(ZeroConstructor)
	class UStaticMesh*                           TreeStumpMesh;                                     // 0x930(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideTreeHarvestSound;                          // 0x938(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideTreeGroundImpactSound;                     // 0x940(0x8)(ZeroConstructor)
	float                                        DistanceAlongTreeToSpawnImpactSound;               // 0x948(0x4)(None)
	float                                        ScaleMaxX;                                         // 0x94C(0x4)(None)
	float                                        ScaleMinX;                                         // 0x950(0x4)(None)
	float                                        MeshUnscaledBounds;                                // 0x954(0x4)(None)
	uint8                                        Pad_10D9[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInstancedStaticMeshComponent* GetDefaultObj();

	void UpdateInstanceTransform(int32 InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport, bool ReturnValue);
	void ShowInstance(int32 OriginalIndex);
	void SetCustomDataValue(int32 InstanceIndex, int32 CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty, bool ReturnValue);
	void SetCullDistances(int32 StartCullDistance, int32 EndCullDistance);
	void RemoveInstances(const TArray<int32>& InstancesToRemove, bool ReturnValue);
	void RemoveInstance(int32 InstanceIndex, const struct FVector& HitDirection, float Damage, float TotalHealth, bool ReturnValue);
	void MulticastShowInstances(const TArray<uint16>& Indices, bool bMarkRenderStateDirty);
	void IsValidInstance(int32 InstanceIndex, bool ReturnValue);
	void GetPositionOfInstance(int32 Index, const struct FVector& ReturnValue);
	void GetInstanceTransform(int32 InstanceIndex, const struct FTransform& OutInstanceTransform, bool bWorldSpace, bool ReturnValue);
	void GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace, const TArray<int32>& ReturnValue);
	void GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace, const TArray<int32>& ReturnValue);
	void GetInstanceCount(int32 ReturnValue);
	void DealDirectDamage(class APlayerController* ForPC, float DamageAmount, class UClass* DamageTypeClass, int32 HitBodyIndex);
	void CopyInstanceTransforms(class UInstancedStaticMeshComponent* DestComponent);
	void ClientSetHealthPercentageForInstance(int32 InstanceIndex, float HealthPercentage);
	void ClearInstances();
	void BatchUpdateInstancesTransforms(int32 StartInstanceIndex, const TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport, bool ReturnValue);
	void BatchUpdateInstancesTransform(int32 StartInstanceIndex, int32 NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport, bool ReturnValue);
	void AddInstanceWorldSpace(const struct FTransform& WorldTransform, int32 ReturnValue);
	void AddInstances(const TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace, const TArray<int32>& ReturnValue);
	void AddInstance(const struct FTransform& InstanceTransform, bool bWorldSpace, int32 ReturnValue);
};

// 0x188 (0xAF8 - 0x970)
// Class Engine.HierarchicalInstancedStaticMeshComponent
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	uint8                                        Pad_10DA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseTranslatedInstanceSpace : 1;                   // Mask: 0x1, PropSize: 0x10x978(0x1)(None)
	uint8                                        BitPad_EC : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10DB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TranslatedInstanceSpaceOrigin;                     // 0x980(0x18)(None)
	TArray<int32>                                SortedInstances;                                   // 0x998(0x10)(None)
	int32                                        NumBuiltInstances;                                 // 0x9A8(0x4)(None)
	uint8                                        Pad_10DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  BuiltInstanceBounds;                               // 0x9B0(0x38)(None)
	struct FBox                                  UnbuiltInstanceBounds;                             // 0x9E8(0x38)(None)
	TArray<struct FBox>                          UnbuiltInstanceBoundsList;                         // 0xA20(0x10)(None)
	uint8                                        bEnableDensityScaling : 1;                         // Mask: 0x1, PropSize: 0x10xA30(0x1)(None)
	uint8                                        BitPad_ED : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10DD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OcclusionLayerNumNodes;                            // 0xA38(0x4)(None)
	uint8                                        Pad_10DE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoxSphereBounds                      CacheMeshExtendedBounds;                           // 0xA40(0x38)(None)
	bool                                         bDisableCollision;                                 // 0xA78(0x1)(None)
	uint8                                        Pad_10DF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        InstanceCountToRender;                             // 0xA7C(0x4)(None)
	uint8                                        Pad_10E0[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHierarchicalInstancedStaticMeshComponent* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class Engine.FoliageBaseType
class UFoliageBaseType : public UObject
{
public:
	TSoftObjectPtr<class UGeometryCollection>    SoftDestructionAsset;                              // 0x28(0x30)(None)

	static class UClass* StaticClass();
	static class UFoliageBaseType* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.ISMPartitionActor
class AISMPartitionActor : public APartitionActor
{
public:
	uint8                                        Pad_10E1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AISMPartitionActor* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.StaticMeshActor
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x4B8(0x8)(ZeroConstructor)
	bool                                         bStaticMeshReplicateMovement;                      // 0x4C0(0x1)(None)
	enum class ENavDataGatheringMode             NavigationGeometryGatheringMode;                   // 0x4C1(0x1)(None)
	uint8                                        Pad_10E2[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AStaticMeshActor* GetDefaultObj();

	void SetMobility(enum class EComponentMobility InMobility);
};

// 0x70 (0x98 - 0x28)
// Class Engine.MaterialInterface
class UMaterialInterface : public UObject
{
public:
	uint8                                        Pad_10E8[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x38(0x8)(ZeroConstructor)
	uint8                                        Pad_10E9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightmassMaterialInterfaceSettings   LightmassSettings;                                 // 0x50(0x10)(None)
	TArray<struct FMaterialTextureInfo>          TextureStreamingData;                              // 0x60(0x10)(None)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x70(0x10)(None)
	uint8                                        Pad_10EA[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialInterface* GetDefaultObj();

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32 CinematicTextureGroups, bool bFastResponse);
	void GetPhysicalMaterialMask(class UPhysicalMaterialMask* ReturnValue);
	void GetPhysicalMaterialFromMap(int32 Index, class UPhysicalMaterial* ReturnValue);
	void GetPhysicalMaterial(class UPhysicalMaterial* ReturnValue);
	void GetParameterInfo(enum class EMaterialParameterAssociation Association, class FName ParameterName, class UMaterialFunctionInterface* LayerFunction, const struct FMaterialParameterInfo& ReturnValue);
	void GetBlendMode(enum class EBlendMode ReturnValue);
	void GetBaseMaterial(class UMaterial* ReturnValue);
};

// 0x198 (0x230 - 0x98)
// Class Engine.MaterialInstance
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x98(0x8)(ZeroConstructor)
	class UPhysicalMaterial*                     PhysicalMaterialMap[0x8];                          // 0xA0(0x40)(ZeroConstructor)
	class UMaterialInterface*                    Parent;                                            // 0xE0(0x8)(ZeroConstructor)
	struct FMaterialOverrideNanite               NaniteOverrideMaterial;                            // 0xE8(0x40)(ZeroConstructor)
	uint8                                        bHasStaticPermutationResource : 1;                 // Mask: 0x1, PropSize: 0x10x128(0x1)(None)
	uint8                                        bOverrideSubsurfaceProfile : 1;                    // Mask: 0x2, PropSize: 0x10x128(0x1)(None)
	uint8                                        BitPad_EE : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10EB[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FScalarParameterValue>         ScalarParameterValues;                             // 0x138(0x10)(None)
	TArray<struct FVectorParameterValue>         VectorParameterValues;                             // 0x148(0x10)(None)
	TArray<struct FDoubleVectorParameterValue>   DoubleVectorParameterValues;                       // 0x158(0x10)(None)
	TArray<struct FTextureParameterValue>        TextureParameterValues;                            // 0x168(0x10)(ZeroConstructor)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;              // 0x178(0x10)(ZeroConstructor)
	TArray<struct FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues;                // 0x188(0x10)(ZeroConstructor)
	TArray<struct FFontParameterValue>           FontParameterValues;                               // 0x198(0x10)(ZeroConstructor)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;                             // 0x1A8(0xC)(None)
	uint8                                        Pad_10EC[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStaticParameterSetRuntimeData        StaticParametersRuntime;                           // 0x1C0(0x38)(ZeroConstructor)
	uint8                                        Pad_10ED[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstance*                     FarDrawOverride;                                   // 0x228(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialInstance* GetDefaultObj();

};

// 0x8 (0x238 - 0x230)
// Class Engine.MaterialInstanceConstant
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                 PhysMaterialMask;                                  // 0x230(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialInstanceConstant* GetDefaultObj();

	void K2_GetVectorParameterValue(class FName ParameterName, const struct FLinearColor& ReturnValue);
	void K2_GetTextureParameterValue(class FName ParameterName, class UTexture* ReturnValue);
	void K2_GetScalarParameterValue(class FName ParameterName, float ReturnValue);
};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCustomOutput
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionCustomOutput* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODBuilder
class UHLODBuilder : public UObject
{
public:

	static class UClass* StaticClass();
	static class UHLODBuilder* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.BlueprintCore
class UBlueprintCore : public UObject
{
public:
	class UClass*                                SkeletonGeneratedClass;                            // 0x28(0x8)(ZeroConstructor)
	class UClass*                                GeneratedClass;                                    // 0x30(0x8)(None)
	bool                                         bLegacyNeedToPurgeSkelRefs;                        // 0x38(0x1)(None)
	uint8                                        Pad_10EE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 BlueprintGuid;                                     // 0x3C(0x10)(None)
	uint8                                        Pad_10EF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlueprintCore* GetDefaultObj();

};

// 0x58 (0xA8 - 0x50)
// Class Engine.Blueprint
class UBlueprint : public UBlueprintCore
{
public:
	uint8                                        Pad_10F0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ParentClass;                                       // 0x58(0x8)(ZeroConstructor)
	enum class EBlueprintType                    BlueprintType;                                     // 0x60(0x1)(None)
	uint8                                        bRecompileOnLoad : 1;                              // Mask: 0x1, PropSize: 0x10x61(0x1)(None)
	uint8                                        bHasBeenRegenerated : 1;                           // Mask: 0x2, PropSize: 0x10x61(0x1)(None)
	uint8                                        bIsRegeneratingOnLoad : 1;                         // Mask: 0x4, PropSize: 0x10x61(0x1)(None)
	uint8                                        BitPad_EF : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10F1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlueprintSystemVersion;                            // 0x64(0x4)(None)
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x68(0x8)(ZeroConstructor)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x70(0x10)(ZeroConstructor)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x80(0x10)(ZeroConstructor)
	TArray<struct FBPComponentClassOverride>     ComponentClassOverrides;                           // 0x90(0x10)(ZeroConstructor)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0xA0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UBlueprint* GetDefaultObj();

};

// 0x818 (0xAE0 - 0x2C8)
// Class Engine.CameraComponent
class UCameraComponent : public USceneComponent
{
public:
	float                                        FieldOfView;                                       // 0x2C8(0x4)(None)
	float                                        OrthoWidth;                                        // 0x2CC(0x4)(None)
	float                                        OrthoNearClipPlane;                                // 0x2D0(0x4)(None)
	float                                        OrthoFarClipPlane;                                 // 0x2D4(0x4)(None)
	float                                        AspectRatio;                                       // 0x2D8(0x4)(None)
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x2DC(0x1)(None)
	uint8                                        bUseFieldOfViewForLOD : 1;                         // Mask: 0x2, PropSize: 0x10x2DC(0x1)(None)
	uint8                                        bLockToHmd : 1;                                    // Mask: 0x4, PropSize: 0x10x2DC(0x1)(None)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x8, PropSize: 0x10x2DC(0x1)(None)
	uint8                                        BitPad_F0 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ECameraProjectionMode             ProjectionMode;                                    // 0x2DD(0x1)(None)
	uint8                                        Pad_10F4[0x62];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PostProcessBlendWeight;                            // 0x340(0x4)(None)
	uint8                                        Pad_10F5[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x370(0x770)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UCameraComponent* GetDefaultObj();

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject);
	void OnCameraMeshHiddenChanged();
	void GetCameraView(float DeltaTime, const struct FMinimalViewInfo& DesiredView);
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
};

// 0x0 (0x30 - 0x30)
// Class Engine.AudioEngineSubsystem
class UAudioEngineSubsystem : public UDynamicSubsystem
{
public:

	static class UClass* StaticClass();
	static class UAudioEngineSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActiveSoundUpdateInterface
class IActiveSoundUpdateInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IActiveSoundUpdateInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationAssetExtensions
class UAnimationAssetExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimationAssetExtensions* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAnimBlueprintClassSubsystem_PropertyAccess* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationDataModelNotifiesExtensions
class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimationDataModelNotifiesExtensions* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimLayerInterface
class IAnimLayerInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAnimLayerInterface* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class Engine.AnimationAsset
class UAnimationAsset : public UObject
{
public:
	uint8                                        Pad_10F6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x38(0x8)(ZeroConstructor)
	uint8                                        Pad_10F7[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimMetaData*>                 MetaData;                                          // 0x60(0x10)(ZeroConstructor)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x70(0x10)(None)

	static class UClass* StaticClass();
	static class UAnimationAsset* GetDefaultObj();

	void GetPlayLength(float ReturnValue);
};

// 0x30 (0xB0 - 0x80)
// Class Engine.AnimSequenceBase
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>              Notifies;                                          // 0x80(0x10)(ZeroConstructor)
	float                                        SequenceLength;                                    // 0x90(0x4)(None)
	uint8                                        Pad_10F8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawCurveTracks                       RawCurveData;                                      // 0x98(0x10)(None)
	float                                        RateScale;                                         // 0xA8(0x4)(None)
	bool                                         bLoop;                                             // 0xAC(0x1)(None)
	uint8                                        Pad_10F9[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimSequenceBase* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.RawAnimSequenceTrackExtensions
class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class URawAnimSequenceTrackExtensions* GetDefaultObj();

	void GetScaleKeys(const struct FRawAnimSequenceTrack& Track, const TArray<struct FVector>& ReturnValue);
	void GetRotationalKeys(const struct FRawAnimSequenceTrack& Track, const TArray<struct FQuat>& ReturnValue);
	void GetPositionalKeys(const struct FRawAnimSequenceTrack& Track, const TArray<struct FVector>& ReturnValue);
};

// 0x50 (0x78 - 0x28)
// Class Engine.AssetExportTask
class UAssetExportTask : public UObject
{
public:
	class UObject*                               Object;                                            // 0x28(0x8)(ZeroConstructor)
	class UExporter*                             Exporter;                                          // 0x30(0x8)(ZeroConstructor)
	class FString                                Filename;                                          // 0x38(0x10)(None)
	bool                                         bSelected;                                         // 0x48(0x1)(None)
	bool                                         bReplaceIdentical;                                 // 0x49(0x1)(None)
	bool                                         bPrompt;                                           // 0x4A(0x1)(None)
	bool                                         bAutomated;                                        // 0x4B(0x1)(None)
	bool                                         bUseFileArchive;                                   // 0x4C(0x1)(None)
	bool                                         bWriteEmptyFiles;                                  // 0x4D(0x1)(None)
	uint8                                        Pad_10FA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       IgnoreObjectList;                                  // 0x50(0x10)(ZeroConstructor)
	class UObject*                               Options;                                           // 0x60(0x8)(None)
	TArray<class FString>                        Errors;                                            // 0x68(0x10)(None)

	static class UClass* StaticClass();
	static class UAssetExportTask* GetDefaultObj();

};

// 0xC8 (0x100 - 0x38)
// Class Engine.AssetManagerSettings
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>         PrimaryAssetTypesToScan;                           // 0x38(0x10)(None)
	TArray<struct FDirectoryPath>                DirectoriesToExclude;                              // 0x48(0x10)(None)
	TArray<struct FPrimaryAssetRulesOverride>    PrimaryAssetRules;                                 // 0x58(0x10)(None)
	TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules;                           // 0x68(0x10)(None)
	bool                                         bOnlyCookProductionAssets;                         // 0x78(0x1)(None)
	bool                                         bShouldManagerDetermineTypeAndName;                // 0x79(0x1)(None)
	bool                                         bShouldGuessTypeAndNameInEditor;                   // 0x7A(0x1)(None)
	bool                                         bShouldAcquireMissingChunksOnLoad;                 // 0x7B(0x1)(None)
	bool                                         bShouldWarnAboutInvalidAssets;                     // 0x7C(0x1)(None)
	uint8                                        Pad_10FB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAssetManagerRedirect>         PrimaryAssetIdRedirects;                           // 0x80(0x10)(None)
	TArray<struct FAssetManagerRedirect>         PrimaryAssetTypeRedirects;                         // 0x90(0x10)(None)
	TArray<struct FAssetManagerRedirect>         AssetPathRedirects;                                // 0xA0(0x10)(None)
	TSet<class FName>                            MetaDataTagsForAssetRegistry;                      // 0xB0(0x50)(None)

	static class UClass* StaticClass();
	static class UAssetManagerSettings* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.AsyncPhysicsData
class UAsyncPhysicsData : public UObject
{
public:
	int32                                        ServerFrame;                                       // 0x28(0x4)(None)
	int32                                        ReplicationRedundancy;                             // 0x2C(0x4)(None)

	static class UClass* StaticClass();
	static class UAsyncPhysicsData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AudioPanelWidgetInterface
class IAudioPanelWidgetInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAudioPanelWidgetInterface* GetDefaultObj();

	void GetIconBrushName(class FName ReturnValue);
	void GetEditorName(class FText ReturnValue);
};

// 0x18 (0x88 - 0x70)
// Class Engine.BattlEyeChannel
class UBattlEyeChannel : public UChannel
{
public:
	uint8                                        Pad_10FC[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBattlEyeChannel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlendableInterface
class IBlendableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IBlendableInterface* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnalysisProperties
class UAnalysisProperties : public UObject
{
public:
	class FString                                Function;                                          // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UAnalysisProperties* GetDefaultObj();

};

// 0x158 (0x1D8 - 0x80)
// Class Engine.BlendSpace
class UBlendSpace : public UAnimationAsset
{
public:
	uint8                                        Pad_10FD[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bContainsRotationOffsetMeshSpaceSamples;           // 0x88(0x1)(None)
	uint8                                        Pad_10FE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInterpolationParameter               InterpolationParam[0x3];                           // 0x8C(0x30)(None)
	float                                        TargetWeightInterpolationSpeedPerSec;              // 0xBC(0x4)(None)
	bool                                         bTargetWeightInterpolationEaseInOut;               // 0xC0(0x1)(None)
	bool                                         bAllowMeshSpaceBlending;                           // 0xC1(0x1)(None)
	bool                                         bLoop;                                             // 0xC2(0x1)(None)
	uint8                                        Pad_10FF[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnimLength;                                        // 0xC4(0x4)(None)
	enum class ENotifyTriggerMode                NotifyTriggerMode;                                 // 0xC8(0x1)(None)
	bool                                         bInterpolateUsingGrid;                             // 0xC9(0x1)(None)
	enum class EPreferredTriangulationDirection  PreferredTriangulationDirection;                   // 0xCA(0x1)(None)
	enum class EBlendSpacePerBoneBlendMode       PerBoneBlendMode;                                  // 0xCB(0x1)(None)
	uint8                                        Pad_1100[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPerBoneInterpolation>         ManualPerBoneOverrides;                            // 0xD0(0x10)(None)
	struct FBlendSpaceBlendProfile               PerBoneBlendProfile;                               // 0xE0(0x10)(ZeroConstructor)
	uint8                                        Pad_1101[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SampleIndexWithMarkers;                            // 0x100(0x4)(None)
	uint8                                        Pad_1102[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBlendSample>                  SampleData;                                        // 0x108(0x10)(ZeroConstructor)
	TArray<struct FEditorElement>                GridSamples;                                       // 0x118(0x10)(None)
	struct FBlendSpaceData                       BlendSpaceData;                                    // 0x128(0x20)(None)
	struct FBlendParameter                       BlendParameters[0x3];                              // 0x148(0x78)(None)
	enum class EBlendSpaceAxis                   AxisToScaleAnimation;                              // 0x1C0(0x1)(None)
	uint8                                        Pad_1103[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                DimensionIndices;                                  // 0x1C8(0x10)(None)

	static class UClass* StaticClass();
	static class UBlendSpace* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Breakpoint
class UBreakpoint : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBreakpoint* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintExtension
class UBlueprintExtension : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBlueprintExtension* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BookmarkBase
class UBookmarkBase : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBookmarkBase* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.BookMark2D
class UBookMark2D : public UBookmarkBase
{
public:
	float                                        Zoom2D;                                            // 0x28(0x4)(None)
	struct FIntPoint                             Location;                                          // 0x2C(0x8)(None)
	uint8                                        Pad_1104[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBookMark2D* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.ReflectionCapture
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*           CaptureComponent;                                  // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AReflectionCapture* GetDefaultObj();

};

// 0x0 (0x4C0 - 0x4C0)
// Class Engine.BoxReflectionCapture
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass();
	static class ABoxReflectionCapture* GetDefaultObj();

	void GetBoxCaptureComponent(class UBoxReflectionCaptureComponent* ReturnValue);
};

// 0x148 (0x410 - 0x2C8)
// Class Engine.ReflectionCaptureComponent
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                   CaptureOffsetComponent;                            // 0x2C8(0x8)(ZeroConstructor)
	enum class EReflectionSourceType             ReflectionSourceType;                              // 0x2D0(0x1)(None)
	uint8                                        Pad_1105[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x2D8(0x8)(ZeroConstructor)
	float                                        SourceCubemapAngle;                                // 0x2E0(0x4)(None)
	float                                        Brightness;                                        // 0x2E4(0x4)(None)
	struct FVector                               CaptureOffset;                                     // 0x2E8(0x18)(None)
	struct FGuid                                 MapBuildDataId;                                    // 0x300(0x10)(None)
	uint8                                        Pad_1106[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CaptureBrightness;                                 // 0x338(0x4)(None)
	uint8                                        Pad_1107[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AReflectionCapture*                    CaptureParent;                                     // 0x340(0x8)(ZeroConstructor)
	class FName                                  PresistentCaptureParent;                           // 0x348(0x8)(None)
	class UTextureCube*                          AmbientCubemap;                                    // 0x350(0x8)(ZeroConstructor)
	struct FLinearColor                          SkyColor;                                          // 0x358(0x10)(None)
	struct FLinearColor                          GroundColor;                                       // 0x368(0x10)(None)
	float                                        SkyIBLIntensity;                                   // 0x378(0x4)(None)
	float                                        FadeOutDistanceStart;                              // 0x37C(0x4)(None)
	float                                        FadeOutDistanceEnd;                                // 0x380(0x4)(None)
	bool                                         bUseSeperateShadowFadeOut;                         // 0x384(0x1)(None)
	uint8                                        Pad_1108[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShadowFadeOutDistanceStart;                        // 0x388(0x4)(None)
	float                                        ShadowFadeOutDistanceEnd;                          // 0x38C(0x4)(None)
	int32                                        Bounces;                                           // 0x390(0x4)(None)
	uint8                                        Pad_1109[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                BouncesIntensity;                                  // 0x398(0x10)(None)
	float                                        AtmosphericFogIntensity;                           // 0x3A8(0x4)(None)
	float                                        TheTrueSkyBrightness;                              // 0x3AC(0x4)(None)
	struct FVector                               TrueSkyColorMultiplier;                            // 0x3B0(0x18)(None)
	uint8                                        bBakeAndStream : 1;                                // Mask: 0x1, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bUseGlobalBrightness : 1;                          // Mask: 0x2, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bLockCaptureData : 1;                              // Mask: 0x4, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bUseGlobalGroundColorMultiplier : 1;               // Mask: 0x8, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bUseGlobalSkyColorMultiplier : 1;                  // Mask: 0x10, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bUseGlobalSkyIntensityMultiplier : 1;              // Mask: 0x20, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        bUseParentBrightness : 1;                          // Mask: 0x40, PropSize: 0x10x3C8(0x1)(None)
	uint8                                        BitPad_F1 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_110A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ParentBrightnessMultiplier;                        // 0x3CC(0x4)(None)
	float                                        SelfAndChildBrightnessMultiplier;                  // 0x3D0(0x4)(None)
	uint8                                        bUseParentAmbientLightInfo : 1;                    // Mask: 0x1, PropSize: 0x10x3D4(0x1)(None)
	uint8                                        bCaptureAmbientShadow : 1;                         // Mask: 0x2, PropSize: 0x10x3D4(0x1)(None)
	uint8                                        BitPad_F2 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_110B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmbientShadowIntensity;                            // 0x3D8(0x4)(None)
	float                                        AmbientLightInfluence;                             // 0x3DC(0x4)(None)
	float                                        AmbientShadowNear;                                 // 0x3E0(0x4)(None)
	float                                        AmbientShadowFar;                                  // 0x3E4(0x4)(None)
	float                                        AmbientShadowFadeDistanceFraction;                 // 0x3E8(0x4)(None)
	struct FLinearColor                          AmbientTranslucencyColor;                          // 0x3EC(0x10)(None)
	int32                                        AmbientShadowCaptureObjectLayerMask;               // 0x3FC(0x4)(None)
	float                                        AmbientShadowCaptureScale;                         // 0x400(0x4)(None)
	int32                                        MaxAmbientShadowCaptureSize;                       // 0x404(0x4)(None)
	enum class EReflectionDFAOOption             DFAOOption;                                        // 0x408(0x1)(None)
	uint8                                        Pad_110C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReflectionCaptureComponent* GetDefaultObj();

};

// 0x20 (0x430 - 0x410)
// Class Engine.BoxReflectionCaptureComponent
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        BoxTransitionDistance;                             // 0x410(0x4)(None)
	uint8                                        Pad_110D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         PreviewInfluenceBox;                               // 0x418(0x8)(ZeroConstructor)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x420(0x8)(ZeroConstructor)
	uint8                                        Pad_110E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBoxReflectionCaptureComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BuiltInAttributesExtensions
class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBuiltInAttributesExtensions* GetDefaultObj();

};

// 0x7D8 (0x800 - 0x28)
// Class Engine.CameraAnim
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                          CameraInterpGroup;                                 // 0x28(0x8)(ZeroConstructor)
	float                                        AnimLength;                                        // 0x30(0x4)(None)
	uint8                                        Pad_110F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  BoundingBox;                                       // 0x38(0x38)(None)
	uint8                                        bRelativeToInitialTransform : 1;                   // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        bRelativeToInitialFOV : 1;                         // Mask: 0x2, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_F3 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1110[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseFOV;                                           // 0x74(0x4)(None)
	uint8                                        Pad_1111[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  BasePostProcessSettings;                           // 0x80(0x770)(None)
	float                                        BasePostProcessBlendWeight;                        // 0x7F0(0x4)(None)
	uint8                                        Pad_1112[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraAnim* GetDefaultObj();

};

// 0x168 (0x190 - 0x28)
// Class Engine.CameraAnimInst
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                           CamAnim;                                           // 0x28(0x8)(ZeroConstructor)
	class UInterpGroupInst*                      InterpGroupInst;                                   // 0x30(0x8)(ZeroConstructor)
	uint8                                        Pad_1113[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlayRate;                                          // 0x50(0x4)(None)
	uint8                                        Pad_1114[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UInterpTrackMove*                      MoveTrack;                                         // 0x68(0x8)(ZeroConstructor)
	class UInterpTrackInstMove*                  MoveInst;                                          // 0x70(0x8)(None)
	enum class ECameraShakePlaySpace             PlaySpace;                                         // 0x78(0x1)(None)
	uint8                                        Pad_1115[0x117];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraAnimInst* GetDefaultObj();

	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};

// 0x8 (0x1DF0 - 0x1DE8)
// Class Engine.ChildConnection
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                        Parent;                                            // 0x1DE8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UChildConnection* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.PlatformInterfaceBase
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                AllDelegates;                                      // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UPlatformInterfaceBase* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.CloudStorageBase
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<class FString>                        LocalCloudFiles;                                   // 0x38(0x10)(None)
	uint8                                        bSuppressDelegateCalls : 1;                        // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        Pad_1116[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCloudStorageBase* GetDefaultObj();

};

// 0x50 (0x1E38 - 0x1DE8)
// Class Engine.DemoNetConnection
class UDemoNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_1117[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDemoNetConnection* GetDefaultObj();

};

// 0x0 (0xC0 - 0xC0)
// Class Engine.DemoPendingNetGame
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static class UClass* StaticClass();
	static class UDemoPendingNetGame* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.DeviceProfileFragment
class UDeviceProfileFragment : public UObject
{
public:
	TArray<class FString>                        CVars;                                             // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UDeviceProfileFragment* GetDefaultObj();

};

// 0x18 (0x180 - 0x168)
// Class Engine.DialogueSoundWaveProxy
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	uint8                                        Pad_1118[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDialogueSoundWaveProxy* GetDefaultObj();

};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.DirectionalLight
class ADirectionalLight : public ALight
{
public:
	uint8                                        Pad_1119[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADirectionalLight* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.Distribution
class UDistribution : public UObject
{
public:
	uint8                                        Pad_111A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistribution* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionFloat
class UDistributionFloat : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_F4 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_111B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionFloat* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatConstant
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                        Constant;                                          // 0x38(0x4)(None)
	uint8                                        Pad_111C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionFloatConstant* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatConstantCurve
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                     ConstantCurve;                                     // 0x38(0x18)(None)

	static class UClass* StaticClass();
	static class UDistributionFloatConstantCurve* GetDefaultObj();

};

// 0x20 (0x60 - 0x40)
// Class Engine.DistributionFloatParameterBase
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	class FName                                  ParameterName;                                     // 0x40(0x8)(None)
	float                                        MinInput;                                          // 0x48(0x4)(None)
	float                                        MaxInput;                                          // 0x4C(0x4)(None)
	float                                        MinOutput;                                         // 0x50(0x4)(None)
	float                                        MaxOutput;                                         // 0x54(0x4)(None)
	enum class EDistributionParamMode            ParamMode;                                         // 0x58(0x1)(None)
	uint8                                        Pad_111D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionFloatParameterBase* GetDefaultObj();

};

// 0x0 (0x60 - 0x60)
// Class Engine.DistributionFloatParticleParameter
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static class UClass* StaticClass();
	static class UDistributionFloatParticleParameter* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatUniform
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                        Min;                                               // 0x38(0x4)(None)
	float                                        Max;                                               // 0x3C(0x4)(None)

	static class UClass* StaticClass();
	static class UDistributionFloatUniform* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatUniformCurve
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                  ConstantCurve;                                     // 0x38(0x18)(None)

	static class UClass* StaticClass();
	static class UDistributionFloatUniformCurve* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionVector
class UDistributionVector : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        bIsDirty : 1;                                      // Mask: 0x2, PropSize: 0x10x30(0x1)(None)
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_111E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVector* GetDefaultObj();

};

// 0x20 (0x58 - 0x38)
// Class Engine.DistributionVectorConstant
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                               Constant;                                          // 0x38(0x18)(None)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_F5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_111F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(None)
	uint8                                        Pad_1120[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVectorConstant* GetDefaultObj();

};

// 0x20 (0x58 - 0x38)
// Class Engine.DistributionVectorConstantCurve
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                    ConstantCurve;                                     // 0x38(0x18)(None)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_F6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1121[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(None)
	uint8                                        Pad_1122[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVectorConstantCurve* GetDefaultObj();

};

// 0x70 (0xC8 - 0x58)
// Class Engine.DistributionVectorParameterBase
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	class FName                                  ParameterName;                                     // 0x58(0x8)(None)
	struct FVector                               MinInput;                                          // 0x60(0x18)(None)
	struct FVector                               MaxInput;                                          // 0x78(0x18)(None)
	struct FVector                               MinOutput;                                         // 0x90(0x18)(None)
	struct FVector                               MaxOutput;                                         // 0xA8(0x18)(None)
	enum class EDistributionParamMode            ParamModes[0x3];                                   // 0xC0(0x3)(None)
	uint8                                        Pad_1123[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVectorParameterBase* GetDefaultObj();

};

// 0x0 (0xC8 - 0xC8)
// Class Engine.DistributionVectorParticleParameter
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static class UClass* StaticClass();
	static class UDistributionVectorParticleParameter* GetDefaultObj();

};

// 0x40 (0x78 - 0x38)
// Class Engine.DistributionVectorUniform
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                               Max;                                               // 0x38(0x18)(None)
	struct FVector                               Min;                                               // 0x50(0x18)(None)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        BitPad_F7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1124[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x6C(0x1)(None)
	enum class EDistributionVectorMirrorFlags    MirrorFlags[0x3];                                  // 0x6D(0x3)(None)
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        Pad_1125[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVectorUniform* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class Engine.DistributionVectorUniformCurve
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                ConstantCurve;                                     // 0x38(0x18)(None)
	uint8                                        bLockAxes1 : 1;                                    // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        bLockAxes2 : 1;                                    // Mask: 0x2, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_F8 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1126[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes[0x2];                                   // 0x54(0x2)(None)
	enum class EDistributionVectorMirrorFlags    MirrorFlags[0x3];                                  // 0x56(0x3)(None)
	uint8                                        Pad_1127[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x5C(0x1)(None)
	uint8                                        Pad_1128[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDistributionVectorUniformCurve* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.GraphNodeContextMenuContext
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                            Blueprint;                                         // 0x28(0x8)(ZeroConstructor)
	class UEdGraph*                              Graph;                                             // 0x30(0x8)(ZeroConstructor)
	class UEdGraphNode*                          Node;                                              // 0x38(0x8)(None)
	uint8                                        Pad_1129[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsDebugging;                                      // 0x48(0x1)(None)
	uint8                                        Pad_112A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGraphNodeContextMenuContext* GetDefaultObj();

};

// 0xF0 (0x118 - 0x28)
// Class Engine.EdGraphPin_Deprecated
class UEdGraphPin_Deprecated : public UObject
{
public:
	class FString                                PinName;                                           // 0x28(0x10)(None)
	class FString                                PinToolTip;                                        // 0x38(0x10)(None)
	enum class EEdGraphPinDirection              Direction;                                         // 0x48(0x1)(None)
	uint8                                        Pad_112B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FEdGraphPinType                       PinType;                                           // 0x50(0x58)(ZeroConstructor)
	class FString                                DefaultValue;                                      // 0xA8(0x10)(None)
	class FString                                AutogeneratedDefaultValue;                         // 0xB8(0x10)(None)
	class UObject*                               DefaultObject;                                     // 0xC8(0x8)(ZeroConstructor)
	class FText                                  DefaultTextValue;                                  // 0xD0(0x18)(None)
	TArray<class UEdGraphPin_Deprecated*>        LinkedTo;                                          // 0xE8(0x10)(ZeroConstructor)
	TArray<class UEdGraphPin_Deprecated*>        SubPins;                                           // 0xF8(0x10)(ZeroConstructor)
	class UEdGraphPin_Deprecated*                ParentPin;                                         // 0x108(0x8)(ZeroConstructor)
	class UEdGraphPin_Deprecated*                ReferencePassThroughConnection;                    // 0x110(0x8)(None)

	static class UClass* StaticClass();
	static class UEdGraphPin_Deprecated* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.EdGraphSchema
class UEdGraphSchema : public UObject
{
public:

	static class UClass* StaticClass();
	static class UEdGraphSchema* GetDefaultObj();

};

// 0xA0 (0x5B0 - 0x510)
// Class Engine.EmitterCameraLensEffectBase
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	uint8                                        Pad_112C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       PS_CameraEffect;                                   // 0x518(0x8)(ZeroConstructor)
	class APlayerCameraManager*                  BaseCamera;                                        // 0x520(0x8)(ZeroConstructor)
	uint8                                        Pad_112D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RelativeTransform;                                 // 0x530(0x60)(None)
	float                                        BaseFOV;                                           // 0x590(0x4)(None)
	uint8                                        bAllowMultipleInstances : 1;                       // Mask: 0x1, PropSize: 0x10x594(0x1)(None)
	uint8                                        bResetWhenRetriggered : 1;                         // Mask: 0x2, PropSize: 0x10x594(0x1)(None)
	uint8                                        BitPad_F9 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_112E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        EmittersToTreatAsSame;                             // 0x598(0x10)(ZeroConstructor)
	float                                        DistFromCamera;                                    // 0x5A8(0x4)(None)
	uint8                                        Pad_112F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AEmitterCameraLensEffectBase* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ViewModeUtils
class UViewModeUtils : public UObject
{
public:

	static class UClass* StaticClass();
	static class UViewModeUtils* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineBaseTypes
class UEngineBaseTypes : public UObject
{
public:

	static class UClass* StaticClass();
	static class UEngineBaseTypes* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineTypes
class UEngineTypes : public UObject
{
public:

	static class UClass* StaticClass();
	static class UEngineTypes* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.ExponentialHeightFog
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*        Component;                                         // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        Pad_1130[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AExponentialHeightFog* GetDefaultObj();

	void OnRep_bEnabled();
};

// 0xD8 (0x3A0 - 0x2C8)
// Class Engine.ExponentialHeightFogComponent
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                        Priority;                                          // 0x2C8(0x4)(None)
	float                                        FogDensity;                                        // 0x2CC(0x4)(None)
	float                                        FogHeightFalloff;                                  // 0x2D0(0x4)(None)
	struct FExponentialHeightFogData             SecondFogData;                                     // 0x2D4(0xC)(None)
	struct FLinearColor                          FogInscatteringColor;                              // 0x2E0(0x10)(None)
	struct FLinearColor                          FogInscatteringLuminance;                          // 0x2F0(0x10)(None)
	struct FLinearColor                          SkyAtmosphereAmbientContributionColorScale;        // 0x300(0x10)(None)
	class UTextureCube*                          InscatteringColorCubemap;                          // 0x310(0x8)(ZeroConstructor)
	float                                        InscatteringColorCubemapAngle;                     // 0x318(0x4)(None)
	struct FLinearColor                          InscatteringTextureTint;                           // 0x31C(0x10)(None)
	float                                        FullyDirectionalInscatteringColorDistance;         // 0x32C(0x4)(None)
	float                                        NonDirectionalInscatteringColorDistance;           // 0x330(0x4)(None)
	float                                        DirectionalInscatteringExponent;                   // 0x334(0x4)(None)
	float                                        DirectionalInscatteringStartDistance;              // 0x338(0x4)(None)
	struct FLinearColor                          DirectionalInscatteringColor;                      // 0x33C(0x10)(None)
	struct FLinearColor                          DirectionalInscatteringLuminance;                  // 0x34C(0x10)(None)
	float                                        FogMaxOpacity;                                     // 0x35C(0x4)(None)
	float                                        StartDistance;                                     // 0x360(0x4)(None)
	float                                        FogCutoffDistance;                                 // 0x364(0x4)(None)
	bool                                         bEnableVolumetricFog;                              // 0x368(0x1)(None)
	uint8                                        Pad_1131[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricFogScatteringDistribution;               // 0x36C(0x4)(None)
	struct FColor                                VolumetricFogAlbedo;                               // 0x370(0x4)(None)
	struct FLinearColor                          VolumetricFogEmissive;                             // 0x374(0x10)(None)
	float                                        VolumetricFogExtinctionScale;                      // 0x384(0x4)(None)
	float                                        VolumetricFogDistance;                             // 0x388(0x4)(None)
	float                                        VolumetricFogStartDistance;                        // 0x38C(0x4)(None)
	float                                        VolumetricFogNearFadeInDistance;                   // 0x390(0x4)(None)
	float                                        VolumetricFogStaticLightingScatteringIntensity;    // 0x394(0x4)(None)
	bool                                         bOverrideLightColorsWithFogInscatteringColors;     // 0x398(0x1)(None)
	uint8                                        Pad_1132[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UExponentialHeightFogComponent* GetDefaultObj();

	void SetVolumetricFogScatteringDistribution(float NewValue);
	void SetVolumetricFogExtinctionScale(float NewValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue);
	void SetVolumetricFogDistance(float NewValue);
	void SetVolumetricFogAlbedo(const struct FColor& NewValue);
	void SetVolumetricFog(bool bNewValue);
	void SetStartDistance(float Value);
	void SetSecondFogHeightOffset(float Value);
	void SetSecondFogHeightFalloff(float Value);
	void SetSecondFogDensity(float Value);
	void SetSecondFogData(const struct FExponentialHeightFogData& NewValue);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringColorCubemap(class UTextureCube* Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFogCutoffDistance(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};

// 0xB0 (0xD8 - 0x28)
// Class Engine.FontImportOptions
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                Data;                                              // 0x28(0xB0)(None)

	static class UClass* StaticClass();
	static class UFontImportOptions* GetDefaultObj();

};

// 0xC0 (0xE8 - 0x28)
// Class Engine.ForceFeedbackAttenuation
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings     Attenuation;                                       // 0x28(0xC0)(None)

	static class UClass* StaticClass();
	static class UForceFeedbackAttenuation* GetDefaultObj();

};

// 0xB0 (0x568 - 0x4B8)
// Class Engine.GameNetworkManager
class AGameNetworkManager : public AInfo
{
public:
	float                                        BadPacketLossThreshold;                            // 0x4B8(0x4)(None)
	float                                        SeverePacketLossThreshold;                         // 0x4BC(0x4)(None)
	int32                                        BadPingThreshold;                                  // 0x4C0(0x4)(None)
	int32                                        SeverePingThreshold;                               // 0x4C4(0x4)(None)
	int32                                        AdjustedNetSpeed;                                  // 0x4C8(0x4)(None)
	uint8                                        Pad_1133[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastNetSpeedUpdateTime;                            // 0x4D0(0x8)(None)
	int32                                        TotalNetBandwidth;                                 // 0x4D8(0x4)(None)
	int32                                        MinDynamicBandwidth;                               // 0x4DC(0x4)(None)
	int32                                        MaxDynamicBandwidth;                               // 0x4E0(0x4)(None)
	uint8                                        bIsStandbyCheckingEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        bHasStandbyCheatTriggered : 1;                     // Mask: 0x2, PropSize: 0x10x4E4(0x1)(None)
	uint8                                        BitPad_FA : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1134[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StandbyRxCheatTime;                                // 0x4E8(0x4)(None)
	float                                        StandbyTxCheatTime;                                // 0x4EC(0x4)(None)
	float                                        PercentMissingForRxStandby;                        // 0x4F0(0x4)(None)
	float                                        PercentMissingForTxStandby;                        // 0x4F4(0x4)(None)
	float                                        PercentForBadPing;                                 // 0x4F8(0x4)(None)
	float                                        JoinInProgressStandbyWaitTime;                     // 0x4FC(0x4)(None)
	float                                        MoveRepSize;                                       // 0x500(0x4)(None)
	float                                        MAXPOSITIONERRORSQUARED;                           // 0x504(0x4)(None)
	float                                        MAXNEARZEROVELOCITYSQUARED;                        // 0x508(0x4)(None)
	float                                        CLIENTADJUSTUPDATECOST;                            // 0x50C(0x4)(None)
	float                                        MAXCLIENTUPDATEINTERVAL;                           // 0x510(0x4)(None)
	float                                        MaxClientForcedUpdateDuration;                     // 0x514(0x4)(None)
	float                                        ServerForcedUpdateHitchThreshold;                  // 0x518(0x4)(None)
	float                                        ServerForcedUpdateHitchCooldown;                   // 0x51C(0x4)(None)
	float                                        MaxMoveDeltaTime;                                  // 0x520(0x4)(None)
	float                                        MaxClientSmoothingDeltaTime;                       // 0x524(0x4)(None)
	float                                        ClientNetSendMoveDeltaTime;                        // 0x528(0x4)(None)
	float                                        ClientNetSendMoveDeltaTimeThrottled;               // 0x52C(0x4)(None)
	float                                        ClientNetSendMoveDeltaTimeStationary;              // 0x530(0x4)(None)
	int32                                        ClientNetSendMoveThrottleAtNetSpeed;               // 0x534(0x4)(None)
	int32                                        ClientNetSendMoveThrottleOverPlayerCount;          // 0x538(0x4)(None)
	float                                        ClientErrorUpdateRateLimit;                        // 0x53C(0x4)(None)
	float                                        ClientNetCamUpdateDeltaTime;                       // 0x540(0x4)(None)
	float                                        ClientNetCamUpdatePositionLimit;                   // 0x544(0x4)(None)
	bool                                         ClientAuthorativePosition;                         // 0x548(0x1)(None)
	bool                                         bMovementTimeDiscrepancyDetection;                 // 0x549(0x1)(None)
	bool                                         bMovementTimeDiscrepancyResolution;                // 0x54A(0x1)(None)
	uint8                                        Pad_1135[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementTimeDiscrepancyMaxTimeMargin;              // 0x54C(0x4)(None)
	float                                        MovementTimeDiscrepancyMinTimeMargin;              // 0x550(0x4)(None)
	float                                        MovementTimeDiscrepancyResolutionRate;             // 0x554(0x4)(None)
	float                                        MovementTimeDiscrepancyDriftAllowance;             // 0x558(0x4)(None)
	bool                                         bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x55C(0x1)(None)
	bool                                         bUseDistanceBasedRelevancy;                        // 0x55D(0x1)(None)
	uint8                                        Pad_1136[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AGameNetworkManager* GetDefaultObj();

};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.SpotLight
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                   SpotLightComponent;                                // 0x4C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASpotLight* GetDefaultObj();

	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// 0x0 (0x4D0 - 0x4D0)
// Class Engine.GeneratedMeshAreaLight
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static class UClass* StaticClass();
	static class AGeneratedMeshAreaLight* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.HapticFeedbackEffect_Base
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static class UClass* StaticClass();
	static class UHapticFeedbackEffect_Base* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.HapticFeedbackEffect_Buffer
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<uint8>                                Amplitudes;                                        // 0x28(0x10)(None)
	int32                                        SampleRate;                                        // 0x38(0x4)(None)
	uint8                                        Pad_1137[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHapticFeedbackEffect_Buffer* GetDefaultObj();

};

// 0x110 (0x138 - 0x28)
// Class Engine.HapticFeedbackEffect_Curve
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve          HapticDetails;                                     // 0x28(0x110)(None)

	static class UClass* StaticClass();
	static class UHapticFeedbackEffect_Curve* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.HapticFeedbackEffect_SoundWave
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                            SoundWave;                                         // 0x28(0x8)(None)
	bool                                         bUseStereo;                                        // 0x30(0x1)(None)
	uint8                                        Pad_1138[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHapticFeedbackEffect_SoundWave* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationDataController
class IAnimationDataController : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAnimationDataController* GetDefaultObj();

	void UpdateCurveNamesFromSkeleton(class USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
	void SetTransformCurveKeys(const struct FAnimationCurveIdentifier& CurveId, const TArray<struct FTransform>& TransformValues, const TArray<float>& TimeKeys, bool bShouldTransact, bool ReturnValue);
	void SetTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, const struct FTransform& Value, bool bShouldTransact, bool ReturnValue);
	void SetPlayLength(float Length, bool bShouldTransact);
	void SetNumberOfFrames(const struct FFrameNumber& NewLengthInFrames, bool bShouldTransact);
	void SetModel(TScriptInterface<class IAnimationDataModel> InModel);
	void SetFrameRate(const struct FFrameRate& FrameRate, bool bShouldTransact);
	void SetCurveKeys(const struct FAnimationCurveIdentifier& CurveId, const TArray<struct FRichCurveKey>& CurveKeys, bool bShouldTransact, bool ReturnValue);
	void SetCurveKey(const struct FAnimationCurveIdentifier& CurveId, const struct FRichCurveKey& Key, bool bShouldTransact, bool ReturnValue);
	void SetCurveFlags(const struct FAnimationCurveIdentifier& CurveId, int32 Flags, bool bShouldTransact, bool ReturnValue);
	void SetCurveFlag(const struct FAnimationCurveIdentifier& CurveId, enum class EAnimAssetCurveFlags Flag, bool bState, bool bShouldTransact, bool ReturnValue);
	void SetCurveColor(const struct FAnimationCurveIdentifier& CurveId, const struct FLinearColor& Color, bool bShouldTransact, bool ReturnValue);
	void SetBoneTrackKeys(class FName BoneName, const TArray<struct FVector>& PositionalKeys, const TArray<struct FQuat>& RotationalKeys, const TArray<struct FVector>& ScalingKeys, bool bShouldTransact, bool ReturnValue);
	void ScaleCurve(const struct FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact, bool ReturnValue);
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);
	void ResizeNumberOfFrames(const struct FFrameNumber& NewLengthInFrames, const struct FFrameNumber& T0, const struct FFrameNumber& T1, bool bShouldTransact);
	void ResizeInFrames(const struct FFrameNumber& NewLengthInFrames, const struct FFrameNumber& T0, const struct FFrameNumber& T1, bool bShouldTransact);
	void Resize(float Length, float T0, float T1, bool bShouldTransact);
	void RenameCurve(const struct FAnimationCurveIdentifier& CurveToRenameId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact, bool ReturnValue);
	void RemoveTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact, bool ReturnValue);
	void RemoveCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact, bool ReturnValue);
	void RemoveCurve(const struct FAnimationCurveIdentifier& CurveId, bool bShouldTransact, bool ReturnValue);
	void RemoveBoneTrack(class FName BoneName, bool bShouldTransact, bool ReturnValue);
	void RemoveAttributeKey(const struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact, bool ReturnValue);
	void RemoveAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact, bool ReturnValue);
	void RemoveAllCurvesOfType(enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
	void RemoveAllBoneTracks(bool bShouldTransact);
	void RemoveAllAttributesForBone(class FName BoneName, bool bShouldTransact, int32 ReturnValue);
	void RemoveAllAttributes(bool bShouldTransact, int32 ReturnValue);
	void OpenBracket(class FText InTitle, bool bShouldTransact);
	void InsertBoneTrack(class FName BoneName, int32 DesiredIndex, bool bShouldTransact, int32 ReturnValue);
	void GetModelInterface(TScriptInterface<class IAnimationDataModel> ReturnValue);
	void FindOrAddCurveNamesOnSkeleton(class USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);
	void DuplicateCurve(const struct FAnimationCurveIdentifier& CopyCurveId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact, bool ReturnValue);
	void DuplicateAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, const struct FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact, bool ReturnValue);
	void CloseBracket(bool bShouldTransact);
	void AddCurve(const struct FAnimationCurveIdentifier& CurveId, int32 CurveFlags, bool bShouldTransact, bool ReturnValue);
	void AddBoneTrack(class FName BoneName, bool bShouldTransact, int32 ReturnValue);
	void AddBoneCurve(class FName BoneName, bool bShouldTransact, bool ReturnValue);
	void AddAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationDataModel
class IAnimationDataModel : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAnimationDataModel* GetDefaultObj();

	void IsValidBoneTrackName(class FName TrackName, bool ReturnValue);
	void IsValidBoneTrackIndex(int32 TrackIndex, bool ReturnValue);
	void GetPlayLength(double ReturnValue);
	void GetNumBoneTracks(int32 ReturnValue);
	void GetNumberOfTransformCurves(int32 ReturnValue);
	void GetNumberOfKeys(int32 ReturnValue);
	void GetNumberOfFrames(int32 ReturnValue);
	void GetNumberOfFloatCurves(int32 ReturnValue);
	void GetFrameRate(const struct FFrameRate& ReturnValue);
	void GetBoneTrackNames(const TArray<class FName>& OutNames);
	void GetBoneTrackIndexByName(class FName TrackName, int32 ReturnValue);
	void GetBoneTrackIndex(const struct FBoneAnimationTrack& Track, int32 ReturnValue);
	void GetBoneTrackByName(class FName TrackName, const struct FBoneAnimationTrack& ReturnValue);
	void GetBoneTrackByIndex(int32 TrackIndex, const struct FBoneAnimationTrack& ReturnValue);
	void GetBoneAnimationTracks(const TArray<struct FBoneAnimationTrack>& ReturnValue);
	void GetAnimationSequence(class UAnimSequence* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.MultiUseInterface
class IMultiUseInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMultiUseInterface* GetDefaultObj();

};

// 0x28 (0x60 - 0x38)
// Class Engine.InGameAdManager
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	uint8                                        bShouldPauseWhileAdOpen : 1;                       // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_FE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_128D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FDelegateProperty_>                   ClickedBannerDelegates;                            // 0x40(0x10)(ZeroConstructor)
	TArray<FDelegateProperty_>                   ClosedAdDelegates;                                 // 0x50(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UInGameAdManager* GetDefaultObj();

};

// 0x8 (0x510 - 0x508)
// Class Engine.FoliageClippingVolume
class AFoliageClippingVolume : public AVolume
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x508(0x1)(None)
	uint8                                        bIsNPCClippingVolume : 1;                          // Mask: 0x2, PropSize: 0x10x508(0x1)(None)
	uint8                                        Pad_1293[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFoliageClippingVolume* GetDefaultObj();

};

// 0x68 (0x520 - 0x4B8)
// Class Engine.FoliageAttachmentOverrideVolume
class AFoliageAttachmentOverrideVolume : public AInfo
{
public:
	TArray<struct FFoliageAttachmentOverride>    FoliageAttachmentOverrides;                        // 0x4B8(0x10)(ZeroConstructor)
	uint8                                        Pad_1296[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AFoliageAttachmentOverrideVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.FoliageAttachedComponentInterface
class IFoliageAttachedComponentInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IFoliageAttachedComponentInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_ActorSubobject
class IInterface_ActorSubobject : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_ActorSubobject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_AssetUserData
class IInterface_AssetUserData : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_AssetUserData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_AsyncCompilation
class IInterface_AsyncCompilation : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_AsyncCompilation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BoneReferenceSkeletonProvider
class IBoneReferenceSkeletonProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IBoneReferenceSkeletonProvider* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_CollisionDataProvider
class IInterface_CollisionDataProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_CollisionDataProvider* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_PostProcessVolume
class IInterface_PostProcessVolume : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_PostProcessVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_PreviewMeshProvider
class IInterface_PreviewMeshProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IInterface_PreviewMeshProvider* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class Engine.InterpData
class UInterpData : public UObject
{
public:
	float                                        InterpLength;                                      // 0x28(0x4)(None)
	float                                        PathBuildTime;                                     // 0x2C(0x4)(None)
	TArray<class UInterpGroup*>                  InterpGroups;                                      // 0x30(0x10)(ZeroConstructor)
	class UInterpCurveEdSetup*                   CurveEdSetup;                                      // 0x40(0x8)(ZeroConstructor)
	float                                        EdSectionStart;                                    // 0x48(0x4)(None)
	float                                        EdSectionEnd;                                      // 0x4C(0x4)(None)
	uint8                                        bShouldBakeAndPrune : 1;                           // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_FF : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_12CF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInterpGroupDirector*                  CachedDirectorGroup;                               // 0x58(0x8)(None)
	TArray<class FName>                          AllEventNames;                                     // 0x60(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpData* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpFilter
class UInterpFilter : public UObject
{
public:
	class FString                                Caption;                                           // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpFilter* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class Engine.InterpFilter_Classes
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static class UClass* StaticClass();
	static class UInterpFilter_Classes* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class Engine.InterpFilter_Custom
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static class UClass* StaticClass();
	static class UInterpFilter_Custom* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.InterpGroup
class UInterpGroup : public UObject
{
public:
	uint8                                        Pad_130E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpTrack*>                  InterpTracks;                                      // 0x30(0x10)(None)
	class FName                                  GroupName;                                         // 0x40(0x8)(None)
	struct FColor                                GroupColor;                                        // 0x48(0x4)(None)
	uint8                                        bCollapsed : 1;                                    // Mask: 0x1, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bVisible : 1;                                      // Mask: 0x2, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bIsFolder : 1;                                     // Mask: 0x4, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bIsParented : 1;                                   // Mask: 0x8, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bIsSelected : 1;                                   // Mask: 0x10, PropSize: 0x10x4C(0x1)(None)
	uint8                                        Pad_1322[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpGroup* GetDefaultObj();

};

// 0x10 (0x60 - 0x50)
// Class Engine.InterpGroupCamera
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                           CameraAnimInst;                                    // 0x50(0x8)(ZeroConstructor)
	float                                        CompressTolerance;                                 // 0x58(0x4)(None)
	uint8                                        Pad_1327[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpGroupCamera* GetDefaultObj();

};

// 0x0 (0x50 - 0x50)
// Class Engine.InterpGroupDirector
class UInterpGroupDirector : public UInterpGroup
{
public:

	static class UClass* StaticClass();
	static class UInterpGroupDirector* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.InterpGroupInst
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                          Group;                                             // 0x28(0x8)(ZeroConstructor)
	class AActor*                                GroupActor;                                        // 0x30(0x8)(ZeroConstructor)
	TArray<class UInterpTrackInst*>              TrackInst;                                         // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpGroupInst* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class Engine.InterpGroupInstCamera
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static class UClass* StaticClass();
	static class UInterpGroupInstCamera* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class Engine.InterpGroupInstDirector
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static class UClass* StaticClass();
	static class UInterpGroupInstDirector* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class Engine.InterpTrack
class UInterpTrack : public UObject
{
public:
	uint8                                        Pad_1333[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpTrack*>                  SubTracks;                                         // 0x38(0x10)(ZeroConstructor)
	class UClass*                                TrackInstClass;                                    // 0x48(0x8)(None)
	enum class ETrackActiveCondition             ActiveCondition;                                   // 0x50(0x1)(None)
	uint8                                        Pad_1334[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TrackTitle;                                        // 0x58(0x10)(None)
	uint8                                        bOnePerGroup : 1;                                  // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        bDirGroupOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x68(0x1)(None)
	uint8                                        bDisableTrack : 1;                                 // Mask: 0x4, PropSize: 0x10x68(0x1)(None)
	uint8                                        bIsSelected : 1;                                   // Mask: 0x8, PropSize: 0x10x68(0x1)(None)
	uint8                                        bIsAnimControlTrack : 1;                           // Mask: 0x10, PropSize: 0x10x68(0x1)(None)
	uint8                                        bSubTrackOnly : 1;                                 // Mask: 0x20, PropSize: 0x10x68(0x1)(None)
	uint8                                        bVisible : 1;                                      // Mask: 0x40, PropSize: 0x10x68(0x1)(None)
	uint8                                        bIsRecording : 1;                                  // Mask: 0x80, PropSize: 0x10x68(0x1)(None)
	uint8                                        Pad_1338[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrack* GetDefaultObj();

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackFloatBase
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                     FloatTrack;                                        // 0x70(0x18)(None)
	float                                        CurveTension;                                      // 0x88(0x4)(None)
	uint8                                        Pad_133F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackFloatBase* GetDefaultObj();

};

// 0x20 (0xB0 - 0x90)
// Class Engine.InterpTrackAnimControl
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	class FName                                  SlotName;                                          // 0x90(0x8)(None)
	TArray<struct FAnimControlTrackKey>          AnimSeqs;                                          // 0x98(0x10)(ZeroConstructor)
	uint8                                        bSkipAnimNotifiers : 1;                            // Mask: 0x1, PropSize: 0x10xA8(0x1)(None)
	uint8                                        Pad_1343[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackAnimControl* GetDefaultObj();

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackVectorBase
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                    VectorTrack;                                       // 0x70(0x18)(None)
	float                                        CurveTension;                                      // 0x88(0x4)(None)
	uint8                                        Pad_134B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackVectorBase* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackAudioMaster
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackAudioMaster* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackBoolProp
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                 BoolTrack;                                         // 0x70(0x10)(None)
	class FName                                  PropertyName;                                      // 0x80(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackBoolProp* GetDefaultObj();

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackColorProp
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackColorProp* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackColorScale
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackColorScale* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackDirector
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>             CutTrack;                                          // 0x70(0x10)(None)
	uint8                                        bSimulateCameraCutsOnClients : 1;                  // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        Pad_1357[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackDirector* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackEvent
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                EventTrack;                                        // 0x70(0x10)(None)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x4, PropSize: 0x10x80(0x1)(None)
	uint8                                        bUseCustomEventName : 1;                           // Mask: 0x8, PropSize: 0x10x80(0x1)(None)
	uint8                                        Pad_135A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackEvent* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackFade
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	uint8                                        bPersistFade : 1;                                  // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        bFadeAudio : 1;                                    // Mask: 0x2, PropSize: 0x10x90(0x1)(None)
	uint8                                        BitPad_101 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_135E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          FadeColor;                                         // 0x94(0x10)(None)
	uint8                                        Pad_135F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackFade* GetDefaultObj();

};

// 0x20 (0xB0 - 0x90)
// Class Engine.InterpTrackFloatAnimBPParam
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UClass*                                AnimBlueprintClass;                                // 0x90(0x8)(ZeroConstructor)
	class UClass*                                AnimClass;                                         // 0x98(0x8)(ZeroConstructor)
	class FName                                  ParamName;                                         // 0xA0(0x8)(None)
	uint8                                        Pad_1360[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackFloatAnimBPParam* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackFloatMaterialParam
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>            TargetMaterials;                                   // 0x90(0x10)(ZeroConstructor)
	class FName                                  ParamName;                                         // 0xA0(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackFloatMaterialParam* GetDefaultObj();

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackFloatParticleParam
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	class FName                                  ParamName;                                         // 0x90(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackFloatParticleParam* GetDefaultObj();

};

// 0x10 (0xA0 - 0x90)
// Class Engine.InterpTrackFloatProp
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(None)
	enum class ETrackInterpMode                  InterpMode;                                        // 0x98(0x1)(None)
	uint8                                        Pad_1369[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackFloatProp* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInst
class UInterpTrackInst : public UObject
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackInst* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstAnimControl
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(None)
	uint8                                        Pad_136B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstAnimControl* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstAudioMaster
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackInstAudioMaster* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.InterpTrackInstProperty
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	FFieldPathProperty_                          InterpProperty;                                    // 0x28(0x20)(ZeroConstructor)
	class UObject*                               PropertyOuterObjectInst;                           // 0x48(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstProperty* GetDefaultObj();

};

// 0x18 (0x68 - 0x50)
// Class Engine.InterpTrackInstBoolProp
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_136F[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         ResetBool;                                         // 0x60(0x1)(None)
	uint8                                        Pad_1370[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstBoolProp* GetDefaultObj();

};

// 0x10 (0x60 - 0x50)
// Class Engine.InterpTrackInstColorProp
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_1372[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ResetColor;                                        // 0x58(0x4)(None)
	uint8                                        Pad_1373[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstColorProp* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstColorScale
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackInstColorScale* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstDirector
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                OldViewTarget;                                     // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstDirector* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstEvent
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(None)
	uint8                                        Pad_137E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstEvent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstFade
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackInstFade* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpTrackInstFloatAnimBPParam
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                         AnimScriptInstance;                                // 0x28(0x8)(None)
	float                                        ResetFloat;                                        // 0x30(0x4)(None)
	uint8                                        Pad_1380[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstFloatAnimBPParam* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class Engine.InterpTrackInstFloatMaterialParam
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>      MaterialInstances;                                 // 0x28(0x10)(ZeroConstructor)
	TArray<float>                                ResetFloats;                                       // 0x38(0x10)(None)
	TArray<struct FPrimitiveMaterialRef>         PrimitiveMaterialRefs;                             // 0x48(0x10)(ZeroConstructor)
	class UInterpTrackFloatMaterialParam*        InstancedTrack;                                    // 0x58(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstFloatMaterialParam* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstFloatParticleParam
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                        ResetFloat;                                        // 0x28(0x4)(None)
	uint8                                        Pad_1383[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstFloatParticleParam* GetDefaultObj();

};

// 0x10 (0x60 - 0x50)
// Class Engine.InterpTrackInstFloatProp
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_1385[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResetFloat;                                        // 0x58(0x4)(None)
	uint8                                        Pad_1386[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstFloatProp* GetDefaultObj();

};

// 0x18 (0x68 - 0x50)
// Class Engine.InterpTrackInstLinearColorProp
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_1387[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          ResetColor;                                        // 0x58(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstLinearColorProp* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class Engine.InterpTrackInstMove
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                               ResetLocation;                                     // 0x28(0x18)(None)
	struct FRotator                              ResetRotation;                                     // 0x40(0x18)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstMove* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstParticleReplay
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(None)
	uint8                                        Pad_1395[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstParticleReplay* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstSlomo
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                        OldTimeDilation;                                   // 0x28(0x4)(None)
	uint8                                        Pad_1399[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstSlomo* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpTrackInstSound
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(None)
	uint8                                        Pad_139D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioComponent*                       PlayAudioComp;                                     // 0x30(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstSound* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpTrackInstToggle
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	enum class ETrackToggleAction                Action;                                            // 0x28(0x1)(None)
	uint8                                        Pad_13A2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastUpdatePosition;                                // 0x2C(0x4)(None)
	uint8                                        bSavedActiveState : 1;                             // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_13A4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackInstToggle* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class Engine.InterpTrackInstVectorMaterialParam
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>      MaterialInstances;                                 // 0x28(0x10)(ZeroConstructor)
	TArray<struct FVector>                       ResetVectors;                                      // 0x38(0x10)(None)
	TArray<struct FPrimitiveMaterialRef>         PrimitiveMaterialRefs;                             // 0x48(0x10)(ZeroConstructor)
	class UInterpTrackVectorMaterialParam*       InstancedTrack;                                    // 0x58(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstVectorMaterialParam* GetDefaultObj();

};

// 0x20 (0x70 - 0x50)
// Class Engine.InterpTrackInstVectorProp
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13A8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ResetVector;                                       // 0x58(0x18)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstVectorProp* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstVisibility
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	enum class EVisibilityTrackAction            Action;                                            // 0x28(0x1)(None)
	uint8                                        Pad_13AB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastUpdatePosition;                                // 0x2C(0x4)(None)

	static class UClass* StaticClass();
	static class UInterpTrackInstVisibility* GetDefaultObj();

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackLinearColorBase
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor               LinearColorTrack;                                  // 0x70(0x18)(None)
	float                                        CurveTension;                                      // 0x88(0x4)(None)
	uint8                                        Pad_13AD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackLinearColorBase* GetDefaultObj();

};

// 0x10 (0xA0 - 0x90)
// Class Engine.InterpTrackLinearColorProp
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(None)
	enum class ETrackInterpMode                  InterpMode;                                        // 0x98(0x1)(None)
	uint8                                        Pad_13B0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackLinearColorProp* GetDefaultObj();

};

// 0x58 (0xC8 - 0x70)
// Class Engine.InterpTrackMove
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                    PosTrack;                                          // 0x70(0x18)(None)
	struct FInterpCurveVector                    EulerTrack;                                        // 0x88(0x18)(None)
	struct FInterpLookupTrack                    LookupTrack;                                       // 0xA0(0x10)(None)
	class FName                                  LookAtGroupName;                                   // 0xB0(0x8)(None)
	float                                        LinCurveTension;                                   // 0xB8(0x4)(None)
	float                                        AngCurveTension;                                   // 0xBC(0x4)(None)
	uint8                                        bUseQuatInterpolation : 1;                         // Mask: 0x1, PropSize: 0x10xC0(0x1)(None)
	uint8                                        bShowArrowAtKeys : 1;                              // Mask: 0x2, PropSize: 0x10xC0(0x1)(None)
	uint8                                        bDisableMovement : 1;                              // Mask: 0x4, PropSize: 0x10xC0(0x1)(None)
	uint8                                        bShowTranslationOnCurveEd : 1;                     // Mask: 0x8, PropSize: 0x10xC0(0x1)(None)
	uint8                                        bShowRotationOnCurveEd : 1;                        // Mask: 0x10, PropSize: 0x10xC0(0x1)(None)
	uint8                                        bHide3DTrack : 1;                                  // Mask: 0x20, PropSize: 0x10xC0(0x1)(None)
	uint8                                        BitPad_102 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13B4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EInterpTrackMoveRotMode           RotMode;                                           // 0xC4(0x1)(None)
	uint8                                        Pad_13B5[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackMove* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackMoveAxis
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	enum class EInterpMoveAxis                   MoveAxis;                                          // 0x90(0x1)(None)
	uint8                                        Pad_13B6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInterpLookupTrack                    LookupTrack;                                       // 0x98(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpTrackMoveAxis* GetDefaultObj();

};

// 0x10 (0x80 - 0x70)
// Class Engine.InterpTrackParticleReplay
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>       TrackKeys;                                         // 0x70(0x10)(None)

	static class UClass* StaticClass();
	static class UInterpTrackParticleReplay* GetDefaultObj();

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackSlomo
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static class UClass* StaticClass();
	static class UInterpTrackSlomo* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackSound
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                Sounds;                                            // 0x90(0x10)(ZeroConstructor)
	uint8                                        bPlayOnReverse : 1;                                // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bContinueSoundOnMatineeEnd : 1;                    // Mask: 0x2, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bSuppressSubtitles : 1;                            // Mask: 0x4, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bTreatAsDialogue : 1;                              // Mask: 0x8, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bAttach : 1;                                       // Mask: 0x10, PropSize: 0x10xA0(0x1)(None)
	uint8                                        Pad_13B8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackSound* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackToggle
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>               ToggleTrack;                                       // 0x70(0x10)(None)
	uint8                                        bActivateSystemEachUpdate : 1;                     // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        bActivateWithJustAttachedFlag : 1;                 // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x4, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x8, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x10, PropSize: 0x10x80(0x1)(None)
	uint8                                        Pad_13BB[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackToggle* GetDefaultObj();

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackVectorMaterialParam
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>            TargetMaterials;                                   // 0x90(0x10)(ZeroConstructor)
	class FName                                  ParamName;                                         // 0xA0(0x8)(None)

	static class UClass* StaticClass();
	static class UInterpTrackVectorMaterialParam* GetDefaultObj();

};

// 0x10 (0xA0 - 0x90)
// Class Engine.InterpTrackVectorProp
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(None)
	enum class ETrackInterpMode                  InterpMode;                                        // 0x98(0x1)(None)
	uint8                                        Pad_13BD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackVectorProp* GetDefaultObj();

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackVisibility
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>           VisibilityTrack;                                   // 0x70(0x10)(None)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x4, PropSize: 0x10x80(0x1)(None)
	uint8                                        Pad_13BF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpTrackVisibility* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsComponent
class IPhysicsComponent : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPhysicsComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SaveGameInterface
class ISaveGameInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISaveGameInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ISMPartitionInstanceManager
class IISMPartitionInstanceManager : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IISMPartitionInstanceManager* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ISMPartitionInstanceManagerProvider
class IISMPartitionInstanceManagerProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IISMPartitionInstanceManagerProvider* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetTextLibrary
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetTextLibrary* GetDefaultObj();

	void TextTrimTrailing(class FText InText, class FText ReturnValue);
	void TextTrimPrecedingAndTrailing(class FText InText, class FText ReturnValue);
	void TextTrimPreceding(class FText InText, class FText ReturnValue);
	void TextToUpper(class FText InText, class FText ReturnValue);
	void TextToLower(class FText InText, class FText ReturnValue);
	void TextIsTransient(class FText InText, bool ReturnValue);
	void TextIsFromStringTable(class FText Text, bool ReturnValue);
	void TextIsEmpty(class FText InText, bool ReturnValue);
	void TextIsCultureInvariant(class FText InText, bool ReturnValue);
	void TextFromStringTable(class FName TableId, const class FString& Key, class FText ReturnValue);
	void StringTableIdAndKeyFromText(class FText Text, class FName OutTableId, const class FString& OutKey, bool ReturnValue);
	void PolyglotDataToText(const struct FPolyglotTextData& PolyglotData, class FText ReturnValue);
	void NotEqual_TextText(class FText A, class FText B, bool ReturnValue);
	void NotEqual_IgnoreCase_TextText(class FText A, class FText B, bool ReturnValue);
	void IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool IsValid, class FText ErrorMessage);
	void GetEmptyText(class FText ReturnValue);
	void Format(class FText InPattern, const TArray<struct FFormatArgumentData>& InArgs, class FText ReturnValue);
	void FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, class FText OutText, bool ReturnValue);
	void EqualEqual_TextText(class FText A, class FText B, bool ReturnValue);
	void EqualEqual_IgnoreCase_TextText(class FText A, class FText B, bool ReturnValue);
	void Conv_VectorToText(const struct FVector& InVec, class FText ReturnValue);
	void Conv_Vector2dToText(const struct FVector2D& InVec, class FText ReturnValue);
	void Conv_TransformToText(const struct FTransform& InTrans, class FText ReturnValue);
	void Conv_TextToString(class FText InText, const class FString& ReturnValue);
	void Conv_StringToText(const class FString& InString, class FText ReturnValue);
	void Conv_RotatorToText(const struct FRotator& InRot, class FText ReturnValue);
	void Conv_ObjectToText(class UObject* InObj, class FText ReturnValue);
	void Conv_NameToText(class FName InName, class FText ReturnValue);
	void Conv_IntToText(int32 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, class FText ReturnValue);
	void Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, class FText ReturnValue);
	void Conv_DoubleToText(double Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, class FText ReturnValue);
	void Conv_ColorToText(const struct FLinearColor& InColor, class FText ReturnValue);
	void Conv_ByteToText(uint8 Value, class FText ReturnValue);
	void Conv_BoolToText(bool InBool, class FText ReturnValue);
	void AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone, class FText ReturnValue);
	void AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone, class FText ReturnValue);
	void AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone, class FText ReturnValue);
	void AsTimespan_Timespan(const struct FTimespan& InTimespan, class FText ReturnValue);
	void AsTime_DateTime(const struct FDateTime& In, class FText ReturnValue);
	void AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, class FText ReturnValue);
	void AsDateTime_DateTime(const struct FDateTime& In, class FText ReturnValue);
	void AsDate_DateTime(const struct FDateTime& InDateTime, class FText ReturnValue);
	void AsCurrencyBase(int32 BaseValue, const class FString& CurrencyCode, class FText ReturnValue);
	void AsCurrency_Integer(int32 Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode, class FText ReturnValue);
	void AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode, class FText ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceEditorPivotInterface
class ILevelInstanceEditorPivotInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILevelInstanceEditorPivotInterface* GetDefaultObj();

};

// 0x190 (0x1B8 - 0x28)
// Class Engine.LevelStreaming
class ULevelStreaming : public UObject
{
public:
	TSoftObjectPtr<class UWorld>                 WorldAsset;                                        // 0x28(0x30)(ZeroConstructor)
	int32                                        StreamingPriority;                                 // 0x58(0x4)(None)
	uint8                                        bLevelStreamingVisibilityOnly : 1;                 // Mask: 0x1, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bLevelStreamingDesiredVisibility : 1;              // Mask: 0x2, PropSize: 0x10x5C(0x1)(None)
	uint8                                        BitPad_10C : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15D2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  PackageNameToLoad;                                 // 0x60(0x8)(None)
	TArray<class FName>                          LODPackageNames;                                   // 0x68(0x10)(None)
	uint8                                        Pad_15D3[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            LevelTransform;                                    // 0x90(0x60)(None)
	bool                                         bClientOnlyVisible;                                // 0xF0(0x1)(None)
	uint8                                        Pad_15D4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LevelLODIndex;                                     // 0xF4(0x4)(None)
	uint8                                        BitPad_10D : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bShouldBeVisible : 1;                              // Mask: 0x8, PropSize: 0x10xF8(0x1)(None)
	uint8                                        bShouldBeLoaded : 1;                               // Mask: 0x10, PropSize: 0x10xF8(0x1)(None)
	uint8                                        BitPad_10E : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15D6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bLocked : 1;                                       // Mask: 0x1, PropSize: 0x10xFB(0x1)(None)
	uint8                                        bIsStatic : 1;                                     // Mask: 0x2, PropSize: 0x10xFB(0x1)(None)
	uint8                                        bShouldBlockOnLoad : 1;                            // Mask: 0x4, PropSize: 0x10xFB(0x1)(None)
	uint8                                        bShouldBlockOnUnload : 1;                          // Mask: 0x8, PropSize: 0x10xFB(0x1)(None)
	uint8                                        bDisableDistanceStreaming : 1;                     // Mask: 0x10, PropSize: 0x10xFB(0x1)(None)
	uint8                                        bDrawOnLevelStatusMap : 1;                         // Mask: 0x20, PropSize: 0x10xFB(0x1)(None)
	uint8                                        BitPad_10F : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FLinearColor                          LevelColor;                                        // 0xFC(0x10)(None)
	uint8                                        Pad_15DB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ALevelStreamingVolume*>         EditorStreamingVolumes;                            // 0x110(0x10)(ZeroConstructor)
	float                                        MinTimeBetweenVolumeUnloadRequests;                // 0x120(0x4)(None)
	uint8                                        Pad_15DD[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnLevelLoaded;                                     // 0x130(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnLevelUnloaded;                                   // 0x140(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnLevelShown;                                      // 0x150(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnLevelHidden;                                     // 0x160(0x10)(ZeroConstructor)
	bool                                         bEnableTileStreaming;                              // 0x170(0x1)(None)
	uint8                                        Pad_15DF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                LoadedLevel;                                       // 0x178(0x8)(ZeroConstructor)
	class ULevel*                                PendingUnloadLevel;                                // 0x180(0x8)(None)
	uint8                                        Pad_15E0[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreaming* GetDefaultObj();

	void ShouldBeLoaded(bool ReturnValue);
	void SetShouldBeVisible(bool bInShouldBeVisible);
	void SetShouldBeLoaded(bool bInShouldBeLoaded);
	void SetPriority(int32 NewPriority);
	void SetLevelLODIndex(int32 LODIndex);
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);
	void IsStreamingStatePending(bool ReturnValue);
	void IsLevelVisible(bool ReturnValue);
	void IsLevelLoaded(bool ReturnValue);
	void GetWorldAssetPackageFName(class FName ReturnValue);
	void GetLoadedLevel(class ULevel* ReturnValue);
	void GetLevelScriptActor(class ALevelScriptActor* ReturnValue);
	void GetIsRequestingUnloadAndRemoval(bool ReturnValue);
	void CreateInstance(const class FString& UniqueInstanceName, class ULevelStreaming* ReturnValue);
	void BPSetLevelVisibility(bool bVisible, bool bIsLowMemory);
	void BPGetPackageName(const class FString& ReturnValue);
};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.LevelStreamingAlwaysLoaded
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	uint8                                        Pad_15E3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreamingAlwaysLoaded* GetDefaultObj();

};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.LevelStreamingDynamic
class ULevelStreamingDynamic : public ULevelStreaming
{
public:
	uint8                                        bInitiallyLoaded : 1;                              // Mask: 0x1, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        bInitiallyVisible : 1;                             // Mask: 0x2, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        Pad_15EF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreamingDynamic* GetDefaultObj();

	void LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, const struct FVector& Location, const struct FRotator& Rotation, bool bOutSuccess, const class FString& OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage, class ULevelStreamingDynamic* ReturnValue);
	void LoadLevelInstance(class UObject* WorldContextObject, const class FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool bOutSuccess, const class FString& OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage, class ULevelStreamingDynamic* ReturnValue);
};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.LevelStreamingPersistent
class ULevelStreamingPersistent : public ULevelStreaming
{
public:
	uint8                                        Pad_15F1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreamingPersistent* GetDefaultObj();

};

// 0x18 (0x520 - 0x508)
// Class Engine.LevelStreamingVolume
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class FName>                          StreamingLevelNames;                               // 0x508(0x10)(None)
	uint8                                        bEditorPreVisOnly : 1;                             // Mask: 0x1, PropSize: 0x10x518(0x1)(None)
	uint8                                        bDisabled : 1;                                     // Mask: 0x2, PropSize: 0x10x518(0x1)(None)
	uint8                                        BitPad_111 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15F7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingVolumeUsage             StreamingUsage;                                    // 0x51C(0x1)(None)
	uint8                                        Pad_15F8[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALevelStreamingVolume* GetDefaultObj();

};

// 0x78 (0x580 - 0x508)
// Class Engine.TileStreamingVolume
class ATileStreamingVolume : public AVolume
{
public:
	TArray<class FName>                          StreamingLevelNames;                               // 0x508(0x10)(None)
	TArray<class FName>                          ExcludeLevelNames;                                 // 0x518(0x10)(None)
	uint8                                        Pad_15FB[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisabled : 1;                                     // Mask: 0x1, PropSize: 0x10x578(0x1)(None)
	uint8                                        bAllowOnlySpecifiedLevels : 1;                     // Mask: 0x2, PropSize: 0x10x578(0x1)(None)
	uint8                                        bForceDoNotTriggerBlockLoading : 1;                // Mask: 0x4, PropSize: 0x10x578(0x1)(None)
	uint8                                        bHideOtherLevels : 1;                              // Mask: 0x8, PropSize: 0x10x578(0x1)(None)
	uint8                                        bBlockOnLoading : 1;                               // Mask: 0x10, PropSize: 0x10x578(0x1)(None)
	uint8                                        bEnableUpdatesWorldComp : 1;                       // Mask: 0x20, PropSize: 0x10x578(0x1)(None)
	uint8                                        bDestroyContainedPawnsOnStartup : 1;               // Mask: 0x40, PropSize: 0x10x578(0x1)(None)
	uint8                                        bForceLevelsAsDistanceStreamingEnabled : 1;        // Mask: 0x80, PropSize: 0x10x578(0x1)(None)
	uint8                                        Pad_15FD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATileStreamingVolume* GetDefaultObj();

	void OnInterpToggle(bool bEnable);
	void DoToggle(bool bEnable);
};

// 0x58 (0x320 - 0x2C8)
// Class Engine.LightComponentBase
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                 LightGuid;                                         // 0x2C8(0x10)(None)
	float                                        Brightness;                                        // 0x2D8(0x4)(None)
	float                                        Intensity;                                         // 0x2DC(0x4)(None)
	float                                        IntensityScale;                                    // 0x2E0(0x4)(None)
	struct FLinearColor                          ColorIntensity;                                    // 0x2E4(0x10)(None)
	struct FColor                                LightColor;                                        // 0x2F4(0x4)(None)
	uint8                                        bAffectsWorld : 1;                                 // Mask: 0x1, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        CastShadows : 1;                                   // Mask: 0x2, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        CastStaticShadows : 1;                             // Mask: 0x4, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        CastDynamicShadows : 1;                            // Mask: 0x8, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bAffectTranslucentLighting : 1;                    // Mask: 0x10, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bTransmission : 1;                                 // Mask: 0x20, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bCastVolumetricShadow : 1;                         // Mask: 0x40, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bCastDeepShadow : 1;                               // Mask: 0x80, PropSize: 0x10x2F8(0x1)(None)
	uint8                                        bCastRaytracedShadow : 1;                          // Mask: 0x1, PropSize: 0x10x2F9(0x1)(None)
	uint8                                        BitPad_112 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_160A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECastRayTracedShadow              CastRaytracedShadow;                               // 0x2FC(0x1)(None)
	uint8                                        Pad_160B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAffectReflection : 1;                             // Mask: 0x1, PropSize: 0x10x300(0x1)(None)
	uint8                                        bAffectGlobalIllumination : 1;                     // Mask: 0x2, PropSize: 0x10x300(0x1)(None)
	uint8                                        bSupportSampledLighting : 1;                       // Mask: 0x4, PropSize: 0x10x300(0x1)(None)
	uint8                                        BitPad_113 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_160C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DeepShadowLayerDistribution;                       // 0x304(0x4)(None)
	float                                        IndirectLightingIntensity;                         // 0x308(0x4)(None)
	float                                        VolumetricScatteringIntensity;                     // 0x30C(0x4)(None)
	int32                                        SamplesPerPixel;                                   // 0x310(0x4)(None)
	int32                                        ObjectLayerMask;                                   // 0x314(0x4)(None)
	uint8                                        UseBlackLightBuffer : 1;                           // Mask: 0x1, PropSize: 0x10x318(0x1)(None)
	uint8                                        AlwaysProjectShadows : 1;                          // Mask: 0x2, PropSize: 0x10x318(0x1)(None)
	uint8                                        UseAmbientLightInfo : 1;                           // Mask: 0x4, PropSize: 0x10x318(0x1)(None)
	uint8                                        UseSpotLightInfo : 1;                              // Mask: 0x8, PropSize: 0x10x318(0x1)(None)
	uint8                                        Pad_160D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULightComponentBase* GetDefaultObj();

	void SetSupportSampledLighting(bool bNewValue);
	void SetSamplesPerPixel(int32 NewValue);
	void SetCastVolumetricShadow(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetCastRaytracedShadows(enum class ECastRayTracedShadow bNewValue);
	void SetCastRaytracedShadow(bool bNewValue);
	void SetCastDeepShadow(bool bNewValue);
	void SetAffectReflection(bool bNewValue);
	void SetAffectGlobalIllumination(bool bNewValue);
	void GetLightColor(const struct FLinearColor& ReturnValue);
};

// 0xB0 (0x288 - 0x1D8)
// Class Engine.Texture2D
class UTexture2D : public UTexture
{
public:
	int32                                        FirstResourceMemMip;                               // 0x1D8(0x4)(None)
	uint8                                        bTemporarilyDisableStreaming : 1;                  // Mask: 0x1, PropSize: 0x10x1DC(0x1)(None)
	uint8                                        BitPad_114 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureAddress                   AddressX;                                          // 0x1DD(0x1)(None)
	enum class ETextureAddress                   AddressY;                                          // 0x1DE(0x1)(None)
	uint8                                        Pad_161B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FIntPoint                             ImportedSize;                                      // 0x1E0(0x8)(None)
	uint8                                        Pad_161C[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTexture2D* GetDefaultObj();

	void Blueprint_GetSizeY(int32 ReturnValue);
	void Blueprint_GetSizeX(int32 ReturnValue);
};

// 0x8 (0x290 - 0x288)
// Class Engine.LightMapTexture2D
class ULightMapTexture2D : public UTexture2D
{
public:
	uint8                                        Pad_161F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULightMapTexture2D* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.LightmassPortal
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*             PortalComponent;                                   // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ALightmassPortal* GetDefaultObj();

};

// 0x8 (0x2D0 - 0x2C8)
// Class Engine.LightmassPortalComponent
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x2C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ULightmassPortalComponent* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.LocalSkyLightOverride
class ALocalSkyLightOverride : public AInfo
{
public:
	class ULocalSkyLightOverrideComponent*       LocalSkyLightComponent;                            // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        Pad_1626[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALocalSkyLightOverride* GetDefaultObj();

	void OnRep_bEnabled();
};

// 0x118 (0x3E0 - 0x2C8)
// Class Engine.LocalSkyLightOverrideComponent
class ULocalSkyLightOverrideComponent : public USceneComponent
{
public:
	bool                                         bUseBoxInfluenceShape;                             // 0x2C8(0x1)(None)
	uint8                                        Pad_162E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlendDistance;                                     // 0x2CC(0x4)(None)
	struct FVector                               CaptureOffset;                                     // 0x2D0(0x18)(None)
	int32                                        CubemapResolution;                                 // 0x2E8(0x4)(None)
	struct FLinearColor                          CaptureColor;                                      // 0x2EC(0x10)(None)
	float                                        CaptureColorIntensity;                             // 0x2FC(0x4)(None)
	float                                        SkyDistanceThreshold;                              // 0x300(0x4)(None)
	bool                                         bCaptureEmissiveOnly;                              // 0x304(0x1)(None)
	bool                                         bLowerHemisphereIsBlack;                           // 0x305(0x1)(None)
	uint8                                        Pad_1630[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          LowerHemisphereColor;                              // 0x308(0x10)(None)
	class UTextureCube*                          Texture;                                           // 0x318(0x8)(ZeroConstructor)
	bool                                         bOverrideLumenSkylightLeaking;                     // 0x320(0x1)(None)
	uint8                                        Pad_1632[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LumenSkylightLeakingOverrideValue;                 // 0x324(0x4)(None)
	uint8                                        Pad_1633[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULocalSkyLightOverrideComponent* GetDefaultObj();

	void SetUseBoxShape(bool bNewUseBoxShape);
	void SetTexture(class UTextureCube* InTexture);
	void SetBlendDistance(float NewBlendDistance);
	void GetInfluenceBoundingRadius(float ReturnValue);
};

// 0x210 (0x238 - 0x28)
// Class Engine.MapBuildDataRegistry
class UMapBuildDataRegistry : public UObject
{
public:
	enum class ELightingBuildQuality             LevelLightingQuality;                              // 0x28(0x1)(None)
	uint8                                        Pad_1635[0x20F];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMapBuildDataRegistry* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAbs
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionAbs* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionAbsorptionMediumMaterialOutput* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionActorPositionWS
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionActorPositionWS* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionAdd
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionAdd* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionTextureBase
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                              Texture;                                           // 0xB0(0x8)(ZeroConstructor)
	enum class EMaterialSamplerType              SamplerType;                                       // 0xB8(0x1)(None)
	uint8                                        IsDefaultMeshpaintTexture : 1;                     // Mask: 0x1, PropSize: 0x10xB9(0x1)(None)
	uint8                                        Pad_163B[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureBase* GetDefaultObj();

};

// 0xF8 (0x1B8 - 0xC0)
// Class Engine.MaterialExpressionTextureSample
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xC0(0x28)(ZeroConstructor)
	struct FExpressionInput                      TextureObject;                                     // 0xE8(0x28)(ZeroConstructor)
	struct FExpressionInput                      MipValue;                                          // 0x110(0x28)(ZeroConstructor)
	struct FExpressionInput                      CoordinatesDX;                                     // 0x138(0x28)(ZeroConstructor)
	struct FExpressionInput                      CoordinatesDY;                                     // 0x160(0x28)(ZeroConstructor)
	struct FExpressionInput                      AutomaticViewMipBiasValue;                         // 0x188(0x28)(ZeroConstructor)
	enum class ETextureMipValueMode              MipValueMode;                                      // 0x1B0(0x1)(None)
	enum class ESamplerSourceMode                SamplerSource;                                     // 0x1B1(0x1)(None)
	uint8                                        AutomaticViewMipBias : 1;                          // Mask: 0x1, PropSize: 0x10x1B2(0x1)(None)
	uint8                                        BitPad_115 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        ConstCoordinate;                                   // 0x1B3(0x1)(None)
	int32                                        ConstMipValue;                                     // 0x1B4(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSample* GetDefaultObj();

};

// 0x88 (0x240 - 0x1B8)
// Class Engine.MaterialExpressionTextureSampleParameter
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0x1B8(0x8)(None)
	struct FGuid                                 ExpressionGUID;                                    // 0x1C0(0x10)(None)
	class FName                                  Group;                                             // 0x1D0(0x8)(None)
	int32                                        SortPriority;                                      // 0x1D8(0x4)(None)
	uint8                                        Pad_163D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FParameterChannelNames                ChannelNames;                                      // 0x1E0(0x60)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameter* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameter2D
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameter2D* GetDefaultObj();

};

// 0x8 (0x248 - 0x240)
// Class Engine.MaterialExpressionAntialiasedTextureMask
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                        Threshold;                                         // 0x240(0x4)(None)
	enum class ETextureColorChannel              Channel;                                           // 0x244(0x1)(None)
	uint8                                        Pad_1644[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionAntialiasedTextureMask* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionAppendVector
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionAppendVector* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArccosine
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArccosine* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArccosineFast
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArccosineFast* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArcsine
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArcsine* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArcsineFast
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArcsineFast* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArctangent
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArctangent* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionArctangent2
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArctangent2* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionArctangent2Fast
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArctangent2Fast* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArctangentFast
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionArctangentFast* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericFogColor
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionAtmosphericFogColor* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericLightColor
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionAtmosphericLightColor* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericLightVector
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionAtmosphericLightVector* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionAuxSceneTextureRead
class UMaterialExpressionAuxSceneTextureRead : public UMaterialExpression
{
public:
	enum class EAuxSceneTextures                 AuxSceneTextureId;                                 // 0xB0(0x1)(None)
	uint8                                        Pad_1673[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      ReadCoordinates;                                   // 0xB8(0x28)(ZeroConstructor)
	bool                                         bForceIntegerCoords;                               // 0xE0(0x1)(None)
	bool                                         bReadFromRWTexture;                                // 0xE1(0x1)(None)
	uint8                                        Pad_1674[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionAuxSceneTextureRead* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionAuxSceneTextureSize
class UMaterialExpressionAuxSceneTextureSize : public UMaterialExpression
{
public:
	enum class EAuxSceneTextures                 AuxSceneTextureId;                                 // 0xB0(0x1)(None)
	uint8                                        Pad_1676[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionAuxSceneTextureSize* GetDefaultObj();

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionAuxSceneTextureWrite
class UMaterialExpressionAuxSceneTextureWrite : public UMaterialExpressionCustomOutput
{
public:
	enum class EAuxSceneTextures                 AuxSceneTextureId;                                 // 0xB0(0x1)(None)
	uint8                                        Pad_1677[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      OutputValue;                                       // 0xB8(0x28)(ZeroConstructor)
	struct FExpressionInput                      WritePosition;                                     // 0xE0(0x28)(ZeroConstructor)
	struct FExpressionInput                      EnableMask;                                        // 0x108(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionAuxSceneTextureWrite* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionBentNormalCustomOutput
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionBentNormalCustomOutput* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionBinaryOp
class UMaterialExpressionBinaryOp : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionBinaryOp* GetDefaultObj();

};

// 0x0 (0x108 - 0x108)
// Class Engine.MaterialExpressionLess
class UMaterialExpressionLess : public UMaterialExpressionBinaryOp
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionLess* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionBlackBody
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                      Temp;                                              // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionBlackBody* GetDefaultObj();

};

// 0x90 (0x140 - 0xB0)
// Class Engine.MaterialExpressionBlendMaterialAttributes
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              A;                                                 // 0xB0(0x30)(ZeroConstructor)
	struct FMaterialAttributesInput              B;                                                 // 0xE0(0x30)(ZeroConstructor)
	struct FExpressionInput                      Alpha;                                             // 0x110(0x28)(ZeroConstructor)
	enum class EMaterialAttributeBlend           PixelAttributeBlendType;                           // 0x138(0x1)(None)
	enum class EMaterialAttributeBlend           VertexAttributeBlendType;                          // 0x139(0x1)(None)
	uint8                                        Pad_1679[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionBlendMaterialAttributes* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionBreakMaterialAttributes
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0xB0(0x30)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionBreakMaterialAttributes* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionBumpOffset
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Height;                                            // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      HeightRatioInput;                                  // 0x100(0x28)(ZeroConstructor)
	float                                        HeightRatio;                                       // 0x128(0x4)(None)
	float                                        ReferencePlane;                                    // 0x12C(0x4)(None)
	uint32                                       ConstCoordinate;                                   // 0x130(0x4)(None)
	uint8                                        Pad_167A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionBumpOffset* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCameraPositionWS
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionCameraPositionWS* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCameraVectorWS
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionCameraVectorWS* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionCeil
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionCeil* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionParameter
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	class FName                                  ParameterName;                                     // 0xB0(0x8)(None)
	struct FGuid                                 ExpressionGUID;                                    // 0xB8(0x10)(None)
	class FName                                  Group;                                             // 0xC8(0x8)(None)
	int32                                        SortPriority;                                      // 0xD0(0x4)(None)
	uint8                                        Pad_167C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionParameter* GetDefaultObj();

};

// 0x78 (0x150 - 0xD8)
// Class Engine.MaterialExpressionVectorParameter
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                          DefaultValue;                                      // 0xD8(0x10)(None)
	bool                                         bUseCustomPrimitiveData;                           // 0xE8(0x1)(None)
	uint8                                        PrimitiveDataIndex;                                // 0xE9(0x1)(None)
	uint8                                        Pad_167D[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FParameterChannelNames                ChannelNames;                                      // 0xF0(0x60)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionVectorParameter* GetDefaultObj();

};

// 0x30 (0x180 - 0x150)
// Class Engine.MaterialExpressionChannelMaskParameter
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	enum class EChannelMaskParameterColor        MaskChannel;                                       // 0x150(0x1)(None)
	uint8                                        Pad_167F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0x158(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionChannelMaskParameter* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionClamp
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Min;                                               // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Max;                                               // 0x100(0x28)(ZeroConstructor)
	enum class EClampMode                        ClampMode;                                         // 0x128(0x1)(None)
	uint8                                        Pad_1681[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDefault;                                        // 0x12C(0x4)(None)
	float                                        MaxDefault;                                        // 0x130(0x4)(None)
	uint8                                        Pad_1682[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionClamp* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionClearCoatNormalCustomOutput* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCloudSampleAttribute
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionCloudSampleAttribute* GetDefaultObj();

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionCollectionParameter
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*          Collection;                                        // 0xB0(0x8)(ZeroConstructor)
	class FName                                  ParameterName;                                     // 0xB8(0x8)(None)
	struct FGuid                                 ParameterId;                                       // 0xC0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionCollectionParameter* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionComment
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int32                                        SizeX;                                             // 0xB0(0x4)(None)
	int32                                        SizeY;                                             // 0xB4(0x4)(None)
	class FString                                Text;                                              // 0xB8(0x10)(None)
	struct FLinearColor                          CommentColor;                                      // 0xC8(0x10)(None)
	int32                                        FontSize;                                          // 0xD8(0x4)(None)
	uint8                                        bCommentBubbleVisible_InDetailsPanel : 1;          // Mask: 0x1, PropSize: 0x10xDC(0x1)(None)
	uint8                                        bColorCommentBubble : 1;                           // Mask: 0x2, PropSize: 0x10xDC(0x1)(None)
	uint8                                        BitPad_116 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_169E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bGroupMode;                                        // 0xE0(0x1)(None)
	uint8                                        Pad_169F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionComment* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionComponentMask
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	uint8                                        R : 1;                                             // Mask: 0x1, PropSize: 0x10xD8(0x1)(None)
	uint8                                        G : 1;                                             // Mask: 0x2, PropSize: 0x10xD8(0x1)(None)
	uint8                                        B : 1;                                             // Mask: 0x4, PropSize: 0x10xD8(0x1)(None)
	uint8                                        A : 1;                                             // Mask: 0x8, PropSize: 0x10xD8(0x1)(None)
	uint8                                        Pad_16A5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionComponentMask* GetDefaultObj();

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionComposite
class UMaterialExpressionComposite : public UMaterialExpression
{
public:
	class FString                                SubgraphName;                                      // 0xB0(0x10)(None)
	class UMaterialExpressionPinBase*            InputExpressions;                                  // 0xC0(0x8)(ZeroConstructor)
	class UMaterialExpressionPinBase*            OutputExpressions;                                 // 0xC8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionComposite* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstant
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0xB0(0x4)(None)
	uint8                                        Pad_16AD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionConstant* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstant2Vector
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0xB0(0x4)(None)
	float                                        G;                                                 // 0xB4(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionConstant2Vector* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionConstant3Vector
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0xB0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionConstant3Vector* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionConstant4Vector
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0xB0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionConstant4Vector* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionConstantBiasScale
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	float                                        Bias;                                              // 0xD8(0x4)(None)
	float                                        Scale;                                             // 0xDC(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionConstantBiasScale* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionCosine
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	float                                        Period;                                            // 0xD8(0x4)(None)
	uint8                                        Pad_16BA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionCosine* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionCrossProduct
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionCrossProduct* GetDefaultObj();

};

// 0x10 (0xE8 - 0xD8)
// Class Engine.MaterialExpressionScalarParameter
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                        DefaultValue;                                      // 0xD8(0x4)(None)
	bool                                         bUseCustomPrimitiveData;                           // 0xDC(0x1)(None)
	uint8                                        PrimitiveDataIndex;                                // 0xDD(0x1)(None)
	uint8                                        Pad_16C7[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SliderMin;                                         // 0xE0(0x4)(None)
	float                                        SliderMax;                                         // 0xE4(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionScalarParameter* GetDefaultObj();

};

// 0x38 (0x120 - 0xE8)
// Class Engine.MaterialExpressionCurveAtlasRowParameter
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                     Curve;                                             // 0xE8(0x8)(ZeroConstructor)
	class UCurveLinearColorAtlas*                Atlas;                                             // 0xF0(0x8)(ZeroConstructor)
	struct FExpressionInput                      InputTime;                                         // 0xF8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionCurveAtlasRowParameter* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionCustom
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	class FString                                Code;                                              // 0xB0(0x10)(None)
	enum class ECustomMaterialOutputType         OutputType;                                        // 0xC0(0x1)(None)
	uint8                                        Pad_16CC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Description;                                       // 0xC8(0x10)(None)
	TArray<struct FCustomInput>                  Inputs;                                            // 0xD8(0x10)(ZeroConstructor)
	TArray<struct FCustomOutput>                 AdditionalOutputs;                                 // 0xE8(0x10)(None)
	TArray<struct FCustomDefine>                 AdditionalDefines;                                 // 0xF8(0x10)(None)
	TArray<class FString>                        IncludeFilePaths;                                  // 0x108(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionCustom* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch
class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      InputTrue;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      InputFalse;                                        // 0xD8(0x28)(ZeroConstructor)
	TArray<struct FDataDrivenShaderPlatformInfoInput> DDSPIPropertyNames;                                // 0x100(0x10)(None)
	uint8                                        bContainsInvalidProperty : 1;                      // Mask: 0x1, PropSize: 0x10x110(0x1)(None)
	uint8                                        Pad_16D3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch* GetDefaultObj();

	void GetNameOptions(const TArray<class FString>& ReturnValue);
};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDBufferTexture
class UMaterialExpressionDBufferTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(ZeroConstructor)
	enum class EDBufferTextureId                 DBufferTextureId;                                  // 0xD8(0x1)(None)
	uint8                                        Pad_16D7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionDBufferTexture* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDDX
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDDX* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDDY
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDDY* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDecalColor
class UMaterialExpressionDecalColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDecalColor* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDecalDerivative
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDecalDerivative* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDecalLifetimeOpacity
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDecalLifetimeOpacity* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDecalMipmapLevel
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureSize;                                       // 0xB0(0x28)(ZeroConstructor)
	float                                        ConstWidth;                                        // 0xD8(0x4)(None)
	float                                        ConstHeight;                                       // 0xDC(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionDecalMipmapLevel* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDeltaTime
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDeltaTime* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionDepthFade
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                      InOpacity;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      FadeDistance;                                      // 0xD8(0x28)(ZeroConstructor)
	float                                        OpacityDefault;                                    // 0x100(0x4)(None)
	float                                        FadeDistanceDefault;                               // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionDepthFade* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDepthOfFieldFunction
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	enum class EDepthOfFieldFunctionValue        FunctionValue;                                     // 0xB0(0x1)(None)
	uint8                                        Pad_16EB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Depth;                                             // 0xB8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDepthOfFieldFunction* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDeriveNormalZ
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                      InXY;                                              // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDeriveNormalZ* GetDefaultObj();

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionDesaturation
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Fraction;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FLinearColor                          LuminanceFactors;                                  // 0x100(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionDesaturation* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDispatchId
class UMaterialExpressionDispatchId : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDispatchId* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDispatchSize
class UMaterialExpressionDispatchSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDispatchSize* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDistance
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDistance* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDistanceCullFade
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionDistanceCullFade* GetDefaultObj();

};

// 0xB8 (0x168 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldApproxAO
class UMaterialExpressionDistanceFieldApproxAO : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      BaseDistance;                                      // 0x100(0x28)(ZeroConstructor)
	float                                        BaseDistanceDefault;                               // 0x128(0x4)(None)
	uint8                                        Pad_1727[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Radius;                                            // 0x130(0x28)(ZeroConstructor)
	float                                        RadiusDefault;                                     // 0x158(0x4)(None)
	uint32                                       NumSteps;                                          // 0x15C(0x4)(None)
	float                                        StepScaleDefault;                                  // 0x160(0x4)(None)
	uint8                                        Pad_1729[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionDistanceFieldApproxAO* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldGradient
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDistanceFieldGradient* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      No;                                                // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Yes;                                               // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDistanceFieldsRenderingSwitch* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDistanceToNearestSurface
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDistanceToNearestSurface* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionDivide
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionDivide* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDotProduct
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionDotProduct* GetDefaultObj();

};

// 0x28 (0x100 - 0xD8)
// Class Engine.MaterialExpressionDoubleVectorParameter
class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter
{
public:
	uint8                                        Pad_173A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector4d                             DefaultValue;                                      // 0xE0(0x20)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionDoubleVectorParameter* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDynamicParameter
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<class FString>                        ParamNames;                                        // 0xB0(0x10)(None)
	struct FLinearColor                          DefaultValue;                                      // 0xC0(0x10)(None)
	uint32                                       ParameterIndex;                                    // 0xD0(0x4)(None)
	uint8                                        Pad_173B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionDynamicParameter* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionExecBegin
class UMaterialExpressionExecBegin : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Exec;                                              // 0xB0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionExecBegin* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionExecEnd
class UMaterialExpressionExecEnd : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionExecEnd* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionEyeAdaptation
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionEyeAdaptation* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionEyeAdaptationInverse
class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression
{
public:
	struct FExpressionInput                      LightValueInput;                                   // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      AlphaInput;                                        // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionEyeAdaptationInverse* GetDefaultObj();

};

// 0xF0 (0x1A0 - 0xB0)
// Class Engine.MaterialExpressionFeatureLevelSwitch
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Inputs[0x5];                                       // 0xD8(0xC8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionFeatureLevelSwitch* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionFloor
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionFloor* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionFmod
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionFmod* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionFontSample
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                 Font;                                              // 0xB0(0x8)(ZeroConstructor)
	int32                                        FontTexturePage;                                   // 0xB8(0x4)(None)
	uint8                                        Pad_1745[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionFontSample* GetDefaultObj();

};

// 0x28 (0xE8 - 0xC0)
// Class Engine.MaterialExpressionFontSampleParameter
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	class FName                                  ParameterName;                                     // 0xC0(0x8)(None)
	struct FGuid                                 ExpressionGUID;                                    // 0xC8(0x10)(None)
	class FName                                  Group;                                             // 0xD8(0x8)(None)
	int32                                        SortPriority;                                      // 0xE0(0x4)(None)
	uint8                                        Pad_174B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionFontSampleParameter* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionForLoop
class UMaterialExpressionForLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 LoopBody;                                          // 0xB0(0x8)(ZeroConstructor)
	struct FExpressionExecOutput                 Completed;                                         // 0xB8(0x8)(ZeroConstructor)
	struct FExpressionInput                      StartIndex;                                        // 0xC0(0x28)(ZeroConstructor)
	struct FExpressionInput                      EndIndex;                                          // 0xE8(0x28)(ZeroConstructor)
	struct FExpressionInput                      IndexStep;                                         // 0x110(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionForLoop* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionFrac
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionFrac* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionFrameBufferUAVColor
class UMaterialExpressionFrameBufferUAVColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionFrameBufferUAVColor* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionFrameBufferUAVOffset
class UMaterialExpressionFrameBufferUAVOffset : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionFrameBufferUAVOffset* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionFrameBufferUAVSize
class UMaterialExpressionFrameBufferUAVSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionFrameBufferUAVSize* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionFresnel
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                      ExponentIn;                                        // 0xB0(0x28)(ZeroConstructor)
	float                                        Exponent;                                          // 0xD8(0x4)(None)
	uint8                                        Pad_175E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      BaseReflectFractionIn;                             // 0xE0(0x28)(ZeroConstructor)
	float                                        BaseReflectFraction;                               // 0x108(0x4)(None)
	uint8                                        Pad_1760[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Normal;                                            // 0x110(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionFresnel* GetDefaultObj();

};

// 0xB0 (0x160 - 0xB0)
// Class Engine.MaterialExpressionFunctionInput
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                      Preview;                                           // 0xB0(0x28)(ZeroConstructor)
	class FName                                  InputName;                                         // 0xD8(0x8)(None)
	class FString                                Description;                                       // 0xE0(0x10)(None)
	struct FGuid                                 ID;                                                // 0xF0(0x10)(None)
	enum class EFunctionInputType                InputType;                                         // 0x100(0x1)(None)
	uint8                                        Pad_176A[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector4f                             PreviewValue;                                      // 0x110(0x10)(None)
	uint8                                        bUsePreviewValueAsDefault : 1;                     // Mask: 0x1, PropSize: 0x10x120(0x1)(None)
	uint8                                        BitPad_11C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_176C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SortPriority;                                      // 0x124(0x4)(None)
	uint8                                        bCompilingFunctionPreview : 1;                     // Mask: 0x1, PropSize: 0x10x128(0x1)(None)
	uint8                                        Pad_176E[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionFunctionInput* GetDefaultObj();

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionFunctionOutput
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	class FName                                  OutputName;                                        // 0xB0(0x8)(None)
	class FString                                Description;                                       // 0xB8(0x10)(None)
	int32                                        SortPriority;                                      // 0xC8(0x4)(None)
	uint8                                        Pad_1778[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0xD0(0x28)(ZeroConstructor)
	uint8                                        bLastPreviewed : 1;                                // Mask: 0x1, PropSize: 0x10xF8(0x1)(None)
	uint8                                        BitPad_11D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1779[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 ID;                                                // 0xFC(0x10)(None)
	uint8                                        Pad_177A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionFunctionOutput* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionGenericConstant
class UMaterialExpressionGenericConstant : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionGenericConstant* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstantDouble
class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant
{
public:
	double                                       Value;                                             // 0xB0(0x8)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionConstantDouble* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionGetComputeMaterialSplatData
class UMaterialExpressionGetComputeMaterialSplatData : public UMaterialExpression
{
public:
	uint32                                       DataIndex;                                         // 0xB0(0x4)(None)
	enum class ESplatBlendOp                     BlendOp;                                           // 0xB4(0x1)(None)
	uint8                                        Pad_178E[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionGetComputeMaterialSplatData* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionGetLocal
class UMaterialExpressionGetLocal : public UMaterialExpression
{
public:
	class FName                                  LocalName;                                         // 0xB0(0x8)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionGetLocal* GetDefaultObj();

};

// 0x40 (0xF0 - 0xB0)
// Class Engine.MaterialExpressionGetMaterialAttributes
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0xB0(0x30)(ZeroConstructor)
	TArray<struct FGuid>                         AttributeGetTypes;                                 // 0xE0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionGetMaterialAttributes* GetDefaultObj();

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionGIReplace
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      StaticIndirect;                                    // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      DynamicIndirect;                                   // 0x100(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionGIReplace* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionGPUReadbackMessageOutput
class UMaterialExpressionGPUReadbackMessageOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FCustomFloatInput                     MessageData;                                       // 0xB0(0x38)(ZeroConstructor)
	struct FExpressionInput                      EnableMask;                                        // 0xE8(0x28)(ZeroConstructor)
	bool                                         bOutputPrimitiveId;                                // 0x110(0x1)(None)
	bool                                         bOutputInstanceId;                                 // 0x111(0x1)(None)
	bool                                         bOutputRowIdx;                                     // 0x112(0x1)(None)
	uint8                                        Pad_17A2[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionGPUReadbackMessageOutput* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionHairAttributes
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:
	uint8                                        bUseTangentSpace : 1;                              // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        Pad_17A4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionHairAttributes* GetDefaultObj();

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionHairColor
class UMaterialExpressionHairColor : public UMaterialExpression
{
public:
	struct FExpressionInput                      Melanin;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Redness;                                           // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      DyeColor;                                          // 0x100(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionHairColor* GetDefaultObj();

};

// 0xD8 (0x188 - 0xB0)
// Class Engine.MaterialExpressionIf
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      AGreaterThanB;                                     // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      AEqualsB;                                          // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      ALessThanB;                                        // 0x150(0x28)(ZeroConstructor)
	float                                        EqualsThreshold;                                   // 0x178(0x4)(None)
	float                                        ConstB;                                            // 0x17C(0x4)(None)
	float                                        ConstAEqualsB;                                     // 0x180(0x4)(None)
	uint8                                        Pad_17AE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionIf* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionIfThenElse
class UMaterialExpressionIfThenElse : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Then;                                              // 0xB0(0x8)(ZeroConstructor)
	struct FExpressionExecOutput                 Else;                                              // 0xB8(0x8)(ZeroConstructor)
	struct FExpressionInput                      Condition;                                         // 0xC0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionIfThenElse* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionInstanceDistanceCullingData
class UMaterialExpressionInstanceDistanceCullingData : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionInstanceDistanceCullingData* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionInstanceLocalBounds
class UMaterialExpressionInstanceLocalBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionInstanceLocalBounds* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionInstancePositionWS
class UMaterialExpressionInstancePositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionInstancePositionWS* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionInverseLinearInterpolate
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Value;                                             // 0x100(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x128(0x4)(None)
	float                                        ConstB;                                            // 0x12C(0x4)(None)
	float                                        ConstValue;                                        // 0x130(0x4)(None)
	bool                                         bClampResult;                                      // 0x134(0x1)(None)
	uint8                                        Pad_17C6[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionInverseLinearInterpolate* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionIsOrthographic
class UMaterialExpressionIsOrthographic : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionIsOrthographic* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionLightmapUVs
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionLightmapUVs* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionLightmassReplace
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Lightmass;                                         // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionLightmassReplace* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionLightVector
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionLightVector* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionLinearInterpolate
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Alpha;                                             // 0x100(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x128(0x4)(None)
	float                                        ConstB;                                            // 0x12C(0x4)(None)
	float                                        ConstAlpha;                                        // 0x130(0x4)(None)
	uint8                                        Pad_17CE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionLinearInterpolate* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionLogarithm10
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                      X;                                                 // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionLogarithm10* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionLogarithm2
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      X;                                                 // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionLogarithm2* GetDefaultObj();

};

// 0x488 (0x538 - 0xB0)
// Class Engine.MaterialExpressionMakeMaterialAttributes
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      Anisotropy;                                        // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      Opacity;                                           // 0x1A0(0x28)(ZeroConstructor)
	struct FExpressionInput                      OpacityMask;                                       // 0x1C8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x1F0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Tangent;                                           // 0x218(0x28)(ZeroConstructor)
	struct FExpressionInput                      WorldPositionOffset;                               // 0x240(0x28)(ZeroConstructor)
	struct FExpressionInput                      SubsurfaceColor;                                   // 0x268(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoat;                                         // 0x290(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x2B8(0x28)(ZeroConstructor)
	struct FExpressionInput                      AmbientOcclusion;                                  // 0x2E0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Refraction;                                        // 0x308(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSAOIntensity;                                     // 0x330(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSAOInfluence;                                     // 0x358(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSAOLightInfluence;                                // 0x380(0x28)(ZeroConstructor)
	struct FExpressionInput                      CustomizedUVs[0x8];                                // 0x3A8(0x140)(ZeroConstructor)
	struct FExpressionInput                      PixelDepthOffset;                                  // 0x4E8(0x28)(ZeroConstructor)
	struct FExpressionInput                      ShadingModel;                                      // 0x510(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionMakeMaterialAttributes* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionMapARPassthroughCameraUV
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionMapARPassthroughCameraUV* GetDefaultObj();

};

// 0x168 (0x218 - 0xB0)
// Class Engine.MaterialExpressionMaterialAttributeLayers
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              Input;                                             // 0xB0(0x30)(ZeroConstructor)
	struct FMaterialLayersFunctions              DefaultLayers;                                     // 0xE0(0x100)(ZeroConstructor)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                      // 0x1E0(0x10)(ZeroConstructor)
	int32                                        NumActiveLayerCallers;                             // 0x1F0(0x4)(None)
	uint8                                        Pad_17D3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                      // 0x1F8(0x10)(ZeroConstructor)
	int32                                        NumActiveBlendCallers;                             // 0x208(0x4)(None)
	bool                                         bIsLayerGraphBuilt;                                // 0x20C(0x1)(None)
	uint8                                        Pad_17D4[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionMaterialAttributeLayers* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionMaterialFunctionCall
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*            MaterialFunction;                                  // 0xB0(0x8)(ZeroConstructor)
	TArray<struct FFunctionExpressionInput>      FunctionInputs;                                    // 0xB8(0x10)(ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>     FunctionOutputs;                                   // 0xC8(0x10)(ZeroConstructor)
	struct FMaterialParameterInfo                FunctionParameterInfo;                             // 0xD8(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionMaterialFunctionCall* GetDefaultObj();

};

// 0x0 (0x110 - 0x110)
// Class Engine.MaterialExpressionMaterialLayerOutput
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionMaterialLayerOutput* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionMaterialProxyReplace
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      MaterialProxy;                                     // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionMaterialProxyReplace* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMax
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionMax* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMin
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionMin* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMultiply
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionMultiply* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionRerouteBase
class UMaterialExpressionRerouteBase : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionRerouteBase* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteBase
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionNamedRerouteBase* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteDeclaration
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	class FName                                  Name;                                              // 0xD8(0x8)(None)
	struct FLinearColor                          NodeColor;                                         // 0xE0(0x10)(None)
	struct FGuid                                 VariableGuid;                                      // 0xF0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionNamedRerouteDeclaration* GetDefaultObj();

};

// 0x18 (0xC8 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteUsage
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{
public:
	class UMaterialExpressionNamedRerouteDeclaration* Declaration;                                       // 0xB0(0x8)(ZeroConstructor)
	struct FGuid                                 DeclarationGuid;                                   // 0xB8(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionNamedRerouteUsage* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionNaniteReplace
class UMaterialExpressionNaniteReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Nanite;                                            // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionNaniteReplace* GetDefaultObj();

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionNoise
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      FilterWidth;                                       // 0xD8(0x28)(ZeroConstructor)
	float                                        Scale;                                             // 0x100(0x4)(None)
	int32                                        Quality;                                           // 0x104(0x4)(None)
	enum class ENoiseFunction                    NoiseFunction;                                     // 0x108(0x1)(None)
	uint8                                        Pad_17EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bTurbulence : 1;                                   // Mask: 0x1, PropSize: 0x10x10C(0x1)(None)
	uint8                                        BitPad_11E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17EB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Levels;                                            // 0x110(0x4)(None)
	float                                        OutputMin;                                         // 0x114(0x4)(None)
	float                                        OutputMax;                                         // 0x118(0x4)(None)
	float                                        LevelScale;                                        // 0x11C(0x4)(None)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10x120(0x1)(None)
	uint8                                        BitPad_11F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       RepeatSize;                                        // 0x124(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionNoise* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionNormalize
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                      VectorInput;                                       // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionNormalize* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectBounds
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionObjectBounds* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectLocalBounds
class UMaterialExpressionObjectLocalBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionObjectLocalBounds* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectOrientation
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionObjectOrientation* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectPositionWS
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionObjectPositionWS* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectRadius
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionObjectRadius* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionOneMinus
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionOneMinus* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionPanner
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Time;                                              // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Speed;                                             // 0x100(0x28)(ZeroConstructor)
	float                                        SpeedX;                                            // 0x128(0x4)(None)
	float                                        SpeedY;                                            // 0x12C(0x4)(None)
	uint32                                       ConstCoordinate;                                   // 0x130(0x4)(None)
	bool                                         bFractionalPart;                                   // 0x134(0x1)(None)
	uint8                                        Pad_17F7[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPanner* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleColor
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleColor* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleDirection
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleDirection* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleMacroUV
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleMacroUV* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleMotionBlurFade
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleMotionBlurFade* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticlePositionWS
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticlePositionWS* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRadius
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleRadius* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRandom
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleRandom* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRelativeTime
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleRelativeTime* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSize
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleSize* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSpeed
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleSpeed* GetDefaultObj();

};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.MaterialExpressionParticleSubUV
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        Pad_181C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleSubUV* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSubUVProperties
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionParticleSubUVProperties* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionPathTracingQualitySwitch
class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Normal;                                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      PathTraced;                                        // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionPathTracingQualitySwitch* GetDefaultObj();

};

// 0xC8 (0x178 - 0xB0)
// Class Engine.MaterialExpressionPathTracingRayTypeSwitch
class UMaterialExpressionPathTracingRayTypeSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Main;                                              // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Shadow;                                            // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      IndirectDiffuse;                                   // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      IndirectSpecular;                                  // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      IndirectVolume;                                    // 0x150(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionPathTracingRayTypeSwitch* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceCustomData
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                      DefaultValue;                                      // 0xB0(0x28)(ZeroConstructor)
	float                                        ConstDefaultValue;                                 // 0xD8(0x4)(None)
	uint32                                       DataIndex;                                         // 0xDC(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceCustomData* GetDefaultObj();

};

// 0x40 (0xF0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression
{
public:
	struct FExpressionInput                      DefaultValue;                                      // 0xB0(0x28)(ZeroConstructor)
	struct FLinearColor                          ConstDefaultValue;                                 // 0xD8(0x10)(None)
	uint32                                       DataIndex;                                         // 0xE8(0x4)(None)
	uint8                                        Pad_1826[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceCustomData3Vector* GetDefaultObj();

};

// 0x70 (0x120 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceDynamicCustomData
class UMaterialExpressionPerInstanceDynamicCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                      DefaultValue;                                      // 0xB0(0x28)(ZeroConstructor)
	struct FLinearColor                          ConstDefaultValue;                                 // 0xD8(0x10)(None)
	struct FExpressionInput                      RowIndex;                                          // 0xE8(0x28)(ZeroConstructor)
	uint32                                       ConstRowIndex;                                     // 0x110(0x4)(None)
	uint32                                       DataIndex;                                         // 0x114(0x4)(None)
	bool                                         bUsePreviousFrame;                                 // 0x118(0x1)(None)
	uint8                                        Pad_1829[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceDynamicCustomData* GetDefaultObj();

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceDynamicCustomDataOutput
class UMaterialExpressionPerInstanceDynamicCustomDataOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      ShouldDisable;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      EnableMask;                                        // 0xD8(0x28)(ZeroConstructor)
	enum class ECustomDataRowCountMethod         RowCountMethod;                                    // 0x100(0x1)(None)
	uint8                                        Pad_182D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      RowCountParam;                                     // 0x108(0x28)(ZeroConstructor)
	uint16                                       RowCountConst;                                     // 0x130(0x2)(None)
	uint8                                        Pad_182E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCustomFloatInput>             CustomFloats;                                      // 0x138(0x10)(ZeroConstructor)
	uint32                                       NumFloatsPerRow;                                   // 0x148(0x4)(None)
	bool                                         bKeepPreviousFrameData;                            // 0x14C(0x1)(None)
	bool                                         bDisableCustomOutputShader;                        // 0x14D(0x1)(None)
	uint8                                        Pad_182F[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceDynamicCustomDataOutput* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceDynamicCustomDataRowIndex
class UMaterialExpressionPerInstanceDynamicCustomDataRowIndex : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceDynamicCustomDataRowIndex* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceDynamicCustomDataValidSwitch
class UMaterialExpressionPerInstanceDynamicCustomDataValidSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	bool                                         bUsePreviousFrame;                                 // 0x100(0x1)(None)
	uint8                                        Pad_1832[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceDynamicCustomDataValidSwitch* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceFadeAmount
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceFadeAmount* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceRandom
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPerInstanceRandom* GetDefaultObj();

};

// 0x18 (0xC8 - 0xB0)
// Class Engine.MaterialExpressionPinBase
class UMaterialExpressionPinBase : public UMaterialExpression
{
public:
	TArray<struct FCompositeReroute>             ReroutePins;                                       // 0xB0(0x10)(ZeroConstructor)
	enum class EEdGraphPinDirection              PinDirection;                                      // 0xC0(0x1)(None)
	uint8                                        Pad_1838[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPinBase* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPixelDepth
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPixelDepth* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPixelNormalWS
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPixelNormalWS* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionPower
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                      Base;                                              // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Exponent;                                          // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstExponent;                                     // 0x100(0x4)(None)
	uint8                                        Pad_183D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionPower* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPrecomputedAOMask
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPrecomputedAOMask* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedLocalBounds
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPreSkinnedLocalBounds* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedNormal
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPreSkinnedNormal* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedPosition
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionPreSkinnedPosition* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionPreviousFrameSwitch
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      CurrentFrame;                                      // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      PreviousFrame;                                     // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionPreviousFrameSwitch* GetDefaultObj();

};

// 0xC8 (0x178 - 0xB0)
// Class Engine.MaterialExpressionQualitySwitch
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Inputs[0x4];                                       // 0xD8(0xA0)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionQualitySwitch* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionRayTracingQualitySwitch
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Normal;                                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      RayTraced;                                         // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionRayTracingQualitySwitch* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionReflectionCapturePassSwitch
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Reflection;                                        // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionReflectionCapturePassSwitch* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionReflectionVectorWS
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                      CustomWorldNormal;                                 // 0xB0(0x28)(ZeroConstructor)
	uint8                                        bNormalizeCustomWorldNormal : 1;                   // Mask: 0x1, PropSize: 0x10xD8(0x1)(None)
	uint8                                        Pad_1867[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionReflectionVectorWS* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionReroute
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionReroute* GetDefaultObj();

};

// 0xA8 (0x158 - 0xB0)
// Class Engine.MaterialExpressionRotateAboutAxis
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                      NormalizedRotationAxis;                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      RotationAngle;                                     // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      PivotPoint;                                        // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Position;                                          // 0x128(0x28)(ZeroConstructor)
	float                                        Period;                                            // 0x150(0x4)(None)
	uint8                                        Pad_1871[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionRotateAboutAxis* GetDefaultObj();

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionRotator
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Time;                                              // 0xD8(0x28)(ZeroConstructor)
	float                                        CenterX;                                           // 0x100(0x4)(None)
	float                                        CenterY;                                           // 0x104(0x4)(None)
	float                                        Speed;                                             // 0x108(0x4)(None)
	uint32                                       ConstCoordinate;                                   // 0x10C(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionRotator* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionRound
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionRound* GetDefaultObj();

};

// 0x118 (0x1C8 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      WorldHeight;                                       // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      Opacity;                                           // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      Mask;                                              // 0x1A0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionRuntimeVirtualTextureOutput* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      VirtualTextureOutput;                              // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionRuntimeVirtualTextureReplace* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      WorldPosition;                                     // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      MipValue;                                          // 0x100(0x28)(ZeroConstructor)
	class URuntimeVirtualTexture*                VirtualTexture;                                    // 0x128(0x8)(ZeroConstructor)
	enum class ERuntimeVirtualTextureMaterialType MaterialType;                                      // 0x130(0x1)(None)
	bool                                         bSinglePhysicalSpace;                              // 0x131(0x1)(None)
	bool                                         bAdaptive;                                         // 0x132(0x1)(None)
	bool                                         bEnableFeedback;                                   // 0x133(0x1)(None)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode;                                      // 0x134(0x1)(None)
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode;                                // 0x135(0x1)(None)
	uint8                                        Pad_1882[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionRuntimeVirtualTextureSample* GetDefaultObj();

};

// 0x28 (0x160 - 0x138)
// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0x138(0x8)(None)
	struct FGuid                                 ExpressionGUID;                                    // 0x140(0x10)(None)
	class FName                                  Group;                                             // 0x150(0x8)(None)
	int32                                        SortPriority;                                      // 0x158(0x4)(None)
	uint8                                        Pad_1883[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionRuntimeVirtualTextureSampleParameter* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsVectorField
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(ZeroConstructor)
	enum class EFieldVectorType                  FieldTarget;                                       // 0xD8(0x1)(None)
	uint8                                        Pad_188F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSamplePhysicsVectorField* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsScalarField
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(ZeroConstructor)
	enum class EFieldScalarType                  FieldTarget;                                       // 0xD8(0x1)(None)
	uint8                                        Pad_1894[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSamplePhysicsScalarField* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsIntegerField
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(ZeroConstructor)
	enum class EFieldIntegerType                 FieldTarget;                                       // 0xD8(0x1)(None)
	uint8                                        Pad_1896[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSamplePhysicsIntegerField* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSaturate
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSaturate* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionSceneColor
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(None)
	uint8                                        Pad_189A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(ZeroConstructor)
	struct FExpressionInput                      OffsetFraction;                                    // 0xE0(0x28)(ZeroConstructor)
	struct FVector2D                             ConstInput;                                        // 0x108(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSceneColor* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionSceneDepth
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(None)
	uint8                                        Pad_189D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Coordinates;                                       // 0xE0(0x28)(ZeroConstructor)
	struct FVector2D                             ConstInput;                                        // 0x108(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSceneDepth* GetDefaultObj();

};

// 0x48 (0xF8 - 0xB0)
// Class Engine.MaterialExpressionSceneDepthWithoutWater
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(None)
	uint8                                        Pad_18A1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(ZeroConstructor)
	struct FVector2D                             ConstInput;                                        // 0xE0(0x10)(None)
	float                                        FallbackDepth;                                     // 0xF0(0x4)(None)
	uint8                                        Pad_18A3[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSceneDepthWithoutWater* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSceneTexelSize
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionSceneTexelSize* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSceneTexture
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(ZeroConstructor)
	enum class ESceneTextureId                   SceneTextureId;                                    // 0xD8(0x1)(None)
	bool                                         bFiltered;                                         // 0xD9(0x1)(None)
	uint8                                        Pad_18AC[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSceneTexture* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionScreenPosition
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionScreenPosition* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionSetLocal
class UMaterialExpressionSetLocal : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Exec;                                              // 0xB0(0x8)(ZeroConstructor)
	struct FExpressionInput                      Value;                                             // 0xB8(0x28)(ZeroConstructor)
	class FName                                  LocalName;                                         // 0xE0(0x8)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSetLocal* GetDefaultObj();

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionSetMaterialAttributes
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>              Inputs;                                            // 0xB0(0x10)(ZeroConstructor)
	TArray<struct FGuid>                         AttributeSetTypes;                                 // 0xC0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSetMaterialAttributes* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionShaderStageSwitch
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      PixelShader;                                       // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      VertexShader;                                      // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionShaderStageSwitch* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionShadingModel
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	enum class EMaterialShadingModel             ShadingModel;                                      // 0xB0(0x1)(None)
	uint8                                        Pad_18B4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionShadingModel* GetDefaultObj();

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionShadingPathSwitch
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Inputs[0x3];                                       // 0xD8(0x78)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionShadingPathSwitch* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionShadowReplace
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Shadow;                                            // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionShadowReplace* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSign
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSign* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSine
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	float                                        Period;                                            // 0xD8(0x4)(None)
	uint8                                        Pad_18C9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSine* GetDefaultObj();

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      ScatteringCoefficients;                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      AbsorptionCoefficients;                            // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      PhaseG;                                            // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x128(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSingleLayerWaterMaterialOutput* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(None)
	uint8                                        Pad_18CD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereLightDirection* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(None)
	uint8                                        Pad_18CF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      WorldPosition;                                     // 0xB8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereLightIlluminance* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(None)
	uint8                                        Pad_18D1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      DiskAngularDiameterOverride;                       // 0xB8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereLightDiskLuminance* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereAerialPerspective* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyAtmosphereViewLuminance* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionSkyLightEnvMapSample
class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression
{
public:
	struct FExpressionInput                      Direction;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSkyLightEnvMapSample* GetDefaultObj();

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionSmoothStep
class UMaterialExpressionSmoothStep : public UMaterialExpression
{
public:
	struct FExpressionInput                      Min;                                               // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Max;                                               // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Value;                                             // 0x100(0x28)(ZeroConstructor)
	float                                        ConstMin;                                          // 0x128(0x4)(None)
	float                                        ConstMax;                                          // 0x12C(0x4)(None)
	float                                        ConstValue;                                        // 0x130(0x4)(None)
	uint8                                        Pad_18E2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSmoothStep* GetDefaultObj();

};

// 0x90 (0x140 - 0xB0)
// Class Engine.MaterialExpressionSobol
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                      Cell;                                              // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Index;                                             // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Seed;                                              // 0x100(0x28)(ZeroConstructor)
	uint32                                       ConstIndex;                                        // 0x128(0x4)(None)
	uint8                                        Pad_18E5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ConstSeed;                                         // 0x130(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSobol* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSparseVolumeTextureSample
class UMaterialExpressionSparseVolumeTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(ZeroConstructor)
	class USparseVolumeTexture*                  SparseVolumeTexture;                               // 0xD8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSparseVolumeTextureSample* GetDefaultObj();

};

// 0x28 (0x108 - 0xE0)
// Class Engine.MaterialExpressionSparseVolumeTextureSampleParameter
class UMaterialExpressionSparseVolumeTextureSampleParameter : public UMaterialExpressionSparseVolumeTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0xE0(0x8)(None)
	struct FGuid                                 ExpressionGUID;                                    // 0xE8(0x10)(None)
	class FName                                  Group;                                             // 0xF8(0x8)(None)
	int32                                        SortPriority;                                      // 0x100(0x4)(None)
	uint8                                        Pad_18EA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSparseVolumeTextureSampleParameter* GetDefaultObj();

};

// 0xB0 (0x160 - 0xB0)
// Class Engine.MaterialExpressionSpeedTree
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                      GeometryInput;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      WindInput;                                         // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      LODInput;                                          // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      ExtraBendWS;                                       // 0x128(0x28)(ZeroConstructor)
	enum class ESpeedTreeGeometryType            GeometryType;                                      // 0x150(0x1)(None)
	enum class ESpeedTreeWindType                WindType;                                          // 0x151(0x1)(None)
	enum class ESpeedTreeLODType                 LODType;                                           // 0x152(0x1)(None)
	uint8                                        Pad_18F0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BillboardThreshold;                                // 0x154(0x4)(None)
	bool                                         bAccurateWindVelocities;                           // 0x158(0x1)(None)
	uint8                                        Pad_18F1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSpeedTree* GetDefaultObj();

};

// 0xA8 (0x158 - 0xB0)
// Class Engine.MaterialExpressionSphereMask
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Radius;                                            // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Hardness;                                          // 0x128(0x28)(ZeroConstructor)
	float                                        AttenuationRadius;                                 // 0x150(0x4)(None)
	float                                        HardnessPercent;                                   // 0x154(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSphereMask* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSphericalParticleOpacity
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                      Density;                                           // 0xB0(0x28)(ZeroConstructor)
	float                                        ConstantDensity;                                   // 0xD8(0x4)(None)
	uint8                                        Pad_18F7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionSphericalParticleOpacity* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSquareRoot
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSquareRoot* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionStaticBool
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	uint8                                        Value : 1;                                         // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        Pad_18F9[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStaticBool* GetDefaultObj();

};

// 0x8 (0xE0 - 0xD8)
// Class Engine.MaterialExpressionStaticBoolParameter
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10xD8(0x1)(None)
	uint8                                        DynamicBranch : 1;                                 // Mask: 0x2, PropSize: 0x10xD8(0x1)(None)
	uint8                                        Pad_18FC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStaticBoolParameter* GetDefaultObj();

};

// 0x30 (0x108 - 0xD8)
// Class Engine.MaterialExpressionStaticComponentMaskParameter
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                      Input;                                             // 0xD8(0x28)(ZeroConstructor)
	uint8                                        DefaultR : 1;                                      // Mask: 0x1, PropSize: 0x10x100(0x1)(None)
	uint8                                        DefaultG : 1;                                      // Mask: 0x2, PropSize: 0x10x100(0x1)(None)
	uint8                                        DefaultB : 1;                                      // Mask: 0x4, PropSize: 0x10x100(0x1)(None)
	uint8                                        DefaultA : 1;                                      // Mask: 0x8, PropSize: 0x10x100(0x1)(None)
	uint8                                        Pad_18FE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStaticComponentMaskParameter* GetDefaultObj();

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionStaticSwitch
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_120 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1901[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0xB8(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xE0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Value;                                             // 0x108(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStaticSwitch* GetDefaultObj();

};

// 0x50 (0x130 - 0xE0)
// Class Engine.MaterialExpressionStaticSwitchParameter
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                      A;                                                 // 0xE0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0x108(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStaticSwitchParameter* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionStep
class UMaterialExpressionStep : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstY;                                            // 0x100(0x4)(None)
	float                                        ConstX;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionStep* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionStrataBSDF
class UMaterialExpressionStrataBSDF : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataBSDF* GetDefaultObj();

};

// 0x348 (0x3F8 - 0xB0)
// Class Engine.MaterialExpressionStrataLegacyConversion
class UMaterialExpressionStrataLegacyConversion : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      Anisotropy;                                        // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x1A0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Tangent;                                           // 0x1C8(0x28)(ZeroConstructor)
	struct FExpressionInput                      SubsurfaceColor;                                   // 0x1F0(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoat;                                         // 0x218(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x240(0x28)(ZeroConstructor)
	struct FExpressionInput                      Opacity;                                           // 0x268(0x28)(ZeroConstructor)
	struct FExpressionInput                      TransmittanceColor;                                // 0x290(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterScatteringCoefficients;                       // 0x2B8(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterAbsorptionCoefficients;                       // 0x2E0(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterPhaseG;                                       // 0x308(0x28)(ZeroConstructor)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x330(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoatNormal;                                   // 0x358(0x28)(ZeroConstructor)
	struct FExpressionInput                      CustomTangent;                                     // 0x380(0x28)(ZeroConstructor)
	struct FShadingModelMaterialInput            ShadingModel;                                      // 0x3A8(0x28)(ZeroConstructor)
	uint8                                        Pad_1910[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x3D8(0x8)(ZeroConstructor)
	struct FStrataMaterialInfo                   ConvertedStrataMaterialInfo;                       // 0x3E0(0x18)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataLegacyConversion* GetDefaultObj();

};

// 0x290 (0x340 - 0xB0)
// Class Engine.MaterialExpressionStrataSlabBSDF
class UMaterialExpressionStrataSlabBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DiffuseAlbedo;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      F0;                                                // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      F90;                                               // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      Anisotropy;                                        // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      Tangent;                                           // 0x1A0(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSSMFP;                                            // 0x1C8(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSSMFPScale;                                       // 0x1F0(0x28)(ZeroConstructor)
	struct FExpressionInput                      SSSPhaseAnisotropy;                                // 0x218(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x240(0x28)(ZeroConstructor)
	struct FExpressionInput                      SecondRoughness;                                   // 0x268(0x28)(ZeroConstructor)
	struct FExpressionInput                      SecondRoughnessWeight;                             // 0x290(0x28)(ZeroConstructor)
	struct FExpressionInput                      FuzzRoughness;                                     // 0x2B8(0x28)(ZeroConstructor)
	struct FExpressionInput                      FuzzAmount;                                        // 0x2E0(0x28)(ZeroConstructor)
	struct FExpressionInput                      FuzzColor;                                         // 0x308(0x28)(ZeroConstructor)
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x330(0x8)(ZeroConstructor)
	uint8                                        bUseSSSDiffusion : 1;                              // Mask: 0x1, PropSize: 0x10x338(0x1)(None)
	uint8                                        Pad_1920[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataSlabBSDF* GetDefaultObj();

};

// 0x118 (0x1C8 - 0xB0)
// Class Engine.MaterialExpressionStrataSimpleClearCoatBSDF
class UMaterialExpressionStrataSimpleClearCoatBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DiffuseAlbedo;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      F0;                                                // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoatCoverage;                                 // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1A0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataSimpleClearCoatBSDF* GetDefaultObj();

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
class UMaterialExpressionStrataVolumetricFogCloudBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Albedo;                                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Extinction;                                        // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      AmbientOcclusion;                                  // 0x128(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataVolumetricFogCloudBSDF* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataUnlitBSDF
class UMaterialExpressionStrataUnlitBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      EmissiveColor;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      TransmittanceColor;                                // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataUnlitBSDF* GetDefaultObj();

};

// 0x118 (0x1C8 - 0xB0)
// Class Engine.MaterialExpressionStrataHairBSDF
class UMaterialExpressionStrataHairBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Scatter;                                           // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      Backlit;                                           // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      Tangent;                                           // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1A0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataHairBSDF* GetDefaultObj();

};

// 0x148 (0x1F8 - 0xB0)
// Class Engine.MaterialExpressionStrataEyeBSDF
class UMaterialExpressionStrataEyeBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DiffuseColor;                                      // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      CorneaNormal;                                      // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      IrisNormal;                                        // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      IrisPlaneNormal;                                   // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      IrisMask;                                          // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      IrisDistance;                                      // 0x1A0(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1C8(0x28)(ZeroConstructor)
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x1F0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataEyeBSDF* GetDefaultObj();

};

// 0x1B8 (0x268 - 0xB0)
// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
class UMaterialExpressionStrataSingleLayerWaterBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      Normal;                                            // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      TopMaterialOpacity;                                // 0x1A0(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterAlbedo;                                       // 0x1C8(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterExtinction;                                   // 0x1F0(0x28)(ZeroConstructor)
	struct FExpressionInput                      WaterPhaseG;                                       // 0x218(0x28)(ZeroConstructor)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x240(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataSingleLayerWaterBSDF* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionStrataLightFunction
class UMaterialExpressionStrataLightFunction : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Color;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataLightFunction* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataPostProcess
class UMaterialExpressionStrataPostProcess : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Color;                                             // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Opacity;                                           // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataPostProcess* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataUI
class UMaterialExpressionStrataUI : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Color;                                             // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Opacity;                                           // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataUI* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataConvertToDecal
class UMaterialExpressionStrataConvertToDecal : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DecalMaterial;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Coverage;                                          // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataConvertToDecal* GetDefaultObj();

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionStrataHorizontalMixing
class UMaterialExpressionStrataHorizontalMixing : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Background;                                        // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Foreground;                                        // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Mix;                                               // 0x100(0x28)(ZeroConstructor)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x128(0x1)(None)
	uint8                                        Pad_194B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataHorizontalMixing* GetDefaultObj();

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionStrataVerticalLayering
class UMaterialExpressionStrataVerticalLayering : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Top;                                               // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Base;                                              // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Thickness;                                         // 0x100(0x28)(ZeroConstructor)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x128(0x1)(None)
	uint8                                        Pad_1952[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataVerticalLayering* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionStrataAdd
class UMaterialExpressionStrataAdd : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x100(0x1)(None)
	uint8                                        Pad_1954[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataAdd* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataWeight
class UMaterialExpressionStrataWeight : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Weight;                                            // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataWeight* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionStrataUtilityBase
class UMaterialExpressionStrataUtilityBase : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataUtilityBase* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataTransmittanceToMFP
class UMaterialExpressionStrataTransmittanceToMFP : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Thickness;                                         // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataTransmittanceToMFP* GetDefaultObj();

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionStrataMetalnessToDiffuseAlbedoF0
class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0 : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataHazinessToSecondaryRoughness
class UMaterialExpressionStrataHazinessToSecondaryRoughness : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      BaseRoughness;                                     // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Haziness;                                          // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataHazinessToSecondaryRoughness* GetDefaultObj();

};

// 0xC8 (0x178 - 0xB0)
// Class Engine.MaterialExpressionStrataThinFilm
class UMaterialExpressionStrataThinFilm : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      Normal;                                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      F0;                                                // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      F90;                                               // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      Thickness;                                         // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      IOR;                                               // 0x150(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionStrataThinFilm* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionSubsurfaceMediumMaterialOutput
class UMaterialExpressionSubsurfaceMediumMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      MeanFreePath;                                      // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      ScatteringDistribution;                            // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSubsurfaceMediumMaterialOutput* GetDefaultObj();

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionSubtract
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(ZeroConstructor)
	float                                        ConstA;                                            // 0x100(0x4)(None)
	float                                        ConstB;                                            // 0x104(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionSubtract* GetDefaultObj();

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionSwitch
class UMaterialExpressionSwitch : public UMaterialExpression
{
public:
	class FString                                Description;                                       // 0xB0(0x10)(None)
	struct FExpressionInput                      SwitchValue;                                       // 0xC0(0x28)(ZeroConstructor)
	float                                        ConstSwitchValue;                                  // 0xE8(0x4)(None)
	uint8                                        Pad_1970[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Default;                                           // 0xF0(0x28)(ZeroConstructor)
	float                                        ConstDefault;                                      // 0x118(0x4)(None)
	uint8                                        Pad_1971[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSwitchCustomInput>            Inputs;                                            // 0x120(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionSwitch* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTangent
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	float                                        Period;                                            // 0xD8(0x4)(None)
	uint8                                        Pad_1973[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTangent* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionTangentOutput
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionTangentOutput* GetDefaultObj();

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionTemporalSobol
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                      Index;                                             // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Seed;                                              // 0xD8(0x28)(ZeroConstructor)
	uint32                                       ConstIndex;                                        // 0x100(0x4)(None)
	uint8                                        Pad_1976[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ConstSeed;                                         // 0x108(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionTemporalSobol* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionTextureCoordinate
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int32                                        CoordinateIndex;                                   // 0xB0(0x4)(None)
	float                                        UTiling;                                           // 0xB4(0x4)(None)
	float                                        VTiling;                                           // 0xB8(0x4)(None)
	uint8                                        UnMirrorU : 1;                                     // Mask: 0x1, PropSize: 0x10xBC(0x1)(None)
	uint8                                        UnMirrorV : 1;                                     // Mask: 0x2, PropSize: 0x10xBC(0x1)(None)
	uint8                                        Pad_1979[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureCoordinate* GetDefaultObj();

};

// 0x0 (0xC0 - 0xC0)
// Class Engine.MaterialExpressionTextureObject
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureObject* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureObjectParameter
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureObjectParameter* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTextureProperty
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureObject;                                     // 0xB0(0x28)(ZeroConstructor)
	enum class EMaterialExposedTextureProperty   Property;                                          // 0xD8(0x1)(None)
	uint8                                        Pad_1980[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureProperty* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameter2DArray
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameter2DArray* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterCube
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameterCube* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameterCubeArray* GetDefaultObj();

};

// 0x8 (0x248 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterSubUV
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x240(0x1)(None)
	uint8                                        Pad_1991[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameterSubUV* GetDefaultObj();

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterVolume
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTextureSampleParameterVolume* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionThinTranslucentMaterialOutput* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionTime
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	uint8                                        bIgnorePause : 1;                                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bOverride_Period : 1;                              // Mask: 0x2, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_121 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_19A2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Period;                                            // 0xB4(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionTime* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTransform
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	enum class EMaterialVectorCoordTransformSource TransformSourceType;                               // 0xD8(0x1)(None)
	enum class EMaterialVectorCoordTransform     TransformType;                                     // 0xD9(0x1)(None)
	uint8                                        Pad_19AA[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTransform* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTransformPosition
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	enum class EMaterialPositionTransformSource  TransformSourceType;                               // 0xD8(0x1)(None)
	enum class EMaterialPositionTransformSource  TransformType;                                     // 0xD9(0x1)(None)
	uint8                                        Pad_19B3[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionTransformPosition* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionTruncate
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionTruncate* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionTruncateLWC
class UMaterialExpressionTruncateLWC : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionTruncateLWC* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionTwoSidedSign
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionTwoSidedSign* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionVectorNoise
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)
	enum class EVectorNoiseFunction              NoiseFunction;                                     // 0xD8(0x1)(None)
	uint8                                        Pad_19DF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Quality;                                           // 0xDC(0x4)(None)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10xE0(0x1)(None)
	uint8                                        BitPad_122 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_19E0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       TileSize;                                          // 0xE4(0x4)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionVectorNoise* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexColor
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionVertexColor* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionVertexInterpolator
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(ZeroConstructor)
	uint8                                        Pad_19E4[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionVertexInterpolator* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexNormalWS
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionVertexNormalWS* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexTangentWS
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionVertexTangentWS* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionViewProperty
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	enum class EMaterialExposedViewProperty      Property;                                          // 0xB0(0x1)(None)
	uint8                                        Pad_19EA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionViewProperty* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionViewSize
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionViewSize* GetDefaultObj();

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      No;                                                // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Yes;                                               // 0xD8(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionVirtualTextureFeatureSwitch* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionVolumetricAdvancedMaterialInput* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput* GetDefaultObj();

};

// 0x140 (0x1F0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      PhaseG;                                            // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      PhaseG2;                                           // 0xD8(0x28)(ZeroConstructor)
	struct FExpressionInput                      PhaseBlend;                                        // 0x100(0x28)(ZeroConstructor)
	struct FExpressionInput                      MultiScatteringContribution;                       // 0x128(0x28)(ZeroConstructor)
	struct FExpressionInput                      MultiScatteringOcclusion;                          // 0x150(0x28)(ZeroConstructor)
	struct FExpressionInput                      MultiScatteringEccentricity;                       // 0x178(0x28)(ZeroConstructor)
	struct FExpressionInput                      ConservativeDensity;                               // 0x1A0(0x28)(ZeroConstructor)
	float                                        ConstPhaseG;                                       // 0x1C8(0x4)(None)
	float                                        ConstPhaseG2;                                      // 0x1CC(0x4)(None)
	float                                        ConstPhaseBlend;                                   // 0x1D0(0x4)(None)
	bool                                         PerSamplePhaseEvaluation;                          // 0x1D4(0x1)(None)
	uint8                                        Pad_1A2E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MultiScatteringApproximationOctaveCount;           // 0x1D8(0x4)(None)
	float                                        ConstMultiScatteringContribution;                  // 0x1DC(0x4)(None)
	float                                        ConstMultiScatteringOcclusion;                     // 0x1E0(0x4)(None)
	float                                        ConstMultiScatteringEccentricity;                  // 0x1E4(0x4)(None)
	bool                                         bGroundContribution;                               // 0x1E8(0x1)(None)
	bool                                         bGrayScaleMaterial;                                // 0x1E9(0x1)(None)
	bool                                         bRayMarchVolumeShadow;                             // 0x1EA(0x1)(None)
	bool                                         bClampMultiScatteringContribution;                 // 0x1EB(0x1)(None)
	uint8                                        Pad_1A2F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionVolumetricAdvancedMaterialOutput* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      ContainsMatter;                                    // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput* GetDefaultObj();

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionWhileLoop
class UMaterialExpressionWhileLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 LoopBody;                                          // 0xB0(0x8)(ZeroConstructor)
	struct FExpressionExecOutput                 Completed;                                         // 0xB8(0x8)(ZeroConstructor)
	struct FExpressionInput                      Condition;                                         // 0xC0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionWhileLoop* GetDefaultObj();

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionWorldPosition
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	enum class EWorldPositionIncludedOffsets     WorldPositionShaderOffset;                         // 0xB0(0x1)(None)
	uint8                                        Pad_1AE0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionWorldPosition* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MaterialFunctionInterfaceEditorOnlyData
class UMaterialFunctionInterfaceEditorOnlyData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMaterialFunctionInterfaceEditorOnlyData* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class Engine.MaterialFunctionEditorOnlyData
class UMaterialFunctionEditorOnlyData : public UMaterialFunctionInterfaceEditorOnlyData
{
public:
	struct FMaterialExpressionCollection         ExpressionCollection;                              // 0x28(0x30)(None)

	static class UClass* StaticClass();
	static class UMaterialFunctionEditorOnlyData* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.MaterialFunctionInterface
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(None)
	enum class EMaterialFunctionUsage            MaterialFunctionUsage;                             // 0x38(0x1)(None)
	uint8                                        Pad_1AED[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialFunctionInterface* GetDefaultObj();

};

// 0x18 (0x58 - 0x40)
// Class Engine.MaterialFunction
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	class FString                                Description;                                       // 0x40(0x10)(None)
	uint8                                        bExposeToLibrary : 1;                              // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        bPrefixParameterNames : 1;                         // Mask: 0x2, PropSize: 0x10x50(0x1)(None)
	uint8                                        bEnableExecWire : 1;                               // Mask: 0x4, PropSize: 0x10x50(0x1)(None)
	uint8                                        bEnableNewHLSLGenerator : 1;                       // Mask: 0x8, PropSize: 0x10x50(0x1)(None)
	uint8                                        Pad_1B0F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialFunction* GetDefaultObj();

};

// 0xA0 (0xE0 - 0x40)
// Class Engine.MaterialFunctionInstance
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*            Parent;                                            // 0x40(0x8)(ZeroConstructor)
	class UMaterialFunctionInterface*            Base;                                              // 0x48(0x8)(ZeroConstructor)
	TArray<struct FScalarParameterValue>         ScalarParameterValues;                             // 0x50(0x10)(None)
	TArray<struct FVectorParameterValue>         VectorParameterValues;                             // 0x60(0x10)(None)
	TArray<struct FDoubleVectorParameterValue>   DoubleVectorParameterValues;                       // 0x70(0x10)(None)
	TArray<struct FTextureParameterValue>        TextureParameterValues;                            // 0x80(0x10)(ZeroConstructor)
	TArray<struct FFontParameterValue>           FontParameterValues;                               // 0x90(0x10)(ZeroConstructor)
	TArray<struct FStaticSwitchParameter>        StaticSwitchParameterValues;                       // 0xA0(0x10)(None)
	TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues;                // 0xB0(0x10)(None)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;              // 0xC0(0x10)(ZeroConstructor)
	TArray<struct FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues;                // 0xD0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialFunctionInstance* GetDefaultObj();

};

// 0x0 (0x58 - 0x58)
// Class Engine.MaterialFunctionMaterialLayer
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:

	static class UClass* StaticClass();
	static class UMaterialFunctionMaterialLayer* GetDefaultObj();

};

// 0x0 (0xE0 - 0xE0)
// Class Engine.MaterialFunctionMaterialLayerInstance
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:

	static class UClass* StaticClass();
	static class UMaterialFunctionMaterialLayerInstance* GetDefaultObj();

};

// 0x0 (0x58 - 0x58)
// Class Engine.MaterialFunctionMaterialLayerBlend
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:

	static class UClass* StaticClass();
	static class UMaterialFunctionMaterialLayerBlend* GetDefaultObj();

};

// 0x0 (0xE0 - 0xE0)
// Class Engine.MaterialFunctionMaterialLayerBlendInstance
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:

	static class UClass* StaticClass();
	static class UMaterialFunctionMaterialLayerBlendInstance* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.MaterialInstanceActor
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                        TargetActors;                                      // 0x4B8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMaterialInstanceActor* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.MaterialInterfaceEditorOnlyData
class UMaterialInterfaceEditorOnlyData : public UObject
{
public:
	uint8                                        Pad_1B18[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialInterfaceEditorOnlyData* GetDefaultObj();

};

// 0xF8 (0x120 - 0x28)
// Class Engine.MaterialParameterCollectionInstance
class UMaterialParameterCollectionInstance : public UObject
{
public:
	uint8                                        Pad_1B19[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialParameterCollection*          Collection;                                        // 0x30(0x8)(None)
	uint8                                        Pad_1B1A[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialParameterCollectionInstance* GetDefaultObj();

};

// 0x8 (0x570 - 0x568)
// Class Engine.MatineeActorCameraAnim
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                           CameraAnim;                                        // 0x568(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMatineeActorCameraAnim* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MatineeAnimInterface
class IMatineeAnimInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMatineeAnimInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MatineeInterface
class IMatineeInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMatineeInterface* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.MeshBudgetProjectSettings
class UMeshBudgetProjectSettings : public UDeveloperSettings
{
public:
	bool                                         bEnableStaticMeshBudget;                           // 0x38(0x1)(None)
	uint8                                        Pad_1B22[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStaticMeshBudgetInfo>         StaticMeshBudgetInfos;                             // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class UMeshBudgetProjectSettings* GetDefaultObj();

};

// 0x30 (0x68 - 0x38)
// Class Engine.MicroTransactionBase
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                 AvailableProducts;                                 // 0x38(0x10)(None)
	class FString                                LastError;                                         // 0x48(0x10)(None)
	class FString                                LastErrorSolution;                                 // 0x58(0x10)(None)

	static class UClass* StaticClass();
	static class UMicroTransactionBase* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.MorphTarget
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                         BaseSkelMesh;                                      // 0x28(0x8)(None)
	uint8                                        Pad_1B2E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMorphTarget* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavAgentInterface
class INavAgentInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INavAgentInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.NavAreaBase
class UNavAreaBase : public UObject
{
public:
	uint8                                        Pad_1B34[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NavAreaPriority;                                   // 0x2C(0x4)(None)

	static class UClass* StaticClass();
	static class UNavAreaBase* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavEdgeProviderInterface
class INavEdgeProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INavEdgeProviderInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationDataInterface
class INavigationDataInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INavigationDataInterface* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.NavLinkDefinition
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>               Links;                                             // 0x28(0x10)(ZeroConstructor)
	TArray<struct FNavigationSegmentLink>        SegmentLinks;                                      // 0x38(0x10)(None)
	uint8                                        Pad_1B39[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNavLinkDefinition* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavPathObserverInterface
class INavPathObserverInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INavPathObserverInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavRelevantInterface
class INavRelevantInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INavRelevantInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NetworkPredictionInterface
class INetworkPredictionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INetworkPredictionInterface* GetDefaultObj();

};

// 0x198 (0x1C0 - 0x28)
// Class Engine.ParticleEmitter
class UParticleEmitter : public UObject
{
public:
	class FName                                  EmitterName;                                       // 0x28(0x8)(None)
	int32                                        SubUVDataOffset;                                   // 0x30(0x4)(None)
	enum class EEmitterRenderMode                EmitterRenderMode;                                 // 0x34(0x1)(None)
	enum class EParticleSignificanceLevel        SignificanceLevel;                                 // 0x35(0x1)(None)
	uint8                                        Pad_1B8F[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseLegacySpawningBehavior : 1;                    // Mask: 0x1, PropSize: 0x10x37(0x1)(None)
	uint8                                        BitPad_123 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        ConvertedModules : 1;                              // Mask: 0x10, PropSize: 0x10x37(0x1)(None)
	uint8                                        bIsSoloing : 1;                                    // Mask: 0x20, PropSize: 0x10x37(0x1)(None)
	uint8                                        bCookedOut : 1;                                    // Mask: 0x40, PropSize: 0x10x37(0x1)(None)
	uint8                                        bDisabledLODsKeepEmitterAlive : 1;                 // Mask: 0x80, PropSize: 0x10x37(0x1)(None)
	uint8                                        bDisableWhenInsignficant : 1;                      // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_124 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B91[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleLODLevel*>             LODLevels;                                         // 0x40(0x10)(None)
	int32                                        PeakActiveParticles;                               // 0x50(0x4)(None)
	int32                                        InitialAllocationCount;                            // 0x54(0x4)(None)
	float                                        QualityLevelSpawnRateScale;                        // 0x58(0x4)(None)
	uint32                                       DetailModeBitmask;                                 // 0x5C(0x4)(None)
	uint8                                        Pad_1B92[0x160];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleEmitter* GetDefaultObj();

};

// 0x90 (0xB8 - 0x28)
// Class Engine.ParticleLODLevel
class UParticleLODLevel : public UObject
{
public:
	int32                                        Level;                                             // 0x28(0x4)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x2C(0x1)(None)
	uint8                                        BitPad_125 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B99[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleModuleRequired*               RequiredModule;                                    // 0x30(0x8)(ZeroConstructor)
	TArray<class UParticleModule*>               Modules;                                           // 0x38(0x10)(ZeroConstructor)
	class UParticleModuleTypeDataBase*           TypeDataModule;                                    // 0x48(0x8)(ZeroConstructor)
	class UParticleModuleSpawn*                  SpawnModule;                                       // 0x50(0x8)(ZeroConstructor)
	class UParticleModuleEventGenerator*         EventGenerator;                                    // 0x58(0x8)(ZeroConstructor)
	TArray<class UParticleModuleSpawnBase*>      SpawningModules;                                   // 0x60(0x10)(ZeroConstructor)
	TArray<class UParticleModule*>               SpawnModules;                                      // 0x70(0x10)(ZeroConstructor)
	TArray<class UParticleModule*>               UpdateModules;                                     // 0x80(0x10)(ZeroConstructor)
	TArray<class UParticleModuleOrbit*>          OrbitModules;                                      // 0x90(0x10)(ZeroConstructor)
	TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                              // 0xA0(0x10)(None)
	uint8                                        ConvertedModules : 1;                              // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_126 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BA0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PeakActiveParticles;                               // 0xB4(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleLODLevel* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleAccelerationBase
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	uint8                                        bAlwaysInWorldSpace : 1;                           // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_1BA3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleAccelerationBase* GetDefaultObj();

};

// 0x68 (0xA0 - 0x38)
// Class Engine.ParticleModuleAcceleration
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                Acceleration;                                      // 0x38(0x60)(None)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x1, PropSize: 0x10x98(0x1)(None)
	uint8                                        Pad_1BA7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleAcceleration* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.ParticleModuleAccelerationConstant
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                               Acceleration;                                      // 0x38(0x18)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAccelerationConstant* GetDefaultObj();

};

// 0x38 (0x70 - 0x38)
// Class Engine.ParticleModuleAccelerationDrag
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragCoefficient;                                   // 0x38(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 DragCoefficientRaw;                                // 0x40(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAccelerationDrag* GetDefaultObj();

};

// 0x38 (0x70 - 0x38)
// Class Engine.ParticleModuleAccelerationDragScaleOverLife
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragScale;                                         // 0x38(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 DragScaleRaw;                                      // 0x40(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAccelerationDragScaleOverLife* GetDefaultObj();

};

// 0x60 (0x98 - 0x38)
// Class Engine.ParticleModuleAccelerationOverLifetime
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                AccelOverLife;                                     // 0x38(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAccelerationOverLifetime* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleAttractorBase
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleAttractorBase* GetDefaultObj();

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleAttractorLine
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                               EndPoint0;                                         // 0x30(0x18)(None)
	struct FVector                               EndPoint1;                                         // 0x48(0x18)(None)
	struct FRawDistributionFloat                 Range;                                             // 0x60(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 Strength;                                          // 0x90(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAttractorLine* GetDefaultObj();

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleAttractorParticle
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(None)
	struct FRawDistributionFloat                 Range;                                             // 0x38(0x30)(ZeroConstructor)
	uint8                                        bStrengthByDistance : 1;                           // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        BitPad_127 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BB2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 Strength;                                          // 0x70(0x30)(None)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        BitPad_128 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BB4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAttractorParticleSelectionMethod SelectionMethod;                                   // 0xA4(0x1)(None)
	uint8                                        Pad_1BB5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bRenewSource : 1;                                  // Mask: 0x1, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bInheritSourceVel : 1;                             // Mask: 0x2, PropSize: 0x10xA8(0x1)(None)
	uint8                                        BitPad_129 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BB7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastSelIndex;                                      // 0xAC(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAttractorParticle* GetDefaultObj();

};

// 0xC8 (0xF8 - 0x30)
// Class Engine.ParticleModuleAttractorPoint
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                Position;                                          // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 Range;                                             // 0x90(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 Strength;                                          // 0xC0(0x30)(None)
	uint8                                        StrengthByDistance : 1;                            // Mask: 0x1, PropSize: 0x10xF0(0x1)(None)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x2, PropSize: 0x10xF0(0x1)(None)
	uint8                                        bOverrideVelocity : 1;                             // Mask: 0x4, PropSize: 0x10xF0(0x1)(None)
	uint8                                        bUseWorldSpacePosition : 1;                        // Mask: 0x8, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Positive_X : 1;                                    // Mask: 0x10, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x20, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x40, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Negative_X : 1;                                    // Mask: 0x80, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x1, PropSize: 0x10xF1(0x1)(None)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x2, PropSize: 0x10xF1(0x1)(None)
	uint8                                        Pad_1BC0[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleAttractorPoint* GetDefaultObj();

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleAttractorPointGravity
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                               Position;                                          // 0x30(0x18)(None)
	float                                        Radius;                                            // 0x48(0x4)(None)
	uint8                                        Pad_1BC3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDistributionFloat*                    Strength;                                          // 0x50(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 StrengthRaw;                                       // 0x58(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleAttractorPointGravity* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleBeamBase
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleBeamBase* GetDefaultObj();

};

// 0x108 (0x138 - 0x30)
// Class Engine.ParticleModuleBeamModifier
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	enum class EBeamModifierType                 ModifierType;                                      // 0x30(0x1)(None)
	uint8                                        Pad_1BD4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  PositionOptions;                                   // 0x34(0x4)(None)
	struct FRawDistributionVector                Position;                                          // 0x38(0x60)(ZeroConstructor)
	struct FBeamModifierOptions                  TangentOptions;                                    // 0x98(0x4)(None)
	uint8                                        Pad_1BD5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Tangent;                                           // 0xA0(0x60)(ZeroConstructor)
	uint8                                        bAbsoluteTangent : 1;                              // Mask: 0x1, PropSize: 0x10x100(0x1)(None)
	uint8                                        BitPad_12A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BD6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  StrengthOptions;                                   // 0x104(0x4)(None)
	struct FRawDistributionFloat                 Strength;                                          // 0x108(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleBeamModifier* GetDefaultObj();

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.ParticleModuleBeamNoise
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	uint8                                        bLowFreq_Enabled : 1;                              // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_12B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BDF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Frequency;                                         // 0x34(0x4)(None)
	int32                                        Frequency_LowRange;                                // 0x38(0x4)(None)
	uint8                                        Pad_1BE0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseRange;                                        // 0x40(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 NoiseRangeScale;                                   // 0xA0(0x30)(ZeroConstructor)
	uint8                                        bNRScaleEmitterTime : 1;                           // Mask: 0x1, PropSize: 0x10xD0(0x1)(None)
	uint8                                        BitPad_12C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BE1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseSpeed;                                        // 0xD8(0x60)(ZeroConstructor)
	uint8                                        bSmooth : 1;                                       // Mask: 0x1, PropSize: 0x10x138(0x1)(None)
	uint8                                        BitPad_12D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BE2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockRadius;                                   // 0x13C(0x4)(None)
	uint8                                        bNoiseLock : 1;                                    // Mask: 0x1, PropSize: 0x10x140(0x1)(None)
	uint8                                        bOscillate : 1;                                    // Mask: 0x2, PropSize: 0x10x140(0x1)(None)
	uint8                                        BitPad_12E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BE3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockTime;                                     // 0x144(0x4)(None)
	float                                        NoiseTension;                                      // 0x148(0x4)(None)
	uint8                                        bUseNoiseTangents : 1;                             // Mask: 0x1, PropSize: 0x10x14C(0x1)(None)
	uint8                                        BitPad_12F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BE5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseTangentStrength;                              // 0x150(0x30)(ZeroConstructor)
	int32                                        NoiseTessellation;                                 // 0x180(0x4)(None)
	uint8                                        bTargetNoise : 1;                                  // Mask: 0x1, PropSize: 0x10x184(0x1)(None)
	uint8                                        BitPad_130 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BF9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FrequencyDistance;                                 // 0x188(0x4)(None)
	uint8                                        bApplyNoiseScale : 1;                              // Mask: 0x1, PropSize: 0x10x18C(0x1)(None)
	uint8                                        BitPad_131 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BFA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseScale;                                        // 0x190(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleBeamNoise* GetDefaultObj();

};

// 0x118 (0x148 - 0x30)
// Class Engine.ParticleModuleBeamSource
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          SourceMethod;                                      // 0x30(0x1)(None)
	uint8                                        Pad_1BFD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x34(0x8)(None)
	uint8                                        bSourceAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_132 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BFE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Source;                                            // 0x40(0x60)(ZeroConstructor)
	uint8                                        bLockSource : 1;                                   // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        BitPad_133 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BFF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   SourceTangentMethod;                               // 0xA4(0x1)(None)
	uint8                                        Pad_1C00[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                SourceTangent;                                     // 0xA8(0x60)(ZeroConstructor)
	uint8                                        bLockSourceTangent : 1;                            // Mask: 0x1, PropSize: 0x10x108(0x1)(None)
	uint8                                        BitPad_134 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C01[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SourceStrength;                                    // 0x110(0x30)(None)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x140(0x1)(None)
	uint8                                        Pad_1C02[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleBeamSource* GetDefaultObj();

};

// 0x120 (0x150 - 0x30)
// Class Engine.ParticleModuleBeamTarget
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          TargetMethod;                                      // 0x30(0x1)(None)
	uint8                                        Pad_1C04[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TargetName;                                        // 0x34(0x8)(None)
	uint8                                        Pad_1C05[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Target;                                            // 0x40(0x60)(ZeroConstructor)
	uint8                                        bTargetAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bLockTarget : 1;                                   // Mask: 0x2, PropSize: 0x10xA0(0x1)(None)
	uint8                                        BitPad_135 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C06[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   TargetTangentMethod;                               // 0xA4(0x1)(None)
	uint8                                        Pad_1C07[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                TargetTangent;                                     // 0xA8(0x60)(ZeroConstructor)
	uint8                                        bLockTargetTangent : 1;                            // Mask: 0x1, PropSize: 0x10x108(0x1)(None)
	uint8                                        BitPad_136 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C09[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TargetStrength;                                    // 0x110(0x30)(None)
	uint8                                        bLockTargetStength : 1;                            // Mask: 0x1, PropSize: 0x10x140(0x1)(None)
	uint8                                        BitPad_137 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C0A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockRadius;                                        // 0x144(0x4)(None)
	uint8                                        Pad_1C0B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleBeamTarget* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCameraBase
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleCameraBase* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleCameraOffset
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                 CameraOffset;                                      // 0x30(0x30)(None)
	uint8                                        bSpawnTimeOnly : 1;                                // Mask: 0x1, PropSize: 0x10x60(0x1)(None)
	uint8                                        BitPad_138 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C0D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod;                                      // 0x64(0x1)(None)
	uint8                                        Pad_1C0E[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleCameraOffset* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCollisionBase
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleCollisionBase* GetDefaultObj();

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.ParticleModuleCollision
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                DampingFactor;                                     // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionVector                DampingFactorRotation;                             // 0x90(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 MaxCollisions;                                     // 0xF0(0x30)(ZeroConstructor)
	enum class EParticleCollisionComplete        CollisionCompletionOption;                         // 0x120(0x1)(None)
	uint8                                        Pad_1C17[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EObjectTypeQuery>          CollisionTypes;                                    // 0x128(0x10)(None)
	uint8                                        Pad_1C18[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyPhysics : 1;                                 // Mask: 0x1, PropSize: 0x10x140(0x1)(None)
	uint8                                        bIgnoreTriggerVolumes : 1;                         // Mask: 0x2, PropSize: 0x10x140(0x1)(None)
	uint8                                        BitPad_139 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C19[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 ParticleMass;                                      // 0x148(0x30)(ZeroConstructor)
	float                                        DirScalar;                                         // 0x178(0x4)(None)
	uint8                                        bPawnsDoNotDecrementCount : 1;                     // Mask: 0x1, PropSize: 0x10x17C(0x1)(None)
	uint8                                        bOnlyVerticalNormalsDecrementCount : 1;            // Mask: 0x2, PropSize: 0x10x17C(0x1)(None)
	uint8                                        BitPad_13A : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C1A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VerticalFudgeFactor;                               // 0x180(0x4)(None)
	uint8                                        Pad_1C1C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 DelayAmount;                                       // 0x188(0x30)(None)
	uint8                                        bDropDetail : 1;                                   // Mask: 0x1, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        bCollideOnlyIfVisible : 1;                         // Mask: 0x2, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        bIgnoreSourceActor : 1;                            // Mask: 0x4, PropSize: 0x10x1B8(0x1)(None)
	uint8                                        BitPad_13B : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C1E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxCollisionDistance;                              // 0x1BC(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleCollision* GetDefaultObj();

};

// 0x78 (0xA8 - 0x30)
// Class Engine.ParticleModuleCollisionGPU
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                 Resilience;                                        // 0x30(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 ResilienceScaleOverLife;                           // 0x60(0x30)(None)
	float                                        Friction;                                          // 0x90(0x4)(None)
	float                                        RandomSpread;                                      // 0x94(0x4)(None)
	float                                        RandomDistribution;                                // 0x98(0x4)(None)
	float                                        RadiusScale;                                       // 0x9C(0x4)(None)
	float                                        RadiusBias;                                        // 0xA0(0x4)(None)
	enum class EParticleCollisionResponse        Response;                                          // 0xA4(0x1)(None)
	enum class EParticleCollisionMode            CollisionMode;                                     // 0xA5(0x1)(None)
	uint8                                        Pad_1C22[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleCollisionGPU* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleColorBase
class UParticleModuleColorBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleColorBase* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColor
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                StartColor;                                        // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 StartAlpha;                                        // 0x90(0x30)(None)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xC0(0x1)(None)
	uint8                                        Pad_1C30[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleColor* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColorOverLife
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorOverLife;                                     // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 AlphaOverLife;                                     // 0x90(0x30)(None)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xC0(0x1)(None)
	uint8                                        Pad_1C33[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleColorOverLife* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColorScaleOverLife
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 AlphaScaleOverLife;                                // 0x90(0x30)(None)
	uint8                                        bEmitterTime : 1;                                  // Mask: 0x1, PropSize: 0x10xC0(0x1)(None)
	uint8                                        Pad_1C36[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleColorScaleOverLife* GetDefaultObj();

};

// 0x20 (0xE8 - 0xC8)
// Class Engine.ParticleModuleColor_Seeded
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC8(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleColor_Seeded* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleEventBase
class UParticleModuleEventBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleEventBase* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventGenerator
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>   Events;                                            // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UParticleModuleEventGenerator* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventReceiverBase
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	enum class EParticleEventType                EventGeneratorType;                                // 0x30(0x1)(None)
	uint8                                        Pad_1C43[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  EventName;                                         // 0x34(0x8)(None)
	uint8                                        Pad_1C44[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleEventReceiverBase* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class Engine.ParticleModuleEventReceiverKillParticles
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	uint8                                        bStopSpawning : 1;                                 // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        Pad_1C49[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleEventReceiverKillParticles* GetDefaultObj();

};

// 0xB0 (0xF0 - 0x40)
// Class Engine.ParticleModuleEventReceiverSpawn
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                 SpawnCount;                                        // 0x40(0x30)(ZeroConstructor)
	uint8                                        bUseParticleTime : 1;                              // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        bUsePSysLocation : 1;                              // Mask: 0x2, PropSize: 0x10x70(0x1)(None)
	uint8                                        bInheritVelocity : 1;                              // Mask: 0x4, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_13D : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C4E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                InheritVelocityScale;                              // 0x78(0x60)(ZeroConstructor)
	TArray<class UPhysicalMaterial*>             PhysicalMaterials;                                 // 0xD8(0x10)(None)
	uint8                                        bBanPhysicalMaterials : 1;                         // Mask: 0x1, PropSize: 0x10xE8(0x1)(None)
	uint8                                        Pad_1C50[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleEventReceiverSpawn* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ParticleModuleEventSendToGame
class UParticleModuleEventSendToGame : public UObject
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleEventSendToGame* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleKillBase
class UParticleModuleKillBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleKillBase* GetDefaultObj();

};

// 0xC8 (0xF8 - 0x30)
// Class Engine.ParticleModuleKillBox
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                LowerLeftCorner;                                   // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionVector                UpperRightCorner;                                  // 0x90(0x60)(None)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10xF0(0x1)(None)
	uint8                                        bKillInside : 1;                                   // Mask: 0x2, PropSize: 0x10xF0(0x1)(None)
	uint8                                        bAxisAlignedAndFixedSize : 1;                      // Mask: 0x4, PropSize: 0x10xF0(0x1)(None)
	uint8                                        Pad_1C58[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleKillBox* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleKillHeight
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                 Height;                                            // 0x30(0x30)(None)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10x60(0x1)(None)
	uint8                                        bFloor : 1;                                        // Mask: 0x2, PropSize: 0x10x60(0x1)(None)
	uint8                                        bApplyPSysScale : 1;                               // Mask: 0x4, PropSize: 0x10x60(0x1)(None)
	uint8                                        Pad_1C5B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleKillHeight* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLifetimeBase
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleLifetimeBase* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleLifetime
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                 LifeTime;                                          // 0x30(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLifetime* GetDefaultObj();

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleLifetime_Seeded
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLifetime_Seeded* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLightBase
class UParticleModuleLightBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleLightBase* GetDefaultObj();

};

// 0x110 (0x140 - 0x30)
// Class Engine.ParticleModuleLight
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                         bUseInverseSquaredFalloff;                         // 0x30(0x1)(None)
	bool                                         bAffectsTranslucency;                              // 0x31(0x1)(None)
	uint8                                        Pad_1C80[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideInverseExposureBlend : 1;                 // Mask: 0x1, PropSize: 0x10x34(0x1)(None)
	uint8                                        BitPad_13E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C81[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreviewLightRadius;                               // 0x38(0x1)(None)
	uint8                                        Pad_1C82[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnFraction;                                     // 0x3C(0x4)(None)
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x40(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 BrightnessOverLife;                                // 0xA0(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 RadiusScale;                                       // 0xD0(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 LightExponent;                                     // 0x100(0x30)(None)
	float                                        InverseExposureBlend;                              // 0x130(0x4)(None)
	struct FLightingChannels                     LightingChannels;                                  // 0x134(0x1)(None)
	uint8                                        Pad_1C83[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricScatteringIntensity;                     // 0x138(0x4)(None)
	bool                                         bHighQualityLights;                                // 0x13C(0x1)(None)
	bool                                         bShadowCastingLights;                              // 0x13D(0x1)(None)
	uint8                                        Pad_1C84[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleLight* GetDefaultObj();

};

// 0x20 (0x160 - 0x140)
// Class Engine.ParticleModuleLight_Seeded
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x140(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLight_Seeded* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLocationBase
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleLocationBase* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleLocation
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartLocation;                                     // 0x30(0x60)(None)
	float                                        DistributeOverNPoints;                             // 0x90(0x4)(None)
	float                                        DistributeThreshold;                               // 0x94(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocation* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleLocationBoneSocket
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	enum class ELocationBoneSocketSource         SourceType;                                        // 0x30(0x1)(None)
	uint8                                        Pad_1C8D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x38(0x18)(None)
	TArray<struct FLocationBoneSocketInfo>       SourceLocations;                                   // 0x50(0x10)(None)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod;                                   // 0x60(0x1)(None)
	uint8                                        Pad_1C8E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x64(0x1)(None)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x64(0x1)(None)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x64(0x1)(None)
	uint8                                        BitPad_13F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C90[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x68(0x4)(None)
	class FName                                  SkelMeshActorParamName;                            // 0x6C(0x8)(None)
	int32                                        NumPreSelectedIndices;                             // 0x74(0x4)(None)
	uint8                                        Pad_1E3A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleLocationBoneSocket* GetDefaultObj();

};

// 0x180 (0x1B0 - 0x30)
// Class Engine.ParticleModuleLocationDirect
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                Location;                                          // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionVector                LocationOffset;                                    // 0x90(0x60)(ZeroConstructor)
	struct FRawDistributionVector                ScaleFactor;                                       // 0xF0(0x60)(ZeroConstructor)
	struct FRawDistributionVector                Direction;                                         // 0x150(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationDirect* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class Engine.ParticleModuleLocationEmitter
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(None)
	enum class ELocationEmitterSelectionMethod   SelectionMethod;                                   // 0x38(0x1)(None)
	uint8                                        Pad_1E59[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        InheritSourceVelocity : 1;                         // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_14E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E61[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceVelocityScale;                        // 0x40(0x4)(None)
	uint8                                        bInheritSourceRotation : 1;                        // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        BitPad_14F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E62[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceRotationScale;                        // 0x48(0x4)(None)
	uint8                                        Pad_1E63[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleLocationEmitter* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleLocationEmitterDirect
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationEmitterDirect* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveBase
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	uint8                                        Positive_X : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x2, PropSize: 0x10x30(0x1)(None)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x4, PropSize: 0x10x30(0x1)(None)
	uint8                                        Negative_X : 1;                                    // Mask: 0x8, PropSize: 0x10x30(0x1)(None)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x10, PropSize: 0x10x30(0x1)(None)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x20, PropSize: 0x10x30(0x1)(None)
	uint8                                        SurfaceOnly : 1;                                   // Mask: 0x40, PropSize: 0x10x30(0x1)(None)
	uint8                                        Velocity : 1;                                      // Mask: 0x80, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_1E6A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 VelocityScale;                                     // 0x38(0x30)(ZeroConstructor)
	struct FRawDistributionVector                StartLocation;                                     // 0x68(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveBase* GetDefaultObj();

};

// 0x70 (0x138 - 0xC8)
// Class Engine.ParticleModuleLocationPrimitiveCylinder
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	uint8                                        RadialVelocity : 1;                                // Mask: 0x1, PropSize: 0x10xC8(0x1)(None)
	uint8                                        BitPad_150 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E6E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 StartRadius;                                       // 0xD0(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 StartHeight;                                       // 0x100(0x30)(ZeroConstructor)
	enum class ECylinderHeightAxis               HeightAxis;                                        // 0x130(0x1)(None)
	uint8                                        Pad_1E6F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveCylinder* GetDefaultObj();

};

// 0x20 (0x158 - 0x138)
// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x138(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveCylinder_Seeded* GetDefaultObj();

};

// 0x30 (0xF8 - 0xC8)
// Class Engine.ParticleModuleLocationPrimitiveSphere
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                 StartRadius;                                       // 0xC8(0x30)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveSphere* GetDefaultObj();

};

// 0x20 (0x118 - 0xF8)
// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xF8(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveSphere_Seeded* GetDefaultObj();

};

// 0xF0 (0x120 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveTriangle
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartOffset;                                       // 0x30(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 Height;                                            // 0x90(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 Angle;                                             // 0xC0(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 Thickness;                                         // 0xF0(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationPrimitiveTriangle* GetDefaultObj();

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleLocationSkelVertSurface
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	enum class ELocationSkelVertSurfaceSource    SourceType;                                        // 0x30(0x1)(None)
	uint8                                        Pad_1EB0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x38(0x18)(None)
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x50(0x1)(None)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_153 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EB1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x54(0x4)(None)
	class FName                                  SkelMeshActorParamName;                            // 0x58(0x8)(None)
	TArray<class FName>                          ValidAssociatedBones;                              // 0x60(0x10)(None)
	uint8                                        bEnforceNormalCheck : 1;                           // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_154 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EB3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalToCompare;                                   // 0x78(0x18)(None)
	float                                        NormalCheckToleranceDegrees;                       // 0x90(0x4)(None)
	float                                        NormalCheckTolerance;                              // 0x94(0x4)(None)
	TArray<int32>                                ValidMaterialIndices;                              // 0x98(0x10)(None)
	uint8                                        bInheritVertexColor : 1;                           // Mask: 0x1, PropSize: 0x10xA8(0x1)(None)
	uint8                                        bInheritUV : 1;                                    // Mask: 0x2, PropSize: 0x10xA8(0x1)(None)
	uint8                                        BitPad_155 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EB6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       InheritUVChannel;                                  // 0xAC(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationSkelVertSurface* GetDefaultObj();

};

// 0x0 (0x98 - 0x98)
// Class Engine.ParticleModuleLocationWorldOffset
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleLocationWorldOffset* GetDefaultObj();

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleLocationWorldOffset_Seeded
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocationWorldOffset_Seeded* GetDefaultObj();

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleLocation_Seeded
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleLocation_Seeded* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleMaterialBase
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleMaterialBase* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleMeshMaterial
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>            MeshMaterials;                                     // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UParticleModuleMeshMaterial* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationBase
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleRotationBase* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleMeshRotation
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                StartRotation;                                     // 0x30(0x60)(None)
	uint8                                        bInheritParent : 1;                                // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        Pad_1EC1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotation* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationRateBase
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleRotationRateBase* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleMeshRotationRate
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                StartRotationRate;                                 // 0x30(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotationRate* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotationRateMultiplyLife* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateOverLife
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                RotRate;                                           // 0x30(0x60)(None)
	uint8                                        bScaleRotRate : 1;                                 // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        Pad_1EC6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotationRateOverLife* GetDefaultObj();

};

// 0x20 (0xB0 - 0x90)
// Class Engine.ParticleModuleMeshRotationRate_Seeded
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x90(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotationRate_Seeded* GetDefaultObj();

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleMeshRotation_Seeded
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleMeshRotation_Seeded* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrbitBase
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_1EC9[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleOrbitBase* GetDefaultObj();

};

// 0x140 (0x178 - 0x38)
// Class Engine.ParticleModuleOrbit
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	enum class EOrbitChainMode                   ChainMode;                                         // 0x38(0x1)(None)
	uint8                                        Pad_1ECB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                OffsetAmount;                                      // 0x40(0x60)(ZeroConstructor)
	struct FOrbitOptions                         OffsetOptions;                                     // 0xA0(0x4)(None)
	uint8                                        Pad_1ECC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationAmount;                                    // 0xA8(0x60)(ZeroConstructor)
	struct FOrbitOptions                         RotationOptions;                                   // 0x108(0x4)(None)
	uint8                                        Pad_1ECD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationRateAmount;                                // 0x110(0x60)(None)
	struct FOrbitOptions                         RotationRateOptions;                               // 0x170(0x4)(None)
	uint8                                        Pad_1ECE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleOrbit* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleOrientationBase
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleOrientationBase* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrientationAxisLock
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	enum class EParticleAxisLock                 LockAxisFlags;                                     // 0x30(0x1)(None)
	uint8                                        Pad_1EDB[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleOrientationAxisLock* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleParameterBase
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleParameterBase* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleParameterDynamic
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>      DynamicParams;                                     // 0x30(0x10)(None)
	int32                                        UpdateFlags;                                       // 0x40(0x4)(None)
	uint8                                        bUsesVelocity : 1;                                 // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        Pad_1EE0[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleParameterDynamic* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class Engine.ParticleModuleParameterDynamic_Seeded
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x48(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleParameterDynamic_Seeded* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModulePivotOffset
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                             PivotOffset;                                       // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UParticleModulePivotOffset* GetDefaultObj();

};

// 0x148 (0x178 - 0x30)
// Class Engine.ParticleModuleRequired
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                    Material;                                          // 0x30(0x8)(ZeroConstructor)
	float                                        MinFacingCameraBlendDistance;                      // 0x38(0x4)(None)
	float                                        MaxFacingCameraBlendDistance;                      // 0x3C(0x4)(None)
	struct FVector                               EmitterOrigin;                                     // 0x40(0x18)(None)
	struct FRotator                              EmitterRotation;                                   // 0x58(0x18)(None)
	enum class EParticleScreenAlignment          ScreenAlignment;                                   // 0x70(0x1)(None)
	uint8                                        bUseLocalSpace : 1;                                // Mask: 0x1, PropSize: 0x10x71(0x1)(None)
	uint8                                        bKillOnDeactivate : 1;                             // Mask: 0x2, PropSize: 0x10x71(0x1)(None)
	uint8                                        bKillOnCompleted : 1;                              // Mask: 0x4, PropSize: 0x10x71(0x1)(None)
	uint8                                        BitPad_156 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSortMode                 SortMode;                                          // 0x72(0x1)(None)
	uint8                                        bUseLegacyEmitterTime : 1;                         // Mask: 0x1, PropSize: 0x10x73(0x1)(None)
	uint8                                        bRemoveHMDRoll : 1;                                // Mask: 0x2, PropSize: 0x10x73(0x1)(None)
	uint8                                        bSupportLargeWorldCoordinates : 1;                 // Mask: 0x4, PropSize: 0x10x73(0x1)(None)
	uint8                                        bEmitterDurationUseRange : 1;                      // Mask: 0x8, PropSize: 0x10x73(0x1)(None)
	uint8                                        BitPad_157 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        EmitterDuration;                                   // 0x74(0x4)(None)
	struct FRawDistributionFloat                 SpawnRate;                                         // 0x78(0x30)(ZeroConstructor)
	TArray<struct FParticleBurst>                BurstList;                                         // 0xA8(0x10)(None)
	float                                        EmitterDelay;                                      // 0xB8(0x4)(None)
	float                                        EmitterDelayLow;                                   // 0xBC(0x4)(None)
	uint8                                        bDelayFirstLoopOnly : 1;                           // Mask: 0x1, PropSize: 0x10xC0(0x1)(None)
	uint8                                        BitPad_158 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSubUVInterpMethod        InterpolationMethod;                               // 0xC1(0x1)(None)
	uint8                                        bScaleUV : 1;                                      // Mask: 0x1, PropSize: 0x10xC2(0x1)(None)
	uint8                                        bEmitterDelayUseRange : 1;                         // Mask: 0x2, PropSize: 0x10xC2(0x1)(None)
	uint8                                        BitPad_159 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xC3(0x1)(None)
	uint8                                        bOverrideSystemMacroUV : 1;                        // Mask: 0x1, PropSize: 0x10xC4(0x1)(None)
	uint8                                        bUseMaxDrawCount : 1;                              // Mask: 0x2, PropSize: 0x10xC4(0x1)(None)
	uint8                                        BitPad_15A : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0xC5(0x1)(None)
	enum class EEmitterNormalsMode               EmitterNormalsMode;                                // 0xC6(0x1)(None)
	uint8                                        bOrbitModuleAffectsVelocityAlignment : 1;          // Mask: 0x1, PropSize: 0x10xC7(0x1)(None)
	uint8                                        BitPad_15B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	int32                                        SubImages_Horizontal;                              // 0xC8(0x4)(None)
	int32                                        SubImages_Vertical;                                // 0xCC(0x4)(None)
	float                                        RandomImageTime;                                   // 0xD0(0x4)(None)
	int32                                        RandomImageChanges;                                // 0xD4(0x4)(None)
	struct FVector                               MacroUVPosition;                                   // 0xD8(0x18)(None)
	float                                        MacroUVRadius;                                     // 0xF0(0x4)(None)
	enum class EParticleUVFlipMode               UVFlippingMode;                                    // 0xF4(0x1)(None)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0xF5(0x1)(None)
	uint8                                        bDurationRecalcEachLoop : 1;                       // Mask: 0x1, PropSize: 0x10xF6(0x1)(None)
	uint8                                        BitPad_15C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EF5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalsSphereCenter;                               // 0xF8(0x18)(None)
	float                                        AlphaThreshold;                                    // 0x110(0x4)(None)
	int32                                        EmitterLoops;                                      // 0x114(0x4)(None)
	class UTexture2D*                            CutoutTexture;                                     // 0x118(0x8)(None)
	int32                                        MaxDrawCount;                                      // 0x120(0x4)(None)
	float                                        EmitterDurationLow;                                // 0x124(0x4)(None)
	struct FVector                               NormalsCylinderDirection;                          // 0x128(0x18)(None)
	TArray<class FName>                          NamedMaterialOverrides;                            // 0x140(0x10)(None)
	uint8                                        Pad_1EF6[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleRequired* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotation
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 StartRotation;                                     // 0x30(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleRotation* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleRotationOverLifetime
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 RotationOverLife;                                  // 0x30(0x30)(None)
	uint8                                        Scale : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(None)
	uint8                                        Pad_1FC9[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleRotationOverLifetime* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotationRate
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 StartRotationRate;                                 // 0x30(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleRotationRate* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotationRateMultiplyLife
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 LifeMultiplier;                                    // 0x30(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleRotationRateMultiplyLife* GetDefaultObj();

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleRotationRate_Seeded
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleRotationRate_Seeded* GetDefaultObj();

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleRotation_Seeded
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleRotation_Seeded* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSizeBase
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleSizeBase* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleSize
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                StartSize;                                         // 0x30(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleSize* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleSizeMultiplyLife
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x60)(None)
	uint8                                        MultiplyX : 1;                                     // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        MultiplyY : 1;                                     // Mask: 0x2, PropSize: 0x10x90(0x1)(None)
	uint8                                        MultiplyZ : 1;                                     // Mask: 0x4, PropSize: 0x10x90(0x1)(None)
	uint8                                        Pad_1FD8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSizeMultiplyLife* GetDefaultObj();

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleSizeScale
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                SizeScale;                                         // 0x30(0x60)(None)
	uint8                                        EnableX : 1;                                       // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        EnableY : 1;                                       // Mask: 0x2, PropSize: 0x10x90(0x1)(None)
	uint8                                        EnableZ : 1;                                       // Mask: 0x4, PropSize: 0x10x90(0x1)(None)
	uint8                                        Pad_1FD9[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSizeScale* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class Engine.ParticleModuleSizeScaleBySpeed
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                             SpeedScale;                                        // 0x30(0x10)(None)
	struct FVector2D                             MaxScale;                                          // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class UParticleModuleSizeScaleBySpeed* GetDefaultObj();

};

// 0x20 (0xB0 - 0x90)
// Class Engine.ParticleModuleSize_Seeded
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x90(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleSize_Seeded* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleSourceMovement
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                SourceMovementScale;                               // 0x30(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleSourceMovement* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleSpawnBase
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	uint8                                        bProcessSpawnRate : 1;                             // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        bProcessBurstList : 1;                             // Mask: 0x2, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_1FDA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSpawnBase* GetDefaultObj();

};

// 0xA8 (0xE0 - 0x38)
// Class Engine.ParticleModuleSpawn
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                 Rate;                                              // 0x38(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 RateScale;                                         // 0x68(0x30)(ZeroConstructor)
	TArray<struct FParticleBurst>                BurstList;                                         // 0x98(0x10)(None)
	struct FRawDistributionFloat                 BurstScale;                                        // 0xA8(0x30)(None)
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xD8(0x1)(None)
	uint8                                        Pad_1FDB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyGlobalSpawnRateScale : 1;                    // Mask: 0x1, PropSize: 0x10xDC(0x1)(None)
	uint8                                        Pad_1FDC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSpawn* GetDefaultObj();

};

// 0x40 (0x78 - 0x38)
// Class Engine.ParticleModuleSpawnPerUnit
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                        UnitScalar;                                        // 0x38(0x4)(None)
	float                                        MovementTolerance;                                 // 0x3C(0x4)(None)
	struct FRawDistributionFloat                 SpawnPerUnit;                                      // 0x40(0x30)(None)
	float                                        MaxFrameDistance;                                  // 0x70(0x4)(None)
	uint8                                        bIgnoreSpawnRateWhenMoving : 1;                    // Mask: 0x1, PropSize: 0x10x74(0x1)(None)
	uint8                                        bIgnoreMovementAlongX : 1;                         // Mask: 0x2, PropSize: 0x10x74(0x1)(None)
	uint8                                        bIgnoreMovementAlongY : 1;                         // Mask: 0x4, PropSize: 0x10x74(0x1)(None)
	uint8                                        bIgnoreMovementAlongZ : 1;                         // Mask: 0x8, PropSize: 0x10x74(0x1)(None)
	uint8                                        Pad_1FDD[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSpawnPerUnit* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSubUVBase
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleSubUVBase* GetDefaultObj();

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleSubUV
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                       Animation;                                         // 0x30(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 SubImageIndex;                                     // 0x38(0x30)(None)
	uint8                                        bUseRealTime : 1;                                  // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        Pad_1FE5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSubUV* GetDefaultObj();

};

// 0x40 (0xB0 - 0x70)
// Class Engine.ParticleModuleSubUVMovie
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_16A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FE6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 FrameRate;                                         // 0x78(0x30)(ZeroConstructor)
	int32                                        StartingFrame;                                     // 0xA8(0x4)(None)
	uint8                                        Pad_1FE7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleSubUVMovie* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTrailBase
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleTrailBase* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleTrailSource
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	enum class ETrail2SourceMethod               SourceMethod;                                      // 0x30(0x1)(None)
	uint8                                        Pad_1FE8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x34(0x8)(None)
	uint8                                        Pad_1FE9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SourceStrength;                                    // 0x40(0x30)(None)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_16B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FEA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SourceOffsetCount;                                 // 0x74(0x4)(None)
	TArray<struct FVector>                       SourceOffsetDefaults;                              // 0x78(0x10)(None)
	enum class EParticleSourceSelectionMethod    SelectionMethod;                                   // 0x88(0x1)(None)
	uint8                                        Pad_1FEB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bInheritRotation : 1;                              // Mask: 0x1, PropSize: 0x10x8C(0x1)(None)
	uint8                                        Pad_1FEC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleTrailSource* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTypeDataBase
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataBase* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleTypeDataAnimTrail
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x2, PropSize: 0x10x30(0x1)(None)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x4, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_16C : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x34(0x4)(None)
	float                                        DistanceTessellationStepSize;                      // 0x38(0x4)(None)
	float                                        TangentTessellationStepSize;                       // 0x3C(0x4)(None)
	float                                        WidthTessellationStepSize;                         // 0x40(0x4)(None)
	uint8                                        Pad_1FEE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataAnimTrail* GetDefaultObj();

};

// 0x120 (0x150 - 0x30)
// Class Engine.ParticleModuleTypeDataBeam2
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	enum class EBeam2Method                      BeamMethod;                                        // 0x30(0x1)(None)
	uint8                                        Pad_1FEF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TextureTile;                                       // 0x34(0x4)(None)
	float                                        TextureTileDistance;                               // 0x38(0x4)(None)
	int32                                        Sheets;                                            // 0x3C(0x4)(None)
	int32                                        MaxBeamCount;                                      // 0x40(0x4)(None)
	float                                        Speed;                                             // 0x44(0x4)(None)
	int32                                        InterpolationPoints;                               // 0x48(0x4)(None)
	uint8                                        bAlwaysOn : 1;                                     // Mask: 0x1, PropSize: 0x10x4C(0x1)(None)
	uint8                                        BitPad_16D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FF0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UpVectorStepSize;                                  // 0x50(0x4)(None)
	class FName                                  BranchParentName;                                  // 0x54(0x8)(None)
	uint8                                        Pad_1FF1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 Distance;                                          // 0x60(0x30)(ZeroConstructor)
	enum class EBeamTaperMethod                  TaperMethod;                                       // 0x90(0x1)(None)
	uint8                                        Pad_1FF2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TaperFactor;                                       // 0x98(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 TaperScale;                                        // 0xC8(0x30)(None)
	uint8                                        RenderGeometry : 1;                                // Mask: 0x1, PropSize: 0x10xF8(0x1)(None)
	uint8                                        RenderDirectLine : 1;                              // Mask: 0x2, PropSize: 0x10xF8(0x1)(None)
	uint8                                        RenderLines : 1;                                   // Mask: 0x4, PropSize: 0x10xF8(0x1)(None)
	uint8                                        RenderTessellation : 1;                            // Mask: 0x8, PropSize: 0x10xF8(0x1)(None)
	uint8                                        Pad_1FF3[0x57];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataBeam2* GetDefaultObj();

};

// 0x5A0 (0x5D0 - 0x30)
// Class Engine.ParticleModuleTypeDataGpu
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                 EmitterInfo;                                       // 0x30(0x350)(None)
	struct FGPUSpriteResourceData                ResourceData;                                      // 0x380(0x240)(None)
	float                                        CameraMotionBlurAmount;                            // 0x5C0(0x4)(None)
	uint8                                        bClearExistingParticlesOnInit : 1;                 // Mask: 0x1, PropSize: 0x10x5C4(0x1)(None)
	uint8                                        Pad_1FF5[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataGpu* GetDefaultObj();

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleTypeDataMesh
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                           Mesh;                                              // 0x30(0x8)(ZeroConstructor)
	uint8                                        Pad_1FF8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LODSizeScale;                                      // 0x40(0x4)(None)
	uint8                                        bUseStaticMeshLODs : 1;                            // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        CastShadows : 1;                                   // Mask: 0x2, PropSize: 0x10x44(0x1)(None)
	uint8                                        DoCollisions : 1;                                  // Mask: 0x4, PropSize: 0x10x44(0x1)(None)
	uint8                                        BitPad_16E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMeshScreenAlignment              MeshAlignment;                                     // 0x45(0x1)(None)
	uint8                                        bOverrideMaterial : 1;                             // Mask: 0x1, PropSize: 0x10x46(0x1)(None)
	uint8                                        bOverrideDefaultMotionBlurSettings : 1;            // Mask: 0x2, PropSize: 0x10x46(0x1)(None)
	uint8                                        bEnableMotionBlur : 1;                             // Mask: 0x4, PropSize: 0x10x46(0x1)(None)
	uint8                                        BitPad_16F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FF9[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RollPitchYawRange;                                 // 0x48(0x60)(None)
	enum class EParticleAxisLock                 AxisLockOption;                                    // 0xA8(0x1)(None)
	uint8                                        bCameraFacing : 1;                                 // Mask: 0x1, PropSize: 0x10xA9(0x1)(None)
	uint8                                        BitPad_170 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMeshCameraFacingUpAxis           CameraFacingUpAxisOption;                          // 0xAA(0x1)(None)
	enum class EMeshCameraFacingOptions          CameraFacingOption;                                // 0xAB(0x1)(None)
	uint8                                        bApplyParticleRotationAsSpin : 1;                  // Mask: 0x1, PropSize: 0x10xAC(0x1)(None)
	uint8                                        bFaceCameraDirectionRatherThanPosition : 1;        // Mask: 0x2, PropSize: 0x10xAC(0x1)(None)
	uint8                                        bCollisionsConsiderPartilceSize : 1;               // Mask: 0x4, PropSize: 0x10xAC(0x1)(None)
	uint8                                        Pad_1FFB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataMesh* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleTypeDataRibbon
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int32                                        MaxTessellationBetweenParticles;                   // 0x30(0x4)(None)
	int32                                        SheetsPerTrail;                                    // 0x34(0x4)(None)
	int32                                        MaxTrailCount;                                     // 0x38(0x4)(None)
	int32                                        MaxParticleInTrailCount;                           // 0x3C(0x4)(None)
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        bDeadTrailsOnSourceLoss : 1;                       // Mask: 0x2, PropSize: 0x10x40(0x1)(None)
	uint8                                        bClipSourceSegement : 1;                           // Mask: 0x4, PropSize: 0x10x40(0x1)(None)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x8, PropSize: 0x10x40(0x1)(None)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x10, PropSize: 0x10x40(0x1)(None)
	uint8                                        bSpawnInitialParticle : 1;                         // Mask: 0x20, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_173 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2004[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETrailsRenderAxisOption           RenderAxis;                                        // 0x44(0x1)(None)
	uint8                                        Pad_2005[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentSpawningScalar;                             // 0x48(0x4)(None)
	uint8                                        bRenderGeometry : 1;                               // Mask: 0x1, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bRenderSpawnPoints : 1;                            // Mask: 0x2, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bRenderTangents : 1;                               // Mask: 0x4, PropSize: 0x10x4C(0x1)(None)
	uint8                                        bRenderTessellation : 1;                           // Mask: 0x8, PropSize: 0x10x4C(0x1)(None)
	uint8                                        BitPad_174 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2008[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x50(0x4)(None)
	float                                        DistanceTessellationStepSize;                      // 0x54(0x4)(None)
	uint8                                        bEnableTangentDiffInterpScale : 1;                 // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_175 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_200A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentTessellationScalar;                         // 0x5C(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleTypeDataRibbon* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleVectorFieldBase
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldBase* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleVectorFieldGlobal
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	uint8                                        bOverrideGlobalVectorFieldTightness : 1;           // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_177 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2019[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalVectorFieldScale;                            // 0x34(0x4)(None)
	float                                        GlobalVectorFieldTightness;                        // 0x38(0x4)(None)
	uint8                                        Pad_201E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldGlobal* GetDefaultObj();

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleVectorFieldLocal
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                          VectorField;                                       // 0x30(0x8)(None)
	struct FVector                               RelativeTranslation;                               // 0x38(0x18)(None)
	struct FRotator                              RelativeRotation;                                  // 0x50(0x18)(None)
	struct FVector                               RelativeScale3D;                                   // 0x68(0x18)(None)
	float                                        Intensity;                                         // 0x80(0x4)(None)
	float                                        Tightness;                                         // 0x84(0x4)(None)
	uint8                                        bIgnoreComponentTransform : 1;                     // Mask: 0x1, PropSize: 0x10x88(0x1)(None)
	uint8                                        bTileX : 1;                                        // Mask: 0x2, PropSize: 0x10x88(0x1)(None)
	uint8                                        bTileY : 1;                                        // Mask: 0x4, PropSize: 0x10x88(0x1)(None)
	uint8                                        bTileZ : 1;                                        // Mask: 0x8, PropSize: 0x10x88(0x1)(None)
	uint8                                        bUseFixDT : 1;                                     // Mask: 0x10, PropSize: 0x10x88(0x1)(None)
	uint8                                        Pad_2020[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldLocal* GetDefaultObj();

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotation
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               MinInitialRotation;                                // 0x30(0x18)(None)
	struct FVector                               MaxInitialRotation;                                // 0x48(0x18)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldRotation* GetDefaultObj();

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotationRate
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               RotationRate;                                      // 0x30(0x18)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldRotationRate* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleVectorFieldScale
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScale;                                  // 0x30(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 VectorFieldScaleRaw;                               // 0x38(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldScale* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleVectorFieldScaleOverLife
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScaleOverLife;                          // 0x30(0x8)(ZeroConstructor)
	struct FRawDistributionFloat                 VectorFieldScaleOverLifeRaw;                       // 0x38(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVectorFieldScaleOverLife* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleVelocityBase
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	uint8                                        bInWorldSpace : 1;                                 // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x2, PropSize: 0x10x30(0x1)(None)
	uint8                                        Pad_2036[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleVelocityBase* GetDefaultObj();

};

// 0x90 (0xC8 - 0x38)
// Class Engine.ParticleModuleVelocity
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                StartVelocity;                                     // 0x38(0x60)(ZeroConstructor)
	struct FRawDistributionFloat                 StartVelocityRadial;                               // 0x98(0x30)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVelocity* GetDefaultObj();

};

// 0x78 (0xB0 - 0x38)
// Class Engine.ParticleModuleVelocityCone
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                 Angle;                                             // 0x38(0x30)(ZeroConstructor)
	struct FRawDistributionFloat                 Velocity;                                          // 0x68(0x30)(None)
	struct FVector                               Direction;                                         // 0x98(0x18)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVelocityCone* GetDefaultObj();

};

// 0x60 (0x98 - 0x38)
// Class Engine.ParticleModuleVelocityInheritParent
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                Scale;                                             // 0x38(0x60)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVelocityInheritParent* GetDefaultObj();

};

// 0x68 (0xA0 - 0x38)
// Class Engine.ParticleModuleVelocityOverLifetime
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                VelOverLife;                                       // 0x38(0x60)(None)
	uint8                                        Absolute : 1;                                      // Mask: 0x1, PropSize: 0x10x98(0x1)(None)
	uint8                                        Pad_203E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleVelocityOverLifetime* GetDefaultObj();

};

// 0x20 (0xE8 - 0xC8)
// Class Engine.ParticleModuleVelocity_Seeded
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC8(0x20)(None)

	static class UClass* StaticClass();
	static class UParticleModuleVelocity_Seeded* GetDefaultObj();

};

// 0x0 (0x1C0 - 0x1C0)
// Class Engine.ParticleSpriteEmitter
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static class UClass* StaticClass();
	static class UParticleSpriteEmitter* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.ParticleSystemReplay
class UParticleSystemReplay : public UObject
{
public:
	int32                                        ClipIDNumber;                                      // 0x28(0x4)(None)
	uint8                                        Pad_2040[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleSystemReplay* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PathFollowingAgentInterface
class IPathFollowingAgentInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPathFollowingAgentInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsObjectBlueprintLibrary
class UPhysicsObjectBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPhysicsObjectBlueprintLibrary* GetDefaultObj();

	void GetPhysicsObjectWorldTransform(class UPrimitiveComponent* Component, class FName BoneName, const struct FTransform& ReturnValue);
	void GetClosestPhysicsObjectFromWorldLocation(class UPrimitiveComponent* Component, const struct FVector& WorldLocation, const struct FClosestPhysicsObjectResult& ReturnValue);
	void ExtractClosestPhysicsObjectResults(const struct FClosestPhysicsObjectResult& Result, class FName OutName, bool ReturnValue);
};

// 0x38 (0x300 - 0x2C8)
// Class Engine.PhysicsSpringComponent
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                        SpringStiffness;                                   // 0x2C8(0x4)(None)
	float                                        SpringDamping;                                     // 0x2CC(0x4)(None)
	float                                        SpringLengthAtRest;                                // 0x2D0(0x4)(None)
	float                                        SpringRadius;                                      // 0x2D4(0x4)(None)
	enum class ECollisionChannel                 SpringChannel;                                     // 0x2D8(0x1)(None)
	bool                                         bIgnoreSelf;                                       // 0x2D9(0x1)(None)
	uint8                                        Pad_204F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpringCompression;                                 // 0x2DC(0x4)(None)
	uint8                                        Pad_2050[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsSpringComponent* GetDefaultObj();

	void GetSpringRestingPoint(const struct FVector& ReturnValue);
	void GetSpringDirection(const struct FVector& ReturnValue);
	void GetSpringCurrentEndPoint(const struct FVector& ReturnValue);
	void GetNormalizedCompressionScalar(float ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsThreadLibrary
class UPhysicsThreadLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPhysicsThreadLibrary* GetDefaultObj();

	void AddForce(const struct FBodyInstanceAsyncPhysicsTickHandle& Handle, const struct FVector& Force, bool bAccelChange);
};

// 0x8 (0x2D0 - 0x2C8)
// Class Engine.PhysicsThrusterComponent
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                        ThrustStrength;                                    // 0x2C8(0x4)(None)
	uint8                                        Pad_2063[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsThrusterComponent* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.SceneCapture
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                  MeshComp;                                          // 0x4B8(0x8)(ZeroConstructor)
	class USceneComponent*                       SceneComponent;                                    // 0x4C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASceneCapture* GetDefaultObj();

};

// 0x10 (0x4D8 - 0x4C8)
// Class Engine.PlanarReflection
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*            PlanarReflectionComponent;                         // 0x4C8(0x8)(ZeroConstructor)
	bool                                         bShowPreviewPlane;                                 // 0x4D0(0x1)(None)
	uint8                                        Pad_2066[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlanarReflection* GetDefaultObj();

	void OnInterpToggle(bool bEnable);
};

// 0xC0 (0x388 - 0x2C8)
// Class Engine.SceneCaptureComponent
class USceneCaptureComponent : public USceneComponent
{
public:
	enum class ESceneCapturePrimitiveRenderMode  PrimitiveRenderMode;                               // 0x2C8(0x1)(None)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x2C9(0x1)(None)
	uint8                                        bCaptureEveryFrame : 1;                            // Mask: 0x1, PropSize: 0x10x2CA(0x1)(None)
	uint8                                        bCaptureOnMovement : 1;                            // Mask: 0x2, PropSize: 0x10x2CA(0x1)(None)
	uint8                                        BitPad_178 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bAlwaysPersistRenderingState;                      // 0x2CB(0x1)(None)
	uint8                                        Pad_2090[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenComponents;                                  // 0x2D0(0x10)(ZeroConstructor)
	TArray<class AActor*>                        HiddenActors;                                      // 0x2E0(0x10)(ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> ShowOnlyComponents;                                // 0x2F0(0x10)(ZeroConstructor)
	TArray<class AActor*>                        ShowOnlyActors;                                    // 0x300(0x10)(ZeroConstructor)
	float                                        LODDistanceFactor;                                 // 0x310(0x4)(None)
	float                                        MaxViewDistanceOverride;                           // 0x314(0x4)(None)
	int32                                        CaptureSortPriority;                               // 0x318(0x4)(None)
	bool                                         bUseRayTracingIfEnabled;                           // 0x31C(0x1)(None)
	uint8                                        Pad_2091[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FEngineShowFlagsSetting>       ShowFlagSettings;                                  // 0x320(0x10)(None)
	uint8                                        Pad_2092[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ProfilingEventName;                                // 0x360(0x10)(None)
	uint8                                        Pad_2093[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       CaptureCount;                                      // 0x380(0x4)(None)
	uint8                                        Pad_2094[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USceneCaptureComponent* GetDefaultObj();

	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void SetCaptureSortPriority(int32 NewCaptureSortPriority);
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);
	void ClearShowOnlyComponents();
	void ClearHiddenComponents();
};

// 0x168 (0x4F0 - 0x388)
// Class Engine.PlanarReflectionComponent
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x388(0x8)(ZeroConstructor)
	float                                        NormalDistortionStrength;                          // 0x390(0x4)(None)
	float                                        PrefilterRoughness;                                // 0x394(0x4)(None)
	float                                        PrefilterRoughnessDistance;                        // 0x398(0x4)(None)
	int32                                        ScreenPercentage;                                  // 0x39C(0x4)(None)
	float                                        ExtraFOV;                                          // 0x3A0(0x4)(None)
	float                                        DistanceFromPlaneFadeStart;                        // 0x3A4(0x4)(None)
	float                                        DistanceFromPlaneFadeEnd;                          // 0x3A8(0x4)(None)
	float                                        DistanceFromPlaneFadeoutStart;                     // 0x3AC(0x4)(None)
	float                                        DistanceFromPlaneFadeoutEnd;                       // 0x3B0(0x4)(None)
	float                                        AngleFromPlaneFadeStart;                           // 0x3B4(0x4)(None)
	float                                        AngleFromPlaneFadeEnd;                             // 0x3B8(0x4)(None)
	bool                                         bShowPreviewPlane;                                 // 0x3BC(0x1)(None)
	bool                                         bRenderSceneTwoSided;                              // 0x3BD(0x1)(None)
	uint8                                        Pad_209C[0x132];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlanarReflectionComponent* GetDefaultObj();

};

// 0x0 (0x4C0 - 0x4C0)
// Class Engine.PlaneReflectionCapture
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass();
	static class APlaneReflectionCapture* GetDefaultObj();

};

// 0x20 (0x430 - 0x410)
// Class Engine.PlaneReflectionCaptureComponent
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadiusScale;                              // 0x410(0x4)(None)
	uint8                                        Pad_20A7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x418(0x8)(ZeroConstructor)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x420(0x8)(ZeroConstructor)
	uint8                                        Pad_20A8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlaneReflectionCaptureComponent* GetDefaultObj();

};

// 0x88 (0xB0 - 0x28)
// Class Engine.PlatformInterfaceWebResponse
class UPlatformInterfaceWebResponse : public UObject
{
public:
	class FString                                OriginalURL;                                       // 0x28(0x10)(None)
	int32                                        ResponseCode;                                      // 0x38(0x4)(None)
	int32                                        Tag;                                               // 0x3C(0x4)(None)
	class FString                                StringResponse;                                    // 0x40(0x10)(None)
	TArray<uint8>                                BinaryResponse;                                    // 0x50(0x10)(None)
	uint8                                        Pad_20B3[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlatformInterfaceWebResponse* GetDefaultObj();

	void GetNumHeaders(int32 ReturnValue);
	void GetHeaderValue(const class FString& HeaderName, const class FString& ReturnValue);
	void GetHeader(int32 HeaderIndex, const class FString& Header, const class FString& Value);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PluginBlueprintLibrary
class UPluginBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPluginBlueprintLibrary* GetDefaultObj();

	void IsPluginMounted(const class FString& PluginName, bool ReturnValue);
	void GetPluginVersionName(const class FString& PluginName, const class FString& OutVersionName, bool ReturnValue);
	void GetPluginVersion(const class FString& PluginName, int32 OutVersion, bool ReturnValue);
	void GetPluginNameForObjectPath(const struct FSoftObjectPath& ObjectPath, const class FString& OutPluginName, bool ReturnValue);
	void GetPluginMountedAssetPath(const class FString& PluginName, const class FString& OutAssetPath, bool ReturnValue);
	void GetPluginEditorCustomVirtualPath(const class FString& PluginName, const class FString& OutVirtualPath, bool ReturnValue);
	void GetPluginDescriptorFilePath(const class FString& PluginName, const class FString& OutFilePath, bool ReturnValue);
	void GetPluginDescription(const class FString& PluginName, const class FString& OutDescription, bool ReturnValue);
	void GetPluginContentDir(const class FString& PluginName, const class FString& OutContentDir, bool ReturnValue);
	void GetPluginBaseDir(const class FString& PluginName, const class FString& OutBaseDir, bool ReturnValue);
	void GetEnabledPluginNames(const TArray<class FString>& ReturnValue);
	void GetAdditionalProjectPluginSearchPaths(const TArray<class FString>& ReturnValue);
	void GetAdditionalPluginSearchPaths(const TArray<class FString>& ReturnValue);
};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.PointLight
class APointLight : public ALight
{
public:
	class UPointLightComponent*                  PointLightComponent;                               // 0x4C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APointLight* GetDefaultObj();

	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};

// 0x10 (0x38 - 0x28)
// Class Engine.Polys
class UPolys : public UObject
{
public:
	uint8                                        Pad_20C9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPolys* GetDefaultObj();

};

// 0x30 (0x538 - 0x508)
// Class Engine.PrecomputedVisibilityOverrideVolume
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                        OverrideVisibleActors;                             // 0x508(0x10)(ZeroConstructor)
	TArray<class AActor*>                        OverrideInvisibleActors;                           // 0x518(0x10)(ZeroConstructor)
	TArray<class FName>                          OverrideInvisibleLevels;                           // 0x528(0x10)(None)

	static class UClass* StaticClass();
	static class APrecomputedVisibilityOverrideVolume* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.RigidBodyBase
class ARigidBodyBase : public AActor
{
public:

	static class UClass* StaticClass();
	static class ARigidBodyBase* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.RadialForceActor
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                 ForceComponent;                                    // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ARadialForceActor* GetDefaultObj();

	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};

// 0x0 (0x28 - 0x28)
// Class Engine.RVOAvoidanceInterface
class IRVOAvoidanceInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IRVOAvoidanceInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.Scene
class UScene : public UObject
{
public:

	static class UClass* StaticClass();
	static class UScene* GetDefaultObj();

};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.SceneCapture2D
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*              CaptureComponent2D;                                // 0x4C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASceneCapture2D* GetDefaultObj();

	void OnInterpToggle(bool bEnable);
};

// 0x888 (0xC10 - 0x388)
// Class Engine.SceneCaptureComponent2D
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	enum class ECameraProjectionMode             ProjectionType;                                    // 0x388(0x1)(None)
	uint8                                        Pad_20E4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVAngle;                                          // 0x38C(0x4)(None)
	float                                        OrthoWidth;                                        // 0x390(0x4)(None)
	uint8                                        Pad_20E5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureRenderTarget2D*                TextureTarget;                                     // 0x398(0x8)(ZeroConstructor)
	enum class ESceneCaptureCompositeMode        CompositeMode;                                     // 0x3A0(0x1)(None)
	uint8                                        Pad_20E6[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x3B0(0x770)(ZeroConstructor)
	float                                        PostProcessBlendWeight;                            // 0xB20(0x4)(None)
	uint8                                        bOverride_CustomNearClippingPlane : 1;             // Mask: 0x1, PropSize: 0x10xB24(0x1)(None)
	uint8                                        BitPad_17B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_20E7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomNearClippingPlane;                           // 0xB28(0x4)(None)
	bool                                         bUseCustomProjectionMatrix;                        // 0xB2C(0x1)(None)
	uint8                                        Pad_20E8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMatrix                               CustomProjectionMatrix;                            // 0xB30(0x80)(None)
	bool                                         bUseFauxOrthoViewPos;                              // 0xBB0(0x1)(None)
	bool                                         bEnableOrthographicTiling;                         // 0xBB1(0x1)(None)
	uint8                                        Pad_20EA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumXTiles;                                         // 0xBB4(0x4)(None)
	int32                                        NumYTiles;                                         // 0xBB8(0x4)(None)
	bool                                         bEnableClipPlane;                                  // 0xBBC(0x1)(None)
	uint8                                        Pad_20EB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ClipPlaneBase;                                     // 0xBC0(0x18)(None)
	struct FVector                               ClipPlaneNormal;                                   // 0xBD8(0x18)(None)
	uint8                                        bCameraCutThisFrame : 1;                           // Mask: 0x1, PropSize: 0x10xBF0(0x1)(None)
	uint8                                        bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // Mask: 0x2, PropSize: 0x10xBF0(0x1)(None)
	uint8                                        Pad_20EC[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USceneCaptureComponent2D* GetDefaultObj();

	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject);
	void CaptureScene();
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
};

// 0x18 (0x3A0 - 0x388)
// Class Engine.SceneCaptureComponentCube
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*              TextureTarget;                                     // 0x388(0x8)(ZeroConstructor)
	bool                                         bCaptureRotation;                                  // 0x390(0x1)(None)
	uint8                                        Pad_20F0[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USceneCaptureComponentCube* GetDefaultObj();

	void CaptureScene();
};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.SceneCaptureCube
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*            CaptureComponentCube;                              // 0x4C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASceneCaptureCube* GetDefaultObj();

	void OnInterpToggle(bool bEnable);
};

// 0x8 (0x290 - 0x288)
// Class Engine.ShadowMapTexture2D
class UShadowMapTexture2D : public UTexture2D
{
public:
	enum class EShadowMapFlags                   ShadowmapFlags;                                    // 0x288(0x1)(None)
	uint8                                        Pad_20F3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShadowMapTexture2D* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class Engine.SkeletalMeshSocket
class USkeletalMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(None)
	class FName                                  BoneName;                                          // 0x30(0x8)(None)
	struct FVector                               RelativeLocation;                                  // 0x38(0x18)(None)
	struct FRotator                              RelativeRotation;                                  // 0x50(0x18)(None)
	struct FVector                               RelativeScale;                                     // 0x68(0x18)(None)
	uint8                                        bForceAlwaysAnimated : 1;                          // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        bIgnoreBoneScaling : 1;                            // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        bRotateBoneScaleForSocket : 1;                     // Mask: 0x4, PropSize: 0x10x80(0x1)(None)
	uint8                                        Pad_20F5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkeletalMeshSocket* GetDefaultObj();

	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	void GetSocketLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& ReturnValue);
};

// 0x1F0 (0x510 - 0x320)
// Class Engine.SkyLightComponent
class USkyLightComponent : public ULightComponentBase
{
public:
	bool                                         bRealTimeCapture;                                  // 0x320(0x1)(None)
	enum class ESkyLightSourceType               SourceType;                                        // 0x321(0x1)(None)
	uint8                                        Pad_210E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x328(0x8)(ZeroConstructor)
	float                                        SourceCubemapAngle;                                // 0x330(0x4)(None)
	int32                                        CubemapResolution;                                 // 0x334(0x4)(None)
	float                                        SkyDistanceThreshold;                              // 0x338(0x4)(None)
	bool                                         bCaptureEmissiveOnly;                              // 0x33C(0x1)(None)
	bool                                         bLowerHemisphereIsBlack;                           // 0x33D(0x1)(None)
	uint8                                        Pad_210F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          LowerHemisphereColor;                              // 0x340(0x10)(None)
	float                                        OcclusionMaxDistance;                              // 0x350(0x4)(None)
	float                                        Contrast;                                          // 0x354(0x4)(None)
	float                                        OcclusionExponent;                                 // 0x358(0x4)(None)
	float                                        MinOcclusion;                                      // 0x35C(0x4)(None)
	struct FColor                                OcclusionTint;                                     // 0x360(0x4)(None)
	uint8                                        bCloudAmbientOcclusion : 1;                        // Mask: 0x1, PropSize: 0x10x364(0x1)(None)
	uint8                                        BitPad_17C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2112[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloudAmbientOcclusionStrength;                     // 0x368(0x4)(None)
	float                                        CloudAmbientOcclusionExtent;                       // 0x36C(0x4)(None)
	float                                        CloudAmbientOcclusionMapResolutionScale;           // 0x370(0x4)(None)
	float                                        CloudAmbientOcclusionApertureScale;                // 0x374(0x4)(None)
	enum class EOcclusionCombineMode             OcclusionCombineMode;                              // 0x378(0x1)(None)
	uint8                                        Pad_2114[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShowIlluminanceMeter : 1;                         // Mask: 0x1, PropSize: 0x10x37C(0x1)(None)
	uint8                                        BitPad_17D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2115[0xAB];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          BlendDestinationCubemap;                           // 0x428(0x8)(ZeroConstructor)
	uint8                                        Pad_2116[0xE0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkyLightComponent* GetDefaultObj();

	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetSourceCubemapAngle(float NewValue);
	void SetOcclusionTint(const struct FColor& InTint);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceManager
class ISMInstanceManager : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISMInstanceManager* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceManagerProvider
class ISMInstanceManagerProvider : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISMInstanceManagerProvider* GetDefaultObj();

};

// 0x3C8 (0x3F0 - 0x28)
// Class Engine.SoundAttenuation
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings             Attenuation;                                       // 0x28(0x3C8)(None)

	static class UClass* StaticClass();
	static class USoundAttenuation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundEffectPresetWidgetInterface
class ISoundEffectPresetWidgetInterface : public IAudioPanelWidgetInterface
{
public:

	static class UClass* StaticClass();
	static class ISoundEffectPresetWidgetInterface* GetDefaultObj();

	void OnPropertyChanged(class USoundEffectPreset* Preset, class FName PropertyName);
	void OnConstructed(class USoundEffectPreset* Preset);
	void GetClass(class UClass* ReturnValue);
};

// 0x18 (0x40 - 0x28)
// Class Engine.SoundEffectSourcePresetChain
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>       Chain;                                             // 0x28(0x10)(None)
	uint8                                        bPlayEffectChainTails : 1;                         // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        Pad_212A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundEffectSourcePresetChain* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class Engine.SoundGroups
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                   SoundGroupProfiles;                                // 0x28(0x10)(None)
	uint8                                        Pad_212D[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundGroups* GetDefaultObj();

};

// 0x40 (0x88 - 0x48)
// Class Engine.SoundNodeModulatorContinuous
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams            PitchModulationParams;                             // 0x48(0x20)(None)
	struct FModulatorContinuousParams            VolumeModulationParams;                            // 0x68(0x20)(None)

	static class UClass* StaticClass();
	static class USoundNodeModulatorContinuous* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundSubmixWidgetInterface
class ISoundSubmixWidgetInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISoundSubmixWidgetInterface* GetDefaultObj();

	void OnConstructed(class USoundSubmixBase* SoundSubmix);
};

// 0x0 (0x28 - 0x28)
// Class Engine.SparseVolumeTexture
class USparseVolumeTexture : public UObject
{
public:

	static class UClass* StaticClass();
	static class USparseVolumeTexture* GetDefaultObj();

};

// 0x108 (0x130 - 0x28)
// Class Engine.StaticSparseVolumeTexture
class UStaticSparseVolumeTexture : public USparseVolumeTexture
{
public:
	struct FBox                                  VolumeBounds;                                      // 0x28(0x38)(None)
	uint8                                        Pad_2148[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStaticSparseVolumeTexture* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class Engine.AnimatedSparseVolumeTexture
class UAnimatedSparseVolumeTexture : public USparseVolumeTexture
{
public:
	int32                                        FrameCount;                                        // 0x28(0x4)(None)
	uint8                                        Pad_214F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  VolumeBounds;                                      // 0x30(0x38)(None)
	uint8                                        Pad_2150[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimatedSparseVolumeTexture* GetDefaultObj();

};

// 0x8 (0x4C8 - 0x4C0)
// Class Engine.SphereReflectionCapture
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                  DrawCaptureRadius;                                 // 0x4C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASphereReflectionCapture* GetDefaultObj();

	void GetSphereCaptureComponent(class USphereReflectionCaptureComponent* ReturnValue);
};

// 0x10 (0x420 - 0x410)
// Class Engine.SphereReflectionCaptureComponent
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadius;                                   // 0x410(0x4)(None)
	float                                        CaptureDistanceScale;                              // 0x414(0x4)(None)
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x418(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USphereReflectionCaptureComponent* GetDefaultObj();

};

// 0x60 (0x88 - 0x28)
// Class Engine.StaticMeshSocket
class UStaticMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(None)
	struct FVector                               RelativeLocation;                                  // 0x30(0x18)(None)
	struct FRotator                              RelativeRotation;                                  // 0x48(0x18)(None)
	struct FVector                               RelativeScale;                                     // 0x60(0x18)(None)
	class FString                                Tag;                                               // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UStaticMeshSocket* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShape
class UStereoLayerShape : public UObject
{
public:

	static class UClass* StaticClass();
	static class UStereoLayerShape* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShapeQuad
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:

	static class UClass* StaticClass();
	static class UStereoLayerShapeQuad* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.StereoLayerShapeCylinder
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                        Radius;                                            // 0x28(0x4)(None)
	float                                        OverlayArc;                                        // 0x2C(0x4)(None)
	int32                                        Height;                                            // 0x30(0x4)(None)
	uint8                                        Pad_2169[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStereoLayerShapeCylinder* GetDefaultObj();

	void SetRadius(float InRadius);
	void SetOverlayArc(float InOverlayArc);
	void SetHeight(int32 InHeight);
};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShapeCubemap
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:

	static class UClass* StaticClass();
	static class UStereoLayerShapeCubemap* GetDefaultObj();

};

// 0x90 (0xB8 - 0x28)
// Class Engine.StereoLayerShapeEquirect
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                LeftUVRect;                                        // 0x28(0x28)(None)
	struct FBox2D                                RightUVRect;                                       // 0x50(0x28)(None)
	struct FVector2D                             LeftScale;                                         // 0x78(0x10)(None)
	struct FVector2D                             RightScale;                                        // 0x88(0x10)(None)
	struct FVector2D                             LeftBias;                                          // 0x98(0x10)(None)
	struct FVector2D                             RightBias;                                         // 0xA8(0x10)(None)

	static class UClass* StaticClass();
	static class UStereoLayerShapeEquirect* GetDefaultObj();

	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
};

// 0x188 (0x450 - 0x2C8)
// Class Engine.StereoLayerComponent
class UStereoLayerComponent : public USceneComponent
{
public:
	uint8                                        bLiveTexture : 1;                                  // Mask: 0x1, PropSize: 0x10x2C8(0x1)(None)
	uint8                                        bSupportsDepth : 1;                                // Mask: 0x2, PropSize: 0x10x2C8(0x1)(None)
	uint8                                        bNoAlphaChannel : 1;                               // Mask: 0x4, PropSize: 0x10x2C8(0x1)(None)
	uint8                                        BitPad_17F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2170[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              Texture;                                           // 0x2D0(0x8)(ZeroConstructor)
	class UTexture*                              LeftTexture;                                       // 0x2D8(0x8)(ZeroConstructor)
	uint8                                        bQuadPreserveTextureRatio : 1;                     // Mask: 0x1, PropSize: 0x10x2E0(0x1)(None)
	uint8                                        BitPad_180 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2171[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             QuadSize;                                          // 0x2E8(0x10)(None)
	struct FBox2D                                UVRect;                                            // 0x2F8(0x28)(None)
	float                                        CylinderRadius;                                    // 0x320(0x4)(None)
	float                                        CylinderOverlayArc;                                // 0x324(0x4)(None)
	int32                                        CylinderHeight;                                    // 0x328(0x4)(None)
	uint8                                        Pad_2172[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FEquirectProps                        EquirectProps;                                     // 0x330(0x90)(None)
	enum class EStereoLayerType                  StereoLayerType;                                   // 0x3C0(0x1)(None)
	enum class EStereoLayerShape                 StereoLayerShape;                                  // 0x3C1(0x1)(None)
	uint8                                        Pad_2173[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStereoLayerShape*                     Shape;                                             // 0x3C8(0x8)(ZeroConstructor)
	int32                                        Priority;                                          // 0x3D0(0x4)(None)
	uint8                                        Pad_2174[0x7C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStereoLayerComponent* GetDefaultObj();

	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class UTexture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int32 InPriority);
	void SetLeftTexture(class UTexture* InTexture);
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);
	void MarkTextureForUpdate();
	void GetUVRect(const struct FBox2D& ReturnValue);
	void GetTexture(class UTexture* ReturnValue);
	void GetQuadSize(const struct FVector2D& ReturnValue);
	void GetPriority(int32 ReturnValue);
	void GetLeftTexture(class UTexture* ReturnValue);
};

// 0x40 (0x68 - 0x28)
// Class Engine.SubUVAnimation
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                            SubUVTexture;                                      // 0x28(0x8)(None)
	int32                                        SubImages_Horizontal;                              // 0x30(0x4)(None)
	int32                                        SubImages_Vertical;                                // 0x34(0x4)(None)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0x38(0x1)(None)
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0x39(0x1)(None)
	uint8                                        Pad_2176[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlphaThreshold;                                    // 0x3C(0x4)(None)
	uint8                                        Pad_2177[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USubUVAnimation* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class Engine.TextPropertyTestObject
class UTextPropertyTestObject : public UObject
{
public:
	class FText                                  DefaultedText;                                     // 0x28(0x18)(None)
	class FText                                  UndefaultedText;                                   // 0x40(0x18)(None)
	class FText                                  TransientText;                                     // 0x58(0x18)(None)

	static class UClass* StaticClass();
	static class UTextPropertyTestObject* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.TextRenderActor
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                  TextRender;                                        // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ATextRenderActor* GetDefaultObj();

};

// 0x50 (0x6D0 - 0x680)
// Class Engine.TextRenderComponent
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	class FText                                  Text;                                              // 0x680(0x18)(None)
	class UMaterialInterface*                    TextMaterial;                                      // 0x698(0x8)(ZeroConstructor)
	class UFont*                                 Font;                                              // 0x6A0(0x8)(ZeroConstructor)
	enum class EHorizTextAligment                HorizontalAlignment;                               // 0x6A8(0x1)(None)
	enum class EVerticalTextAligment             VerticalAlignment;                                 // 0x6A9(0x1)(None)
	uint8                                        Pad_217C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                TextRenderColor;                                   // 0x6AC(0x4)(None)
	float                                        XScale;                                            // 0x6B0(0x4)(None)
	float                                        YScale;                                            // 0x6B4(0x4)(None)
	float                                        WorldSize;                                         // 0x6B8(0x4)(None)
	float                                        InvDefaultSize;                                    // 0x6BC(0x4)(None)
	float                                        HorizSpacingAdjust;                                // 0x6C0(0x4)(None)
	float                                        VertSpacingAdjust;                                 // 0x6C4(0x4)(None)
	uint8                                        bAlwaysRenderAsText : 1;                           // Mask: 0x1, PropSize: 0x10x6C8(0x1)(None)
	uint8                                        Pad_217D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextRenderComponent* GetDefaultObj();

	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(enum class EVerticalTextAligment Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const class FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(enum class EHorizTextAligment Value);
	void SetFont(class UFont* Value);
	void K2_SetText(class FText Value);
	void GetTextWorldSize(const struct FVector& ReturnValue);
	void GetTextLocalSize(const struct FVector& ReturnValue);
};

// 0xA0 (0x158 - 0xB8)
// Class Engine.TimelineComponent
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                             TheTimeline;                                       // 0xB8(0x98)(ZeroConstructor)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x150(0x1)(None)
	uint8                                        Pad_21AA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTimelineComponent* GetDefaultObj();

	void Stop();
	void SetVectorCurve(class UCurveVector* NewVectorCurve, class FName VectorTrackName);
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, class FName LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, class FName FloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline(const struct FTimeline& OldTimeline);
	void IsReversing(bool ReturnValue);
	void IsPlaying(bool ReturnValue);
	void IsLooping(bool ReturnValue);
	void GetTimelineLength(float ReturnValue);
	void GetScaledTimelineLength(float ReturnValue);
	void GetPlayRate(float ReturnValue);
	void GetPlaybackPosition(float ReturnValue);
	void GetIgnoreTimeDilation(bool ReturnValue);
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.TriggerBase
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                       CollisionComponent;                                // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ATriggerBase* GetDefaultObj();

};

// 0x0 (0x4C0 - 0x4C0)
// Class Engine.TriggerBox
class ATriggerBox : public ATriggerBase
{
public:

	static class UClass* StaticClass();
	static class ATriggerBox* GetDefaultObj();

};

// 0x0 (0x4C0 - 0x4C0)
// Class Engine.TriggerCapsule
class ATriggerCapsule : public ATriggerBase
{
public:

	static class UClass* StaticClass();
	static class ATriggerCapsule* GetDefaultObj();

};

// 0x0 (0x4C0 - 0x4C0)
// Class Engine.TriggerSphere
class ATriggerSphere : public ATriggerBase
{
public:

	static class UClass* StaticClass();
	static class ATriggerSphere* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class Engine.TwitterIntegrationBase
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static class UClass* StaticClass();
	static class UTwitterIntegrationBase* GetDefaultObj();

	void TwitterRequest(const class FString& URL, const TArray<class FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32 AccountIndex, bool ReturnValue);
	void ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture, bool ReturnValue);
	void Init();
	void GetNumAccounts(int32 ReturnValue);
	void GetAccountName(int32 AccountIndex, const class FString& ReturnValue);
	void CanShowTweetUI(bool ReturnValue);
	void AuthorizeAccounts(bool ReturnValue);
};

// 0x48 (0x108 - 0xC0)
// Class Engine.UserDefinedStruct
class UUserDefinedStruct : public UScriptStruct
{
public:
	enum class EUserDefinedStructureStatus       Status;                                            // 0xC0(0x1)(None)
	uint8                                        Pad_21CD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 Guid;                                              // 0xC4(0x10)(None)
	uint8                                        Pad_21CE[0x34];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUserDefinedStruct* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class Engine.VectorField
class UVectorField : public UObject
{
public:
	struct FBox                                  Bounds;                                            // 0x28(0x38)(None)
	float                                        Intensity;                                         // 0x60(0x4)(None)
	uint8                                        Pad_21D4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVectorField* GetDefaultObj();

};

// 0x40 (0xA8 - 0x68)
// Class Engine.VectorFieldAnimated
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                            Texture;                                           // 0x68(0x8)(ZeroConstructor)
	enum class EVectorFieldConstructionOp        ConstructionOp;                                    // 0x70(0x1)(None)
	uint8                                        Pad_21D6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VolumeSizeX;                                       // 0x74(0x4)(None)
	int32                                        VolumeSizeY;                                       // 0x78(0x4)(None)
	int32                                        VolumeSizeZ;                                       // 0x7C(0x4)(None)
	int32                                        SubImagesX;                                        // 0x80(0x4)(None)
	int32                                        SubImagesY;                                        // 0x84(0x4)(None)
	int32                                        FrameCount;                                        // 0x88(0x4)(None)
	float                                        FramesPerSecond;                                   // 0x8C(0x4)(None)
	uint8                                        bLoop : 1;                                         // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        BitPad_184 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_21D7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVectorFieldStatic*                    NoiseField;                                        // 0x98(0x8)(None)
	float                                        NoiseScale;                                        // 0xA0(0x4)(None)
	float                                        NoiseMax;                                          // 0xA4(0x4)(None)

	static class UClass* StaticClass();
	static class UVectorFieldAnimated* GetDefaultObj();

};

// 0x30 (0x6B0 - 0x680)
// Class Engine.VectorFieldComponent
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                          VectorField;                                       // 0x680(0x8)(ZeroConstructor)
	float                                        Intensity;                                         // 0x688(0x4)(None)
	float                                        Tightness;                                         // 0x68C(0x4)(None)
	uint8                                        bPreviewVectorField : 1;                           // Mask: 0x1, PropSize: 0x10x690(0x1)(None)
	uint8                                        Pad_21DA[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVectorFieldComponent* GetDefaultObj();

	void SetIntensity(float NewIntensity);
};

// 0x50 (0xB8 - 0x68)
// Class Engine.VectorFieldStatic
class UVectorFieldStatic : public UVectorField
{
public:
	int32                                        SizeX;                                             // 0x68(0x4)(None)
	int32                                        SizeY;                                             // 0x6C(0x4)(None)
	int32                                        SizeZ;                                             // 0x70(0x4)(None)
	bool                                         bAllowCPUAccess;                                   // 0x74(0x1)(None)
	uint8                                        Pad_21DC[0x43];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVectorFieldStatic* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerDebugSnapshotInterface
class IVisualLoggerDebugSnapshotInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IVisualLoggerDebugSnapshotInterface* GetDefaultObj();

};

// 0x28 (0x2F0 - 0x2C8)
// Class Engine.WindDirectionalSourceComponent
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                        Strength;                                          // 0x2C8(0x4)(None)
	float                                        Speed;                                             // 0x2CC(0x4)(None)
	float                                        MinGustAmount;                                     // 0x2D0(0x4)(None)
	float                                        MaxGustAmount;                                     // 0x2D4(0x4)(None)
	float                                        Radius;                                            // 0x2D8(0x4)(None)
	uint8                                        bPointWind : 1;                                    // Mask: 0x1, PropSize: 0x10x2DC(0x1)(None)
	uint8                                        Pad_2254[0x13];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWindDirectionalSourceComponent* GetDefaultObj();

	void SetWindType(enum class EWindSourceType InNewType);
	void SetStrength(float InNewStrength);
	void SetSpeed(float InNewSpeed);
	void SetRadius(float InNewRadius);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetMaximumGustAmount(float InNewMaxGust);
};

// 0x8 (0x30 - 0x28)
// Class Engine.WorldPartitionEditorLoaderAdapter
class UWorldPartitionEditorLoaderAdapter : public UObject
{
public:
	uint8                                        Pad_2259[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionEditorLoaderAdapter* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class Engine.WorldPartitionRuntimeCellData
class UWorldPartitionRuntimeCellData : public UObject
{
public:
	uint8                                        Pad_225B[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  ContentBounds;                                     // 0x48(0x38)(None)

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeCellData* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class Engine.HierarchicalLODSetup
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>   HierarchicalLODSetup;                              // 0x28(0x10)(ZeroConstructor)
	TSoftObjectPtr<class UMaterialInterface>     OverrideBaseMaterial;                              // 0x38(0x30)(None)

	static class UClass* StaticClass();
	static class UHierarchicalLODSetup* GetDefaultObj();

};

// 0xA8 (0x280 - 0x1D8)
// Class Engine.Texture2DArray
class UTexture2DArray : public UTexture
{
public:
	uint8                                        Pad_2260[0x98];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureAddress                   AddressX;                                          // 0x270(0x1)(None)
	enum class ETextureAddress                   AddressY;                                          // 0x271(0x1)(None)
	enum class ETextureAddress                   AddressZ;                                          // 0x272(0x1)(None)
	uint8                                        Pad_2261[0xD];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTexture2DArray* GetDefaultObj();

};

// 0x350 (0x378 - 0x28)
// Class Engine.Level
class ULevel : public UObject
{
public:
	uint8                                        Pad_2263[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                OwningWorld;                                       // 0xB8(0x8)(ZeroConstructor)
	class UModel*                                Model;                                             // 0xC0(0x8)(ZeroConstructor)
	TArray<class UModelComponent*>               ModelComponents;                                   // 0xC8(0x10)(ZeroConstructor)
	class ULevelActorContainer*                  ActorCluster;                                      // 0xD8(0x8)(ZeroConstructor)
	int32                                        NumTextureStreamingUnbuiltComponents;              // 0xE0(0x4)(None)
	int32                                        NumTextureStreamingDirtyResources;                 // 0xE4(0x4)(None)
	class ALevelScriptActor*                     LevelScriptActor;                                  // 0xE8(0x8)(ZeroConstructor)
	class ANavigationObjectBase*                 NavListStart;                                      // 0xF0(0x8)(ZeroConstructor)
	class ANavigationObjectBase*                 NavListEnd;                                        // 0xF8(0x8)(ZeroConstructor)
	TArray<class UNavigationDataChunk*>          NavDataChunks;                                     // 0x100(0x10)(ZeroConstructor)
	float                                        LightmapTotalSize;                                 // 0x110(0x4)(None)
	float                                        ShadowmapTotalSize;                                // 0x114(0x4)(None)
	TArray<struct FVector>                       StaticNavigableGeometry;                           // 0x118(0x10)(None)
	TArray<struct FGuid>                         StreamingTextureGuids;                             // 0x128(0x10)(None)
	TArray<class FName>                          StreamingTextures;                                 // 0x138(0x10)(None)
	uint32                                       PackedTextureStreamingQualityLevelFeatureLevel;    // 0x148(0x4)(None)
	uint8                                        Pad_2267[0xC4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LevelBuildDataId;                                  // 0x210(0x10)(None)
	class UMapBuildDataRegistry*                 MapBuildData;                                      // 0x220(0x8)(ZeroConstructor)
	struct FIntVector                            LightBuildLevelOffset;                             // 0x228(0xC)(None)
	uint8                                        bIsLightingScenario : 1;                           // Mask: 0x1, PropSize: 0x10x234(0x1)(None)
	uint8                                        BitPad_18D : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTextureStreamingRotationChanged : 1;              // Mask: 0x8, PropSize: 0x10x234(0x1)(None)
	uint8                                        bStaticComponentsRegisteredInStreamingManager : 1; // Mask: 0x10, PropSize: 0x10x234(0x1)(None)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x20, PropSize: 0x10x234(0x1)(None)
	uint8                                        BitPad_18E : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2269[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_18F : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsPartitioned : 1;                                // Mask: 0x40, PropSize: 0x10x236(0x1)(None)
	uint8                                        BitPad_190 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_226A[0x61];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AWorldSettings*                        WorldSettings;                                     // 0x298(0x8)(ZeroConstructor)
	class AWorldDataLayers*                      WorldDataLayers;                                   // 0x2A0(0x8)(ZeroConstructor)
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> WorldPartitionRuntimeCell;                         // 0x2A8(0x30)(ZeroConstructor)
	uint8                                        Pad_226B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x2E0(0x10)(ZeroConstructor)
	uint8                                        Pad_226C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                   // 0x300(0x10)(None)
	uint8                                        Pad_226D[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorFolder
class UActorFolder : public UObject
{
public:

	static class UClass* StaticClass();
	static class UActorFolder* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.ActorPartitionSubsystem
class UActorPartitionSubsystem : public UWorldSubsystem
{
public:

	static class UClass* StaticClass();
	static class UActorPartitionSubsystem* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class Engine.AISystemBase
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                        AISystemClassName;                                 // 0x28(0x20)(None)
	class FName                                  AISystemModuleName;                                // 0x48(0x8)(None)
	uint8                                        Pad_2270[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInstantiateAISystemOnClient;                      // 0x58(0x1)(None)
	uint8                                        Pad_2271[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAISystemBase* GetDefaultObj();

};

// 0x0 (0x58 - 0x58)
// Class Engine.NullNavSysConfig
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:

	static class UClass* StaticClass();
	static class UNullNavSysConfig* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class Engine.AvoidanceManager
class UAvoidanceManager : public UObject
{
public:
	uint8                                        Pad_2283[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultTimeToLive;                                 // 0x30(0x4)(None)
	float                                        LockTimeAfterAvoid;                                // 0x34(0x4)(None)
	float                                        LockTimeAfterClean;                                // 0x38(0x4)(None)
	float                                        DeltaTimeToPredict;                                // 0x3C(0x4)(None)
	float                                        ArtificialRadiusExpansion;                         // 0x40(0x4)(None)
	float                                        TestHeightDifference;                              // 0x44(0x4)(None)
	float                                        HeightCheckMargin;                                 // 0x48(0x4)(None)
	uint8                                        Pad_2286[0x94];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAvoidanceManager* GetDefaultObj();

	void RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight, bool ReturnValue);
	void GetObjectCount(int32 ReturnValue);
	void GetNewAvoidanceUID(int32 ReturnValue);
	void GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp, const struct FVector& ReturnValue);
};

// 0x48 (0x70 - 0x28)
// Class Engine.NavCollisionBase
class UNavCollisionBase : public UObject
{
public:
	uint8                                        bIsDynamicObstacle : 1;                            // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        Pad_228E[0x47];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNavCollisionBase* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.NavigationDataChunk
class UNavigationDataChunk : public UObject
{
public:
	class FName                                  NavigationDataName;                                // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UNavigationDataChunk* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.AmbientSound
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                       AudioComponent;                                    // 0x4B8(0x8)(ZeroConstructor)
	uint8                                        Pad_2293[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_191 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideAutoplay : 1;                             // Mask: 0x2, PropSize: 0x10x4C4(0x1)(None)
	uint8                                        Pad_2294[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AAmbientSound* GetDefaultObj();

	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};

// 0x0 (0x1D8 - 0x1D8)
// Class Engine.AimOffsetBlendSpace
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static class UClass* StaticClass();
	static class UAimOffsetBlendSpace* GetDefaultObj();

};

// 0x8 (0x1E0 - 0x1D8)
// Class Engine.BlendSpace1D
class UBlendSpace1D : public UBlendSpace
{
public:
	bool                                         bScaleAnimation;                                   // 0x1D8(0x1)(None)
	uint8                                        Pad_229A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlendSpace1D* GetDefaultObj();

};

// 0x0 (0x1E0 - 0x1E0)
// Class Engine.AimOffsetBlendSpace1D
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static class UClass* StaticClass();
	static class UAimOffsetBlendSpace1D* GetDefaultObj();

};

// 0x108 (0x140 - 0x38)
// Class Engine.AnimationSettings
class UAnimationSettings : public UDeveloperSettings
{
public:
	int32                                        CompressCommandletVersion;                         // 0x38(0x4)(None)
	uint8                                        Pad_22B0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        KeyEndEffectorsMatchNameArray;                     // 0x40(0x10)(None)
	bool                                         ForceRecompression;                                // 0x50(0x1)(None)
	bool                                         bForceBelowThreshold;                              // 0x51(0x1)(None)
	bool                                         bFirstRecompressUsingCurrentOrDefault;             // 0x52(0x1)(None)
	bool                                         bRaiseMaxErrorToExisting;                          // 0x53(0x1)(None)
	bool                                         bEnablePerformanceLog;                             // 0x54(0x1)(None)
	bool                                         bStripAnimationDataOnDedicatedServer;              // 0x55(0x1)(None)
	bool                                         bTickAnimationOnSkeletalMeshInit;                  // 0x56(0x1)(None)
	uint8                                        Pad_22B2[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimecodeCustomAttributeNameSettings  BoneTimecodeCustomAttributeNameSettings;           // 0x58(0x38)(None)
	TArray<struct FCustomAttributeSetting>       BoneCustomAttributesNames;                         // 0x90(0x10)(None)
	TArray<class FString>                        BoneNamesWithCustomAttributes;                     // 0xA0(0x10)(None)
	TMap<class FName, enum class ECustomAttributeBlendType> AttributeBlendModes;                               // 0xB0(0x50)(None)
	enum class ECustomAttributeBlendType         DefaultAttributeBlendMode;                         // 0x100(0x1)(None)
	uint8                                        Pad_22B3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        TransformAttributeNames;                           // 0x108(0x10)(None)
	TArray<TSoftObjectPtr<class UUserDefinedStruct>> UserDefinedStructAttributes;                       // 0x118(0x10)(None)
	TArray<struct FMirrorFindReplaceExpression>  MirrorFindReplaceExpressions;                      // 0x128(0x10)(None)
	struct FFrameRate                            DefaultFrameRate;                                  // 0x138(0x8)(None)

	static class UClass* StaticClass();
	static class UAnimationSettings* GetDefaultObj();

	void GetBoneCustomAttributeNamesToImport(const TArray<class FString>& ReturnValue);
};

// 0x0 (0xC0 - 0xC0)
// Class Engine.AnimBlueprintGeneratedStruct
class UAnimBlueprintGeneratedStruct : public UScriptStruct
{
public:

	static class UClass* StaticClass();
	static class UAnimBlueprintGeneratedStruct* GetDefaultObj();

};

// 0x270 (0x5E0 - 0x370)
// Class Engine.AnimBlueprintGeneratedClass
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	uint8                                        Pad_22C0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x378(0x10)(ZeroConstructor)
	class USkeleton*                             TargetSkeleton;                                    // 0x388(0x8)(ZeroConstructor)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x390(0x10)(ZeroConstructor)
	TMap<class FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;                        // 0x3A0(0x50)(None)
	uint8                                        Pad_22C1[0x80];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          SyncGroupNames;                                    // 0x470(0x10)(None)
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                       // 0x480(0x50)(None)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                                 // 0x4D0(0x50)(ZeroConstructor)
	TArray<struct FAnimNodeData>                 AnimNodeData;                                      // 0x520(0x10)(ZeroConstructor)
	TMap<class UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap;                                       // 0x530(0x50)(ZeroConstructor)
	uint8                                        Pad_22C2[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimBlueprintGeneratedClass* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimBoneCompressionCodec
class UAnimBoneCompressionCodec : public UObject
{
public:
	class FString                                Description;                                       // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UAnimBoneCompressionCodec* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimBoneCompressionSettings
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>     Codecs;                                            // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UAnimBoneCompressionSettings* GetDefaultObj();

};

// 0x230 (0x258 - 0x28)
// Class Engine.AnimClassData
class UAnimClassData : public UObject
{
public:
	uint8                                        Pad_22C6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x30(0x10)(ZeroConstructor)
	class USkeleton*                             TargetSkeleton;                                    // 0x40(0x8)(ZeroConstructor)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x48(0x10)(ZeroConstructor)
	TMap<class FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;                        // 0x58(0x50)(None)
	TArray<struct FAnimBlueprintFunction>        AnimBlueprintFunctions;                            // 0xA8(0x10)(None)
	TArray<struct FAnimBlueprintFunctionData>    AnimBlueprintFunctionData;                         // 0xB8(0x10)(ZeroConstructor)
	TArray<FFieldPathProperty_>                  AnimNodeProperties;                                // 0xC8(0x10)(ZeroConstructor)
	uint8                                        Pad_22CA[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  LinkedAnimGraphNodeProperties;                     // 0xE8(0x10)(ZeroConstructor)
	uint8                                        Pad_22CB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  LinkedAnimLayerNodeProperties;                     // 0x108(0x10)(ZeroConstructor)
	uint8                                        Pad_22CC[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  PreUpdateNodeProperties;                           // 0x128(0x10)(ZeroConstructor)
	uint8                                        Pad_22CD[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  DynamicResetNodeProperties;                        // 0x148(0x10)(ZeroConstructor)
	uint8                                        Pad_22CF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  StateMachineNodeProperties;                        // 0x168(0x10)(ZeroConstructor)
	uint8                                        Pad_22D0[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  InitializationNodeProperties;                      // 0x188(0x10)(ZeroConstructor)
	uint8                                        Pad_22D1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                             // 0x1A8(0x50)(None)
	TArray<class FName>                          SyncGroupNames;                                    // 0x1F8(0x10)(None)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                                 // 0x208(0x50)(None)

	static class UClass* StaticClass();
	static class UAnimClassData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimClassInterface
class IAnimClassInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IAnimClassInterface* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.AnimCompositeBase
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static class UClass* StaticClass();
	static class UAnimCompositeBase* GetDefaultObj();

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.AnimComposite
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                            AnimationTrack;                                    // 0xB0(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UAnimComposite* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.AnimCompress
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	uint8                                        bNeedsSkeleton : 1;                                // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_192 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22DD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnimationCompressionFormat       TranslationCompressionFormat;                      // 0x3C(0x1)(None)
	enum class EAnimationCompressionFormat       RotationCompressionFormat;                         // 0x3D(0x1)(None)
	enum class EAnimationCompressionFormat       ScaleCompressionFormat;                            // 0x3E(0x1)(None)
	uint8                                        Pad_22DE[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimCompress* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_BitwiseCompressOnly
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static class UClass* StaticClass();
	static class UAnimCompress_BitwiseCompressOnly* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_LeastDestructive
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:

	static class UClass* StaticClass();
	static class UAnimCompress_LeastDestructive* GetDefaultObj();

};

// 0x20 (0x60 - 0x40)
// Class Engine.AnimCompress_RemoveLinearKeys
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(None)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(None)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(None)
	float                                        MaxEffectorDiff;                                   // 0x4C(0x4)(None)
	float                                        MinEffectorDiff;                                   // 0x50(0x4)(None)
	float                                        EffectorDiffSocket;                                // 0x54(0x4)(None)
	float                                        ParentKeyScale;                                    // 0x58(0x4)(None)
	uint8                                        bRetarget : 1;                                     // Mask: 0x1, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bActuallyFilterLinearKeys : 1;                     // Mask: 0x2, PropSize: 0x10x5C(0x1)(None)
	uint8                                        Pad_22E4[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimCompress_RemoveLinearKeys* GetDefaultObj();

};

// 0x78 (0xD8 - 0x60)
// Class Engine.AnimCompress_PerTrackCompression
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                        MaxZeroingThreshold;                               // 0x60(0x4)(None)
	float                                        MaxPosDiffBitwise;                                 // 0x64(0x4)(None)
	float                                        MaxAngleDiffBitwise;                               // 0x68(0x4)(None)
	float                                        MaxScaleDiffBitwise;                               // 0x6C(0x4)(None)
	TArray<enum class EAnimationCompressionFormat> AllowedRotationFormats;                            // 0x70(0x10)(None)
	TArray<enum class EAnimationCompressionFormat> AllowedTranslationFormats;                         // 0x80(0x10)(None)
	TArray<enum class EAnimationCompressionFormat> AllowedScaleFormats;                               // 0x90(0x10)(None)
	uint8                                        bResampleAnimation : 1;                            // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        BitPad_193 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22E9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResampledFramerate;                                // 0xA4(0x4)(None)
	int32                                        MinKeysForResampling;                              // 0xA8(0x4)(None)
	uint8                                        bUseAdaptiveError : 1;                             // Mask: 0x1, PropSize: 0x10xAC(0x1)(None)
	uint8                                        bUseOverrideForEndEffectors : 1;                   // Mask: 0x2, PropSize: 0x10xAC(0x1)(None)
	uint8                                        BitPad_194 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22EB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TrackHeightBias;                                   // 0xB0(0x4)(None)
	float                                        ParentingDivisor;                                  // 0xB4(0x4)(None)
	float                                        ParentingDivisorExponent;                          // 0xB8(0x4)(None)
	uint8                                        bUseAdaptiveError2 : 1;                            // Mask: 0x1, PropSize: 0x10xBC(0x1)(None)
	uint8                                        BitPad_195 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22EC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RotationErrorSourceRatio;                          // 0xC0(0x4)(None)
	float                                        TranslationErrorSourceRatio;                       // 0xC4(0x4)(None)
	float                                        ScaleErrorSourceRatio;                             // 0xC8(0x4)(None)
	float                                        MaxErrorPerTrackRatio;                             // 0xCC(0x4)(None)
	float                                        PerturbationProbeSize;                             // 0xD0(0x4)(None)
	uint8                                        Pad_22EE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimCompress_PerTrackCompression* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class Engine.AnimCompress_RemoveEverySecondKey
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int32                                        MinKeys;                                           // 0x40(0x4)(None)
	uint8                                        bStartAtSecondKey : 1;                             // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        Pad_22F2[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimCompress_RemoveEverySecondKey* GetDefaultObj();

};

// 0x10 (0x50 - 0x40)
// Class Engine.AnimCompress_RemoveTrivialKeys
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(None)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(None)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(None)
	uint8                                        Pad_22F3[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimCompress_RemoveTrivialKeys* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec
class UAnimCurveCompressionCodec : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAnimCurveCompressionCodec* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass();
	static class UAnimCurveCompressionCodec_CompressedRichCurve* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_UniformIndexable
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass();
	static class UAnimCurveCompressionCodec_UniformIndexable* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_UniformlySampled
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass();
	static class UAnimCurveCompressionCodec_UniformlySampled* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.AnimCurveCompressionSettings
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*            Codec;                                             // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UAnimCurveCompressionSettings* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.AnimDataModel
class UAnimDataModel : public UObject
{
public:
	uint8                                        Pad_22F5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BracketCounter;                                    // 0x30(0x4)(None)
	uint8                                        Pad_22F6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            ModifiedEventDynamic;                              // 0x38(0x10)(ZeroConstructor)
	uint8                                        Pad_22F7[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBoneAnimationTrack>           BoneAnimationTracks;                               // 0x60(0x10)(None)
	float                                        PlayLength;                                        // 0x70(0x4)(None)
	struct FFrameRate                            FrameRate;                                         // 0x74(0x8)(None)
	int32                                        NumberOfFrames;                                    // 0x7C(0x4)(None)
	int32                                        NumberOfKeys;                                      // 0x80(0x4)(None)
	uint8                                        Pad_22F8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimationCurveData                   CurveData;                                         // 0x88(0x20)(None)
	TArray<struct FAnimatedBoneAttribute>        AnimatedBoneAttributes;                            // 0xA8(0x10)(None)
	bool                                         bPopulated;                                        // 0xB8(0x1)(None)
	uint8                                        Pad_22F9[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimDataModel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimMetaData
class UAnimMetaData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAnimMetaData* GetDefaultObj();

};

// 0x140 (0x1F0 - 0xB0)
// Class Engine.AnimMontage
class UAnimMontage : public UAnimCompositeBase
{
public:
	enum class EMontageBlendMode                 BlendModeIn;                                       // 0xB0(0x1)(None)
	enum class EMontageBlendMode                 BlendModeOut;                                      // 0xB1(0x1)(None)
	uint8                                        Pad_2302[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAlphaBlend                           BlendIn;                                           // 0xB8(0x30)(ZeroConstructor)
	struct FAlphaBlend                           BlendOut;                                          // 0xE8(0x30)(ZeroConstructor)
	float                                        BlendOutTriggerTime;                               // 0x118(0x4)(None)
	class FName                                  SyncGroup;                                         // 0x11C(0x8)(None)
	int32                                        SyncSlotIndex;                                     // 0x124(0x4)(None)
	struct FMarkerSyncData                       MarkerData;                                        // 0x128(0x20)(None)
	TArray<struct FCompositeSection>             CompositeSections;                                 // 0x148(0x10)(ZeroConstructor)
	TArray<struct FSlotAnimationTrack>           SlotAnimTracks;                                    // 0x158(0x10)(ZeroConstructor)
	bool                                         bEnableRootMotionTranslation;                      // 0x168(0x1)(None)
	bool                                         bEnableRootMotionRotation;                         // 0x169(0x1)(None)
	bool                                         bEnableAutoBlendOut;                               // 0x16A(0x1)(None)
	uint8                                        Pad_2303[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBlendProfile*                         BlendProfileIn;                                    // 0x170(0x8)(ZeroConstructor)
	class UBlendProfile*                         BlendProfileOut;                                   // 0x178(0x8)(ZeroConstructor)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x180(0x1)(None)
	uint8                                        Pad_2305[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBranchingPointMarker>         BranchingPointMarkers;                             // 0x188(0x10)(None)
	TArray<int32>                                BranchingPointStateNotifyIndices;                  // 0x198(0x10)(None)
	struct FTimeStretchCurve                     TimeStretchCurve;                                  // 0x1A8(0x28)(None)
	class FName                                  TimeStretchCurveName;                              // 0x1D0(0x8)(None)
	uint8                                        bClientPlayWhenNotRendered : 1;                    // Mask: 0x1, PropSize: 0x10x1D8(0x1)(None)
	uint8                                        bForceTickPoseAndServerUpdateMesh : 1;             // Mask: 0x2, PropSize: 0x10x1D8(0x1)(None)
	uint8                                        bAnimPauseOnFinish : 1;                            // Mask: 0x4, PropSize: 0x10x1D8(0x1)(None)
	uint8                                        BitPad_196 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2306[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          AnimationTags;                                     // 0x1E0(0x10)(None)

	static class UClass* StaticClass();
	static class UAnimMontage* GetDefaultObj();

	void IsValidSectionName(class FName InSectionName, bool ReturnValue);
	void GetSectionName(int32 SectionIndex, class FName ReturnValue);
	void GetSectionIndex(class FName InSectionName, int32 ReturnValue);
	void GetNumSections(int32 ReturnValue);
	void GetDefaultBlendOutTime(float ReturnValue);
	void GetDefaultBlendInTime(float ReturnValue);
	void GetBlendOutArgs(const struct FAlphaBlendArgs& ReturnValue);
	void GetBlendInArgs(const struct FAlphaBlendArgs& ReturnValue);
	void CreateSlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, class FName SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32 LoopCount, float InBlendOutTriggerTime, class UAnimMontage* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyLibrary
class UAnimNotifyLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimNotifyLibrary* GetDefaultObj();

	void NotifyStateReachedEnd(const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyMirrorInspectionLibrary
class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimNotifyMirrorInspectionLibrary* GetDefaultObj();

	void IsTriggeredByMirroredAnimation(const struct FAnimNotifyEventReference& EventReference, bool ReturnValue);
	void GetMirrorDataTable(const struct FAnimNotifyEventReference& EventReference, class UMirrorDataTable* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyStateMachineInspectionLibrary
class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimNotifyStateMachineInspectionLibrary* GetDefaultObj();

	void IsTriggeredByStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateMachineName, bool ReturnValue);
	void IsTriggeredByStateInStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateMachineName, class FName StateName, bool ReturnValue);
	void IsTriggeredByState(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, class FName StateName, bool ReturnValue);
};

// 0x0 (0x30 - 0x30)
// Class Engine.AnimNotifyState_DisableRootMotion
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:

	static class UClass* StaticClass();
	static class UAnimNotifyState_DisableRootMotion* GetDefaultObj();

};

// 0x48 (0x78 - 0x30)
// Class Engine.AnimNotifyState_TimedParticleEffect
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(None)
	class FName                                  SocketName;                                        // 0x38(0x8)(None)
	struct FVector                               LocationOffset;                                    // 0x40(0x18)(None)
	struct FRotator                              RotationOffset;                                    // 0x58(0x18)(None)
	bool                                         bDestroyAtEnd;                                     // 0x70(0x1)(None)
	uint8                                        Pad_2317[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState_TimedParticleEffect* GetDefaultObj();

};

// 0x28 (0x58 - 0x30)
// Class Engine.AnimNotifyState_Trail
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(None)
	class FName                                  FirstSocketName;                                   // 0x38(0x8)(None)
	class FName                                  SecondSocketName;                                  // 0x40(0x8)(None)
	enum class ETrailWidthMode                   WidthScaleMode;                                    // 0x48(0x1)(None)
	uint8                                        Pad_2318[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  WidthScaleCurve;                                   // 0x4C(0x8)(None)
	uint8                                        bRecycleSpawnedSystems : 1;                        // Mask: 0x1, PropSize: 0x10x54(0x1)(None)
	uint8                                        Pad_2319[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState_Trail* GetDefaultObj();

	void OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UParticleSystem* ReturnValue);
};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimNotify_PauseClothingSimulation
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_PauseClothingSimulation* GetDefaultObj();

};

// 0x28 (0x68 - 0x40)
// Class Engine.AnimNotify_PlaySound
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                            Sound;                                             // 0x40(0x8)(None)
	float                                        VolumeMultiplier;                                  // 0x48(0x4)(None)
	float                                        PitchMultiplier;                                   // 0x4C(0x4)(None)
	uint8                                        bFollow : 1;                                       // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_197 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_231A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AttachName;                                        // 0x54(0x8)(None)
	float                                        PercentChanceToPlay;                               // 0x5C(0x4)(None)
	bool                                         bPawnIgnoreInFPV;                                  // 0x60(0x1)(None)
	bool                                         bPawnIgnoreInTPV;                                  // 0x61(0x1)(None)
	bool                                         bIgnoreForLocallyControlled;                       // 0x62(0x1)(None)
	bool                                         bDoFollow;                                         // 0x63(0x1)(None)
	bool                                         bIgnoreIfMeshHidden;                               // 0x64(0x1)(None)
	bool                                         bIgnoreOwnerAttachedSoundMultiplier;               // 0x65(0x1)(None)
	uint8                                        Pad_231B[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_PlaySound* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimNotify_ResetClothingSimulation
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ResetClothingSimulation* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimNotify_ResetDynamics
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ResetDynamics* GetDefaultObj();

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimNotify_ResumeClothingSimulation
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass();
	static class UAnimNotify_ResumeClothingSimulation* GetDefaultObj();

};

// 0x130 (0x1E0 - 0xB0)
// Class Engine.AnimSequence
class UAnimSequence : public UAnimSequenceBase
{
public:
	class UAnimBoneCompressionSettings*          BoneCompressionSettings;                           // 0xB0(0x8)(ZeroConstructor)
	class UAnimCurveCompressionSettings*         CurveCompressionSettings;                          // 0xB8(0x8)(ZeroConstructor)
	uint8                                        Pad_231C[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAdditiveAnimationType            AdditiveAnimType;                                  // 0x130(0x1)(None)
	enum class EAdditiveBasePoseType             RefPoseType;                                       // 0x131(0x1)(None)
	uint8                                        Pad_231D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RefFrameIndex;                                     // 0x134(0x4)(None)
	class UAnimSequence*                         RefPoseSeq;                                        // 0x138(0x8)(ZeroConstructor)
	class FName                                  RetargetSource;                                    // 0x140(0x8)(None)
	TArray<struct FTransform>                    RetargetSourceAssetReferencePose;                  // 0x148(0x10)(None)
	enum class EAnimInterpolationType            Interpolation;                                     // 0x158(0x1)(None)
	bool                                         bEnableRootMotion;                                 // 0x159(0x1)(None)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x15A(0x1)(None)
	bool                                         bForceRootLock;                                    // 0x15B(0x1)(None)
	bool                                         bUseNormalizedRootMotionScale;                     // 0x15C(0x1)(None)
	bool                                         bRootMotionSettingsCopiedFromMontage;              // 0x15D(0x1)(None)
	uint8                                        Pad_231E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAnimSyncMarker>               AuthoredSyncMarkers;                               // 0x160(0x10)(None)
	uint8                                        Pad_231F[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFrameRate                            TargetFrameRate;                                   // 0x180(0x8)(None)
	struct FPerPlatformFrameRate                 PlatformTargetFrameRate;                           // 0x188(0x8)(None)
	TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves;                                   // 0x190(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UAnimSequence* GetDefaultObj();

};

// 0xC8 (0xF0 - 0x28)
// Class Engine.AnimSet
class UAnimSet : public UObject
{
public:
	uint8                                        bAnimRotationOnly : 1;                             // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_198 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2320[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TrackBoneNames;                                    // 0x30(0x10)(None)
	TArray<struct FAnimSetMeshLinkup>            LinkupCache;                                       // 0x40(0x10)(None)
	TArray<uint8>                                BoneUseAnimTranslation;                            // 0x50(0x10)(None)
	TArray<uint8>                                ForceUseMeshTranslation;                           // 0x60(0x10)(None)
	TArray<class FName>                          UseTranslationBoneNames;                           // 0x70(0x10)(None)
	TArray<class FName>                          ForceMeshTranslationBoneNames;                     // 0x80(0x10)(None)
	class FName                                  PreviewSkelMeshName;                               // 0x90(0x8)(None)
	class FName                                  BestRatioSkelMeshName;                             // 0x98(0x8)(None)
	uint8                                        Pad_2321[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimSet* GetDefaultObj();

};

// 0x18 (0x360 - 0x348)
// Class Engine.AnimSingleNodeInstance
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                       CurrentAsset;                                      // 0x348(0x8)(ZeroConstructor)
	FDelegateProperty_                           PostEvaluateAnimEvent;                             // 0x350(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UAnimSingleNodeInstance* GetDefaultObj();

	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(class FName PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetMirrorDataTable(class UMirrorDataTable* MirrorDataTable);
	void SetLooping(bool bIsLooping);
	void SetBlendSpacePosition(const struct FVector& InPosition);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	void GetMirrorDataTable(class UMirrorDataTable* ReturnValue);
	void GetLength(float ReturnValue);
	void GetAnimationAsset(class UAnimationAsset* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimStateMachineTypes
class UAnimStateMachineTypes : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAnimStateMachineTypes* GetDefaultObj();

};

// 0x40 (0xF0 - 0xB0)
// Class Engine.AnimStreamable
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int32                                        NumberOfKeys;                                      // 0xB0(0x4)(None)
	enum class EAnimInterpolationType            Interpolation;                                     // 0xB4(0x1)(None)
	uint8                                        Pad_2331[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  RetargetSource;                                    // 0xB8(0x8)(None)
	struct FFrameRate                            SamplingFrameRate;                                 // 0xC0(0x8)(None)
	uint8                                        Pad_2332[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimBoneCompressionSettings*          BoneCompressionSettings;                           // 0xD8(0x8)(ZeroConstructor)
	class UAnimCurveCompressionSettings*         CurveCompressionSettings;                          // 0xE0(0x8)(ZeroConstructor)
	bool                                         bEnableRootMotion;                                 // 0xE8(0x1)(None)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0xE9(0x1)(None)
	bool                                         bForceRootLock;                                    // 0xEA(0x1)(None)
	bool                                         bUseNormalizedRootMotionScale;                     // 0xEB(0x1)(None)
	uint8                                        Pad_2333[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimStreamable* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.AssetMappingTable
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                 MappedAssets;                                      // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UAssetMappingTable* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationAttributeIdentifierExtensions
class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimationAttributeIdentifierExtensions* GetDefaultObj();

	void IsValid(const struct FAnimationAttributeIdentifier& Identifier, bool ReturnValue);
};

// 0x400 (0x428 - 0x28)
// Class Engine.Skeleton
class USkeleton : public UObject
{
public:
	uint8                                        Pad_2335[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBoneNode>                     BoneTree;                                          // 0x38(0x10)(None)
	uint8                                        Pad_2336[0x118];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 VirtualBoneGuid;                                   // 0x160(0x10)(None)
	TArray<struct FVirtualBone>                  VirtualBones;                                      // 0x170(0x10)(None)
	TArray<TSoftObjectPtr<class USkeleton>>      CompatibleSkeletons;                               // 0x180(0x10)(ZeroConstructor)
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x190(0x10)(ZeroConstructor)
	uint8                                        Pad_2337[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSmartNameContainer                   SmartNames;                                        // 0x1F0(0x50)(None)
	uint8                                        Pad_2338[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UBlendProfile*>                 BlendProfiles;                                     // 0x270(0x10)(ZeroConstructor)
	TArray<struct FAnimSlotGroup>                SlotGroups;                                        // 0x280(0x10)(None)
	uint8                                        Pad_2339[0x188];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x418(0x10)(None)

	static class UClass* StaticClass();
	static class USkeleton* GetDefaultObj();

	void GetBlendProfile(class FName InProfileName, class UBlendProfile* ReturnValue);
	void AddCompatibleSkeleton(class USkeleton* SourceSkeleton);
};

// 0x28 (0x50 - 0x28)
// Class Engine.BlendProfile
class UBlendProfile : public UObject
{
public:
	uint8                                        Pad_233A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             OwningSkeleton;                                    // 0x30(0x8)(None)
	TArray<struct FBlendProfileBoneEntry>        ProfileEntries;                                    // 0x38(0x10)(None)
	enum class EBlendProfileMode                 Mode;                                              // 0x48(0x1)(None)
	uint8                                        Pad_233B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBlendProfile* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.BoneMaskFilter
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>               BlendPoses;                                        // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UBoneMaskFilter* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.CachedAnimDataLibrary
class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCachedAnimDataLibrary* GetDefaultObj();

	void StateMachine_IsStateRelevant(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData, bool ReturnValue);
	void StateMachine_GetLocalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData, float ReturnValue);
	void StateMachine_GetGlobalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData, float ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationCurveIdentifierExtensions
class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAnimationCurveIdentifierExtensions* GetDefaultObj();

	void IsValid(const struct FAnimationCurveIdentifier& Identifier, bool ReturnValue);
	void GetType(const struct FAnimationCurveIdentifier& Identifier, enum class ERawCurveTrackTypes ReturnValue);
	void GetName(const struct FAnimationCurveIdentifier& Identifier, class FName ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveSourceInterface
class ICurveSourceInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICurveSourceInterface* GetDefaultObj();

	void GetCurveValue(class FName CurveName, float ReturnValue);
	void GetCurves(const TArray<struct FNamedCurveValue>& OutValues);
	void GetBindingName(class FName ReturnValue);
};

// 0x88 (0xB0 - 0x28)
// Class Engine.DataTable
class UDataTable : public UObject
{
public:
	class UScriptStruct*                         RowStruct;                                         // 0x28(0x8)(None)
	uint8                                        Pad_2346[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bStripFromClientBuilds : 1;                        // Mask: 0x1, PropSize: 0x10x80(0x1)(None)
	uint8                                        bIgnoreExtraFields : 1;                            // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        bIgnoreMissingFields : 1;                          // Mask: 0x4, PropSize: 0x10x80(0x1)(None)
	uint8                                        BitPad_19E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2348[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ImportKeyField;                                    // 0x88(0x10)(None)
	uint8                                        Pad_2349[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataTable* GetDefaultObj();

};

// 0xF0 (0x1A0 - 0xB0)
// Class Engine.MirrorDataTable
class UMirrorDataTable : public UDataTable
{
public:
	TArray<struct FMirrorFindReplaceExpression>  MirrorFindReplaceExpressions;                      // 0xB0(0x10)(None)
	enum class EAxis                             MirrorAxis;                                        // 0xC0(0x1)(None)
	uint8                                        Pad_234A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0xC8(0x8)(ZeroConstructor)
	uint8                                        Pad_234B[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMirrorDataTable* GetDefaultObj();

};

// 0x150 (0x178 - 0x28)
// Class Engine.NodeMappingContainer
class UNodeMappingContainer : public UObject
{
public:
	TMap<class FName, struct FNodeItem>          SourceItems;                                       // 0x28(0x50)(None)
	TMap<class FName, struct FNodeItem>          TargetItems;                                       // 0x78(0x50)(None)
	TMap<class FName, class FName>               SourceToTarget;                                    // 0xC8(0x50)(None)
	TSoftObjectPtr<class UObject>                SourceAsset;                                       // 0x118(0x30)(ZeroConstructor)
	TSoftObjectPtr<class UObject>                TargetAsset;                                       // 0x148(0x30)(None)

	static class UClass* StaticClass();
	static class UNodeMappingContainer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NodeMappingProviderInterface
class INodeMappingProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class INodeMappingProviderInterface* GetDefaultObj();

};

// 0x80 (0x100 - 0x80)
// Class Engine.PoseAsset
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                    PoseContainer;                                     // 0x80(0x60)(None)
	bool                                         bAdditivePose;                                     // 0xE0(0x1)(None)
	uint8                                        Pad_234E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BasePoseIndex;                                     // 0xE4(0x4)(None)
	class FName                                  RetargetSource;                                    // 0xE8(0x8)(None)
	TArray<struct FTransform>                    RetargetSourceAssetReferencePose;                  // 0xF0(0x10)(None)

	static class UClass* StaticClass();
	static class UPoseAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PreviewCollectionInterface
class IPreviewCollectionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPreviewCollectionInterface* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class Engine.PreviewMeshCollection
class UPreviewMeshCollection : public UDataAsset
{
public:
	uint8                                        Pad_2350[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x38(0x8)(ZeroConstructor)
	TArray<struct FPreviewMeshCollectionEntry>   SkeletalMeshes;                                    // 0x40(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPreviewMeshCollection* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.Rig
class URig : public UObject
{
public:
	uint8                                        Pad_2353[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTransformBase>                TransformBases;                                    // 0x30(0x10)(None)
	TArray<struct FNode>                         Nodes;                                             // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class URig* GetDefaultObj();

};

// 0x88 (0x540 - 0x4B8)
// Class Engine.SkeletalMeshActor
class ASkeletalMeshActor : public AActor
{
public:
	uint8                                        Pad_2358[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShouldDoAnimNotifies : 1;                         // Mask: 0x1, PropSize: 0x10x4C0(0x1)(None)
	uint8                                        BitPad_1A4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2359[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0x4C8(0x8)(ZeroConstructor)
	class USkeletalMesh*                         ReplicatedMesh;                                    // 0x4D0(0x8)(ZeroConstructor)
	class UPhysicsAsset*                         ReplicatedPhysAsset;                               // 0x4D8(0x8)(ZeroConstructor)
	class UMaterialInterface*                    ReplicatedMaterial0;                               // 0x4E0(0x8)(ZeroConstructor)
	class UMaterialInterface*                    ReplicatedMaterial1;                               // 0x4E8(0x8)(ZeroConstructor)
	uint8                                        Pad_235A[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASkeletalMeshActor* GetDefaultObj();

	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};

// 0x28 (0xD0 - 0xA8)
// Class Engine.AnimBlueprint
class UAnimBlueprint : public UBlueprint
{
public:
	uint8                                        Pad_235B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             TargetSkeleton;                                    // 0xB0(0x8)(ZeroConstructor)
	TArray<struct FAnimGroupInfo>                Groups;                                            // 0xB8(0x10)(None)
	bool                                         bIsTemplate;                                       // 0xC8(0x1)(None)
	bool                                         bUseMultiThreadedAnimationUpdate;                  // 0xC9(0x1)(None)
	bool                                         bWarnAboutBlueprintUsage;                          // 0xCA(0x1)(None)
	uint8                                        bEnableLinkedAnimLayerInstanceSharing : 1;         // Mask: 0x1, PropSize: 0x10xCB(0x1)(None)
	uint8                                        Pad_235D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimBlueprint* GetDefaultObj();

};

// 0x4C0 (0x4E8 - 0x28)
// Class Engine.AssetManager
class UAssetManager : public UObject
{
public:
	uint8                                        Pad_2361[0x308];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       ObjectReferenceList;                               // 0x330(0x10)(None)
	bool                                         bIsGlobalAsyncScanEnvironment;                     // 0x340(0x1)(None)
	bool                                         bShouldGuessTypeAndName;                           // 0x341(0x1)(None)
	bool                                         bShouldUseSynchronousLoad;                         // 0x342(0x1)(None)
	bool                                         bIsLoadingFromPakFiles;                            // 0x343(0x1)(None)
	bool                                         bShouldAcquireMissingChunksOnLoad;                 // 0x344(0x1)(None)
	bool                                         bOnlyCookProductionAssets;                         // 0x345(0x1)(None)
	uint8                                        Pad_2363[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumBulkScanRequests;                               // 0x348(0x4)(None)
	bool                                         bIsPrimaryAssetDirectoryCurrent;                   // 0x34C(0x1)(None)
	bool                                         bIsManagementDatabaseCurrent;                      // 0x34D(0x1)(None)
	bool                                         bUpdateManagementDatabaseAfterScan;                // 0x34E(0x1)(None)
	bool                                         bIncludeOnlyOnDiskAssets;                          // 0x34F(0x1)(None)
	bool                                         bHasCompletedInitialScan;                          // 0x350(0x1)(None)
	uint8                                        Pad_2364[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumberOfSpawnedNotifications;                      // 0x354(0x4)(None)
	uint8                                        Pad_2365[0x190];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAssetManager* GetDefaultObj();

};

// 0x48 (0x78 - 0x30)
// Class Engine.AsyncActionLoadPrimaryAssetBase
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	uint8                                        Pad_2366[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAsyncActionLoadPrimaryAssetBase* GetDefaultObj();

};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAsset
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UAsyncActionLoadPrimaryAsset* GetDefaultObj();

	void AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, const TArray<class FName>& LoadBundles, class UAsyncActionLoadPrimaryAsset* ReturnValue);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetClass
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UAsyncActionLoadPrimaryAssetClass* GetDefaultObj();

	void AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, const TArray<class FName>& LoadBundles, class UAsyncActionLoadPrimaryAssetClass* ReturnValue);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetList
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UAsyncActionLoadPrimaryAssetList* GetDefaultObj();

	void AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& LoadBundles, class UAsyncActionLoadPrimaryAssetList* ReturnValue);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetClassList
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UAsyncActionLoadPrimaryAssetClassList* GetDefaultObj();

	void AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& LoadBundles, class UAsyncActionLoadPrimaryAssetClassList* ReturnValue);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionChangePrimaryAssetBundles
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(None)

	static class UClass* StaticClass();
	static class UAsyncActionChangePrimaryAssetBundles* GetDefaultObj();

	void AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, const TArray<struct FPrimaryAssetId>& PrimaryAssetList, const TArray<class FName>& AddBundles, const TArray<class FName>& RemoveBundles, class UAsyncActionChangePrimaryAssetBundles* ReturnValue);
	void AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, const TArray<class FName>& NewBundles, const TArray<class FName>& OldBundles, class UAsyncActionChangePrimaryAssetBundles* ReturnValue);
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.AtmosphericFog
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*              AtmosphericFogComponent;                           // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AAtmosphericFog* GetDefaultObj();

};

// 0xF8 (0x3C0 - 0x2C8)
// Class Engine.SkyAtmosphereComponent
class USkyAtmosphereComponent : public USceneComponent
{
public:
	enum class ESkyAtmosphereTransformMode       TransformMode;                                     // 0x2C8(0x1)(None)
	uint8                                        Pad_237C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BottomRadius;                                      // 0x2CC(0x4)(None)
	struct FColor                                GroundAlbedo;                                      // 0x2D0(0x4)(None)
	float                                        AtmosphereHeight;                                  // 0x2D4(0x4)(None)
	float                                        MultiScatteringFactor;                             // 0x2D8(0x4)(None)
	float                                        TraceSampleCountScale;                             // 0x2DC(0x4)(None)
	float                                        RayleighScatteringScale;                           // 0x2E0(0x4)(None)
	struct FLinearColor                          RayleighScattering;                                // 0x2E4(0x10)(None)
	float                                        RayleighExponentialDistribution;                   // 0x2F4(0x4)(None)
	float                                        MieScatteringScale;                                // 0x2F8(0x4)(None)
	struct FLinearColor                          MieScattering;                                     // 0x2FC(0x10)(None)
	float                                        MieAbsorptionScale;                                // 0x30C(0x4)(None)
	struct FLinearColor                          MieAbsorption;                                     // 0x310(0x10)(None)
	float                                        MieAnisotropy;                                     // 0x320(0x4)(None)
	float                                        MieExponentialDistribution;                        // 0x324(0x4)(None)
	float                                        OtherAbsorptionScale;                              // 0x328(0x4)(None)
	struct FLinearColor                          OtherAbsorption;                                   // 0x32C(0x10)(None)
	struct FTentDistribution                     OtherTentDistribution;                             // 0x33C(0xC)(None)
	struct FLinearColor                          SkyLuminanceFactor;                                // 0x348(0x10)(None)
	float                                        AerialPespectiveViewDistanceScale;                 // 0x358(0x4)(None)
	float                                        HeightFogContribution;                             // 0x35C(0x4)(None)
	float                                        TransmittanceMinLightElevationAngle;               // 0x360(0x4)(None)
	float                                        AerialPerspectiveStartDepth;                       // 0x364(0x4)(None)
	uint8                                        Pad_237D[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 bStaticLightingBuiltGUID;                          // 0x3A8(0x10)(None)
	uint8                                        Pad_237E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkyAtmosphereComponent* GetDefaultObj();

	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue);
	void SetRayleighScatteringScale(float NewValue);
	void SetRayleighScattering(const struct FLinearColor& NewValue);
	void SetRayleighExponentialDistribution(float NewValue);
	void SetOtherAbsorptionScale(float NewValue);
	void SetOtherAbsorption(const struct FLinearColor& NewValue);
	void SetMultiScatteringFactor(float NewValue);
	void SetMieScatteringScale(float NewValue);
	void SetMieScattering(const struct FLinearColor& NewValue);
	void SetMieExponentialDistribution(float NewValue);
	void SetMieAnisotropy(float NewValue);
	void SetMieAbsorptionScale(float NewValue);
	void SetMieAbsorption(const struct FLinearColor& NewValue);
	void SetHeightFogContribution(float NewValue);
	void SetAtmosphereHeight(float NewValue);
	void SetAerialPespectiveViewDistanceScale(float NewValue);
	void ResetAtmosphereLightDirectionOverride(int32 AtmosphereLightIndex);
	void OverrideAtmosphereLightDirection(int32 AtmosphereLightIndex, const struct FVector& LightDirection);
	void IsAtmosphereLightDirectionOverriden(int32 AtmosphereLightIndex, bool ReturnValue);
	void GetOverridenAtmosphereLightDirection(int32 AtmosphereLightIndex, const struct FVector& ReturnValue);
	void GetAtmosphereTransmitanceOnGroundAtPlanetTop(class UDirectionalLightComponent* DirectionalLight, const struct FLinearColor& ReturnValue);
};

// 0x60 (0x420 - 0x3C0)
// Class Engine.AtmosphericFogComponent
class UAtmosphericFogComponent : public USkyAtmosphereComponent
{
public:
	struct FLinearColor                          LUT_TintScatter;                                   // 0x3C0(0x10)(None)
	struct FLinearColor                          LUT_TintLoss;                                      // 0x3D0(0x10)(None)
	bool                                         bUseDayCycle;                                      // 0x3E0(0x1)(None)
	uint8                                        Pad_2385[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UTexture2D*>                    LossTextures;                                      // 0x3E8(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    ScatterTextures;                                   // 0x3F8(0x10)(ZeroConstructor)
	class UTextureRenderTarget2D*                External_ScatterRT;                                // 0x408(0x8)(ZeroConstructor)
	class UTextureRenderTarget2D*                External_LossRT;                                   // 0x410(0x8)(ZeroConstructor)
	uint8                                        Pad_2386[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAtmosphericFogComponent* GetDefaultObj();

	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int32 MaxScatteringOrder, int32 InscatterAltitudeSampleNum);
	void SetFogTexturesDirectly(class UTexture2D* ScatterTexture0, class UTexture2D* ScatterTexture1, class UTexture2D* LossTexture0, class UTexture2D* LossTexture1, float InInterpolation);
	void SetFogOverTimeIndices(int32 Texture0, int32 Texture1, float InInterpolation);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};

// 0x10 (0x38 - 0x28)
// Class Engine.AudioBus
class UAudioBus : public UObject
{
public:
	uint8                                        Pad_2387[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAudioBusChannels                 AudioBusChannels;                                  // 0x30(0x1)(None)
	uint8                                        Pad_2388[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAudioBus* GetDefaultObj();

};

// 0x1A8 (0x1E0 - 0x38)
// Class Engine.AudioSettings
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                       DefaultSoundClassName;                             // 0x38(0x20)(None)
	struct FSoftObjectPath                       DefaultMediaSoundClassName;                        // 0x58(0x20)(None)
	struct FSoftObjectPath                       DefaultSoundConcurrencyName;                       // 0x78(0x20)(None)
	struct FSoftObjectPath                       DefaultBaseSoundMix;                               // 0x98(0x20)(None)
	struct FSoftObjectPath                       VoiPSoundClass;                                    // 0xB8(0x20)(None)
	struct FSoftObjectPath                       MasterSubmix;                                      // 0xD8(0x20)(None)
	struct FSoftObjectPath                       BaseDefaultSubmix;                                 // 0xF8(0x20)(None)
	struct FSoftObjectPath                       ReverbSubmix;                                      // 0x118(0x20)(None)
	struct FSoftObjectPath                       EQSubmix;                                          // 0x138(0x20)(None)
	enum class EVoiceSampleRate                  VoiPSampleRate;                                    // 0x158(0x4)(None)
	enum class EDefaultAudioCompressionType      DefaultAudioCompressionType;                       // 0x15C(0x1)(None)
	uint8                                        Pad_238B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultReverbSendLevel;                            // 0x160(0x4)(None)
	int32                                        MaximumConcurrentStreams;                          // 0x164(0x4)(None)
	float                                        GlobalMinPitchScale;                               // 0x168(0x4)(None)
	float                                        GlobalMaxPitchScale;                               // 0x16C(0x4)(None)
	TArray<struct FAudioQualitySettings>         QualityLevels;                                     // 0x170(0x10)(None)
	uint8                                        bAllowPlayWhenSilent : 1;                          // Mask: 0x1, PropSize: 0x10x180(0x1)(None)
	uint8                                        bDisableMasterEQ : 1;                              // Mask: 0x2, PropSize: 0x10x180(0x1)(None)
	uint8                                        bAllowCenterChannel3DPanning : 1;                  // Mask: 0x4, PropSize: 0x10x180(0x1)(None)
	uint8                                        BitPad_1AC : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_238C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       NumStoppingSources;                                // 0x184(0x4)(None)
	enum class EPanningMethod                    PanningMethod;                                     // 0x188(0x1)(None)
	enum class EMonoChannelUpmixMethod           MonoChannelUpmixMethod;                            // 0x189(0x1)(None)
	uint8                                        Pad_238D[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DialogueFilenameFormat;                            // 0x190(0x10)(None)
	TArray<struct FSoundDebugEntry>              DebugSounds;                                       // 0x1A0(0x10)(None)
	TArray<struct FDefaultAudioBusSettings>      DefaultAudioBuses;                                 // 0x1B0(0x10)(None)
	class USoundClass*                           DefaultSoundClass;                                 // 0x1C0(0x8)(ZeroConstructor)
	class USoundClass*                           DefaultMediaSoundClass;                            // 0x1C8(0x8)(ZeroConstructor)
	class USoundConcurrency*                     DefaultSoundConcurrency;                           // 0x1D0(0x8)(None)
	uint8                                        Pad_238E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAudioSettings* GetDefaultObj();

};

// 0x70 (0x578 - 0x508)
// Class Engine.AudioVolume
class AAudioVolume : public AVolume
{
public:
	float                                        Priority;                                          // 0x508(0x4)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x50C(0x1)(None)
	uint8                                        BitPad_1AD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2392[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       Settings;                                          // 0x510(0x20)(ZeroConstructor)
	struct FInteriorSettings                     AmbientZoneSettings;                               // 0x530(0x24)(None)
	uint8                                        Pad_2393[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings;                                // 0x558(0x10)(ZeroConstructor)
	TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings;                            // 0x568(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AAudioVolume* GetDefaultObj();

	void SetSubmixSendSettings(const TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);
	void SetSubmixOverrideSettings(const TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);
	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorSoundParameterInterface
class IActorSoundParameterInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IActorSoundParameterInterface* GetDefaultObj();

	void GetActorSoundParams(const TArray<struct FAudioParameter>& Params);
};

// 0x0 (0x30 - 0x30)
// Class Engine.AudioWidgetSubsystem
class UAudioWidgetSubsystem : public UEngineSubsystem
{
public:

	static class UClass* StaticClass();
	static class UAudioWidgetSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundParameterControllerInterface
class ISoundParameterControllerInterface : public IAudioParameterControllerInterface
{
public:

	static class UClass* StaticClass();
	static class ISoundParameterControllerInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.AudioParameterConversionStatics
class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UAudioParameterConversionStatics* GetDefaultObj();

	void StringToAudioParameter(class FName Name, const class FString& String, const struct FAudioParameter& ReturnValue);
	void StringArrayToAudioParameter(class FName Name, const TArray<class FString>& Strings, const struct FAudioParameter& ReturnValue);
	void ObjectToAudioParameter(class FName Name, class UObject* Object, const struct FAudioParameter& ReturnValue);
	void ObjectArrayToAudioParameter(class FName Name, const TArray<class UObject*>& Objects, const struct FAudioParameter& ReturnValue);
	void IntegerToAudioParameter(class FName Name, int32 Integer, const struct FAudioParameter& ReturnValue);
	void IntegerArrayToAudioParameter(class FName Name, const TArray<int32>& Integers, const struct FAudioParameter& ReturnValue);
	void FloatToAudioParameter(class FName Name, float Float, const struct FAudioParameter& ReturnValue);
	void FloatArrayToAudioParameter(class FName Name, const TArray<float>& Floats, const struct FAudioParameter& ReturnValue);
	void BooleanToAudioParameter(class FName Name, bool Bool, const struct FAudioParameter& ReturnValue);
	void BooleanArrayToAudioParameter(class FName Name, const TArray<bool>& Bools, const struct FAudioParameter& ReturnValue);
};

// 0x8 (0x510 - 0x508)
// Class Engine.BlockingVolume
class ABlockingVolume : public AVolume
{
public:
	bool                                         bAddToBlockingVolumeList;                          // 0x508(0x1)(None)
	uint8                                        Pad_239F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABlockingVolume* GetDefaultObj();

	void OnInterpToggle(bool bEnable);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintMapLibrary
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBlueprintMapLibrary* GetDefaultObj();

	void SetMapPropertyByName(class UObject* Object, class FName PropertyName, TMap<int32, int32> Value);
	void Map_Values(TMap<int32, int32> TargetMap, const TArray<int32>& Values);
	void Map_Remove(TMap<int32, int32> TargetMap, int32 Key, bool ReturnValue);
	void Map_Length(TMap<int32, int32> TargetMap, int32 ReturnValue);
	void Map_Keys(TMap<int32, int32> TargetMap, const TArray<int32>& Keys);
	void Map_IsNotEmpty(TMap<int32, int32> TargetMap, bool ReturnValue);
	void Map_IsEmpty(TMap<int32, int32> TargetMap, bool ReturnValue);
	void Map_Find(TMap<int32, int32> TargetMap, int32 Key, int32 Value, bool ReturnValue);
	void Map_Contains(TMap<int32, int32> TargetMap, int32 Key, bool ReturnValue);
	void Map_Clear(TMap<int32, int32> TargetMap);
	void Map_Add(TMap<int32, int32> TargetMap, int32 Key, int32 Value);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintSetLibrary
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBlueprintSetLibrary* GetDefaultObj();

	void SetSetPropertyByName(class UObject* Object, class FName PropertyName, TSet<int32> Value);
	void Set_Union(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
	void Set_ToArray(TSet<int32> A, const TArray<int32>& Result);
	void Set_RemoveItems(TSet<int32> TargetSet, const TArray<int32>& Items);
	void Set_Remove(TSet<int32> TargetSet, int32 Item, bool ReturnValue);
	void Set_Length(TSet<int32> TargetSet, int32 ReturnValue);
	void Set_IsNotEmpty(TSet<int32> TargetSet, bool ReturnValue);
	void Set_IsEmpty(TSet<int32> TargetSet, bool ReturnValue);
	void Set_Intersection(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
	void Set_Difference(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
	void Set_Contains(TSet<int32> TargetSet, int32 ItemToFind, bool ReturnValue);
	void Set_Clear(TSet<int32> TargetSet);
	void Set_AddItems(TSet<int32> TargetSet, const TArray<int32>& NewItems);
	void Set_Add(TSet<int32> TargetSet, int32 NewItem);
};

// 0x40 (0x68 - 0x28)
// Class Engine.BookMark
class UBookMark : public UBookmarkBase
{
public:
	struct FVector                               Location;                                          // 0x28(0x18)(None)
	struct FRotator                              Rotation;                                          // 0x40(0x18)(None)
	TArray<class FString>                        HiddenLevels;                                      // 0x58(0x10)(None)

	static class UClass* StaticClass();
	static class UBookMark* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class Engine.BrushBuilder
class UBrushBuilder : public UObject
{
public:
	class FString                                BitmapFilename;                                    // 0x28(0x10)(None)
	class FString                                Tooltip;                                           // 0x38(0x10)(None)
	uint8                                        NotifyBadParams : 1;                               // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        BitPad_1B3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23CB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       Vertices;                                          // 0x50(0x10)(None)
	TArray<struct FBuilderPoly>                  Polys;                                             // 0x60(0x10)(None)
	class FName                                  Layer;                                             // 0x70(0x8)(None)
	uint8                                        MergeCoplanars : 1;                                // Mask: 0x1, PropSize: 0x10x78(0x1)(None)
	uint8                                        Pad_23CC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBrushBuilder* GetDefaultObj();

};

// 0x0 (0x4F0 - 0x4F0)
// Class Engine.BrushShape
class ABrushShape : public ABrush
{
public:

	static class UClass* StaticClass();
	static class ABrushShape* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.CameraBlockingVolume
class ACameraBlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ACameraBlockingVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraLensEffectInterface
class ICameraLensEffectInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ICameraLensEffectInterface* GetDefaultObj();

	void GetPrimaryParticleComponent(class UFXSystemComponent* ReturnValue);
	void GetParticleComponents(const TArray<class UFXSystemComponent*>& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UCameraLensEffectInterfaceClassSupportLibrary* GetDefaultObj();

	void SetInterfaceClass(class UClass* Class, const struct FCameraLensInterfaceClassSupport& Var, enum class EInterfaceValidResult Result);
	void IsInterfaceValid(TScriptInterface<class ICameraLensEffectInterface> CameraLens, enum class EInterfaceValidResult Result);
	void IsInterfaceClassValid(const struct FCameraLensInterfaceClassSupport& CameraLens, enum class EInterfaceValidResult Result);
	void GetInterfaceClass(const struct FCameraLensInterfaceClassSupport& CameraLens, class UClass* ReturnValue);
};

// 0x68 (0xB0 - 0x48)
// Class Engine.CameraModifier_CameraShake
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>        ActiveShakes;                                      // 0x48(0x10)(ZeroConstructor)
	TMap<class UClass*, struct FPooledCameraShakes> ExpiredPooledShakesMap;                            // 0x58(0x50)(ZeroConstructor)
	float                                        SplitScreenShakeScale;                             // 0xA8(0x4)(None)
	uint8                                        Pad_23DB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraModifier_CameraShake* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.CameraShakeSourceActor
class ACameraShakeSourceActor : public AActor
{
public:
	class UCameraShakeSourceComponent*           CameraShakeSourceComponent;                        // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ACameraShakeSourceActor* GetDefaultObj();

};

// 0x28 (0x2F0 - 0x2C8)
// Class Engine.CameraShakeSourceComponent
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	enum class ECameraShakeAttenuation           Attenuation;                                       // 0x2C8(0x1)(None)
	uint8                                        Pad_23DF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InnerAttenuationRadius;                            // 0x2CC(0x4)(None)
	float                                        OuterAttenuationRadius;                            // 0x2D0(0x4)(None)
	uint8                                        Pad_23E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CameraShake;                                       // 0x2D8(0x8)(ZeroConstructor)
	bool                                         bAutoStart;                                        // 0x2E0(0x1)(None)
	uint8                                        Pad_23E1[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCameraShakeSourceComponent* GetDefaultObj();

	void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);
	void StopAllCameraShakes(bool bImmediately);
	void StartCameraShake(class UClass* InCameraShake, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void Start();
	void GetAttenuationFactor(const struct FVector& Location, float ReturnValue);
};

// 0x8 (0x1E0 - 0x1D8)
// Class Engine.TextureRenderTarget
class UTextureRenderTarget : public UTexture
{
public:
	float                                        TargetGamma;                                       // 0x1D8(0x4)(None)
	uint8                                        bUsedWithComputeMaterial : 1;                      // Mask: 0x1, PropSize: 0x10x1DC(0x1)(None)
	uint8                                        Pad_23E3[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureRenderTarget* GetDefaultObj();

};

// 0x28 (0x208 - 0x1E0)
// Class Engine.TextureRenderTarget2D
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1E0(0x4)(None)
	int32                                        SizeY;                                             // 0x1E4(0x4)(None)
	struct FLinearColor                          ClearColor;                                        // 0x1E8(0x10)(None)
	enum class ETextureAddress                   AddressX;                                          // 0x1F8(0x1)(None)
	enum class ETextureAddress                   AddressY;                                          // 0x1F9(0x1)(None)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x1, PropSize: 0x10x1FA(0x1)(None)
	uint8                                        bHDR : 1;                                          // Mask: 0x2, PropSize: 0x10x1FA(0x1)(None)
	uint8                                        bGPUSharedFlag : 1;                                // Mask: 0x4, PropSize: 0x10x1FA(0x1)(None)
	uint8                                        BitPad_1B9 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureRenderTargetFormat        RenderTargetFormat;                                // 0x1FB(0x1)(None)
	uint8                                        bAutoGenerateMips : 1;                             // Mask: 0x1, PropSize: 0x10x1FC(0x1)(None)
	uint8                                        BitPad_1BA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureFilter                    MipsSamplerFilter;                                 // 0x1FD(0x1)(None)
	enum class ETextureAddress                   MipsAddressU;                                      // 0x1FE(0x1)(None)
	enum class ETextureAddress                   MipsAddressV;                                      // 0x1FF(0x1)(None)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x200(0x1)(None)
	uint8                                        Pad_23E5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureRenderTarget2D* GetDefaultObj();

};

// 0x28 (0x230 - 0x208)
// Class Engine.CanvasRenderTarget2D
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	FMulticastInlineDelegateProperty_            OnCanvasRenderTargetUpdate;                        // 0x208(0x10)(ZeroConstructor)
	TWeakObjectPtr<class UWorld>                 World;                                             // 0x218(0x8)(ZeroConstructor)
	bool                                         bShouldClearRenderTargetOnReceiveUpdate;           // 0x220(0x1)(None)
	uint8                                        Pad_23E6[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCanvasRenderTarget2D* GetDefaultObj();

	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int32 Width, int32 Height);
	void GetSize(int32 Width, int32 Height);
	void CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int32 Width, int32 Height, class UCanvasRenderTarget2D* ReturnValue);
};

// 0x138 (0x170 - 0x38)
// Class Engine.CollisionProfile
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>    Profiles;                                          // 0x38(0x10)(None)
	TArray<struct FCustomChannelSetup>           DefaultChannelResponses;                           // 0x48(0x10)(None)
	TArray<struct FCustomProfile>                EditProfiles;                                      // 0x58(0x10)(None)
	TArray<struct FRedirector>                   ProfileRedirects;                                  // 0x68(0x10)(None)
	TArray<struct FRedirector>                   CollisionChannelRedirects;                         // 0x78(0x10)(None)
	uint8                                        Pad_23E7[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCollisionProfile* GetDefaultObj();

};

// 0x20 (0xA0 - 0x80)
// Class Engine.PluginCommandlet
class UPluginCommandlet : public UCommandlet
{
public:
	uint8                                        Pad_23E8[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPluginCommandlet* GetDefaultObj();

};

// 0x0 (0x80 - 0x80)
// Class Engine.SmokeTestCommandlet
class USmokeTestCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class USmokeTestCommandlet* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.ComponentDelegateBinding
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;                         // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UComponentDelegateBinding* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorComponentInstanceDataTransientOuter
class UActorComponentInstanceDataTransientOuter : public UObject
{
public:

	static class UClass* StaticClass();
	static class UActorComponentInstanceDataTransientOuter* GetDefaultObj();

};

// 0x90 (0x148 - 0xB8)
// Class Engine.ApplicationLifecycleComponent
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            ApplicationWillDeactivateDelegate;                 // 0xB8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationHasReactivatedDelegate;                 // 0xC8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationWillEnterBackgroundDelegate;            // 0xD8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationHasEnteredForegroundDelegate;           // 0xE8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationWillTerminateDelegate;                  // 0xF8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationShouldUnloadResourcesDelegate;          // 0x108(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationReceivedStartupArgumentsDelegate;       // 0x118(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnTemperatureChangeDelegate;                       // 0x128(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnLowPowerModeDelegate;                            // 0x138(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UApplicationLifecycleComponent* GetDefaultObj();

};

// 0x20 (0x6A0 - 0x680)
// Class Engine.ArrowComponent
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                ArrowColor;                                        // 0x680(0x4)(None)
	float                                        ArrowSize;                                         // 0x684(0x4)(None)
	float                                        ArrowLength;                                       // 0x688(0x4)(None)
	float                                        ScreenSize;                                        // 0x68C(0x4)(None)
	uint8                                        bIsScreenSizeScaled : 1;                           // Mask: 0x1, PropSize: 0x10x690(0x1)(None)
	uint8                                        bTreatAsASprite : 1;                               // Mask: 0x2, PropSize: 0x10x690(0x1)(None)
	uint8                                        Pad_23EF[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UArrowComponent* GetDefaultObj();

	void SetUseInEditorScaling(bool bNewValue);
	void SetTreatAsASprite(bool bNewValue);
	void SetScreenSize(float NewScreenSize);
	void SetIsScreenSizeScaled(bool bNewValue);
	void SetArrowSize(float NewSize);
	void SetArrowLength(float NewLength);
	void SetArrowFColor(const struct FColor& NewColor);
	void SetArrowColor(const struct FLinearColor& NewColor);
};

// 0x10 (0x38 - 0x28)
// Class Engine.InitialActiveSoundParams
class UInitialActiveSoundParams : public UObject
{
public:
	TArray<struct FAudioParameter>               AudioParams;                                       // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInitialActiveSoundParams* GetDefaultObj();

};

// 0x9C8 (0xC90 - 0x2C8)
// Class Engine.AudioComponent
class UAudioComponent : public USceneComponent
{
public:
	uint8                                        Pad_2415[0x198];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            Sound;                                             // 0x460(0x8)(ZeroConstructor)
	TArray<struct FAudioParameter>               DefaultParameters;                                 // 0x468(0x10)(ZeroConstructor)
	TArray<struct FAudioParameter>               InstanceParameters;                                // 0x478(0x10)(ZeroConstructor)
	class USoundClass*                           SoundClassOverride;                                // 0x488(0x8)(ZeroConstructor)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x490(0x1)(None)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x490(0x1)(None)
	uint8                                        bShouldRemainActiveIfDropped : 1;                  // Mask: 0x4, PropSize: 0x10x490(0x1)(None)
	uint8                                        bAllowSpatialization : 1;                          // Mask: 0x8, PropSize: 0x10x490(0x1)(None)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x10, PropSize: 0x10x490(0x1)(None)
	uint8                                        bOverrideSubtitlePriority : 1;                     // Mask: 0x20, PropSize: 0x10x490(0x1)(None)
	uint8                                        bIsUISound : 1;                                    // Mask: 0x40, PropSize: 0x10x490(0x1)(None)
	uint8                                        bEnableLowPassFilter : 1;                          // Mask: 0x80, PropSize: 0x10x490(0x1)(None)
	uint8                                        bOverridePriority : 1;                             // Mask: 0x1, PropSize: 0x10x491(0x1)(None)
	uint8                                        bSuppressSubtitles : 1;                            // Mask: 0x2, PropSize: 0x10x491(0x1)(None)
	uint8                                        bCanPlayMultipleInstances : 1;                     // Mask: 0x4, PropSize: 0x10x491(0x1)(None)
	uint8                                        bDisableParameterUpdatesWhilePlaying : 1;          // Mask: 0x8, PropSize: 0x10x491(0x1)(None)
	uint8                                        BitPad_1BC : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_1BD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAutoManageAttachment : 1;                         // Mask: 0x80, PropSize: 0x10x492(0x1)(None)
	uint8                                        Pad_2418[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AudioComponentUserID;                              // 0x498(0x8)(None)
	float                                        PitchModulationMin;                                // 0x4A0(0x4)(None)
	float                                        PitchModulationMax;                                // 0x4A4(0x4)(None)
	float                                        VolumeModulationMin;                               // 0x4A8(0x4)(None)
	float                                        VolumeModulationMax;                               // 0x4AC(0x4)(None)
	float                                        VolumeMultiplier;                                  // 0x4B0(0x4)(None)
	int32                                        EnvelopeFollowerAttackTime;                        // 0x4B4(0x4)(None)
	int32                                        EnvelopeFollowerReleaseTime;                       // 0x4B8(0x4)(None)
	float                                        Priority;                                          // 0x4BC(0x4)(None)
	float                                        SubtitlePriority;                                  // 0x4C0(0x4)(None)
	uint8                                        Pad_2419[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundEffectSourcePresetChain*         SourceEffectChain;                                 // 0x4C8(0x8)(ZeroConstructor)
	float                                        PitchMultiplier;                                   // 0x4D0(0x4)(None)
	float                                        LowPassFilterFrequency;                            // 0x4D4(0x4)(None)
	uint8                                        Pad_241A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundAttenuation*                     AttenuationSettings;                               // 0x4E0(0x8)(ZeroConstructor)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x4E8(0x3C8)(ZeroConstructor)
	class USoundConcurrency*                     ConcurrencySettings;                               // 0x8B0(0x8)(ZeroConstructor)
	TSet<class USoundConcurrency*>               ConcurrencySet;                                    // 0x8B8(0x50)(ZeroConstructor)
	uint8                                        Pad_241B[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAttachmentRule                   AutoAttachLocationRule;                            // 0x914(0x1)(None)
	enum class EAttachmentRule                   AutoAttachRotationRule;                            // 0x915(0x1)(None)
	enum class EAttachmentRule                   AutoAttachScaleRule;                               // 0x916(0x1)(None)
	uint8                                        Pad_241C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDefaultRoutingSettings ModulationRouting;                                 // 0x918(0x188)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnAudioPlayStateChanged;                           // 0xAA0(0x10)(ZeroConstructor)
	uint8                                        Pad_241D[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioVirtualizationChanged;                      // 0xAC8(0x10)(ZeroConstructor)
	uint8                                        Pad_241E[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioFinished;                                   // 0xAF0(0x10)(ZeroConstructor)
	uint8                                        Pad_241F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioPlaybackPercent;                            // 0xB18(0x10)(ZeroConstructor)
	uint8                                        Pad_2420[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioSingleEnvelopeValue;                        // 0xB40(0x10)(ZeroConstructor)
	uint8                                        Pad_2421[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioMultiEnvelopeValue;                         // 0xB68(0x10)(ZeroConstructor)
	uint8                                        Pad_2422[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FDelegateProperty_                           OnQueueSubtitles;                                  // 0xB90(0x10)(ZeroConstructor)
	uint8                                        Pad_2423[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class USceneComponent>        AutoAttachParent;                                  // 0xBB0(0x8)(ZeroConstructor)
	class FName                                  AutoAttachSocketName;                              // 0xBB8(0x8)(None)
	uint8                                        Pad_2424[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAudioComponent* GetDefaultObj();

	void StopDelayed(float DelayTime);
	void Stop();
	void SetWaveParameter(class FName InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetOutputToBusOnly(bool bInOutputToBusOnly);
	void SetModulationRouting(TSet<class USoundModulatorBase*> Modulators, enum class EModulationDestination Destination, enum class EModulationRouting RoutingMethod);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetIntParameter(class FName InName, int32 InInt);
	void SetFloatParameter(class FName InName, float InFloat);
	void SetBoolParameter(class FName InName, bool InBool);
	void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);
	void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);
	void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle* InClockHandle, const struct FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty_ InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve);
	void Play(float StartTime);
	void IsVirtualized(bool ReturnValue);
	void IsPlaying(bool ReturnValue);
	void HasCookedFFTData(bool ReturnValue);
	void HasCookedAmplitudeEnvelopeData(bool ReturnValue);
	void GetPlayState(enum class EAudioComponentPlayState ReturnValue);
	void GetModulators(enum class EModulationDestination Destination, TSet<class USoundModulatorBase*> ReturnValue);
	void GetCookedFFTDataForAllPlayingSounds(const TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData, bool ReturnValue);
	void GetCookedFFTData(const TArray<float>& FrequenciesToGet, const TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData, bool ReturnValue);
	void GetCookedEnvelopeDataForAllPlayingSounds(const TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData, bool ReturnValue);
	void GetCookedEnvelopeData(float OutEnvelopeData, bool ReturnValue);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve);
	void BP_GetAttenuationSettingsToApply(const struct FSoundAttenuationSettings& OutAttenuationSettings, bool ReturnValue);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve);
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
};

// 0x30 (0x6B0 - 0x680)
// Class Engine.BillboardComponent
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                            Sprite;                                            // 0x680(0x8)(ZeroConstructor)
	uint8                                        bIsScreenSizeScaled : 1;                           // Mask: 0x1, PropSize: 0x10x688(0x1)(None)
	uint8                                        BitPad_1BE : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2440[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ScreenSize;                                        // 0x68C(0x4)(None)
	float                                        U;                                                 // 0x690(0x4)(None)
	float                                        UL;                                                // 0x694(0x4)(None)
	float                                        V;                                                 // 0x698(0x4)(None)
	float                                        VL;                                                // 0x69C(0x4)(None)
	float                                        OpacityMaskRefVal;                                 // 0x6A0(0x4)(None)
	uint8                                        Pad_2441[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBillboardComponent* GetDefaultObj();

	void SetUV(int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
	void SetSprite(class UTexture2D* NewSprite);
	void SetOpacityMaskRefVal(float RefVal);
};

// 0xA8 (0x160 - 0xB8)
// Class Engine.BoundsCopyComponent
class UBoundsCopyComponent : public UActorComponent
{
public:
	TSoftObjectPtr<class AActor>                 BoundsSourceActor;                                 // 0xB8(0x30)(ZeroConstructor)
	bool                                         bUseCollidingComponentsForSourceBounds;            // 0xE8(0x1)(None)
	bool                                         bKeepOwnBoundsScale;                               // 0xE9(0x1)(None)
	bool                                         bUseCollidingComponentsForOwnBounds;               // 0xEA(0x1)(None)
	uint8                                        Pad_2445[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            PostTransform;                                     // 0xF0(0x60)(None)
	bool                                         bCopyXBounds;                                      // 0x150(0x1)(None)
	bool                                         bCopyYBounds;                                      // 0x151(0x1)(None)
	bool                                         bCopyZBounds;                                      // 0x152(0x1)(None)
	uint8                                        Pad_2446[0xD];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBoundsCopyComponent* GetDefaultObj();

};

// 0x20 (0x6A0 - 0x680)
// Class Engine.ShapeComponent
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                            ShapeBodySetup;                                    // 0x680(0x8)(ZeroConstructor)
	struct FColor                                ShapeColor;                                        // 0x688(0x4)(None)
	uint8                                        bDrawOnlyIfSelected : 1;                           // Mask: 0x1, PropSize: 0x10x68C(0x1)(None)
	uint8                                        bShouldCollideWhenPlacing : 1;                     // Mask: 0x2, PropSize: 0x10x68C(0x1)(None)
	uint8                                        bDynamicObstacle : 1;                              // Mask: 0x4, PropSize: 0x10x68C(0x1)(None)
	uint8                                        BitPad_1BF : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2447[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                AreaClassOverride;                                 // 0x690(0x8)(ZeroConstructor)
	uint8                                        bUseSystemDefaultObstacleAreaClass : 1;            // Mask: 0x1, PropSize: 0x10x698(0x1)(None)
	uint8                                        Pad_2448[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShapeComponent* GetDefaultObj();

};

// 0x20 (0x6C0 - 0x6A0)
// Class Engine.BoxComponent
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                               BoxExtent;                                         // 0x6A0(0x18)(None)
	float                                        LineThickness;                                     // 0x6B8(0x4)(None)
	uint8                                        Pad_244E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBoxComponent* GetDefaultObj();

	void SetLineThickness(float Thickness);
	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	void GetUnscaledBoxExtent(const struct FVector& ReturnValue);
	void GetScaledBoxExtent(const struct FVector& ReturnValue);
};

// 0x30 (0x6B0 - 0x680)
// Class Engine.BrushComponent
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                Brush;                                             // 0x680(0x8)(ZeroConstructor)
	class UBodySetup*                            BrushBodySetup;                                    // 0x688(0x8)(ZeroConstructor)
	class UClass*                                NavAreaClass;                                      // 0x690(0x8)(ZeroConstructor)
	class UClass*                                SecondNavAreaClass;                                // 0x698(0x8)(ZeroConstructor)
	float                                        SurfaceNavAreaHeight;                              // 0x6A0(0x4)(None)
	uint8                                        Pad_2451[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBrushComponent* GetDefaultObj();

	void GetBoxBrushXYZ(const struct FVector& ReturnValue);
};

// 0x10 (0x6B0 - 0x6A0)
// Class Engine.CapsuleComponent
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                        CapsuleHalfHeight;                                 // 0x6A0(0x4)(None)
	float                                        CapsuleRadius;                                     // 0x6A4(0x4)(None)
	uint8                                        Pad_2468[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCapsuleComponent* GetDefaultObj();

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float OutRadius, float OutHalfHeight);
	void GetUnscaledCapsuleRadius(float ReturnValue);
	void GetUnscaledCapsuleHalfHeight_WithoutHemisphere(float ReturnValue);
	void GetUnscaledCapsuleHalfHeight(float ReturnValue);
	void GetShapeScale(float ReturnValue);
	void GetScaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float OutRadius, float OutHalfHeight);
	void GetScaledCapsuleRadius(float ReturnValue);
	void GetScaledCapsuleHalfHeight_WithoutHemisphere(float ReturnValue);
	void GetScaledCapsuleHalfHeight(float ReturnValue);
};

// 0x38 (0x300 - 0x2C8)
// Class Engine.ChildActorComponent
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                ChildActorClass;                                   // 0x2C8(0x8)(ZeroConstructor)
	class AActor*                                ChildActor;                                        // 0x2D0(0x8)(ZeroConstructor)
	class AActor*                                ChildActorTemplate;                                // 0x2D8(0x8)(ZeroConstructor)
	uint8                                        Pad_246C[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UChildActorComponent* GetDefaultObj();

	void SetChildActorClass(class UClass* InClass);
	void OnChildActorDestroyed(class AActor* DestroyedActor);
	void DestroyChildActor();
	void CreateChildActor();
};

// 0x68 (0x330 - 0x2C8)
// Class Engine.DecalComponent
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                    DecalMaterial;                                     // 0x2C8(0x8)(ZeroConstructor)
	int32                                        SortOrder;                                         // 0x2D0(0x4)(None)
	float                                        FadeScreenSize;                                    // 0x2D4(0x4)(None)
	float                                        FadeStartDelay;                                    // 0x2D8(0x4)(None)
	float                                        FadeDuration;                                      // 0x2DC(0x4)(None)
	float                                        FadeInDuration;                                    // 0x2E0(0x4)(None)
	float                                        FadeInStartDelay;                                  // 0x2E4(0x4)(None)
	uint8                                        bDestroyOwnerAfterFade : 1;                        // Mask: 0x1, PropSize: 0x10x2E8(0x1)(None)
	uint8                                        BitPad_1C0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2473[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DecalSize;                                         // 0x2F0(0x18)(None)
	struct FLinearColor                          DecalColor;                                        // 0x308(0x10)(None)
	uint8                                        Pad_2475[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDecalComponent* GetDefaultObj();

	void SetSortOrder(int32 Value);
	void SetFadeScreenSize(float NewFadeScreenSize);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetFadeIn(float StartDelay, float Duration);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	void SetDecalColor(const struct FLinearColor& Color);
	void GetFadeStartDelay(float ReturnValue);
	void GetFadeInStartDelay(float ReturnValue);
	void GetFadeInDuration(float ReturnValue);
	void GetFadeDuration(float ReturnValue);
	void GetDecalMaterial(class UMaterialInterface* ReturnValue);
	void CreateDynamicMaterialInstance(class UMaterialInstanceDynamic* ReturnValue);
};

// 0x110 (0x430 - 0x320)
// Class Engine.LightComponent
class ULightComponent : public ULightComponentBase
{
public:
	float                                        Temperature;                                       // 0x320(0x4)(None)
	float                                        MaxDrawDistance;                                   // 0x324(0x4)(None)
	float                                        MaxDistanceFadeRange;                              // 0x328(0x4)(None)
	uint8                                        bUseTemperature : 1;                               // Mask: 0x1, PropSize: 0x10x32C(0x1)(None)
	uint8                                        BitPad_1C1 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2498[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ShadowMapChannel;                                  // 0x330(0x4)(None)
	uint8                                        Pad_2499[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinRoughness;                                      // 0x338(0x4)(None)
	float                                        SpecularScale;                                     // 0x33C(0x4)(None)
	float                                        ShadowResolutionScale;                             // 0x340(0x4)(None)
	float                                        ShadowBias;                                        // 0x344(0x4)(None)
	float                                        ShadowSlopeBias;                                   // 0x348(0x4)(None)
	float                                        ShadowSharpen;                                     // 0x34C(0x4)(None)
	float                                        ContactShadowLength;                               // 0x350(0x4)(None)
	uint8                                        ContactShadowLengthInWS : 1;                       // Mask: 0x1, PropSize: 0x10x354(0x1)(None)
	uint8                                        BitPad_1C2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_249A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ContactShadowCastingIntensity;                     // 0x358(0x4)(None)
	float                                        ContactShadowNonCastingIntensity;                  // 0x35C(0x4)(None)
	uint8                                        InverseSquaredFalloff : 1;                         // Mask: 0x1, PropSize: 0x10x360(0x1)(None)
	uint8                                        CastTranslucentShadows : 1;                        // Mask: 0x2, PropSize: 0x10x360(0x1)(None)
	uint8                                        bCastShadowsFromCinematicObjectsOnly : 1;          // Mask: 0x4, PropSize: 0x10x360(0x1)(None)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x8, PropSize: 0x10x360(0x1)(None)
	uint8                                        bForceCachedShadowsForMovablePrimitives : 1;       // Mask: 0x10, PropSize: 0x10x360(0x1)(None)
	uint8                                        BitPad_1C3 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_249B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightingChannels                     LightingChannels;                                  // 0x364(0x1)(None)
	uint8                                        Pad_249C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    LightFunctionMaterial;                             // 0x368(0x8)(ZeroConstructor)
	struct FVector                               LightFunctionScale;                                // 0x370(0x18)(None)
	class UTextureLightProfile*                  IESTexture;                                        // 0x388(0x8)(ZeroConstructor)
	uint8                                        bUseIESBrightness : 1;                             // Mask: 0x1, PropSize: 0x10x390(0x1)(None)
	uint8                                        BitPad_1C4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_249D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IESBrightnessScale;                                // 0x394(0x4)(None)
	float                                        LightFunctionFadeDistance;                         // 0x398(0x4)(None)
	float                                        DisabledBrightness;                                // 0x39C(0x4)(None)
	uint8                                        bEnableLightShaftBloom : 1;                        // Mask: 0x1, PropSize: 0x10x3A0(0x1)(None)
	uint8                                        BitPad_1C5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_249E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BloomScale;                                        // 0x3A4(0x4)(None)
	float                                        BloomThreshold;                                    // 0x3A8(0x4)(None)
	float                                        BloomMaxBrightness;                                // 0x3AC(0x4)(None)
	struct FColor                                BloomTint;                                         // 0x3B0(0x4)(None)
	bool                                         bUseRayTracedDistanceFieldShadows;                 // 0x3B4(0x1)(None)
	uint8                                        Pad_249F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RayStartOffsetDepthScale;                          // 0x3B8(0x4)(None)
	uint8                                        Pad_24A0[0x74];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULightComponent* GetDefaultObj();

	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetUseTemperature(bool bNewValue);
	void SetUseIESBrightness(bool bNewValue);
	void SetTransmission(bool bNewValue);
	void SetTemperature(float NewTemperature);
	void SetSpecularScale(float NewValue);
	void SetShadowSlopeBias(float NewValue);
	void SetShadowBias(float NewValue);
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightFColor(const struct FColor& NewLightColor);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensityScale(float NewIntensity);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetIESBrightnessScale(float NewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetColorIntensity(const struct FLinearColor& NewIntensity);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetBloomMaxBrightness(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};

// 0xE0 (0x510 - 0x430)
// Class Engine.DirectionalLightComponent
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                        ShadowCascadeBiasDistribution;                     // 0x430(0x4)(None)
	uint8                                        bEnableLightShaftOcclusion : 1;                    // Mask: 0x1, PropSize: 0x10x434(0x1)(None)
	uint8                                        BitPad_1C6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24BA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OcclusionMaskDarkness;                             // 0x438(0x4)(None)
	float                                        OcclusionDepthRange;                               // 0x43C(0x4)(None)
	struct FVector                               LightShaftOverrideDirection;                       // 0x440(0x18)(None)
	float                                        WholeSceneDynamicShadowRadius;                     // 0x458(0x4)(None)
	float                                        DynamicShadowDistanceMovableLight;                 // 0x45C(0x4)(None)
	float                                        DynamicShadowDistanceStationaryLight;              // 0x460(0x4)(None)
	int32                                        DynamicShadowCascades;                             // 0x464(0x4)(None)
	float                                        CascadeDistributionExponent;                       // 0x468(0x4)(None)
	float                                        CascadeTransitionFraction;                         // 0x46C(0x4)(None)
	float                                        ShadowDistanceFadeoutFraction;                     // 0x470(0x4)(None)
	uint8                                        bUseInsetShadowsForMovableObjects : 1;             // Mask: 0x1, PropSize: 0x10x474(0x1)(None)
	uint8                                        BitPad_1C7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24BB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        FarShadowCascadeCount;                             // 0x478(0x4)(None)
	float                                        FarShadowDistance;                                 // 0x47C(0x4)(None)
	float                                        DistanceFieldShadowDistance;                       // 0x480(0x4)(None)
	int32                                        ForwardShadingPriority;                            // 0x484(0x4)(None)
	float                                        LightSourceAngle;                                  // 0x488(0x4)(None)
	float                                        LightSourceSoftAngle;                              // 0x48C(0x4)(None)
	float                                        ShadowSourceAngleFactor;                           // 0x490(0x4)(None)
	float                                        TraceDistance;                                     // 0x494(0x4)(None)
	uint8                                        bUsedAsAtmosphereSunLight : 1;                     // Mask: 0x1, PropSize: 0x10x498(0x1)(None)
	uint8                                        bAtmosphereSunLight : 1;                           // Mask: 0x2, PropSize: 0x10x498(0x1)(None)
	uint8                                        BitPad_1C8 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24BD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AtmosphereSunLightIndex;                           // 0x49C(0x4)(None)
	struct FLinearColor                          AtmosphereSunDiskColorScale;                       // 0x4A0(0x10)(None)
	uint8                                        bPerPixelAtmosphereTransmittance : 1;              // Mask: 0x1, PropSize: 0x10x4B0(0x1)(None)
	uint8                                        bCastShadowsOnClouds : 1;                          // Mask: 0x2, PropSize: 0x10x4B0(0x1)(None)
	uint8                                        bCastShadowsOnAtmosphere : 1;                      // Mask: 0x4, PropSize: 0x10x4B0(0x1)(None)
	uint8                                        bCastCloudShadows : 1;                             // Mask: 0x8, PropSize: 0x10x4B0(0x1)(None)
	uint8                                        BitPad_1C9 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24BE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloudShadowStrength;                               // 0x4B4(0x4)(None)
	float                                        CloudShadowOnAtmosphereStrength;                   // 0x4B8(0x4)(None)
	float                                        CloudShadowOnSurfaceStrength;                      // 0x4BC(0x4)(None)
	float                                        CloudShadowDepthBias;                              // 0x4C0(0x4)(None)
	float                                        CloudShadowExtent;                                 // 0x4C4(0x4)(None)
	float                                        CloudShadowMinDistance;                            // 0x4C8(0x4)(None)
	float                                        CloudShadowFadeRadius;                             // 0x4CC(0x4)(None)
	float                                        MinimumLightSourceAngle;                           // 0x4D0(0x4)(None)
	float                                        CloudShadowMapResolutionScale;                     // 0x4D4(0x4)(None)
	float                                        CloudShadowRaySampleCountScale;                    // 0x4D8(0x4)(None)
	struct FLinearColor                          CloudScatteredLuminanceScale;                      // 0x4DC(0x10)(None)
	struct FLightmassDirectionalLightSettings    LightmassSettings;                                 // 0x4EC(0x10)(None)
	uint8                                        bCastModulatedShadows : 1;                         // Mask: 0x1, PropSize: 0x10x4FC(0x1)(None)
	uint8                                        BitPad_1CA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24BF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ModulatedShadowColor;                              // 0x500(0x4)(None)
	float                                        ShadowAmount;                                      // 0x504(0x4)(None)
	uint8                                        Pad_24C0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDirectionalLightComponent* GetDefaultObj();

	void SetShadowSourceAngleFactor(float NewValue);
	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetShadowCascadeBiasDistribution(float NewValue);
	void SetShadowAmount(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetOcclusionDepthRange(float NewValue);
	void SetLightSourceSoftAngle(float NewValue);
	void SetLightSourceAngle(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetForwardShadingPriority(int32 NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int32 NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
	void SetAtmosphereSunLightIndex(int32 NewValue);
	void SetAtmosphereSunLight(bool bNewValue);
};

// 0x20 (0x6A0 - 0x680)
// Class Engine.DrawFrustumComponent
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	bool                                         bFrustumEnabled;                                   // 0x680(0x1)(None)
	uint8                                        Pad_24C3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                FrustumColor;                                      // 0x684(0x4)(None)
	float                                        FrustumAngle;                                      // 0x688(0x4)(None)
	float                                        FrustumAspectRatio;                                // 0x68C(0x4)(None)
	float                                        FrustumStartDist;                                  // 0x690(0x4)(None)
	float                                        FrustumEndDist;                                    // 0x694(0x4)(None)
	class UTexture*                              Texture;                                           // 0x698(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDrawFrustumComponent* GetDefaultObj();

};

// 0x10 (0x6B0 - 0x6A0)
// Class Engine.SphereComponent
class USphereComponent : public UShapeComponent
{
public:
	float                                        SphereRadius;                                      // 0x6A0(0x4)(None)
	uint8                                        Pad_24C9[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USphereComponent* GetDefaultObj();

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	void GetUnscaledSphereRadius(float ReturnValue);
	void GetShapeScale(float ReturnValue);
	void GetScaledSphereRadius(float ReturnValue);
};

// 0x0 (0x6B0 - 0x6B0)
// Class Engine.DrawSphereComponent
class UDrawSphereComponent : public USphereComponent
{
public:

	static class UClass* StaticClass();
	static class UDrawSphereComponent* GetDefaultObj();

};

// 0xF8 (0x3C0 - 0x2C8)
// Class Engine.ForceFeedbackComponent
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                  ForceFeedbackEffect;                               // 0x2C8(0x8)(ZeroConstructor)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x2D0(0x1)(None)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x2D0(0x1)(None)
	uint8                                        bLooping : 1;                                      // Mask: 0x4, PropSize: 0x10x2D0(0x1)(None)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x8, PropSize: 0x10x2D0(0x1)(None)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x10, PropSize: 0x10x2D0(0x1)(None)
	uint8                                        BitPad_1CB : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24D0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IntensityMultiplier;                               // 0x2D4(0x4)(None)
	class UForceFeedbackAttenuation*             AttenuationSettings;                               // 0x2D8(0x8)(ZeroConstructor)
	struct FForceFeedbackAttenuationSettings     AttenuationOverrides;                              // 0x2E0(0xC0)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnForceFeedbackFinished;                           // 0x3A0(0x10)(ZeroConstructor)
	uint8                                        Pad_24D1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UForceFeedbackComponent* GetDefaultObj();

	void Stop();
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void Play(float StartTime);
	void BP_GetAttenuationSettingsToApply(const struct FForceFeedbackAttenuationSettings& OutAttenuationSettings, bool ReturnValue);
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
};

// 0xB0 (0x1D0 - 0x120)
// Class Engine.InterpToMovementComponent
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                        Duration;                                          // 0x120(0x4)(None)
	uint8                                        bPauseOnImpact : 1;                                // Mask: 0x1, PropSize: 0x10x124(0x1)(None)
	uint8                                        BitPad_1CC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSweep;                                            // 0x128(0x1)(None)
	enum class ETeleportType                     TeleportType;                                      // 0x129(0x1)(None)
	enum class EInterpToBehaviourType            BehaviourType;                                     // 0x12A(0x1)(None)
	bool                                         bCheckIfStillInWorld;                              // 0x12B(0x1)(None)
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x1, PropSize: 0x10x12C(0x1)(None)
	uint8                                        BitPad_1CD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24EB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInterpToReverse;                                 // 0x130(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnInterpToStop;                                    // 0x140(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnWaitBeginDelegate;                               // 0x150(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnWaitEndDelegate;                                 // 0x160(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnResetDelegate;                                   // 0x170(0x10)(ZeroConstructor)
	float                                        MaxSimulationTimeStep;                             // 0x180(0x4)(None)
	int32                                        MaxSimulationIterations;                           // 0x184(0x4)(None)
	TArray<struct FInterpControlPoint>           ControlPoints;                                     // 0x188(0x10)(None)
	uint8                                        Pad_24EC[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpToMovementComponent* GetDefaultObj();

	void StopSimulating(const struct FHitResult& HitResult);
	void RestartMovement(float InitialDirection);
	void ResetControlPoints();
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void FinaliseControlPoints();
	void AddControlPointPosition(const struct FVector& Pos, bool bPositionIsRelative);
};

// 0x40 (0x6C0 - 0x680)
// Class Engine.LineBatchComponent
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_24F6[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULineBatchComponent* GetDefaultObj();

};

// 0x20 (0x450 - 0x430)
// Class Engine.LocalLightComponent
class ULocalLightComponent : public ULightComponent
{
public:
	enum class ELightUnits                       IntensityUnits;                                    // 0x430(0x1)(None)
	uint8                                        Pad_2521[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InverseExposureBlend;                              // 0x434(0x4)(None)
	float                                        Radius;                                            // 0x438(0x4)(None)
	float                                        AttenuationRadius;                                 // 0x43C(0x4)(None)
	struct FLightmassPointLightSettings          LightmassSettings;                                 // 0x440(0xC)(None)
	uint8                                        Pad_2522[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULocalLightComponent* GetDefaultObj();

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits);
	void SetAttenuationRadius(float NewRadius);
	void GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle, float ReturnValue);
};

// 0x98 (0x150 - 0xB8)
// Class Engine.LODSyncComponent
class ULODSyncComponent : public UActorComponent
{
public:
	int32                                        NumLODs;                                           // 0xB8(0x4)(None)
	int32                                        ForcedLOD;                                         // 0xBC(0x4)(None)
	int32                                        MinLOD;                                            // 0xC0(0x4)(None)
	uint8                                        Pad_2524[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FComponentSync>                ComponentsToSync;                                  // 0xC8(0x10)(None)
	TMap<class FName, struct FLODMappingData>    CustomLODMapping;                                  // 0xD8(0x50)(None)
	int32                                        CurrentLOD;                                        // 0x128(0x4)(None)
	int32                                        CurrentNumLODs;                                    // 0x12C(0x4)(None)
	TArray<class UPrimitiveComponent*>           DriveComponents;                                   // 0x130(0x10)(ZeroConstructor)
	TArray<class UPrimitiveComponent*>           SubComponents;                                     // 0x140(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ULODSyncComponent* GetDefaultObj();

	void GetLODSyncDebugText(const class FString& ReturnValue);
};

// 0x10 (0x690 - 0x680)
// Class Engine.MaterialBillboardComponent
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>        Elements;                                          // 0x680(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialBillboardComponent* GetDefaultObj();

	void SetElements(const TArray<struct FMaterialSpriteElement>& NewElements);
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};

// 0x28 (0xE0 - 0xB8)
// Class Engine.MaterialGPUReadbackMessageComponent
class UMaterialGPUReadbackMessageComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            GPUReadbackMessageDelegate;                        // 0xB8(0x10)(ZeroConstructor)
	class FName                                  MessageName;                                       // 0xC8(0x8)(None)
	bool                                         bAutoEnableMessagesOnRegister;                     // 0xD0(0x1)(None)
	uint8                                        Pad_252A[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialGPUReadbackMessageComponent* GetDefaultObj();

	void SetMessagesEnabled(bool bEnabled);
	void GPUReadbackMessageDelegate__DelegateSignature(const TArray<float>& Data, const struct FMaterialGPUMessagePrimitiveInfo& PrimitiveInfo);
};

// 0x40 (0x6C0 - 0x680)
// Class Engine.ModelComponent
class UModelComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_252B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            ModelBodySetup;                                    // 0x698(0x8)(ZeroConstructor)
	uint8                                        Pad_252C[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UModelComponent* GetDefaultObj();

};

// 0x38 (0xF0 - 0xB8)
// Class Engine.PawnNoiseEmitterComponent
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	uint8                                        bAIPerceptionSystemCompatibilityMode : 1;          // Mask: 0x1, PropSize: 0x10xB8(0x1)(None)
	uint8                                        BitPad_1CF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_252E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastRemoteNoisePosition;                           // 0xC0(0x18)(None)
	float                                        NoiseLifetime;                                     // 0xD8(0x4)(None)
	float                                        LastRemoteNoiseVolume;                             // 0xDC(0x4)(None)
	float                                        LastRemoteNoiseTime;                               // 0xE0(0x4)(None)
	float                                        LastLocalNoiseVolume;                              // 0xE4(0x4)(None)
	float                                        LastLocalNoiseTime;                                // 0xE8(0x4)(None)
	uint8                                        Pad_252F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPawnNoiseEmitterComponent* GetDefaultObj();

	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};

// 0x20 (0xD8 - 0xB8)
// Class Engine.PlatformEventsComponent
class UPlatformEventsComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            PlatformChangedToLaptopModeDelegate;               // 0xB8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            PlatformChangedToTabletModeDelegate;               // 0xC8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPlatformEventsComponent* GetDefaultObj();

	void SupportsConvertibleLaptops(bool ReturnValue);
	void PlatformEventDelegate__DelegateSignature();
	void IsInTabletMode(bool ReturnValue);
	void IsInLaptopMode(bool ReturnValue);
};

// 0x18 (0x468 - 0x450)
// Class Engine.PointLightComponent
class UPointLightComponent : public ULocalLightComponent
{
public:
	uint8                                        bUseInverseSquaredFalloff : 1;                     // Mask: 0x1, PropSize: 0x10x450(0x1)(None)
	uint8                                        BitPad_1D0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2536[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LightFalloffExponent;                              // 0x454(0x4)(None)
	float                                        SourceRadius;                                      // 0x458(0x4)(None)
	float                                        SoftSourceRadius;                                  // 0x45C(0x4)(None)
	float                                        SourceLength;                                      // 0x460(0x4)(None)
	uint8                                        Pad_2537[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPointLightComponent* GetDefaultObj();

	void SetUseInverseSquaredFalloff(bool bNewValue);
	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetSoftSourceRadius(float bNewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetInverseExposureBlend(float NewInverseExposureBlend);
};

// 0x1B0 (0xBD0 - 0xA20)
// Class Engine.PoseableMeshComponent
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	uint8                                        Pad_254E[0x1B0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPoseableMeshComponent* GetDefaultObj();

	void SetBoneTransformByName(class FName BoneName, const struct FTransform& InTransform, enum class EBoneSpaces BoneSpace);
	void SetBoneScaleByName(class FName BoneName, const struct FVector& InScale3D, enum class EBoneSpaces BoneSpace);
	void SetBoneRotationByName(class FName BoneName, const struct FRotator& InRotation, enum class EBoneSpaces BoneSpace);
	void SetBoneLocationByName(class FName BoneName, const struct FVector& InLocation, enum class EBoneSpaces BoneSpace);
	void ResetBoneTransformByName(class FName BoneName);
	void GetBoneTransformByName(class FName BoneName, enum class EBoneSpaces BoneSpace, const struct FTransform& ReturnValue);
	void GetBoneScaleByName(class FName BoneName, enum class EBoneSpaces BoneSpace, const struct FVector& ReturnValue);
	void GetBoneRotationByName(class FName BoneName, enum class EBoneSpaces BoneSpace, const struct FRotator& ReturnValue);
	void GetBoneLocationByName(class FName BoneName, enum class EBoneSpaces BoneSpace, const struct FVector& ReturnValue);
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);
};

// 0x788 (0xA50 - 0x2C8)
// Class Engine.PostProcessComponent
class UPostProcessComponent : public USceneComponent
{
public:
	uint8                                        Pad_2550[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x2D0(0x770)(ZeroConstructor)
	float                                        Priority;                                          // 0xA40(0x4)(None)
	float                                        BlendRadius;                                       // 0xA44(0x4)(None)
	float                                        BlendWeight;                                       // 0xA48(0x4)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10xA4C(0x1)(None)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10xA4C(0x1)(None)
	uint8                                        bWaterPP : 1;                                      // Mask: 0x4, PropSize: 0x10xA4C(0x1)(None)
	uint8                                        Pad_2551[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPostProcessComponent* GetDefaultObj();

	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);
};

// 0x20 (0x470 - 0x450)
// Class Engine.RectLightComponent
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                        SourceWidth;                                       // 0x450(0x4)(None)
	float                                        SourceHeight;                                      // 0x454(0x4)(None)
	float                                        BarnDoorAngle;                                     // 0x458(0x4)(None)
	float                                        BarnDoorLength;                                    // 0x45C(0x4)(None)
	class UTexture*                              SourceTexture;                                     // 0x460(0x8)(ZeroConstructor)
	uint8                                        Pad_2554[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URectLightComponent* GetDefaultObj();

	void SetSourceWidth(float NewValue);
	void SetSourceTexture(class UTexture* NewValue);
	void SetSourceHeight(float NewValue);
	void SetBarnDoorLength(float NewValue);
	void SetBarnDoorAngle(float NewValue);
};

// 0x38 (0x158 - 0x120)
// Class Engine.RotatingMovementComponent
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                              RotationRate;                                      // 0x120(0x18)(None)
	struct FVector                               PivotTranslation;                                  // 0x138(0x18)(None)
	uint8                                        bRotationInLocalSpace : 1;                         // Mask: 0x1, PropSize: 0x10x150(0x1)(None)
	uint8                                        Pad_2561[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URotatingMovementComponent* GetDefaultObj();

};

// 0xB8 (0x380 - 0x2C8)
// Class Engine.RuntimeVirtualTextureComponent
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	TSoftObjectPtr<class AActor>                 BoundsAlignActor;                                  // 0x2C8(0x30)(ZeroConstructor)
	bool                                         bSetBoundsButton;                                  // 0x2F8(0x1)(None)
	bool                                         bSnapBoundsToLandscape;                            // 0x2F9(0x1)(None)
	uint8                                        Pad_2566[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URuntimeVirtualTexture*                VirtualTexture;                                    // 0x300(0x8)(ZeroConstructor)
	bool                                         bEnableScalability;                                // 0x308(0x1)(None)
	uint8                                        Pad_2567[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ScalabilityGroup;                                  // 0x30C(0x4)(None)
	bool                                         bHidePrimitives;                                   // 0x310(0x1)(None)
	uint8                                        Pad_2568[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVirtualTextureBuilder*                StreamingTexture;                                  // 0x318(0x8)(ZeroConstructor)
	int32                                        StreamLowMips;                                     // 0x320(0x4)(None)
	bool                                         bBuildStreamingMipsButton;                         // 0x324(0x1)(None)
	enum class ETextureLossyCompressionAmount    LossyCompressionAmount;                            // 0x325(0x1)(None)
	bool                                         bUseStreamingLowMipsInEditor;                      // 0x326(0x1)(None)
	bool                                         bBuildDebugStreamingMips;                          // 0x327(0x1)(None)
	uint8                                        Pad_2569[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIncludeGrassInStreamingTexture;                   // 0x350(0x1)(None)
	uint8                                        Pad_256A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FIntPoint>                     DebugBuildStreamingMipsTiles;                      // 0x358(0x10)(None)
	class AActor*                                DebugBuildStreamingMipsTilesActorBounds;           // 0x368(0x8)(ZeroConstructor)
	uint8                                        Pad_256B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuntimeVirtualTextureComponent* GetDefaultObj();

	void Invalidate(const struct FBoxSphereBounds& WorldBounds);
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.SkyAtmosphere
class ASkyAtmosphere : public AInfo
{
public:
	class USkyAtmosphereComponent*               SkyAtmosphereComponent;                            // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASkyAtmosphere* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SplineMetadata
class USplineMetadata : public UObject
{
public:

	static class UClass* StaticClass();
	static class USplineMetadata* GetDefaultObj();

};

// 0x120 (0x7A0 - 0x680)
// Class Engine.SplineComponent
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                         SplineCurves;                                      // 0x680(0x70)(ZeroConstructor)
	struct FInterpCurveVector                    SplineInfo;                                        // 0x6F0(0x18)(None)
	struct FInterpCurveQuat                      SplineRotInfo;                                     // 0x708(0x18)(None)
	struct FInterpCurveVector                    SplineScaleInfo;                                   // 0x720(0x18)(None)
	struct FInterpCurveFloat                     SplineReparamTable;                                // 0x738(0x18)(None)
	bool                                         bAllowSplineEditingPerInstance;                    // 0x750(0x1)(None)
	uint8                                        Pad_265C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReparamStepsPerSegment;                            // 0x754(0x4)(None)
	float                                        Duration;                                          // 0x758(0x4)(None)
	bool                                         bStationaryEndpoints;                              // 0x75C(0x1)(None)
	bool                                         bSplineHasBeenEdited;                              // 0x75D(0x1)(None)
	bool                                         bModifiedByConstructionScript;                     // 0x75E(0x1)(None)
	bool                                         bInputSplinePointsToConstructionScript;            // 0x75F(0x1)(None)
	bool                                         bDrawDebug;                                        // 0x760(0x1)(None)
	bool                                         bShowSplineDirectionOnAllPoints;                   // 0x761(0x1)(None)
	bool                                         bAlwaysDrawSplineInEditorViewport;                 // 0x762(0x1)(None)
	uint8                                        Pad_265D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SplineDirectionArrowSize;                          // 0x764(0x4)(None)
	struct FLinearColor                          SplineDrawColor;                                   // 0x768(0x10)(None)
	bool                                         bClosedLoop;                                       // 0x778(0x1)(None)
	bool                                         bLoopPositionOverride;                             // 0x779(0x1)(None)
	uint8                                        Pad_265E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LoopPosition;                                      // 0x77C(0x4)(None)
	struct FVector                               DefaultUpVector;                                   // 0x780(0x18)(None)
	uint8                                        Pad_265F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USplineComponent* GetDefaultObj();

	void UpdateSpline();
	void SetWorldSplinePointsAndType(const TArray<struct FVector>& Points, enum class ESplinePointType Type);
	void SetWorldLocationAtSplinePoint(int32 PointIndex, const struct FVector& InLocation);
	void SetUpVectorAtSplinePoint(int32 PointIndex, const struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int32 PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetTangentColor(const struct FLinearColor& TangentColor);
	void SetTangentAtSplinePoint(int32 PointIndex, const struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(const TArray<struct FVector>& Points);
	void SetSplinePointType(int32 PointIndex, enum class ESplinePointType Type, bool bUpdateSpline);
	void SetSplinePoints(const TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(const TArray<struct FVector>& Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetScaleAtSplinePoint(int32 PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline);
	void SetRotationAtSplinePoint(int32 PointIndex, const struct FRotator& InRotation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetLocationAtSplinePoint(int32 PointIndex, const struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(const struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int32 Index, bool bUpdateSpline);
	void IsClosedLoop(bool ReturnValue);
	void GetWorldTangentAtDistanceAlongSpline(float Distance, const struct FVector& ReturnValue);
	void GetWorldRotationAtTime(float Time, bool bUseConstantVelocity, const struct FRotator& ReturnValue);
	void GetWorldRotationAtDistanceAlongSpline(float Distance, const struct FRotator& ReturnValue);
	void GetWorldLocationAtTime(float Time, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetWorldLocationAtSplinePoint(int32 PointIndex, const struct FVector& ReturnValue);
	void GetWorldLocationAtDistanceAlongSpline(float Distance, const struct FVector& ReturnValue);
	void GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetWorldDirectionAtDistanceAlongSpline(float Distance, const struct FVector& ReturnValue);
	void GetVectorPropertyAtSplinePoint(int32 Index, class FName PropertyName, const struct FVector& ReturnValue);
	void GetVectorPropertyAtSplineInputKey(float InKey, class FName PropertyName, const struct FVector& ReturnValue);
	void GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetUpVectorAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale, const struct FTransform& ReturnValue);
	void GetTransformAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale, const struct FTransform& ReturnValue);
	void GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale, const struct FTransform& ReturnValue);
	void GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale, const struct FTransform& ReturnValue);
	void GetTimeAtDistanceAlongSpline(float Distance, float ReturnValue);
	void GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetSplinePointType(int32 PointIndex, enum class ESplinePointType ReturnValue);
	void GetSplineLength(float ReturnValue);
	void GetScaleAtTime(float Time, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetScaleAtSplinePoint(int32 PointIndex, const struct FVector& ReturnValue);
	void GetScaleAtSplineInputKey(float InKey, const struct FVector& ReturnValue);
	void GetScaleAtDistanceAlongSpline(float Distance, const struct FVector& ReturnValue);
	void GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FRotator& ReturnValue);
	void GetRotationAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FRotator& ReturnValue);
	void GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FRotator& ReturnValue);
	void GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FRotator& ReturnValue);
	void GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, float ReturnValue);
	void GetRollAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, float ReturnValue);
	void GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, float ReturnValue);
	void GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, float ReturnValue);
	void GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetRightVectorAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetNumberOfSplineSegments(int32 ReturnValue);
	void GetNumberOfSplinePoints(int32 ReturnValue);
	void GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetLocationAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetLocationAndTangentAtSplinePoint(int32 PointIndex, const struct FVector& Location, const struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int32 PointIndex, const struct FVector& LocalLocation, const struct FVector& LocalTangent);
	void GetLeaveTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetInputKeyValueAtDistanceAlongSpline(float Distance, float ReturnValue);
	void GetInputKeyAtDistanceAlongSpline(float Distance, float ReturnValue);
	void GetFloatPropertyAtSplinePoint(int32 Index, class FName PropertyName, float ReturnValue);
	void GetFloatPropertyAtSplineInputKey(float InKey, class FName PropertyName, float ReturnValue);
	void GetDistanceAlongSplineAtSplinePoint(int32 PointIndex, float ReturnValue);
	void GetDistanceAlongSplineAtSplineInputKey(float InKey, float ReturnValue);
	void GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, const struct FVector& ReturnValue);
	void GetDirectionAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void GetArriveTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale, const struct FTransform& ReturnValue);
	void FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void FindScaleClosestToWorldLocation(const struct FVector& WorldLocation, const struct FVector& ReturnValue);
	void FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FRotator& ReturnValue);
	void FindRollClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, float ReturnValue);
	void FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation, float ReturnValue);
	void FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, const struct FVector& ReturnValue);
	void DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, const TArray<struct FVector>& OutPoints, const TArray<double>& OutDistancesAlongSpline, bool ReturnValue);
	void DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, const TArray<struct FVector>& OutPoints, bool ReturnValue);
	void ConvertSplineToPolyLine(enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, const TArray<struct FVector>& OutPoints, bool ReturnValue);
	void ConvertSplineSegmentToPolyLine(int32 SplinePointStartIndex, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, const TArray<struct FVector>& OutPoints, bool ReturnValue);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplinePointAtIndex(const struct FVector& Position, int32 Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(const struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct FVector& Position);
	void AddPoints(const TArray<struct FSplinePoint>& Points, bool bUpdateSpline);
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);
};

// 0x100 (0x850 - 0x750)
// Class Engine.SplineMeshComponent
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	uint8                                        Pad_26DE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSplineMeshParams                     SplineParams;                                      // 0x758(0xB0)(None)
	struct FVector                               SplineUpDir;                                       // 0x808(0x18)(None)
	float                                        SplineBoundaryMin;                                 // 0x820(0x4)(None)
	struct FGuid                                 CachedMeshBodySetupGuid;                           // 0x824(0x10)(None)
	uint8                                        Pad_26DF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x838(0x8)(ZeroConstructor)
	float                                        SplineBoundaryMax;                                 // 0x840(0x4)(None)
	uint8                                        bAllowSplineEditingPerInstance : 1;                // Mask: 0x1, PropSize: 0x10x844(0x1)(None)
	uint8                                        bSmoothInterpRollScale : 1;                        // Mask: 0x2, PropSize: 0x10x844(0x1)(None)
	uint8                                        bMeshDirty : 1;                                    // Mask: 0x4, PropSize: 0x10x844(0x1)(None)
	uint8                                        BitPad_1D8 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESplineMeshAxis                   ForwardAxis;                                       // 0x845(0x1)(None)
	uint8                                        Pad_26E0[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VirtualTextureMainPassMaxDrawDistance;             // 0x848(0x4)(None)
	uint8                                        bNeverNeedsCookedCollisionData : 1;                // Mask: 0x1, PropSize: 0x10x84C(0x1)(None)
	uint8                                        Pad_26E1[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USplineMeshComponent* GetDefaultObj();

	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	void GetStartTangent(const struct FVector& ReturnValue);
	void GetStartScale(const struct FVector2D& ReturnValue);
	void GetStartRoll(float ReturnValue);
	void GetStartPosition(const struct FVector& ReturnValue);
	void GetStartOffset(const struct FVector2D& ReturnValue);
	void GetSplineUpDir(const struct FVector& ReturnValue);
	void GetForwardAxis(enum class ESplineMeshAxis ReturnValue);
	void GetEndTangent(const struct FVector& ReturnValue);
	void GetEndScale(const struct FVector2D& ReturnValue);
	void GetEndRoll(float ReturnValue);
	void GetEndPosition(const struct FVector& ReturnValue);
	void GetEndOffset(const struct FVector2D& ReturnValue);
	void GetBoundaryMin(float ReturnValue);
	void GetBoundaryMax(float ReturnValue);
};

// 0x8 (0x470 - 0x468)
// Class Engine.SpotLightComponent
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                        InnerConeAngle;                                    // 0x468(0x4)(None)
	float                                        OuterConeAngle;                                    // 0x46C(0x4)(None)

	static class UClass* StaticClass();
	static class USpotLightComponent* GetDefaultObj();

	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// 0x78 (0x340 - 0x2C8)
// Class Engine.VolumetricCloudComponent
class UVolumetricCloudComponent : public USceneComponent
{
public:
	float                                        LayerBottomAltitude;                               // 0x2C8(0x4)(None)
	float                                        LayerHeight;                                       // 0x2CC(0x4)(None)
	float                                        TracingStartMaxDistance;                           // 0x2D0(0x4)(None)
	enum class EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode;                            // 0x2D4(0x1)(None)
	uint8                                        Pad_2707[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TracingMaxDistance;                                // 0x2D8(0x4)(None)
	float                                        PlanetRadius;                                      // 0x2DC(0x4)(None)
	struct FColor                                GroundAlbedo;                                      // 0x2E0(0x4)(None)
	uint8                                        Pad_2708[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    Material;                                          // 0x2E8(0x8)(ZeroConstructor)
	uint8                                        bUsePerSampleAtmosphericLightTransmittance : 1;    // Mask: 0x1, PropSize: 0x10x2F0(0x1)(None)
	uint8                                        BitPad_1D9 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2709[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SkyLightCloudBottomOcclusion;                      // 0x2F4(0x4)(None)
	float                                        ViewSampleCountScale;                              // 0x2F8(0x4)(None)
	float                                        ReflectionViewSampleCountScaleValue;               // 0x2FC(0x4)(None)
	float                                        ReflectionViewSampleCountScale;                    // 0x300(0x4)(None)
	float                                        ReflectionSampleCountScale;                        // 0x304(0x4)(None)
	float                                        ShadowViewSampleCountScale;                        // 0x308(0x4)(None)
	float                                        ShadowReflectionViewSampleCountScaleValue;         // 0x30C(0x4)(None)
	float                                        ShadowReflectionViewSampleCountScale;              // 0x310(0x4)(None)
	float                                        ShadowReflectionSampleCountScale;                  // 0x314(0x4)(None)
	float                                        ShadowTracingDistance;                             // 0x318(0x4)(None)
	float                                        StopTracingTransmittanceThreshold;                 // 0x31C(0x4)(None)
	float                                        AerialPespectiveRayleighScatteringStartDistance;   // 0x320(0x4)(None)
	float                                        AerialPespectiveRayleighScatteringFadeDistance;    // 0x324(0x4)(None)
	float                                        AerialPespectiveMieScatteringStartDistance;        // 0x328(0x4)(None)
	float                                        AerialPespectiveMieScatteringFadeDistance;         // 0x32C(0x4)(None)
	uint8                                        Pad_270C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVolumetricCloudComponent* GetDefaultObj();

	void SetViewSampleCountScale(float NewValue);
	void SetTracingStartMaxDistance(float NewValue);
	void SetTracingMaxDistance(float NewValue);
	void SetStopTracingTransmittanceThreshold(float NewValue);
	void SetSkyLightCloudBottomOcclusion(float NewValue);
	void SetShadowViewSampleCountScale(float NewValue);
	void SetShadowTracingDistance(float NewValue);
	void SetShadowReflectionViewSampleCountScale(float NewValue);
	void SetShadowReflectionSampleCountScale(float NewValue);
	void SetReflectionViewSampleCountScale(float NewValue);
	void SetReflectionSampleCountScale(float NewValue);
	void SetPlanetRadius(float NewValue);
	void SetMaterial(class UMaterialInterface* NewValue);
	void SetLayerHeight(float NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetGroundAlbedo(const struct FColor& NewValue);
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.VolumetricCloud
class AVolumetricCloud : public AInfo
{
public:
	class UVolumetricCloudComponent*             VolumetricCloudComponent;                          // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AVolumetricCloud* GetDefaultObj();

};

// 0x60 (0x118 - 0xB8)
// Class Engine.WorldPartitionStreamingSourceComponent
class UWorldPartitionStreamingSourceComponent : public UActorComponent
{
public:
	uint8                                        Pad_2717[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingSourceTargetBehavior    TargetBehavior;                                    // 0xC0(0x1)(None)
	uint8                                        Pad_2718[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TargetGrids;                                       // 0xC8(0x10)(None)
	class FName                                  TargetGrid;                                        // 0xD8(0x8)(None)
	struct FColor                                DebugColor;                                        // 0xE0(0x4)(None)
	uint8                                        Pad_2719[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UHLODLayer*>                    TargetHLODLayers;                                  // 0xE8(0x10)(ZeroConstructor)
	class UHLODLayer*                            TargetHLODLayer;                                   // 0xF8(0x8)(ZeroConstructor)
	TArray<struct FStreamingSourceShape>         Shapes;                                            // 0x100(0x10)(None)
	enum class EStreamingSourcePriority          Priority;                                          // 0x110(0x1)(None)
	bool                                         bStreamingSourceEnabled;                           // 0x111(0x1)(None)
	enum class EStreamingSourceTargetState       TargetState;                                       // 0x112(0x1)(None)
	uint8                                        Pad_271E[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionStreamingSourceComponent* GetDefaultObj();

	void IsStreamingSourceEnabled(bool ReturnValue);
	void IsStreamingCompleted(bool ReturnValue);
	void EnableStreamingSource();
	void DisableStreamingSource();
};

// 0x78 (0xA0 - 0x28)
// Class Engine.CurveTable
class UCurveTable : public UObject
{
public:
	uint8                                        Pad_2726[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCurveTable* GetDefaultObj();

};

// 0x28 (0xC8 - 0xA0)
// Class Engine.CompositeCurveTable
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                   ParentTables;                                      // 0xA0(0x10)(ZeroConstructor)
	TArray<class UCurveTable*>                   OldParentTables;                                   // 0xB0(0x10)(None)
	uint8                                        Pad_2729[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositeCurveTable* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.CompositeDataTable
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                    ParentTables;                                      // 0xB0(0x10)(ZeroConstructor)
	TArray<class UDataTable*>                    OldParentTables;                                   // 0xC0(0x10)(ZeroConstructor)
	uint8                                        Pad_2744[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCompositeDataTable* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Engine.EnumCookedMetaData
class UEnumCookedMetaData : public UObject
{
public:
	struct FObjectCookedMetaDataStore            EnumMetaData;                                      // 0x28(0x50)(None)

	static class UClass* StaticClass();
	static class UEnumCookedMetaData* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.StructCookedMetaData
class UStructCookedMetaData : public UObject
{
public:
	struct FStructCookedMetaDataStore            StructMetaData;                                    // 0x28(0xA0)(None)

	static class UClass* StaticClass();
	static class UStructCookedMetaData* GetDefaultObj();

};

// 0xF0 (0x118 - 0x28)
// Class Engine.ClassCookedMetaData
class UClassCookedMetaData : public UObject
{
public:
	struct FStructCookedMetaDataStore            ClassMetaData;                                     // 0x28(0xA0)(None)
	TMap<class FName, struct FStructCookedMetaDataStore> FunctionsMetaData;                                 // 0xC8(0x50)(None)

	static class UClass* StaticClass();
	static class UClassCookedMetaData* GetDefaultObj();

};

// 0x38 (0x70 - 0x38)
// Class Engine.StreamingSettings
class UStreamingSettings : public UDeveloperSettings
{
public:
	uint8                                        AsyncLoadingThreadEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        WarnIfTimeLimitExceeded : 1;                       // Mask: 0x2, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_1DB : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_274B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeLimitExceededMultiplier;                       // 0x3C(0x4)(None)
	float                                        TimeLimitExceededMinTime;                          // 0x40(0x4)(None)
	int32                                        MinBulkDataSizeForAsyncLoading;                    // 0x44(0x4)(None)
	uint8                                        UseBackgroundLevelStreaming : 1;                   // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        AsyncLoadingUseFullTimeLimit : 1;                  // Mask: 0x2, PropSize: 0x10x48(0x1)(None)
	uint8                                        BitPad_1DC : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_274D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AsyncLoadingTimeLimit;                             // 0x4C(0x4)(None)
	float                                        PriorityAsyncLoadingExtraTime;                     // 0x50(0x4)(None)
	float                                        LevelStreamingActorsUpdateTimeLimit;               // 0x54(0x4)(None)
	float                                        PriorityLevelStreamingActorsUpdateExtraTime;       // 0x58(0x4)(None)
	int32                                        LevelStreamingComponentsRegistrationGranularity;   // 0x5C(0x4)(None)
	int32                                        LevelStreamingAddPrimitiveGranularity;             // 0x60(0x4)(None)
	float                                        LevelStreamingUnregisterComponentsTimeLimit;       // 0x64(0x4)(None)
	int32                                        LevelStreamingComponentsUnregistrationGranularity; // 0x68(0x4)(None)
	uint8                                        FlushStreamingOnExit : 1;                          // Mask: 0x1, PropSize: 0x10x6C(0x1)(None)
	uint8                                        EventDrivenLoaderEnabled : 1;                      // Mask: 0x2, PropSize: 0x10x6C(0x1)(None)
	uint8                                        Pad_2753[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStreamingSettings* GetDefaultObj();

};

// 0x20 (0x58 - 0x38)
// Class Engine.GarbageCollectionSettings
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                        TimeBetweenPurgingPendingKillObjects;              // 0x38(0x4)(None)
	uint8                                        FlushStreamingOnGC : 1;                            // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        AllowParallelGC : 1;                               // Mask: 0x2, PropSize: 0x10x3C(0x1)(None)
	uint8                                        IncrementalBeginDestroyEnabled : 1;                // Mask: 0x4, PropSize: 0x10x3C(0x1)(None)
	uint8                                        MultithreadedDestructionEnabled : 1;               // Mask: 0x8, PropSize: 0x10x3C(0x1)(None)
	uint8                                        CreateGCClusters : 1;                              // Mask: 0x10, PropSize: 0x10x3C(0x1)(None)
	uint8                                        AssetClusteringEnabled : 1;                        // Mask: 0x20, PropSize: 0x10x3C(0x1)(None)
	uint8                                        ActorClusteringEnabled : 1;                        // Mask: 0x40, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BlueprintClusteringEnabled : 1;                    // Mask: 0x80, PropSize: 0x10x3C(0x1)(None)
	uint8                                        UseDisregardForGCOnDedicatedServers : 1;           // Mask: 0x1, PropSize: 0x10x3D(0x1)(None)
	uint8                                        VerifyGCObjectNames : 1;                           // Mask: 0x2, PropSize: 0x10x3D(0x1)(None)
	uint8                                        VerifyUObjectsAreNotFGCObjects : 1;                // Mask: 0x4, PropSize: 0x10x3D(0x1)(None)
	uint8                                        PendingKillEnabled : 1;                            // Mask: 0x8, PropSize: 0x10x3D(0x1)(None)
	uint8                                        BitPad_1DD : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2756[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinGCClusterSize;                                  // 0x40(0x4)(None)
	int32                                        NumRetriesBeforeForcingGC;                         // 0x44(0x4)(None)
	int32                                        MaxObjectsNotConsideredByGC;                       // 0x48(0x4)(None)
	int32                                        SizeOfPermanentObjectPool;                         // 0x4C(0x4)(None)
	int32                                        MaxObjectsInGame;                                  // 0x50(0x4)(None)
	int32                                        MaxObjectsInEditor;                                // 0x54(0x4)(None)

	static class UClass* StaticClass();
	static class UGarbageCollectionSettings* GetDefaultObj();

};

// 0x18 (0x520 - 0x508)
// Class Engine.CullDistanceVolume
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>         CullDistances;                                     // 0x508(0x10)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x518(0x1)(None)
	uint8                                        Pad_275B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACullDistanceVolume* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.CurveBase
class UCurveBase : public UObject
{
public:
	uint8                                        Pad_275E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCurveBase* GetDefaultObj();

	void GetValueRange(float MinValue, float MaxValue);
	void GetTimeRange(float MinTime, float MaxTime);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveEdPresetCurve
class UCurveEdPresetCurve : public UObject
{
public:

	static class UClass* StaticClass();
	static class UCurveEdPresetCurve* GetDefaultObj();

};

// 0x88 (0xB8 - 0x30)
// Class Engine.CurveFloat
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurve;                                        // 0x30(0x80)(None)
	bool                                         bIsEventCurve;                                     // 0xB0(0x1)(None)
	uint8                                        Pad_2766[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCurveFloat* GetDefaultObj();

	void GetFloatValue(float InTime, float ReturnValue);
};

// 0x220 (0x250 - 0x30)
// Class Engine.CurveLinearColor
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves[0x4];                                  // 0x30(0x200)(None)
	float                                        AdjustHue;                                         // 0x230(0x4)(None)
	float                                        AdjustSaturation;                                  // 0x234(0x4)(None)
	float                                        AdjustBrightness;                                  // 0x238(0x4)(None)
	float                                        AdjustBrightnessCurve;                             // 0x23C(0x4)(None)
	float                                        AdjustVibrance;                                    // 0x240(0x4)(None)
	float                                        AdjustMinAlpha;                                    // 0x244(0x4)(None)
	float                                        AdjustMaxAlpha;                                    // 0x248(0x4)(None)
	uint8                                        Pad_2857[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCurveLinearColor* GetDefaultObj();

	void GetUnadjustedLinearColorValue(float InTime, const struct FLinearColor& ReturnValue);
	void GetLinearColorValue(float InTime, const struct FLinearColor& ReturnValue);
	void GetClampedLinearColorValue(float InTime, const struct FLinearColor& ReturnValue);
};

// 0x28 (0x2B0 - 0x288)
// Class Engine.CurveLinearColorAtlas
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32                                       TextureSize;                                       // 0x288(0x4)(None)
	uint8                                        bSquareResolution : 1;                             // Mask: 0x1, PropSize: 0x10x28C(0x1)(None)
	uint8                                        BitPad_1F2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_285C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       TextureHeight;                                     // 0x290(0x4)(None)
	uint8                                        Pad_285D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCurveLinearColor*>             GradientCurves;                                    // 0x298(0x10)(ZeroConstructor)
	uint8                                        Pad_285E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCurveLinearColorAtlas* GetDefaultObj();

	void GetCurvePosition(class UCurveLinearColor* InCurve, float Position, bool ReturnValue);
};

// 0x180 (0x1B0 - 0x30)
// Class Engine.CurveVector
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves[0x3];                                  // 0x30(0x180)(None)

	static class UClass* StaticClass();
	static class UCurveVector* GetDefaultObj();

	void GetVectorValue(float InTime, const struct FVector& ReturnValue);
};

// 0x10 (0x40 - 0x30)
// Class Engine.DataDrivenCVarEngineSubsystem
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnDataDrivenCVarDelegate;                          // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UDataDrivenCVarEngineSubsystem* GetDefaultObj();

};

// 0x38 (0x70 - 0x38)
// Class Engine.DataDrivenConsoleVariableSettings
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{
public:
	uint8                                        Pad_2862[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDataDrivenConsoleVariable>    CVarsArray;                                        // 0x50(0x10)(None)
	uint8                                        Pad_2863[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataDrivenConsoleVariableSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DataTableFunctionLibrary
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDataTableFunctionLibrary* GetDefaultObj();

	void GetDataTableRowNames(class UDataTable* Table, const TArray<class FName>& OutRowNames);
	void GetDataTableRowFromName(class UDataTable* Table, class FName RowName, const struct FTableRowBase& OutRow, bool ReturnValue);
	void GetDataTableColumnAsString(class UDataTable* DataTable, class FName PropertyName, const TArray<class FString>& ReturnValue);
	void EvaluateCurveTableRow(class UCurveTable* CurveTable, class FName RowName, float InXY, enum class EEvaluateCurveTableResult OutResult, float OutXY, const class FString& ContextString);
	void DoesDataTableRowExist(class UDataTable* Table, class FName RowName, bool ReturnValue);
};

// 0x188 (0xC70 - 0xAE8)
// Class Engine.DebugCameraController
class ADebugCameraController : public APrimalPlayerController
{
public:
	uint8                                        bShowSelectedInfo : 1;                             // Mask: 0x1, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bIsFrozenRendering : 1;                            // Mask: 0x2, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bIsOrbitingSelectedActor : 1;                      // Mask: 0x4, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bOrbitPivotUseCenter : 1;                          // Mask: 0x8, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bEnableBufferVisualization : 1;                    // Mask: 0x10, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bEnableBufferVisualizationFullMode : 1;            // Mask: 0x20, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bIsBufferVisualizationInputSetup : 1;              // Mask: 0x40, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        bLastDisplayEnabled : 1;                           // Mask: 0x80, PropSize: 0x10xAE8(0x1)(None)
	uint8                                        Pad_2888[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawFrustumComponent*                 DrawFrustum;                                       // 0xAF0(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AActor>                 SelectedActor;                                     // 0xAF8(0x8)(ZeroConstructor)
	TWeakObjectPtr<class UPrimitiveComponent>    SelectedComponent;                                 // 0xB00(0x8)(ZeroConstructor)
	struct FHitResult                            SelectedHitPoint;                                  // 0xB08(0xF0)(ZeroConstructor)
	class APlayerController*                     OriginalControllerRef;                             // 0xBF8(0x8)(ZeroConstructor)
	class UPlayer*                               OriginalPlayer;                                    // 0xC00(0x8)(ZeroConstructor)
	float                                        SpeedScale;                                        // 0xC08(0x4)(None)
	float                                        InitialMaxSpeed;                                   // 0xC0C(0x4)(None)
	float                                        InitialAccel;                                      // 0xC10(0x4)(None)
	float                                        InitialDecel;                                      // 0xC14(0x4)(None)
	uint8                                        Pad_2889[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADebugCameraController* GetDefaultObj();

	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);
	void ReceiveOnActivate(class APlayerController* OriginalPC);
	void GetSelectedActor(class AActor* ReturnValue);
};

// 0x10 (0x48 - 0x38)
// Class Engine.DebugCameraControllerSettings
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                    // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UDebugCameraControllerSettings* GetDefaultObj();

};

// 0x0 (0x5B0 - 0x5B0)
// Class Engine.DebugCameraHUD
class ADebugCameraHUD : public AHUD
{
public:

	static class UClass* StaticClass();
	static class ADebugCameraHUD* GetDefaultObj();

};

// 0x50 (0x6D0 - 0x680)
// Class Engine.DebugDrawComponent
class UDebugDrawComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_2890[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDebugDrawComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DebugDrawService
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UDebugDrawService* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ReporterBase
class UReporterBase : public UObject
{
public:
	uint8                                        Pad_2895[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReporterBase* GetDefaultObj();

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ReporterGraph
class UReporterGraph : public UReporterBase
{
public:
	uint8                                        Pad_2896[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReporterGraph* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.DecalActor
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                       Decal;                                             // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ADecalActor* GetDefaultObj();

	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	void GetDecalMaterial(class UMaterialInterface* ReturnValue);
	void CreateDynamicMaterialInstance(class UMaterialInstanceDynamic* ReturnValue);
};

// 0x0 (0x528 - 0x528)
// Class Engine.DefaultPhysicsVolume
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass();
	static class ADefaultPhysicsVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DeformableInterface
class IDeformableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDeformableInterface* GetDefaultObj();

};

// 0xCC0 (0x1450 - 0x790)
// Class Engine.DemoNetDriver
class UDemoNetDriver : public UNetDriver
{
public:
	uint8                                        Pad_28A9[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                          // 0x7C8(0x50)(ZeroConstructor)
	uint8                                        Pad_28AA[0xE4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CheckpointSaveMaxMSPerFrame;                       // 0x8FC(0x4)(None)
	uint8                                        Pad_28AB[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMulticastRecordOptions>       MulticastRecordOptions;                            // 0x918(0x10)(None)
	TArray<class APlayerController*>             SpectatorControllers;                              // 0x928(0x10)(ZeroConstructor)
	uint8                                        Pad_28AC[0xB18];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDemoNetDriver* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DestructibleInterface
class IDestructibleInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDestructibleInterface* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.TextureLODSettings
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>              TextureLODGroups;                                  // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UTextureLODSettings* GetDefaultObj();

};

// 0x98 (0xD0 - 0x38)
// Class Engine.DeviceProfile
class UDeviceProfile : public UTextureLODSettings
{
public:
	class FString                                DeviceType;                                        // 0x38(0x10)(None)
	class FString                                BaseProfileName;                                   // 0x48(0x10)(None)
	uint8                                        bIsVisibleForAssets : 1;                           // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_1F5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_28AF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDeviceProfile*                        Parent;                                            // 0x60(0x8)(None)
	uint8                                        Pad_28B0[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        CVars;                                             // 0x90(0x10)(None)
	TArray<struct FDPMatchingRulestruct>         MatchingRules;                                     // 0xA0(0x10)(None)
	uint8                                        Pad_28B1[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeviceProfile* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class Engine.DeviceProfileManager
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UDeviceProfile*>                Profiles;                                          // 0x28(0x10)(ZeroConstructor)
	TArray<class UDeviceProfile*>                BackupProfiles;                                    // 0x38(0x10)(None)
	uint8                                        Pad_28B2[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDeviceProfileManager* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.DialogueVoice
class UDialogueVoice : public UObject
{
public:
	enum class EGrammaticalGender                Gender;                                            // 0x28(0x1)(None)
	enum class EGrammaticalNumber                Plurality;                                         // 0x29(0x1)(None)
	uint8                                        Pad_28B3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LocalizationGUID;                                  // 0x2C(0x10)(None)
	uint8                                        Pad_28B4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDialogueVoice* GetDefaultObj();

};

// 0x48 (0x70 - 0x28)
// Class Engine.DialogueWave
class UDialogueWave : public UObject
{
public:
	uint8                                        bMature : 1;                                       // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        bOverride_SubtitleOverride : 1;                    // Mask: 0x2, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_1F6 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_28B9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0x30(0x10)(None)
	class FString                                SubtitleOverride;                                  // 0x40(0x10)(None)
	TArray<struct FDialogueContextMapping>       ContextMappings;                                   // 0x50(0x10)(None)
	struct FGuid                                 LocalizationGUID;                                  // 0x60(0x10)(None)

	static class UClass* StaticClass();
	static class UDialogueWave* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.DocumentationActor
class ADocumentationActor : public AActor
{
public:
	uint8                                        Pad_28BB[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADocumentationActor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DPICustomScalingRule
class UDPICustomScalingRule : public UObject
{
public:

	static class UClass* StaticClass();
	static class UDPICustomScalingRule* GetDefaultObj();

};

// 0x20 (0xB8 - 0x98)
// Class Engine.EdGraphNode_Documentation
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	class FString                                Link;                                              // 0x98(0x10)(None)
	class FString                                Excerpt;                                           // 0xA8(0x10)(None)

	static class UClass* StaticClass();
	static class UEdGraphNode_Documentation* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ThumbnailInfo
class UThumbnailInfo : public UObject
{
public:

	static class UClass* StaticClass();
	static class UThumbnailInfo* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementAssetDataInterface
class UActorElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_28C8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementAssetDataInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementCounterInterface
class UActorElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_28C9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementCounterInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementHierarchyInterface
class UActorElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_28CC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementHierarchyInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementObjectInterface
class UActorElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_28CD[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementObjectInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementSelectionInterface
class UActorElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_28CE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementSelectionInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementWorldInterface
class UActorElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_28CF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorElementWorldInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementCounterInterface
class UComponentElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_28D3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UComponentElementCounterInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementHierarchyInterface
class UComponentElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_28D5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UComponentElementHierarchyInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementObjectInterface
class UComponentElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_28D8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UComponentElementObjectInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementSelectionInterface
class UComponentElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_28DB[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UComponentElementSelectionInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementWorldInterface
class UComponentElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_28DF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UComponentElementWorldInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineElementsLibrary
class UEngineElementsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UEngineElementsLibrary* GetDefaultObj();

};

// 0x800 (0x828 - 0x28)
// Class Engine.TypedElementCommonActions
class UTypedElementCommonActions : public UObject
{
public:
	uint8                                        Pad_2931[0x800];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTypedElementCommonActions* GetDefaultObj();

	void PasteNormalizedElementsFromString(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const class FString& InputString, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void PasteElementsFromString(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const class FString& InputString, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void K2_PasteNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void K2_PasteElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementPasteOptions& PasteOption, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void K2_DuplicateSelectedElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FVector& LocationOffset, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void DuplicateNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FVector& LocationOffset, const TArray<struct FScriptTypedElementHandle>& ReturnValue);
	void DeleteSelectedElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementDeletionOptions& DeletionOptions, bool ReturnValue);
	void DeleteNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& DeletionOptions, bool ReturnValue);
	void CopySelectedElementsToString(class UTypedElementSelectionSet* SelectionSet, const class FString& OutputString, bool ReturnValue);
	void CopySelectedElements(class UTypedElementSelectionSet* SelectionSet, bool ReturnValue);
	void CopyNormalizedElementsToString(const struct FScriptTypedElementListProxy& ElementList, const class FString& OutputString, bool ReturnValue);
	void CopyNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.TypedElementWorldInterface
class ITypedElementWorldInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ITypedElementWorldInterface* GetDefaultObj();

	void SetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform, bool ReturnValue);
	void SetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform, bool ReturnValue);
	void SetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, const struct FVector& InPivotOffset, bool ReturnValue);
	void PromoteElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* OverrideWorld, const struct FScriptTypedElementHandle& ReturnValue);
	void NotifyMovementStarted(const struct FScriptTypedElementHandle& InElementHandle);
	void NotifyMovementOngoing(const struct FScriptTypedElementHandle& InElementHandle);
	void NotifyMovementEnded(const struct FScriptTypedElementHandle& InElementHandle);
	void IsTemplateElement(const struct FScriptTypedElementHandle& InElementHandle, bool ReturnValue);
	void GetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& OutTransform, bool ReturnValue);
	void GetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& OutTransform, bool ReturnValue);
	void GetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, const struct FVector& OutPivotOffset, bool ReturnValue);
	void GetOwnerWorld(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* ReturnValue);
	void GetOwnerLevel(const struct FScriptTypedElementHandle& InElementHandle, class ULevel* ReturnValue);
	void GetBounds(const struct FScriptTypedElementHandle& InElementHandle, const struct FBoxSphereBounds& OutBounds, bool ReturnValue);
	void DuplicateElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, const struct FVector& InLocationOffset, const struct FScriptTypedElementHandle& ReturnValue);
	void DeleteElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& InDeletionOptions, bool ReturnValue);
	void CanPromoteElement(const struct FScriptTypedElementHandle& InElementHandle, bool ReturnValue);
	void CanMoveElement(const struct FScriptTypedElementHandle& InElementHandle, enum class ETypedElementWorldType InWorldType, bool ReturnValue);
	void CanEditElement(const struct FScriptTypedElementHandle& InElementHandle, bool ReturnValue);
	void CanDuplicateElement(const struct FScriptTypedElementHandle& InElementHandle, bool ReturnValue);
	void CanDeleteElement(const struct FScriptTypedElementHandle& InElementHandle, bool ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementAssetDataInterface
class UObjectElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_29B8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectElementAssetDataInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementCounterInterface
class UObjectElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_29BB[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectElementCounterInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementObjectInterface
class UObjectElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_29BC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectElementObjectInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementSelectionInterface
class UObjectElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_29BF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectElementSelectionInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementAssetDataInterface
class USMInstanceElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_29C0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USMInstanceElementAssetDataInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementHierarchyInterface
class USMInstanceElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_29C1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USMInstanceElementHierarchyInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceElementIdMapTransactor
class USMInstanceElementIdMapTransactor : public UObject
{
public:

	static class UClass* StaticClass();
	static class USMInstanceElementIdMapTransactor* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementSelectionInterface
class USMInstanceElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_29C2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USMInstanceElementSelectionInterface* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementWorldInterface
class USMInstanceElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_29C3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USMInstanceElementWorldInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LocalMessage
class ULocalMessage : public UObject
{
public:

	static class UClass* StaticClass();
	static class ULocalMessage* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class Engine.EngineMessage
class UEngineMessage : public ULocalMessage
{
public:
	class FString                                FailedPlaceMessage;                                // 0x28(0x10)(None)
	class FString                                MaxedOutMessage;                                   // 0x38(0x10)(None)
	class FString                                EnteredMessage;                                    // 0x48(0x10)(None)
	class FString                                LeftMessage;                                       // 0x58(0x10)(None)
	class FString                                GlobalNameChange;                                  // 0x68(0x10)(None)
	class FString                                SpecEnteredMessage;                                // 0x78(0x10)(None)
	class FString                                NewPlayerMessage;                                  // 0x88(0x10)(None)
	class FString                                NewSpecMessage;                                    // 0x98(0x10)(None)

	static class UClass* StaticClass();
	static class UEngineMessage* GetDefaultObj();

};

// 0x10 (0x50 - 0x40)
// Class Engine.AutoDestroySubsystem
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{
public:
	TArray<class AActor*>                        ActorsToPoll;                                      // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class UAutoDestroySubsystem* GetDefaultObj();

	void OnActorEndPlay(class AActor* Actor, enum class EEndPlayReason EndPlayReason);
};

// 0x0 (0x30 - 0x30)
// Class Engine.CancellableAsyncAction
class UCancellableAsyncAction : public UBlueprintAsyncActionBase
{
public:

	static class UClass* StaticClass();
	static class UCancellableAsyncAction* GetDefaultObj();

	void IsActive(bool ReturnValue);
	void Cancel();
};

// 0x0 (0x28 - 0x28)
// Class Engine.LODSyncInterface
class ILODSyncInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILODSyncInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchFolder
class UPoseWatchFolder : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPoseWatchFolder* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchElement
class UPoseWatchElement : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPoseWatchElement* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchPoseElement
class UPoseWatchPoseElement : public UPoseWatchElement
{
public:

	static class UClass* StaticClass();
	static class UPoseWatchPoseElement* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatch
class UPoseWatch : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPoseWatch* GetDefaultObj();

};

// 0xC8 (0x580 - 0x4B8)
// Class Engine.ServerStatReplicator
class AServerStatReplicator : public AInfo
{
public:
	bool                                         bUpdateStatNet;                                    // 0x4B8(0x1)(None)
	bool                                         bOverwriteClientStats;                             // 0x4B9(0x1)(None)
	uint8                                        Pad_29CA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       Channels;                                          // 0x4BC(0x4)(None)
	uint32                                       InRate;                                            // 0x4C0(0x4)(None)
	uint32                                       OutRate;                                           // 0x4C4(0x4)(None)
	uint8                                        Pad_29CB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MaxPacketOverhead;                                 // 0x4CC(0x4)(None)
	uint32                                       InRateClientMax;                                   // 0x4D0(0x4)(None)
	uint32                                       InRateClientMin;                                   // 0x4D4(0x4)(None)
	uint32                                       InRateClientAvg;                                   // 0x4D8(0x4)(None)
	uint32                                       InPacketsClientMax;                                // 0x4DC(0x4)(None)
	uint32                                       InPacketsClientMin;                                // 0x4E0(0x4)(None)
	uint32                                       InPacketsClientAvg;                                // 0x4E4(0x4)(None)
	uint32                                       OutRateClientMax;                                  // 0x4E8(0x4)(None)
	uint32                                       OutRateClientMin;                                  // 0x4EC(0x4)(None)
	uint32                                       OutRateClientAvg;                                  // 0x4F0(0x4)(None)
	uint32                                       OutPacketsClientMax;                               // 0x4F4(0x4)(None)
	uint32                                       OutPacketsClientMin;                               // 0x4F8(0x4)(None)
	uint32                                       OutPacketsClientAvg;                               // 0x4FC(0x4)(None)
	uint32                                       NetNumClients;                                     // 0x500(0x4)(None)
	uint32                                       InPackets;                                         // 0x504(0x4)(None)
	uint32                                       OutPackets;                                        // 0x508(0x4)(None)
	uint32                                       InBunches;                                         // 0x50C(0x4)(None)
	uint32                                       OutBunches;                                        // 0x510(0x4)(None)
	uint32                                       OutLoss;                                           // 0x514(0x4)(None)
	uint32                                       InLoss;                                            // 0x518(0x4)(None)
	uint32                                       VoiceBytesSent;                                    // 0x51C(0x4)(None)
	uint32                                       VoiceBytesRecv;                                    // 0x520(0x4)(None)
	uint32                                       VoicePacketsSent;                                  // 0x524(0x4)(None)
	uint32                                       VoicePacketsRecv;                                  // 0x528(0x4)(None)
	uint32                                       PercentInVoice;                                    // 0x52C(0x4)(None)
	uint32                                       PercentOutVoice;                                   // 0x530(0x4)(None)
	uint32                                       NumActorChannels;                                  // 0x534(0x4)(None)
	uint32                                       NumConsideredActors;                               // 0x538(0x4)(None)
	uint32                                       PrioritizedActors;                                 // 0x53C(0x4)(None)
	uint32                                       NumRelevantActors;                                 // 0x540(0x4)(None)
	uint32                                       NumRelevantDeletedActors;                          // 0x544(0x4)(None)
	uint32                                       NumReplicatedActorAttempts;                        // 0x548(0x4)(None)
	uint32                                       NumReplicatedActors;                               // 0x54C(0x4)(None)
	uint32                                       NumActors;                                         // 0x550(0x4)(None)
	uint32                                       NumNetActors;                                      // 0x554(0x4)(None)
	uint32                                       NumDormantActors;                                  // 0x558(0x4)(None)
	uint32                                       NumInitiallyDormantActors;                         // 0x55C(0x4)(None)
	uint32                                       NumNetGUIDsAckd;                                   // 0x560(0x4)(None)
	uint32                                       NumNetGUIDsPending;                                // 0x564(0x4)(None)
	uint32                                       NumNetGUIDsUnAckd;                                 // 0x568(0x4)(None)
	uint32                                       ObjPathBytes;                                      // 0x56C(0x4)(None)
	uint32                                       NetGUIDOutRate;                                    // 0x570(0x4)(None)
	uint32                                       NetGUIDInRate;                                     // 0x574(0x4)(None)
	uint32                                       NetSaturated;                                      // 0x578(0x4)(None)
	uint8                                        Pad_29CC[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AServerStatReplicator* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.SystemTimeTimecodeProvider
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                            FrameRate;                                         // 0x30(0x8)(None)
	bool                                         bGenerateFullFrame;                                // 0x38(0x1)(None)
	bool                                         bUseHighPerformanceClock;                          // 0x39(0x1)(None)
	uint8                                        Pad_29CD[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USystemTimeTimecodeProvider* GetDefaultObj();

};

// 0x20 (0x50 - 0x30)
// Class Engine.ViewportStatsSubsystem
class UViewportStatsSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_29D3[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UViewportStatsSubsystem* GetDefaultObj();

	void RemoveDisplayDelegate(int32 IndexToRemove);
	void AddTimedDisplay(class FText Text, const struct FLinearColor& Color, float Duration, const struct FVector2D& DisplayOffset);
	void AddDisplayDelegate(FDelegateProperty_ Delegate, int32 ReturnValue);
};

// 0x1A8 (0x1D0 - 0x28)
// Class Engine.Font
class UFont : public UObject
{
public:
	uint8                                        Pad_29D5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EFontCacheType                    FontCacheType;                                     // 0x30(0x1)(None)
	uint8                                        Pad_29D6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFontCharacter>                Characters;                                        // 0x38(0x10)(None)
	TArray<class UTexture2D*>                    Textures;                                          // 0x48(0x10)(ZeroConstructor)
	int32                                        IsRemapped;                                        // 0x58(0x4)(None)
	float                                        EmScale;                                           // 0x5C(0x4)(None)
	float                                        Ascent;                                            // 0x60(0x4)(None)
	float                                        Descent;                                           // 0x64(0x4)(None)
	float                                        Leading;                                           // 0x68(0x4)(None)
	int32                                        Kerning;                                           // 0x6C(0x4)(None)
	struct FFontImportOptionsData                ImportOptions;                                     // 0x70(0xB0)(None)
	int32                                        NumCharacters;                                     // 0x120(0x4)(None)
	uint8                                        Pad_29D8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                MaxCharHeight;                                     // 0x128(0x10)(None)
	float                                        ScalingFactor;                                     // 0x138(0x4)(None)
	int32                                        LegacyFontSize;                                    // 0x13C(0x4)(None)
	class FName                                  LegacyFontName;                                    // 0x140(0x8)(None)
	struct FCompositeFont                        CompositeFont;                                     // 0x148(0x38)(None)
	uint8                                        Pad_29D9[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFont* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class Engine.FontFace
class UFontFace : public UObject
{
public:
	uint8                                        Pad_29DB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SourceFilename;                                    // 0x30(0x10)(None)
	enum class EFontHinting                      Hinting;                                           // 0x40(0x1)(None)
	enum class EFontLoadingPolicy                LoadingPolicy;                                     // 0x41(0x1)(None)
	enum class EFontLayoutMethod                 LayoutMethod;                                      // 0x42(0x1)(None)
	uint8                                        Pad_29DC[0x15];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFontFace* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.AsyncActionHandleSaveGame
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x30(0x10)(ZeroConstructor)
	uint8                                        Pad_29E3[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USaveGame*                             SaveGameObject;                                    // 0x60(0x8)(None)

	static class UClass* StaticClass();
	static class UAsyncActionHandleSaveGame* GetDefaultObj();

	void AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, const class FString& SlotName, int32 UserIndex, class UAsyncActionHandleSaveGame* ReturnValue);
	void AsyncLoadGameFromSlot(class UObject* WorldContextObject, const class FString& SlotName, int32 UserIndex, class UAsyncActionHandleSaveGame* ReturnValue);
};

// 0x78 (0xA0 - 0x28)
// Class Engine.ForceFeedbackEffect
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>  ChannelDetails;                                    // 0x28(0x10)(ZeroConstructor)
	TMap<class FName, struct FForceFeedbackEffectOverridenChannelDetails> PerDeviceOverrides;                                // 0x38(0x50)(ZeroConstructor)
	TArray<class UInputDeviceProperty*>          DeviceProperties;                                  // 0x88(0x10)(None)
	float                                        Duration;                                          // 0x98(0x4)(None)
	uint8                                        Pad_29E4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UForceFeedbackEffect* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.InputDeviceProperty
class UInputDeviceProperty : public UObject
{
public:
	float                                        PropertyDuration;                                  // 0x28(0x4)(None)
	uint8                                        Pad_29E8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceProperty* GetDefaultObj();

	void ResetDeviceProperty(const struct FPlatformUserId& PlatformUser, const struct FInputDeviceId& DeviceID);
	void EvaluateDeviceProperty(const struct FPlatformUserId& PlatformUser, const struct FInputDeviceId& DeviceID, float DeltaTime, float Duration);
	void ApplyDeviceProperty(const struct FPlatformUserId& UserId, const struct FInputDeviceId& DeviceID);
};

// 0x68 (0x98 - 0x30)
// Class Engine.ColorInputDeviceProperty
class UColorInputDeviceProperty : public UInputDeviceProperty
{
public:
	struct FDeviceColorData                      ColorData;                                         // 0x30(0x8)(None)
	TMap<class FName, struct FDeviceColorData>   DeviceOverrideData;                                // 0x38(0x50)(None)
	uint8                                        Pad_29EB[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UColorInputDeviceProperty* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class Engine.ColorInputDeviceCurveProperty
class UColorInputDeviceCurveProperty : public UInputDeviceProperty
{
public:
	struct FDeviceColorCurveData                 ColorData;                                         // 0x30(0x10)(ZeroConstructor)
	TMap<class FName, struct FDeviceColorCurveData> DeviceOverrideData;                                // 0x40(0x50)(None)
	uint8                                        Pad_29EE[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UColorInputDeviceCurveProperty* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.InputDeviceTriggerEffect
class UInputDeviceTriggerEffect : public UInputDeviceProperty
{
public:
	struct FDeviceTriggerBaseData                BaseTriggerData;                                   // 0x30(0x2)(None)
	uint8                                        Pad_29EF[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceTriggerEffect* GetDefaultObj();

};

// 0x78 (0xB8 - 0x40)
// Class Engine.InputDeviceTriggerFeedbackProperty
class UInputDeviceTriggerFeedbackProperty : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerFeedbackData            TriggerData;                                       // 0x40(0x10)(ZeroConstructor)
	TMap<class FName, struct FDeviceTriggerFeedbackData> DeviceOverrideData;                                // 0x50(0x50)(None)
	uint8                                        Pad_29F1[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceTriggerFeedbackProperty* GetDefaultObj();

};

// 0x80 (0xC0 - 0x40)
// Class Engine.InputDeviceTriggerResistanceProperty
class UInputDeviceTriggerResistanceProperty : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerTriggerResistanceData   TriggerData;                                       // 0x40(0x10)(None)
	TMap<class FName, struct FDeviceTriggerTriggerResistanceData> DeviceOverrideData;                                // 0x50(0x50)(None)
	uint8                                        Pad_29F2[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceTriggerResistanceProperty* GetDefaultObj();

};

// 0x80 (0xC0 - 0x40)
// Class Engine.InputDeviceTriggerVibrationProperty
class UInputDeviceTriggerVibrationProperty : public UInputDeviceTriggerEffect
{
public:
	struct FDeviceTriggerTriggerVibrationData    TriggerData;                                       // 0x40(0x18)(ZeroConstructor)
	TMap<class FName, struct FDeviceTriggerTriggerVibrationData> DeviceOverrideData;                                // 0x58(0x50)(None)
	uint8                                        Pad_29F3[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceTriggerVibrationProperty* GetDefaultObj();

};

// 0x58 (0x88 - 0x30)
// Class Engine.InputDeviceAudioBasedVibrationProperty
class UInputDeviceAudioBasedVibrationProperty : public UInputDeviceProperty
{
public:
	struct FAudioBasedVibrationData              Data;                                              // 0x30(0x8)(ZeroConstructor)
	TMap<class FName, struct FAudioBasedVibrationData> DeviceOverrideData;                                // 0x38(0x50)(None)

	static class UClass* StaticClass();
	static class UInputDeviceAudioBasedVibrationProperty* GetDefaultObj();

};

// 0x168 (0x198 - 0x30)
// Class Engine.InputDeviceSubsystem
class UInputDeviceSubsystem : public UEngineSubsystem
{
public:
	uint8                                        Pad_2A55[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInputHardwareDeviceChanged;                      // 0x38(0x10)(ZeroConstructor)
	TSet<struct FActiveDeviceProperty>           ActiveProperties;                                  // 0x48(0x50)(None)
	TSet<struct FInputDevicePropertyHandle>      PropertiesPendingRemoval;                          // 0x98(0x50)(None)
	uint8                                        Pad_2A56[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputDeviceSubsystem* GetDefaultObj();

	void RemoveDevicePropertyHandles(TSet<struct FInputDevicePropertyHandle> HandlesToRemove);
	void RemoveDevicePropertyByHandle(const struct FInputDevicePropertyHandle& HandleToRemove);
	void RemoveAllDeviceProperties();
	void IsPropertyActive(const struct FInputDevicePropertyHandle& Handle, bool ReturnValue);
	void GetMostRecentlyUsedHardwareDevice(const struct FPlatformUserId& InUserId, const struct FHardwareDeviceIdentifier& ReturnValue);
	void GetInputDeviceHardwareIdentifier(const struct FInputDeviceId& InputDevice, const struct FHardwareDeviceIdentifier& ReturnValue);
	void GetActiveDeviceProperty(const struct FInputDevicePropertyHandle& Handle, class UInputDeviceProperty* ReturnValue);
	void ActivateDevicePropertyOfClass(class UClass* PropertyClass, const struct FActivateDevicePropertyParams& Params, const struct FInputDevicePropertyHandle& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PlayerStateCountLimiterConfig
class UPlayerStateCountLimiterConfig : public UNetObjectCountLimiterConfig
{
public:

	static class UClass* StaticClass();
	static class UPlayerStateCountLimiterConfig* GetDefaultObj();

};

// 0xF8 (0x3C0 - 0x2C8)
// Class Engine.SpringArmComponent
class USpringArmComponent : public USceneComponent
{
public:
	float                                        TargetArmLength;                                   // 0x2C8(0x4)(None)
	uint8                                        Pad_2A5C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SocketOffset;                                      // 0x2D0(0x18)(None)
	struct FVector                               TargetOffset;                                      // 0x2E8(0x18)(None)
	float                                        ProbeSize;                                         // 0x300(0x4)(None)
	enum class ECollisionChannel                 ProbeChannel;                                      // 0x304(0x1)(None)
	uint8                                        Pad_2A6E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDoCollisionTest : 1;                              // Mask: 0x1, PropSize: 0x10x308(0x1)(None)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x2, PropSize: 0x10x308(0x1)(None)
	uint8                                        bInheritPitch : 1;                                 // Mask: 0x4, PropSize: 0x10x308(0x1)(None)
	uint8                                        bInheritYaw : 1;                                   // Mask: 0x8, PropSize: 0x10x308(0x1)(None)
	uint8                                        bInheritRoll : 1;                                  // Mask: 0x10, PropSize: 0x10x308(0x1)(None)
	uint8                                        bEnableCameraLag : 1;                              // Mask: 0x20, PropSize: 0x10x308(0x1)(None)
	uint8                                        bEnableCameraRotationLag : 1;                      // Mask: 0x40, PropSize: 0x10x308(0x1)(None)
	uint8                                        bUseCameraLagSubstepping : 1;                      // Mask: 0x80, PropSize: 0x10x308(0x1)(None)
	uint8                                        bDrawDebugLagMarkers : 1;                          // Mask: 0x1, PropSize: 0x10x309(0x1)(None)
	uint8                                        BitPad_20B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A70[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraLagSpeed;                                    // 0x30C(0x4)(None)
	float                                        CameraRotationLagSpeed;                            // 0x310(0x4)(None)
	float                                        CameraLagMaxTimeStep;                              // 0x314(0x4)(None)
	float                                        CameraLagMaxDistance;                              // 0x318(0x4)(None)
	uint8                                        bClampToMaxPhysicsDeltaTime : 1;                   // Mask: 0x1, PropSize: 0x10x31C(0x1)(None)
	uint8                                        Pad_2A71[0xA3];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USpringArmComponent* GetDefaultObj();

	void IsCollisionFixApplied(bool ReturnValue);
	void GetUnfixedCameraPosition(const struct FVector& ReturnValue);
	void GetTargetRotation(const struct FRotator& ReturnValue);
};

// 0x30 (0x58 - 0x28)
// Class Engine.TouchInterface
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>            Controls;                                          // 0x28(0x10)(None)
	float                                        ActiveOpacity;                                     // 0x38(0x4)(None)
	float                                        InactiveOpacity;                                   // 0x3C(0x4)(None)
	float                                        TimeUntilDeactive;                                 // 0x40(0x4)(None)
	float                                        TimeUntilReset;                                    // 0x44(0x4)(None)
	float                                        ActivationDelay;                                   // 0x48(0x4)(None)
	bool                                         bPreventRecenter;                                  // 0x4C(0x1)(None)
	uint8                                        Pad_2A79[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StartupDelay;                                      // 0x50(0x4)(None)
	uint8                                        Pad_2A7A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTouchInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.GameplayStatics
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UGameplayStatics* GetDefaultObj();

	void UnRetainAllSoundsInSoundClass(class USoundClass* InSoundClass);
	void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	void UnloadStreamLevel(class UObject* WorldContextObject, class FName LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	void SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, bool ReturnValue);
	void SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool bAlwaysPlay, class UAudioComponent* ReturnValue);
	void SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void SpawnObject(class UClass* ObjectClass, class UObject* Outer, class UObject* ReturnValue);
	void SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy, class UForceFeedbackComponent* ReturnValue);
	void SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy, class UForceFeedbackComponent* ReturnValue);
	void SpawnEmitterAttachedNew(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bDontSpawnOutOfView, bool bAllowSpawnLoopingFX, class UParticleSystemComponent* ReturnValue);
	void SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bAutoDestroy, bool bDontSpawnOutOfView, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive, class UParticleSystemComponent* ReturnValue);
	void SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem, bool bDontSpawnOutOfView, float DontSpawnOutOfViewCheckRadius, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive, class AActor* ParticleSpaceBaseInstigator, class UParticleSystemComponent* ReturnValue);
	void SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, float LifeSpan, class UDecalComponent* ReturnValue);
	void SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan, class UDecalComponent* ReturnValue);
	void SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void SetViewportMouseCaptureMode(class UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode);
	void SetSubtitlesEnabled(bool bEnabled);
	void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);
	void SetPlayerPlatformUserId(class APlayerController* PlayerController, const struct FPlatformUserId& UserId);
	void SetPlayerControllerID(class APlayerController* Player, int32 ControllerId);
	void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);
	void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	void SetGamePaused(class UObject* WorldContextObject, bool bPaused, bool ReturnValue);
	void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);
	void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);
	void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	void SetActiveSpatialPluginByName(class UObject* WorldContextObject, class FName InPluginName, bool ReturnValue);
	void SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int32 UserIndex, bool ReturnValue);
	void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	void RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector& ReturnValue);
	void RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector& ReturnValue);
	void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, const struct FVector2D& ScreenPosition, bool bPlayerViewportRelative, bool ReturnValue);
	void PrimeSound(class USoundBase* InSound);
	void PrimeAllSoundsInSoundClass(class USoundClass* InSoundClass);
	void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScaleMultiplier);
	void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, class UInitialActiveSoundParams* InitialParams, bool bAlwaysPlay);
	void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound);
	void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	void ParseOption(const class FString& Options, const class FString& Key, const class FString& ReturnValue);
	void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, bool bAbsolute, const class FString& Options);
	void OpenLevel(class UObject* WorldContextObject, class FName LevelName, bool bAbsolute, const class FString& Options);
	void ObjectIsA(class UObject* Object, class UClass* ObjectClass, bool ReturnValue);
	void MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, class FName HitBoneName, class FName BoneName, int32 HitItem, int32 ElementIndex, int32 FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FHitResult& ReturnValue);
	void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	void LoadStreamLevel(class UObject* WorldContextObject, class FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	void LoadGameFromSlot(const class FString& SlotName, int32 UserIndex, class USaveGame* ReturnValue);
	void IsSplitscreenForceDisabled(class UObject* WorldContextObject, bool ReturnValue);
	void IsGamePaused(class UObject* WorldContextObject, bool ReturnValue);
	void HasOption(const class FString& Options, const class FString& InKey, bool ReturnValue);
	void HasLaunchOption(const class FString& OptionToCheck, bool ReturnValue);
	void GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius, int32 ReturnValue);
	void GetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& ReturnValue);
	void GetWorldDeltaSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetWorldDeltaRealTimeSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, const struct FMatrix& ViewMatrix, const struct FMatrix& ProjectionMatrix, const struct FMatrix& ViewProjectionMatrix);
	void GetViewportMouseCaptureMode(class UObject* WorldContextObject, enum class EMouseCaptureMode ReturnValue);
	void GetUnpausedTimeSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetTimeSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetSurfaceType(const struct FHitResult& Hit, enum class EPhysicalSurface ReturnValue);
	void GetStreamingLevel(class UObject* WorldContextObject, class FName PackageName, class ULevelStreaming* ReturnValue);
	void GetRealTimeSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetPlayerStateFromUniqueNetId(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueID, class APlayerState* ReturnValue);
	void GetPlayerState(class UObject* WorldContextObject, int32 PlayerStateIndex, class APlayerState* ReturnValue);
	void GetPlayerPawn(class UObject* WorldContextObject, int32 PlayerIndex, class APawn* ReturnValue);
	void GetPlayerControllerID(class APlayerController* Player, int32 ReturnValue);
	void GetPlayerControllerFromPlatformUser(class UObject* WorldContextObject, const struct FPlatformUserId& UserId, class APlayerController* ReturnValue);
	void GetPlayerControllerFromID(class UObject* WorldContextObject, int32 ControllerId, class APlayerController* ReturnValue);
	void GetPlayerController(class UObject* WorldContextObject, int32 PlayerIndex, class APlayerController* ReturnValue);
	void GetPlayerCharacter(class UObject* WorldContextObject, int32 PlayerIndex, class ACharacter* ReturnValue);
	void GetPlayerCameraManager(class UObject* WorldContextObject, int32 PlayerIndex, class APlayerCameraManager* ReturnValue);
	void GetPlatformName(const class FString& ReturnValue);
	void GetObjectClass(class UObject* Object, class UClass* ReturnValue);
	void GetNumPlayerStates(class UObject* WorldContextObject, int32 ReturnValue);
	void GetNumPlayerControllers(class UObject* WorldContextObject, int32 ReturnValue);
	void GetNumLocalPlayerControllers(class UObject* WorldContextObject, int32 ReturnValue);
	void GetMaxAudioChannelCount(class UObject* WorldContextObject, int32 ReturnValue);
	void GetKeyValue(const class FString& Pair, const class FString& Key, const class FString& Value);
	void GetIntOption(const class FString& Options, const class FString& Key, int32 DefaultValue, int32 ReturnValue);
	void GetGlobalTimeDilation(class UObject* WorldContextObject, float ReturnValue);
	void GetGameState(class UObject* WorldContextObject, class AGameStateBase* ReturnValue);
	void GetGameMode(class UObject* WorldContextObject, class AGameModeBase* ReturnValue);
	void GetGameInstance(class UObject* WorldContextObject, class UGameInstance* ReturnValue);
	void GetEnableWorldRendering(class UObject* WorldContextObject, bool ReturnValue);
	void GetCurrentReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReturnValue);
	void GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString, const class FString& ReturnValue);
	void GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, const struct FVector& ListenerPosition, bool ReturnValue);
	void GetAvailableSpatialPluginNames(class UObject* WorldContextObject, const TArray<class FName>& ReturnValue);
	void GetAudioTimeSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetAllActorsWithTag(class UObject* WorldContextObject, class FName Tag, const TArray<class AActor*>& OutActors);
	void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, const TArray<class AActor*>& OutActors);
	void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, class FName Tag, const TArray<class AActor*>& OutActors);
	void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, const TArray<class AActor*>& OutActors);
	void GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass, class AActor* ReturnValue);
	void GetActorArrayBounds(const TArray<class AActor*>& Actors, bool bOnlyCollidingComponents, const struct FVector& Center, const struct FVector& BoxExtent);
	void GetActorArrayAverageLocation(const TArray<class AActor*>& Actors, const struct FVector& ReturnValue);
	void GetActiveSpatialPluginName(class UObject* WorldContextObject, class FName ReturnValue);
	void GetAccurateRealTime(int32 Seconds, double PartialSeconds);
	void FlushLevelStreaming(class UObject* WorldContextObject);
	void FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform, enum class ESpawnActorScaleMethod TransformScaleMethod, class AActor* ReturnValue);
	void FindNearestActor(const struct FVector& Origin, const TArray<class AActor*>& ActorsToCheck, float Distance, class AActor* ReturnValue);
	void FindCollisionUV(const struct FHitResult& Hit, int32 UVChannel, const struct FVector2D& UV, bool ReturnValue);
	void EnableLiveStreaming(bool Enable);
	void DoesSaveGameExist(const class FString& SlotName, int32 UserIndex, bool ReturnValue);
	void DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, const struct FVector& WorldPosition, const struct FVector& WorldDirection, bool ReturnValue);
	void DeprojectSceneCaptureToWorld(class ASceneCapture2D* SceneCapture2D, const struct FVector2D& TargetUV, const struct FVector& WorldPosition, const struct FVector& WorldDirection, bool ReturnValue);
	void DeleteGameInSlot(const class FString& SlotName, int32 UserIndex, bool ReturnValue);
	void DeactivateReverbEffect(class UObject* WorldContextObject, class FName TagName);
	void CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, class UAudioComponent* ReturnValue);
	void CreateSaveGameObject(class UClass* SaveGameClass, class USaveGame* ReturnValue);
	void CreatePlayerFromPlatformUser(class UObject* WorldContextObject, const struct FPlatformUserId& UserId, bool bSpawnPlayerController, class APlayerController* ReturnValue);
	void CreatePlayer(class UObject* WorldContextObject, int32 ControllerId, bool bSpawnPlayerController, class APlayerController* ReturnValue);
	void ClearSoundMixModifiers(class UObject* WorldContextObject);
	void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	void CancelAsyncLoading();
	void BreakHitResult(const struct FHitResult& Hit, bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, class FName HitBoneName, class FName BoneName, int32 HitItem, int32 ElementIndex, int32 FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void BPPointPlaneProject(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm, const struct FVector& ReturnValue);
	void BPPointPlaneDist(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm, float ReturnValue);
	void BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, bool ReturnValue);
	void Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, const struct FHitResult& OutHit, const TArray<struct FVector>& OutPathPositions, const struct FVector& OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, bool ReturnValue);
	void Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, const struct FHitResult& OutHit, const TArray<struct FVector>& OutPathPositions, const struct FVector& OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, bool ReturnValue);
	void Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, const struct FPredictProjectilePathResult& PredictResult, bool ReturnValue);
	void BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* ReturnValue);
	void BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, enum class ESpawnActorScaleMethod TransformScaleMethod, class AActor* ReturnValue);
	void AreSubtitlesEnabled(bool ReturnValue);
	void AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool ReturnValue);
	void ApplyRadialDamageIgnoreDamageActors(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, const TArray<class AActor*>& IgnoreActors, const TArray<class AActor*>& IgnoreDamageActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel, float Impulse, float Falloff, bool ReturnValue);
	void ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel, float Impulse, bool ReturnValue);
	void ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse, bool bForceCollisionCheck, enum class ECollisionChannel ForceCollisionCheckTraceChannel, float OriginalDamageOverride, float ReturnValue);
	void ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse, float ReturnValue);
	void AnnounceAccessibleString(const class FString& AnnouncementString);
	void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, class FName TagName, float Priority, float Volume, float FadeTime);
};

// 0x60 (0x88 - 0x28)
// Class Engine.HLODProxy
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                ProxyMeshes;                                       // 0x28(0x10)(ZeroConstructor)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                        // 0x38(0x50)(None)

	static class UClass* StaticClass();
	static class UHLODProxy* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class Engine.HLODEngineSubsystem
class UHLODEngineSubsystem : public UEngineSubsystem
{
public:

	static class UClass* StaticClass();
	static class UHLODEngineSubsystem* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODProxyDesc
class UHLODProxyDesc : public UObject
{
public:

	static class UClass* StaticClass();
	static class UHLODProxyDesc* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ImportantToggleSettingInterface
class IImportantToggleSettingInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IImportantToggleSettingInterface* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.InheritableComponentHandler
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>      Records;                                           // 0x28(0x10)(ZeroConstructor)
	TArray<class UActorComponent*>               UnnecessaryComponents;                             // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UInheritableComponentHandler* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputActionDelegateBinding
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                       // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInputActionDelegateBinding* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisDelegateBinding
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;                         // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInputAxisDelegateBinding* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisKeyDelegateBinding
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                      // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInputAxisKeyDelegateBinding* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InputDeviceLibrary
class UInputDeviceLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UInputDeviceLibrary* GetDefaultObj();

	void PlatformUserId_None(const struct FPlatformUserId& ReturnValue);
	void NotEqual_PlatformUserId(const struct FPlatformUserId& A, const struct FPlatformUserId& B, bool ReturnValue);
	void NotEqual_InputDeviceId(const struct FInputDeviceId& A, const struct FInputDeviceId& B, bool ReturnValue);
	void IsValidPlatformId(const struct FPlatformUserId& UserId, bool ReturnValue);
	void IsValidInputDevice(const struct FInputDeviceId& DeviceID, bool ReturnValue);
	void IsUnpairedUserId(const struct FPlatformUserId& PlatformId, bool ReturnValue);
	void IsInputDeviceMappedToUnpairedUser(const struct FInputDeviceId& InputDevice, bool ReturnValue);
	void IsDevicePropertyHandleValid(const struct FInputDevicePropertyHandle& InHandle, bool ReturnValue);
	void InputDeviceId_None(const struct FInputDeviceId& ReturnValue);
	void GetUserForUnpairedInputDevices(const struct FPlatformUserId& ReturnValue);
	void GetUserForInputDevice(const struct FInputDeviceId& DeviceID, const struct FPlatformUserId& ReturnValue);
	void GetPrimaryPlatformUser(const struct FPlatformUserId& ReturnValue);
	void GetPrimaryInputDeviceForUser(const struct FPlatformUserId& UserId, const struct FInputDeviceId& ReturnValue);
	void GetPlayerControllerFromPlatformUser(const struct FPlatformUserId& UserId, class APlayerController* ReturnValue);
	void GetPlayerControllerFromInputDevice(const struct FInputDeviceId& DeviceID, class APlayerController* ReturnValue);
	void GetInputDeviceConnectionState(const struct FInputDeviceId& DeviceID, enum class EInputDeviceConnectionState ReturnValue);
	void GetDefaultInputDevice(const struct FInputDeviceId& ReturnValue);
	void GetAllInputDevicesForUser(const struct FPlatformUserId& UserId, const TArray<struct FInputDeviceId>& OutInputDevices, int32 ReturnValue);
	void GetAllInputDevices(const TArray<struct FInputDeviceId>& OutInputDevices, int32 ReturnValue);
	void GetAllConnectedInputDevices(const TArray<struct FInputDeviceId>& OutInputDevices, int32 ReturnValue);
	void GetAllActiveUsers(const TArray<struct FPlatformUserId>& OutUsers, int32 ReturnValue);
	void EqualEqual_PlatformUserId(const struct FPlatformUserId& A, const struct FPlatformUserId& B, bool ReturnValue);
	void EqualEqual_InputDeviceId(const struct FInputDeviceId& A, const struct FInputDeviceId& B, bool ReturnValue);
};

// 0x10 (0x38 - 0x28)
// Class Engine.InputKeyDelegateBinding
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;                          // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInputKeyDelegateBinding* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputTouchDelegateBinding
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                        // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UInputTouchDelegateBinding* GetDefaultObj();

};

// 0x0 (0x38 - 0x38)
// Class Engine.InputVectorAxisDelegateBinding
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static class UClass* StaticClass();
	static class UInputVectorAxisDelegateBinding* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.InstancedPlacemenClientSettings
class UInstancedPlacemenClientSettings : public UObject
{
public:

	static class UClass* StaticClass();
	static class UInstancedPlacemenClientSettings* GetDefaultObj();

};

// 0x0 (0x4C8 - 0x4C8)
// Class Engine.InstancedPlacementPartitionActor
class AInstancedPlacementPartitionActor : public AISMPartitionActor
{
public:

	static class UClass* StaticClass();
	static class AInstancedPlacementPartitionActor* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.StringTable
class UStringTable : public UObject
{
public:
	uint8                                        Pad_2D21[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStringTable* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpCurveEdSetup
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                   Tabs;                                              // 0x28(0x10)(None)
	int32                                        ActiveTab;                                         // 0x38(0x4)(None)
	uint8                                        Pad_2D22[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInterpCurveEdSetup* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class Engine.IntSerialization
class UIntSerialization : public UObject
{
public:
	uint16                                       UnsignedInt16Variable;                             // 0x28(0x2)(None)
	uint8                                        Pad_2D23[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UnsignedInt32Variable;                             // 0x2C(0x4)(None)
	uint64                                       UnsignedInt64Variable;                             // 0x30(0x8)(None)
	int8                                         SignedInt8Variable;                                // 0x38(0x1)(None)
	uint8                                        Pad_2D24[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int16                                        SignedInt16Variable;                               // 0x3A(0x2)(None)
	uint8                                        Pad_2D25[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int64                                        SignedInt64Variable;                               // 0x40(0x8)(None)
	uint8                                        UnsignedInt8Variable;                              // 0x48(0x1)(None)
	uint8                                        Pad_2D26[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SignedInt32Variable;                               // 0x4C(0x4)(None)

	static class UClass* StaticClass();
	static class UIntSerialization* GetDefaultObj();

};

// 0x0 (0x528 - 0x528)
// Class Engine.KillZVolume
class AKillZVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass();
	static class AKillZVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetArrayLibrary
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetArrayLibrary* GetDefaultObj();

	void SetArrayPropertyByName(class UObject* Object, class FName PropertyName, const TArray<int32>& Value);
	void FilterArray(const TArray<class AActor*>& TargetArray, class UClass* FilterClass, const TArray<class AActor*>& FilteredArray);
	void Array_Swap(const TArray<int32>& TargetArray, int32 FirstIndex, int32 SecondIndex);
	void Array_Shuffle(const TArray<int32>& TargetArray);
	void Array_Set(const TArray<int32>& TargetArray, int32 Index, int32 Item, bool bSizeToFit);
	void Array_Reverse(const TArray<int32>& TargetArray);
	void Array_Resize(const TArray<int32>& TargetArray, int32 Size);
	void Array_RemoveItem(const TArray<int32>& TargetArray, int32 Item, bool ReturnValue);
	void Array_Remove(const TArray<int32>& TargetArray, int32 IndexToRemove);
	void Array_RandomFromStream(const TArray<int32>& TargetArray, const struct FRandomStream& RandomStream, int32 OutItem, int32 OutIndex);
	void Array_Random(const TArray<int32>& TargetArray, int32 OutItem, int32 OutIndex);
	void Array_Length(const TArray<int32>& TargetArray, int32 ReturnValue);
	void Array_LastIndex(const TArray<int32>& TargetArray, int32 ReturnValue);
	void Array_IsValidIndex(const TArray<int32>& TargetArray, int32 IndexToTest, bool ReturnValue);
	void Array_IsNotEmpty(const TArray<int32>& TargetArray, bool ReturnValue);
	void Array_IsEmpty(const TArray<int32>& TargetArray, bool ReturnValue);
	void Array_Insert(const TArray<int32>& TargetArray, int32 NewItem, int32 Index);
	void Array_Identical(const TArray<int32>& ArrayA, const TArray<int32>& ArrayB, bool ReturnValue);
	void Array_Get(const TArray<int32>& TargetArray, int32 Index, int32 Item);
	void Array_Find(const TArray<int32>& TargetArray, int32 ItemToFind, int32 ReturnValue);
	void Array_Contains(const TArray<int32>& TargetArray, int32 ItemToFind, bool ReturnValue);
	void Array_Clear(const TArray<int32>& TargetArray);
	void Array_Append(const TArray<int32>& TargetArray, const TArray<int32>& SourceArray);
	void Array_AddUnique(const TArray<int32>& TargetArray, int32 NewItem, int32 ReturnValue);
	void Array_Add(const TArray<int32>& TargetArray, int32 NewItem, int32 ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetGuidLibrary
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetGuidLibrary* GetDefaultObj();

	void Parse_StringToGuid(const class FString& GuidString, const struct FGuid& OutGuid, bool Success);
	void NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B, bool ReturnValue);
	void NewGuid(const struct FGuid& ReturnValue);
	void IsValid_Guid(const struct FGuid& InGuid, bool ReturnValue);
	void Invalidate_Guid(const struct FGuid& InGuid);
	void EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B, bool ReturnValue);
	void Conv_GuidToString(const struct FGuid& InGuid, const class FString& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetInputLibrary
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetInputLibrary* GetDefaultObj();

	void PointerEvent_IsTouchEvent(const struct FPointerEvent& Input, bool ReturnValue);
	void PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton, bool ReturnValue);
	void PointerEvent_GetWheelDelta(const struct FPointerEvent& Input, float ReturnValue);
	void PointerEvent_GetUserIndex(const struct FPointerEvent& Input, int32 ReturnValue);
	void PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input, int32 ReturnValue);
	void PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input, const struct FVector2D& ReturnValue);
	void PointerEvent_GetPointerIndex(const struct FPointerEvent& Input, int32 ReturnValue);
	void PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input, const struct FVector2D& ReturnValue);
	void PointerEvent_GetGestureType(const struct FPointerEvent& Input, enum class ESlateGesture ReturnValue);
	void PointerEvent_GetGestureDelta(const struct FPointerEvent& Input, const struct FVector2D& ReturnValue);
	void PointerEvent_GetEffectingButton(const struct FPointerEvent& Input, const struct FKey& ReturnValue);
	void PointerEvent_GetCursorDelta(const struct FPointerEvent& Input, const struct FVector2D& ReturnValue);
	void ModifierKeysState_IsShiftDown(const struct FSlateModifierKeysState& KeysState, bool ReturnValue);
	void ModifierKeysState_IsControlDown(const struct FSlateModifierKeysState& KeysState, bool ReturnValue);
	void ModifierKeysState_IsCommandDown(const struct FSlateModifierKeysState& KeysState, bool ReturnValue);
	void ModifierKeysState_IsAltDown(const struct FSlateModifierKeysState& KeysState, bool ReturnValue);
	void Key_IsVectorAxis(const struct FKey& Key, bool ReturnValue);
	void Key_IsValid(const struct FKey& Key, bool ReturnValue);
	void Key_IsMouseButton(const struct FKey& Key, bool ReturnValue);
	void Key_IsModifierKey(const struct FKey& Key, bool ReturnValue);
	void Key_IsKeyboardKey(const struct FKey& Key, bool ReturnValue);
	void Key_IsGamepadKey(const struct FKey& Key, bool ReturnValue);
	void Key_IsDigital(const struct FKey& Key, bool ReturnValue);
	void Key_IsButtonAxis(const struct FKey& Key, bool ReturnValue);
	void Key_IsAxis3D(const struct FKey& Key, bool ReturnValue);
	void Key_IsAxis2D(const struct FKey& Key, bool ReturnValue);
	void Key_IsAxis1D(const struct FKey& Key, bool ReturnValue);
	void Key_IsAnalog(const struct FKey& Key, bool ReturnValue);
	void Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent, enum class EUINavigation ReturnValue);
	void Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent, enum class EUINavigation ReturnValue);
	void Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent, enum class EUINavigationAction ReturnValue);
	void Key_GetNavigationAction(const struct FKey& InKey, enum class EUINavigationAction ReturnValue);
	void Key_GetDisplayName(const struct FKey& Key, bool bLongDisplayName, class FText ReturnValue);
	void InputEvent_IsShiftDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsRightShiftDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsRightControlDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsRightCommandDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsRightAltDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsRepeat(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsLeftShiftDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsLeftControlDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsLeftCommandDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsLeftAltDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsControlDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsCommandDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputEvent_IsAltDown(const struct FInputEvent& Input, bool ReturnValue);
	void InputChord_GetDisplayName(const struct FInputChord& Key, class FText ReturnValue);
	void GetUserIndex(const struct FKeyEvent& Input, int32 ReturnValue);
	void GetModifierKeysState(const struct FSlateModifierKeysState& ReturnValue);
	void GetKey(const struct FKeyEvent& Input, const struct FKey& ReturnValue);
	void GetAnalogValue(const struct FAnalogInputEvent& Input, float ReturnValue);
	void EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B, bool ReturnValue);
	void EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B, bool ReturnValue);
	void CalibrateTilt();
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetInternationalizationLibrary
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetInternationalizationLibrary* GetDefaultObj();

	void SetCurrentLocale(const class FString& Culture, bool SaveToConfig, bool ReturnValue);
	void SetCurrentLanguageAndLocale(const class FString& Culture, bool SaveToConfig, bool ReturnValue);
	void SetCurrentLanguage(const class FString& Culture, bool SaveToConfig, bool ReturnValue);
	void SetCurrentCulture(const class FString& Culture, bool SaveToConfig, bool ReturnValue);
	void SetCurrentAssetGroupCulture(class FName AssetGroup, const class FString& Culture, bool SaveToConfig, bool ReturnValue);
	void GetSuitableCulture(const TArray<class FString>& AvailableCultures, const class FString& CultureToMatch, const class FString& FallbackCulture, const class FString& ReturnValue);
	void GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory, const class FString& ReturnValue);
	void GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional, const TArray<class FString>& ReturnValue);
	void GetCurrentLocale(const class FString& ReturnValue);
	void GetCurrentLanguage(const class FString& ReturnValue);
	void GetCurrentCulture(const class FString& ReturnValue);
	void GetCurrentAssetGroupCulture(class FName AssetGroup, const class FString& ReturnValue);
	void GetCultureDisplayName(const class FString& Culture, bool Localized, const class FString& ReturnValue);
	void ClearCurrentAssetGroupCulture(class FName AssetGroup, bool SaveToConfig);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMaterialLibrary
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetMaterialLibrary* GetDefaultObj();

	void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FLinearColor& ParameterValue);
	void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, float ParameterValue);
	void ResetMaterialParameterCollectionInstance(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection);
	void GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, const struct FLinearColor& ReturnValue);
	void GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, float ReturnValue);
	void CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, class FName OptionalName, enum class EMIDCreationFlags CreationFlags, class UMaterialInstanceDynamic* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMathLibrary
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetMathLibrary* GetDefaultObj();

	void Xor_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Xor_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void WrapAngle(float Degrees, float ReturnValue);
	void Wrap(int32 Value, int32 Min, int32 Max, int32 ReturnValue);
	void WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight, const struct FVector& ReturnValue);
	void WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight, const struct FRotator& ReturnValue);
	void WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight, float ReturnValue);
	void VSizeXYSquared(const struct FVector& A, double ReturnValue);
	void VSizeXY(const struct FVector& A, double ReturnValue);
	void VSizeSquared2D(const struct FVector2D& A, float ReturnValue);
	void VSizeSquared(const struct FVector& A, double ReturnValue);
	void VSize2DSquared(const struct FVector2D& A, double ReturnValue);
	void VSize2D(const struct FVector2D& A, double ReturnValue);
	void VSize(const struct FVector& A, double ReturnValue);
	void VLerp(const struct FVector& A, const struct FVector& B, float Alpha, const struct FVector& ReturnValue);
	void VInterpTo_SnapWithinDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist, const struct FVector& ReturnValue);
	void VInterpTo_SnapPastDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist, const struct FVector& ReturnValue);
	void VInterpTo_Constant_SnapWithinDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist, const struct FVector& ReturnValue);
	void VInterpTo_Constant_SnapPastDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist, const struct FVector& ReturnValue);
	void VInterpTo_Constant_ClampDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist, const struct FVector& ReturnValue);
	void VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, const struct FVector& ReturnValue);
	void VInterpTo_ClampDist(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist, const struct FVector& ReturnValue);
	void VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed, const struct FVector& ReturnValue);
	void VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, const struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, const struct FVector& MinValue, const struct FVector& MaxValue, bool bInitializeFromTarget, const struct FVector& ReturnValue);
	void Vector_Zero(const struct FVector& ReturnValue);
	void Vector_Up(const struct FVector& ReturnValue);
	void Vector_UnwindEuler(const struct FVector& A);
	void Vector_UnitCartesianToSpherical(const struct FVector& A, const struct FVector2D& ReturnValue);
	void Vector_ToRadians(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_ToDegrees(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize, const struct FVector& ReturnValue);
	void Vector_SlerpVectorToDirection(const struct FVector& Vector, const struct FVector& Direction, double Alpha, const struct FVector& ReturnValue);
	void Vector_SlerpNormals(const struct FVector& NormalA, const struct FVector& NormalB, double Alpha, const struct FVector& ReturnValue);
	void Vector_Set(const struct FVector& A, double X, double Y, double Z);
	void Vector_Right(const struct FVector& ReturnValue);
	void Vector_Reciprocal(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal, const struct FVector& ReturnValue);
	void Vector_One(const struct FVector& ReturnValue);
	void Vector_NormalUnsafe(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_Normalize(const struct FVector& A, float Tolerance);
	void Vector_Normal2D(const struct FVector& A, float Tolerance, const struct FVector& ReturnValue);
	void Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane, const struct FVector& ReturnValue);
	void Vector_Left(const struct FVector& ReturnValue);
	void Vector_IsZero(const struct FVector& A, bool ReturnValue);
	void Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance, bool ReturnValue);
	void Vector_IsUniform(const struct FVector& A, float Tolerance, bool ReturnValue);
	void Vector_IsNormal(const struct FVector& A, bool ReturnValue);
	void Vector_IsNearlyZero(const struct FVector& A, float Tolerance, bool ReturnValue);
	void Vector_IsNAN(const struct FVector& A, bool ReturnValue);
	void Vector_HeadingAngle(const struct FVector& A, double ReturnValue);
	void Vector_GetSignVector(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_GetProjection(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_GetAbsMin(const struct FVector& A, double ReturnValue);
	void Vector_GetAbsMax(const struct FVector& A, double ReturnValue);
	void Vector_GetAbs(const struct FVector& A, const struct FVector& ReturnValue);
	void Vector_Forward(const struct FVector& ReturnValue);
	void Vector_Down(const struct FVector& ReturnValue);
	void Vector_DistanceSquared(const struct FVector& V1, const struct FVector& V2, double ReturnValue);
	void Vector_Distance2DSquared(const struct FVector& V1, const struct FVector& V2, double ReturnValue);
	void Vector_Distance2D(const struct FVector& V1, const struct FVector& V2, double ReturnValue);
	void Vector_Distance(const struct FVector& V1, const struct FVector& V2, double ReturnValue);
	void Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B, double ReturnValue);
	void Vector_ComponentMin(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Vector_ComponentMax(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Vector_ClampSizeMax2D(const struct FVector& A, double Max, const struct FVector& ReturnValue);
	void Vector_ClampSizeMax(const struct FVector& A, double Max, const struct FVector& ReturnValue);
	void Vector_ClampSize2D(const struct FVector& A, double Min, double Max, const struct FVector& ReturnValue);
	void Vector_BoundedToCube(const struct FVector& InVect, float InRadius, const struct FVector& ReturnValue);
	void Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax, const struct FVector& ReturnValue);
	void Vector_Backward(const struct FVector& ReturnValue);
	void Vector_Assign(const struct FVector& A, const struct FVector& InVector);
	void Vector_AddBounded(const struct FVector& A, const struct FVector& InAddVect, float InRadius);
	void Vector4_Zero(const struct FVector4& ReturnValue);
	void Vector4_SizeSquared3(const struct FVector4& A, double ReturnValue);
	void Vector4_SizeSquared(const struct FVector4& A, double ReturnValue);
	void Vector4_Size3(const struct FVector4& A, double ReturnValue);
	void Vector4_Size(const struct FVector4& A, double ReturnValue);
	void Vector4_Set(const struct FVector4& A, double X, double Y, double Z, double W);
	void Vector4_NormalUnsafe3(const struct FVector4& A, const struct FVector4& ReturnValue);
	void Vector4_Normalize3(const struct FVector4& A, float Tolerance);
	void Vector4_Normal3(const struct FVector4& A, float Tolerance, const struct FVector4& ReturnValue);
	void Vector4_Negated(const struct FVector4& A, const struct FVector4& ReturnValue);
	void Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal, const struct FVector4& ReturnValue);
	void Vector4_IsZero(const struct FVector4& A, bool ReturnValue);
	void Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance, bool ReturnValue);
	void Vector4_IsNormal3(const struct FVector4& A, bool ReturnValue);
	void Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance, bool ReturnValue);
	void Vector4_IsNAN(const struct FVector4& A, bool ReturnValue);
	void Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B, double ReturnValue);
	void Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B, double ReturnValue);
	void Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B, const struct FVector4& ReturnValue);
	void Vector4_Assign(const struct FVector4& A, const struct FVector4& InVector);
	void Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed, const struct FVector2D& ReturnValue);
	void Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed, const struct FVector2D& ReturnValue);
	void Vector2D_Zero(const struct FVector2D& ReturnValue);
	void Vector2D_Unit45Deg(const struct FVector2D& ReturnValue);
	void Vector2D_One(const struct FVector2D& ReturnValue);
	void VEase(const struct FVector& A, const struct FVector& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps, const struct FVector& ReturnValue);
	void UtcNow(const struct FDateTime& ReturnValue);
	void TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4, const struct FVector4& ReturnValue);
	void TransformRotation(const struct FTransform& T, const struct FRotator& Rotation, const struct FRotator& ReturnValue);
	void TransformLocation(const struct FTransform& T, const struct FVector& Location, const struct FVector& ReturnValue);
	void TransformDirection(const struct FTransform& T, const struct FVector& Direction, const struct FVector& ReturnValue);
	void Transform_Determinant(const struct FTransform& Transform, float ReturnValue);
	void ToSign2D(const struct FVector2D& A, const struct FVector2D& ReturnValue);
	void ToRounded2D(const struct FVector2D& A, const struct FVector2D& ReturnValue);
	void ToDirectionAndLength2D(const struct FVector2D& A, const struct FVector2D& OutDir, double OutLength);
	void Today(const struct FDateTime& ReturnValue);
	void TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode, const struct FTransform& ReturnValue);
	void TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed, const struct FTransform& ReturnValue);
	void TimespanZeroValue(const struct FTimespan& ReturnValue);
	void TimespanRatio(const struct FTimespan& A, const struct FTimespan& B, float ReturnValue);
	void TimespanMinValue(const struct FTimespan& ReturnValue);
	void TimespanMaxValue(const struct FTimespan& ReturnValue);
	void TimespanFromString(const class FString& TimespanString, const struct FTimespan& Result, bool ReturnValue);
	void TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps, const struct FTransform& ReturnValue);
	void Tan(double A, double ReturnValue);
	void Subtract_VectorVector(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Subtract_VectorInt(const struct FVector& A, int32 B, const struct FVector& ReturnValue);
	void Subtract_VectorFloat(const struct FVector& A, double B, const struct FVector& ReturnValue);
	void Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, const struct FVector4& ReturnValue);
	void Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& ReturnValue);
	void Subtract_Vector2DFloat(const struct FVector2D& A, double B, const struct FVector2D& ReturnValue);
	void Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, const struct FTimespan& ReturnValue);
	void Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B, const struct FQuat& ReturnValue);
	void Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, const struct FLinearColor& ReturnValue);
	void Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, const struct FIntPoint& ReturnValue);
	void Subtract_IntPointInt(const struct FIntPoint& A, int32 B, const struct FIntPoint& ReturnValue);
	void Subtract_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Subtract_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Subtract_DoubleFloat(double A, float B, double ReturnValue);
	void Subtract_DoubleDouble(double A, double B, double ReturnValue);
	void Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B, const struct FDateTime& ReturnValue);
	void Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, const struct FTimespan& ReturnValue);
	void Subtract_ByteByte(uint8 A, uint8 B, uint8 ReturnValue);
	void Square(double A, double ReturnValue);
	void Sqrt(double A, double ReturnValue);
	void Spherical2DToUnitCartesian(const struct FVector2D& A, const struct FVector& ReturnValue);
	void Sin(double A, double ReturnValue);
	void SignOfInteger64(int64 A, int64 ReturnValue);
	void SignOfInteger(int32 A, int32 ReturnValue);
	void SignOfFloat(double A, double ReturnValue);
	void SetVectorSpringStateVelocity(const struct FVectorSpringState& SpringState, const struct FVector& Velocity);
	void SetRandomStreamSeed(const struct FRandomStream& Stream, int32 NewSeed);
	void SetQuaternionSpringStateAngularVelocity(const struct FQuaternionSpringState& SpringState, const struct FVector& AngularVelocity);
	void SetFloatSpringStateVelocity(const struct FFloatSpringState& SpringState, float Velocity);
	void Set2D(const struct FVector2D& A, double X, double Y);
	void SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA, const struct FVector& ReturnValue);
	void SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA, const struct FTransform& ReturnValue);
	void SelectString(const class FString& A, const class FString& B, bool bPickA, const class FString& ReturnValue);
	void SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA, const struct FRotator& ReturnValue);
	void SelectObject(class UObject* A, class UObject* B, bool bSelectA, class UObject* ReturnValue);
	void SelectInt(int32 A, int32 B, bool bPickA, int32 ReturnValue);
	void SelectFloat(double A, double B, bool bPickA, double ReturnValue);
	void SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA, const struct FLinearColor& ReturnValue);
	void SelectClass(class UClass* A, class UClass* B, bool bSelectA, class UClass* ReturnValue);
	void SeedRandomStream(const struct FRandomStream& Stream);
	void SafeDivide(double A, double B, double ReturnValue);
	void Round64(double A, int64 ReturnValue);
	void Round(double A, int32 ReturnValue);
	void RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle, const struct FRotator& ReturnValue);
	void RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis, const struct FVector& ReturnValue);
	void RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, const struct FRotator& ReturnValue);
	void RInterpTo_PerAxis(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis, const struct FRotator& ReturnValue);
	void RInterpTo_Constant_PerAxis(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis, const struct FRotator& ReturnValue);
	void RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed, const struct FRotator& ReturnValue);
	void RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed, const struct FRotator& ReturnValue);
	void RGBToHSV_Vector(const struct FLinearColor& RGB, const struct FLinearColor& HSV);
	void RGBToHSV(const struct FLinearColor& InColor, float H, float S, float V, float A);
	void RGBLinearToHSV(const struct FLinearColor& RGB, const struct FLinearColor& ReturnValue);
	void ResetVectorSpringState(const struct FVectorSpringState& SpringState);
	void ResetRandomStream(const struct FRandomStream& Stream);
	void ResetQuaternionSpringState(const struct FQuaternionSpringState& SpringState);
	void ResetFloatSpringState(const struct FFloatSpringState& SpringState);
	void REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps, const struct FRotator& ReturnValue);
	void RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FVector& ReturnValue);
	void RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FVector& ReturnValue);
	void RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FVector& ReturnValue);
	void RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FVector& ReturnValue);
	void RandomUnitVectorInConeInRadiansFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FVector& ReturnValue);
	void RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FVector& ReturnValue);
	void RandomUnitVectorInConeInDegreesFromStream(const struct FRandomStream& Stream, const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FVector& ReturnValue);
	void RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FVector& ReturnValue);
	void RandomUnitVectorFromStream(const struct FRandomStream& Stream, const struct FVector& ReturnValue);
	void RandomUnitVector(const struct FVector& ReturnValue);
	void RandomRotatorFromStream(const struct FRandomStream& Stream, bool bRoll, const struct FRotator& ReturnValue);
	void RandomRotator(bool bRoll, const struct FRotator& ReturnValue);
	void RandomPointInBoundingBoxFromStream_Box(const struct FRandomStream& Stream, const struct FBox& Box, const struct FVector& ReturnValue);
	void RandomPointInBoundingBoxFromStream(const struct FRandomStream& Stream, const struct FVector& Center, const struct FVector& HalfSize, const struct FVector& ReturnValue);
	void RandomPointInBoundingBox_Box(const struct FBox& Box, const struct FVector& ReturnValue);
	void RandomPointInBoundingBox(const struct FVector& Center, const struct FVector& HalfSize, const struct FVector& ReturnValue);
	void RandomIntegerInRangeFromStream(const struct FRandomStream& Stream, int32 Min, int32 Max, int32 ReturnValue);
	void RandomIntegerInRange(int32 Min, int32 Max, int32 ReturnValue);
	void RandomIntegerFromStream(const struct FRandomStream& Stream, int32 Max, int32 ReturnValue);
	void RandomInteger64InRange(int64 Min, int64 Max, int64 ReturnValue);
	void RandomInteger64(int64 Max, int64 ReturnValue);
	void RandomInteger(int32 Max, int32 ReturnValue);
	void RandomFloatInRangeFromStream(const struct FRandomStream& Stream, float Min, float Max, float ReturnValue);
	void RandomFloatInRange(double Min, double Max, double ReturnValue);
	void RandomFloatFromStream(const struct FRandomStream& Stream, float ReturnValue);
	void RandomFloat(double ReturnValue);
	void RandomBoolWithWeightFromStream(const struct FRandomStream& RandomStream, float Weight, bool ReturnValue);
	void RandomBoolWithWeight(float Weight, bool ReturnValue);
	void RandomBoolFromStream(const struct FRandomStream& Stream, bool ReturnValue);
	void RandomBool(bool ReturnValue);
	void RadiansToDegrees(double A, double ReturnValue);
	void QuaternionSpringInterp(const struct FQuat& Current, const struct FQuat& Target, const struct FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget, const struct FQuat& ReturnValue);
	void Quat_VectorUp(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_VectorRight(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_VectorForward(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V, const struct FVector& ReturnValue);
	void Quat_Slerp(const struct FQuat& A, const struct FQuat& B, double Alpha, const struct FQuat& ReturnValue);
	void Quat_SizeSquared(const struct FQuat& Q, float ReturnValue);
	void Quat_Size(const struct FQuat& Q, float ReturnValue);
	void Quat_SetFromEuler(const struct FQuat& Q, const struct FVector& Euler);
	void Quat_SetComponents(const struct FQuat& Q, float X, float Y, float Z, float W);
	void Quat_Rotator(const struct FQuat& Q, const struct FRotator& ReturnValue);
	void Quat_RotateVector(const struct FQuat& Q, const struct FVector& V, const struct FVector& ReturnValue);
	void Quat_Normalized(const struct FQuat& Q, float Tolerance, const struct FQuat& ReturnValue);
	void Quat_Normalize(const struct FQuat& Q, float Tolerance);
	void Quat_MakeFromEuler(const struct FVector& Euler, const struct FQuat& ReturnValue);
	void Quat_Log(const struct FQuat& Q, const struct FQuat& ReturnValue);
	void Quat_IsNormalized(const struct FQuat& Q, bool ReturnValue);
	void Quat_IsNonFinite(const struct FQuat& Q, bool ReturnValue);
	void Quat_IsIdentity(const struct FQuat& Q, float Tolerance, bool ReturnValue);
	void Quat_IsFinite(const struct FQuat& Q, bool ReturnValue);
	void Quat_Inversed(const struct FQuat& Q, const struct FQuat& ReturnValue);
	void Quat_Identity(const struct FQuat& ReturnValue);
	void Quat_GetRotationAxis(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_GetAxisZ(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_GetAxisY(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_GetAxisX(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_GetAngle(const struct FQuat& Q, float ReturnValue);
	void Quat_FindBetweenVectors(const struct FVector& Start, const struct FVector& End, const struct FQuat& ReturnValue);
	void Quat_FindBetweenNormals(const struct FVector& StartNormal, const struct FVector& EndNormal, const struct FQuat& ReturnValue);
	void Quat_Exp(const struct FQuat& Q, const struct FQuat& ReturnValue);
	void Quat_Euler(const struct FQuat& Q, const struct FVector& ReturnValue);
	void Quat_EnforceShortestArcWith(const struct FQuat& A, const struct FQuat& B);
	void Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B, float ReturnValue);
	void QInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed, const struct FRotator& ReturnValue);
	void ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target, const struct FVector& ReturnValue);
	void ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal, const struct FVector& ReturnValue);
	void ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal, const struct FVector& ReturnValue);
	void PointsAreCoplanar(const TArray<struct FVector>& Points, float Tolerance, bool ReturnValue);
	void PerlinNoise1D(float Value, float ReturnValue);
	void Percent_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Percent_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Percent_FloatFloat(double A, double B, double ReturnValue);
	void Percent_DoubleDouble(double A, double B, double ReturnValue);
	void Percent_ByteByte(uint8 A, uint8 B, uint8 ReturnValue);
	void Or_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Or_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Now(const struct FDateTime& ReturnValue);
	void NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B, bool ReturnValue);
	void NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, bool ReturnValue);
	void NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, bool ReturnValue);
	void NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance, bool ReturnValue);
	void NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance, bool ReturnValue);
	void NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance, bool ReturnValue);
	void NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance, bool ReturnValue);
	void NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance, bool ReturnValue);
	void NotEqual_ObjectObject(class UObject* A, class UObject* B, bool ReturnValue);
	void NotEqual_NameName(class FName A, class FName B, bool ReturnValue);
	void NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance, bool ReturnValue);
	void NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, bool ReturnValue);
	void NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, bool ReturnValue);
	void NotEqual_IntInt(int32 A, int32 B, bool ReturnValue);
	void NotEqual_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void NotEqual_DoubleDouble(double A, double B, bool ReturnValue);
	void NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void NotEqual_ClassClass(class UClass* A, class UClass* B, bool ReturnValue);
	void NotEqual_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void NotEqual_BoolBool(bool A, bool B, bool ReturnValue);
	void Not_PreBool(bool A, bool ReturnValue);
	void Not_Int64(int64 A, int64 ReturnValue);
	void Not_Int(int32 A, int32 ReturnValue);
	void NormalSafe2D(const struct FVector2D& A, float Tolerance, const struct FVector2D& ReturnValue);
	void NormalizeToRange(double Value, double RangeMin, double RangeMax, double ReturnValue);
	void NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B, const struct FRotator& ReturnValue);
	void NormalizeAxis(float Angle, float ReturnValue);
	void Normalize2D(const struct FVector2D& A, float Tolerance);
	void Normal2D(const struct FVector2D& A, const struct FVector2D& ReturnValue);
	void Normal(const struct FVector& A, float Tolerance, const struct FVector& ReturnValue);
	void NegateVector(const struct FVector& A, const struct FVector& ReturnValue);
	void NegateRotator(const struct FRotator& A, const struct FRotator& ReturnValue);
	void Negated2D(const struct FVector2D& A, const struct FVector2D& ReturnValue);
	void NearlyEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance, bool ReturnValue);
	void NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance, bool ReturnValue);
	void NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance, bool ReturnValue);
	void NearlyEqual_DoubleDouble(double A, double B, float ErrorTolerance, bool ReturnValue);
	void MultiplyMultiply_IntInt(int32 Base, int32 Exp, int32 ReturnValue);
	void MultiplyMultiply_FloatFloat(double Base, double Exp, double ReturnValue);
	void MultiplyByPi(double Value, double ReturnValue);
	void Multiply_VectorVector(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Multiply_VectorInt(const struct FVector& A, int32 B, const struct FVector& ReturnValue);
	void Multiply_VectorFloat(const struct FVector& A, double B, const struct FVector& ReturnValue);
	void Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, const struct FVector4& ReturnValue);
	void Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& ReturnValue);
	void Multiply_Vector2DFloat(const struct FVector2D& A, double B, const struct FVector2D& ReturnValue);
	void Multiply_TimespanFloat(const struct FTimespan& A, float Scalar, const struct FTimespan& ReturnValue);
	void Multiply_RotatorInt(const struct FRotator& A, int32 B, const struct FRotator& ReturnValue);
	void Multiply_RotatorFloat(const struct FRotator& A, float B, const struct FRotator& ReturnValue);
	void Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B, const struct FQuat& ReturnValue);
	void Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, const struct FMatrix& ReturnValue);
	void Multiply_MatrixFloat(const struct FMatrix& A, double B, const struct FMatrix& ReturnValue);
	void Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, const struct FLinearColor& ReturnValue);
	void Multiply_LinearColorFloat(const struct FLinearColor& A, float B, const struct FLinearColor& ReturnValue);
	void Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, const struct FIntPoint& ReturnValue);
	void Multiply_IntPointInt(const struct FIntPoint& A, int32 B, const struct FIntPoint& ReturnValue);
	void Multiply_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Multiply_IntFloat(int32 A, double B, double ReturnValue);
	void Multiply_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Multiply_DoubleFloat(double A, float B, double ReturnValue);
	void Multiply_DoubleDouble(double A, double B, double ReturnValue);
	void Multiply_ByteByte(uint8 A, uint8 B, uint8 ReturnValue);
	void MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal, const struct FVector& ReturnValue);
	void MinOfIntArray(const TArray<int32>& IntArray, int32 IndexOfMinValue, int32 MinValue);
	void MinOfFloatArray(const TArray<float>& FloatArray, int32 IndexOfMinValue, float MinValue);
	void MinOfByteArray(const TArray<uint8>& ByteArray, int32 IndexOfMinValue, uint8 MinValue);
	void MinInt64(int64 A, int64 B, int64 ReturnValue);
	void MinimumAreaRectangle(class UObject* WorldContextObject, const TArray<struct FVector>& InVerts, const struct FVector& SampleSurfaceNormal, const struct FVector& OutRectCenter, const struct FRotator& OutRectRotation, float OutSideLengthX, float OutSideLengthY, bool bDebugDraw);
	void MinAreaRectangle(class UObject* WorldContextObject, const TArray<struct FVector>& InPoints, const struct FVector& SampleSurfaceNormal, const struct FVector& OutRectCenter, const struct FRotator& OutRectRotation, float OutRectLengthX, float OutRectLengthY, bool bDebugDraw);
	void Min(int32 A, int32 B, int32 ReturnValue);
	void MedianOfIntArray(const TArray<int32>& IntArray, float MedianValue);
	void MaxOfIntArray(const TArray<int32>& IntArray, int32 IndexOfMaxValue, int32 MaxValue);
	void MaxOfFloatArray(const TArray<float>& FloatArray, int32 IndexOfMaxValue, float MaxValue);
	void MaxOfByteArray(const TArray<uint8>& ByteArray, int32 IndexOfMaxValue, uint8 MaxValue);
	void MaxInt64(int64 A, int64 B, int64 ReturnValue);
	void Max(int32 A, int32 B, int32 ReturnValue);
	void Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V, const struct FVector4& ReturnValue);
	void Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V, const struct FVector4& ReturnValue);
	void Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V, const struct FVector4& ReturnValue);
	void Matrix_ToQuat(const struct FMatrix& M, const struct FQuat& ReturnValue);
	void Matrix_SetOrigin(const struct FMatrix& M, const struct FVector& NewOrigin);
	void Matrix_SetColumn(const struct FMatrix& M, enum class EMatrixColumns Column, const struct FVector& Value);
	void Matrix_SetAxis(const struct FMatrix& M, enum class EAxis Axis, const struct FVector& AxisVector);
	void Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D, const struct FMatrix& ReturnValue);
	void Matrix_RemoveTranslation(const struct FMatrix& M, const struct FMatrix& ReturnValue);
	void Matrix_RemoveScaling(const struct FMatrix& M, float Tolerance);
	void Matrix_Mirror(const struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis, const struct FMatrix& ReturnValue);
	void Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V, const struct FVector& ReturnValue);
	void Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V, const struct FVector& ReturnValue);
	void Matrix_Identity(const struct FMatrix& ReturnValue);
	void Matrix_GetUnitAxis(const struct FMatrix& M, enum class EAxis Axis, const struct FVector& ReturnValue);
	void Matrix_GetUnitAxes(const struct FMatrix& M, const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	void Matrix_GetTransposed(const struct FMatrix& M, const struct FMatrix& ReturnValue);
	void Matrix_GetTransposeAdjoint(const struct FMatrix& M, const struct FMatrix& ReturnValue);
	void Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance, const struct FVector& ReturnValue);
	void Matrix_GetScaledAxis(const struct FMatrix& M, enum class EAxis Axis, const struct FVector& ReturnValue);
	void Matrix_GetScaledAxes(const struct FMatrix& M, const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	void Matrix_GetRotDeterminant(const struct FMatrix& M, float ReturnValue);
	void Matrix_GetRotator(const struct FMatrix& M, const struct FRotator& ReturnValue);
	void Matrix_GetOrigin(const struct FMatrix& InMatrix, const struct FVector& ReturnValue);
	void Matrix_GetMaximumAxisScale(const struct FMatrix& M, float ReturnValue);
	void Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance, const struct FMatrix& ReturnValue);
	void Matrix_GetInverse(const struct FMatrix& M, const struct FMatrix& ReturnValue);
	void Matrix_GetFrustumTopPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetFrustumRightPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetFrustumNearPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetFrustumLeftPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetFrustumFarPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetFrustumBottomPlane(const struct FMatrix& M, const struct FPlane& OutPlane, bool ReturnValue);
	void Matrix_GetDeterminant(const struct FMatrix& M, float ReturnValue);
	void Matrix_GetColumn(const struct FMatrix& M, enum class EMatrixColumns Column, const struct FVector& ReturnValue);
	void Matrix_ContainsNaN(const struct FMatrix& M, bool ReturnValue);
	void Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation, const struct FMatrix& ReturnValue);
	void Matrix_ApplyScale(const struct FMatrix& M, float Scale, const struct FMatrix& ReturnValue);
	void MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB, double ReturnValue);
	void MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB, double ReturnValue);
	void MakeVector_NetQuantizeNormal(double X, double Y, double Z, const struct FVector_NetQuantizeNormal& ReturnValue);
	void MakeVector_NetQuantize100(double X, double Y, double Z, const struct FVector_NetQuantize100& ReturnValue);
	void MakeVector_NetQuantize10(double X, double Y, double Z, const struct FVector_NetQuantize10& ReturnValue);
	void MakeVector_NetQuantize(double X, double Y, double Z, const struct FVector_NetQuantize& ReturnValue);
	void MakeVector4(double X, double Y, double Z, double W, const struct FVector4& ReturnValue);
	void MakeVector2D(double X, double Y, const struct FVector2D& ReturnValue);
	void MakeVector(double X, double Y, double Z, const struct FVector& ReturnValue);
	void MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, const struct FTransform& ReturnValue);
	void MakeTimespan2(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano, const struct FTimespan& ReturnValue);
	void MakeTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds, const struct FTimespan& ReturnValue);
	void MakeRotFromZY(const struct FVector& Z, const struct FVector& Y, const struct FRotator& ReturnValue);
	void MakeRotFromZX(const struct FVector& Z, const struct FVector& X, const struct FRotator& ReturnValue);
	void MakeRotFromZ(const struct FVector& Z, const struct FRotator& ReturnValue);
	void MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z, const struct FRotator& ReturnValue);
	void MakeRotFromYX(const struct FVector& Y, const struct FVector& X, const struct FRotator& ReturnValue);
	void MakeRotFromY(const struct FVector& Y, const struct FRotator& ReturnValue);
	void MakeRotFromXZ(const struct FVector& X, const struct FVector& Z, const struct FRotator& ReturnValue);
	void MakeRotFromXY(const struct FVector& X, const struct FVector& Y, const struct FRotator& ReturnValue);
	void MakeRotFromX(const struct FVector& X, const struct FRotator& ReturnValue);
	void MakeRotator(float Roll, float Pitch, float Yaw, const struct FRotator& ReturnValue);
	void MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up, const struct FRotator& ReturnValue);
	void MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo, const struct FTransform& ReturnValue);
	void MakeRandomStream(int32 InitialSeed, const struct FRandomStream& ReturnValue);
	void MakeQuat(float X, float Y, float Z, float W, const struct FQuat& ReturnValue);
	void MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame, const struct FQualifiedFrameTime& ReturnValue);
	void MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase, float ReturnValue);
	void MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal, const struct FPlane& ReturnValue);
	void MakeFrameRate(int32 Numerator, int32 Denominator, const struct FFrameRate& ReturnValue);
	void MakeDateTime(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond, const struct FDateTime& ReturnValue);
	void MakeColor(float R, float G, float B, float A, const struct FLinearColor& ReturnValue);
	void MakeBoxSphereBounds(const struct FVector& Origin, const struct FVector& BoxExtent, float SphereRadius, const struct FBoxSphereBounds& ReturnValue);
	void MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max, const struct FBox2D& ReturnValue);
	void MakeBox(const struct FVector& Min, const struct FVector& Max, const struct FBox& ReturnValue);
	void Loge(double A, double ReturnValue);
	void Log(double A, double Base, double ReturnValue);
	void LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float T, const struct FVector& Intersection, bool ReturnValue);
	void LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float T, const struct FVector& Intersection, bool ReturnValue);
	void LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, const struct FLinearColor& ReturnValue);
	void LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, const struct FLinearColor& ReturnValue);
	void LinearColor_Yellow(const struct FLinearColor& ReturnValue);
	void LinearColor_White(const struct FLinearColor& ReturnValue);
	void LinearColor_Transparent(const struct FLinearColor& ReturnValue);
	void LinearColor_ToRGBE(const struct FLinearColor& InLinearColor, const struct FColor& ReturnValue);
	void LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity, const struct FLinearColor& ReturnValue);
	void LinearColor_SetTemperature(const struct FLinearColor& InOutColor, float InTemperature);
	void LinearColor_SetRGBA(const struct FLinearColor& InOutColor, float R, float G, float B, float A);
	void LinearColor_SetRandomHue(const struct FLinearColor& InOutColor);
	void LinearColor_SetFromSRGB(const struct FLinearColor& InOutColor, const struct FColor& InSRGB);
	void LinearColor_SetFromPow22(const struct FLinearColor& InOutColor, const struct FColor& InColor);
	void LinearColor_SetFromHSV(const struct FLinearColor& InOutColor, float H, float S, float V, float A);
	void LinearColor_Set(const struct FLinearColor& InOutColor, const struct FLinearColor& InColor);
	void LinearColor_Red(const struct FLinearColor& ReturnValue);
	void LinearColor_QuantizeRound(const struct FLinearColor& InColor, const struct FColor& ReturnValue);
	void LinearColor_Quantize(const struct FLinearColor& InColor, const struct FColor& ReturnValue);
	void LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance, bool ReturnValue);
	void LinearColor_Green(const struct FLinearColor& ReturnValue);
	void LinearColor_Gray(const struct FLinearColor& ReturnValue);
	void LinearColor_GetMin(const struct FLinearColor& InColor, float ReturnValue);
	void LinearColor_GetMax(const struct FLinearColor& InColor, float ReturnValue);
	void LinearColor_GetLuminance(const struct FLinearColor& InColor, float ReturnValue);
	void LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2, float ReturnValue);
	void LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation, const struct FLinearColor& ReturnValue);
	void LinearColor_Blue(const struct FLinearColor& ReturnValue);
	void LinearColor_Black(const struct FLinearColor& ReturnValue);
	void LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B, const struct FVector& ReturnValue);
	void LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void LessEqual_IntInt(int32 A, int32 B, bool ReturnValue);
	void LessEqual_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void LessEqual_DoubleDouble(double A, double B, bool ReturnValue);
	void LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void LessEqual_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void Less_IntInt(int32 A, int32 B, bool ReturnValue);
	void Less_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void Less_DoubleDouble(double A, double B, bool ReturnValue);
	void Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void Less_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void LerpAngle(float StartDegrees, float EndDegrees, float Alpha, float ReturnValue);
	void Lerp(double A, double B, double Alpha, double ReturnValue);
	void IsZero2D(const struct FVector2D& A, bool ReturnValue);
	void IsRotatorInfiniteOrNaN(const struct FRotator& A, bool ReturnValue);
	void IsPointInBoxWithTransform_Box(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FBox& BoxExtent, bool ReturnValue);
	void IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent, bool ReturnValue);
	void IsPointInBox_Box(const struct FVector& Point, const struct FBox& Box, bool ReturnValue);
	void IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent, bool ReturnValue);
	void IsNearlyZero2D(const struct FVector2D& A, float Tolerance, bool ReturnValue);
	void IsMorning(const struct FDateTime& A, bool ReturnValue);
	void IsLeapYear(int32 Year, bool ReturnValue);
	void IsInfiniteOrNaN(const struct FVector& A, bool ReturnValue);
	void IsAfternoon(const struct FDateTime& A, bool ReturnValue);
	void InvertTransform(const struct FTransform& T, const struct FTransform& ReturnValue);
	void InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation, const struct FRotator& ReturnValue);
	void InverseTransformLocation(const struct FTransform& T, const struct FVector& Location, const struct FVector& ReturnValue);
	void InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction, const struct FVector& ReturnValue);
	void IntPoint_Zero(const struct FIntPoint& ReturnValue);
	void IntPoint_Up(const struct FIntPoint& ReturnValue);
	void IntPoint_Right(const struct FIntPoint& ReturnValue);
	void IntPoint_One(const struct FIntPoint& ReturnValue);
	void IntPoint_Left(const struct FIntPoint& ReturnValue);
	void IntPoint_Down(const struct FIntPoint& ReturnValue);
	void InRange_IntInt(int32 Value, int32 Min, int32 Max, bool InclusiveMin, bool InclusiveMax, bool ReturnValue);
	void InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax, bool ReturnValue);
	void InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax, bool ReturnValue);
	void Hypotenuse(double Width, double Height, double ReturnValue);
	void HSVToRGBLinear(const struct FLinearColor& HSV, const struct FLinearColor& ReturnValue);
	void HSVToRGB_Vector(const struct FLinearColor& HSV, const struct FLinearColor& RGB);
	void HSVToRGB(float H, float S, float V, float A, const struct FLinearColor& ReturnValue);
	void GridSnap_Float(double Location, double GridSize, double ReturnValue);
	void GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B, const struct FVector& ReturnValue);
	void GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void GreaterEqual_IntInt(int32 A, int32 B, bool ReturnValue);
	void GreaterEqual_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void GreaterEqual_DoubleDouble(double A, double B, bool ReturnValue);
	void GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void GreaterEqual_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void Greater_IntInt(int32 A, int32 B, bool ReturnValue);
	void Greater_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void Greater_DoubleDouble(double A, double B, bool ReturnValue);
	void Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void Greater_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void GetYear(const struct FDateTime& A, int32 ReturnValue);
	void GetYawPitchFromVector(const struct FVector& InVec, float Yaw, float Pitch);
	void GetVectorArrayAverage(const TArray<struct FVector>& Vectors, const struct FVector& ReturnValue);
	void GetUpVector(const struct FRotator& InRot, const struct FVector& ReturnValue);
	void GetTotalSeconds(const struct FTimespan& A, float ReturnValue);
	void GetTotalMinutes(const struct FTimespan& A, float ReturnValue);
	void GetTotalMilliseconds(const struct FTimespan& A, float ReturnValue);
	void GetTotalHours(const struct FTimespan& A, float ReturnValue);
	void GetTotalDays(const struct FTimespan& A, float ReturnValue);
	void GetTimeOfDay(const struct FDateTime& A, const struct FTimespan& ReturnValue);
	void GetTAU(double ReturnValue);
	void GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float OutSlopePitchDegreeAngle, float OutSlopeRollDegreeAngle);
	void GetSeconds(const struct FTimespan& A, int32 ReturnValue);
	void GetSecond(const struct FDateTime& A, int32 ReturnValue);
	void GetRotated2D(const struct FVector2D& A, float AngleDeg, const struct FVector2D& ReturnValue);
	void GetRightVector(const struct FRotator& InRot, const struct FVector& ReturnValue);
	void GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal, const struct FVector& ReturnValue);
	void GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, float ReturnValue);
	void GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection, float ReturnValue);
	void GetPI(double ReturnValue);
	void GetMonth(const struct FDateTime& A, int32 ReturnValue);
	void GetMinutes(const struct FTimespan& A, int32 ReturnValue);
	void GetMinute(const struct FDateTime& A, int32 ReturnValue);
	void GetMinElement(const struct FVector& A, double ReturnValue);
	void GetMin2D(const struct FVector2D& A, double ReturnValue);
	void GetMilliseconds(const struct FTimespan& A, int32 ReturnValue);
	void GetMillisecond(const struct FDateTime& A, int32 ReturnValue);
	void GetMaxElement(const struct FVector& A, double ReturnValue);
	void GetMax2D(const struct FVector2D& A, double ReturnValue);
	void GetHours(const struct FTimespan& A, int32 ReturnValue);
	void GetHour12(const struct FDateTime& A, int32 ReturnValue);
	void GetHour(const struct FDateTime& A, int32 ReturnValue);
	void GetForwardVector(const struct FRotator& InRot, const struct FVector& ReturnValue);
	void GetDuration(const struct FTimespan& A, const struct FTimespan& ReturnValue);
	void GetDirectionUnitVector(const struct FVector& From, const struct FVector& To, const struct FVector& ReturnValue);
	void GetDays(const struct FTimespan& A, int32 ReturnValue);
	void GetDayOfYear(const struct FDateTime& A, int32 ReturnValue);
	void GetDay(const struct FDateTime& A, int32 ReturnValue);
	void GetDate(const struct FDateTime& A, const struct FDateTime& ReturnValue);
	void GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float Azimuth, float Elevation);
	void GetAxes(const struct FRotator& A, const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	void GetAbsMax2D(const struct FVector2D& A, double ReturnValue);
	void GetAbs2D(const struct FVector2D& A, const struct FVector2D& ReturnValue);
	void FWrap(double Value, double Min, double Max, double ReturnValue);
	void FTruncVector(const struct FVector& InVector, const struct FIntVector& ReturnValue);
	void FTrunc64(double A, int64 ReturnValue);
	void FTrunc(double A, int32 ReturnValue);
	void FromSeconds(float Seconds, const struct FTimespan& ReturnValue);
	void FromMinutes(float Minutes, const struct FTimespan& ReturnValue);
	void FromMilliseconds(float Milliseconds, const struct FTimespan& ReturnValue);
	void FromHours(float Hours, const struct FTimespan& ReturnValue);
	void FromDays(float Days, const struct FTimespan& ReturnValue);
	void Fraction(double A, double ReturnValue);
	void FMod64(double Dividend, double Divisor, double Remainder, int64 ReturnValue);
	void FMod(double Dividend, double Divisor, double Remainder, int32 ReturnValue);
	void FMin(double A, double B, double ReturnValue);
	void FMax(double A, double B, double ReturnValue);
	void FloatSpringInterp(float Current, float Target, const struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget, float ReturnValue);
	void FlattenVectorNormal(const struct FVector& A, const struct FVector& ReturnValue);
	void FlattenVector(const struct FVector& A, const struct FVector& ReturnValue);
	void FixedTurn(float InCurrent, float InDesired, float InDeltaRate, float ReturnValue);
	void FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed, double ReturnValue);
	void FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed, double ReturnValue);
	void FInterpEaseInOut(double A, double B, double Alpha, double Exponent, double ReturnValue);
	void FindRelativeLookAtRotation(const struct FTransform& StartTransform, const struct FVector& TargetLocation, const struct FRotator& ReturnValue);
	void FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, const struct FVector& Segment1Point, const struct FVector& Segment2Point);
	void FindLookAtRotation(const struct FVector& Start, const struct FVector& Target, const struct FRotator& ReturnValue);
	void FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FVector& ReturnValue);
	void FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection, const struct FVector& ReturnValue);
	void FFloor64(double A, int64 ReturnValue);
	void FFloor(double A, int32 ReturnValue);
	void FClamp01(double Value, double ReturnValue);
	void FClamp(double Value, double Min, double Max, double ReturnValue);
	void FCeil64(double A, int64 ReturnValue);
	void FCeil(double A, int32 ReturnValue);
	void FAngleInterpTo(float CurrentDegrees, float TargetDegrees, float DeltaTime, float InterpSpeed, float ReturnValue);
	void FAngleInterpEaseOut(float StartAngle, float EndAngle, float Alpha, float BlendExp, float ReturnValue);
	void FAngleInterpEaseInOut(float StartAngle, float EndAngle, float Alpha, float BlendExp, float ReturnValue);
	void FAngleInterpEaseIn(float StartAngle, float EndAngle, float Alpha, float BlendExp, float ReturnValue);
	void Exp(double A, double ReturnValue);
	void EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B, bool ReturnValue);
	void EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, bool ReturnValue);
	void EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, bool ReturnValue);
	void EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance, bool ReturnValue);
	void EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance, bool ReturnValue);
	void EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance, bool ReturnValue);
	void EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, bool ReturnValue);
	void EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, bool ReturnValue);
	void EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance, bool ReturnValue);
	void EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance, bool ReturnValue);
	void EqualEqual_ObjectObject(class UObject* A, class UObject* B, bool ReturnValue);
	void EqualEqual_NameName(class FName A, class FName B, bool ReturnValue);
	void EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance, bool ReturnValue);
	void EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, bool ReturnValue);
	void EqualEqual_IntInt(int32 A, int32 B, bool ReturnValue);
	void EqualEqual_Int64Int64(int64 A, int64 B, bool ReturnValue);
	void EqualEqual_DoubleDouble(double A, double B, bool ReturnValue);
	void EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, bool ReturnValue);
	void EqualEqual_ClassClass(class UClass* A, class UClass* B, bool ReturnValue);
	void EqualEqual_ByteByte(uint8 A, uint8 B, bool ReturnValue);
	void EqualEqual_BoolBool(bool A, bool B, bool ReturnValue);
	void Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, bool ReturnValue);
	void EaseAngle(float StartAngle, float EndAngle, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps, float ReturnValue);
	void Ease(double A, double B, double Alpha, enum class EEasingFunc EasingFunc, double BlendExp, int32 Steps, double ReturnValue);
	void DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, const struct FVector& ReturnValue);
	void DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, const struct FRotator& ReturnValue);
	void DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, float ReturnValue);
	void DotProduct2D(const struct FVector2D& A, const struct FVector2D& B, double ReturnValue);
	void Dot_VectorVector(const struct FVector& A, const struct FVector& B, double ReturnValue);
	void Divide_VectorVector(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Divide_VectorInt(const struct FVector& A, int32 B, const struct FVector& ReturnValue);
	void Divide_VectorFloat(const struct FVector& A, double B, const struct FVector& ReturnValue);
	void Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, const struct FVector4& ReturnValue);
	void Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& ReturnValue);
	void Divide_Vector2DFloat(const struct FVector2D& A, double B, const struct FVector2D& ReturnValue);
	void Divide_TimespanFloat(const struct FTimespan& A, float Scalar, const struct FTimespan& ReturnValue);
	void Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, const struct FLinearColor& ReturnValue);
	void Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, const struct FIntPoint& ReturnValue);
	void Divide_IntPointInt(const struct FIntPoint& A, int32 B, const struct FIntPoint& ReturnValue);
	void Divide_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Divide_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Divide_DoubleFloat(double A, float B, double ReturnValue);
	void Divide_DoubleDouble(double A, double B, double ReturnValue);
	void Divide_ByteByte(uint8 A, uint8 B, uint8 ReturnValue);
	void DistanceSquared2D(const struct FVector2D& V1, const struct FVector2D& V2, double ReturnValue);
	void Distance2D(const struct FVector2D& V1, const struct FVector2D& V2, double ReturnValue);
	void DegTan(double A, double ReturnValue);
	void DegSin(double A, double ReturnValue);
	void DegreesToRadians(double A, double ReturnValue);
	void DegCos(double A, double ReturnValue);
	void DegAtan2(double Y, double X, double ReturnValue);
	void DegAtan(double A, double ReturnValue);
	void DegAsin(double A, double ReturnValue);
	void DegAcos(double A, double ReturnValue);
	void DaysInYear(int32 Year, int32 ReturnValue);
	void DaysInMonth(int32 Year, int32 Month, int32 ReturnValue);
	void DateTimeMinValue(const struct FDateTime& ReturnValue);
	void DateTimeMaxValue(const struct FDateTime& ReturnValue);
	void DateTimeFromString(const class FString& DateTimeString, const struct FDateTime& Result, bool ReturnValue);
	void DateTimeFromIsoString(const class FString& IsoString, const struct FDateTime& Result, bool ReturnValue);
	void CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B, double ReturnValue);
	void Cross_VectorVector(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void CreateVectorFromYawPitch(float Yaw, float Pitch, float Length, const struct FVector& ReturnValue);
	void Cos(double A, double ReturnValue);
	void Conv_VectorToVector2D(const struct FVector& InVector, const struct FVector2D& ReturnValue);
	void Conv_VectorToTransform(const struct FVector& InLocation, const struct FTransform& ReturnValue);
	void Conv_VectorToRotator(const struct FVector& InVec, const struct FRotator& ReturnValue);
	void Conv_VectorToQuaternion(const struct FVector& InVec, const struct FQuat& ReturnValue);
	void Conv_VectorToLinearColor(const struct FVector& InVec, const struct FLinearColor& ReturnValue);
	void Conv_Vector4ToVector(const struct FVector4& InVector4, const struct FVector& ReturnValue);
	void Conv_Vector4ToRotator(const struct FVector4& InVec, const struct FRotator& ReturnValue);
	void Conv_Vector4ToQuaternion(const struct FVector4& InVec, const struct FQuat& ReturnValue);
	void Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z, const struct FVector& ReturnValue);
	void Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D, const struct FIntPoint& ReturnValue);
	void Conv_TransformToMatrix(const struct FTransform& Transform, const struct FMatrix& ReturnValue);
	void Conv_RotatorToVector(const struct FRotator& InRot, const struct FVector& ReturnValue);
	void Conv_RotatorToTransform(const struct FRotator& InRotator, const struct FTransform& ReturnValue);
	void Conv_RotatorToQuaternion(const struct FRotator& InRot, const struct FQuat& ReturnValue);
	void Conv_MatrixToTransform(const struct FMatrix& InMatrix, const struct FTransform& ReturnValue);
	void Conv_MatrixToRotator(const struct FMatrix& InMatrix, const struct FRotator& ReturnValue);
	void Conv_LinearColorToVector(const struct FLinearColor& InLinearColor, const struct FVector& ReturnValue);
	void Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB, const struct FColor& ReturnValue);
	void Conv_IntVectorToVector(const struct FIntVector& InIntVector, const struct FVector& ReturnValue);
	void Conv_IntToVector(int32 InInt, const struct FVector& ReturnValue);
	void Conv_IntToIntVector(int32 InInt, const struct FIntVector& ReturnValue);
	void Conv_IntToInt64(int32 InInt, int64 ReturnValue);
	void Conv_IntToDouble(int32 InInt, double ReturnValue);
	void Conv_IntToByte(int32 InInt, uint8 ReturnValue);
	void Conv_IntToBool(int32 InInt, bool ReturnValue);
	void Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint, const struct FVector2D& ReturnValue);
	void Conv_Int64ToInt(int64 InInt, int32 ReturnValue);
	void Conv_Int64ToDouble(int64 InInt, double ReturnValue);
	void Conv_Int64ToByte(int64 InInt, uint8 ReturnValue);
	void Conv_FloatToDouble(float InFloat, double ReturnValue);
	void Conv_DoubleToVector2D(double InDouble, const struct FVector2D& ReturnValue);
	void Conv_DoubleToVector(double InDouble, const struct FVector& ReturnValue);
	void Conv_DoubleToLinearColor(double InDouble, const struct FLinearColor& ReturnValue);
	void Conv_DoubleToInt64(double InDouble, int64 ReturnValue);
	void Conv_DoubleToFloat(double InDouble, float ReturnValue);
	void Conv_ColorToLinearColor(const struct FColor& InColor, const struct FLinearColor& ReturnValue);
	void Conv_ByteToInt64(uint8 InByte, int64 ReturnValue);
	void Conv_ByteToInt(uint8 InByte, int32 ReturnValue);
	void Conv_ByteToDouble(uint8 InByte, double ReturnValue);
	void Conv_BoolToInt(bool InBool, int32 ReturnValue);
	void Conv_BoolToDouble(bool InBool, double ReturnValue);
	void Conv_BoolToByte(bool InBool, uint8 ReturnValue);
	void ComposeTransforms(const struct FTransform& A, const struct FTransform& B, const struct FTransform& ReturnValue);
	void ComposeRotators(const struct FRotator& A, const struct FRotator& B, const struct FRotator& ReturnValue);
	void ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass, bool ReturnValue);
	void ClampVectorSize(const struct FVector& A, double Min, double Max, const struct FVector& ReturnValue);
	void ClampInt64(int64 Value, int64 Min, int64 Max, int64 ReturnValue);
	void ClampAxis(float Angle, float ReturnValue);
	void ClampAxes2D(const struct FVector2D& A, double MinAxisVal, double MaxAxisVal, const struct FVector2D& ReturnValue);
	void ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees, double ReturnValue);
	void Clamp(int32 Value, int32 Min, int32 Max, int32 ReturnValue);
	void CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed, const struct FLinearColor& ReturnValue);
	void BreakVector_NetQuantizeNormal(const struct FVector_NetQuantizeNormal& InVec, double X, double Y, double Z);
	void BreakVector_NetQuantize100(const struct FVector_NetQuantize100& InVec, double X, double Y, double Z);
	void BreakVector_NetQuantize10(const struct FVector_NetQuantize10& InVec, double X, double Y, double Z);
	void BreakVector_NetQuantize(const struct FVector_NetQuantize& InVec, double X, double Y, double Z);
	void BreakVector4(const struct FVector4& InVec, double X, double Y, double Z, double W);
	void BreakVector3f(const struct FVector3f& InVec, float X, float Y, float Z);
	void BreakVector2D(const struct FVector2D& InVec, double X, double Y);
	void BreakVector(const struct FVector& InVec, double X, double Y, double Z);
	void BreakTransform(const struct FTransform& InTransform, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	void BreakTimespan2(const struct FTimespan& InTimespan, int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano);
	void BreakTimespan(const struct FTimespan& InTimespan, int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds);
	void BreakRotIntoAxes(const struct FRotator& InRot, const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	void BreakRotator(const struct FRotator& InRot, float Roll, float Pitch, float Yaw);
	void BreakRandomStream(const struct FRandomStream& InRandomStream, int32 InitialSeed);
	void BreakQuat(const struct FQuat& InQuat, float X, float Y, float Z, float W);
	void BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);
	void BreakFrameRate(const struct FFrameRate& InFrameRate, int32 Numerator, int32 Denominator);
	void BreakDateTime(const struct FDateTime& InDateTime, int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond);
	void BreakColor(const struct FLinearColor& InColor, float R, float G, float B, float A);
	void BreakBoxSphereBounds(const struct FBoxSphereBounds& InBoxSphereBounds, const struct FVector& Origin, const struct FVector& BoxExtent, float SphereRadius);
	void BoundToCube(const struct FVector& A, float Radius, const struct FVector& ReturnValue);
	void BooleanXOR(bool A, bool B, bool ReturnValue);
	void BooleanOR(bool A, bool B, bool ReturnValue);
	void BooleanNOR(bool A, bool B, bool ReturnValue);
	void BooleanNAND(bool A, bool B, bool ReturnValue);
	void BooleanAND(bool A, bool B, bool ReturnValue);
	void BMin(uint8 A, uint8 B, uint8 ReturnValue);
	void BMax(uint8 A, uint8 B, uint8 ReturnValue);
	void AverageOfIntArray(const TArray<int32>& IntArray, float AverageValue);
	void Atan2(double Y, double X, double ReturnValue);
	void Atan(double A, double ReturnValue);
	void Asin(double A, double ReturnValue);
	void And_IntInt(int32 A, int32 B, int32 ReturnValue);
	void And_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Add_VectorVector(const struct FVector& A, const struct FVector& B, const struct FVector& ReturnValue);
	void Add_VectorInt(const struct FVector& A, int32 B, const struct FVector& ReturnValue);
	void Add_VectorFloat(const struct FVector& A, double B, const struct FVector& ReturnValue);
	void Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, const struct FVector4& ReturnValue);
	void Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& ReturnValue);
	void Add_Vector2DFloat(const struct FVector2D& A, double B, const struct FVector2D& ReturnValue);
	void Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B, const struct FTimespan& ReturnValue);
	void Add_QuatQuat(const struct FQuat& A, const struct FQuat& B, const struct FQuat& ReturnValue);
	void Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, const struct FMatrix& ReturnValue);
	void Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, const struct FLinearColor& ReturnValue);
	void Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B, const struct FIntPoint& ReturnValue);
	void Add_IntPointInt(const struct FIntPoint& A, int32 B, const struct FIntPoint& ReturnValue);
	void Add_IntInt(int32 A, int32 B, int32 ReturnValue);
	void Add_Int64Int64(int64 A, int64 B, int64 ReturnValue);
	void Add_DoubleFloat(double A, float B, double ReturnValue);
	void Add_DoubleDouble(double A, double B, double ReturnValue);
	void Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B, const struct FDateTime& ReturnValue);
	void Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B, const struct FDateTime& ReturnValue);
	void Add_ByteByte(uint8 A, uint8 B, uint8 ReturnValue);
	void Acos(double A, double ReturnValue);
	void Abs_Int64(int64 A, int64 ReturnValue);
	void Abs_Int(int32 A, int32 ReturnValue);
	void Abs(double A, double ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetNodeHelperLibrary
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetNodeHelperLibrary* GetDefaultObj();

	void MarkBit(int32 Data, int32 Index);
	void HasUnmarkedBit(int32 Data, int32 NumBits, bool ReturnValue);
	void HasMarkedBit(int32 Data, int32 NumBits, bool ReturnValue);
	void GetValidValue(class UEnum* Enum, uint8 EnumeratorValue, uint8 ReturnValue);
	void GetUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, bool bRandom, int32 ReturnValue);
	void GetRandomUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, int32 ReturnValue);
	void GetFirstUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, int32 ReturnValue);
	void GetEnumeratorValueFromIndex(class UEnum* Enum, uint8 EnumeratorIndex, uint8 ReturnValue);
	void GetEnumeratorUserFriendlyName(class UEnum* Enum, uint8 EnumeratorValue, const class FString& ReturnValue);
	void GetEnumeratorName(class UEnum* Enum, uint8 EnumeratorValue, class FName ReturnValue);
	void ClearBit(int32 Data, int32 Index);
	void ClearAllBits(int32 Data);
	void BitIsMarked(int32 Data, int32 Index, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetRenderingLibrary
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetRenderingLibrary* GetDefaultObj();

	void UploadComputeMaterialSplatData(class UObject* WorldContextObject, const class FString& SplatDataId, const struct FTransform& BoundsLocalToWorld, const TArray<struct FSplatCapsuleBounds>& SplatLocalBounds, const TArray<struct FVector4f>& SplatData, int32 SplatDataFloat4Stride);
	void SetupAuxSceneTexture(class UObject* WorldContextObject, enum class EAuxSceneTextures ID, enum class EPixelFormat Format, const struct FIntVector& Size);
	void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);
	void ResizeRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget, int32 Width, int32 Height);
	void RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name, enum class ETextureCompressionSettings CompressionSettings, enum class ETextureMipGenSettings MipSettings, class UTexture2D* ReturnValue);
	void RemoveComputeMaterialSplatData(class UObject* WorldContextObject, const class FString& SplatDataId);
	void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
	void ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V, const struct FColor& ReturnValue);
	void ReadRenderTargetRawUVArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FBox2D& Area, bool bNormalize, const TArray<struct FLinearColor>& ReturnValue);
	void ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize, const struct FLinearColor& ReturnValue);
	void ReadRenderTargetRawPixelArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 MinX, int32 MinY, int32 MaxX, int32 MaxY, bool bNormalize, const TArray<struct FLinearColor>& ReturnValue);
	void ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y, bool bNormalize, const struct FLinearColor& ReturnValue);
	void ReadRenderTargetRaw(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const TArray<struct FLinearColor>& OutLinearSamples, bool bNormalize, bool ReturnValue);
	void ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y, const struct FColor& ReturnValue);
	void ReadRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const TArray<struct FColor>& OutSamples, bool bNormalize, bool ReturnValue);
	void MakeSkinWeightInfo(int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3, const struct FSkelMeshSkinWeightInfo& ReturnValue);
	void ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& Filename, class UTexture2D* ReturnValue);
	void ImportBufferAsTexture2D(class UObject* WorldContextObject, const TArray<uint8>& Buffer, class UTexture2D* ReturnValue);
	void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename);
	void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& Filename);
	void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
	void EnablePathTracing(bool bEnablePathTracer);
	void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	void DispatchComputeMaterialSplatData(class UObject* WorldContextObject, class UTextureRenderTarget* TextureRenderTarget, class UMaterialInterface* Material, const class FString& SplatDataId, const struct FTransform& OutputTransform, bool bDispatchTiledIndirect, const struct FIntVector& TargetDispatchSize, const struct FIntVector& TargetOutputOffset, enum class EDispatchComputeRenderSlot FrameRenderSlot);
	void DispatchComputeMaterial(class UObject* WorldContextObject, class UTextureRenderTarget* TextureRenderTarget, class UMaterialInterface* Material, const struct FIntVector& DispatchSize, const struct FIntVector& DispatchOffset, bool bAsyncCompute, enum class EDispatchComputeRenderSlot FrameRenderSlot);
	void DisableAuxSceneTexture(class UObject* WorldContextObject, enum class EAuxSceneTextures ID);
	void CreateRenderTargetVolume(class UObject* WorldContextObject, int32 Width, int32 Height, int32 Depth, enum class ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, bool bUsedWithComputeMaterial, class UTextureRenderTargetVolume* ReturnValue);
	void CreateRenderTarget2DArray(class UObject* WorldContextObject, int32 Width, int32 Height, int32 Slices, enum class ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, bool bUsedWithComputeMaterial, class UTextureRenderTarget2DArray* ReturnValue);
	void CreateRenderTarget2D(class UObject* WorldContextObject, int32 Width, int32 Height, enum class ETextureRenderTargetFormat Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, bool bUsedWithComputeMaterial, class UTextureRenderTarget2D* ReturnValue);
	void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);
	void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void ClearRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget* TextureRenderTarget, int32 MipIdx, const struct FLinearColor& ClearColor);
	void ClearAuxSceneTexture(class UObject* WorldContextObject, enum class EAuxSceneTextures ID, const struct FLinearColor& ClearColor);
	void CalculateProjectionMatrix(const struct FMinimalViewInfo& MinimalViewInfo, const struct FMatrix& ReturnValue);
	void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3);
	void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas* Canvas, const struct FVector2D& Size, const struct FDrawToRenderTargetContext& Context);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringLibrary
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetStringLibrary* GetDefaultObj();

	void TrimTrailing(const class FString& SourceString, const class FString& ReturnValue);
	void Trim(const class FString& SourceString, const class FString& ReturnValue);
	void ToUpper(const class FString& SourceString, const class FString& ReturnValue);
	void ToLower(const class FString& SourceString, const class FString& ReturnValue);
	void TimeSecondsToString(float InSeconds, const class FString& ReturnValue);
	void StartsWith(const class FString& SourceString, const class FString& InPrefix, enum class ESearchCase SearchCase, bool ReturnValue);
	void Split(const class FString& SourceString, const class FString& InStr, const class FString& LeftS, const class FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir, bool ReturnValue);
	void RightPad(const class FString& SourceString, int32 ChCount, const class FString& ReturnValue);
	void RightChop(const class FString& SourceString, int32 Count, const class FString& ReturnValue);
	void Right(const class FString& SourceString, int32 Count, const class FString& ReturnValue);
	void Reverse(const class FString& SourceString, const class FString& ReturnValue);
	void ReplaceInline(const class FString& SourceString, const class FString& SearchText, const class FString& ReplacementText, enum class ESearchCase SearchCase, int32 ReturnValue);
	void Replace(const class FString& SourceString, const class FString& From, const class FString& To, enum class ESearchCase SearchCase, const class FString& ReturnValue);
	void ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings, const TArray<class FString>& ReturnValue);
	void NotEqual_StrStr(const class FString& A, const class FString& B, bool ReturnValue);
	void NotEqual_StriStri(const class FString& A, const class FString& B, bool ReturnValue);
	void Mid(const class FString& SourceString, int32 Start, int32 Count, const class FString& ReturnValue);
	void MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, enum class ESearchCase SearchCase, bool ReturnValue);
	void Len(const class FString& S, int32 ReturnValue);
	void LeftPad(const class FString& SourceString, int32 ChCount, const class FString& ReturnValue);
	void LeftChop(const class FString& SourceString, int32 Count, const class FString& ReturnValue);
	void Left(const class FString& SourceString, int32 Count, const class FString& ReturnValue);
	void JoinStringArray(const TArray<class FString>& SourceArray, const class FString& Separator, const class FString& ReturnValue);
	void IsNumeric(const class FString& SourceString, bool ReturnValue);
	void IsEmpty(const class FString& InString, bool ReturnValue);
	void GetSubstring(const class FString& SourceString, int32 StartIndex, int32 Length, const class FString& ReturnValue);
	void GetCharacterAsNumber(const class FString& SourceString, int32 Index, int32 ReturnValue);
	void GetCharacterArrayFromString(const class FString& SourceString, const TArray<class FString>& ReturnValue);
	void FindSubstring(const class FString& SearchIn, const class FString& SubString, bool bUseCase, bool bSearchFromEnd, int32 StartPosition, int32 ReturnValue);
	void EqualEqual_StrStr(const class FString& A, const class FString& B, bool ReturnValue);
	void EqualEqual_StriStri(const class FString& A, const class FString& B, bool ReturnValue);
	void EndsWith(const class FString& SourceString, const class FString& InSuffix, enum class ESearchCase SearchCase, bool ReturnValue);
	void CullArray(const class FString& SourceString, const TArray<class FString>& InArray, int32 ReturnValue);
	void Conv_VectorToString(const struct FVector& InVec, const class FString& ReturnValue);
	void Conv_Vector3fToString(const struct FVector3f& InVec, const class FString& ReturnValue);
	void Conv_Vector2dToString(const struct FVector2D& InVec, const class FString& ReturnValue);
	void Conv_TransformToString(const struct FTransform& InTrans, const class FString& ReturnValue);
	void Conv_StringToVector3f(const class FString& InString, const struct FVector3f& OutConvertedVector, bool OutIsValid);
	void Conv_StringToVector2D(const class FString& InString, const struct FVector2D& OutConvertedVector2D, bool OutIsValid);
	void Conv_StringToVector(const class FString& InString, const struct FVector& OutConvertedVector, bool OutIsValid);
	void Conv_StringToRotator(const class FString& InString, const struct FRotator& OutConvertedRotator, bool OutIsValid);
	void Conv_StringToName(const class FString& InString, class FName ReturnValue);
	void Conv_StringToInt64(const class FString& InString, int64 ReturnValue);
	void Conv_StringToInt(const class FString& InString, int32 ReturnValue);
	void Conv_StringToDouble(const class FString& InString, double ReturnValue);
	void Conv_StringToColor(const class FString& InString, const struct FLinearColor& OutConvertedColor, bool OutIsValid);
	void Conv_RotatorToString(const struct FRotator& InRot, const class FString& ReturnValue);
	void Conv_PlatformUserIdToString(const struct FPlatformUserId& InPlatformUserId, const class FString& ReturnValue);
	void Conv_ObjectToString(class UObject* InObj, const class FString& ReturnValue);
	void Conv_NameToString(class FName InName, const class FString& ReturnValue);
	void Conv_MatrixToString(const struct FMatrix& InMatrix, const class FString& ReturnValue);
	void Conv_IntVectorToString(const struct FIntVector& InIntVec, const class FString& ReturnValue);
	void Conv_IntToString(int32 InInt, const class FString& ReturnValue);
	void Conv_IntPointToString(const struct FIntPoint& InIntPoint, const class FString& ReturnValue);
	void Conv_Int64ToString(int64 InInt, const class FString& ReturnValue);
	void Conv_InputDeviceIdToString(const struct FInputDeviceId& InDeviceId, const class FString& ReturnValue);
	void Conv_DoubleToString(double InDouble, const class FString& ReturnValue);
	void Conv_ColorToString(const struct FLinearColor& InColor, const class FString& ReturnValue);
	void Conv_ByteToString(uint8 InByte, const class FString& ReturnValue);
	void Conv_BoolToString(bool InBool, const class FString& ReturnValue);
	void Contains(const class FString& SearchIn, const class FString& SubString, bool bUseCase, bool bSearchFromEnd, bool ReturnValue);
	void Concat_StrStr(const class FString& A, const class FString& B, const class FString& ReturnValue);
	void BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Name(const class FString& AppendTo, const class FString& Prefix, class FName InName, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_IntVector(const class FString& AppendTo, const class FString& Prefix, const struct FIntVector& InIntVector, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int32 InInt, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Double(const class FString& AppendTo, const class FString& Prefix, double InDouble, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix, const class FString& ReturnValue);
	void BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix, const class FString& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringTableLibrary
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetStringTableLibrary* GetDefaultObj();

	void IsRegisteredTableId(class FName TableId, bool ReturnValue);
	void IsRegisteredTableEntry(class FName TableId, const class FString& Key, bool ReturnValue);
	void GetTableNamespace(class FName TableId, const class FString& ReturnValue);
	void GetTableEntrySourceString(class FName TableId, const class FString& Key, const class FString& ReturnValue);
	void GetTableEntryMetaData(class FName TableId, const class FString& Key, class FName MetaDataId, const class FString& ReturnValue);
	void GetRegisteredStringTables(const TArray<class FName>& ReturnValue);
	void GetMetaDataIdsFromStringTableEntry(class FName TableId, const class FString& Key, const TArray<class FName>& ReturnValue);
	void GetKeysFromStringTable(class FName TableId, const TArray<class FString>& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetSystemLibrary
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UKismetSystemLibrary* GetDefaultObj();

	void UnregisterForRemoteNotifications();
	void UnloadPrimaryAssetList(const TArray<struct FPrimaryAssetId>& PrimaryAssetIdList);
	void UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);
	void TransactObject(class UObject* Object);
	void SwitchNetworkMode(class UObject* WorldContextObject, enum class ENetModeBP OutNetworkMode);
	void StackTrace();
	void SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class UPrimitiveComponent*>& OutComponents, bool ReturnValue);
	void SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class UPrimitiveComponent*>& OutComponents, bool ReturnValue);
	void SphereOverlapActorsSimple(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, enum class EObjectTypeQuery ObjectType, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class AActor*>& OutActors, bool ReturnValue);
	void SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class AActor*>& OutActors, bool ReturnValue);
	void SnapshotObject(class UObject* Object);
	void ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName);
	void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void ShowInterstitialAd();
	void ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen);
	void SetWindowTitle(class FText Title);
	void SetVolumeButtonsHandledBySystem(bool bEnabled);
	void SetVectorPropertyByName(class UObject* Object, class FName PropertyName, const struct FVector& Value);
	void SetVector3fPropertyByName(class UObject* Object, class FName PropertyName, const struct FVector3f& Value);
	void SetUserActivity(const struct FUserActivity& UserActivity);
	void SetTransformPropertyByName(class UObject* Object, class FName PropertyName, const struct FTransform& Value);
	void SetTextPropertyByName(class UObject* Object, class FName PropertyName, class FText Value);
	void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void SetStructurePropertyByName(class UObject* Object, class FName PropertyName, const struct FGenericStruct& Value);
	void SetStringPropertyByName(class UObject* Object, class FName PropertyName, const class FString& Value);
	void SetSoftObjectPropertyByName(class UObject* Object, class FName PropertyName, TSoftObjectPtr<class UObject> Value);
	void SetSoftClassPropertyByName(class UObject* Object, class FName PropertyName, TSoftClassPtr<class UObject> Value);
	void SetRotatorPropertyByName(class UObject* Object, class FName PropertyName, const struct FRotator& Value);
	void SetObjectPropertyByName(class UObject* Object, class FName PropertyName, class UObject* Value);
	void SetNamePropertyByName(class UObject* Object, class FName PropertyName, class FName Value);
	void SetLinearColorPropertyByName(class UObject* Object, class FName PropertyName, const struct FLinearColor& Value);
	void SetIntPropertyByName(class UObject* Object, class FName PropertyName, int32 Value);
	void SetInterfacePropertyByName(class UObject* Object, class FName PropertyName, TScriptInterface<class IInterface> Value);
	void SetInt64PropertyByName(class UObject* Object, class FName PropertyName, int64 Value);
	void SetGamepadsBlockDeviceFeedback(bool bBlock);
	void SetFieldPathPropertyByName(class UObject* Object, class FName PropertyName, FFieldPathProperty_ Value);
	void SetDoublePropertyByName(class UObject* Object, class FName PropertyName, double Value);
	void SetColorPropertyByName(class UObject* Object, class FName PropertyName, const struct FColor& Value);
	void SetCollisionProfileNameProperty(class UObject* Object, class FName PropertyName, const struct FCollisionProfileName& Value);
	void SetClassPropertyByName(class UObject* Object, class FName PropertyName, class UClass* Value);
	void SetBytePropertyByName(class UObject* Object, class FName PropertyName, uint8 Value);
	void SetBoolPropertyByName(class UObject* Object, class FName PropertyName, bool Value);
	void RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void ResetGamepadAssignmentToController(int32 ControllerId);
	void ResetGamepadAssignments();
	void RegisterForRemoteNotifications();
	void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions);
	void PrintWarning(const class FString& InString);
	void PrintText(class UObject* WorldContextObject, class FText InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, class FName Key);
	void PrintString(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, class FName Key);
	void ParseParamValue(const class FString& InString, const class FString& InParam, const class FString& OutValue, bool ReturnValue);
	void ParseParam(const class FString& InString, const class FString& InParam, bool ReturnValue);
	void ParseCommandLine(const class FString& InCmdLine, const TArray<class FString>& OutTokens, const TArray<class FString>& OutSwitches, TMap<class FString, class FString> OutParams);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	void NotEqual_SoftObjectReference(TSoftObjectPtr<class UObject> A, TSoftObjectPtr<class UObject> B, bool ReturnValue);
	void NotEqual_SoftClassReference(TSoftClassPtr<class UObject> A, TSoftClassPtr<class UObject> B, bool ReturnValue);
	void NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B, bool ReturnValue);
	void NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B, bool ReturnValue);
	void NormalizeFilename(const class FString& InFilename, const class FString& ReturnValue);
	void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, const struct FLatentActionInfo& LatentInfo, bool bSweep);
	void MakeTopLevelAssetPath(const class FString& PackageName, const class FString& AssetName, const struct FTopLevelAssetPath& ReturnValue);
	void MakeSoftObjectPath(const class FString& PathString, const struct FSoftObjectPath& ReturnValue);
	void MakeSoftClassPath(const class FString& PathString, const struct FSoftClassPath& ReturnValue);
	void MakeLiteralText(class FText Value, class FText ReturnValue);
	void MakeLiteralString(const class FString& Value, const class FString& ReturnValue);
	void MakeLiteralName(class FName Value, class FName ReturnValue);
	void MakeLiteralInt64(int64 Value, int64 ReturnValue);
	void MakeLiteralInt(int32 Value, int32 ReturnValue);
	void MakeLiteralDouble(double Value, double ReturnValue);
	void MakeLiteralByte(uint8 Value, uint8 ReturnValue);
	void MakeLiteralBool(bool Value, bool ReturnValue);
	void MakeARFilter(const TArray<class FName>& PackageNames, const TArray<class FName>& PackagePaths, const TArray<struct FSoftObjectPath>& SoftObjectPaths, const TArray<struct FTopLevelAssetPath>& ClassPaths, TSet<struct FTopLevelAssetPath> RecursiveClassPathsExclusionSet, const TArray<class FName>& ClassNames, TSet<class FName> RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets, const struct FARFilter& ReturnValue);
	void LogString(const class FString& InString, bool bPrintToLog);
	void LoadInterstitialAd(int32 AdIdIndex);
	void LoadClassAsset_Blocking(TSoftClassPtr<class UObject> AssetClass, class UClass* ReturnValue);
	void LoadAssetClass(class UObject* WorldContextObject, TSoftClassPtr<class UObject> AssetClass, FDelegateProperty_ OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void LoadAsset_Blocking(TSoftObjectPtr<class UObject> Asset, class UObject* ReturnValue);
	void LoadAsset(class UObject* WorldContextObject, TSoftObjectPtr<class UObject> Asset, FDelegateProperty_ OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void LaunchURL(const class FString& URL);
	void K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_UnPauseTimerDelegate(FDelegateProperty_ Delegate);
	void K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName);
	void K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle, bool ReturnValue);
	void K2_TimerExistsDelegate(FDelegateProperty_ Delegate, bool ReturnValue);
	void K2_TimerExists(class UObject* Object, const class FString& FunctionName, bool ReturnValue);
	void K2_SetTimerForNextTickDelegate(FDelegateProperty_ Delegate, bool bLooping);
	void K2_SetTimerForNextTick(class UObject* Object, const class FString& FunctionName, bool bLooping);
	void K2_SetTimerDelegate(FDelegateProperty_ Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance, const struct FTimerHandle& ReturnValue);
	void K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance, const struct FTimerHandle& ReturnValue);
	void K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_PauseTimerDelegate(FDelegateProperty_ Delegate);
	void K2_PauseTimer(class UObject* Object, const class FString& FunctionName);
	void K2_IsValidTimerHandle(const struct FTimerHandle& Handle, bool ReturnValue);
	void K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle, bool ReturnValue);
	void K2_IsTimerPausedDelegate(FDelegateProperty_ Delegate, bool ReturnValue);
	void K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName, bool ReturnValue);
	void K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle, bool ReturnValue);
	void K2_IsTimerActiveDelegate(FDelegateProperty_ Delegate, bool ReturnValue);
	void K2_IsTimerActive(class UObject* Object, const class FString& FunctionName, bool ReturnValue);
	void K2_InvalidateTimerHandle(const struct FTimerHandle& Handle, const struct FTimerHandle& ReturnValue);
	void K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle, float ReturnValue);
	void K2_GetTimerRemainingTimeDelegate(FDelegateProperty_ Delegate, float ReturnValue);
	void K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName, float ReturnValue);
	void K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle, float ReturnValue);
	void K2_GetTimerElapsedTimeDelegate(FDelegateProperty_ Delegate, float ReturnValue);
	void K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName, float ReturnValue);
	void K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_ClearTimerDelegate(FDelegateProperty_ Delegate);
	void K2_ClearTimer(class UObject* Object, const class FString& FunctionName);
	void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void IsValidSoftObjectReference(TSoftObjectPtr<class UObject> SoftObjectReference, bool ReturnValue);
	void IsValidSoftClassReference(TSoftClassPtr<class UObject> SoftClassReference, bool ReturnValue);
	void IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType, bool ReturnValue);
	void IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, bool ReturnValue);
	void IsValidClass(class UClass* Class, bool ReturnValue);
	void IsValid(class UObject* Object, bool ReturnValue);
	void IsUnattended(bool ReturnValue);
	void IsStandalone(class UObject* WorldContextObject, bool ReturnValue);
	void IsSplitscreen(class UObject* WorldContextObject, bool ReturnValue);
	void IsServer(class UObject* WorldContextObject, bool ReturnValue);
	void IsScreensaverEnabled(bool ReturnValue);
	void IsRunningOnServer(class UObject* WorldContextObject, enum class ENetworkModeResult OutNetworkMode);
	void IsPackagedForDistribution(bool ReturnValue);
	void IsLoggedIn(class APlayerController* SpecificPlayer, bool ReturnValue);
	void IsListenServer(class UObject* WorldContextObject, bool ReturnValue);
	void IsInterstitialAdRequested(bool ReturnValue);
	void IsInterstitialAdAvailable(bool ReturnValue);
	void IsDedicatedServer(class UObject* WorldContextObject, bool ReturnValue);
	void IsControllerAssignedToGamepad(int32 ControllerId, bool ReturnValue);
	void IsClient(class UObject* WorldContextObject, bool ReturnValue);
	void HideAdBanner();
	void HasMultipleLocalPlayers(class UObject* WorldContextObject, bool ReturnValue);
	void GetVolumeButtonsHandledBySystem(bool ReturnValue);
	void GetUniqueDeviceId(const class FString& ReturnValue);
	void GetSystemPath(class UObject* Object, const class FString& ReturnValue);
	void GetSupportedFullscreenResolutions(const TArray<struct FIntPoint>& Resolutions, bool ReturnValue);
	void GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, TSoftObjectPtr<class UObject> ReturnValue);
	void GetSoftObjectPath(class UObject* Object, const struct FSoftObjectPath& ReturnValue);
	void GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, TSoftClassPtr<class UObject> ReturnValue);
	void GetSoftClassPath(class UClass* Class, const struct FSoftClassPath& ReturnValue);
	void GetRenderingMaterialQualityLevel(int32 ReturnValue);
	void GetRenderingDetailMode(int32 ReturnValue);
	void GetProjectSavedDirectory(const class FString& ReturnValue);
	void GetProjectDirectory(const class FString& ReturnValue);
	void GetProjectContentDirectory(const class FString& ReturnValue);
	void GetPrimaryAssetsWithBundleState(const TArray<class FName>& RequiredBundles, const TArray<class FName>& ExcludedBundles, const TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, const TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList);
	void GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, const TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList);
	void GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<class UObject> SoftObjectReference, const struct FPrimaryAssetId& ReturnValue);
	void GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<class UObject> SoftClassReference, const struct FPrimaryAssetId& ReturnValue);
	void GetPrimaryAssetIdFromObject(class UObject* Object, const struct FPrimaryAssetId& ReturnValue);
	void GetPrimaryAssetIdFromClass(class UClass* Class, const struct FPrimaryAssetId& ReturnValue);
	void GetPreferredLanguages(const TArray<class FString>& ReturnValue);
	void GetPlatformUserName(const class FString& ReturnValue);
	void GetPlatformUserDir(const class FString& ReturnValue);
	void GetPersistentTimeInSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetPathName(class UObject* Object, const class FString& ReturnValue);
	void GetOuterObject(class UObject* Object, class UObject* ReturnValue);
	void GetObjectName(class UObject* Object, const class FString& ReturnValue);
	void GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, class UObject* ReturnValue);
	void GetMinYResolutionForUI(int32 ReturnValue);
	void GetMinYResolutionFor3DView(int32 ReturnValue);
	void GetLocalCurrencySymbol(const class FString& ReturnValue);
	void GetLocalCurrencyCode(const class FString& ReturnValue);
	void GetGameTimeInSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetGamepadControllerName(int32 ControllerId, const class FString& ReturnValue);
	void GetGamepadButtonGlyph(const class FString& ButtonKey, int32 ControllerIndex, class UTexture2D* ReturnValue);
	void GetGameName(const class FString& ReturnValue);
	void GetGameBundleId(const class FString& ReturnValue);
	void GetFrameCount(int64 ReturnValue);
	void GetEngineVersion(const class FString& ReturnValue);
	void GetDisplayName(class UObject* Object, const class FString& ReturnValue);
	void GetDeviceId(const class FString& ReturnValue);
	void GetDefaultLocale(const class FString& ReturnValue);
	void GetDefaultLanguage(const class FString& ReturnValue);
	void GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, const TArray<class FName>& OutBundles, bool ReturnValue);
	void GetConvenientWindowedResolutions(const TArray<struct FIntPoint>& Resolutions, bool ReturnValue);
	void GetConsoleVariableStringValue(const class FString& VariableName, const class FString& ReturnValue);
	void GetConsoleVariableIntValue(const class FString& VariableName, int32 ReturnValue);
	void GetConsoleVariableFloatValue(const class FString& VariableName, float ReturnValue);
	void GetConsoleVariableBoolValue(const class FString& VariableName, bool ReturnValue);
	void GetComponentBounds(class USceneComponent* Component, const struct FVector& Origin, const struct FVector& BoxExtent, float SphereRadius);
	void GetCommandLine(const class FString& ReturnValue);
	void GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, class UClass* ReturnValue);
	void GetClassDisplayName(class UClass* Class, const class FString& ReturnValue);
	void GetBuildVersion(const class FString& ReturnValue);
	void GetBuildConfiguration(const class FString& ReturnValue);
	void GetAdIDCount(int32 ReturnValue);
	void GetActorListFromComponentList(const TArray<class UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, const TArray<class AActor*>& OutActorList);
	void GetActorBounds(class AActor* Actor, const struct FVector& Origin, const struct FVector& BoxExtent);
	void ForceCloseAdBanner();
	void FlushPersistentDebugLines(class UObject* WorldContextObject);
	void FlushDebugStrings(class UObject* WorldContextObject);
	void ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer);
	void EqualEqual_SoftObjectReference(TSoftObjectPtr<class UObject> A, TSoftObjectPtr<class UObject> B, bool ReturnValue);
	void EqualEqual_SoftClassReference(TSoftClassPtr<class UObject> A, TSoftClassPtr<class UObject> B, bool ReturnValue);
	void EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B, bool ReturnValue);
	void EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B, bool ReturnValue);
	void EndTransaction(int32 ReturnValue);
	void DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool bPersistent);
	void DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool bPersistent);
	void DrawDebugLineTraceHitResult(class UObject* WorldContextObject, const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool bPersistent);
	void DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
	void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
	void DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness, bool bPersistent);
	void DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugCircle_Old(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void DrawDebugCapsuleWithExtents(class UObject* WorldContextObject, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool bPersistent);
	void DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness, bool bPersistent);
	void DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
	void DoesImplementInterface(class UObject* TestObject, class UClass* Interface, bool ReturnValue);
	void DelayUntilNextTick(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	void ConvertToRelativePath(const class FString& Filename, const class FString& ReturnValue);
	void ConvertToAbsolutePath(const class FString& Filename, const class FString& ReturnValue);
	void Conv_SoftObjRefToSoftObjPath(TSoftObjectPtr<class UObject> SoftObjectReference, const struct FSoftObjectPath& ReturnValue);
	void Conv_SoftObjRefToSoftClassPath(TSoftClassPtr<class UObject> SoftClassReference, const struct FSoftClassPath& ReturnValue);
	void Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath, TSoftObjectPtr<class UObject> ReturnValue);
	void Conv_SoftObjectReferenceToString(TSoftObjectPtr<class UObject> SoftObjectReference, const class FString& ReturnValue);
	void Conv_SoftObjectReferenceToObject(TSoftObjectPtr<class UObject> SoftObject, class UObject* ReturnValue);
	void Conv_SoftClassReferenceToString(TSoftClassPtr<class UObject> SoftClassReference, const class FString& ReturnValue);
	void Conv_SoftClassReferenceToClass(TSoftClassPtr<class UObject> SoftClass, class UClass* ReturnValue);
	void Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath, TSoftClassPtr<class UObject> ReturnValue);
	void Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType, const class FString& ReturnValue);
	void Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId, const class FString& ReturnValue);
	void Conv_ObjectToSoftObjectReference(class UObject* Object, TSoftObjectPtr<class UObject> ReturnValue);
	void Conv_ObjectToClass(class UObject* Object, class UClass* Class, class UClass* ReturnValue);
	void Conv_InterfaceToObject(TScriptInterface<class IInterface> Interface, class UObject* ReturnValue);
	void Conv_ClassToSoftClassReference(class UClass* Class, TSoftClassPtr<class UObject> ReturnValue);
	void ControlScreensaver(bool bAllowScreenSaver);
	void ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class UPrimitiveComponent*>& OutComponents, bool ReturnValue);
	void ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class AActor*>& OutActors, bool ReturnValue);
	void CollectGarbage();
	void CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class UPrimitiveComponent*>& OutComponents, bool ReturnValue);
	void CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class AActor*>& OutActors, bool ReturnValue);
	void CanRunCosmeticEvents(class UObject* WorldContextObject, enum class ENetworkModeResult OutNetworkMode);
	void CanLaunchURL(const class FString& URL, bool ReturnValue);
	void CancelTransaction(int32 Index);
	void BreakTopLevelAssetPath(const struct FTopLevelAssetPath& TopLevelAssetPath, const class FString& PathString);
	void BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, const class FString& PathString);
	void BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, const class FString& PathString);
	void BreakARFilter(const struct FARFilter& InARFilter, const TArray<class FName>& PackageNames, const TArray<class FName>& PackagePaths, const TArray<struct FSoftObjectPath>& SoftObjectPaths, const TArray<struct FTopLevelAssetPath>& ClassPaths, TSet<struct FTopLevelAssetPath> RecursiveClassPathsExclusionSet, const TArray<class FName>& ClassNames, TSet<class FName> RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets);
	void BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const struct FHitResult& OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, const TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, bool ReturnValue);
	void BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class UPrimitiveComponent*>& OutComponents, bool ReturnValue);
	void BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, const TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, const TArray<class AActor*>& ActorsToIgnore, const TArray<class AActor*>& OutActors, bool ReturnValue);
	void BeginTransaction(const class FString& Context, class FText Description, class UObject* PrimaryObject, int32 ReturnValue);
	void AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory, const struct FDebugFloatHistory& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintPathsLibrary
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBlueprintPathsLibrary* GetDefaultObj();

	void VideoCaptureDir(const class FString& ReturnValue);
	void ValidatePath(const class FString& InPath, bool bDidSucceed, class FText OutReason);
	void Split(const class FString& InPath, const class FString& PathPart, const class FString& FilenamePart, const class FString& ExtensionPart);
	void SourceConfigDir(const class FString& ReturnValue);
	void ShouldSaveToUserDir(bool ReturnValue);
	void ShaderWorkingDir(const class FString& ReturnValue);
	void SetProjectFilePath(const class FString& NewGameProjectFilePath);
	void SetExtension(const class FString& InPath, const class FString& InNewExtension, const class FString& ReturnValue);
	void ScreenShotDir(const class FString& ReturnValue);
	void SandboxesDir(const class FString& ReturnValue);
	void RootDir(const class FString& ReturnValue);
	void RemoveDuplicateSlashes(const class FString& InPath, const class FString& OutPath);
	void ProjectUserDir(const class FString& ReturnValue);
	void ProjectSavedDir(const class FString& ReturnValue);
	void ProjectPluginsDir(const class FString& ReturnValue);
	void ProjectPersistentDownloadDir(const class FString& ReturnValue);
	void ProjectModsDir(const class FString& ReturnValue);
	void ProjectLogDir(const class FString& ReturnValue);
	void ProjectIntermediateDir(const class FString& ReturnValue);
	void ProjectDir(const class FString& ReturnValue);
	void ProjectContentDir(const class FString& ReturnValue);
	void ProjectConfigDir(const class FString& ReturnValue);
	void ProfilingDir(const class FString& ReturnValue);
	void NormalizeFilename(const class FString& InPath, const class FString& OutPath);
	void NormalizeDirectoryName(const class FString& InPath, const class FString& OutPath);
	void MakeValidFileName(const class FString& InString, const class FString& InReplacementChar, const class FString& ReturnValue);
	void MakeStandardFilename(const class FString& InPath, const class FString& OutPath);
	void MakePlatformFilename(const class FString& InPath, const class FString& OutPath);
	void MakePathRelativeTo(const class FString& InPath, const class FString& InRelativeTo, const class FString& OutPath, bool ReturnValue);
	void LaunchDir(const class FString& ReturnValue);
	void IsSamePath(const class FString& PathA, const class FString& PathB, bool ReturnValue);
	void IsRestrictedPath(const class FString& InPath, bool ReturnValue);
	void IsRelative(const class FString& InPath, bool ReturnValue);
	void IsProjectFilePathSet(bool ReturnValue);
	void IsDrive(const class FString& InPath, bool ReturnValue);
	void HasProjectPersistentDownloadDir(bool ReturnValue);
	void GetToolTipLocalizationPaths(const TArray<class FString>& ReturnValue);
	void GetRestrictedFolderNames(const TArray<class FString>& ReturnValue);
	void GetRelativePathToRoot(const class FString& ReturnValue);
	void GetPropertyNameLocalizationPaths(const TArray<class FString>& ReturnValue);
	void GetProjectFilePath(const class FString& ReturnValue);
	void GetPath(const class FString& InPath, const class FString& ReturnValue);
	void GetInvalidFileSystemChars(const class FString& ReturnValue);
	void GetGameLocalizationPaths(const TArray<class FString>& ReturnValue);
	void GetExtension(const class FString& InPath, bool bIncludeDot, const class FString& ReturnValue);
	void GetEngineLocalizationPaths(const TArray<class FString>& ReturnValue);
	void GetEditorLocalizationPaths(const TArray<class FString>& ReturnValue);
	void GetCleanFilename(const class FString& InPath, const class FString& ReturnValue);
	void GetBaseFilename(const class FString& InPath, bool bRemovePath, const class FString& ReturnValue);
	void GeneratedConfigDir(const class FString& ReturnValue);
	void GameUserDeveloperDir(const class FString& ReturnValue);
	void GameSourceDir(const class FString& ReturnValue);
	void GameDevelopersDir(const class FString& ReturnValue);
	void GameAgnosticSavedDir(const class FString& ReturnValue);
	void FileExists(const class FString& InPath, bool ReturnValue);
	void FeaturePackDir(const class FString& ReturnValue);
	void EnterprisePluginsDir(const class FString& ReturnValue);
	void EnterpriseFeaturePackDir(const class FString& ReturnValue);
	void EnterpriseDir(const class FString& ReturnValue);
	void EngineVersionAgnosticUserDir(const class FString& ReturnValue);
	void EngineUserDir(const class FString& ReturnValue);
	void EngineSourceDir(const class FString& ReturnValue);
	void EngineSavedDir(const class FString& ReturnValue);
	void EnginePluginsDir(const class FString& ReturnValue);
	void EngineIntermediateDir(const class FString& ReturnValue);
	void EngineDir(const class FString& ReturnValue);
	void EngineContentDir(const class FString& ReturnValue);
	void EngineConfigDir(const class FString& ReturnValue);
	void DirectoryExists(const class FString& InPath, bool ReturnValue);
	void DiffDir(const class FString& ReturnValue);
	void CreateTempFilename(const class FString& Path, const class FString& Prefix, const class FString& Extension, const class FString& ReturnValue);
	void ConvertToSandboxPath(const class FString& InPath, const class FString& InSandboxName, const class FString& ReturnValue);
	void ConvertRelativePathToFull(const class FString& InPath, const class FString& InBasePath, const class FString& ReturnValue);
	void ConvertFromSandboxPath(const class FString& InPath, const class FString& InSandboxName, const class FString& ReturnValue);
	void Combine(const TArray<class FString>& InPaths, const class FString& ReturnValue);
	void CollapseRelativeDirectories(const class FString& InPath, const class FString& OutPath, bool ReturnValue);
	void CloudDir(const class FString& ReturnValue);
	void ChangeExtension(const class FString& InPath, const class FString& InNewExtension, const class FString& ReturnValue);
	void BugItDir(const class FString& ReturnValue);
	void AutomationTransientDir(const class FString& ReturnValue);
	void AutomationLogDir(const class FString& ReturnValue);
	void AutomationDir(const class FString& ReturnValue);
};

// 0xD0 (0x290 - 0x1C0)
// Class Engine.PlatformGameInstance
class UPlatformGameInstance : public UGameInstance
{
public:
	FMulticastInlineDelegateProperty_            ApplicationWillDeactivateDelegate;                 // 0x1C0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationHasReactivatedDelegate;                 // 0x1D0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationWillEnterBackgroundDelegate;            // 0x1E0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationHasEnteredForegroundDelegate;           // 0x1F0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationWillTerminateDelegate;                  // 0x200(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationShouldUnloadResourcesDelegate;          // 0x210(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationReceivedStartupArgumentsDelegate;       // 0x220(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationRegisteredForRemoteNotificationsDelegate; // 0x230(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationRegisteredForUserNotificationsDelegate; // 0x240(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x250(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationReceivedRemoteNotificationDelegate;     // 0x260(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationReceivedLocalNotificationDelegate;      // 0x270(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x280(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPlatformGameInstance* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintPlatformLibrary
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UBlueprintPlatformLibrary* GetDefaultObj();

	void SetAllowedDeviceOrientation(enum class EScreenOrientation NewAllowedDeviceOrientation);
	void ScheduleLocalNotificationFromNow(int32 InSecondsFromNow, class FText Title, class FText Body, class FText Action, const class FString& ActivationEvent, int32 ReturnValue);
	void ScheduleLocalNotificationBadgeFromNow(int32 InSecondsFromNow, const class FString& ActivationEvent);
	void ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const class FString& ActivationEvent, int32 ReturnValue);
	void ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, class FText Title, class FText Body, class FText Action, const class FString& ActivationEvent, int32 ReturnValue);
	void GetLaunchNotification(bool NotificationLaunchedApp, const class FString& ActivationEvent, int32 FireDate);
	void GetDeviceOrientation(enum class EScreenOrientation ReturnValue);
	void GetAllowedDeviceOrientation(enum class EScreenOrientation ReturnValue);
	void ClearAllLocalNotifications();
	void CancelLocalNotificationById(int32 NotificationID);
	void CancelLocalNotification(const class FString& ActivationEvent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintTypeConversions
class UBlueprintTypeConversions : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBlueprintTypeConversions* GetDefaultObj();

	void ConvertSetType(TSet<int32> Inset, TSet<int32> ReturnValue);
	void ConvertMapType(TMap<int32, int32> InMap, TMap<int32, int32> ReturnValue);
	void ConvertFVector4fToFVector4d(int32 InFromData, int32 ReturnValue);
	void ConvertFVector4dToFVector4f(int32 InFromData, int32 ReturnValue);
	void ConvertFVector3fToFVector3d(int32 InFromData, int32 ReturnValue);
	void ConvertFVector3dToFVector3f(int32 InFromData, int32 ReturnValue);
	void ConvertFVector2fToFVector2d(int32 InFromData, int32 ReturnValue);
	void ConvertFVector2dToFVector2f(int32 InFromData, int32 ReturnValue);
	void ConvertFTransform3fToFTransform3d(int32 InFromData, int32 ReturnValue);
	void ConvertFTransform3dToFTransform3f(int32 InFromData, int32 ReturnValue);
	void ConvertFRotator3fToFRotator3d(int32 InFromData, int32 ReturnValue);
	void ConvertFRotator3dToFRotator3f(int32 InFromData, int32 ReturnValue);
	void ConvertFQuat4fToFQuat4d(int32 InFromData, int32 ReturnValue);
	void ConvertFQuat4dToFQuat4f(int32 InFromData, int32 ReturnValue);
	void ConvertFPlane4fToFPlane4d(int32 InFromData, int32 ReturnValue);
	void ConvertFPlane4dToFPlane4f(int32 InFromData, int32 ReturnValue);
	void ConvertFMatrix44fToFMatrix44d(int32 InFromData, int32 ReturnValue);
	void ConvertFMatrix44dToFMatrix44f(int32 InFromData, int32 ReturnValue);
	void ConvertFBox2fToFBox2d(int32 InFromData, int32 ReturnValue);
	void ConvertFBox2dToFBox2f(int32 InFromData, int32 ReturnValue);
	void ConvertArrayType(const TArray<int32>& InArray, const TArray<int32>& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.ImportanceSamplingLibrary
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UImportanceSamplingLibrary* GetDefaultObj();

	void RandomSobolFloat(int32 Index, int32 Dimension, float Seed, float ReturnValue);
	void RandomSobolCell3D(int32 Index, int32 NumCells, const struct FVector& Cell, const struct FVector& Seed, const struct FVector& ReturnValue);
	void RandomSobolCell2D(int32 Index, int32 NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed, const struct FVector2D& ReturnValue);
	void NextSobolFloat(int32 Index, int32 Dimension, float PreviousValue, float ReturnValue);
	void NextSobolCell3D(int32 Index, int32 NumCells, const struct FVector& PreviousValue, const struct FVector& ReturnValue);
	void NextSobolCell2D(int32 Index, int32 NumCells, const struct FVector2D& PreviousValue, const struct FVector2D& ReturnValue);
	void MakeImportanceTexture(class UTexture2D* Texture, enum class EImportanceWeight WeightingFunc, const struct FImportanceTexture& ReturnValue);
	void ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int32 Samples, float Intensity, const struct FVector2D& SamplePosition, const struct FLinearColor& SampleColor, float SampleIntensity, float SampleSize);
	void BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D* Texture, enum class EImportanceWeight WeightingFunc);
};

// 0x20 (0x48 - 0x28)
// Class Engine.Layer
class ULayer : public UObject
{
public:
	class FName                                  LayerName;                                         // 0x28(0x8)(None)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_2B4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35A7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLayerActorStats>              ActorStats;                                        // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class ULayer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelPartitionInterface
class ILevelPartitionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILevelPartitionInterface* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class Engine.ActorContainer
class UActorContainer : public UObject
{
public:
	TMap<class FName, class AActor*>             Actors;                                            // 0x28(0x50)(None)

	static class UClass* StaticClass();
	static class UActorContainer* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.LevelActorContainer
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                        Actors;                                            // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class ULevelActorContainer* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class Engine.LevelBounds
class ALevelBounds : public AActor
{
public:
	class UBoxComponent*                         BoxComponent;                                      // 0x4B8(0x8)(ZeroConstructor)
	bool                                         bAutoUpdateBounds;                                 // 0x4C0(0x1)(None)
	uint8                                        Pad_35AA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALevelBounds* GetDefaultObj();

};

// 0x90 (0x548 - 0x4B8)
// Class Engine.LevelInstance
class ALevelInstance : public AActor
{
public:
	uint8                                        Pad_35AB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorld>                 CookedWorldAsset;                                  // 0x4C0(0x30)(ZeroConstructor)
	struct FGuid                                 LevelInstanceSpawnGuid;                            // 0x4F0(0x10)(None)
	uint8                                        Pad_35AC[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALevelInstance* GetDefaultObj();

	void OnRep_LevelInstanceSpawnGuid();
};

// 0x8 (0x2D0 - 0x2C8)
// Class Engine.LevelInstanceComponent
class ULevelInstanceComponent : public USceneComponent
{
public:
	uint8                                        Pad_35AD[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelInstanceComponent* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.LevelInstanceEditorInstanceActor
class ALevelInstanceEditorInstanceActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class ALevelInstanceEditorInstanceActor* GetDefaultObj();

};

// 0x0 (0x1C0 - 0x1C0)
// Class Engine.LevelStreamingLevelInstanceEditor
class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded
{
public:

	static class UClass* StaticClass();
	static class ULevelStreamingLevelInstanceEditor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceEditorObject
class ULevelInstanceEditorObject : public UObject
{
public:

	static class UClass* StaticClass();
	static class ULevelInstanceEditorObject* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.LevelInstancePivot
class ALevelInstancePivot : public AActor
{
public:
	uint8                                        Pad_35BA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALevelInstancePivot* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceInterface
class ILevelInstanceInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ILevelInstanceInterface* GetDefaultObj();

};

// 0x20 (0x1E0 - 0x1C0)
// Class Engine.LevelStreamingLevelInstance
class ULevelStreamingLevelInstance : public ULevelStreamingDynamic
{
public:
	uint8                                        Pad_35BF[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelStreamingLevelInstance* GetDefaultObj();

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.LevelInstanceSubsystem
class ULevelInstanceSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_35C0[0x190];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULevelInstanceSubsystem* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.LevelScriptActor
class ALevelScriptActor : public AActor
{
public:
	uint8                                        bInputEnabled : 1;                                 // Mask: 0x1, PropSize: 0x10x4B8(0x1)(None)
	uint8                                        bForceAbsoluteMaxDistance : 1;                     // Mask: 0x2, PropSize: 0x10x4B8(0x1)(None)
	uint8                                        bEnableScriptReplication : 1;                      // Mask: 0x4, PropSize: 0x10x4B8(0x1)(None)
	uint8                                        Pad_35C5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALevelScriptActor* GetDefaultObj();

	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void RemoteEvent(class FName EventName, bool ReturnValue);
	void OnGameStateReady(class AGameState* GameState);
	void LevelReset();
};

// 0x0 (0xA8 - 0xA8)
// Class Engine.LevelScriptBlueprint
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static class UClass* StaticClass();
	static class ULevelScriptBlueprint* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmappedSurfaceCollection
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                SourceModel;                                       // 0x28(0x8)(None)
	TArray<int32>                                Surfaces;                                          // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class ULightmappedSurfaceCollection* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.LightmassCharacterIndirectDetailVolume
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ALightmassCharacterIndirectDetailVolume* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.LightmassImportanceVolume
class ALightmassImportanceVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ALightmassImportanceVolume* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmassPrimitiveSettingsObject
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x28(0x18)(None)

	static class UClass* StaticClass();
	static class ULightmassPrimitiveSettingsObject* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class ULightWeightInstanceBlueprintFunctionLibrary* GetDefaultObj();

	void CreateNewLightWeightInstance(class UClass* ActorClass, const struct FTransform& Transform, class UDataLayerInstance* Layer, class UWorld* World, const struct FActorInstanceHandle& ReturnValue);
	void ConvertActorToLightWeightInstance(class AActor* Actor, const struct FActorInstanceHandle& ReturnValue);
};

// 0x20 (0x48 - 0x28)
// Class Engine.ActorInstanceHandleInterface
class UActorInstanceHandleInterface : public UObject
{
public:
	uint8                                        Pad_35FE[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UActorInstanceHandleInterface* GetDefaultObj();

};

// 0xA0 (0x558 - 0x4B8)
// Class Engine.LightWeightInstanceManager
class ALightWeightInstanceManager : public AActor
{
public:
	uint8                                        Pad_3607[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                RepresentedClass;                                  // 0x4C8(0x8)(ZeroConstructor)
	class UClass*                                AcceptedClass;                                     // 0x4D0(0x8)(ZeroConstructor)
	TArray<struct FTransform>                    InstanceTransforms;                                // 0x4D8(0x10)(None)
	uint8                                        Pad_3608[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                FreeIndices;                                       // 0x538(0x10)(None)
	TArray<bool>                                 ValidIndices;                                      // 0x548(0x10)(None)

	static class UClass* StaticClass();
	static class ALightWeightInstanceManager* GetDefaultObj();

	void OnRep_Transforms();
};

// 0x70 (0x5C8 - 0x558)
// Class Engine.LightWeightInstanceStaticMeshManager
class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager
{
public:
	uint8                                        Pad_3609[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UStaticMesh>            StaticMesh;                                        // 0x560(0x30)(ZeroConstructor)
	class UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;                      // 0x590(0x8)(ZeroConstructor)
	TArray<int32>                                RenderingIndicesToDataIndices;                     // 0x598(0x10)(None)
	TArray<int32>                                DataIndicesToRenderingIndices;                     // 0x5A8(0x10)(None)
	uint8                                        Pad_360A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALightWeightInstanceStaticMeshManager* GetDefaultObj();

	void OnRep_StaticMesh();
};

// 0x10 (0x518 - 0x508)
// Class Engine.LocationVolume
class ALocationVolume : public AVolume
{
public:
	uint8                                        Pad_360C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x510(0x4)(None)
	uint8                                        bIsRuntime : 1;                                    // Mask: 0x1, PropSize: 0x10x514(0x1)(None)
	uint8                                        Pad_360D[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALocationVolume* GetDefaultObj();

	void Unload();
	void Load();
	void IsLoaded(bool ReturnValue);
};

// 0x88 (0x540 - 0x4B8)
// Class Engine.LODActor
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x4B8(0x8)(ZeroConstructor)
	TMap<struct FHLODInstancingKey, class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                     // 0x4C0(0x50)(ZeroConstructor)
	class UHLODProxy*                            Proxy;                                             // 0x510(0x8)(ZeroConstructor)
	class FName                                  Key;                                               // 0x518(0x8)(None)
	float                                        LODDrawDistance;                                   // 0x520(0x4)(None)
	int32                                        LODLevel;                                          // 0x524(0x4)(None)
	TArray<class AActor*>                        SubActors;                                         // 0x528(0x10)(ZeroConstructor)
	uint8                                        CachedNumHLODLevels;                               // 0x538(0x1)(None)
	uint8                                        Pad_3613[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ALODActor* GetDefaultObj();

	void OnSubActorEndPlay(class AActor* Actor, enum class EEndPlayReason Reason);
};

// 0x698 (0x6D8 - 0x40)
// Class Engine.MaterialEditorOnlyData
class UMaterialEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FColorMaterialInput                   BaseColor;                                         // 0x40(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Metallic;                                          // 0x70(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Specular;                                          // 0xA0(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Roughness;                                         // 0xD0(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Anisotropy;                                        // 0x100(0x30)(ZeroConstructor)
	struct FVectorMaterialInput                  Normal;                                            // 0x130(0x38)(ZeroConstructor)
	struct FVectorMaterialInput                  Tangent;                                           // 0x168(0x38)(ZeroConstructor)
	struct FColorMaterialInput                   EmissiveColor;                                     // 0x1A0(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Opacity;                                           // 0x1D0(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  OpacityMask;                                       // 0x200(0x30)(ZeroConstructor)
	struct FVectorMaterialInput                  WorldPositionOffset;                               // 0x230(0x38)(ZeroConstructor)
	struct FColorMaterialInput                   SubsurfaceColor;                                   // 0x268(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  ClearCoat;                                         // 0x298(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  ClearCoatRoughness;                                // 0x2C8(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  AmbientOcclusion;                                  // 0x2F8(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  Refraction;                                        // 0x328(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  SSAOIntensity;                                     // 0x358(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  SSAOInfluence;                                     // 0x388(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  SSAOLightInfluence;                                // 0x3B8(0x30)(ZeroConstructor)
	struct FVector2MaterialInput                 CustomizedUVs[0x8];                                // 0x3E8(0x1C0)(ZeroConstructor)
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0x5A8(0x30)(ZeroConstructor)
	struct FScalarMaterialInput                  PixelDepthOffset;                                  // 0x5D8(0x30)(ZeroConstructor)
	struct FShadingModelMaterialInput            ShadingModelFromMaterialExpression;                // 0x608(0x28)(ZeroConstructor)
	uint8                                        Pad_3616[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FScalarMaterialInput                  SurfaceThickness;                                  // 0x638(0x30)(ZeroConstructor)
	struct FStrataMaterialInput                  FrontMaterial;                                     // 0x668(0x28)(ZeroConstructor)
	uint8                                        Pad_3617[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialExpressionCollection         ExpressionCollection;                              // 0x698(0x30)(None)
	TArray<struct FParameterGroupData>           ParameterGroupData;                                // 0x6C8(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialEditorOnlyData* GetDefaultObj();

};

// 0x178 (0x210 - 0x98)
// Class Engine.Material
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x98(0x8)(ZeroConstructor)
	class UPhysicalMaterialMask*                 PhysMaterialMask;                                  // 0xA0(0x8)(ZeroConstructor)
	class UPhysicalMaterial*                     PhysicalMaterialMap[0x8];                          // 0xA8(0x40)(ZeroConstructor)
	TArray<class UPhysicalMaterial*>             RenderTracePhysicalMaterialOutputs;                // 0xE8(0x10)(ZeroConstructor)
	enum class EMaterialDomain                   MaterialDomain;                                    // 0xF8(0x1)(None)
	enum class EBlendMode                        BlendMode;                                         // 0xF9(0x1)(None)
	enum class EDecalBlendMode                   DecalBlendMode;                                    // 0xFA(0x1)(None)
	enum class EMaterialDecalResponse            MaterialDecalResponse;                             // 0xFB(0x1)(None)
	uint8                                        Pad_361E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialOverrideNanite               NaniteOverrideMaterial;                            // 0x100(0x40)(ZeroConstructor)
	uint32                                       CachedConnectedInputs;                             // 0x140(0x4)(None)
	enum class EMaterialShadingModel             ShadingModel;                                      // 0x144(0x1)(None)
	uint8                                        bCastDynamicShadowAsMasked : 1;                    // Mask: 0x1, PropSize: 0x10x145(0x1)(None)
	uint8                                        BitPad_2BD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FMaterialShadingModelField            ShadingModels;                                     // 0x146(0x2)(None)
	float                                        OpacityMaskClipValue;                              // 0x148(0x4)(None)
	uint8                                        bEnableSeparateTranslucency : 1;                   // Mask: 0x1, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bEnableResponsiveAA : 1;                           // Mask: 0x2, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bScreenSpaceReflections : 1;                       // Mask: 0x4, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bContactShadows : 1;                               // Mask: 0x8, PropSize: 0x10x14C(0x1)(None)
	uint8                                        TwoSided : 1;                                      // Mask: 0x10, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bIsThinSurface : 1;                                // Mask: 0x20, PropSize: 0x10x14C(0x1)(None)
	uint8                                        BitPad_2BE : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_361F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUsedWithCustomDepths : 1;                         // Mask: 0x1, PropSize: 0x10x150(0x1)(None)
	uint8                                        BitPad_2BF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3620[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        DitheredLODTransition : 1;                         // Mask: 0x1, PropSize: 0x10x154(0x1)(None)
	uint8                                        DitherOpacityMask : 1;                             // Mask: 0x2, PropSize: 0x10x154(0x1)(None)
	uint8                                        bAllowNegativeEmissiveColor : 1;                   // Mask: 0x4, PropSize: 0x10x154(0x1)(None)
	uint8                                        BitPad_2C0 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialTranslucencyPass         TranslucencyPass;                                  // 0x155(0x1)(None)
	enum class ETranslucencyLightingMode         TranslucencyLightingMode;                          // 0x156(0x1)(None)
	uint8                                        bEnableMobileSeparateTranslucency : 1;             // Mask: 0x1, PropSize: 0x10x157(0x1)(None)
	uint8                                        bAllowAdditionalSkyLightMultiplier : 1;            // Mask: 0x2, PropSize: 0x10x157(0x1)(None)
	uint8                                        bAllowFullSceneColorTranslucentPath : 1;           // Mask: 0x4, PropSize: 0x10x157(0x1)(None)
	uint8                                        BitPad_2C1 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	int32                                        NumCustomizedUVs;                                  // 0x158(0x4)(None)
	float                                        TranslucencyDirectionalLightingIntensity;          // 0x15C(0x4)(None)
	float                                        TranslucentShadowDensityScale;                     // 0x160(0x4)(None)
	float                                        TranslucentSelfShadowDensityScale;                 // 0x164(0x4)(None)
	float                                        TranslucentSelfShadowSecondDensityScale;           // 0x168(0x4)(None)
	float                                        TranslucentSelfShadowSecondOpacity;                // 0x16C(0x4)(None)
	float                                        TranslucentBackscatteringExponent;                 // 0x170(0x4)(None)
	struct FLinearColor                          TranslucentMultipleScatteringExtinction;           // 0x174(0x10)(None)
	float                                        TranslucentShadowStartOffset;                      // 0x184(0x4)(None)
	uint8                                        bDisableDepthTest : 1;                             // Mask: 0x1, PropSize: 0x10x188(0x1)(None)
	uint8                                        bWriteOnlyAlpha : 1;                               // Mask: 0x2, PropSize: 0x10x188(0x1)(None)
	uint8                                        bGenerateSphericalParticleNormals : 1;             // Mask: 0x4, PropSize: 0x10x188(0x1)(None)
	uint8                                        bTangentSpaceNormal : 1;                           // Mask: 0x8, PropSize: 0x10x188(0x1)(None)
	uint8                                        bUseEmissiveForDynamicAreaLighting : 1;            // Mask: 0x10, PropSize: 0x10x188(0x1)(None)
	uint8                                        bUsedAsSpecialEngineMaterial : 1;                  // Mask: 0x20, PropSize: 0x10x188(0x1)(None)
	uint8                                        bUsedWithSkeletalMesh : 1;                         // Mask: 0x40, PropSize: 0x10x188(0x1)(None)
	uint8                                        bUsedWithEditorCompositing : 1;                    // Mask: 0x80, PropSize: 0x10x188(0x1)(None)
	uint8                                        bUsedWithParticleSprites : 1;                      // Mask: 0x1, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithBeamTrails : 1;                           // Mask: 0x2, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithMeshParticles : 1;                        // Mask: 0x4, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithNiagaraSprites : 1;                       // Mask: 0x8, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithNiagaraRibbons : 1;                       // Mask: 0x10, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithNiagaraMeshParticles : 1;                 // Mask: 0x20, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithGeometryCache : 1;                        // Mask: 0x40, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithStaticLighting : 1;                       // Mask: 0x80, PropSize: 0x10x189(0x1)(None)
	uint8                                        bUsedWithMorphTargets : 1;                         // Mask: 0x1, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bUsedWithSplineMeshes : 1;                         // Mask: 0x2, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bUsedWithInstancedStaticMeshes : 1;                // Mask: 0x4, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bUsedWithGeometryCollections : 1;                  // Mask: 0x8, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bUsesDistortion : 1;                               // Mask: 0x10, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bRootNodeOverridesDefaultDistortion : 1;           // Mask: 0x20, PropSize: 0x10x18A(0x1)(None)
	uint8                                        bUsedWithClothing : 1;                             // Mask: 0x40, PropSize: 0x10x18A(0x1)(None)
	uint8                                        BitPad_2C2 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3621[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUsedWithWater : 1;                                // Mask: 0x1, PropSize: 0x10x18C(0x1)(None)
	uint8                                        bUsedWithHairStrands : 1;                          // Mask: 0x2, PropSize: 0x10x18C(0x1)(None)
	uint8                                        bUsedWithLidarPointCloud : 1;                      // Mask: 0x4, PropSize: 0x10x18C(0x1)(None)
	uint8                                        bUsedWithVirtualHeightfieldMesh : 1;               // Mask: 0x8, PropSize: 0x10x18C(0x1)(None)
	uint8                                        bUsedWithNanite : 1;                               // Mask: 0x10, PropSize: 0x10x18C(0x1)(None)
	uint8                                        bUsedWithVolumetricCloud : 1;                      // Mask: 0x20, PropSize: 0x10x18C(0x1)(None)
	uint8                                        BitPad_2C3 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3622[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUsedWithUI : 1;                                   // Mask: 0x1, PropSize: 0x10x190(0x1)(None)
	uint8                                        bAutomaticallySetUsageInEditor : 1;                // Mask: 0x2, PropSize: 0x10x190(0x1)(None)
	uint8                                        bFullyRough : 1;                                   // Mask: 0x4, PropSize: 0x10x190(0x1)(None)
	uint8                                        bUseFullPrecision : 1;                             // Mask: 0x8, PropSize: 0x10x190(0x1)(None)
	uint8                                        BitPad_2C4 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialFloatPrecisionMode       FloatPrecisionMode;                                // 0x191(0x1)(None)
	uint8                                        bUseLightmapDirectionality : 1;                    // Mask: 0x1, PropSize: 0x10x192(0x1)(None)
	uint8                                        bMobileEnableHighQualityBRDF : 1;                  // Mask: 0x2, PropSize: 0x10x192(0x1)(None)
	uint8                                        bUseAlphaToCoverage : 1;                           // Mask: 0x4, PropSize: 0x10x192(0x1)(None)
	uint8                                        BitPad_2C5 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3623[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForwardRenderUsePreintegratedGFForSimpleIBL : 1;  // Mask: 0x1, PropSize: 0x10x194(0x1)(None)
	uint8                                        BitPad_2C6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3624[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseHQForwardReflections : 1;                      // Mask: 0x1, PropSize: 0x10x198(0x1)(None)
	uint8                                        bForwardBlendsSkyLightCubemaps : 1;                // Mask: 0x2, PropSize: 0x10x198(0x1)(None)
	uint8                                        bUsePlanarForwardReflections : 1;                  // Mask: 0x4, PropSize: 0x10x198(0x1)(None)
	uint8                                        bNormalCurvatureToRoughness : 1;                   // Mask: 0x8, PropSize: 0x10x198(0x1)(None)
	uint8                                        AllowTranslucentCustomDepthWrites : 1;             // Mask: 0x10, PropSize: 0x10x198(0x1)(None)
	uint8                                        bAllowFrontLayerTranslucency : 1;                  // Mask: 0x20, PropSize: 0x10x198(0x1)(None)
	uint8                                        Wireframe : 1;                                     // Mask: 0x40, PropSize: 0x10x198(0x1)(None)
	uint8                                        BitPad_2C7 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialShadingRate              ShadingRate;                                       // 0x199(0x1)(None)
	uint8                                        bCanMaskedBeAssumedOpaque : 1;                     // Mask: 0x1, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bIsMasked : 1;                                     // Mask: 0x2, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bIsPreviewMaterial : 1;                            // Mask: 0x4, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bIsFunctionPreviewMaterial : 1;                    // Mask: 0x8, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bUseMaterialAttributes : 1;                        // Mask: 0x10, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bEnableExecWire : 1;                               // Mask: 0x20, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bEnableNewHLSLGenerator : 1;                       // Mask: 0x40, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bCastRayTracedShadows : 1;                         // Mask: 0x80, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bUseTranslucencyVertexFog : 1;                     // Mask: 0x1, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bApplyCloudFogging : 1;                            // Mask: 0x2, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bIsSky : 1;                                        // Mask: 0x4, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bComputeFogPerPixel : 1;                           // Mask: 0x8, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bOutputTranslucentVelocity : 1;                    // Mask: 0x10, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bAllowDevelopmentShaderCompile : 1;                // Mask: 0x20, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bIsMaterialEditorStatsMaterial : 1;                // Mask: 0x40, PropSize: 0x10x19B(0x1)(None)
	uint8                                        BitPad_2C8 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EBlendableLocation                BlendableLocation;                                 // 0x19C(0x1)(None)
	uint8                                        BlendableOutputAlpha : 1;                          // Mask: 0x1, PropSize: 0x10x19D(0x1)(None)
	uint8                                        bEnableStencilTest : 1;                            // Mask: 0x2, PropSize: 0x10x19D(0x1)(None)
	uint8                                        BitPad_2C9 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialStencilCompare           StencilCompare;                                    // 0x19E(0x1)(None)
	uint8                                        StencilRefValue;                                   // 0x19F(0x1)(None)
	enum class ERefractionMode                   RefractionMode;                                    // 0x1A0(0x1)(None)
	enum class ERefractionMode                   RefractionMethod;                                  // 0x1A1(0x1)(None)
	uint8                                        Pad_3626[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlendablePriority;                                 // 0x1A4(0x4)(None)
	uint8                                        bIsBlendable : 1;                                  // Mask: 0x1, PropSize: 0x10x1A8(0x1)(None)
	uint8                                        BitPad_2CA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3627[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UsageFlagWarnings;                                 // 0x1AC(0x4)(None)
	float                                        RefractionDepthBias;                               // 0x1B0(0x4)(None)
	float                                        MaxWorldPositionOffsetDisplacement;                // 0x1B4(0x4)(None)
	uint8                                        Pad_3628[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 StateId;                                           // 0x1BC(0x10)(None)
	uint8                                        Pad_3629[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SSRQuality;                                        // 0x1FC(0x4)(None)
	class FString                                CustomMainCode;                                    // 0x200(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterial* GetDefaultObj();

};

// 0xA0 (0xE0 - 0x40)
// Class Engine.MaterialInstanceEditorOnlyData
class UMaterialInstanceEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FStaticParameterSetEditorOnlyData     StaticParameters;                                  // 0x40(0xA0)(None)

	static class UClass* StaticClass();
	static class UMaterialInstanceEditorOnlyData* GetDefaultObj();

};

// 0x50 (0x280 - 0x230)
// Class Engine.MaterialInstanceDynamic
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	uint8                                        Pad_363B[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialInstanceDynamic* GetDefaultObj();

	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value);
	void SetTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetSparseVolumeTextureParameterValue(class FName ParameterName, class USparseVolumeTexture* Value);
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetScalarParameterByIndex(int32 ParameterIndex, float Value, bool ReturnValue);
	void SetRuntimeVirtualTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture* Value);
	void SetRuntimeVirtualTextureParameterValue(class FName ParameterName, class URuntimeVirtualTexture* Value);
	void SetDoubleVectorParameterValue(class FName ParameterName, const struct FVector4& Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	void K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& ReturnValue);
	void K2_GetVectorParameterValue(class FName ParameterName, const struct FLinearColor& ReturnValue);
	void K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* ReturnValue);
	void K2_GetTextureParameterValue(class FName ParameterName, class UTexture* ReturnValue);
	void K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float ReturnValue);
	void K2_GetScalarParameterValue(class FName ParameterName, float ReturnValue);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);
	void InitializeScalarParameterAndGetIndex(class FName ParameterName, float Value, int32 OutParameterIndex, bool ReturnValue);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* Source);
};

// 0x48 (0x70 - 0x28)
// Class Engine.MaterialParameterCollection
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(None)
	TArray<struct FCollectionScalarParameter>    ScalarParameters;                                  // 0x38(0x10)(None)
	TArray<struct FCollectionVectorParameter>    VectorParameters;                                  // 0x48(0x10)(None)
	uint8                                        Pad_3642[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialParameterCollection* GetDefaultObj();

	void GetVectorParameterNames(const TArray<class FName>& ReturnValue);
	void GetVectorParameterDefaultValue(class FName ParameterName, bool bParameterFound, const struct FLinearColor& ReturnValue);
	void GetScalarParameterNames(const TArray<class FName>& ReturnValue);
	void GetScalarParameterDefaultValue(class FName ParameterName, bool bParameterFound, float ReturnValue);
};

// 0x0 (0x508 - 0x508)
// Class Engine.MeshMergeCullingVolume
class AMeshMergeCullingVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AMeshMergeCullingVolume* GetDefaultObj();

};

// 0x10 (0x48 - 0x38)
// Class Engine.MeshSimplificationSettings
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  MeshReductionModuleName;                           // 0x38(0x8)(None)
	bool                                         bMeshReductionBackwardCompatible;                  // 0x40(0x1)(None)
	uint8                                        Pad_3644[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMeshSimplificationSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshVertexPainterKismetLibrary
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UMeshVertexPainterKismetLibrary* GetDefaultObj();

	void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);
	void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB);
};

// 0x248 (0x270 - 0x28)
// Class Engine.Model
class UModel : public UObject
{
public:
	uint8                                        Pad_364A[0x248];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UModel* GetDefaultObj();

};

// 0x28 (0x4E0 - 0x4B8)
// Class Engine.NavigationObjectBase
class ANavigationObjectBase : public AActor
{
public:
	uint8                                        Pad_364B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x4C0(0x8)(ZeroConstructor)
	class UBillboardComponent*                   GoodSprite;                                        // 0x4C8(0x8)(ZeroConstructor)
	class UBillboardComponent*                   BadSprite;                                         // 0x4D0(0x8)(ZeroConstructor)
	uint8                                        bIsPIEPlayerStart : 1;                             // Mask: 0x1, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        Pad_364C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANavigationObjectBase* GetDefaultObj();

};

// 0x0 (0x1DE8 - 0x1DE8)
// Class Engine.SimulatedClientNetConnection
class USimulatedClientNetConnection : public UNetConnection
{
public:

	static class UClass* StaticClass();
	static class USimulatedClientNetConnection* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.NetworkSettings
class UNetworkSettings : public UDeveloperSettings
{
public:
	uint8                                        bVerifyPeer : 1;                                   // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        bEnableMultiplayerWorldOriginRebasing : 1;         // Mask: 0x2, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_2CB : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_364D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                          // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class UNetworkSettings* GetDefaultObj();

};

// 0x20 (0x4D8 - 0x4B8)
// Class Engine.BandwidthTestActor
class ABandwidthTestActor : public AActor
{
public:
	struct FBandwidthTestGenerator               BandwidthGenerator;                                // 0x4B8(0x20)(None)

	static class UClass* StaticClass();
	static class ABandwidthTestActor* GetDefaultObj();

};

// 0x2030 (0x20A0 - 0x70)
// Class Engine.DataStreamChannel
class UDataStreamChannel : public UChannel
{
public:
	uint8                                        Pad_364E[0x2030];                                  // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataStreamChannel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorReplicationBridge
class UActorReplicationBridge : public UObjectReplicationBridge
{
public:

	static class UClass* StaticClass();
	static class UActorReplicationBridge* GetDefaultObj();

};

// 0x0 (0x88 - 0x88)
// Class Engine.NetFaultConfig
class UNetFaultConfig : public UEscalationManagerConfig
{
public:

	static class UClass* StaticClass();
	static class UNetFaultConfig* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NetPushModelHelpers
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UNetPushModelHelpers* GetDefaultObj();

	void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32 RepIndex, class FName PropertyName);
	void MarkPropertyDirty(class UObject* Object, class FName PropertyName);
};

// 0x60 (0x88 - 0x28)
// Class Engine.RPCDoSDetectionConfig
class URPCDoSDetectionConfig : public UObject
{
public:
	bool                                         bRPCDoSDetection;                                  // 0x28(0x1)(None)
	bool                                         bRPCDoSAnalytics;                                  // 0x29(0x1)(None)
	uint8                                        Pad_3657[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HitchTimeQuotaMS;                                  // 0x2C(0x4)(None)
	int32                                        HitchSuspendDetectionTimeMS;                       // 0x30(0x4)(None)
	uint8                                        Pad_3658[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        DetectionSeverity;                                 // 0x38(0x10)(None)
	int32                                        InitialConnectToleranceMS;                         // 0x48(0x4)(None)
	uint8                                        Pad_3659[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          RPCBlockWhitelist;                                 // 0x50(0x10)(None)
	TArray<class FName>                          RPCBlockAllowlist;                                 // 0x60(0x10)(None)
	TArray<struct FRPCAnalyticsThreshold>        RPCAnalyticsThresholds;                            // 0x70(0x10)(None)
	double                                       RPCAnalyticsOverrideChance;                        // 0x80(0x8)(None)

	static class UClass* StaticClass();
	static class URPCDoSDetectionConfig* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class Engine.NetworkSubsystem
class UNetworkSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_365A[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNetworkSubsystem* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class Engine.ObjectLibrary
class UObjectLibrary : public UObject
{
public:
	class UClass*                                ObjectBaseClass;                                   // 0x28(0x8)(ZeroConstructor)
	bool                                         bHasBlueprintClasses;                              // 0x30(0x1)(None)
	uint8                                        Pad_365D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       Objects;                                           // 0x38(0x10)(ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>        WeakObjects;                                       // 0x48(0x10)(None)
	bool                                         bUseWeakReferences;                                // 0x58(0x1)(None)
	bool                                         bIsFullyLoaded;                                    // 0x59(0x1)(None)
	uint8                                        Pad_365E[0x4E];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectLibrary* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.ObjectReferencer
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                       ReferencedObjects;                                 // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UObjectReferencer* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ObjectTraceWorldSubsystem
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_3660[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObjectTraceWorldSubsystem* GetDefaultObj();

};

// 0x328 (0x408 - 0xE0)
// Class Engine.PackageMapClient
class UPackageMapClient : public UPackageMap
{
public:
	uint8                                        Pad_3662[0x328];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPackageMapClient* GetDefaultObj();

};

// 0x0 (0x548 - 0x548)
// Class Engine.PackedLevelActor
class APackedLevelActor : public ALevelInstance
{
public:

	static class UClass* StaticClass();
	static class APackedLevelActor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineHandlerComponentFactory
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static class UClass* StaticClass();
	static class UEngineHandlerComponentFactory* GetDefaultObj();

};

// 0x48 (0x570 - 0x528)
// Class Engine.PainCausingVolume
class APainCausingVolume : public APhysicsVolume
{
public:
	uint8                                        bPainCausing : 1;                                  // Mask: 0x1, PropSize: 0x10x528(0x1)(None)
	uint8                                        BitPad_2CC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3667[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamagePerSec;                                      // 0x52C(0x4)(None)
	class UClass*                                DamageType;                                        // 0x530(0x8)(ZeroConstructor)
	float                                        PainInterval;                                      // 0x538(0x4)(None)
	uint8                                        bEntryPain : 1;                                    // Mask: 0x1, PropSize: 0x10x53C(0x1)(None)
	uint8                                        bPainWalkingOnly : 1;                              // Mask: 0x2, PropSize: 0x10x53C(0x1)(None)
	uint8                                        bTriggerUndermeshDetection : 1;                    // Mask: 0x4, PropSize: 0x10x53C(0x1)(None)
	uint8                                        bContainsMultipleOverlapComponents : 1;            // Mask: 0x8, PropSize: 0x10x53C(0x1)(None)
	uint8                                        bIgnoreWildDinos : 1;                              // Mask: 0x10, PropSize: 0x10x53C(0x1)(None)
	uint8                                        BACKUP_bPainCausing : 1;                           // Mask: 0x20, PropSize: 0x10x53C(0x1)(None)
	uint8                                        BitPad_2CD : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_366A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class AActor>>          ActorClassesToExclude;                             // 0x540(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class AActor>>          ActorClassesToInclude;                             // 0x550(0x10)(ZeroConstructor)
	class AController*                           DamageInstigator;                                  // 0x560(0x8)(ZeroConstructor)
	uint8                                        Pad_366C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APainCausingVolume* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.ParticleEventManager
class AParticleEventManager : public AActor
{
public:

	static class UClass* StaticClass();
	static class AParticleEventManager* GetDefaultObj();

};

// 0x28 (0xE0 - 0xB8)
// Class Engine.AsyncPhysicsInputComponent
class UAsyncPhysicsInputComponent : public UActorComponent
{
public:
	class UClass*                                DataClass;                                         // 0xB8(0x8)(ZeroConstructor)
	TArray<class UAsyncPhysicsData*>             BufferedData;                                      // 0xC0(0x10)(ZeroConstructor)
	class UAsyncPhysicsData*                     DataToConsume;                                     // 0xD0(0x8)(ZeroConstructor)
	class UAsyncPhysicsData*                     DataToWrite;                                       // 0xD8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UAsyncPhysicsInputComponent* GetDefaultObj();

	void ServerRPCBufferInput(class UAsyncPhysicsData* AsyncPhysicsData);
	void GetDataToWrite(class UAsyncPhysicsData* ReturnValue);
	void GetDataToConsume(class UAsyncPhysicsData* ReturnValue);
};

// 0x260 (0x298 - 0x38)
// Class Engine.BodySetup
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                       AggGeom;                                           // 0x38(0x68)(None)
	uint8                                        bAlwaysFullAnimWeight : 1;                         // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bConsiderForBounds : 1;                            // Mask: 0x2, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bMeshCollideAll : 1;                               // Mask: 0x4, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bDoubleSidedGeometry : 1;                          // Mask: 0x8, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bGenerateNonMirroredCollision : 1;                 // Mask: 0x10, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bSharedCookedData : 1;                             // Mask: 0x20, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bGenerateMirroredCollision : 1;                    // Mask: 0x40, PropSize: 0x10xA0(0x1)(None)
	uint8                                        bSupportUVsAndFaceRemap : 1;                       // Mask: 0x80, PropSize: 0x10xA0(0x1)(None)
	uint8                                        BitPad_2CE : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNeverNeedsCookedCollisionData : 1;                // Mask: 0x8, PropSize: 0x10xA1(0x1)(None)
	uint8                                        BitPad_2CF : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3670[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0xA8(0x8)(ZeroConstructor)
	struct FWalkableSlopeOverride                WalkableSlopeOverride;                             // 0xB0(0x10)(None)
	uint8                                        Pad_3671[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         DefaultInstance;                                   // 0x130(0x138)(None)
	uint8                                        Pad_3672[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BuildScale3D;                                      // 0x270(0x18)(None)
	uint8                                        Pad_3673[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBodySetup* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ConstraintInstanceBlueprintLibrary
class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UConstraintInstanceBlueprintLibrary* GetDefaultObj();

	void SetProjectionParams(const struct FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha);
	void SetParentDominates(const struct FConstraintInstanceAccessor& Accessor, bool bParentDominates);
	void SetOrientationDriveTwistAndSwing(const struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(const struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP);
	void SetMassConditioningEnabled(const struct FConstraintInstanceAccessor& Accessor, bool bEnableMassConditioning);
	void SetLinearVelocityTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(const struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearSoftLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance);
	void SetLinearPositionTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& InPosTarget);
	void SetLinearPositionDrive(const struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPlasticity(const struct FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType);
	void SetLinearLimits(const struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion XMotion, enum class ELinearConstraintMotion YMotion, enum class ELinearConstraintMotion ZMotion, float Limit);
	void SetLinearDriveParams(const struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearBreakable(const struct FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold);
	void SetDisableCollision(const struct FConstraintInstanceAccessor& Accessor, bool bDisableCollision);
	void SetContactTransferScale(const struct FConstraintInstanceAccessor& Accessor, float ContactTransferScale);
	void SetAngularVelocityTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(const struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(const struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP);
	void SetAngularSoftTwistLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance);
	void SetAngularSoftSwingLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance);
	void SetAngularPlasticity(const struct FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold);
	void SetAngularOrientationTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FRotator& InPosTarget);
	void SetAngularLimits(const struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion Swing1MotionType, float Swing1LimitAngle, enum class EAngularConstraintMotion Swing2MotionType, float Swing2LimitAngle, enum class EAngularConstraintMotion TwistMotionType, float TwistLimitAngle);
	void SetAngularDriveParams(const struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(const struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode DriveMode);
	void SetAngularBreakable(const struct FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold);
	void GetProjectionParams(const struct FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha);
	void GetParentDominates(const struct FConstraintInstanceAccessor& Accessor, bool ReturnValue);
	void GetOrientationDriveTwistAndSwing(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableTwistDrive, bool bOutEnableSwingDrive);
	void GetOrientationDriveSLERP(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableSLERP);
	void GetMassConditioningEnabled(const struct FConstraintInstanceAccessor& Accessor, bool ReturnValue);
	void GetLinearVelocityTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& OutVelTarget);
	void GetLinearVelocityDrive(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableDriveX, bool bOutEnableDriveY, bool bOutEnableDriveZ);
	void GetLinearSoftLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance);
	void GetLinearPositionTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& OutPosTarget);
	void GetLinearPositionDrive(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableDriveX, bool bOutEnableDriveY, bool bOutEnableDriveZ);
	void GetLinearPlasticity(const struct FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType);
	void GetLinearLimits(const struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion XMotion, enum class ELinearConstraintMotion YMotion, enum class ELinearConstraintMotion ZMotion, float Limit);
	void GetLinearDriveParams(const struct FConstraintInstanceAccessor& Accessor, float OutPositionStrength, float OutVelocityStrength, float OutForceLimit);
	void GetLinearBreakable(const struct FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold);
	void GetDisableCollsion(const struct FConstraintInstanceAccessor& Accessor, bool ReturnValue);
	void GetContactTransferScale(const struct FConstraintInstanceAccessor& Accessor, float ContactTransferScale);
	void GetAttachedBodyNames(const struct FConstraintInstanceAccessor& Accessor, class FName ParentBody, class FName ChildBody);
	void GetAngularVelocityTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FVector& OutVelTarget);
	void GetAngularVelocityDriveTwistAndSwing(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableTwistDrive, bool bOutEnableSwingDrive);
	void GetAngularVelocityDriveSLERP(const struct FConstraintInstanceAccessor& Accessor, bool bOutEnableSLERP);
	void GetAngularSoftTwistLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance);
	void GetAngularSoftSwingLimitParams(const struct FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance);
	void GetAngularPlasticity(const struct FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold);
	void GetAngularOrientationTarget(const struct FConstraintInstanceAccessor& Accessor, const struct FRotator& OutPosTarget);
	void GetAngularLimits(const struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion Swing1MotionType, float Swing1LimitAngle, enum class EAngularConstraintMotion Swing2MotionType, float Swing2LimitAngle, enum class EAngularConstraintMotion TwistMotionType, float TwistLimitAngle);
	void GetAngularDriveParams(const struct FConstraintInstanceAccessor& Accessor, float OutPositionStrength, float OutVelocityStrength, float OutForceLimit);
	void GetAngularDriveMode(const struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode OutDriveMode);
	void GetAngularBreakable(const struct FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold);
	void CopyParams(const struct FConstraintInstanceAccessor& Accessor, const struct FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation);
};

// 0x40 (0xF8 - 0xB8)
// Class Engine.PhysicalAnimationComponent
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                        StrengthMultiplyer;                                // 0xB8(0x4)(None)
	uint8                                        Pad_376F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0xC0(0x8)(ZeroConstructor)
	uint8                                        Pad_3770[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicalAnimationComponent* GetDefaultObj();

	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void GetBodyTargetTransform(class FName BodyName, const struct FTransform& ReturnValue);
	void ApplyPhysicalAnimationSettingsBelow(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(class FName BodyName, class FName ProfileName, bool bIncludeSelf, bool bClearNotFound);
};

// 0x10 (0x38 - 0x28)
// Class Engine.PhysicalMaterialMask
class UPhysicalMaterialMask : public UObject
{
public:
	int32                                        UVChannelIndex;                                    // 0x28(0x4)(None)
	enum class ETextureAddress                   AddressX;                                          // 0x2C(0x1)(None)
	enum class ETextureAddress                   AddressY;                                          // 0x2D(0x1)(None)
	uint8                                        Pad_3771[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicalMaterialMask* GetDefaultObj();

};

// 0x128 (0x150 - 0x28)
// Class Engine.PhysicsAsset
class UPhysicsAsset : public UObject
{
public:
	uint8                                        Pad_3772[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                BoundsBodies;                                      // 0x30(0x10)(None)
	TArray<class USkeletalBodySetup*>            SkeletalBodySetups;                                // 0x40(0x10)(ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>    ConstraintSetup;                                   // 0x50(0x10)(ZeroConstructor)
	struct FPhysicsAssetSolverSettings           SolverSettings;                                    // 0x60(0x1C)(None)
	struct FSolverIterations                     SolverIterations;                                  // 0x7C(0x18)(None)
	enum class EPhysicsAssetSolverType           SolverType;                                        // 0x94(0x1)(None)
	uint8                                        bNotForDedicatedServer : 1;                        // Mask: 0x1, PropSize: 0x10x95(0x1)(None)
	uint8                                        BitPad_2D1 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3773[0xA2];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UThumbnailInfo*                        ThumbnailInfo;                                     // 0x138(0x8)(ZeroConstructor)
	TArray<class UBodySetup*>                    BodySetup;                                         // 0x140(0x10)(None)

	static class UClass* StaticClass();
	static class UPhysicsAsset* GetDefaultObj();

};

// 0x18 (0x2B0 - 0x298)
// Class Engine.SkeletalBodySetup
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                         bSkipScaleFromAnimation;                           // 0x298(0x1)(None)
	uint8                                        Pad_3774[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPhysicalAnimationProfile>     PhysicalAnimationData;                             // 0x2A0(0x10)(None)

	static class UClass* StaticClass();
	static class USkeletalBodySetup* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.PhysicsCollisionHandler
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                        ImpactThreshold;                                   // 0x28(0x4)(None)
	float                                        ImpactReFireDelay;                                 // 0x2C(0x4)(None)
	class USoundBase*                            DefaultImpactSound;                                // 0x30(0x8)(None)
	float                                        LastImpactSoundTime;                               // 0x38(0x4)(None)
	uint8                                        Pad_3775[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsCollisionHandler* GetDefaultObj();

};

// 0x20 (0x4D8 - 0x4B8)
// Class Engine.PhysicsConstraintActor
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*           ConstraintComp;                                    // 0x4B8(0x8)(ZeroConstructor)
	class AActor*                                ConstraintActor1;                                  // 0x4C0(0x8)(ZeroConstructor)
	class AActor*                                ConstraintActor2;                                  // 0x4C8(0x8)(ZeroConstructor)
	uint8                                        bDisableCollision : 1;                             // Mask: 0x1, PropSize: 0x10x4D0(0x1)(None)
	uint8                                        Pad_3776[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APhysicsConstraintActor* GetDefaultObj();

};

// 0x2D8 (0x5A0 - 0x2C8)
// Class Engine.PhysicsConstraintComponent
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                ConstraintActor1;                                  // 0x2C8(0x8)(ZeroConstructor)
	struct FConstrainComponentPropName           ComponentName1;                                    // 0x2D0(0x8)(None)
	class AActor*                                ConstraintActor2;                                  // 0x2D8(0x8)(ZeroConstructor)
	struct FConstrainComponentPropName           ComponentName2;                                    // 0x2E0(0x8)(None)
	uint8                                        Pad_3789[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsConstraintTemplate*            ConstraintSetup;                                   // 0x2F8(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnConstraintBroken;                                // 0x300(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPlasticDeformation;                              // 0x310(0x10)(ZeroConstructor)
	struct FConstraintInstance                   ConstraintInstance;                                // 0x320(0x278)(None)
	uint8                                        Pad_378A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsConstraintComponent* GetDefaultObj();

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
	void SetDisableCollision(bool bDisableCollision);
	void SetContactTransferScale(float ContactTransferScale);
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, class FName BoneName1, class UPrimitiveComponent* Component2, class FName BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle);
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode);
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
	void IsBroken(bool ReturnValue);
	void GetCurrentTwist(float ReturnValue);
	void GetCurrentSwing2(float ReturnValue);
	void GetCurrentSwing1(float ReturnValue);
	void GetConstraintForce(const struct FVector& OutLinearForce, const struct FVector& OutAngularForce);
	void GetConstraint(const struct FConstraintInstanceAccessor& ReturnValue);
	void GetConstrainedComponents(class UPrimitiveComponent* OutComponent1, class FName OutBoneName1, class UPrimitiveComponent* OutComponent2, class FName OutBoneName2);
	void BreakConstraint();
};

// 0x3E8 (0x410 - 0x28)
// Class Engine.PhysicsConstraintTemplate
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                   DefaultInstance;                                   // 0x28(0x278)(None)
	TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;                                    // 0x2A0(0x10)(None)
	struct FConstraintProfileProperties          DefaultProfile;                                    // 0x2B0(0x160)(None)

	static class UClass* StaticClass();
	static class UPhysicsConstraintTemplate* GetDefaultObj();

};

// 0x438 (0x4F0 - 0xB8)
// Class Engine.PhysicsHandleComponent
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                   GrabbedComponent;                                  // 0xB8(0x8)(ZeroConstructor)
	uint8                                        Pad_378D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_2D2 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSoftAngularConstraint : 1;                        // Mask: 0x2, PropSize: 0x10xC8(0x1)(None)
	uint8                                        bSoftLinearConstraint : 1;                         // Mask: 0x4, PropSize: 0x10xC8(0x1)(None)
	uint8                                        bInterpolateTarget : 1;                            // Mask: 0x8, PropSize: 0x10xC8(0x1)(None)
	uint8                                        BitPad_2D3 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_378E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LinearDamping;                                     // 0xCC(0x4)(None)
	float                                        LinearStiffness;                                   // 0xD0(0x4)(None)
	float                                        AngularDamping;                                    // 0xD4(0x4)(None)
	float                                        AngularStiffness;                                  // 0xD8(0x4)(None)
	uint8                                        Pad_378F[0xC4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpolationSpeed;                                // 0x1A0(0x4)(None)
	uint8                                        Pad_3790[0x34C];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsHandleComponent* GetDefaultObj();

	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation);
	void GrabComponent(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(const struct FVector& TargetLocation, const struct FRotator& TargetRotation);
	void GetGrabbedComponent(class UPrimitiveComponent* ReturnValue);
};

// 0x100 (0x1E0 - 0xE0)
// Class Engine.PhysicsSettings
class UPhysicsSettings : public UPhysicsSettingsCore
{
public:
	struct FRigidBodyErrorCorrection             PhysicErrorCorrection;                             // 0xE0(0x34)(None)
	enum class ESettingsLockedAxis               LockedAxis;                                        // 0x114(0x1)(None)
	enum class ESettingsDOF                      DefaultDegreesOfFreedom;                           // 0x115(0x1)(None)
	bool                                         bSuppressFaceRemapTable;                           // 0x116(0x1)(None)
	bool                                         bSupportUVFromHitResults;                          // 0x117(0x1)(None)
	bool                                         bDisableActiveActors;                              // 0x118(0x1)(None)
	bool                                         bDisableKinematicStaticPairs;                      // 0x119(0x1)(None)
	bool                                         bDisableKinematicKinematicPairs;                   // 0x11A(0x1)(None)
	bool                                         bDisableCCD;                                       // 0x11B(0x1)(None)
	float                                        AnimPhysicsMinDeltaTime;                           // 0x11C(0x4)(None)
	bool                                         bSimulateAnimPhysicsAfterReset;                    // 0x120(0x1)(None)
	uint8                                        Pad_3791[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinPhysicsDeltaTime;                               // 0x124(0x4)(None)
	float                                        MaxPhysicsDeltaTime;                               // 0x128(0x4)(None)
	bool                                         bSubstepping;                                      // 0x12C(0x1)(None)
	bool                                         bSubsteppingAsync;                                 // 0x12D(0x1)(None)
	bool                                         bTickPhysicsAsync;                                 // 0x12E(0x1)(None)
	uint8                                        Pad_3792[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AsyncFixedTimeStepSize;                            // 0x130(0x4)(None)
	float                                        MaxSubstepDeltaTime;                               // 0x134(0x4)(None)
	int32                                        MaxSubsteps;                                       // 0x138(0x4)(None)
	float                                        SyncSceneSmoothingFactor;                          // 0x13C(0x4)(None)
	float                                        InitialAverageFrameRate;                           // 0x140(0x4)(None)
	int32                                        PhysXTreeRebuildRate;                              // 0x144(0x4)(None)
	TArray<struct FPhysicalSurfaceName>          PhysicalSurfaces;                                  // 0x148(0x10)(None)
	struct FBroadphaseSettings                   DefaultBroadphaseSettings;                         // 0x158(0x80)(None)
	float                                        MinDeltaVelocityForHitEvents;                      // 0x1D8(0x4)(None)
	struct FChaosPhysicsSettings                 ChaosSettings;                                     // 0x1DC(0x3)(None)
	uint8                                        Pad_3793[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsSettings* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.PhysicsThruster
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*             ThrusterComponent;                                 // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APhysicsThruster* GetDefaultObj();

};

// 0x38 (0x300 - 0x2C8)
// Class Engine.RadialForceComponent
class URadialForceComponent : public USceneComponent
{
public:
	float                                        Radius;                                            // 0x2C8(0x4)(None)
	enum class ERadialImpulseFalloff             Falloff;                                           // 0x2CC(0x1)(None)
	uint8                                        Pad_3794[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpulseStrength;                                   // 0x2D0(0x4)(None)
	uint8                                        bImpulseVelChange : 1;                             // Mask: 0x1, PropSize: 0x10x2D4(0x1)(None)
	uint8                                        bIgnoreOwningActor : 1;                            // Mask: 0x2, PropSize: 0x10x2D4(0x1)(None)
	uint8                                        BitPad_2D4 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3795[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceStrength;                                     // 0x2D8(0x4)(None)
	float                                        DestructibleDamage;                                // 0x2DC(0x4)(None)
	TArray<enum class EObjectTypeQuery>          ObjectTypesToAffect;                               // 0x2E0(0x10)(None)
	uint8                                        Pad_3796[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialForceComponent* GetDefaultObj();

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);
};

// 0x98 (0x360 - 0x2C8)
// Class Engine.PhysicsFieldComponent
class UPhysicsFieldComponent : public USceneComponent
{
public:
	uint8                                        Pad_3797[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPhysicsFieldComponent* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsFieldStatics
class UPhysicsFieldStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPhysicsFieldStatics* GetDefaultObj();

	void EvalPhysicsVectorField(class UObject* WorldContextObject, const struct FVector& WorldPosition, enum class EFieldVectorType VectorType, const struct FVector& ReturnValue);
	void EvalPhysicsScalarField(class UObject* WorldContextObject, const struct FVector& WorldPosition, enum class EFieldScalarType ScalarType, float ReturnValue);
	void EvalPhysicsIntegerField(class UObject* WorldContextObject, const struct FVector& WorldPosition, enum class EFieldIntegerType IntegerType, int32 ReturnValue);
};

// 0x10 (0x4F0 - 0x4E0)
// Class Engine.PlayerStart
class APlayerStart : public ANavigationObjectBase
{
public:
	class FName                                  PlayerStartTag;                                    // 0x4E0(0x8)(None)
	int32                                        SpawnPointRegion;                                  // 0x4E8(0x4)(None)
	uint8                                        Pad_379B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APlayerStart* GetDefaultObj();

};

// 0x0 (0x4F0 - 0x4F0)
// Class Engine.PlayerStartPIE
class APlayerStartPIE : public APlayerStart
{
public:

	static class UClass* StaticClass();
	static class APlayerStartPIE* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.PrecomputedVisibilityVolume
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class APrecomputedVisibilityVolume* GetDefaultObj();

};

// 0x38 (0x68 - 0x30)
// Class Engine.PrimaryAssetLabel
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                    Rules;                                             // 0x30(0xC)(None)
	uint8                                        bLabelAssetsInMyDirectory : 1;                     // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        bIsRuntimeLabel : 1;                               // Mask: 0x2, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_2D5 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_379C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UObject>>        ExplicitAssets;                                    // 0x40(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         ExplicitBlueprints;                                // 0x50(0x10)(ZeroConstructor)
	struct FCollectionReference                  AssetCollection;                                   // 0x60(0x8)(None)

	static class UClass* StaticClass();
	static class UPrimaryAssetLabel* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.HealthSnapshotBlueprintLibrary
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UHealthSnapshotBlueprintLibrary* GetDefaultObj();

	void StopPerformanceSnapshots();
	void StartPerformanceSnapshots();
	void LogPerformanceSnapshot(const class FString& SnapshotTitle, bool bResetStats);
};

// 0x0 (0x30 - 0x30)
// Class Engine.LevelStreamingProfilingSubsystem
class ULevelStreamingProfilingSubsystem : public UWorldSubsystem
{
public:

	static class UClass* StaticClass();
	static class ULevelStreamingProfilingSubsystem* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.ProxyLODMeshSimplificationSettings
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  ProxyLODMeshReductionModuleName;                   // 0x38(0x8)(None)

	static class UClass* StaticClass();
	static class UProxyLODMeshSimplificationSettings* GetDefaultObj();

};

// 0x8 (0x4D0 - 0x4C8)
// Class Engine.RectLight
class ARectLight : public ALight
{
public:
	class URectLightComponent*                   RectLightComponent;                                // 0x4C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ARectLight* GetDefaultObj();

};

// 0x1A0 (0x1D8 - 0x38)
// Class Engine.RendererSettings
class URendererSettings : public UDeveloperSettings
{
public:
	enum class EMobileShadingPath                MobileShadingPath;                                 // 0x38(0x1)(None)
	uint8                                        Pad_379E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileSupportGPUScene : 1;                        // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_2D6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_379F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMobileAntiAliasingMethod         MobileAntiAliasing;                                // 0x40(0x1)(None)
	enum class EMobileFloatPrecisionMode         MobileFloatPrecisionMode;                          // 0x41(0x1)(None)
	uint8                                        Pad_37A0[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileAllowDitheredLODTransition : 1;             // Mask: 0x1, PropSize: 0x10x44(0x1)(None)
	uint8                                        bMobileVirtualTextures : 1;                        // Mask: 0x2, PropSize: 0x10x44(0x1)(None)
	uint8                                        bDiscardUnusedQualityLevels : 1;                   // Mask: 0x4, PropSize: 0x10x44(0x1)(None)
	uint8                                        BitPad_2D7 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37A1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EShaderCompressionFormat          ShaderCompressionFormat;                           // 0x48(0x1)(None)
	uint8                                        Pad_37A2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOcclusionCulling : 1;                             // Mask: 0x1, PropSize: 0x10x4C(0x1)(None)
	uint8                                        BitPad_2D8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37A3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinScreenRadiusForLights;                          // 0x50(0x4)(None)
	float                                        MinScreenRadiusForEarlyZPass;                      // 0x54(0x4)(None)
	float                                        MinScreenRadiusForCSMdepth;                        // 0x58(0x4)(None)
	uint8                                        bPrecomputedVisibilityWarning : 1;                 // Mask: 0x1, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bTextureStreaming : 1;                             // Mask: 0x2, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bUseDXT5NormalMaps : 1;                            // Mask: 0x4, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bVirtualTextures : 1;                              // Mask: 0x8, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bVirtualTextureEnableAutoImport : 1;               // Mask: 0x10, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bVirtualTexturedLightmaps : 1;                     // Mask: 0x20, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bVirtualTextureAnisotropicFiltering : 1;           // Mask: 0x40, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bEnableVirtualTextureOpacityMask : 1;              // Mask: 0x80, PropSize: 0x10x5C(0x1)(None)
	uint8                                        Pad_37A4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       VirtualTextureTileSize;                            // 0x60(0x4)(None)
	uint32                                       VirtualTextureTileBorderSize;                      // 0x64(0x4)(None)
	uint32                                       VirtualTextureFeedbackFactor;                      // 0x68(0x4)(None)
	enum class EWorkingColorSpace                WorkingColorSpaceChoice;                           // 0x6C(0x1)(None)
	uint8                                        Pad_37A5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             RedChromaticityCoordinate;                         // 0x70(0x10)(None)
	struct FVector2D                             GreenChromaticityCoordinate;                       // 0x80(0x10)(None)
	struct FVector2D                             BlueChromaticityCoordinate;                        // 0x90(0x10)(None)
	struct FVector2D                             WhiteChromaticityCoordinate;                       // 0xA0(0x10)(None)
	uint8                                        bClearCoatEnableSecondNormal : 1;                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        BitPad_2D9 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37A6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDynamicGlobalIlluminationMethod  DynamicGlobalIllumination;                         // 0xB4(0x1)(None)
	enum class EReflectionMethod                 Reflections;                                       // 0xB5(0x1)(None)
	uint8                                        Pad_37A7[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReflectionCaptureResolution;                       // 0xB8(0x4)(None)
	uint8                                        ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // Mask: 0x1, PropSize: 0x10xBC(0x1)(None)
	uint8                                        bUseHardwareRayTracingForLumen : 1;                // Mask: 0x2, PropSize: 0x10xBC(0x1)(None)
	uint8                                        BitPad_2DA : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37A8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ELumenRayLightingMode             LumenRayLightingMode;                              // 0xC0(0x1)(None)
	uint8                                        Pad_37A9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        LumenFrontLayerTranslucencyReflections : 1;        // Mask: 0x1, PropSize: 0x10xC4(0x1)(None)
	uint8                                        BitPad_2DB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37AA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ELumenSoftwareTracingMode         LumenSoftwareTracingMode;                          // 0xC8(0x1)(None)
	enum class EShadowMapMethod                  ShadowMapMethod;                                   // 0xC9(0x1)(None)
	uint8                                        Pad_37AB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableRayTracing : 1;                             // Mask: 0x1, PropSize: 0x10xCC(0x1)(None)
	uint8                                        bEnableRayTracingShadows : 1;                      // Mask: 0x2, PropSize: 0x10xCC(0x1)(None)
	uint8                                        bEnableRayTracingSkylight : 1;                     // Mask: 0x4, PropSize: 0x10xCC(0x1)(None)
	uint8                                        bEnableRayTracingTextureLOD : 1;                   // Mask: 0x8, PropSize: 0x10xCC(0x1)(None)
	uint8                                        bEnablePathTracing : 1;                            // Mask: 0x10, PropSize: 0x10xCC(0x1)(None)
	uint8                                        bGenerateMeshDistanceFields : 1;                   // Mask: 0x20, PropSize: 0x10xCC(0x1)(None)
	uint8                                        BitPad_2DC : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37AC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DistanceFieldVoxelDensity;                         // 0xD0(0x4)(None)
	uint8                                        bNanite : 1;                                       // Mask: 0x1, PropSize: 0x10xD4(0x1)(None)
	uint8                                        bAllowStaticLighting : 1;                          // Mask: 0x2, PropSize: 0x10xD4(0x1)(None)
	uint8                                        bUseNormalMapsForStaticLighting : 1;               // Mask: 0x4, PropSize: 0x10xD4(0x1)(None)
	uint8                                        bForwardShading : 1;                               // Mask: 0x8, PropSize: 0x10xD4(0x1)(None)
	uint8                                        bVertexFoggingForOpaque : 1;                       // Mask: 0x10, PropSize: 0x10xD4(0x1)(None)
	uint8                                        bSeparateTranslucency : 1;                         // Mask: 0x20, PropSize: 0x10xD4(0x1)(None)
	uint8                                        BitPad_2DD : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37AD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETranslucentSortPolicy            TranslucentSortPolicy;                             // 0xD8(0x1)(None)
	uint8                                        Pad_37AE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TranslucentSortAxis;                               // 0xE0(0x18)(None)
	enum class EFixedFoveationLevels             HMDFixedFoveationLevel;                            // 0xF8(0x1)(None)
	uint8                                        Pad_37AF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHMDFixedFoveationDynamic : 1;                     // Mask: 0x1, PropSize: 0x10xFC(0x1)(None)
	uint8                                        BitPad_2DE : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECustomDepthStencil               CustomDepthStencil;                                // 0x100(0x1)(None)
	uint8                                        Pad_37B1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCustomDepthTaaJitter : 1;                         // Mask: 0x1, PropSize: 0x10x104(0x1)(None)
	uint8                                        BitPad_2DF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAlphaChannelMode                 bEnableAlphaChannelInPostProcessing;               // 0x108(0x1)(None)
	uint8                                        Pad_37B3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDefaultFeatureBloom : 1;                          // Mask: 0x1, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bDefaultFeatureAmbientOcclusion : 1;               // Mask: 0x2, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bDefaultFeatureAmbientOcclusionStaticFraction : 1; // Mask: 0x4, PropSize: 0x10x10C(0x1)(None)
	uint8                                        bDefaultFeatureAutoExposure : 1;                   // Mask: 0x8, PropSize: 0x10x10C(0x1)(None)
	uint8                                        BitPad_2E0 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAutoExposureMethodUI             DefaultFeatureAutoExposure;                        // 0x110(0x1)(None)
	uint8                                        Pad_37B5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultFeatureAutoExposureBias;                    // 0x114(0x4)(None)
	uint8                                        bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // Mask: 0x1, PropSize: 0x10x118(0x1)(None)
	uint8                                        bDefaultFeatureMotionBlur : 1;                     // Mask: 0x2, PropSize: 0x10x118(0x1)(None)
	uint8                                        bDefaultFeatureLensFlare : 1;                      // Mask: 0x4, PropSize: 0x10x118(0x1)(None)
	uint8                                        bTemporalUpsampling : 1;                           // Mask: 0x8, PropSize: 0x10x118(0x1)(None)
	uint8                                        BitPad_2E1 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAntiAliasingMethod               DefaultFeatureAntiAliasing;                        // 0x11C(0x1)(None)
	enum class ECompositingSampleCount           MSAASampleCount;                                   // 0x11D(0x1)(None)
	enum class ELightUnits                       DefaultLightUnits;                                 // 0x11E(0x1)(None)
	enum class EDefaultBackBufferPixelFormat     DefaultBackBufferPixelFormat;                      // 0x11F(0x1)(None)
	uint8                                        bRenderUnbuiltPreviewShadowsInGame : 1;            // Mask: 0x1, PropSize: 0x10x120(0x1)(None)
	uint8                                        bStencilForLODDither : 1;                          // Mask: 0x2, PropSize: 0x10x120(0x1)(None)
	uint8                                        BitPad_2E2 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EEarlyZPass                       EarlyZPass;                                        // 0x124(0x1)(None)
	uint8                                        Pad_37B8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEarlyZPassOnlyMaterialMasking : 1;                // Mask: 0x1, PropSize: 0x10x128(0x1)(None)
	uint8                                        bEnableCSMCaching : 1;                             // Mask: 0x2, PropSize: 0x10x128(0x1)(None)
	uint8                                        bDBuffer : 1;                                      // Mask: 0x4, PropSize: 0x10x128(0x1)(None)
	uint8                                        BitPad_2E3 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37B9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EClearSceneOptions                ClearSceneMethod;                                  // 0x12C(0x1)(None)
	enum class EVelocityOutputPass               VelocityPass;                                      // 0x12D(0x1)(None)
	enum class EVertexDeformationOutputsVelocity VertexDeformationOutputsVelocity;                  // 0x12E(0x1)(None)
	uint8                                        Pad_37BA[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bSelectiveBasePassOutputs : 1;                     // Mask: 0x1, PropSize: 0x10x130(0x1)(None)
	uint8                                        bDefaultParticleCutouts : 1;                       // Mask: 0x2, PropSize: 0x10x130(0x1)(None)
	uint8                                        BitPad_2E4 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37BB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GPUSimulationTextureSizeX;                         // 0x134(0x4)(None)
	int32                                        GPUSimulationTextureSizeY;                         // 0x138(0x4)(None)
	uint8                                        bGlobalClipPlane : 1;                              // Mask: 0x1, PropSize: 0x10x13C(0x1)(None)
	uint8                                        BitPad_2E5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37BC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EGBufferFormat                    GBufferFormat;                                     // 0x140(0x1)(None)
	uint8                                        Pad_37BD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseGPUMorphTargets : 1;                           // Mask: 0x1, PropSize: 0x10x144(0x1)(None)
	uint8                                        bNvidiaAftermathEnabled : 1;                       // Mask: 0x2, PropSize: 0x10x144(0x1)(None)
	uint8                                        bMultiView : 1;                                    // Mask: 0x4, PropSize: 0x10x144(0x1)(None)
	uint8                                        bMobilePostProcessing : 1;                         // Mask: 0x8, PropSize: 0x10x144(0x1)(None)
	uint8                                        bMobileMultiView : 1;                              // Mask: 0x10, PropSize: 0x10x144(0x1)(None)
	uint8                                        bMobileUseHWsRGBEncoding : 1;                      // Mask: 0x20, PropSize: 0x10x144(0x1)(None)
	uint8                                        bRoundRobinOcclusion : 1;                          // Mask: 0x40, PropSize: 0x10x144(0x1)(None)
	uint8                                        bMeshStreaming : 1;                                // Mask: 0x80, PropSize: 0x10x144(0x1)(None)
	uint8                                        bEnableHeterogeneousVolumes : 1;                   // Mask: 0x1, PropSize: 0x10x145(0x1)(None)
	uint8                                        BitPad_2E6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37BE[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WireframeCullThreshold;                            // 0x148(0x4)(None)
	uint8                                        bSupportStationarySkylight : 1;                    // Mask: 0x1, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportLowQualityLightmaps : 1;                   // Mask: 0x2, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportPointLightWholeSceneShadows : 1;           // Mask: 0x4, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportSkyAtmosphere : 1;                         // Mask: 0x8, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportSkyAtmosphereAffectsHeightFog : 1;         // Mask: 0x10, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportCloudShadowOnForwardLitTranslucent : 1;    // Mask: 0x20, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportTranslucentPerObjectShadow : 1;            // Mask: 0x40, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bSupportCloudShadowOnSingleLayerWater : 1;         // Mask: 0x80, PropSize: 0x10x14C(0x1)(None)
	uint8                                        bEnableStrata : 1;                                 // Mask: 0x1, PropSize: 0x10x14D(0x1)(None)
	uint8                                        StrataOpaqueMaterialRoughRefraction : 1;           // Mask: 0x2, PropSize: 0x10x14D(0x1)(None)
	uint8                                        StrataDebugAdvancedVisualizationShaders : 1;       // Mask: 0x4, PropSize: 0x10x14D(0x1)(None)
	uint8                                        bMaterialRoughDiffuse : 1;                         // Mask: 0x8, PropSize: 0x10x14D(0x1)(None)
	uint8                                        bMaterialEnergyConservation : 1;                   // Mask: 0x10, PropSize: 0x10x14D(0x1)(None)
	uint8                                        bOrderedIndependentTransparencyEnable : 1;         // Mask: 0x20, PropSize: 0x10x14D(0x1)(None)
	uint8                                        bSupportSkinCacheShaders : 1;                      // Mask: 0x40, PropSize: 0x10x14D(0x1)(None)
	uint8                                        bSkipCompilingGPUSkinVF : 1;                       // Mask: 0x80, PropSize: 0x10x14D(0x1)(None)
	uint8                                        Pad_37BF[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESkinCacheDefaultBehavior         DefaultSkinCacheBehavior;                          // 0x150(0x1)(None)
	uint8                                        Pad_37C0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SkinCacheSceneMemoryLimitInMB;                     // 0x154(0x4)(None)
	uint8                                        bMobileEnableStaticAndCSMShadowReceivers : 1;      // Mask: 0x1, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileEnableMovableLightCSMShaderCulling : 1;     // Mask: 0x2, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileForwardEnableLocalLights : 1;               // Mask: 0x4, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileForwardEnableClusteredReflections : 1;      // Mask: 0x8, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileEnableNoPrecomputedLightingCSMShader : 1;   // Mask: 0x10, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileAllowDistanceFieldShadows : 1;              // Mask: 0x20, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileAllowMovableDirectionalLights : 1;          // Mask: 0x40, PropSize: 0x10x158(0x1)(None)
	uint8                                        bMobileAllowMovableSpotlightShadows : 1;           // Mask: 0x80, PropSize: 0x10x158(0x1)(None)
	uint8                                        bSupport16BitBoneIndex : 1;                        // Mask: 0x1, PropSize: 0x10x159(0x1)(None)
	uint8                                        bGPUSkinLimit2BoneInfluences : 1;                  // Mask: 0x2, PropSize: 0x10x159(0x1)(None)
	uint8                                        bSupportDepthOnlyIndexBuffers : 1;                 // Mask: 0x4, PropSize: 0x10x159(0x1)(None)
	uint8                                        bSupportReversedIndexBuffers : 1;                  // Mask: 0x8, PropSize: 0x10x159(0x1)(None)
	uint8                                        bMobileAmbientOcclusion : 1;                       // Mask: 0x10, PropSize: 0x10x159(0x1)(None)
	uint8                                        bUseUnlimitedBoneInfluences : 1;                   // Mask: 0x20, PropSize: 0x10x159(0x1)(None)
	uint8                                        BitPad_2E7 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37C1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UnlimitedBonInfluencesThreshold;                   // 0x15C(0x4)(None)
	struct FPerPlatformInt                       DefaultBoneInfluenceLimit;                         // 0x160(0x4)(None)
	struct FPerPlatformInt                       MaxSkinBones;                                      // 0x164(0x4)(None)
	enum class EMobilePlanarReflectionMode       MobilePlanarReflectionMode;                        // 0x168(0x1)(None)
	uint8                                        Pad_37C2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileSupportsGen4TAA : 1;                        // Mask: 0x1, PropSize: 0x10x16C(0x1)(None)
	uint8                                        BitPad_2E8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37C3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformBool                      bStreamSkeletalMeshLODs;                           // 0x170(0x1)(None)
	struct FPerPlatformBool                      bDiscardSkeletalMeshOptionalLODs;                  // 0x171(0x1)(None)
	uint8                                        Pad_37C4[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftObjectPath                       VisualizeCalibrationColorMaterialPath;             // 0x178(0x20)(None)
	struct FSoftObjectPath                       VisualizeCalibrationCustomMaterialPath;            // 0x198(0x20)(None)
	struct FSoftObjectPath                       VisualizeCalibrationGrayscaleMaterialPath;         // 0x1B8(0x20)(None)

	static class UClass* StaticClass();
	static class URendererSettings* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.RendererOverrideSettings
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	uint8                                        bSupportAllShaderPermutations : 1;                 // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        Pad_37C5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URendererOverrideSettings* GetDefaultObj();

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.SubsurfaceProfile
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct              Settings;                                          // 0x28(0x9C)(None)
	uint8                                        Pad_37C6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USubsurfaceProfile* GetDefaultObj();

};

// 0xA88 (0x2870 - 0x1DE8)
// Class Engine.ReplayNetConnection
class UReplayNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_37C7[0xA88];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReplayNetConnection* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class Engine.ReplaySubsystem
class UReplaySubsystem : public UGameInstanceSubsystem
{
public:
	bool                                         bLoadDefaultMapOnStop;                             // 0x30(0x1)(None)
	uint8                                        Pad_37C9[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UReplaySubsystem* GetDefaultObj();

	void RequestCheckpoint();
	void IsRecording(bool ReturnValue);
	void IsPlaying(bool ReturnValue);
	void GetReplayCurrentTime(float ReturnValue);
	void GetActiveReplayName(const class FString& ReturnValue);
};

// 0x38 (0x60 - 0x28)
// Class Engine.ReverbEffect
class UReverbEffect : public UObject
{
public:
	bool                                         bBypassEarlyReflections;                           // 0x28(0x1)(None)
	uint8                                        Pad_37CB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReflectionsDelay;                                  // 0x2C(0x4)(None)
	float                                        GainHF;                                            // 0x30(0x4)(None)
	float                                        ReflectionsGain;                                   // 0x34(0x4)(None)
	bool                                         bBypassLateReflections;                            // 0x38(0x1)(None)
	uint8                                        Pad_37CC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LateDelay;                                         // 0x3C(0x4)(None)
	float                                        DecayTime;                                         // 0x40(0x4)(None)
	float                                        Density;                                           // 0x44(0x4)(None)
	float                                        Diffusion;                                         // 0x48(0x4)(None)
	float                                        AirAbsorptionGainHF;                               // 0x4C(0x4)(None)
	float                                        DecayHFRatio;                                      // 0x50(0x4)(None)
	float                                        LateGain;                                          // 0x54(0x4)(None)
	float                                        Gain;                                              // 0x58(0x4)(None)
	float                                        RoomRolloffFactor;                                 // 0x5C(0x4)(None)

	static class UClass* StaticClass();
	static class UReverbEffect* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.RuntimeOptionsBase
class URuntimeOptionsBase : public UObject
{
public:
	uint8                                        Pad_37CD[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuntimeOptionsBase* GetDefaultObj();

};

// 0xB0 (0xD8 - 0x28)
// Class Engine.SCS_Node
class USCS_Node : public UObject
{
public:
	class UClass*                                ComponentClass;                                    // 0x28(0x8)(ZeroConstructor)
	class UActorComponent*                       ComponentTemplate;                                 // 0x30(0x8)(ZeroConstructor)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;                     // 0x38(0x48)(ZeroConstructor)
	class FName                                  AttachToName;                                      // 0x80(0x8)(None)
	class FName                                  ParentComponentOrVariableName;                     // 0x88(0x8)(None)
	class FName                                  ParentComponentOwnerClassName;                     // 0x90(0x8)(None)
	bool                                         bIsParentComponentNative;                          // 0x98(0x1)(None)
	uint8                                        Pad_37CF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USCS_Node*>                     ChildNodes;                                        // 0xA0(0x10)(None)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0xB0(0x10)(None)
	struct FGuid                                 VariableGuid;                                      // 0xC0(0x10)(None)
	class FName                                  InternalVariableName;                              // 0xD0(0x8)(None)

	static class UClass* StaticClass();
	static class USCS_Node* GetDefaultObj();

};

// 0x78 (0xA0 - 0x28)
// Class Engine.SimpleConstructionScript
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                     RootNodes;                                         // 0x28(0x10)(ZeroConstructor)
	TArray<class USCS_Node*>                     AllNodes;                                          // 0x38(0x10)(ZeroConstructor)
	class USCS_Node*                             DefaultSceneRootNode;                              // 0x48(0x8)(None)
	uint8                                        Pad_37D1[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USimpleConstructionScript* GetDefaultObj();

};

// 0x80 (0x148 - 0xC8)
// Class Engine.SkinnedAsset
class USkinnedAsset : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_37D5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RotOffset;                                         // 0xD0(0x18)(None)
	struct FRotator                              ItemSlotAttachmentRotOffset;                       // 0xE8(0x18)(None)
	struct FVector                               LocOffset;                                         // 0x100(0x18)(None)
	struct FVector                               ScaleMultiplier;                                   // 0x118(0x18)(None)
	struct FVector                               ItemSlotAttachmentLocOffset;                       // 0x130(0x18)(None)

	static class UClass* StaticClass();
	static class USkinnedAsset* GetDefaultObj();

	void FindSocketInfo(class FName InSocketName, const struct FTransform& OutTransform, int32 OutBoneIndex, int32 OutIndex, class USkeletalMeshSocket* ReturnValue);
	void FindSocket(class FName InSocketName, class USkeletalMeshSocket* ReturnValue);
};

// 0x470 (0x5B8 - 0x148)
// Class Engine.SkeletalMesh
class USkeletalMesh : public USkinnedAsset
{
public:
	uint8                                        Pad_37E0[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x168(0x8)(ZeroConstructor)
	struct FBoxSphereBounds                      ImportedBounds;                                    // 0x170(0x38)(None)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x1A8(0x38)(None)
	struct FVector                               PositiveBoundsExtension;                           // 0x1E0(0x18)(None)
	struct FVector                               NegativeBoundsExtension;                           // 0x1F8(0x18)(None)
	TArray<struct FSkeletalMaterial>             Materials;                                         // 0x210(0x10)(ZeroConstructor)
	TArray<struct FBoneMirrorInfo>               SkelMirrorTable;                                   // 0x220(0x10)(None)
	TArray<struct FSkeletalMeshLODInfo>          LODInfo;                                           // 0x230(0x10)(ZeroConstructor)
	uint8                                        Pad_37E1[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0x290(0x68)(None)
	struct FPerPlatformInt                       MinLOD;                                            // 0x2F8(0x4)(None)
	struct FPerPlatformBool                      DisableBelowMinLodStripping;                       // 0x2FC(0x1)(None)
	enum class EAxis                             SkelMirrorAxis;                                    // 0x2FD(0x1)(None)
	enum class EAxis                             SkelMirrorFlipAxis;                                // 0x2FE(0x1)(None)
	uint8                                        bUseFullPrecisionUVs : 1;                          // Mask: 0x1, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        bUseHighPrecisionTangentBasis : 1;                 // Mask: 0x2, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        bHasBeenSimplified : 1;                            // Mask: 0x4, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        bHasVertexColors : 1;                              // Mask: 0x8, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        BitPad_2E9 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x20, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        bForceAllowCPUAcccess : 1;                         // Mask: 0x40, PropSize: 0x10x2FF(0x1)(None)
	uint8                                        BitPad_2EA : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x300(0x8)(ZeroConstructor)
	class UPhysicsAsset*                         PhysicsAsset;                                      // 0x308(0x8)(ZeroConstructor)
	class UPhysicsAsset*                         ShadowPhysicsAsset;                                // 0x310(0x8)(ZeroConstructor)
	TArray<class UNodeMappingContainer*>         NodeMappingData;                                   // 0x318(0x10)(ZeroConstructor)
	uint8                                        bSupportRayTracing : 1;                            // Mask: 0x1, PropSize: 0x10x328(0x1)(None)
	uint8                                        BitPad_2EB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37E2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RayTracingMinLOD;                                  // 0x32C(0x4)(None)
	enum class EClothLODBiasMode                 ClothLODBiasMode;                                  // 0x330(0x1)(None)
	uint8                                        Pad_37E3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMorphTarget*>                  MorphTargets;                                      // 0x338(0x10)(ZeroConstructor)
	uint8                                        Pad_37E4[0x178];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PostProcessAnimBlueprint;                          // 0x4C0(0x8)(ZeroConstructor)
	TArray<class UClothingAssetBase*>            MeshClothingAssets;                                // 0x4C8(0x10)(ZeroConstructor)
	struct FSkeletalMeshSamplingInfo             SamplingInfo;                                      // 0x4D8(0x30)(None)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x508(0x10)(ZeroConstructor)
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x518(0x10)(ZeroConstructor)
	uint8                                        Pad_37E5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkinWeightProfileInfo>        SkinWeightProfiles;                                // 0x538(0x10)(None)
	class UMeshDeformer*                         DefaultMeshDeformer;                               // 0x548(0x8)(None)
	TArray<struct FSkeletalMeshOptimizationSettings> OptimizationSettings;                              // 0x550(0x10)(None)
	struct FVector                               ItemSlotAttachmentScaleMultiplier;                 // 0x560(0x18)(None)
	class FName                                  CloseToGroundBoneName;                             // 0x578(0x8)(None)
	class FName                                  CloseToGroundOppositeBoneName;                     // 0x580(0x8)(None)
	TArray<struct FGroundBoneChain>              GroundBonesChains;                                 // 0x588(0x10)(None)
	float                                        DefaultTraceLength;                                // 0x598(0x4)(None)
	float                                        TraceStartOffset;                                  // 0x59C(0x4)(None)
	float                                        InterpolationSpeed;                                // 0x5A0(0x4)(None)
	float                                        InterpolationSpeedUpward;                          // 0x5A4(0x4)(None)
	float                                        CachedInitialSphereRadiusBounds;                   // 0x5A8(0x4)(None)
	uint8                                        bIgnoreMasterPoseLODs : 1;                         // Mask: 0x1, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bAllowParallelAnimations : 1;                      // Mask: 0x2, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bAllowLODStreaming : 1;                            // Mask: 0x4, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bFullLODStreaming : 1;                             // Mask: 0x8, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bCookRemoveLOD0 : 1;                               // Mask: 0x10, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bConsoleDropLOD0 : 1;                              // Mask: 0x20, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bConsoleDropLOD0onLowMemPlatform : 1;              // Mask: 0x40, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        bPreventLODStreamingOnWindows : 1;                 // Mask: 0x80, PropSize: 0x10x5AC(0x1)(None)
	uint8                                        Pad_37E6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ConsoleDropLODNewTriangleCount;                    // 0x5B0(0x4)(None)
	struct FPerPlatformBool                      bRemovingLOD0FromCook;                             // 0x5B4(0x1)(None)
	uint8                                        Pad_37E7[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkeletalMesh* GetDefaultObj();

	void SetSkeleton(class USkeleton* InSkeleton);
	void SetMorphTargets(const TArray<class UMorphTarget*>& InMorphTargets);
	void SetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32> QualityLevelMinimumLODs, int32 Default);
	void SetMeshClothingAssets(const TArray<class UClothingAssetBase*>& InMeshClothingAssets);
	void SetMaterials(const TArray<struct FSkeletalMaterial>& InMaterials);
	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);
	void SetDefaultAnimatingRig(TSoftObjectPtr<class UObject> InAnimatingRig);
	void NumSockets(int32 ReturnValue);
	void K2_GetAllMorphTargetNames(const TArray<class FString>& ReturnValue);
	void IsSectionUsingCloth(int32 InSectionIndex, bool bCheckCorrespondingSections, bool ReturnValue);
	void GetSocketByIndex(int32 Index, class USkeletalMeshSocket* ReturnValue);
	void GetSkeleton(class USkeleton* ReturnValue);
	void GetShadowPhysicsAsset(class UPhysicsAsset* ReturnValue);
	void GetPhysicsAsset(class UPhysicsAsset* ReturnValue);
	void GetNodeMappingData(const TArray<class UNodeMappingContainer*>& ReturnValue);
	void GetNodeMappingContainer(class UBlueprint* SourceAsset, class UNodeMappingContainer* ReturnValue);
	void GetMorphTargetsPtrConv(const TArray<class UMorphTarget*>& ReturnValue);
	void GetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32> QualityLevelMinimumLODs, int32 Default);
	void GetMeshClothingAssets(const TArray<class UClothingAssetBase*>& ReturnValue);
	void GetMaterials(const TArray<struct FSkeletalMaterial>& ReturnValue);
	void GetLODSettings(class USkeletalMeshLODSettings* ReturnValue);
	void GetImportedBounds(const struct FBoxSphereBounds& ReturnValue);
	void GetDefaultAnimatingRig(TSoftObjectPtr<class UObject> ReturnValue);
	void GetBounds(const struct FBoxSphereBounds& ReturnValue);
	void FindSocketAndIndex(class FName InSocketName, int32 OutIndex, class USkeletalMeshSocket* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.SkeletalMeshEditorData
class USkeletalMeshEditorData : public UObject
{
public:

	static class UClass* StaticClass();
	static class USkeletalMeshEditorData* GetDefaultObj();

};

// 0x88 (0xB8 - 0x30)
// Class Engine.SkeletalMeshLODSettings
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0x30(0x68)(None)
	struct FPerPlatformInt                       MinLOD;                                            // 0x98(0x4)(None)
	struct FPerPlatformBool                      DisableBelowMinLodStripping;                       // 0x9C(0x1)(None)
	bool                                         bOverrideLODStreamingSettings;                     // 0x9D(0x1)(None)
	struct FPerPlatformBool                      bSupportLODStreaming;                              // 0x9E(0x1)(None)
	uint8                                        Pad_37E9[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformInt                       MaxNumStreamedLODs;                                // 0xA0(0x4)(None)
	struct FPerPlatformInt                       MaxNumOptionalLODs;                                // 0xA4(0x4)(None)
	TArray<struct FSkeletalMeshLODGroupSettings> LODGroups;                                         // 0xA8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USkeletalMeshLODSettings* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.SkeletalMeshSimplificationSettings
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  SkeletalMeshReductionModuleName;                   // 0x38(0x8)(None)

	static class UClass* StaticClass();
	static class USkeletalMeshSimplificationSettings* GetDefaultObj();

};

// 0x3F8 (0x420 - 0x28)
// Class Engine.ButtonStyleAsset
class UButtonStyleAsset : public UObject
{
public:
	uint8                                        Pad_37EA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FButtonStyle                          ButtonStyle;                                       // 0x30(0x3F0)(None)

	static class UClass* StaticClass();
	static class UButtonStyleAsset* GetDefaultObj();

};

// 0xAD8 (0xB00 - 0x28)
// Class Engine.CheckBoxStyleAsset
class UCheckBoxStyleAsset : public UObject
{
public:
	uint8                                        Pad_37EB[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCheckBoxStyle                        CheckBoxStyle;                                     // 0x30(0xAD0)(None)

	static class UClass* StaticClass();
	static class UCheckBoxStyleAsset* GetDefaultObj();

};

// 0xD8 (0x100 - 0x28)
// Class Engine.SlateBrushAsset
class USlateBrushAsset : public UObject
{
public:
	uint8                                        Pad_37EC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           Brush;                                             // 0x30(0xD0)(None)

	static class UClass* StaticClass();
	static class USlateBrushAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SlateTextureAtlasInterface
class ISlateTextureAtlasInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ISlateTextureAtlasInterface* GetDefaultObj();

};

// 0x1E0 (0x208 - 0x28)
// Class Engine.SoundClass
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                 Properties;                                        // 0x28(0x1B8)(ZeroConstructor)
	TArray<class USoundClass*>                   ChildClasses;                                      // 0x1E0(0x10)(ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>      PassiveSoundMixModifiers;                          // 0x1F0(0x10)(ZeroConstructor)
	class USoundClass*                           ParentClass;                                       // 0x200(0x8)(None)

	static class UClass* StaticClass();
	static class USoundClass* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class Engine.SoundConcurrency
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings             Concurrency;                                       // 0x28(0x20)(None)

	static class UClass* StaticClass();
	static class USoundConcurrency* GetDefaultObj();

};

// 0x438 (0x5A0 - 0x168)
// Class Engine.SoundCue
class USoundCue : public USoundBase
{
public:
	class USoundNode*                            FirstNode;                                         // 0x168(0x8)(ZeroConstructor)
	float                                        VolumeMultiplier;                                  // 0x170(0x4)(None)
	float                                        PitchMultiplier;                                   // 0x174(0x4)(None)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x178(0x3C8)(ZeroConstructor)
	uint8                                        SubtitleColorIndex;                                // 0x540(0x1)(None)
	uint8                                        Pad_37ED[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSubtitleCue>                  Subtitles;                                         // 0x548(0x10)(None)
	TArray<struct FLocalizedSpokenText>          LocalizedSpokenTexts;                              // 0x558(0x10)(None)
	struct FSoftObjectPath                       AnimTexture;                                       // 0x568(0x20)(None)
	float                                        SubtitlePriority;                                  // 0x588(0x4)(None)
	uint8                                        Pad_37EE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPrimeOnLoad : 1;                                  // Mask: 0x1, PropSize: 0x10x590(0x1)(None)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x2, PropSize: 0x10x590(0x1)(None)
	uint8                                        bExcludeFromRandomNodeBranchCulling : 1;           // Mask: 0x4, PropSize: 0x10x590(0x1)(None)
	uint8                                        bHasPlayWhenSilent : 1;                            // Mask: 0x8, PropSize: 0x10x590(0x1)(None)
	uint8                                        BitPad_2EC : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37EF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CookedQualityIndex;                                // 0x594(0x4)(None)
	uint8                                        Pad_37F0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundCue* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class Engine.SoundMix
class USoundMix : public UObject
{
public:
	uint8                                        bApplyEQ : 1;                                      // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_2ED : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37F1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EQPriority;                                        // 0x2C(0x4)(None)
	struct FAudioEQEffect                        EQSettings;                                        // 0x30(0x40)(None)
	TArray<struct FSoundClassAdjuster>           SoundClassEffects;                                 // 0x70(0x10)(None)
	float                                        InitialDelay;                                      // 0x80(0x4)(None)
	float                                        FadeInTime;                                        // 0x84(0x4)(None)
	float                                        Duration;                                          // 0x88(0x4)(None)
	float                                        FadeOutTime;                                       // 0x8C(0x4)(None)

	static class UClass* StaticClass();
	static class USoundMix* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class Engine.SoundNodeAssetReferencer
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static class UClass* StaticClass();
	static class USoundNodeAssetReferencer* GetDefaultObj();

};

// 0x3D8 (0x420 - 0x48)
// Class Engine.SoundNodeAttenuation
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                     AttenuationSettings;                               // 0x48(0x8)(ZeroConstructor)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x50(0x3C8)(ZeroConstructor)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x1, PropSize: 0x10x418(0x1)(None)
	uint8                                        Pad_37F2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeAttenuation* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeBranch
class USoundNodeBranch : public USoundNode
{
public:
	class FName                                  BoolParameterName;                                 // 0x48(0x8)(None)

	static class UClass* StaticClass();
	static class USoundNodeBranch* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeConcatenator
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class USoundNodeConcatenator* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeDelay
class USoundNodeDelay : public USoundNode
{
public:
	float                                        DelayMin;                                          // 0x48(0x4)(None)
	float                                        DelayMax;                                          // 0x4C(0x4)(None)

	static class UClass* StaticClass();
	static class USoundNodeDelay* GetDefaultObj();

};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundNodeDialoguePlayer
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                DialogueWaveParameter;                             // 0x48(0x20)(ZeroConstructor)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        Pad_37F3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeDialoguePlayer* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeDistanceCrossFade
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                CrossFadeInput;                                    // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class USoundNodeDistanceCrossFade* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeDoppler
class USoundNodeDoppler : public USoundNode
{
public:
	float                                        DopplerIntensity;                                  // 0x48(0x4)(None)
	bool                                         bUseSmoothing;                                     // 0x4C(0x1)(None)
	uint8                                        Pad_37F4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothingInterpSpeed;                              // 0x50(0x4)(None)
	uint8                                        Pad_37F5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeDoppler* GetDefaultObj();

};

// 0x148 (0x190 - 0x48)
// Class Engine.SoundNodeEnveloper
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                        LoopStart;                                         // 0x48(0x4)(None)
	float                                        LoopEnd;                                           // 0x4C(0x4)(None)
	float                                        DurationAfterLoop;                                 // 0x50(0x4)(None)
	int32                                        LoopCount;                                         // 0x54(0x4)(None)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_2EE : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37F6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDistributionFloatConstantCurve*       VolumeInterpCurve;                                 // 0x60(0x8)(ZeroConstructor)
	class UDistributionFloatConstantCurve*       PitchInterpCurve;                                  // 0x68(0x8)(ZeroConstructor)
	struct FRuntimeFloatCurve                    VolumeCurve;                                       // 0x70(0x88)(ZeroConstructor)
	struct FRuntimeFloatCurve                    PitchCurve;                                        // 0xF8(0x88)(ZeroConstructor)
	float                                        PitchMin;                                          // 0x180(0x4)(None)
	float                                        PitchMax;                                          // 0x184(0x4)(None)
	float                                        VolumeMin;                                         // 0x188(0x4)(None)
	float                                        VolumeMax;                                         // 0x18C(0x4)(None)

	static class UClass* StaticClass();
	static class USoundNodeEnveloper* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeGroupControl
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int32>                                GroupSizes;                                        // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class USoundNodeGroupControl* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeLooping
class USoundNodeLooping : public USoundNode
{
public:
	int32                                        LoopCount;                                         // 0x48(0x4)(None)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x4C(0x1)(None)
	uint8                                        Pad_37F7[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeLooping* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class Engine.SoundNodeMature
class USoundNodeMature : public USoundNode
{
public:

	static class UClass* StaticClass();
	static class USoundNodeMature* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeMixer
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class USoundNodeMixer* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeModulator
class USoundNodeModulator : public USoundNode
{
public:
	float                                        PitchMin;                                          // 0x48(0x4)(None)
	float                                        PitchMax;                                          // 0x4C(0x4)(None)
	float                                        VolumeMin;                                         // 0x50(0x4)(None)
	float                                        VolumeMax;                                         // 0x54(0x4)(None)

	static class UClass* StaticClass();
	static class USoundNodeModulator* GetDefaultObj();

};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundNodeOscillator
class USoundNodeOscillator : public USoundNode
{
public:
	uint8                                        bModulateVolume : 1;                               // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        bModulatePitch : 1;                                // Mask: 0x2, PropSize: 0x10x48(0x1)(None)
	uint8                                        BitPad_2EF : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37F8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmplitudeMin;                                      // 0x4C(0x4)(None)
	float                                        AmplitudeMax;                                      // 0x50(0x4)(None)
	float                                        FrequencyMin;                                      // 0x54(0x4)(None)
	float                                        FrequencyMax;                                      // 0x58(0x4)(None)
	float                                        OffsetMin;                                         // 0x5C(0x4)(None)
	float                                        OffsetMax;                                         // 0x60(0x4)(None)
	float                                        CenterMin;                                         // 0x64(0x4)(None)
	float                                        CenterMax;                                         // 0x68(0x4)(None)
	uint8                                        Pad_37F9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeOscillator* GetDefaultObj();

};

// 0x8 (0x60 - 0x58)
// Class Engine.SoundNodeParamCrossFade
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	class FName                                  ParamName;                                         // 0x58(0x8)(None)

	static class UClass* StaticClass();
	static class USoundNodeParamCrossFade* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeQualityLevel
class USoundNodeQualityLevel : public USoundNode
{
public:
	int32                                        CookedQualityLevelIndex;                           // 0x48(0x4)(None)
	uint8                                        Pad_37FA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeQualityLevel* GetDefaultObj();

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeSoundClass
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                           SoundClassOverride;                                // 0x48(0x8)(ZeroConstructor)
	uint8                                        Pad_37FB[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeSoundClass* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeSwitch
class USoundNodeSwitch : public USoundNode
{
public:
	class FName                                  IntParameterName;                                  // 0x48(0x8)(None)

	static class UClass* StaticClass();
	static class USoundNodeSwitch* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeWaveParam
class USoundNodeWaveParam : public USoundNode
{
public:
	class FName                                  WaveParameterName;                                 // 0x48(0x8)(None)

	static class UClass* StaticClass();
	static class USoundNodeWaveParam* GetDefaultObj();

};

// 0x50 (0x98 - 0x48)
// Class Engine.SoundNodeWavePlayer
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TSoftObjectPtr<class USoundWave>             SoundWaveAssetPtr;                                 // 0x48(0x30)(ZeroConstructor)
	class USoundWave*                            SoundWave;                                         // 0x78(0x8)(ZeroConstructor)
	uint8                                        BitPad_2F0 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bLooping : 1;                                      // Mask: 0x2, PropSize: 0x10x80(0x1)(None)
	uint8                                        BitPad_2F1 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37FC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceSoftLoad : 1;                                // Mask: 0x1, PropSize: 0x10x88(0x1)(None)
	uint8                                        BitPad_2F2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37FD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundNodeRandom*                      SoftLoadParent;                                    // 0x90(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USoundNodeWavePlayer* GetDefaultObj();

};

// 0x18 (0x480 - 0x468)
// Class Engine.SoundSourceBus
class USoundSourceBus : public USoundWave
{
public:
	enum class ESourceBusChannels                SourceBusChannels;                                 // 0x468(0x1)(None)
	uint8                                        Pad_37FE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SourceBusDuration;                                 // 0x46C(0x4)(None)
	class UAudioBus*                             AudioBus;                                          // 0x470(0x8)(ZeroConstructor)
	uint8                                        bAutoDeactivateWhenSilent : 1;                     // Mask: 0x1, PropSize: 0x10x478(0x1)(None)
	uint8                                        Pad_37FF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundSourceBus* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.SoundSubmixBase
class USoundSubmixBase : public UObject
{
public:
	bool                                         bAutoDisable;                                      // 0x28(0x1)(None)
	uint8                                        Pad_3800[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AutoDisableTime;                                   // 0x2C(0x4)(None)
	TArray<class USoundSubmixBase*>              ChildSubmixes;                                     // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class USoundSubmixBase* GetDefaultObj();

};

// 0x8 (0x48 - 0x40)
// Class Engine.SoundSubmixWithParentBase
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                      ParentSubmix;                                      // 0x40(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USoundSubmixWithParentBase* GetDefaultObj();

};

// 0x180 (0x1C8 - 0x48)
// Class Engine.SoundSubmix
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	uint8                                        bMuteWhenBackgrounded : 1;                         // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        BitPad_2F3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_380A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundEffectSubmixPreset*>      SubmixEffectChain;                                 // 0x50(0x10)(ZeroConstructor)
	class USoundfieldEncodingSettingsBase*       AmbisonicsPluginSettings;                          // 0x60(0x8)(ZeroConstructor)
	int32                                        EnvelopeFollowerAttackTime;                        // 0x68(0x4)(None)
	int32                                        EnvelopeFollowerReleaseTime;                       // 0x6C(0x4)(None)
	float                                        OutputVolume;                                      // 0x70(0x4)(None)
	float                                        WetLevel;                                          // 0x74(0x4)(None)
	float                                        DryLevel;                                          // 0x78(0x4)(None)
	uint8                                        Pad_380B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDestinationSettings   OutputVolumeModulation;                            // 0x80(0x60)(ZeroConstructor)
	struct FSoundModulationDestinationSettings   WetLevelModulation;                                // 0xE0(0x60)(ZeroConstructor)
	struct FSoundModulationDestinationSettings   DryLevelModulation;                                // 0x140(0x60)(ZeroConstructor)
	uint8                                        bSendToAudioLink : 1;                              // Mask: 0x1, PropSize: 0x10x1A0(0x1)(None)
	uint8                                        BitPad_2F4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_380C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioLinkSettingsAbstract*            AudioLinkSettings;                                 // 0x1A8(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnSubmixRecordedFileDone;                          // 0x1B0(0x10)(ZeroConstructor)
	uint8                                        Pad_380D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundSubmix* GetDefaultObj();

	void StopSpectralAnalysis(class UObject* WorldContextObject);
	void StopRecordingOutput(class UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, const class FString& Name, const class FString& Path, class USoundWave* ExistingSoundWaveToOverwrite);
	void StopEnvelopeFollowing(class UObject* WorldContextObject);
	void StartSpectralAnalysis(class UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType);
	void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);
	void StartEnvelopeFollowing(class UObject* WorldContextObject);
	void SetSubmixWetLevel(class UObject* WorldContextObject, float InWetLevel);
	void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);
	void SetSubmixDryLevel(class UObject* WorldContextObject, float InDryLevel);
	void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, FDelegateProperty_ OnSubmixSpectralAnalysisBP);
	void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, const TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty_ OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);
	void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, FDelegateProperty_ OnSubmixEnvelopeBP);
};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundfieldSubmix
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	class FName                                  SoundfieldEncodingFormat;                          // 0x48(0x8)(None)
	class USoundfieldEncodingSettingsBase*       EncodingSettings;                                  // 0x50(0x8)(ZeroConstructor)
	TArray<class USoundfieldEffectBase*>         SoundfieldEffectChain;                             // 0x58(0x10)(ZeroConstructor)
	class UClass*                                EncodingSettingsClass;                             // 0x68(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USoundfieldSubmix* GetDefaultObj();

};

// 0x18 (0x58 - 0x40)
// Class Engine.EndpointSubmix
class UEndpointSubmix : public USoundSubmixBase
{
public:
	class FName                                  EndpointType;                                      // 0x40(0x8)(None)
	class UClass*                                EndpointSettingsClass;                             // 0x48(0x8)(ZeroConstructor)
	class UAudioEndpointSettingsBase*            EndpointSettings;                                  // 0x50(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UEndpointSubmix* GetDefaultObj();

};

// 0x38 (0x78 - 0x40)
// Class Engine.SoundfieldEndpointSubmix
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	class FName                                  SoundfieldEndpointType;                            // 0x40(0x8)(None)
	class UClass*                                EndpointSettingsClass;                             // 0x48(0x8)(ZeroConstructor)
	class USoundfieldEndpointSettingsBase*       EndpointSettings;                                  // 0x50(0x8)(ZeroConstructor)
	class UClass*                                EncodingSettingsClass;                             // 0x58(0x8)(ZeroConstructor)
	class USoundfieldEncodingSettingsBase*       EncodingSettings;                                  // 0x60(0x8)(ZeroConstructor)
	TArray<class USoundfieldEffectBase*>         SoundfieldEffectChain;                             // 0x68(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USoundfieldEndpointSubmix* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.SplineMeshActor
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                  SplineMeshComponent;                               // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASplineMeshActor* GetDefaultObj();

};

// 0x1A0 (0x268 - 0xC8)
// Class Engine.StaticMesh
class UStaticMesh : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_3827[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0xE8(0x68)(None)
	struct FPerPlatformInt                       MinLOD;                                            // 0x150(0x4)(None)
	uint8                                        Pad_3828[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStaticMaterial>               StaticMaterials;                                   // 0x158(0x10)(ZeroConstructor)
	float                                        LightmapUVDensity;                                 // 0x168(0x4)(None)
	int32                                        LightMapResolution;                                // 0x16C(0x4)(None)
	int32                                        LightMapCoordinateIndex;                           // 0x170(0x4)(None)
	float                                        DistanceFieldSelfShadowBias;                       // 0x174(0x4)(None)
	class UBodySetup*                            BodySetup;                                         // 0x178(0x8)(ZeroConstructor)
	int32                                        LODForCollision;                                   // 0x180(0x4)(None)
	uint8                                        bGenerateMeshDistanceField : 1;                    // Mask: 0x1, PropSize: 0x10x184(0x1)(None)
	uint8                                        bStripComplexCollisionForConsole : 1;              // Mask: 0x2, PropSize: 0x10x184(0x1)(None)
	uint8                                        bHasNavigationData : 1;                            // Mask: 0x4, PropSize: 0x10x184(0x1)(None)
	uint8                                        bSupportUniformlyDistributedSampling : 1;          // Mask: 0x8, PropSize: 0x10x184(0x1)(None)
	uint8                                        bSupportPhysicalMaterialMasks : 1;                 // Mask: 0x10, PropSize: 0x10x184(0x1)(None)
	uint8                                        bSupportRayTracing : 1;                            // Mask: 0x20, PropSize: 0x10x184(0x1)(None)
	uint8                                        bForceIntoHLOD : 1;                                // Mask: 0x40, PropSize: 0x10x184(0x1)(None)
	uint8                                        bDoFastBuild : 1;                                  // Mask: 0x80, PropSize: 0x10x184(0x1)(None)
	uint8                                        bIsBuiltAtRuntime : 1;                             // Mask: 0x1, PropSize: 0x10x185(0x1)(None)
	uint8                                        BitPad_2F9 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowCPUAccess : 1;                               // Mask: 0x4, PropSize: 0x10x185(0x1)(None)
	uint8                                        bSupportGpuUniformlyDistributedSampling : 1;       // Mask: 0x8, PropSize: 0x10x185(0x1)(None)
	uint8                                        BitPad_2FA : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3829[0x22];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshSocket*>             Sockets;                                           // 0x1A8(0x10)(ZeroConstructor)
	uint8                                        Pad_382A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PositiveBoundsExtension;                           // 0x1C8(0x18)(None)
	struct FVector                               NegativeBoundsExtension;                           // 0x1E0(0x18)(None)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x1F8(0x38)(None)
	int32                                        ElementToIgnoreForTexFactor;                       // 0x230(0x4)(None)
	uint8                                        Pad_382B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x238(0x10)(ZeroConstructor)
	class UNavCollisionBase*                     NavCollision;                                      // 0x248(0x8)(None)
	float                                        StreamingDistanceMultiplier;                       // 0x250(0x4)(None)
	int32                                        FarOverrideLOD;                                    // 0x254(0x4)(None)
	uint8                                        bReallyDoesWantLightMapUVs : 1;                    // Mask: 0x1, PropSize: 0x10x258(0x1)(None)
	uint8                                        bHighQualityDistanceField : 1;                     // Mask: 0x2, PropSize: 0x10x258(0x1)(None)
	uint8                                        bCastFarShadow : 1;                                // Mask: 0x4, PropSize: 0x10x258(0x1)(None)
	uint8                                        bConsoleDropLOD0 : 1;                              // Mask: 0x8, PropSize: 0x10x258(0x1)(None)
	uint8                                        bConsoleDropLOD0onLowMemPlatform : 1;              // Mask: 0x10, PropSize: 0x10x258(0x1)(None)
	uint8                                        bAllowLODStreaming : 1;                            // Mask: 0x20, PropSize: 0x10x258(0x1)(None)
	uint8                                        bPreventLODStreamingOnWindows : 1;                 // Mask: 0x40, PropSize: 0x10x258(0x1)(None)
	uint8                                        bIgnoreTriReductions : 1;                          // Mask: 0x80, PropSize: 0x10x258(0x1)(None)
	uint8                                        bForceAllowMeshStreaming : 1;                      // Mask: 0x1, PropSize: 0x10x259(0x1)(None)
	uint8                                        BitPad_2FB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_382C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformBool                      bRemovingLOD0FromCook;                             // 0x25C(0x1)(None)
	uint8                                        Pad_382D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CustomTag;                                         // 0x260(0x8)(None)

	static class UClass* StaticClass();
	static class UStaticMesh* GetDefaultObj();

	void SetStaticMaterials(const TArray<struct FStaticMaterial>& InStaticMaterials);
	void SetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32> QualityLevelMinimumLODs, int32 Default);
	void SetMinimumLODForPlatforms(TMap<class FName, int32> PlatformMinimumLODs);
	void SetMinimumLODForPlatform(class FName PlatformName, int32 InMinLOD);
	void SetBodySetup(class UBodySetup* InBodySetup);
	void RemoveSocket(class UStaticMeshSocket* Socket);
	void GetStaticMeshDescription(int32 LODIndex, class UStaticMeshDescription* ReturnValue);
	void GetStaticMaterials(const TArray<struct FStaticMaterial>& ReturnValue);
	void GetSocketsByTag(const class FString& InSocketTag, const TArray<class UStaticMeshSocket*>& ReturnValue);
	void GetNumTriangles(int32 LODIndex, int32 ReturnValue);
	void GetNumSections(int32 InLOD, int32 ReturnValue);
	void GetNumLODs(int32 ReturnValue);
	void GetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32> QualityLevelMinimumLODs, int32 Default);
	void GetMinimumLODForQualityLevels(TMap<class FName, int32> QualityLevelMinimumLODs);
	void GetMinimumLODForQualityLevel(class FName QualityLevel, int32 ReturnValue);
	void GetMinimumLODForPlatforms(TMap<class FName, int32> PlatformMinimumLODs);
	void GetMinimumLODForPlatform(class FName PlatformName, int32 ReturnValue);
	void GetMaterialIndex(class FName MaterialSlotName, int32 ReturnValue);
	void GetMaterial(int32 MaterialIndex, class UMaterialInterface* ReturnValue);
	void GetBounds(const struct FBoxSphereBounds& ReturnValue);
	void GetBoundingBox(const struct FBox& ReturnValue);
	void GetBodySetup(class UBodySetup* ReturnValue);
	void FindSocket(class FName InSocketName, class UStaticMeshSocket* ReturnValue);
	void CreateStaticMeshDescription(class UObject* Outer, class UStaticMeshDescription* ReturnValue);
	void BuildFromStaticMeshDescriptions(const TArray<class UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);
	void AddSocket(class UStaticMeshSocket* Socket);
	void AddMaterial(class UMaterialInterface* Material, class FName ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.StaticMeshDescriptionBulkData
class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData
{
public:

	static class UClass* StaticClass();
	static class UStaticMeshDescriptionBulkData* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerFunctionLibrary
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UStereoLayerFunctionLibrary* GetDefaultObj();

	void ShowSplashScreen();
	void SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void HideSplashScreen();
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
};

// 0x0 (0xB8 - 0xB8)
// Class Engine.ActorTextureStreamingBuildDataComponent
class UActorTextureStreamingBuildDataComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UActorTextureStreamingBuildDataComponent* GetDefaultObj();

};

// 0x50 (0x508 - 0x4B8)
// Class Engine.ServerStreamingLevelsVisibility
class AServerStreamingLevelsVisibility : public AActor
{
public:
	uint8                                        Pad_3838[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AServerStreamingLevelsVisibility* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.TextureMipDataProviderFactory
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:

	static class UClass* StaticClass();
	static class UTextureMipDataProviderFactory* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.AudioSubsystemCollectionRoot
class UAudioSubsystemCollectionRoot : public UObject
{
public:
	uint8                                        Pad_3839[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAudioSubsystemCollectionRoot* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.SubsystemBlueprintLibrary
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class USubsystemBlueprintLibrary* GetDefaultObj();

	void GetWorldSubsystem(class UObject* ContextObject, class UClass* Class, class UWorldSubsystem* ReturnValue);
	void GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class, class ULocalPlayerSubsystem* ReturnValue);
	void GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class, class ULocalPlayerSubsystem* ReturnValue);
	void GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class, class UGameInstanceSubsystem* ReturnValue);
	void GetEngineSubsystem(class UClass* Class, class UEngineSubsystem* ReturnValue);
	void GetAudioEngineSubsystem(class UObject* ContextObject, class UClass* Class, class UAudioEngineSubsystem* ReturnValue);
};

// 0x0 (0x4B8 - 0x4B8)
// Class Engine.TargetPoint
class ATargetPoint : public AActor
{
public:

	static class UClass* StaticClass();
	static class ATargetPoint* GetDefaultObj();

};

// 0x350 (0x378 - 0x28)
// Class Engine.AutomationTestSettings
class UAutomationTestSettings : public UObject
{
public:
	TArray<class FString>                        EngineTestModules;                                 // 0x28(0x10)(None)
	TArray<class FString>                        EditorTestModules;                                 // 0x38(0x10)(None)
	struct FSoftObjectPath                       AutomationTestmap;                                 // 0x48(0x20)(None)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                         // 0x68(0x10)(None)
	TArray<class FString>                        AssetsToOpen;                                      // 0x78(0x10)(None)
	TArray<class FString>                        MapsToPIETest;                                     // 0x88(0x10)(None)
	bool                                         bUseAllProjectMapsToPlayInPIE;                     // 0x98(0x1)(None)
	uint8                                        Pad_383A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBuildPromotionTestSettings           BuildPromotionTest;                                // 0xA0(0x1F0)(None)
	struct FMaterialEditorPromotionSettings      MaterialEditorPromotionTest;                       // 0x290(0x30)(None)
	struct FParticleEditorPromotionSettings      ParticleEditorPromotionTest;                       // 0x2C0(0x10)(None)
	struct FBlueprintEditorPromotionSettings     BlueprintEditorPromotionTest;                      // 0x2D0(0x30)(None)
	TArray<class FString>                        TestLevelFolders;                                  // 0x300(0x10)(None)
	TArray<struct FExternalToolDefinition>       ExternalTools;                                     // 0x310(0x10)(None)
	TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;                       // 0x320(0x10)(None)
	TArray<struct FLaunchOnTestSettings>         LaunchOnSettings;                                  // 0x330(0x10)(None)
	struct FIntPoint                             DefaultScreenshotResolution;                       // 0x340(0x8)(None)
	float                                        PIETestDuration;                                   // 0x348(0x4)(None)
	float                                        DefaultInteractiveFramerate;                       // 0x34C(0x4)(None)
	float                                        DefaultInteractiveFramerateWaitTime;               // 0x350(0x4)(None)
	float                                        DefaultInteractiveFramerateDuration;               // 0x354(0x4)(None)
	TArray<class FString>                        AutoRunConsoleCommands;                            // 0x358(0x10)(None)
	TArray<class FString>                        AutoRunMapFilterWhitelist;                         // 0x368(0x10)(None)

	static class UClass* StaticClass();
	static class UAutomationTestSettings* GetDefaultObj();

};

// 0x78 (0xA0 - 0x28)
// Class Engine.TransactionDiffingTestObject
class UTransactionDiffingTestObject : public UObject
{
public:
	TArray<class FName>                          NamesArray;                                        // 0x28(0x10)(None)
	class FName                                  AdditionalName;                                    // 0x38(0x8)(None)
	TArray<class UObject*>                       ObjectsArray;                                      // 0x40(0x10)(ZeroConstructor)
	class UObject*                               AdditionalObject;                                  // 0x50(0x8)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UObject>>        SoftObjectsArray;                                  // 0x58(0x10)(ZeroConstructor)
	TSoftObjectPtr<class UObject>                AdditionalSoftObject;                              // 0x68(0x30)(None)
	int32                                        PropertyData;                                      // 0x98(0x4)(None)
	uint8                                        Pad_383B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTransactionDiffingTestObject* GetDefaultObj();

};

// 0x18 (0x1F0 - 0x1D8)
// Class Engine.Texture2DDynamic
class UTexture2DDynamic : public UTexture
{
public:
	uint8                                        Pad_383C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPixelFormat                      Format;                                            // 0x1E0(0x1)(None)
	uint8                                        Pad_383D[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTexture2DDynamic* GetDefaultObj();

};

// 0x98 (0x270 - 0x1D8)
// Class Engine.TextureCubeArray
class UTextureCubeArray : public UTexture
{
public:
	uint8                                        Pad_383E[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureCubeArray* GetDefaultObj();

};

// 0x18 (0x50 - 0x38)
// Class Engine.TextureEncodingProjectSettings
class UTextureEncodingProjectSettings : public UDeveloperSettings
{
public:
	uint8                                        bFinalUsesRDO : 1;                                 // Mask: 0x1, PropSize: 0x10x38(0x1)(None)
	uint8                                        BitPad_2FC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_383F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int8                                         FinalRDOLambda;                                    // 0x3C(0x1)(None)
	enum class ETextureEncodeEffort              FinalEffortLevel;                                  // 0x3D(0x1)(None)
	enum class ETextureUniversalTiling           FinalUniversalTiling;                              // 0x3E(0x1)(None)
	uint8                                        Pad_3840[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bFastUsesRDO : 1;                                  // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_2FD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3841[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int8                                         FastRDOLambda;                                     // 0x44(0x1)(None)
	enum class ETextureEncodeEffort              FastEffortLevel;                                   // 0x45(0x1)(None)
	enum class ETextureUniversalTiling           FastUniversalTiling;                               // 0x46(0x1)(None)
	enum class ETextureEncodeSpeed               CookUsesSpeed;                                     // 0x47(0x1)(None)
	enum class ETextureEncodeSpeed               EditorUsesSpeed;                                   // 0x48(0x1)(None)
	uint8                                        Pad_3842[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureEncodingProjectSettings* GetDefaultObj();

};

// 0x8 (0x40 - 0x38)
// Class Engine.TextureEncodingUserSettings
class UTextureEncodingUserSettings : public UDeveloperSettings
{
public:
	enum class ETextureEncodeSpeedOverride       ForceEncodeSpeed;                                  // 0x38(0x1)(None)
	uint8                                        Pad_3843[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureEncodingUserSettings* GetDefaultObj();

};

// 0x8 (0x290 - 0x288)
// Class Engine.TextureLightProfile
class UTextureLightProfile : public UTexture2D
{
public:
	float                                        Brightness;                                        // 0x288(0x4)(None)
	float                                        TextureMultiplier;                                 // 0x28C(0x4)(None)

	static class UClass* StaticClass();
	static class UTextureLightProfile* GetDefaultObj();

};

// 0x20 (0x200 - 0x1E0)
// Class Engine.TextureRenderTarget2DArray
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1E0(0x4)(None)
	int32                                        SizeY;                                             // 0x1E4(0x4)(None)
	int32                                        Slices;                                            // 0x1E8(0x4)(None)
	struct FLinearColor                          ClearColor;                                        // 0x1EC(0x10)(None)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x1FC(0x1)(None)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x1FD(0x1)(None)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x1FD(0x1)(None)
	uint8                                        Pad_3844[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureRenderTarget2DArray* GetDefaultObj();

};

// 0x20 (0x200 - 0x1E0)
// Class Engine.TextureRenderTargetCube
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1E0(0x4)(None)
	struct FLinearColor                          ClearColor;                                        // 0x1E4(0x10)(None)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x1F4(0x1)(None)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x1F5(0x1)(None)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x1F5(0x1)(None)
	uint8                                        Pad_3845[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureRenderTargetCube* GetDefaultObj();

};

// 0x20 (0x200 - 0x1E0)
// Class Engine.TextureRenderTargetVolume
class UTextureRenderTargetVolume : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1E0(0x4)(None)
	int32                                        SizeY;                                             // 0x1E4(0x4)(None)
	int32                                        SizeZ;                                             // 0x1E8(0x4)(None)
	struct FLinearColor                          ClearColor;                                        // 0x1EC(0x10)(None)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x1FC(0x1)(None)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x1FD(0x1)(None)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x1FD(0x1)(None)
	uint8                                        bHalfResolutionByQuality : 1;                      // Mask: 0x4, PropSize: 0x10x1FD(0x1)(None)
	uint8                                        Pad_3846[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTextureRenderTargetVolume* GetDefaultObj();

};

// 0x90 (0xB8 - 0x28)
// Class Engine.TimelineTemplate
class UTimelineTemplate : public UObject
{
public:
	float                                        TimelineLength;                                    // 0x28(0x4)(None)
	enum class ETimelineLengthMode               LengthMode;                                        // 0x2C(0x1)(None)
	uint8                                        bAutoPlay : 1;                                     // Mask: 0x1, PropSize: 0x10x2D(0x1)(None)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x2D(0x1)(None)
	uint8                                        bReplicated : 1;                                   // Mask: 0x4, PropSize: 0x10x2D(0x1)(None)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x8, PropSize: 0x10x2D(0x1)(None)
	uint8                                        BitPad_2FE : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_384D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTTEventTrack>                 EventTracks;                                       // 0x30(0x10)(ZeroConstructor)
	TArray<struct FTTFloatTrack>                 FloatTracks;                                       // 0x40(0x10)(ZeroConstructor)
	TArray<struct FTTVectorTrack>                VectorTracks;                                      // 0x50(0x10)(ZeroConstructor)
	TArray<struct FTTLinearColorTrack>           LinearColorTracks;                                 // 0x60(0x10)(None)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0x70(0x10)(None)
	struct FGuid                                 TimelineGuid;                                      // 0x80(0x10)(None)
	enum class ETickingGroup                     TimelineTickGroup;                                 // 0x90(0x1)(None)
	uint8                                        Pad_384E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  VariableName;                                      // 0x94(0x8)(None)
	class FName                                  DirectionPropertyName;                             // 0x9C(0x8)(None)
	class FName                                  UpdateFunctionName;                                // 0xA4(0x8)(None)
	class FName                                  FinishedFunctionName;                              // 0xAC(0x8)(None)
	uint8                                        Pad_384F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTimelineTemplate* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.TriggerVolume
class ATriggerVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ATriggerVolume* GetDefaultObj();

};

// 0x50 (0xB8 - 0x68)
// Class Engine.UserDefinedEnum
class UUserDefinedEnum : public UEnum
{
public:
	TMap<class FName, class FText>               DisplayNameMap;                                    // 0x68(0x50)(None)

	static class UClass* StaticClass();
	static class UUserDefinedEnum* GetDefaultObj();

};

// 0x278 (0x2B0 - 0x38)
// Class Engine.UserInterfaceSettings
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	enum class ERenderFocusRule                  RenderFocusRule;                                   // 0x38(0x1)(None)
	uint8                                        Pad_3850[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors;                                   // 0x40(0x50)(None)
	TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors;                                   // 0x90(0x50)(None)
	struct FSoftClassPath                        DefaultCursor;                                     // 0xE0(0x20)(None)
	struct FSoftClassPath                        TextEditBeamCursor;                                // 0x100(0x20)(None)
	struct FSoftClassPath                        CrosshairsCursor;                                  // 0x120(0x20)(None)
	struct FSoftClassPath                        HandCursor;                                        // 0x140(0x20)(None)
	struct FSoftClassPath                        GrabHandCursor;                                    // 0x160(0x20)(None)
	struct FSoftClassPath                        GrabHandClosedCursor;                              // 0x180(0x20)(None)
	struct FSoftClassPath                        SlashedCircleCursor;                               // 0x1A0(0x20)(None)
	float                                        ApplicationScale;                                  // 0x1C0(0x4)(None)
	enum class EUIScalingRule                    UIScaleRule;                                       // 0x1C4(0x1)(None)
	uint8                                        Pad_3851[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        CustomScalingRuleClass;                            // 0x1C8(0x20)(None)
	struct FRuntimeFloatCurve                    UIScaleCurve;                                      // 0x1E8(0x88)(ZeroConstructor)
	bool                                         bAllowHighDPIInGameMode;                           // 0x270(0x1)(None)
	uint8                                        Pad_3852[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FIntPoint                             DesignScreenSize;                                  // 0x274(0x8)(None)
	bool                                         bLoadWidgetsOnDedicatedServer;                     // 0x27C(0x1)(None)
	bool                                         bAuthorizeAutomaticWidgetVariableCreation;         // 0x27D(0x1)(None)
	uint8                                        Pad_3853[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CursorClasses;                                     // 0x280(0x10)(ZeroConstructor)
	class UClass*                                CustomScalingRuleClassInstance;                    // 0x290(0x8)(ZeroConstructor)
	class UDPICustomScalingRule*                 CustomScalingRule;                                 // 0x298(0x8)(None)
	uint8                                        Pad_3854[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUserInterfaceSettings* GetDefaultObj();

};

// 0x388 (0x3B0 - 0x28)
// Class Engine.Canvas
class UCanvas : public UObject
{
public:
	float                                        OrgX;                                              // 0x28(0x4)(None)
	float                                        OrgY;                                              // 0x2C(0x4)(None)
	float                                        ClipX;                                             // 0x30(0x4)(None)
	float                                        ClipY;                                             // 0x34(0x4)(None)
	struct FColor                                DrawColor;                                         // 0x38(0x4)(None)
	uint8                                        bCenterX : 1;                                      // Mask: 0x1, PropSize: 0x10x3C(0x1)(None)
	uint8                                        bCenterY : 1;                                      // Mask: 0x2, PropSize: 0x10x3C(0x1)(None)
	uint8                                        bNoSmooth : 1;                                     // Mask: 0x4, PropSize: 0x10x3C(0x1)(None)
	uint8                                        BitPad_302 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3871[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SizeX;                                             // 0x40(0x4)(None)
	int32                                        SizeY;                                             // 0x44(0x4)(None)
	uint8                                        Pad_3872[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPlane                                ColorModulate;                                     // 0x50(0x20)(None)
	class UTexture2D*                            DefaultTexture;                                    // 0x70(0x8)(ZeroConstructor)
	class UTexture2D*                            GradientTexture0;                                  // 0x78(0x8)(ZeroConstructor)
	class UReporterGraph*                        ReporterGraph;                                     // 0x80(0x8)(None)
	uint8                                        Pad_3873[0x328];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCanvas* GetDefaultObj();

	void SetDrawColor(const struct FColor& C);
	void K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale, const struct FVector2D& ReturnValue);
	void K2_StrLen(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ReturnValue);
	void K2_Project(const struct FVector& WorldLocation, const struct FVector& ReturnValue);
	void K2_DrawTriangle(class UTexture* RenderTexture, const TArray<struct FCanvasUVTri>& Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, enum class EBlendMode BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int32 NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, const TArray<struct FCanvasUVTri>& Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint, bool bApplyGammaCorrection);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBoxEx(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor, enum class EBlendMode BlendMode);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, const struct FVector& WorldOrigin, const struct FVector& WorldDirection);
	void IsPositionInFrontOfViewport(const struct FVector& Location, bool ReturnValue);
	void BPDrawTextWrapped(class UFont* InFont, const class FString& InText, float X, float Y, float XWidth, float YWidth, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY, const struct FVector2D& SpacingAdjust, float ReturnValue);
	void BPDrawTextCentered(class UFont* InFont, const class FString& InText, float X, float Y, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY, float ReturnValue);
};

// 0x108 (0x130 - 0x28)
// Class Engine.Console
class UConsole : public UObject
{
public:
	uint8                                        Pad_3874[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ULocalPlayer*                          ConsoleTargetPlayer;                               // 0x38(0x8)(ZeroConstructor)
	class UTexture2D*                            DefaultTexture_Black;                              // 0x40(0x8)(ZeroConstructor)
	class UTexture2D*                            DefaultTexture_White;                              // 0x48(0x8)(None)
	uint8                                        Pad_3875[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        HistoryBuffer;                                     // 0x68(0x10)(None)
	uint8                                        Pad_3876[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsole* GetDefaultObj();

};

// 0x140 (0x168 - 0x28)
// Class Engine.InputSettings
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>         AxisConfig;                                        // 0x28(0x10)(None)
	struct FPerPlatformSettings                  PlatformSettings;                                  // 0x38(0x10)(ZeroConstructor)
	uint8                                        bAltEnterTogglesFullscreen : 1;                    // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        bF11TogglesFullscreen : 1;                         // Mask: 0x2, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseMouseForTouch : 1;                             // Mask: 0x4, PropSize: 0x10x48(0x1)(None)
	uint8                                        bEnableMouseSmoothing : 1;                         // Mask: 0x8, PropSize: 0x10x48(0x1)(None)
	uint8                                        bEnableFOVScaling : 1;                             // Mask: 0x10, PropSize: 0x10x48(0x1)(None)
	uint8                                        bCaptureMouseOnLaunch : 1;                         // Mask: 0x20, PropSize: 0x10x48(0x1)(None)
	uint8                                        bEnableLegacyInputScales : 1;                      // Mask: 0x40, PropSize: 0x10x48(0x1)(None)
	uint8                                        bEnableMotionControls : 1;                         // Mask: 0x80, PropSize: 0x10x48(0x1)(None)
	uint8                                        bFilterInputByPlatformUser : 1;                    // Mask: 0x1, PropSize: 0x10x49(0x1)(None)
	uint8                                        bEnableInputDeviceSubsystem : 1;                   // Mask: 0x2, PropSize: 0x10x49(0x1)(None)
	uint8                                        bShouldFlushPressedKeysOnViewportFocusLost : 1;    // Mask: 0x4, PropSize: 0x10x49(0x1)(None)
	uint8                                        bEnableDynamicComponentInputBinding : 1;           // Mask: 0x8, PropSize: 0x10x49(0x1)(None)
	uint8                                        bAlwaysShowTouchInterface : 1;                     // Mask: 0x10, PropSize: 0x10x49(0x1)(None)
	uint8                                        bShowConsoleOnFourFingerTap : 1;                   // Mask: 0x20, PropSize: 0x10x49(0x1)(None)
	uint8                                        bEnableGestureRecognizer : 1;                      // Mask: 0x40, PropSize: 0x10x49(0x1)(None)
	uint8                                        bUseAutocorrect : 1;                               // Mask: 0x80, PropSize: 0x10x49(0x1)(None)
	uint8                                        Pad_387C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ExcludedAutocorrectOS;                             // 0x50(0x10)(None)
	TArray<class FString>                        ExcludedAutocorrectCultures;                       // 0x60(0x10)(None)
	TArray<class FString>                        ExcludedAutocorrectDeviceModels;                   // 0x70(0x10)(None)
	enum class EMouseCaptureMode                 DefaultViewportMouseCaptureMode;                   // 0x80(0x1)(None)
	enum class EMouseLockMode                    DefaultViewportMouseLockMode;                      // 0x81(0x1)(None)
	uint8                                        Pad_387D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVScale;                                          // 0x84(0x4)(None)
	float                                        DoubleClickTime;                                   // 0x88(0x4)(None)
	uint8                                        Pad_387E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInputActionKeyMapping>        ActionMappings;                                    // 0x90(0x10)(None)
	TArray<struct FInputAxisKeyMapping>          AxisMappings;                                      // 0xA0(0x10)(None)
	TArray<struct FInputActionSpeechMapping>     SpeechMappings;                                    // 0xB0(0x10)(None)
	TSoftClassPtr<class UPlayerInput>            DefaultPlayerInputClass;                           // 0xC0(0x30)(ZeroConstructor)
	TSoftClassPtr<class UInputComponent>         DefaultInputComponentClass;                        // 0xF0(0x30)(None)
	struct FSoftObjectPath                       DefaultTouchInterface;                             // 0x120(0x20)(None)
	TArray<struct FKey>                          ConsoleKeys;                                       // 0x140(0x10)(None)
	uint8                                        Pad_387F[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputSettings* GetDefaultObj();

	void SaveKeyMappings();
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void GetInputSettings(class UInputSettings* ReturnValue);
	void GetAxisNames(const TArray<class FName>& AxisNames);
	void GetAxisMappingByName(class FName InAxisName, const TArray<struct FInputAxisKeyMapping>& OutMappings);
	void GetActionNames(const TArray<class FName>& ActionNames);
	void GetActionMappingByName(class FName InActionName, const TArray<struct FInputActionKeyMapping>& OutMappings);
	void ForceRebuildKeymaps();
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
};

// 0x28 (0x68 - 0x40)
// Class Engine.InputPlatformSettings
class UInputPlatformSettings : public UPlatformSettings
{
public:
	int32                                        MaxTriggerFeedbackPosition;                        // 0x40(0x4)(None)
	int32                                        MaxTriggerFeedbackStrength;                        // 0x44(0x4)(None)
	int32                                        MaxTriggerVibrationTriggerPosition;                // 0x48(0x4)(None)
	int32                                        MaxTriggerVibrationFrequency;                      // 0x4C(0x4)(None)
	int32                                        MaxTriggerVibrationAmplitude;                      // 0x50(0x4)(None)
	uint8                                        Pad_3880[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FHardwareDeviceIdentifier>     HardwareDevices;                                   // 0x58(0x10)(None)

	static class UClass* StaticClass();
	static class UInputPlatformSettings* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.VectorFieldVolume
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                 VectorFieldComponent;                              // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AVectorFieldVolume* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class Engine.TireType
class UTireType : public UDataAsset
{
public:
	float                                        FrictionScale;                                     // 0x30(0x4)(None)
	uint8                                        Pad_3881[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTireType* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerAutomationTests
class UVisualLoggerAutomationTests : public UObject
{
public:

	static class UClass* StaticClass();
	static class UVisualLoggerAutomationTests* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.VisualLoggerFilterVolume
class AVisualLoggerFilterVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AVisualLoggerFilterVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerKismetLibrary
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UVisualLoggerKismetLibrary* GetDefaultObj();

	void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);
	void LogText(class UObject* WorldContextObject, const class FString& Text, class FName LogCategory, bool bAddToMessageLog);
	void LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const class FString& Text, const struct FLinearColor& ObjectColor, float Thickness, class FName CategoryName, bool bAddToMessageLog);
	void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, class FName LogCategory, bool bAddToMessageLog);
	void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, class FName LogCategory, bool bAddToMessageLog);
	void EnableRecording(bool bEnabled);
};

// 0x10 (0x80 - 0x70)
// Class Engine.VoiceChannel
class UVoiceChannel : public UChannel
{
public:
	uint8                                        Pad_3886[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVoiceChannel* GetDefaultObj();

};

// 0x40 (0xF8 - 0xB8)
// Class Engine.VOIPTalker
class UVOIPTalker : public UActorComponent
{
public:
	struct FVoiceSettings                        Settings;                                          // 0xB8(0x18)(ZeroConstructor)
	uint8                                        Pad_3887[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVOIPTalker* GetDefaultObj();

	void RegisterWithPlayerState(class APlayerState* OwningState);
	void GetVoiceLevel(float ReturnValue);
	void CreateTalkerForPlayer(class APlayerState* OwningState, class UVOIPTalker* ReturnValue);
	void BPOnTalkingEnd();
	void BPOnTalkingBegin(class UAudioComponent* AudioComponent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.VOIPStatics
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UVOIPStatics* GetDefaultObj();

	void SetMicThreshold(float InThreshold);
};

// 0xA8 (0x280 - 0x1D8)
// Class Engine.VolumeTexture
class UVolumeTexture : public UTexture
{
public:
	uint8                                        Pad_3888[0x98];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureAddress                   AddressMode;                                       // 0x270(0x1)(None)
	uint8                                        Pad_3889[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVolumeTexture* GetDefaultObj();

};

// 0x8 (0x510 - 0x508)
// Class Engine.VolumetricLightmapDensityVolume
class AVolumetricLightmapDensityVolume : public AVolume
{
public:
	struct FInt32Interval                        AllowedMipLevelRange;                              // 0x508(0x8)(None)

	static class UClass* StaticClass();
	static class AVolumetricLightmapDensityVolume* GetDefaultObj();

};

// 0x18 (0x2A0 - 0x288)
// Class Engine.LightMapVirtualTexture2D
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	TArray<int8>                                 TypeToLayer;                                       // 0x288(0x10)(None)
	uint8                                        Pad_388A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ULightMapVirtualTexture2D* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class Engine.RuntimeVirtualTexture
class URuntimeVirtualTexture : public UObject
{
public:
	int32                                        TileCount;                                         // 0x28(0x4)(None)
	int32                                        TileSize;                                          // 0x2C(0x4)(None)
	int32                                        TileBorderSize;                                    // 0x30(0x4)(None)
	enum class ERuntimeVirtualTextureMaterialType MaterialType;                                      // 0x34(0x1)(None)
	bool                                         bCompressTextures;                                 // 0x35(0x1)(None)
	bool                                         bUseLowQualityCompression;                         // 0x36(0x1)(None)
	bool                                         bClearTextures;                                    // 0x37(0x1)(None)
	bool                                         bSinglePhysicalSpace;                              // 0x38(0x1)(None)
	bool                                         bPrivateSpace;                                     // 0x39(0x1)(None)
	bool                                         bAdaptive;                                         // 0x3A(0x1)(None)
	bool                                         bContinuousUpdate;                                 // 0x3B(0x1)(None)
	int32                                        RemoveLowMips;                                     // 0x3C(0x4)(None)
	enum class ETextureGroup                     LODGroup;                                          // 0x40(0x1)(None)
	uint8                                        Pad_388B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TileCount_LowQuality;                              // 0x44(0x4)(None)
	int32                                        Size;                                              // 0x48(0x4)(None)
	uint8                                        Pad_388C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URuntimeVirtualTextureStreamingProxy*  StreamingTexture;                                  // 0x50(0x8)(None)
	uint8                                        Pad_388D[0x88];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuntimeVirtualTexture* GetDefaultObj();

	void GetTileSize(int32 ReturnValue);
	void GetTileCount(int32 ReturnValue);
	void GetTileBorderSize(int32 ReturnValue);
	void GetSize(int32 ReturnValue);
	void GetPageTableSize(int32 ReturnValue);
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.RuntimeVirtualTextureVolume
class ARuntimeVirtualTextureVolume : public AActor
{
public:
	class URuntimeVirtualTextureComponent*       VirtualTextureComponent;                           // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ARuntimeVirtualTextureVolume* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.VirtualTexture
class UVirtualTexture : public UObject
{
public:

	static class UClass* StaticClass();
	static class UVirtualTexture* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.LightMapVirtualTexture
class ULightMapVirtualTexture : public UVirtualTexture
{
public:

	static class UClass* StaticClass();
	static class ULightMapVirtualTexture* GetDefaultObj();

};

// 0x8 (0x290 - 0x288)
// Class Engine.RuntimeVirtualTextureStreamingProxy
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:
	uint8                                        Pad_388E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URuntimeVirtualTextureStreamingProxy* GetDefaultObj();

};

// 0x18 (0x2A0 - 0x288)
// Class Engine.VirtualTexture2D
class UVirtualTexture2D : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings          Settings;                                          // 0x288(0x8)(None)
	bool                                         bContinuousUpdate;                                 // 0x290(0x1)(None)
	bool                                         bSinglePhysicalSpace;                              // 0x291(0x1)(None)
	uint8                                        Pad_388F[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVirtualTexture2D* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.VirtualTextureBuilder
class UVirtualTextureBuilder : public UObject
{
public:
	class UVirtualTexture2D*                     Texture;                                           // 0x28(0x8)(None)
	uint64                                       BuildHash;                                         // 0x30(0x8)(None)

	static class UClass* StaticClass();
	static class UVirtualTextureBuilder* GetDefaultObj();

};

// 0x18 (0x40 - 0x28)
// Class Engine.VirtualTexturePoolConfig
class UVirtualTexturePoolConfig : public UObject
{
public:
	int32                                        DefaultSizeInMegabyte;                             // 0x28(0x4)(None)
	uint8                                        Pad_3890[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVirtualTextureSpacePoolConfig> Pools;                                             // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UVirtualTexturePoolConfig* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.WindDirectionalSource
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*       Component;                                         // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AWindDirectionalSource* GetDefaultObj();

};

// 0x88 (0xB0 - 0x28)
// Class Engine.WorldComposition
class UWorldComposition : public UObject
{
public:
	uint8                                        Pad_3891[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULevelStreaming*>               TilesStreaming;                                    // 0x48(0x10)(ZeroConstructor)
	double                                       TilesStreamingTimeThreshold;                       // 0x58(0x8)(None)
	bool                                         bLoadAllTilesDuringCinematic;                      // 0x60(0x1)(None)
	bool                                         bRebaseOriginIn3DSpace;                            // 0x61(0x1)(None)
	uint8                                        Pad_3892[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RebaseOriginDistance;                              // 0x64(0x4)(None)
	TArray<struct FEditorTileInitialState>       TileInitialState;                                  // 0x68(0x10)(None)
	TArray<class ATileStreamingVolume*>          TileVolumes;                                       // 0x78(0x10)(None)
	double                                       LastTimeSwitchedContainedVolumes;                  // 0x88(0x8)(None)
	uint8                                        Pad_3893[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldComposition* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionBlueprintLibrary
class UWorldPartitionBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionBlueprintLibrary* GetDefaultObj();

	void UnpinActors(const TArray<struct FGuid>& InActorsToUnpin);
	void UnloadActors(const TArray<struct FGuid>& InActorsToUnload);
	void PinActors(const TArray<struct FGuid>& InActorsToPin);
	void LoadActors(const TArray<struct FGuid>& InActorsToLoad);
	void GetRuntimeWorldBounds(const struct FBox& ReturnValue);
	void GetIntersectingActorDescs(const struct FBox& InBox, const TArray<struct FActorDesc>& OutActorDescs, bool ReturnValue);
	void GetEditorWorldBounds(const struct FBox& ReturnValue);
	void GetActorDescs(const TArray<struct FActorDesc>& OutActorDescs, bool ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorDescContainer
class UActorDescContainer : public UObject
{
public:
	class UWorld*                                World;                                             // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UActorDescContainer* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class Engine.ContentBundleDescriptor
class UContentBundleDescriptor : public UObject
{
public:
	class FString                                DisplayName;                                       // 0x28(0x10)(None)
	struct FColor                                DebugColor;                                        // 0x38(0x4)(None)
	struct FGuid                                 Guid;                                              // 0x3C(0x10)(None)
	uint8                                        Pad_389E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PackageRoot;                                       // 0x50(0x10)(None)

	static class UClass* StaticClass();
	static class UContentBundleDescriptor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ContentBundleUnsavedActorMonitor
class UContentBundleUnsavedActorMonitor : public UObject
{
public:

	static class UClass* StaticClass();
	static class UContentBundleUnsavedActorMonitor* GetDefaultObj();

};

// 0x70 (0xA0 - 0x30)
// Class Engine.ContentBundleEngineSubsystem
class UContentBundleEngineSubsystem : public UEngineSubsystem
{
public:
	uint8                                        Pad_389F[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContentBundleEngineSubsystem* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class Engine.ContentBundleManager
class UContentBundleManager : public UObject
{
public:
	uint8                                        Pad_38A1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContentBundleManager* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.ContentBundleDuplicateForPIEHelper
class UContentBundleDuplicateForPIEHelper : public UObject
{
public:

	static class UClass* StaticClass();
	static class UContentBundleDuplicateForPIEHelper* GetDefaultObj();

};

// 0x2E8 (0x7A0 - 0x4B8)
// Class Engine.WorldDataLayers
class AWorldDataLayers : public AInfo
{
public:
	uint8                                        Pad_38A8[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class UDataLayerInstance*>              DataLayerInstances;                                // 0x558(0x50)(ZeroConstructor)
	TMap<class FName, TWeakObjectPtr<class UDataLayerInstance>> DeprecatedDataLayerNameToDataLayerInstance;        // 0x5A8(0x50)(ZeroConstructor)
	TSet<class UDataLayer*>                      WorldDataLayers;                                   // 0x5F8(0x50)(ZeroConstructor)
	uint8                                        Pad_38A9[0x158];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWorldDataLayers* GetDefaultObj();

	void OnDataLayerRuntimeStateChanged(class UDataLayerInstance* InDataLayer, enum class EDataLayerRuntimeState InState);
};

// 0x30 (0x58 - 0x28)
// Class Engine.DataLayer
class UDataLayer : public UObject
{
public:
	class FName                                  DataLayerLabel;                                    // 0x28(0x8)(None)
	uint8                                        bIsRuntime : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(None)
	uint8                                        BitPad_303 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38AC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDataLayerRuntimeState            InitialRuntimeState;                               // 0x34(0x1)(None)
	uint8                                        Pad_38AD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x38(0x4)(None)
	uint8                                        Pad_38AE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataLayer*                            Parent;                                            // 0x40(0x8)(ZeroConstructor)
	TArray<class UDataLayer*>                    Children;                                          // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class UDataLayer* GetDefaultObj();

	void IsVisible(bool ReturnValue);
	void IsRuntime(bool ReturnValue);
	void IsInitiallyVisible(bool ReturnValue);
	void IsInitiallyActive(bool ReturnValue);
	void IsEffectiveVisible(bool ReturnValue);
	void IsDynamicallyLoaded(bool ReturnValue);
	void GetInitialState(enum class EDataLayerState ReturnValue);
	void GetInitialRuntimeState(enum class EDataLayerRuntimeState ReturnValue);
	void GetDebugColor(const struct FColor& ReturnValue);
	void GetDataLayerLabel(class FName ReturnValue);
	void Equals(const struct FActorDataLayer& ActorDataLayer, bool ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class Engine.DataLayerAsset
class UDataLayerAsset : public UObject
{
public:
	enum class EDataLayerType                    DataLayerType;                                     // 0x28(0x1)(None)
	uint8                                        Pad_38AF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x2C(0x4)(None)

	static class UClass* StaticClass();
	static class UDataLayerAsset* GetDefaultObj();

	void IsRuntime(bool ReturnValue);
	void GetType(enum class EDataLayerType ReturnValue);
	void GetDebugColor(const struct FColor& ReturnValue);
};

// 0x20 (0x48 - 0x28)
// Class Engine.DataLayerInstance
class UDataLayerInstance : public UObject
{
public:
	enum class EDataLayerRuntimeState            InitialRuntimeState;                               // 0x28(0x1)(None)
	uint8                                        Pad_38B0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataLayerInstance*                    Parent;                                            // 0x30(0x8)(ZeroConstructor)
	TArray<class UDataLayerInstance*>            Children;                                          // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UDataLayerInstance* GetDefaultObj();

	void IsVisible(bool ReturnValue);
	void IsRuntime(bool ReturnValue);
	void IsInitiallyVisible(bool ReturnValue);
	void IsEffectiveVisible(bool ReturnValue);
	void GetType(enum class EDataLayerType ReturnValue);
	void GetInitialRuntimeState(enum class EDataLayerRuntimeState ReturnValue);
	void GetDebugColor(const struct FColor& ReturnValue);
};

// 0x8 (0x50 - 0x48)
// Class Engine.DataLayerInstanceWithAsset
class UDataLayerInstanceWithAsset : public UDataLayerInstance
{
public:
	class UDataLayerAsset*                       DataLayerAsset;                                    // 0x48(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDataLayerInstanceWithAsset* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.DataLayerLoadingPolicy
class UDataLayerLoadingPolicy : public UObject
{
public:

	static class UClass* StaticClass();
	static class UDataLayerLoadingPolicy* GetDefaultObj();

};

// 0x150 (0x180 - 0x30)
// Class Engine.DataLayerSubsystem
class UDataLayerSubsystem : public UWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnDataLayerRuntimeStateChanged;                    // 0x30(0x10)(ZeroConstructor)
	TSoftClassPtr<class UDataLayerLoadingPolicy> DataLayerLoadingPolicyClass;                       // 0x40(0x30)(ZeroConstructor)
	class UDataLayerLoadingPolicy*               DataLayerLoadingPolicy;                            // 0x70(0x8)(None)
	uint8                                        Pad_38C3[0x108];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataLayerSubsystem* GetDefaultObj();

	void SetDataLayerStateByLabel(class FName InDataLayerLabel, enum class EDataLayerState InState);
	void SetDataLayerState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerState InState);
	void SetDataLayerRuntimeStateByLabel(class FName InDataLayerLabel, enum class EDataLayerRuntimeState InState, bool bInIsRecursive);
	void SetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState InState, bool bInIsRecursive);
	void SetDataLayerInstanceRuntimeState(class UDataLayerAsset* InDataLayerAsset, enum class EDataLayerRuntimeState InState, bool bInIsRecursive);
	void GetLoadedDataLayerNames(TSet<class FName> ReturnValue);
	void GetDataLayerStateByLabel(class FName InDataLayerLabel, enum class EDataLayerState ReturnValue);
	void GetDataLayerState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerState ReturnValue);
	void GetDataLayerRuntimeStateByLabel(class FName InDataLayerLabel, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayerInstanceRuntimeState(class UDataLayerAsset* InDataLayerAsset, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayerInstanceFromAsset(class UDataLayerAsset* InDataLayerAsset, class UDataLayerInstance* ReturnValue);
	void GetDataLayerInstanceEffectiveRuntimeState(class UDataLayerAsset* InDataLayerAsset, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayerFromName(class FName InDataLayerName, class UDataLayerInstance* ReturnValue);
	void GetDataLayerFromLabel(class FName InDataLayerLabel, class UDataLayerInstance* ReturnValue);
	void GetDataLayerEffectiveRuntimeStateByLabel(class FName InDataLayerLabel, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayerEffectiveRuntimeState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState ReturnValue);
	void GetDataLayer(const struct FActorDataLayer& InDataLayer, class UDataLayerInstance* ReturnValue);
	void GetActiveDataLayerNames(TSet<class FName> ReturnValue);
};

// 0x18 (0x60 - 0x48)
// Class Engine.DeprecatedDataLayerInstance
class UDeprecatedDataLayerInstance : public UDataLayerInstance
{
public:
	class FName                                  Label;                                             // 0x48(0x8)(None)
	class FName                                  DeprecatedDataLayerFName;                          // 0x50(0x8)(None)
	enum class EDataLayerType                    DataLayerType;                                     // 0x58(0x1)(None)
	uint8                                        Pad_38C4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x5C(0x4)(None)

	static class UClass* StaticClass();
	static class UDeprecatedDataLayerInstance* GetDefaultObj();

};

// 0x10 (0x2D8 - 0x2C8)
// Class Engine.WorldPartitionDestructibleHLODComponent
class UWorldPartitionDestructibleHLODComponent : public USceneComponent
{
public:
	TArray<class FName>                          DestructibleActors;                                // 0x2C8(0x10)(None)

	static class UClass* StaticClass();
	static class UWorldPartitionDestructibleHLODComponent* GetDefaultObj();

};

// 0x168 (0x440 - 0x2D8)
// Class Engine.WorldPartitionDestructibleHLODMeshComponent
class UWorldPartitionDestructibleHLODMeshComponent : public UWorldPartitionDestructibleHLODComponent
{
public:
	class UMaterialInterface*                    DestructibleHLODMaterial;                          // 0x2D8(0x8)(ZeroConstructor)
	struct FWorldPartitionDestructibleHLODState  DestructibleHLODState;                             // 0x2E0(0x148)(ZeroConstructor)
	class UMaterialInstanceDynamic*              VisibilityMaterial;                                // 0x428(0x8)(ZeroConstructor)
	class UTexture2DDynamic*                     VisibilityTexture;                                 // 0x430(0x8)(ZeroConstructor)
	uint8                                        Pad_38C7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionDestructibleHLODMeshComponent* GetDefaultObj();

};

// 0x50 (0x508 - 0x4B8)
// Class Engine.WorldPartitionHLOD
class AWorldPartitionHLOD : public AActor
{
public:
	uint32                                       LODLevel;                                          // 0x4B8(0x4)(None)
	bool                                         bRequireWarmup;                                    // 0x4BC(0x1)(None)
	uint8                                        Pad_38C8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> SourceCell;                                        // 0x4C0(0x30)(ZeroConstructor)
	class FName                                  SourceCellName;                                    // 0x4F0(0x8)(None)
	struct FGuid                                 SourceCellGuid;                                    // 0x4F8(0x10)(None)

	static class UClass* StaticClass();
	static class AWorldPartitionHLOD* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODBuilderSettings
class UHLODBuilderSettings : public UObject
{
public:

	static class UClass* StaticClass();
	static class UHLODBuilderSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.NullHLODBuilder
class UNullHLODBuilder : public UHLODBuilder
{
public:

	static class UClass* StaticClass();
	static class UNullHLODBuilder* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionDestructibleInHLODInterface
class IWorldPartitionDestructibleInHLODInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWorldPartitionDestructibleInHLODInterface* GetDefaultObj();

	void SetHLODDestructionTag(const struct FWorldPartitionHLODDestructionTag& InDestructionTag);
	void GetHLODDestructionTag(const struct FWorldPartitionHLODDestructionTag& ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionDestructibleInHLODSupportLibrary
class UWorldPartitionDestructibleInHLODSupportLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionDestructibleInHLODSupportLibrary* GetDefaultObj();

	void DestroyInHLOD(TScriptInterface<class IWorldPartitionDestructibleInHLODInterface> DestructibleInHLOD);
	void DamageInHLOD(TScriptInterface<class IWorldPartitionDestructibleInHLODInterface> DestructibleInHLOD, float DamagePercent);
};

// 0x60 (0x88 - 0x28)
// Class Engine.HLODLayer
class UHLODLayer : public UObject
{
public:
	enum class EHLODLayerType                    LayerType;                                         // 0x28(0x1)(None)
	uint8                                        Pad_38CF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                HLODBuilderClass;                                  // 0x30(0x8)(ZeroConstructor)
	class UHLODBuilderSettings*                  HLODBuilderSettings;                               // 0x38(0x8)(ZeroConstructor)
	uint8                                        bIsSpatiallyLoaded : 1;                            // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_304 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38D1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CellSize;                                          // 0x44(0x4)(None)
	double                                       LoadingRange;                                      // 0x48(0x8)(None)
	TSoftObjectPtr<class UHLODLayer>             ParentLayer;                                       // 0x50(0x30)(ZeroConstructor)
	class UClass*                                HLODModifierClass;                                 // 0x80(0x8)(None)

	static class UClass* StaticClass();
	static class UHLODLayer* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionHLODModifier
class UWorldPartitionHLODModifier : public UObject
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionHLODModifier* GetDefaultObj();

};

// 0xF8 (0x128 - 0x30)
// Class Engine.HLODSubsystem
class UHLODSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_38D2[0xF8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHLODSubsystem* GetDefaultObj();

};

// 0x48 (0x500 - 0x4B8)
// Class Engine.NavigationDataChunkActor
class ANavigationDataChunkActor : public APartitionActor
{
public:
	TArray<class UNavigationDataChunk*>          NavDataChunks;                                     // 0x4B8(0x10)(ZeroConstructor)
	struct FBox                                  DataChunkActorBounds;                              // 0x4C8(0x38)(None)

	static class UClass* StaticClass();
	static class ANavigationDataChunkActor* GetDefaultObj();

};

// 0x118 (0x140 - 0x28)
// Class Engine.WorldPartition
class UWorldPartition : public UObject
{
public:
	uint8                                        Pad_38D3[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UActorDescContainer*                   ActorDescContainer;                                // 0x60(0x8)(ZeroConstructor)
	class UWorldPartitionRuntimeHash*            RuntimeHash;                                       // 0x68(0x8)(ZeroConstructor)
	class UWorld*                                World;                                             // 0x70(0x8)(ZeroConstructor)
	bool                                         bEnableStreaming;                                  // 0x78(0x1)(None)
	uint8                                        Pad_38D5[0x87];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorldPartitionStreamingPolicy*        StreamingPolicy;                                   // 0x100(0x8)(ZeroConstructor)
	uint8                                        Pad_38D6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ATileStreamingVolume*>          TileVolumes;                                       // 0x110(0x10)(None)
	uint8                                        Pad_38D7[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartition* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionActorLoaderInterface
class IWorldPartitionActorLoaderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWorldPartitionActorLoaderInterface* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorHash
class UWorldPartitionEditorHash : public UObject
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionEditorHash* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorPerProjectUserSettings
class UWorldPartitionEditorPerProjectUserSettings : public UObject
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionEditorPerProjectUserSettings* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorSpatialHash
class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash
{
public:

	static class UClass* StaticClass();
	static class UWorldPartitionEditorSpatialHash* GetDefaultObj();

};

// 0x20 (0x1E0 - 0x1C0)
// Class Engine.WorldPartitionLevelStreamingDynamic
class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic
{
public:
	bool                                         bShouldBeAlwaysLoaded;                             // 0x1C0(0x1)(None)
	uint8                                        Pad_38D9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class UWorldPartitionRuntimeLevelStreamingCell> StreamingCell;                                     // 0x1C4(0x8)(ZeroConstructor)
	TWeakObjectPtr<class UWorldPartition>        OuterWorldPartition;                               // 0x1CC(0x8)(ZeroConstructor)
	uint8                                        Pad_38DA[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionLevelStreamingDynamic* GetDefaultObj();

};

// 0x288 (0x2B0 - 0x28)
// Class Engine.WorldPartitionStreamingPolicy
class UWorldPartitionStreamingPolicy : public UObject
{
public:
	uint8                                        Pad_38DB[0x288];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionStreamingPolicy* GetDefaultObj();

};

// 0x50 (0x300 - 0x2B0)
// Class Engine.WorldPartitionLevelStreamingPolicy
class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy
{
public:
	TMap<class FName, class FName>               SubObjectsToCellRemapping;                         // 0x2B0(0x50)(None)

	static class UClass* StaticClass();
	static class UWorldPartitionLevelStreamingPolicy* GetDefaultObj();

};

// 0xD0 (0x588 - 0x4B8)
// Class Engine.WorldPartitionMiniMap
class AWorldPartitionMiniMap : public AInfo
{
public:
	struct FBox                                  MiniMapWorldBounds;                                // 0x4B8(0x38)(None)
	struct FBox2D                                UVOffset;                                          // 0x4F0(0x28)(None)
	class UTexture2D*                            MiniMapTexture;                                    // 0x518(0x8)(ZeroConstructor)
	TSet<struct FActorDataLayer>                 ExcludedDataLayers;                                // 0x520(0x50)(None)
	int32                                        WorldUnitsPerPixel;                                // 0x570(0x4)(None)
	int32                                        BuilderCellSize;                                   // 0x574(0x4)(None)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x578(0x1)(None)
	uint8                                        Pad_38DD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       CaptureWarmupFrames;                               // 0x57C(0x4)(None)
	int32                                        MiniMapTileSize;                                   // 0x580(0x4)(None)
	uint8                                        Pad_38DE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWorldPartitionMiniMap* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class Engine.WorldPartitionMiniMapVolume
class AWorldPartitionMiniMapVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AWorldPartitionMiniMapVolume* GetDefaultObj();

};

// 0x20 (0x4D8 - 0x4B8)
// Class Engine.WorldPartitionReplay
class AWorldPartitionReplay : public AActor
{
public:
	TArray<class FName>                          StreamingSourceNames;                              // 0x4B8(0x10)(None)
	uint8                                        Pad_38DF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWorldPartitionReplay* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class Engine.WorldPartitionRuntimeCell
class UWorldPartitionRuntimeCell : public UObject
{
public:
	uint8                                        Pad_38E0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsAlwaysLoaded;                                   // 0x30(0x1)(None)
	uint8                                        Pad_38E2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DataLayers;                                        // 0x38(0x10)(None)
	struct FWorldPartitionRuntimeCellDebugInfo   DebugInfo;                                         // 0x48(0x30)(None)
	int32                                        Priority;                                          // 0x78(0x4)(None)
	bool                                         bClientOnlyVisible;                                // 0x7C(0x1)(None)
	bool                                         bIsHLOD;                                           // 0x7D(0x1)(None)
	bool                                         bBlockOnSlowLoading;                               // 0x7E(0x1)(None)
	uint8                                        Pad_38E3[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 ContentBundleID;                                   // 0x80(0x10)(None)
	struct FGuid                                 CellGuid;                                          // 0x90(0x10)(None)
	class UWorldPartitionRuntimeCellData*        RuntimeCellData;                                   // 0xA0(0x8)(None)

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeCell* GetDefaultObj();

};

// 0x60 (0xE0 - 0x80)
// Class Engine.WorldPartitionRuntimeCellDataSpatialHash
class UWorldPartitionRuntimeCellDataSpatialHash : public UWorldPartitionRuntimeCellData
{
public:
	struct FVector                               Position;                                          // 0x80(0x18)(None)
	float                                        Extent;                                            // 0x98(0x4)(None)
	int32                                        Level;                                             // 0x9C(0x4)(None)
	uint8                                        Pad_38E4[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeCellDataSpatialHash* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionCell
class IWorldPartitionCell : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWorldPartitionCell* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionRuntimeCellOwner
class IWorldPartitionRuntimeCellOwner : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IWorldPartitionRuntimeCellOwner* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class Engine.RuntimeHashExternalStreamingObjectBase
class URuntimeHashExternalStreamingObjectBase : public UObject
{
public:
	uint8                                        Pad_38E5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorld>                 OwningWorld;                                       // 0x30(0x30)(ZeroConstructor)
	TSoftObjectPtr<class UWorld>                 OuterWorld;                                        // 0x60(0x30)(None)

	static class UClass* StaticClass();
	static class URuntimeHashExternalStreamingObjectBase* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class Engine.WorldPartitionRuntimeHash
class UWorldPartitionRuntimeHash : public UObject
{
public:
	uint8                                        Pad_38E6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeHash* GetDefaultObj();

};

// 0x8 (0xB0 - 0xA8)
// Class Engine.WorldPartitionRuntimeLevelStreamingCell
class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeCell
{
public:
	class UWorldPartitionLevelStreamingDynamic*  LevelStreaming;                                    // 0xA8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeLevelStreamingCell* GetDefaultObj();

	void OnLevelShown();
	void OnLevelHidden();
};

// 0x8 (0x4C0 - 0x4B8)
// Class Engine.SpatialHashRuntimeGridInfo
class ASpatialHashRuntimeGridInfo : public AInfo
{
public:
	struct FSpatialHashRuntimeGrid               GridSettings;                                      // 0x4B8(0x1)(None)
	uint8                                        Pad_38E7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASpatialHashRuntimeGridInfo* GetDefaultObj();

};

// 0x60 (0xF0 - 0x90)
// Class Engine.RuntimeSpatialHashExternalStreamingObject
class URuntimeSpatialHashExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase
{
public:
	TArray<struct FSpatialHashStreamingGrid>     StreamingGrids;                                    // 0x90(0x10)(ZeroConstructor)
	TMap<class FName, class FName>               CellToLevelStreamingPackage;                       // 0xA0(0x50)(None)

	static class UClass* StaticClass();
	static class URuntimeSpatialHashExternalStreamingObject* GetDefaultObj();

};

// 0x80 (0xB0 - 0x30)
// Class Engine.WorldPartitionRuntimeSpatialHash
class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash
{
public:
	bool                                         bEnableZCulling;                                   // 0x30(0x1)(None)
	uint8                                        Pad_38E8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSpatialHashStreamingGrid>     StreamingGrids;                                    // 0x38(0x10)(ZeroConstructor)
	uint8                                        Pad_38E9[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class URuntimeSpatialHashExternalStreamingObject>> ExternalStreamingObjects;                          // 0xA0(0x10)(None)

	static class UClass* StaticClass();
	static class UWorldPartitionRuntimeSpatialHash* GetDefaultObj();

};

// 0x80 (0xC0 - 0x40)
// Class Engine.WorldPartitionSubsystem
class UWorldPartitionSubsystem : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_38ED[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldPartitionSubsystem* GetDefaultObj();

	void IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState QueryState, const TArray<struct FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState, bool ReturnValue);
	void IsAllStreamingCompleted(bool ReturnValue);
};

// 0x0 (0x508 - 0x508)
// Class Engine.WorldPartitionVolume
class AWorldPartitionVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AWorldPartitionVolume* GetDefaultObj();

};

}



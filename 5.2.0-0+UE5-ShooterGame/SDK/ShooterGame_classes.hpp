#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0xB0 (0x790 - 0x6E0)
// Class ShooterGame.CustomCanvasWidget
class UCustomCanvasWidget : public UButton
{
public:
	uint8                                        Pad_1157[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bOverrideScreenCanvasProjection;                   // 0x728(0x1)(None)
	bool                                         bIgnoreParentAlpha;                                // 0x729(0x1)(None)
	uint8                                        Pad_1158[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnDraggedObject;                                   // 0x730(0x10)(ZeroConstructor)
	uint8                                        Pad_1159[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCustomCanvasWidget* GetDefaultObj();

};

// 0x148 (0x8D8 - 0x790)
// Class ShooterGame.DataListEntryButton
class UDataListEntryButton : public UCustomCanvasWidget
{
public:
	uint8                                        Pad_115B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayString;                                     // 0x7A0(0x10)(None)
	class FString                                AdditionalDisplayString;                           // 0x7B0(0x10)(None)
	class FName                                  ContextMenuAnchorName;                             // 0x7C0(0x8)(None)
	class UTexture2D*                            ItemIcon;                                          // 0x7C8(0x8)(ZeroConstructor)
	struct FLinearColor                          ForegroundColor;                                   // 0x7D0(0x10)(None)
	bool                                         bUseSelectedBackgroundColor;                       // 0x7E0(0x1)(None)
	uint8                                        Pad_115C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          SelectedBackgroundColor;                           // 0x7E4(0x10)(None)
	uint8                                        Pad_115D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            AltHighlightBGTexture;                             // 0x7F8(0x8)(ZeroConstructor)
	float                                        NameOffset;                                        // 0x800(0x4)(None)
	bool                                         bClickable;                                        // 0x804(0x1)(None)
	bool                                         bEnabled;                                          // 0x805(0x1)(None)
	bool                                         bUseDisplayString;                                 // 0x806(0x1)(None)
	uint8                                        Pad_115E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          DisplayStringColor;                                // 0x808(0x10)(None)
	struct FVector2D                             DisplayStringOffset;                               // 0x818(0x10)(None)
	float                                        TextDisplayStringSize;                             // 0x828(0x4)(None)
	uint8                                        Pad_115F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             DisplayStringScale;                                // 0x830(0x10)(None)
	bool                                         bDisplayStringCenterX;                             // 0x840(0x1)(None)
	bool                                         bDisplayStringCenterY;                             // 0x841(0x1)(None)
	bool                                         bSetIndexPlusOneToDisplayString;                   // 0x842(0x1)(None)
	bool                                         bAllowClickingWhenNoEntry;                         // 0x843(0x1)(None)
	uint8                                        Pad_1160[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 DisplayStringFont;                                 // 0x848(0x8)(ZeroConstructor)
	class UTexture2D*                            SelectedIcon;                                      // 0x850(0x8)(ZeroConstructor)
	struct FLinearColor                          DisabledColor;                                     // 0x858(0x10)(None)
	struct FLinearColor                          TintColorOverride;                                 // 0x868(0x10)(None)
	uint8                                        bDataListAutomaticallyOverrideText : 1;            // Mask: 0x1, PropSize: 0x10x878(0x1)(None)
	uint8                                        bDataListAutomaticallyOverrideEnabled : 1;         // Mask: 0x2, PropSize: 0x10x878(0x1)(None)
	uint8                                        bWrapText : 1;                                     // Mask: 0x4, PropSize: 0x10x878(0x1)(None)
	uint8                                        bUseDataProviderCustomColor : 1;                   // Mask: 0x8, PropSize: 0x10x878(0x1)(None)
	uint8                                        bOverrideTintColor : 1;                            // Mask: 0x10, PropSize: 0x10x878(0x1)(None)
	uint8                                        bShowDisplayStringWhenHasItem : 1;                 // Mask: 0x20, PropSize: 0x10x878(0x1)(None)
	uint8                                        bUseCustomTextColor : 1;                           // Mask: 0x40, PropSize: 0x10x878(0x1)(None)
	uint8                                        bSelected : 1;                                     // Mask: 0x80, PropSize: 0x10x878(0x1)(None)
	uint8                                        bForceDraggingDisabled : 1;                        // Mask: 0x1, PropSize: 0x10x879(0x1)(None)
	uint8                                        bDraggable : 1;                                    // Mask: 0x2, PropSize: 0x10x879(0x1)(None)
	uint8                                        BitPad_FB : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowExtraIcon : 1;                               // Mask: 0x10, PropSize: 0x10x879(0x1)(None)
	uint8                                        bToggleButton : 1;                                 // Mask: 0x20, PropSize: 0x10x879(0x1)(None)
	uint8                                        BitPad_FC : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1162[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            OverrideDisabledIcon;                              // 0x890(0x8)(ZeroConstructor)
	struct FVector2D                             WrappedTextSpacingAdjust;                          // 0x898(0x10)(None)
	uint8                                        Pad_1163[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                OverridenTextColor;                                // 0x8B0(0x4)(None)
	bool                                         bHasEngram;                                        // 0x8B4(0x1)(None)
	bool                                         bKnownEngram;                                      // 0x8B5(0x1)(None)
	bool                                         bOverrideStlye;                                    // 0x8B6(0x1)(None)
	uint8                                        Pad_1164[0x11];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              MyIconMat;                                         // 0x8C8(0x8)(ZeroConstructor)
	class UMenuAnchor*                           ContextMenuAnchor;                                 // 0x8D0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDataListEntryButton* GetDefaultObj();

	void OnGetContextMenuContent(class UWidget* ReturnValue);
	void GetStringValue(const class FString& ReturnValue);
	void GetOverridenStringValue(const class FString& ReturnValue);
	void ClickedSecondaryButton(class UWidget* ClickedWidget);
	void ClickedButton(class UWidget* ClickedWidget);
};

// 0x58 (0x930 - 0x8D8)
// Class ShooterGame.AdminPlayerInfoEntryButton
class UAdminPlayerInfoEntryButton : public UDataListEntryButton
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x8D8(0x1)(None)
	uint8                                        BitPad_FD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1168[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerName;                                        // 0x8E0(0x10)(None)
	class FString                                SteamPlayerName;                                   // 0x8F0(0x10)(None)
	class FString                                LinkedPlayerID;                                    // 0x900(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x910(0x1)(None)
	uint8                                        Pad_1169[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x914(0x10)(None)
	uint8                                        Pad_116A[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAdminPlayerInfoEntryButton* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.AhoCorasickMatch
class UAhoCorasickMatch : public UObject
{
public:

	static class UClass* StaticClass();
	static class UAhoCorasickMatch* GetDefaultObj();

	void SearchWords(const class FString& Text, const struct FAhoCorasickMatcher& Matcher, const TArray<class FString>& OutKeys, const TArray<struct FIntArray>& OutValues, bool bFilterOverlaps, bool bGetShortest);
	void AddWords(const TArray<class FString>& WordList, const struct FAhoCorasickMatcher& Matcher);
};

// 0x20 (0x4D8 - 0x4B8)
// Class ShooterGame.AIAttackCoordinator
class AAIAttackCoordinator : public AActor
{
public:
	int32                                        MaxAttackersPerTarget;                             // 0x4B8(0x4)(None)
	float                                        UpdateInterval;                                    // 0x4BC(0x4)(None)
	TArray<TWeakObjectPtr<class APrimalDinoAIController>> Attackers;                                         // 0x4C0(0x10)(ZeroConstructor)
	uint8                                        Pad_1176[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AAIAttackCoordinator* GetDefaultObj();

	void UpdateAttackGroup(const TArray<class APrimalDinoAIController*>& AttackGroup);
	void RemoveAttacker(class APrimalDinoAIController* Controller);
	void GetNumAttackersWithPriorityForTarget(class AActor* Target, int32 ReturnValue);
	void GetNumAttackersForTarget(class AActor* Target, int32 ReturnValue);
	void ClearAllAttackers();
	void CalculateAttackerPriorityWeight(class APrimalDinoAIController* Attacker, float ReturnValue);
	void AddAttackerCharacter(class APrimalDinoCharacter* Character);
	void AddAttacker(class APrimalDinoAIController* Controller);
};

// 0xC0 (0xE8 - 0x28)
// Class ShooterGame.AllClustersInventory
class UAllClustersInventory : public UObject
{
public:
	uint8                                        Pad_1189[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAllClustersInventory* GetDefaultObj();

	void OnFinishedSaveForChangingItems(bool Success, const class FString& UserId);
	void OnFinishedReadLockForCreateLock(bool Success, const class FString& UserId, bool Locked);
	void OnFinishedLoadForChangingItems(bool Success, const class FString& UserId, const TArray<struct FItemNetInfo>& ArkItems);
	void OnFinishedCreateLockForChangingItems(bool Success, const class FString& UserId);
	void OnFinishedClearLockForChangingItems(bool Success, const class FString& UserId);
};

// 0x38 (0x910 - 0x8D8)
// Class ShooterGame.AllPaintingsEntryButton
class UAllPaintingsEntryButton : public UDataListEntryButton
{
public:
	class FString                                Filename;                                          // 0x8D8(0x10)(None)
	class FString                                FilePath;                                          // 0x8E8(0x10)(None)
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x8F8(0x10)(None)
	uint8                                        Pad_118A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAllPaintingsEntryButton* GetDefaultObj();

};

// 0x48 (0x920 - 0x8D8)
// Class ShooterGame.AllPlayersEntryButton
class UAllPlayersEntryButton : public UDataListEntryButton
{
public:
	class FString                                PlayerName;                                        // 0x8D8(0x10)(None)
	class FString                                TribeName;                                         // 0x8E8(0x10)(None)
	uint64                                       PlayerID;                                          // 0x8F8(0x8)(None)
	uint64                                       TargetingTeamID;                                   // 0x900(0x8)(None)
	class AShooterCharacter*                     CurrentCharachter;                                 // 0x908(0x8)(ZeroConstructor)
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x910(0x10)(None)

	static class UClass* StaticClass();
	static class UAllPlayersEntryButton* GetDefaultObj();

};

// 0xC8 (0x410 - 0x348)
// Class ShooterGame.AnimInstance_DinoBlueprintBase
class UAnimInstance_DinoBlueprintBase : public UAnimInstance
{
public:
	bool                                         bAllowNativeAnimations;                            // 0x348(0x1)(None)
	bool                                         bDisableBlueprint;                                 // 0x349(0x1)(None)
	uint8                                        Pad_1192[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RootRotationOffset;                                // 0x350(0x18)(None)
	struct FVector                               RootLocationOffset;                                // 0x368(0x18)(None)
	bool                                         bSkipAnimGraph;                                    // 0x380(0x1)(None)
	uint8                                        Pad_1193[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementAnimRate;                                  // 0x384(0x4)(None)
	float                                        MovementAnimRatePower;                             // 0x388(0x4)(None)
	float                                        MinMovementAnimRate;                               // 0x38C(0x4)(None)
	float                                        MaxMovementAnimRate;                               // 0x390(0x4)(None)
	float                                        MovingAnimSpeedTreshold;                           // 0x394(0x4)(None)
	bool                                         bIsMoving;                                         // 0x398(0x1)(None)
	bool                                         bUseAimOffset;                                     // 0x399(0x1)(None)
	uint8                                        Pad_1199[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimPitch;                                          // 0x39C(0x4)(None)
	float                                        AimYaw;                                            // 0x3A0(0x4)(None)
	bool                                         bUseBlinking;                                      // 0x3A4(0x1)(None)
	uint8                                        Pad_119A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlinkBlend;                                        // 0x3A8(0x4)(None)
	bool                                         bUseTurning;                                       // 0x3AC(0x1)(None)
	bool                                         bUseTurnInPlaceAnimation;                          // 0x3AD(0x1)(None)
	uint8                                        Pad_119B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TurningEnabledBlendTime;                           // 0x3B0(0x4)(None)
	float                                        TurningDisabledBlendTime;                          // 0x3B4(0x4)(None)
	float                                        TurningDirectionBlendTime;                         // 0x3B8(0x4)(None)
	float                                        MinTurnRateForTurnAnimation;                       // 0x3BC(0x4)(None)
	bool                                         bIsTurning;                                        // 0x3C0(0x1)(None)
	bool                                         bTurningRight;                                     // 0x3C1(0x1)(None)
	bool                                         bUseSwimming;                                      // 0x3C2(0x1)(None)
	uint8                                        Pad_119C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SwimmingMovingAnimSpeedThreshold;                  // 0x3C4(0x4)(None)
	bool                                         bIsSwimming;                                       // 0x3C8(0x1)(None)
	bool                                         bUseRunning;                                       // 0x3C9(0x1)(None)
	bool                                         bUseRunningMovementAnimRate;                       // 0x3CA(0x1)(None)
	uint8                                        Pad_119D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RunningMovementAnimRate;                           // 0x3CC(0x4)(None)
	bool                                         bIsRunning;                                        // 0x3D0(0x1)(None)
	bool                                         bUseSleepingAnim;                                  // 0x3D1(0x1)(None)
	uint8                                        Pad_119E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SleepingAnimTranslationOffset;                     // 0x3D8(0x18)(None)
	bool                                         bIsSleeping;                                       // 0x3F0(0x1)(None)
	bool                                         bUseFalling;                                       // 0x3F1(0x1)(None)
	uint8                                        Pad_119F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FallingAnimPlayRate;                               // 0x3F4(0x4)(None)
	float                                        FallingBlendInTime;                                // 0x3F8(0x4)(None)
	float                                        FallingBlendOutTime;                               // 0x3FC(0x4)(None)
	bool                                         bIsFalling;                                        // 0x400(0x1)(None)
	uint8                                        Pad_11A0[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimInstance_DinoBlueprintBase* GetDefaultObj();

};

// 0xE8 (0x430 - 0x348)
// Class ShooterGame.AnimInstance_DinoRootBoneName
class UAnimInstance_DinoRootBoneName : public UAnimInstance
{
public:
	bool                                         bAllowNativeAnimations;                            // 0x348(0x1)(None)
	bool                                         bDisableBlueprint;                                 // 0x349(0x1)(None)
	uint8                                        Pad_11A3[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RootRotationOffset;                                // 0x350(0x18)(None)
	struct FVector                               RootLocationOffset;                                // 0x368(0x18)(None)
	float                                        IKAlpha;                                           // 0x380(0x4)(None)
	bool                                         bDisableIK;                                        // 0x384(0x1)(None)
	bool                                         bDisableIKWhenFalling;                             // 0x385(0x1)(None)
	bool                                         bSleepingEnableIK;                                 // 0x386(0x1)(None)
	bool                                         bSkipAnimGraph;                                    // 0x387(0x1)(None)
	float                                        MovementAnimRate;                                  // 0x388(0x4)(None)
	float                                        MovementAnimRatePower;                             // 0x38C(0x4)(None)
	float                                        MinMovementAnimRate;                               // 0x390(0x4)(None)
	float                                        MaxMovementAnimRate;                               // 0x394(0x4)(None)
	float                                        MovingAnimSpeedTreshold;                           // 0x398(0x4)(None)
	float                                        MovingBlendInTime;                                 // 0x39C(0x4)(None)
	float                                        MovingBlendOutTime;                                // 0x3A0(0x4)(None)
	bool                                         bIsMoving;                                         // 0x3A4(0x1)(None)
	bool                                         bUseAimOffset;                                     // 0x3A5(0x1)(None)
	uint8                                        Pad_1246[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimPitch;                                          // 0x3A8(0x4)(None)
	float                                        AimYaw;                                            // 0x3AC(0x4)(None)
	float                                        AimOffsetPitchScale;                               // 0x3B0(0x4)(None)
	float                                        AimOffsetYawScale;                                 // 0x3B4(0x4)(None)
	bool                                         bUseAlignGround;                                   // 0x3B8(0x1)(None)
	uint8                                        Pad_1247[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlignGroundAlpha;                                  // 0x3BC(0x4)(None)
	bool                                         bUseBlinking;                                      // 0x3C0(0x1)(None)
	uint8                                        Pad_1248[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlinkBlend;                                        // 0x3C4(0x4)(None)
	bool                                         bUseTurning;                                       // 0x3C8(0x1)(None)
	bool                                         bUseTurnInPlaceAnimation;                          // 0x3C9(0x1)(None)
	uint8                                        Pad_1249[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TurningEnabledBlendTime;                           // 0x3CC(0x4)(None)
	float                                        TurningDisabledBlendTime;                          // 0x3D0(0x4)(None)
	float                                        TurningDirectionBlendTime;                         // 0x3D4(0x4)(None)
	float                                        MinTurnRateForTurnAnimation;                       // 0x3D8(0x4)(None)
	bool                                         bIsTurning;                                        // 0x3DC(0x1)(None)
	bool                                         bTurningRight;                                     // 0x3DD(0x1)(None)
	bool                                         bUseSwimming;                                      // 0x3DE(0x1)(None)
	uint8                                        Pad_124C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SwimmingMovingAnimSpeedThreshold;                  // 0x3E0(0x4)(None)
	bool                                         bIsSwimming;                                       // 0x3E4(0x1)(None)
	bool                                         bUseRunning;                                       // 0x3E5(0x1)(None)
	bool                                         bUseRunningMovementAnimRate;                       // 0x3E6(0x1)(None)
	uint8                                        Pad_124F[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RunningMovementAnimRate;                           // 0x3E8(0x4)(None)
	float                                        RunningBlendInTime;                                // 0x3EC(0x4)(None)
	float                                        RunningBlendOutTime;                               // 0x3F0(0x4)(None)
	bool                                         bIsRunning;                                        // 0x3F4(0x1)(None)
	bool                                         bUseSleepingAnim;                                  // 0x3F5(0x1)(None)
	uint8                                        Pad_1250[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SleepingAnimTranslationOffset;                     // 0x3F8(0x18)(None)
	bool                                         bIsSleeping;                                       // 0x410(0x1)(None)
	bool                                         bUseFalling;                                       // 0x411(0x1)(None)
	uint8                                        Pad_1251[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FallingAnimPlayRate;                               // 0x414(0x4)(None)
	float                                        FallingBlendInTime;                                // 0x418(0x4)(None)
	float                                        FallingBlendOutTime;                               // 0x41C(0x4)(None)
	bool                                         bIsFalling;                                        // 0x420(0x1)(None)
	uint8                                        Pad_1252[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimInstance_DinoRootBoneName* GetDefaultObj();

};

// 0x158 (0x4A0 - 0x348)
// Class ShooterGame.AnimInstance_DinoRootTransform
class UAnimInstance_DinoRootTransform : public UAnimInstance
{
public:
	bool                                         bAllowNativeAnimations;                            // 0x348(0x1)(None)
	bool                                         bDisableBlueprint;                                 // 0x349(0x1)(None)
	uint8                                        Pad_125C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RootRotationOffset;                                // 0x350(0x18)(None)
	struct FVector                               RootLocationOffset;                                // 0x368(0x18)(None)
	struct FTransform                            RootOffsetTransform;                               // 0x380(0x60)(None)
	bool                                         bSkipAnimGraph;                                    // 0x3E0(0x1)(None)
	uint8                                        Pad_125D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementAnimRate;                                  // 0x3E4(0x4)(None)
	float                                        MovementAnimRatePower;                             // 0x3E8(0x4)(None)
	float                                        MinimumMovementSpeed;                              // 0x3EC(0x4)(None)
	float                                        MovingBlendInTime;                                 // 0x3F0(0x4)(None)
	float                                        MovingBlendOutTime;                                // 0x3F4(0x4)(None)
	bool                                         bIsMoving;                                         // 0x3F8(0x1)(None)
	uint8                                        Pad_125E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumMovementSpeedFlying;                        // 0x3FC(0x4)(None)
	float                                        FlyingMoveBlendIn;                                 // 0x400(0x4)(None)
	float                                        FlyingMoveBlendOut;                                // 0x404(0x4)(None)
	bool                                         bIsFlying;                                         // 0x408(0x1)(None)
	bool                                         bUseFlyingOffset;                                  // 0x409(0x1)(None)
	uint8                                        Pad_125F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FlyingOffset;                                      // 0x410(0x18)(None)
	struct FVector                               CurrentFlyingOffset;                               // 0x428(0x18)(None)
	struct FVector                               LandedOffset;                                      // 0x440(0x18)(None)
	bool                                         bUseAimOffset;                                     // 0x458(0x1)(None)
	uint8                                        Pad_1260[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimPitch;                                          // 0x45C(0x4)(None)
	float                                        AimYaw;                                            // 0x460(0x4)(None)
	float                                        AimOffsetPitchScale;                               // 0x464(0x4)(None)
	float                                        AimOffsetYawScale;                                 // 0x468(0x4)(None)
	bool                                         bUseBlinking;                                      // 0x46C(0x1)(None)
	uint8                                        Pad_1261[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BlinkBlend;                                        // 0x470(0x4)(None)
	bool                                         bUseTurning;                                       // 0x474(0x1)(None)
	uint8                                        Pad_1262[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TurningEnabledBlendTime;                           // 0x478(0x4)(None)
	float                                        TurningDisabledBlendTime;                          // 0x47C(0x4)(None)
	float                                        TurningDirectionBlendTime;                         // 0x480(0x4)(None)
	float                                        MinTurnRateForTurnAnimation;                       // 0x484(0x4)(None)
	bool                                         bIsTurning;                                        // 0x488(0x1)(None)
	bool                                         bTurningRight;                                     // 0x489(0x1)(None)
	bool                                         bUseRunning;                                       // 0x48A(0x1)(None)
	bool                                         bIsRunning;                                        // 0x48B(0x1)(None)
	bool                                         bUseSleepingAnim;                                  // 0x48C(0x1)(None)
	bool                                         bIsSleeping;                                       // 0x48D(0x1)(None)
	bool                                         bUseFalling;                                       // 0x48E(0x1)(None)
	uint8                                        Pad_1264[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FallingAnimPlayRate;                               // 0x490(0x4)(None)
	float                                        FallingBlendInTime;                                // 0x494(0x4)(None)
	float                                        FallingBlendOutTime;                               // 0x498(0x4)(None)
	bool                                         bIsFalling;                                        // 0x49C(0x1)(None)
	bool                                         bUseMounted;                                       // 0x49D(0x1)(None)
	bool                                         bIsMounted;                                        // 0x49E(0x1)(None)
	uint8                                        Pad_1265[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimInstance_DinoRootTransform* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.AnimNotifyState_Custom
class UAnimNotifyState_Custom : public UAnimNotifyState
{
public:
	class FName                                  EventName;                                         // 0x30(0x8)(None)
	bool                                         bSendNotifyToWeapon;                               // 0x38(0x1)(None)
	bool                                         bSendNotifyToArmorSlot;                            // 0x39(0x1)(None)
	enum class EPrimalEquipmentType              ArmorSlotToSendNotify;                             // 0x3A(0x1)(None)
	uint8                                        Pad_126E[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotifyState_Custom* GetDefaultObj();

};

// 0x18 (0x58 - 0x40)
// Class ShooterGame.AnimNotify_CustomEvent
class UAnimNotify_CustomEvent : public UAnimNotify
{
public:
	class FName                                  EventName;                                         // 0x40(0x8)(None)
	bool                                         bSendNotifyToWeapon;                               // 0x48(0x1)(None)
	bool                                         bSendNotifyToArmorSlot;                            // 0x49(0x1)(None)
	enum class EPrimalEquipmentType              ArmorSlotToSendNotify;                             // 0x4A(0x1)(None)
	bool                                         bLockHeadPositionNormalized;                       // 0x4B(0x1)(None)
	float                                        TimeToLockHeadPosition;                            // 0x4C(0x4)(None)
	bool                                         bUnlockHeadPositionNormalized;                     // 0x50(0x1)(None)
	uint8                                        Pad_1275[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_CustomEvent* GetDefaultObj();

};

// 0x38 (0x78 - 0x40)
// Class ShooterGame.AnimNotify_PlayCameraShake
class UAnimNotify_PlayCameraShake : public UAnimNotify
{
public:
	float                                        PercentChanceToPlay;                               // 0x40(0x4)(None)
	uint8                                        Pad_127B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                TheCameraShake;                                    // 0x48(0x8)(None)
	float                                        InnerRadius;                                       // 0x50(0x4)(None)
	float                                        OuterRadius;                                       // 0x54(0x4)(None)
	float                                        Falloff;                                           // 0x58(0x4)(None)
	bool                                         bOrientShakeTowardsEpicenter;                      // 0x5C(0x1)(None)
	uint8                                        Pad_127C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShakeScale;                                        // 0x60(0x4)(None)
	uint8                                        Pad_127D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                AttachName;                                        // 0x68(0x10)(None)

	static class UClass* StaticClass();
	static class UAnimNotify_PlayCameraShake* GetDefaultObj();

};

// 0x10 (0x120 - 0x110)
// Class ShooterGame.AnimNotify_PlayParticleEffectCustom
class UAnimNotify_PlayParticleEffectCustom : public UAnimNotify_PlayParticleEffect
{
public:
	class FName                                  AttachedComponentTag;                              // 0x110(0x8)(None)
	uint8                                        Pad_1282[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_PlayParticleEffectCustom* GetDefaultObj();

};

// 0x10 (0x50 - 0x40)
// Class ShooterGame.AnimNotify_StopSound
class UAnimNotify_StopSound : public UAnimNotify
{
public:
	class USoundBase*                            SoundToStop;                                       // 0x40(0x8)(None)
	float                                        FadeOutTime;                                       // 0x48(0x4)(None)
	uint8                                        Pad_1284[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAnimNotify_StopSound* GetDefaultObj();

};

// 0x98 (0xC0 - 0x28)
// Class ShooterGame.AntiDupeTransactionLog
class UAntiDupeTransactionLog : public UObject
{
public:
	class UWorld*                                CurrentWorld;                                      // 0x28(0x8)(None)
	uint8                                        Pad_1288[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UAntiDupeTransactionLog* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class ShooterGame.ArkCloudInventoryData
class UArkCloudInventoryData : public UObject
{
public:
	struct FArkInventoryData                     MyArkData;                                         // 0x28(0x30)(None)

	static class UClass* StaticClass();
	static class UArkCloudInventoryData* GetDefaultObj();

};

// 0x18 (0x4D0 - 0x4B8)
// Class ShooterGame.BaseBoxTrigger
class ABaseBoxTrigger : public AActor
{
public:
	class USceneComponent*                       SceneComp;                                         // 0x4B8(0x8)(ZeroConstructor)
	class UBoxComponent*                         TriggerBox;                                        // 0x4C0(0x8)(ZeroConstructor)
	uint8                                        bUseBPOnTriggerBeginOverlap : 1;                   // Mask: 0x1, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        bUseBPOnTriggerEndOverlap : 1;                     // Mask: 0x2, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        Pad_135C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABaseBoxTrigger* GetDefaultObj();

	void OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void IsCharacterTouchingTrigger(class APrimalCharacter* Character, bool ReturnValue);
	void GetAllCharactersTouchingTrigger(const TArray<class APrimalCharacter*>& OutCharacters);
	void BPOnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BPOnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};

// 0x40 (0xB28 - 0xAE8)
// Class ShooterGame.BasePlayerController
class ABasePlayerController : public APrimalPlayerController
{
public:
	uint8                                        Pad_1365[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUI_CustomOverlay*                     CustomCursor;                                      // 0xB10(0x8)(ZeroConstructor)
	uint8                                        Pad_1366[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsGamepadActive;                                  // 0xB20(0x1)(None)
	uint8                                        Pad_1367[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ABasePlayerController* GetDefaultObj();

	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void ServerCheat(const class FString& Msg);
	void Say(const class FString& Msg);
	void ClientStartOnlineGame();
	void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void ClientSendRoundEndEvent(bool bIsWinner, int32 ExpendedTimeInSeconds);
	void ClientGameStarted();
	void ClientEndOnlineGame();
};

// 0x10 (0x330 - 0x320)
// Class ShooterGame.PrimalUserWidget
class UPrimalUserWidget : public UUserWidget
{
public:
	uint8                                        Pad_1382[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ViewportZOrder;                                    // 0x328(0x4)(None)
	float                                        DPIScaler;                                         // 0x32C(0x4)(None)

	static class UClass* StaticClass();
	static class UPrimalUserWidget* GetDefaultObj();

	void WidgetRemovedFromViewport();
	void WidgetAddedToViewport();
	void StopAnimationByString(const class FString& Name);
	void SetZOrderInViewport(int32 ZOrder);
	void PlayAnimationByString(const class FString& Name, bool ReturnValue);
	void OnWidgetGamepadActiveChangedBP(bool bIsGamepadActive);
	void HandleVirtualBack(bool ReturnValue);
	void HandleKeyUp(const struct FKey& TheKey, bool ReturnValue);
	void GetOverrideHighligteableWidgetBP(class UWidget* ReturnValue);
	void ExecuteCommandForPrimalUI(class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void BPExecutedCommandForPrimalUI(class FName CommandName, const struct FBPNetExecParams& ExecParams);
};

// 0x428 (0x758 - 0x330)
// Class ShooterGame.PrimalUI
class UPrimalUI : public UPrimalUserWidget
{
public:
	uint8                                        Pad_142C[0x4C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCaptureMouseInput;                                // 0x37C(0x1)(None)
	bool                                         bPreventGamepadDpadNavegation;                     // 0x37D(0x1)(None)
	bool                                         bForceVirtualCursorEnabled;                        // 0x37E(0x1)(None)
	bool                                         bIsClosing;                                        // 0x37F(0x1)(None)
	bool                                         bWantsPrimalItemNotifications;                     // 0x380(0x1)(None)
	uint8                                        Pad_142F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DefaultToolTipWidget;                              // 0x388(0x8)(ZeroConstructor)
	bool                                         bEscapeClosesMenu;                                 // 0x390(0x1)(None)
	bool                                         bEscapeOpensPauseMenu;                             // 0x391(0x1)(None)
	bool                                         bSpecialRightOpensPauseMenu;                       // 0x392(0x1)(None)
	bool                                         bMenuSupportSlomo;                                 // 0x393(0x1)(None)
	bool                                         bClickClosesMenu;                                  // 0x394(0x1)(None)
	bool                                         bIsGameplayUI;                                     // 0x395(0x1)(None)
	bool                                         bIsTopUI;                                          // 0x396(0x1)(None)
	enum class EHighlightStartingPoint           HighlightStartPointType;                           // 0x397(0x1)(None)
	class UClass*                                ConfirmationDialogUITemplate;                      // 0x398(0x8)(ZeroConstructor)
	class UClass*                                XBoxFooterUITemplate;                              // 0x3A0(0x8)(ZeroConstructor)
	bool                                         bShowCancelIcon;                                   // 0x3A8(0x1)(None)
	bool                                         bShowAcceptIcon;                                   // 0x3A9(0x1)(None)
	bool                                         bShowLStickIcon;                                   // 0x3AA(0x1)(None)
	bool                                         bShowRStickIcon;                                   // 0x3AB(0x1)(None)
	bool                                         bShowBumpersIcon;                                  // 0x3AC(0x1)(None)
	bool                                         bShowStartBtnIcon;                                 // 0x3AD(0x1)(None)
	bool                                         bShowLTBtnIcon;                                    // 0x3AE(0x1)(None)
	bool                                         bShowRTBtnIcon;                                    // 0x3AF(0x1)(None)
	bool                                         bShowFaceBtnLeftIcon;                              // 0x3B0(0x1)(None)
	bool                                         bShowFaceBtnTopIcon;                               // 0x3B1(0x1)(None)
	bool                                         bShowFaceBtnRightIcon;                             // 0x3B2(0x1)(None)
	bool                                         bShowFaceBtnBottomIcon;                            // 0x3B3(0x1)(None)
	bool                                         bShowLeftShoulderBtnIcon;                          // 0x3B4(0x1)(None)
	bool                                         bShowXBoxFooter;                                   // 0x3B5(0x1)(None)
	bool                                         bIgnoreUIScaling;                                  // 0x3B6(0x1)(None)
	bool                                         bCloseOnPlayerDie;                                 // 0x3B7(0x1)(None)
	float                                        SplitscreenDPIScaler;                              // 0x3B8(0x4)(None)
	bool                                         bForceFullscreenVirtualCursor;                     // 0x3BC(0x1)(None)
	bool                                         bConstrainVirtualCursor;                           // 0x3BD(0x1)(None)
	bool                                         bDoExtraDataListButtonPanelFilteringChecks;        // 0x3BE(0x1)(None)
	uint8                                        Pad_143E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DefaultHighlightWidgetOverrideName;                // 0x3C0(0x8)(None)
	bool                                         bShouldValidateInputOnRemove;                      // 0x3C8(0x1)(None)
	bool                                         ShouldStretchMainScreenWhenHandheld;               // 0x3C9(0x1)(None)
	bool                                         WasInHandheldMode;                                 // 0x3CA(0x1)(None)
	uint8                                        Pad_1442[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnchors                              OriginalUnStretchedAnchors;                        // 0x3D0(0x20)(None)
	struct FMargin                               OriginalUnstretchedSize;                           // 0x3F0(0x10)(None)
	struct FVector2D                             OriginalSizeBoxUnstretchedSize;                    // 0x400(0x10)(None)
	struct FAnchors                              StretchedHandheldAnchors;                          // 0x410(0x20)(None)
	struct FMargin                               StretchedHandheldSize;                             // 0x430(0x10)(None)
	struct FVector2D                             SizeBoxHandheldSize;                               // 0x440(0x10)(None)
	int32                                        VirtualCursorFrames;                               // 0x450(0x4)(None)
	uint8                                        Pad_1449[0x4C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnalogDeltaX;                                      // 0x4A0(0x4)(None)
	float                                        AnalogDeltaY;                                      // 0x4A4(0x4)(None)
	uint8                                        Pad_144D[0x1C0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            HTTPGetResponseEvent;                              // 0x668(0x10)(ZeroConstructor)
	TWeakObjectPtr<class APrimalStructureItemContainer> ItemContainer;                                     // 0x678(0x8)(ZeroConstructor)
	bool                                         bCachedIsGamepadActive;                            // 0x680(0x1)(None)
	uint8                                        Pad_144F[0xD3];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         OverrideButtonSounds;                              // 0x754(0x1)(None)
	uint8                                        Pad_1451[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalUI* GetDefaultObj();

	void UsingProController(bool DebugOut, bool ReturnValue);
	void ShowDLCConfirmationDialog(enum class EDLCSelector DLC, class UUI_GenericConfirmationDialog* ReturnValue);
	void ShowConfirmationDialogBP(const class FString& TitleText, const class FString& MessageText, bool IsJustOKBox);
	void SetInputMode();
	void SetHighlightedWidget(class UWidget* Widget, bool bSetLastHighlightedPosition);
	void ResetAllScrollBars();
	void RemovedFromViewport();
	void ProcessSplitscreen(bool ScaleX);
	void PlayHapticEffect(class APlayerController* PC, enum class EHapticEffectType Type, const struct FVector& Location, class UWorld* World);
	void OpenTheStoreDLCPage(const class FString& TheDLCName);
	void OnMouseButtonDownEvent(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, const struct FEventReply& ReturnValue);
	void OnKeyUpEvent(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyboardEvent, const struct FEventReply& ReturnValue);
	void OnKeyDownEvent(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyboardEvent, const struct FEventReply& ReturnValue);
	void OnGamepadButtonDownEvent(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent, const struct FEventReply& ReturnValue);
	void OnGamepadActiveChangedBP(bool bIsGamepadActive);
	void OnGamepadActiveChanged(bool bIsGamepadActive);
	void OnDLCConfirmationDialogClosed(bool bAccept);
	void OnCreateCredits(class UWidget* Widget);
	void OnConfirmationDialogClosedBP(bool bAccept);
	void OnConfirmationDialogClosed(bool bAccept);
	void MainMenuEscapePressed();
	void IsRightTriggerDown(bool ReturnValue);
	void IsLeftTriggerDown(bool ReturnValue);
	void HTTPGetString(const class FString& InURL);
	void HandleDockedModeChanges();
	void GetWidgetToScaleForHandheld(class UWidget* ReturnValue);
	void GetSizeboxForExtraHandheldScaling(class USizeBox* ReturnValue);
	void GetShooterHud(class AShooterHUD* ReturnValue);
	void GetPlayerState(class AShooterPlayerState* ReturnValue);
	void GetPC(class AShooterPlayerController* ReturnValue);
	void GetPawn(class APrimalCharacter* ReturnValue);
	void GetOpenComboBox(class UComboBoxString* ReturnValue);
	void FixHighlights();
	void DoExtraScalingForSplitscreen(const struct FVector2D& PlayerSize);
	void CloseWithAnimation();
	void ClickedSecondaryButton(class UWidget* ClickedWidget);
	void ClickedButton(class UWidget* ClickedWidget);
	void CheckGamepadActiveChanged(bool bIsGamepadActive);
	void ChangeChildrenTextColorBP(class UPanelWidget* Parent, const struct FSlateColor& NewColor, bool Recursive);
	void BPVirtualCursorinit();
	void BPReleasedVirtualAccept();
	void BPProcessSplitscreenAndAddToViewport(bool ScaleX);
	void BPHighlightWidgetOnStart(bool ReturnValue);
	void BPHandleDockedModeChange(bool bIsDocked);
	void BPGamepadReleased(const struct FKey& TheKey, bool ReturnValue);
	void BPEscapeClosed(bool ReturnValue);
	void BPCycleHighlighted(bool ReturnValue);
	void BPControlHighlighted(enum class EControlDirection Dir, const struct FKey& TheKey, float AnalogValue);
	void AddedToViewport();
};

// 0x0 (0x758 - 0x758)
// Class ShooterGame.BaseSelectableButtonWidget
class UBaseSelectableButtonWidget : public UPrimalUI
{
public:

	static class UClass* StaticClass();
	static class UBaseSelectableButtonWidget* GetDefaultObj();

	void BPSetSelected(bool bSelected);
	void BPIsSelected(bool ReturnValue);
	void BPGetButton(class UCustomButtonWidget* ReturnValue);
};

// 0x890 (0xE30 - 0x5A0)
// Class ShooterGame.ShooterGameState
class AShooterGameState : public AGameState
{
public:
	uint8                                        Pad_163E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumNPC;                                            // 0x5B0(0x4)(None)
	int32                                        NumHibernatedNPC;                                  // 0x5B4(0x4)(None)
	int32                                        NPCActiveCountTamed;                               // 0x5B8(0x4)(None)
	int32                                        NumActiveNPC;                                      // 0x5BC(0x4)(None)
	int32                                        NumDeadNPC;                                        // 0x5C0(0x4)(None)
	int32                                        NumPlayerActors;                                   // 0x5C4(0x4)(None)
	int32                                        NumPlayerConnected;                                // 0x5C8(0x4)(None)
	bool                                         bServerUseLocalizedChat;                           // 0x5CC(0x1)(None)
	uint8                                        Pad_163F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LocalizedChatRadius;                               // 0x5D0(0x4)(None)
	float                                        LocalizedChatRadiusUnconsiousScale;                // 0x5D4(0x4)(None)
	float                                        ServerFramerate;                                   // 0x5D8(0x4)(None)
	uint8                                        Pad_1640[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NewStructureDestructionTag;                        // 0x5E0(0x10)(None)
	int32                                        DayNumber;                                         // 0x5F0(0x4)(None)
	float                                        DayTime;                                           // 0x5F4(0x4)(None)
	double                                       NetworkTime;                                       // 0x5F8(0x8)(None)
	uint32                                       TimeUTC;                                           // 0x600(0x4)(None)
	int32                                        NetUTC;                                            // 0x604(0x4)(None)
	bool                                         bIsOfficialServer;                                 // 0x608(0x1)(None)
	bool                                         bIsListenServer;                                   // 0x609(0x1)(None)
	bool                                         bIsDediServer;                                     // 0x60A(0x1)(None)
	bool                                         bIsServerRunningOnConsole;                         // 0x60B(0x1)(None)
	bool                                         bIsArkTributeAvailable;                            // 0x60C(0x1)(None)
	bool                                         bIsArkDownloadsAllowed;                            // 0x60D(0x1)(None)
	bool                                         bAllowThirdPersonPlayer;                           // 0x60E(0x1)(None)
	bool                                         bServerHardcore;                                   // 0x60F(0x1)(None)
	bool                                         bServerPVE;                                        // 0x610(0x1)(None)
	bool                                         bAutoPvE;                                          // 0x611(0x1)(None)
	bool                                         bServerCrosshair;                                  // 0x612(0x1)(None)
	bool                                         bServerForceNoHUD;                                 // 0x613(0x1)(None)
	bool                                         bFlyerPlatformAllowUnalignedDinoBasing;            // 0x614(0x1)(None)
	bool                                         bMapPlayerLocation;                                // 0x615(0x1)(None)
	bool                                         bPvEDisableFriendlyFire;                           // 0x616(0x1)(None)
	bool                                         bPvEAllowTribeWar;                                 // 0x617(0x1)(None)
	bool                                         bPvEAllowTribeWarCancel;                           // 0x618(0x1)(None)
	bool                                         bEnablePvPGamma;                                   // 0x619(0x1)(None)
	bool                                         bPreventDroppedItemPhysics;                        // 0x61A(0x1)(None)
	bool                                         bDisablePvEGamma;                                  // 0x61B(0x1)(None)
	int32                                        NumTamedDinos;                                     // 0x61C(0x4)(None)
	int32                                        MaxStructuresInRange;                              // 0x620(0x4)(None)
	float                                        DayCycleSpeedScale;                                // 0x624(0x4)(None)
	float                                        DayTimeSpeedScale;                                 // 0x628(0x4)(None)
	float                                        NightTimeSpeedScale;                               // 0x62C(0x4)(None)
	int32                                        StartTimeHour;                                     // 0x630(0x4)(None)
	float                                        PvEStructureDecayPeriodMultiplier;                 // 0x634(0x4)(None)
	float                                        PvEDinoDecayPeriodMultiplier;                      // 0x638(0x4)(None)
	float                                        PerPlatformMaxStructuresMultiplier;                // 0x63C(0x4)(None)
	float                                        ImplantSuicideCD;                                  // 0x640(0x4)(None)
	bool                                         bDisableStructureDecayPvE;                         // 0x644(0x1)(None)
	bool                                         bDisableDinoDecayPvE;                              // 0x645(0x1)(None)
	bool                                         bAllowCaveBuildingPvE;                             // 0x646(0x1)(None)
	bool                                         bAllowCaveBuildingPvP;                             // 0x647(0x1)(None)
	bool                                         bPreventDownloadSurvivors;                         // 0x648(0x1)(None)
	bool                                         bReachedPlatformStructureLimit;                    // 0x649(0x1)(None)
	bool                                         bAdminLogging;                                     // 0x64A(0x1)(None)
	bool                                         bPvPStructureDecay;                                // 0x64B(0x1)(None)
	bool                                         bPreventDownloadDinos;                             // 0x64C(0x1)(None)
	bool                                         bPreventDownloadItems;                             // 0x64D(0x1)(None)
	bool                                         bPreventUploadDinos;                               // 0x64E(0x1)(None)
	bool                                         bPreventUploadItems;                               // 0x64F(0x1)(None)
	bool                                         bPreventUploadSurvivors;                           // 0x650(0x1)(None)
	bool                                         bPreventMateBoost;                                 // 0x651(0x1)(None)
	bool                                         bPreventStructurePainting;                         // 0x652(0x1)(None)
	bool                                         bAllowCharacterCreation;                           // 0x653(0x1)(None)
	bool                                         bAllowSpawnPointSelection;                         // 0x654(0x1)(None)
	uint8                                        Pad_1642[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxTamedDinos;                                     // 0x658(0x4)(None)
	bool                                         bDisableSpawnAnimations;                           // 0x65C(0x1)(None)
	uint8                                        Pad_1643[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerListString;                                  // 0x660(0x10)(None)
	FMulticastInlineDelegateProperty_            OnPlayerListPopulated;                             // 0x670(0x10)(ZeroConstructor)
	float                                        GlobalSpoilingTimeMultiplier;                      // 0x680(0x4)(None)
	float                                        GlobalItemDecompositionTimeMultiplier;             // 0x684(0x4)(None)
	int32                                        MaxNumberOfPlayersInTribe;                         // 0x688(0x4)(None)
	float                                        TribeSlotReuseCooldown;                            // 0x68C(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeMultiplier;           // 0x690(0x4)(None)
	float                                        EggHatchSpeedMultiplier;                           // 0x694(0x4)(None)
	class FName                                  ActiveEvent;                                       // 0x698(0x8)(None)
	bool                                         bAllowPaintingWithoutResources;                    // 0x6A0(0x1)(None)
	bool                                         bEnableExtraStructurePreventionVolumes;            // 0x6A1(0x1)(None)
	uint8                                        Pad_1645[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemCraftingCostOverride>     OverrideItemCraftingCosts;                         // 0x6A8(0x10)(ZeroConstructor)
	TArray<struct FItemMaxItemQuantityOverride>  OverrideItemMaxQuantity;                           // 0x6B8(0x10)(ZeroConstructor)
	bool                                         DisableRailgunPVP;                                 // 0x6C8(0x1)(None)
	uint8                                        Pad_1646[0xA7];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       PrivateNetworkTime;                                // 0x770(0x8)(None)
	double                                       LastServerSaveTime;                                // 0x778(0x8)(None)
	float                                        ServerSaveInterval;                                // 0x780(0x4)(None)
	float                                        TribeNameChangeCooldown;                           // 0x784(0x4)(None)
	float                                        PlatformSaddleBuildAreaBoundsMultiplier;           // 0x788(0x4)(None)
	bool                                         bAlwaysAllowStructurePickup;                       // 0x78C(0x1)(None)
	uint8                                        Pad_1647[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StructurePickupTimeAfterPlacement;                 // 0x790(0x4)(None)
	float                                        StructurePickupHoldDuration;                       // 0x794(0x4)(None)
	bool                                         bAllowHideDamageSourceFromLogs;                    // 0x798(0x1)(None)
	uint8                                        Pad_1648[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClassMultiplier>              DinoClassSpeedMultipliers;                         // 0x7A0(0x10)(None)
	TArray<struct FClassMultiplier>              TamedDinoClassSpeedMultipliers;                    // 0x7B0(0x10)(None)
	bool                                         bRiderDinoCollision;                               // 0x7C0(0x1)(None)
	uint8                                        Pad_1649[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioComponent*                       DynamicMusicAudioComponent;                        // 0x7E0(0x8)(ZeroConstructor)
	class UAudioComponent*                       DynamicMusicAudioComponent2;                       // 0x7E8(0x8)(ZeroConstructor)
	uint8                                        Pad_164A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLevelExperienceRamp>          LevelExperienceRampOverrides;                      // 0x800(0x10)(None)
	TArray<struct FEngramEntryOverride>          OverrideEngramEntries;                             // 0x810(0x10)(None)
	class UClass*                                CustomGameUITemplate;                              // 0x820(0x8)(ZeroConstructor)
	TArray<class FString>                        PreventDinoTameClassNames;                         // 0x828(0x10)(None)
	float                                        ListenServerTetherDistanceMultiplier;              // 0x838(0x4)(None)
	uint8                                        Pad_164B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PGMapName;                                         // 0x840(0x10)(None)
	TArray<int32>                                SupportedSpawnRegions;                             // 0x850(0x10)(None)
	class UPaintingCache*                        PaintingCache;                                     // 0x860(0x8)(ZeroConstructor)
	class USoundBase*                            StaticOverrideMusic;                               // 0x868(0x8)(ZeroConstructor)
	bool                                         bEnableDeathTeamSpectator;                         // 0x870(0x1)(None)
	uint8                                        Pad_164D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PlayerFloatingHUDOffset;                           // 0x878(0x18)(None)
	float                                        PlayerFloatingHUDOffsetScreenY;                    // 0x890(0x4)(None)
	float                                        StructureDamageRepairCooldown;                     // 0x894(0x4)(None)
	bool                                         bForceAllStructureLocking;                         // 0x898(0x1)(None)
	bool                                         bAllowCustomRecipes;                               // 0x899(0x1)(None)
	bool                                         bAllowRaidDinoFeeding;                             // 0x89A(0x1)(None)
	uint8                                        Pad_164E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomRecipeEffectivenessMultiplier;               // 0x89C(0x4)(None)
	float                                        CustomRecipeSkillMultiplier;                       // 0x8A0(0x4)(None)
	uint8                                        Pad_164F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            OverrideAreaMusic;                                 // 0x8A8(0x8)(ZeroConstructor)
	struct FVector                               OverrideAreaMusicPosition;                         // 0x8B0(0x18)(None)
	float                                        OverrideAreaMusicRange;                            // 0x8C8(0x4)(None)
	bool                                         bAllowUnclaimDinos;                                // 0x8CC(0x1)(None)
	uint8                                        Pad_1650[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FloatingHUDRange;                                  // 0x8D0(0x4)(None)
	float                                        FloatingChatRange;                                 // 0x8D4(0x4)(None)
	int32                                        ExtinctionEventTimeInterval;                       // 0x8D8(0x4)(None)
	float                                        RTSModeNumSelectableDinosScale;                    // 0x8DC(0x4)(None)
	float                                        RTSMaxRangeFromPlayerCharacterScale;               // 0x8E0(0x4)(None)
	float                                        ExtinctionEventPercent;                            // 0x8E4(0x4)(None)
	int32                                        ExtinctionEventSecondsRemaining;                   // 0x8E8(0x4)(None)
	bool                                         bDoExtinctionEvent;                                // 0x8EC(0x1)(None)
	uint8                                        Pad_1651[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DestroyTamesOverLevelClamp;                        // 0x8F0(0x4)(None)
	uint8                                        Pad_1652[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppends;                         // 0x8F8(0x10)(ZeroConstructor)
	bool                                         bPreventOfflinePvP;                                // 0x908(0x1)(None)
	bool                                         bPvPDinoDecay;                                     // 0x909(0x1)(None)
	bool                                         bAllowUnclaimDinosConfig;                          // 0x90A(0x1)(None)
	bool                                         bForceUseInventoryAppends;                         // 0x90B(0x1)(None)
	bool                                         bOverideStructurePlatformPrevention;               // 0x90C(0x1)(None)
	uint8                                        Pad_1653[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ItemStackSizeMultiplier;                           // 0x910(0x4)(None)
	uint8                                        Pad_1654[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                PreventOfflinePvPLiveTeams;                        // 0x918(0x10)(None)
	TArray<int32>                                PreventOfflinePvPExpiringTeams;                    // 0x928(0x10)(None)
	TArray<float>                                PreventOfflinePvPExpiringTimes;                    // 0x938(0x10)(None)
	uint8                                        Pad_1655[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAllowAnyoneBabyImprintCuddle;                     // 0x9E8(0x1)(None)
	bool                                         bDisableImprintDinoBuff;                           // 0x9E9(0x1)(None)
	uint8                                        Pad_1656[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPersonalTamedDinos;                             // 0x9EC(0x4)(None)
	uint8                                        Pad_1657[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ClusterId;                                         // 0xA08(0x10)(None)
	uint8                                        Pad_1658[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ServerSessionName;                                 // 0xA48(0x10)(None)
	bool                                         bPreventTribeAlliances;                            // 0xA58(0x1)(None)
	uint8                                        Pad_1659[0x19];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bServerUseDinoList;                                // 0xA72(0x1)(None)
	bool                                         bPvEAllowStructuresAtSupplyDrops;                  // 0xA73(0x1)(None)
	bool                                         bAllowForceNetUpdate;                              // 0xA74(0x1)(None)
	uint8                                        Pad_165A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumDinoReuploadInterval;                       // 0xA78(0x4)(None)
	float                                        HairGrowthSpeedMultiplier;                         // 0xA7C(0x4)(None)
	float                                        DinoHairGrowthSpeedMultiplier;                     // 0xA80(0x4)(None)
	float                                        FastDecayInterval;                                 // 0xA84(0x4)(None)
	class FString                                CachedSessionOwnerId;                              // 0xA88(0x10)(None)
	float                                        OxygenSwimSpeedStatMultiplier;                     // 0xA98(0x4)(None)
	uint8                                        Pad_165B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnHTTPGetResponse;                                 // 0xAA0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnHTTPPostResponse;                                // 0xAB0(0x10)(ZeroConstructor)
	bool                                         bAllowMultipleAttachedC4;                          // 0xAC0(0x1)(None)
	bool                                         bCrossARKAllowForeignDinoDownloads;                // 0xAC1(0x1)(None)
	uint8                                        Pad_165C[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseCorpseLocator;                                 // 0xAD8(0x1)(None)
	bool                                         bEnablePlayerMoveThroughSleeping;                  // 0xAD9(0x1)(None)
	bool                                         bEnablePlayerMoveThroughAlly;                      // 0xADA(0x1)(None)
	bool                                         bDisableStructurePlacementCollision;               // 0xADB(0x1)(None)
	bool                                         bUseSingleplayerSettings;                          // 0xADC(0x1)(None)
	bool                                         bAllowPlatformSaddleMultiFloors;                   // 0xADD(0x1)(None)
	bool                                         bPreventSpawnAnimations;                           // 0xADE(0x1)(None)
	uint8                                        Pad_165D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxAlliancesPerTribe;                              // 0xAE0(0x4)(None)
	int32                                        MaxTribesPerAlliance;                              // 0xAE4(0x4)(None)
	bool                                         bIsLegacyServer;                                   // 0xAE8(0x1)(None)
	bool                                         bDisableDinoDecayClaiming;                         // 0xAE9(0x1)(None)
	uint8                                        Pad_165E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  UseStructurePreventionVolumeTag;                   // 0xAEC(0x8)(None)
	int32                                        MaxStructuresInSmallRadius;                        // 0xAF4(0x4)(None)
	float                                        RadiusStructuresInSmallRadius;                     // 0xAF8(0x4)(None)
	bool                                         bUseTameLimitForStructuresOnly;                    // 0xAFC(0x1)(None)
	bool                                         bDisableWirelessCrafting;                          // 0xAFD(0x1)(None)
	bool                                         bDisableWirelessCraftingForDinos;                  // 0xAFE(0x1)(None)
	bool                                         bDisableWirelessCraftingForPlayers;                // 0xAFF(0x1)(None)
	bool                                         bDisableWirelessCraftingForStructures;             // 0xB00(0x1)(None)
	uint8                                        Pad_165F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WirelessCraftingRangeOverride;                     // 0xB04(0x4)(None)
	uint8                                        Pad_1660[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLimitTurretsInRange;                              // 0xB14(0x1)(None)
	uint8                                        Pad_1661[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LimitTurretsRange;                                 // 0xB18(0x4)(None)
	int32                                        LimitTurretsNum;                                   // 0xB1C(0x4)(None)
	int32                                        LimitGeneratorsNum;                                // 0xB20(0x4)(None)
	float                                        LimitGeneratorsRange;                              // 0xB24(0x4)(None)
	int32                                        CropPlotStackLimit;                                // 0xB28(0x4)(None)
	bool                                         bDisablePhotoMode;                                 // 0xB2C(0x1)(None)
	uint8                                        Pad_1662[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PhotoModeRangeLimit;                               // 0xB30(0x4)(None)
	bool                                         bForceAllowAllStructures;                          // 0xB34(0x1)(None)
	bool                                         bShowCreativeMode;                                 // 0xB35(0x1)(None)
	uint8                                        Pad_1663[0x22];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PassiveTameIntervalMultiplier;                     // 0xB58(0x4)(None)
	uint8                                        Pad_1664[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        UniqueDinos;                                       // 0xB60(0x10)(ZeroConstructor)
	TArray<class FName>                          ActiveMissionTags;                                 // 0xB70(0x10)(None)
	uint32                                       MinimumUniqueDownloadInterval;                     // 0xB80(0x4)(None)
	uint32                                       MaximumUniqueDownloadInterval;                     // 0xB84(0x4)(None)
	bool                                         bIgnoreStructuresPreventionVolumes;                // 0xB88(0x1)(None)
	bool                                         bPreventOutOfTribePinCodeUse;                      // 0xB89(0x1)(None)
	uint8                                        Pad_1667[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoDownloadData>             UniqueDownloads;                                   // 0xB90(0x10)(ZeroConstructor)
	TArray<struct FDataSet>                      GameDataSets;                                      // 0xBA0(0x10)(ZeroConstructor)
	class UPrimalWorldSettingsEventOverrides*    ActiveEventOverrides;                              // 0xBB0(0x8)(ZeroConstructor)
	bool                                         bIgnoreLimitMaxStructuresInRangeTypeFlag;          // 0xBB8(0x1)(None)
	uint8                                        Pad_1668[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMassTeleportData>             MassTeleportQueue;                                 // 0xBC0(0x10)(ZeroConstructor)
	uint8                                        Pad_1669[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, class UDataLayerInstance*> DataLayerMap;                                      // 0xC40(0x50)(ZeroConstructor)
	bool                                         bAllowLowGravitySpin;                              // 0xC90(0x1)(None)
	uint8                                        Pad_166A[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnDinoDownloaded;                                  // 0xCA8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnDinoUploaded;                                    // 0xCB8(0x10)(ZeroConstructor)
	TArray<struct FWorldBuffPersistantData>      WorldBuffPersistantDatas;                          // 0xCC8(0x10)(None)
	float                                        TurretCopySettingsCooldown;                        // 0xCD8(0x4)(None)
	float                                        BaseHexagonRewardMultiplier;                       // 0xCDC(0x4)(None)
	float                                        HexagonRewardMultiplier;                           // 0xCE0(0x4)(None)
	float                                        HexagonCostMultiplier;                             // 0xCE4(0x4)(None)
	bool                                         bDisableHexagonStore;                              // 0xCE8(0x1)(None)
	bool                                         bHexStoreAllowOnlyEngramTradeOption;               // 0xCE9(0x1)(None)
	bool                                         bAllowSpeedLeveling;                               // 0xCEA(0x1)(None)
	bool                                         bAllowFlyerSpeedLeveling;                          // 0xCEB(0x1)(None)
	uint8                                        Pad_166B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PreventBreedingForClassNames;                      // 0xCF0(0x10)(None)
	int32                                        LiveTuningReplicatedChunkSize;                     // 0xD00(0x4)(None)
	uint8                                        Pad_166C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        LiveTuningOverloadChunks;                          // 0xD08(0x10)(None)
	uint8                                        Pad_166D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        PreventTransferForClassNames;                      // 0xD20(0x10)(None)
	int32                                        EnvironmentIndex;                                  // 0xD30(0x4)(None)
	int32                                        NextEnvironmentIndex;                              // 0xD34(0x4)(None)
	struct FColor                                FloatingPlatformProfileNameColor;                  // 0xD38(0x4)(None)
	struct FColor                                FloatingNameColor;                                 // 0xD3C(0x4)(None)
	double                                       NextMutagenTime;                                   // 0xD40(0x8)(None)
	int32                                        OverrideMaxExperiencePointsPlayer;                 // 0xD48(0x4)(None)
	int32                                        OverrideMaxExperiencePointsDino;                   // 0xD4C(0x4)(None)
	TArray<int32>                                DeferredExplorerNoteUnlockQueue;                   // 0xD50(0x10)(None)
	bool                                         bDisableCustomFoldersInTributeInventories;         // 0xD60(0x1)(None)
	uint8                                        Pad_166E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class AActor>>         ForcedRelevantPOIActors;                           // 0xD68(0x10)(ZeroConstructor)
	bool                                         bDisableRailgunPVP;                                // 0xD78(0x1)(None)
	uint8                                        Pad_166F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumTimebetweeninventoryRetrieval;              // 0xD7C(0x4)(None)
	float                                        WildFollowerSpawnChanceMultiplier;                 // 0xD80(0x4)(None)
	float                                        WildFollowerSpawnCountMultiplier;                  // 0xD84(0x4)(None)
	bool                                         bDisableDinoItemBlacklist;                         // 0xD88(0x1)(None)
	uint8                                        Pad_1670[0x57];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       RealtimeThrottledTickTimeAmount;                   // 0xDE0(0x8)(None)
	uint8                                        Pad_1671[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetChangeDefaultPropertyValue> CurrentDefaultPropertyValueUpdates;                // 0xDF0(0x10)(ZeroConstructor)
	uint8                                        Pad_1672[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterGameState* GetDefaultObj();

	void StartMassTeleport(const struct FMassTeleportData& MassTeleportData, const struct FTeleportDestination& TeleportDestination, class AActor* InitiatingActor, const TArray<class AActor*>& TeleportActors, class UClass* BuffToApply, float TeleportDuration, float TeleportRadius, bool bTeleportingSnapsToGround, bool bMaintainRotation, bool ReturnValue);
	void ShouldMassTeleportMoveActor(class AActor* ForActor, const struct FMassTeleportData& WithMassTeleportData, bool ReturnValue);
	void SetNextEnvironmentIndex(int32 NewNextEnvironmentIndex);
	void SetEnvironmentIndex(int32 NewEnvironmentIndex);
	void RemoveRelevantPOIActor(class AActor* POI);
	void QueueExplorerNoteForDeferredUnlock(int32 ExplorerNoteIndex);
	void PrintCDODebugForChar(class APrimalCharacter* ReferenceChar);
	void PrintCDODebug(class APrimalCharacter* ReferenceChar, const struct FCDODebugData& CDODebugData);
	void PrepareActorForMassTeleport(class AActor* PrepareActor, const struct FMassTeleportData& WithMassTeleportData);
	void OnRep_SupportedSpawnRegions();
	void OnRep_ReplicateLocalizedChatRadius();
	void OnRep_ReplicateLiveTuningOverloadChunks();
	void OnRep_CurrentDefaultPropertyValueUpdates();
	void OnNewClassInitialized(class UClass* ForClass);
	void OnHUDNotification(const struct FHUDNotification& Notification, bool ReturnValue);
	void NetUpdateOfflinePvPLiveTeams(const TArray<int32>& NewPreventOfflinePvPLiveTeams);
	void NetUpdateOfflinePvPExpiringTeams(const TArray<int32>& NewPreventOfflinePvPExpiringTeams, const TArray<float>& NewPreventOfflinePvPExpiringTimes);
	void NetSpawnFoliageVFXActorAtLocationAndDoFoliageInteraction(class UClass* AnActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, class AActor* EffectOwnerToIgnore, float MaxRangeToReplicate, class USceneComponent* AttachToComponent, int32 DataIndex, class FName AttachSocketName, bool bOnlySendToEffectOwner, bool IsSimpleFoliageInteraction, const struct FVector& FoliageOrigin_ImpactPoint, const struct FVector& TraceEndpoint);
	void NetAddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime, int32 OnlySendToTeamID);
	void NetAddFloatingDamageText(const struct FVector& AtLocation, int32 DamageAmount, int32 FromTeamID, int32 OnlySendToTeamID);
	void Multi_SpawnCosmeticActor(class UClass* SpawnActorOfClass, const struct FVector& SpawnAtLocation, const struct FRotator& SpawnWithRotation);
	void LoadedWorld();
	void IsValidMassTeleportData(const struct FMassTeleportData& CheckData, bool ReturnValue);
	void IsUniqueDinoAlreadySpawned(TSoftClassPtr<class APrimalDinoCharacter> UniqueDino, bool ReturnValue);
	void IsTeamIDInvincible(int32 TargetingTeamID, bool bInvincibleOnlyWhenOffline, bool ReturnValue);
	void IsMassTeleportInProgress(class AActor* InitiatingActor, bool ReturnValue);
	void IsEngramClassHidden(class UClass* ForItemClass, bool ReturnValue);
	void HTTPPostRequest(const class FString& InURL, const class FString& Content);
	void HTTPGetRequest(const class FString& InURL);
	void HandleInitializedGameState();
	void GetStartTimeHour(int32 ReturnValue);
	void GetOfflineDamagePreventionTime(int32 TargetingTeamID, float ReturnValue);
	void GetNetworkTimeDelta(class AShooterGameState* GameState, double NetTime, bool bTimeUntil, double ReturnValue);
	void GetItemMaxQuantityOverride(class UClass* ForClass, const struct FMaxItemQuantityOverride& OutMaxQuantity, bool ReturnValue);
	void GetIniArray(const class FString& SectionName, const TArray<struct FGameIniData>& ReturnValue);
	void GetGamePhase(enum class EGamePhase ReturnValue);
	void GetDayTimeString(const class FString& ReturnValue);
	void GetDayCycleSpeed(float ReturnValue);
	void GetCleanServerSessionName(const class FString& ReturnValue);
	void ForceStartMatch(bool PreventFinishTheMatch, bool UseQuetzalBus);
	void DisplayWelcomeUI();
	void CDOGetPrintStringForObjectProperty(class UObject* TheObject, class FName PropertyName, const class FString& OutString, bool ReturnValue);
	void CDOGetPrintStringForObjectProperties(class UObject* TheObject, const TArray<class FName>& PropertyNames, const class FString& OutString, bool ReturnValue);
	void CancelMassTeleport(class AActor* WithInitiatingActor, bool ReturnValue);
	void BPPreGameplaySetup();
	void BPNetSpawnActorAtLocation(class UClass* AnActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* EffectOwnerToIgnore, float MaxRangeToReplicate, class USceneComponent* AttachToComponent, int32 DataIndex, class FName AttachSocketName, bool bOnlySendToEffectOwner);
	void BPDrawGameStateHUD(class AShooterHUD* HUD);
	void BaseSpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints, class APrimalBuff* ReturnValue);
	void BaseProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* ThePC, const struct FVector2D& ReturnValue);
	void BaseIsTribeID(int32 TeamID, bool ReturnValue);
	void BaseGetCustomActors(class FName SearchCustomTag, class ACustomActorList* ReturnValue);
	void BaseGetAllShooterControllers(const TArray<class AShooterPlayerController*>& ReturnValue);
	void BaseGetAllShooterCharactersOfTeam(int32 KillerTeam, const TArray<class AShooterCharacter*>& ReturnValue);
	void BaseGetAllShooterCharacters(const TArray<class AShooterCharacter*>& ReturnValue);
	void BaseGetAllDinoCharactersOfTeam(int32 KillerTeam, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void BaseDrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
	void AllowDownloadDino(TSoftClassPtr<class APrimalDinoCharacter> TheDinoClass, bool ReturnValue);
	void AllowDinoTame(class APrimalDinoCharacter* DinoChar, class AShooterPlayerController* ForPC, bool ReturnValue);
	void AllowDinoClassTame(class UClass* DinoCharClass, class AShooterPlayerController* ForPC, bool ReturnValue);
	void AddTokens(int32 Quantity, int32 byTribe);
	void AddRelevantPOIActor(class AActor* POI);
	void AddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
};

// 0x0 (0xE30 - 0xE30)
// Class ShooterGame.BattleGameState
class ABattleGameState : public AShooterGameState
{
public:

	static class UClass* StaticClass();
	static class ABattleGameState* GetDefaultObj();

};

// 0xE0 (0x760 - 0x680)
// Class ShooterGame.BeamWeaponComponent
class UBeamWeaponComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                       ParticleSystemTemplate;                            // 0x680(0x8)(ZeroConstructor)
	class UParticleSystem*                       ChargeupParticleSystemTemplate;                    // 0x688(0x8)(ZeroConstructor)
	class UParticleSystem*                       BurstWhenFiredSystemTemplate;                      // 0x690(0x8)(ZeroConstructor)
	class UParticleSystem*                       ImpactSystemTemplate;                              // 0x698(0x8)(ZeroConstructor)
	float                                        Duration;                                          // 0x6A0(0x4)(None)
	float                                        DamageRadius;                                      // 0x6A4(0x4)(None)
	class UClass*                                DamageType;                                        // 0x6A8(0x8)(ZeroConstructor)
	float                                        DamageDelay;                                       // 0x6B0(0x4)(None)
	float                                        BaseDamage;                                        // 0x6B4(0x4)(None)
	float                                        Length;                                            // 0x6B8(0x4)(None)
	bool                                         IsPenetrating;                                     // 0x6BC(0x1)(None)
	uint8                                        Pad_1689[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TargetTrackingSpeed;                               // 0x6C0(0x4)(None)
	bool                                         UseOwnerForward;                                   // 0x6C4(0x1)(None)
	uint8                                        Pad_168A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Offset;                                            // 0x6C8(0x4)(None)
	float                                        ChargeupTime;                                      // 0x6CC(0x4)(None)
	bool                                         WhenChargingWaitForCallToFire;                     // 0x6D0(0x1)(None)
	bool                                         DeactivateChargeupOnFiring;                        // 0x6D1(0x1)(None)
	uint8                                        Pad_168C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            BeamStoppedFiringEvent;                            // 0x6D8(0x10)(ZeroConstructor)
	TWeakObjectPtr<class AActor>                 BeamTarget;                                        // 0x6E8(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              ParticleComp;                                      // 0x6F0(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              ChargeUpComp;                                      // 0x6F8(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              ImpactComp;                                        // 0x700(0x8)(ZeroConstructor)
	uint8                                        Pad_168F[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBeamWeaponComponent* GetDefaultObj();

	void UpdateBeamVisuals();
	void StopFiring();
	void StartFiring();
	void StartCharging();
	void SetTarget(class AActor* Target);
	void GetTarget(class AActor* ReturnValue);
	void GetParticleSystem(class UParticleSystemComponent* ReturnValue);
	void GetLastStoppedFiringTime(double ReturnValue);
	void GetIsFiring(bool ReturnValue);
	void GetIsCharging(bool ReturnValue);
	void GetImpactParticleSystem(class UParticleSystemComponent* ReturnValue);
	void GetChargeupParticleSystem(class UParticleSystemComponent* ReturnValue);
	void GetBeamEndLocation(const struct FVector& ReturnValue);
};

// 0x30 (0xE8 - 0xB8)
// Class ShooterGame.BeamWeaponController
class UBeamWeaponController : public UActorComponent
{
public:
	TArray<struct FComponentReference>           BeamWeapons;                                       // 0xB8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            BeamStoppedFiringEvent;                            // 0xC8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            BeamsStoppedFiringEvent;                           // 0xD8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UBeamWeaponController* GetDefaultObj();

	void StopFiringBeams();
	void StartChargingBeams(bool ReturnValue);
	void StartChargingBeam(bool ReturnValue);
	void OnBeamStoppedFiringHandler(class UBeamWeaponComponent* BeamWeaponComp);
	void GetBeamWeaponComponents(const TArray<class UBeamWeaponComponent*>& ReturnValue);
	void FireBeams(bool ReturnValue);
	void FireBeam(bool ReturnValue);
};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.BinocularsWidgetUI
class UBinocularsWidgetUI : public UPrimalUI
{
public:
	class FName                                  GamepadUnlockButtonName;                           // 0x758(0x8)(None)
	uint8                                        Pad_16C6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBinocularsWidgetUI* GetDefaultObj();

	void GetDinoParentClass(class APrimalCharacter* Char, class UClass* ReturnValue);
	void GetCharUsesStat(class APrimalCharacter* Char, enum class EPrimalCharacterStatusValue ValueType, bool ReturnValue);
	void GetCharTorpidMaxStatus(class APrimalCharacter* Char, float ReturnValue);
	void GetCharTorpidCurrentStatus(class APrimalCharacter* Char, float ReturnValue);
	void GetCharNumStatPointsString(class APrimalCharacter* Char, enum class EPrimalCharacterStatusValue ValueType, const class FString& ReturnValue);
	void GetCharHealthMaxStatus(class APrimalCharacter* Char, float ReturnValue);
	void GetCharHealthCurrentStatus(class APrimalCharacter* Char, float ReturnValue);
};

// 0x90 (0x548 - 0x4B8)
// Class ShooterGame.BiomeZoneSettings
class ABiomeZoneSettings : public AActor
{
public:
	class FString                                BiomeZoneName;                                     // 0x4B8(0x10)(None)
	float                                        FinalTemperatureMultiplier;                        // 0x4C8(0x4)(None)
	float                                        FinalTemperatureExponent;                          // 0x4CC(0x4)(None)
	float                                        FinalTemperatureAddition;                          // 0x4D0(0x4)(None)
	float                                        PreOffsetTemperatureMultiplier;                    // 0x4D4(0x4)(None)
	float                                        PreOffsetTemperatureExponent;                      // 0x4D8(0x4)(None)
	float                                        PreOffsetTemperatureAddition;                      // 0x4DC(0x4)(None)
	float                                        AboveTemperatureOffsetThreshold;                   // 0x4E0(0x4)(None)
	float                                        AboveTemperatureOffsetMultiplier;                  // 0x4E4(0x4)(None)
	float                                        AboveTemperatureOffsetExponent;                    // 0x4E8(0x4)(None)
	float                                        BelowTemperatureOffsetThreshold;                   // 0x4EC(0x4)(None)
	float                                        BelowTemperatureOffsetMultiplier;                  // 0x4F0(0x4)(None)
	float                                        BelowTemperatureOffsetExponent;                    // 0x4F4(0x4)(None)
	float                                        AbsoluteTemperatureOverride;                       // 0x4F8(0x4)(None)
	uint8                                        bPreventCrops : 1;                                 // Mask: 0x1, PropSize: 0x10x4FC(0x1)(None)
	uint8                                        BitPad_117 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_16CB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EggRangeMaximumNumberOverride;                     // 0x500(0x4)(None)
	int32                                        EggMaximumNumberOverride;                          // 0x504(0x4)(None)
	float                                        EggChanceToSpawnOverride;                          // 0x508(0x4)(None)
	float                                        EggIntervalUnstasisChanceToSpawnOverride;          // 0x50C(0x4)(None)
	TArray<class UClass*>                        OverrideEggLimitsDinoClasses;                      // 0x510(0x10)(ZeroConstructor)
	int32                                        BiomeZonePriority;                                 // 0x520(0x4)(None)
	float                                        MaxMultiplier;                                     // 0x524(0x4)(None)
	class USoundBase*                            OverrideCombatMusicDay;                            // 0x528(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight;                          // 0x530(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicDay_Heavy;                      // 0x538(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight_Heavy;                    // 0x540(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ABiomeZoneSettings* GetDefaultObj();

};

// 0x1B8 (0x6C0 - 0x508)
// Class ShooterGame.BiomeZoneVolume
class ABiomeZoneVolume : public AVolume
{
public:
	class FString                                BiomeZoneName;                                     // 0x508(0x10)(None)
	enum class EBiomeZone                        BiomeZone;                                         // 0x518(0x1)(None)
	uint8                                        Pad_16EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FinalTemperatureMultiplier;                        // 0x51C(0x4)(None)
	float                                        FinalTemperatureExponent;                          // 0x520(0x4)(None)
	float                                        FinalTemperatureAddition;                          // 0x524(0x4)(None)
	float                                        PreOffsetTemperatureMultiplier;                    // 0x528(0x4)(None)
	float                                        PreOffsetTemperatureExponent;                      // 0x52C(0x4)(None)
	float                                        PreOffsetTemperatureAddition;                      // 0x530(0x4)(None)
	float                                        AboveTemperatureOffsetThreshold;                   // 0x534(0x4)(None)
	float                                        AboveTemperatureOffsetMultiplier;                  // 0x538(0x4)(None)
	float                                        AboveTemperatureOffsetExponent;                    // 0x53C(0x4)(None)
	float                                        BelowTemperatureOffsetThreshold;                   // 0x540(0x4)(None)
	float                                        BelowTemperatureOffsetMultiplier;                  // 0x544(0x4)(None)
	float                                        BelowTemperatureOffsetExponent;                    // 0x548(0x4)(None)
	float                                        AbsoluteTemperatureOverride;                       // 0x54C(0x4)(None)
	float                                        AbsoluteMaxTemperature;                            // 0x550(0x4)(None)
	float                                        AbsoluteMinTemperature;                            // 0x554(0x4)(None)
	uint8                                        bPreventCrops : 1;                                 // Mask: 0x1, PropSize: 0x10x558(0x1)(None)
	uint8                                        bIsOutside : 1;                                    // Mask: 0x2, PropSize: 0x10x558(0x1)(None)
	uint8                                        bRemoveBuffWhenLeavingVolume : 1;                  // Mask: 0x4, PropSize: 0x10x558(0x1)(None)
	uint8                                        BitPad_118 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_16EC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EggRangeMaximumNumberOverride;                     // 0x55C(0x4)(None)
	int32                                        EggMaximumNumberOverride;                          // 0x560(0x4)(None)
	float                                        EggChanceToSpawnOverride;                          // 0x564(0x4)(None)
	float                                        EggIntervalUnstasisChanceToSpawnOverride;          // 0x568(0x4)(None)
	uint8                                        Pad_16ED[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        OverrideEggLimitsDinoClasses;                      // 0x570(0x10)(ZeroConstructor)
	int32                                        BiomeZonePriority;                                 // 0x580(0x4)(None)
	float                                        MaxMultiplier;                                     // 0x584(0x4)(None)
	float                                        AbsoluteWindOverride;                              // 0x588(0x4)(None)
	float                                        PreOffsetWindMultiplier;                           // 0x58C(0x4)(None)
	float                                        PreOffsetWindExponent;                             // 0x590(0x4)(None)
	float                                        PreOffsetWindAddition;                             // 0x594(0x4)(None)
	float                                        AboveWindOffsetThreshold;                          // 0x598(0x4)(None)
	float                                        AboveWindOffsetMultiplier;                         // 0x59C(0x4)(None)
	float                                        AboveWindOffsetExponent;                           // 0x5A0(0x4)(None)
	float                                        BelowWindOffsetThreshold;                          // 0x5A4(0x4)(None)
	float                                        BelowWindOffsetMultiplier;                         // 0x5A8(0x4)(None)
	float                                        BelowWindOffsetExponent;                           // 0x5AC(0x4)(None)
	float                                        FinalWindMultiplier;                               // 0x5B0(0x4)(None)
	float                                        FinalWindExponent;                                 // 0x5B4(0x4)(None)
	float                                        FinalWindAddition;                                 // 0x5B8(0x4)(None)
	uint8                                        Pad_16F0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                BiomeCustomDatas;                                  // 0x5C0(0x10)(None)
	float                                        StatusAdjustmentRateMultipliersPositive[0xC];      // 0x5D0(0x30)(None)
	float                                        StatusAdjustmentRateMultipliersNegative[0xC];      // 0x600(0x30)(None)
	bool                                         bOnlyApplyAdjustmentRateValuesOutdoors;            // 0x630(0x1)(None)
	bool                                         bStatusAdjustRateValues;                           // 0x631(0x1)(None)
	bool                                         bDisableDayTransitionSounds;                       // 0x632(0x1)(None)
	uint8                                        Pad_16F1[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             BuffToGive;                                        // 0x638(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             BuffToPreventActiveUse;                            // 0x668(0x30)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicDay;                            // 0x698(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicDay_Heavy;                      // 0x6A0(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight;                          // 0x6A8(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight_Heavy;                    // 0x6B0(0x8)(ZeroConstructor)
	class USoundBase*                            ForceMusicInBiome;                                 // 0x6B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ABiomeZoneVolume* GetDefaultObj();

	void OnEndOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void IsPointUnderwater(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, float MinimumWaterHeight, bool bIgnoreVacuumStructures, bool bIgnorePainCausingVolumes, bool ReturnValue);
	void IsPointInVacuumBase(class UWorld* ForWorld, const struct FVector& AtPoint, bool ReturnValue);
	void GetWaterVolumeAtPoint(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, float MinimumWaterHeight, bool bIgnoreVacuumStructures, bool bIgnorePainCausingVolumes, class APhysicsVolume* ReturnValue);
	void GetPhysicsVolumeAtLocation(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, class APhysicsVolume* ReturnValue);
	void GetBiomeZoneVolume(class UWorld* World, const struct FVector& Location, class ABiomeZoneVolume* ReturnValue);
	void GetAllBiomeZones(class UWorld* World, const TArray<class ABiomeZoneVolume*>& BiomeZones);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.BiomeZoneVolumeEffectUtility
class UBiomeZoneVolumeEffectUtility : public UObject
{
public:

	static class UClass* StaticClass();
	static class UBiomeZoneVolumeEffectUtility* GetDefaultObj();

	void SpawnRelevantEffect(const TArray<struct FBiomeZoneVolumeEffect>& Effects, class AActor* AttachTo, const struct FVector& Location, bool bIsImpactActor);
	void SpawnImpactEffect(class UWorld* World, const struct FHitResult& HitResult, const struct FBiomeZoneImpactEffect& ImpactEffect, class AActor* Owner, class AActor* ReturnValue);
	void GetRelevantEffect(const TArray<struct FBiomeZoneVolumeEffect>& Effects, class AActor* SourceActor, const struct FVector& ForLocation, bool bIsImpactActor, const struct FBiomeZoneVolumeEffect& ReturnValue);
};

// 0x8 (0xA0 - 0x98)
// Class ShooterGame.BTService_FindTarget
class UBTService_FindTarget : public UBTService_BlackboardBase
{
public:
	bool                                         bDontSet;                                          // 0x98(0x1)(None)
	uint8                                        Pad_1719[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UBTService_FindTarget* GetDefaultObj();

};

// 0x0 (0x70 - 0x70)
// Class ShooterGame.BTService_UpdateAggro
class UBTService_UpdateAggro : public UBTService
{
public:

	static class UClass* StaticClass();
	static class UBTService_UpdateAggro* GetDefaultObj();

};

// 0x0 (0x70 - 0x70)
// Class ShooterGame.BTTask_AttackTarget
class UBTTask_AttackTarget : public UBTTaskNode
{
public:

	static class UClass* StaticClass();
	static class UBTTask_AttackTarget* GetDefaultObj();

};

// 0x38 (0xD0 - 0x98)
// Class ShooterGame.BTTask_GetRandomWanderDestination
class UBTTask_GetRandomWanderDestination : public UBTTask_BlackboardBase
{
public:
	struct FVector                               LocOverride;                                       // 0x98(0x18)(None)
	float                                        RandomOffsetMultiplier;                            // 0xB0(0x4)(None)
	bool                                         bUseRandomNegativeXDir;                            // 0xB4(0x1)(None)
	bool                                         bOrientRandOffsetByRotation;                       // 0xB5(0x1)(None)
	uint8                                        Pad_1726[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              OrientRandOffsetByRotation;                        // 0xB8(0x18)(None)

	static class UClass* StaticClass();
	static class UBTTask_GetRandomWanderDestination* GetDefaultObj();

};

// 0x0 (0xD0 - 0xD0)
// Class ShooterGame.BTTask_RotateToFaceBBEntryWithGrab
class UBTTask_RotateToFaceBBEntryWithGrab : public UBTTask_RotateToFaceBBEntry
{
public:

	static class UClass* StaticClass();
	static class UBTTask_RotateToFaceBBEntryWithGrab* GetDefaultObj();

};

// 0x0 (0x758 - 0x758)
// Class ShooterGame.BuildingUI
class UBuildingUI : public UPrimalUI
{
public:

	static class UClass* StaticClass();
	static class UBuildingUI* GetDefaultObj();

	void GetStructurePlacer(class APrimalStructurePlacer* ReturnValue);
	void GetStructureIcon(class APrimalStructure* Structure, class UTexture2D* ReturnValue);
};

// 0x8 (0x38 - 0x30)
// Class ShooterGame.CachedDB
class UCachedDB : public UDataAsset
{
public:
	bool                                         bForceRepopulateAll;                               // 0x30(0x1)(None)
	uint8                                        Pad_1739[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCachedDB* GetDefaultObj();

	void PopulateDBFromEditor();
	void PopulateDB(const TArray<struct FAssetData>& CustomAssetList);
};

// 0x50 (0x88 - 0x38)
// Class ShooterGame.ShooterWeaponDB
class UShooterWeaponDB : public UCachedDB
{
public:
	TMap<TSoftClassPtr<class AShooterWeapon>, struct FShooterWeaponDBEntry> CachedWeaponData;                                  // 0x38(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UShooterWeaponDB* GetDefaultObj();

};

// 0x50 (0x88 - 0x38)
// Class ShooterGame.PrimalDinoDB
class UPrimalDinoDB : public UCachedDB
{
public:
	TMap<TSoftClassPtr<class APrimalDinoCharacter>, struct FPrimalDinoDBEntry> CachedDinoData;                                    // 0x38(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalDinoDB* GetDefaultObj();

};

// 0x50 (0x88 - 0x38)
// Class ShooterGame.PrimalStructureDB
class UPrimalStructureDB : public UCachedDB
{
public:
	TMap<TSoftClassPtr<class APrimalStructure>, struct FPrimalStructureDBEntry> CachedStructureData;                               // 0x38(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalStructureDB* GetDefaultObj();

};

// 0x50 (0x88 - 0x38)
// Class ShooterGame.PrimalInventoryDB
class UPrimalInventoryDB : public UCachedDB
{
public:
	TMap<TSoftClassPtr<class UPrimalInventoryComponent>, struct FPrimalInventoryDBEntry> CachedInventoryData;                               // 0x38(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalInventoryDB* GetDefaultObj();

};

// 0x50 (0x88 - 0x38)
// Class ShooterGame.PrimalMissionDB
class UPrimalMissionDB : public UCachedDB
{
public:
	TMap<TSoftClassPtr<class AMissionType>, struct FPrimalMissionDBEntry> CachedMissionData;                                 // 0x38(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalMissionDB* GetDefaultObj();

};

// 0x0 (0x80 - 0x80)
// Class ShooterGame.GenerateCacheDBForModsCommandlet
class UGenerateCacheDBForModsCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class UGenerateCacheDBForModsCommandlet* GetDefaultObj();

};

// 0x8 (0x50 - 0x48)
// Class ShooterGame.CameraModifier_Climbing
class UCameraModifier_Climbing : public UCameraModifier
{
public:
	class AShooterWeapon_Climb*                  OwningWeapon;                                      // 0x48(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UCameraModifier_Climbing* GetDefaultObj();

};

// 0x28 (0x50 - 0x28)
// Class ShooterGame.CDOLiveUpdateData
class UCDOLiveUpdateData : public UObject
{
public:
	TArray<struct FNetChangeDefaultPropertyValue> CDOLiveUpdates;                                    // 0x28(0x10)(ZeroConstructor)
	struct FCDODebugData                         CDODebugData;                                      // 0x38(0x18)(None)

	static class UClass* StaticClass();
	static class UCDOLiveUpdateData* GetDefaultObj();

};

// 0x30 (0x360 - 0x330)
// Class ShooterGame.CharacterViewPanelWidget
class UCharacterViewPanelWidget : public UPrimalUserWidget
{
public:
	class FString                                PreviewWidgetName;                                 // 0x330(0x10)(None)
	uint8                                        Pad_1744[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCharacterViewPanelWidget* GetDefaultObj();

	void RefreshPreviewWidget();
};

// 0x38 (0x910 - 0x8D8)
// Class ShooterGame.CheatFunctionInfoEntryButton
class UCheatFunctionInfoEntryButton : public UDataListEntryButton
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x8D8(0x1)(None)
	uint8                                        BitPad_11A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1747[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                FunctionName;                                      // 0x8E0(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x8F0(0x1)(None)
	uint8                                        Pad_1748[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x8F4(0x10)(None)
	float                                        FolderNameTextClipOffset;                          // 0x904(0x4)(None)
	uint8                                        Pad_1749[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCheatFunctionInfoEntryButton* GetDefaultObj();

};

// 0x548 (0xA00 - 0x4B8)
// Class ShooterGame.PointOfInterestActor
class APointOfInterestActor : public AActor
{
public:
	uint8                                        Pad_175A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       PointRootComp;                                     // 0x4C8(0x8)(ZeroConstructor)
	class USphereComponent*                      PointUseSphereComp;                                // 0x4D0(0x8)(ZeroConstructor)
	class UTextRenderComponent*                  PointTextComp;                                     // 0x4D8(0x8)(ZeroConstructor)
	class UTextRenderComponent*                  PointTitleTextComp;                                // 0x4E0(0x8)(ZeroConstructor)
	uint8                                        Pad_175C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPointOfInterestData                  MyPointOfInterestData;                             // 0x4F0(0x1E0)(ZeroConstructor)
	struct FPointOfInterestCompanionBehavior     MyPointOfInterestCompanionBehavior;                // 0x6D0(0x300)(ZeroConstructor)
	struct FVector                               UseSphereLocOffset;                                // 0x9D0(0x18)(None)
	float                                        UseSphereRadius;                                   // 0x9E8(0x4)(None)
	float                                        TitleTextZOffset;                                  // 0x9EC(0x4)(None)
	uint8                                        bHasBeenViewed : 1;                                // Mask: 0x1, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        bSyncWithPointManager : 1;                         // Mask: 0x2, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        bPreventViewMultiUseEntry : 1;                     // Mask: 0x4, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        bDebugPointActor_Persistent : 1;                   // Mask: 0x8, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        bDebugPointActor_Single : 1;                       // Mask: 0x10, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        bDebugPointActor_ClearDebugLines : 1;              // Mask: 0x20, PropSize: 0x10x9F0(0x1)(None)
	uint8                                        BitPad_11B : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1762[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APointOfInterestManagerList*           MyPointManager;                                    // 0x9F8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APointOfInterestActor* GetDefaultObj();

	void RefreshPointData();
	void IsPointOfInterestValid(bool ReturnValue);
	void GetMyPointOfInterestData(const struct FPointOfInterestData& ReturnValue);
	void GetMyPointOfInterestCompanionBehavior(const struct FPointOfInterestCompanionBehavior& ReturnValue);
};

// 0x60 (0xA60 - 0xA00)
// Class ShooterGame.CompanionEventTrigger
class ACompanionEventTrigger : public APointOfInterestActor
{
public:
	class UBoxComponent*                         BoxTriggerComp;                                    // 0xA00(0x8)(ZeroConstructor)
	class UTextRenderComponent*                  EventTitleTextComp;                                // 0xA08(0x8)(ZeroConstructor)
	struct FCompanionEventData                   MyEventData;                                       // 0xA10(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ACompanionEventTrigger* GetDefaultObj();

	void OnEndOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* Actor);
};

// 0x18 (0x770 - 0x758)
// Class ShooterGame.ConsoleCommandButtonWidget
class UConsoleCommandButtonWidget : public UBaseSelectableButtonWidget
{
public:
	uint8                                        Pad_17D5[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UConsoleCommandButtonWidget* GetDefaultObj();

};

// 0x58 (0x388 - 0x330)
// Class ShooterGame.ContextMenu
class UContextMenu : public UPrimalUserWidget
{
public:
	FDelegateProperty_                           OnPopulateMenu;                                    // 0x330(0x10)(ZeroConstructor)
	FDelegateProperty_                           OnPopulateMenuCustom;                              // 0x340(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnActiveItemChanged;                               // 0x350(0x10)(ZeroConstructor)
	class FName                                  CustomName;                                        // 0x360(0x8)(None)
	uint8                                        Pad_1808[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContextMenu* GetDefaultObj();

	void SetActiveItem(class UContextMenuItem* Item);
	void PopulateContextMenuCustom__DelegateSignature(class UContextMenu* ContextMenu, class FName MenuName);
	void PopulateContextMenu__DelegateSignature(class UContextMenu* ContextMenu);
	void GetActiveItem(class UContextMenuItem* ReturnValue);
	void CloseMenu(bool CloseParents);
	void ActiveMenuItemChanged__DelegateSignature(class UContextMenu* Menu, class UContextMenuItem* NewItem, class UContextMenuItem* OldItem);
};

// 0xF0 (0x420 - 0x330)
// Class ShooterGame.ContextMenuItem
class UContextMenuItem : public UPrimalUserWidget
{
public:
	FDelegateProperty_                           OnGetMenuContentEvent;                             // 0x330(0x10)(ZeroConstructor)
	FDelegateProperty_                           OnGetMenuContentEventCustom;                       // 0x340(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnExecuteMainAction;                               // 0x350(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnExecuteMainActionCustom;                         // 0x360(0x10)(ZeroConstructor)
	class FName                                  SubmenuMenuAnchorName;                             // 0x370(0x8)(None)
	class FName                                  SubmenuIndicatorName;                              // 0x378(0x8)(None)
	class FName                                  ShortcutKeyWidgetName;                             // 0x380(0x8)(None)
	class FName                                  SwitchName;                                        // 0x388(0x8)(None)
	class FName                                  SwitchContainerName;                               // 0x390(0x8)(None)
	enum class EUContextMenuItemSwitchMode       SwitchType;                                        // 0x398(0x1)(None)
	bool                                         IsSwitchedOn;                                      // 0x399(0x1)(None)
	uint8                                        Pad_183B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CustomName;                                        // 0x39C(0x8)(None)
	uint8                                        Pad_183C[0x7C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContextMenuItem* GetDefaultObj();

	void SetSubmenuEnabled(bool bEnabled);
	void SetShortcutKey(int32 ComboKeyIdx, const struct FKey& Key);
	void SetJustification(enum class ETextJustify Value);
	void SetCaption(class FText Caption);
	void OnGetContextMenuContent(class UWidget* ReturnValue);
	void OnButtonClickedEventObjectCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, class FName SelectedOption);
	void OnButtonClickedEventObject__DelegateSignature(class UContextMenuItem* ContextMenuItem);
	void OnButtonClicked();
	void OnActiveMenuItemChanged(class UContextMenu* ContextMenu, class UContextMenuItem* NewActiveItem, class UContextMenuItem* OldActiveItem);
	void GetSubmenuEnabled(bool ReturnValue);
	void GetSubmenuContentCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, class FName SelectedOption, class UContextMenu* ReturnValue);
	void GetSubmenuContent__DelegateSignature(class UContextMenuItem* ContextMenuItem, class UContextMenu* ReturnValue);
	void GetJustification(enum class ETextJustify ReturnValue);
	void GetCaption(class FText ReturnValue);
};

// 0x18 (0x438 - 0x420)
// Class ShooterGame.ContextMenuItem_Sort
class UContextMenuItem_Sort : public UContextMenuItem
{
public:
	class FName                                  SorDirSwitcherName;                                // 0x420(0x8)(None)
	uint8                                        Pad_1840[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContextMenuItem_Sort* GetDefaultObj();

};

// 0x38 (0x458 - 0x420)
// Class ShooterGame.ContextMenuItem_Spinner
class UContextMenuItem_Spinner : public UContextMenuItem
{
public:
	FMulticastInlineDelegateProperty_            OnValueCommitted;                                  // 0x420(0x10)(ZeroConstructor)
	uint8                                        Pad_185B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinValue;                                          // 0x434(0x4)(None)
	int32                                        MaxValue;                                          // 0x438(0x4)(None)
	uint8                                        Pad_185E[0x1C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContextMenuItem_Spinner* GetDefaultObj();

	void SetValue(int32 NewValue);
	void SetMinValue(int32 NewValue);
	void SetMaxValue(int32 NewValue);
	void OnSpinnerValueCommitedEvent__DelegateSignature(class UContextMenuItem_Spinner* Item, int32 InValue, enum class ETextCommit CommitMethod);
	void HandleOnTextCommited(class FText Text, enum class ETextCommit CommitMethod);
	void HandleOnTextChanged(class FText Text);
	void HandleOnButtonIncreaseClicked();
	void HandleOnButtonDecreaseClicked();
	void GetValue(int32 ReturnValue);
	void GetMinValue(int32 ReturnValue);
	void GetMaxValue(int32 ReturnValue);
};

// 0x20 (0x3A8 - 0x388)
// Class ShooterGame.ContextMenu_DinoGroupEntry
class UContextMenu_DinoGroupEntry : public UContextMenu
{
public:
	class UClass*                                ItemClass_SimpleButton;                            // 0x388(0x8)(ZeroConstructor)
	class UClass*                                ItemClass_SimpleCaption;                           // 0x390(0x8)(ZeroConstructor)
	class UClass*                                ItemClass_Spinner;                                 // 0x398(0x8)(ZeroConstructor)
	class UClass*                                SubmenuClass;                                      // 0x3A0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UContextMenu_DinoGroupEntry* GetDefaultObj();

	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void HandleActionSetGroup(class UContextMenuItem* Item);
	void HandleActionRemoveDino(class UContextMenuItem* Item);
	void HandleActionRemoveClass(class UContextMenuItem* Item);
};

// 0x8 (0x390 - 0x388)
// Class ShooterGame.ContextMenu_InventorySort
class UContextMenu_InventorySort : public UContextMenu
{
public:
	class UClass*                                ItemClass_SortButton;                              // 0x388(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UContextMenu_InventorySort* GetDefaultObj();

	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void HandleActionWeight(class UContextMenuItem* Item);
	void HandleActionUnsort(class UContextMenuItem* Item);
	void HandleActionType(class UContextMenuItem* Item);
	void HandleActionSpoilTimer(class UContextMenuItem* Item);
	void HandleActionAlphabetical(class UContextMenuItem* Item);
};

// 0x50 (0x3D8 - 0x388)
// Class ShooterGame.ContextMenu_PrimalItem
class UContextMenu_PrimalItem : public UContextMenu
{
public:
	class UClass*                                ItemClass_SimpleButton;                            // 0x388(0x8)(ZeroConstructor)
	class UClass*                                ItemClass_SimpleCaption;                           // 0x390(0x8)(ZeroConstructor)
	class UClass*                                ItemClass_Spinner;                                 // 0x398(0x8)(ZeroConstructor)
	class UClass*                                SubmenuClass;                                      // 0x3A0(0x8)(ZeroConstructor)
	uint8                                        Pad_191C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SplitAmountValue;                                  // 0x3B8(0x4)(None)
	int32                                        SplitAmountMax;                                    // 0x3BC(0x4)(None)
	int32                                        CraftAmountValue;                                  // 0x3C0(0x4)(None)
	int32                                        CraftAmountMax;                                    // 0x3C4(0x4)(None)
	int32                                        CraftQuantityValue;                                // 0x3C8(0x4)(None)
	int32                                        CraftQuantityMax;                                  // 0x3CC(0x4)(None)
	uint8                                        bIsFreeCraftingMode : 1;                           // Mask: 0x1, PropSize: 0x10x3D0(0x1)(None)
	uint8                                        Pad_191F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UContextMenu_PrimalItem* GetDefaultObj();

	void PopulateSubmenuSplitStack(class UContextMenu* ContextMenu);
	void PopulateSubmenuSplitAmount(class UContextMenu* ContextMenu);
	void PopulateSubmenuRemove(class UContextMenu* ContextMenu);
	void PopulateSubmenuCustom(class UContextMenu* ContextMenu, class FName ContextItemName);
	void PopulateSubmenuCraftAmount(class UContextMenu* ContextMenu);
	void PopulateRootMenu(class UContextMenu* ContextMenu);
	void PopulateFolderMenu(class UContextMenu* ContextMenu);
	void PopulateCraftMenu(class UContextMenu* ContextMenu);
	void HandleSplitAmountValueCommit(class UContextMenuItem_Spinner* Item, int32 InValue, enum class ETextCommit CommitMethod);
	void HandleOnGetSubmenuSplitStackContent(class UContextMenuItem* MenuItem, class UContextMenu* ReturnValue);
	void HandleOnGetSubmenuSplitAmountContent(class UContextMenuItem* MenuItem, class UContextMenu* ReturnValue);
	void HandleOnGetSubmenuRemoveContent(class UContextMenuItem* MenuItem, class UContextMenu* ReturnValue);
	void HandleOnGetSubmenuCustomContent(class UContextMenuItem* MenuItem, class FName ContextItemName, class UContextMenu* ReturnValue);
	void HandleOnGetSubmenuCraftContent(class UContextMenuItem* MenuItem, class UContextMenu* ReturnValue);
	void HandleOnGetSubmenuCraftAmountContent(class UContextMenuItem* MenuItem, class UContextMenu* ReturnValue);
	void HandleCraftAmountValueCommit(class UContextMenuItem_Spinner* Item, int32 InValue, enum class ETextCommit CommitMethod);
	void HandleActionUse(class UContextMenuItem* Item);
	void HandleActionUnequip(class UContextMenuItem* Item);
	void HandleActionTransfer(class UContextMenuItem* Item);
	void HandleActionTrack(class UContextMenuItem* Item);
	void HandleActionSplitOne(class UContextMenuItem* Item);
	void HandleActionSplitHalf(class UContextMenuItem* Item);
	void HandleActionSplitAmount(class UContextMenuItem* Item);
	void HandleActionSplitAll(class UContextMenuItem* Item);
	void HandleActionSetCraftQuantity(class UContextMenuItem* Item);
	void HandleActionRepair(class UContextMenuItem* Item);
	void HandleActionRenameFolder(class UContextMenuItem* Item);
	void HandleActionRemoveSkin(class UContextMenuItem* Item);
	void HandleActionRemoveAmmo(class UContextMenuItem* Item);
	void HandleActionRemoveAccessory(class UContextMenuItem* Item);
	void HandleActionFavorite(class UContextMenuItem* Item);
	void HandleActionFastInventoryInFolder(class UContextMenuItem* Item);
	void HandleActionEquipAllInFolder(class UContextMenuItem* Item);
	void HandleActionEquip(class UContextMenuItem* Item);
	void HandleActionDiscard(class UContextMenuItem* Item);
	void HandleActionDeleteFolder(class UContextMenuItem* Item);
	void HandleActionCustom(class UContextMenuItem* Item, class FName ContextItemName);
	void HandleActionCraftOne(class UContextMenuItem* Item);
	void HandleActionCraftAmount(class UContextMenuItem* Item);
	void HandleActionCraftAll(class UContextMenuItem* Item);
	void BPUpdateCanUse();
};

// 0x8 (0x4E0 - 0x4D8)
// Class ShooterGame.CorruptedAvatarAttackCoordinator
class ACorruptedAvatarAttackCoordinator : public AAIAttackCoordinator
{
public:
	uint8                                        Pad_195C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACorruptedAvatarAttackCoordinator* GetDefaultObj();

};

// 0xB0 (0xE8 - 0x38)
// Class ShooterGame.CursorSettings
class UCursorSettings : public UDeveloperSettings
{
public:
	struct FRuntimeFloatCurve                    AnalogCursorAccelerationCurve;                     // 0x38(0x88)(None)
	float                                        MaxAnalogCursorSpeed;                              // 0xC0(0x4)(None)
	float                                        MaxAnalogCursorSpeedWhenHovered;                   // 0xC4(0x4)(None)
	float                                        AnalogCursorDragCoefficient;                       // 0xC8(0x4)(None)
	float                                        AnalogCursorDragCoefficientWhenHovered;            // 0xCC(0x4)(None)
	float                                        MinAnalogCursorSpeed;                              // 0xD0(0x4)(None)
	float                                        AnalogCursorDeadZone;                              // 0xD4(0x4)(None)
	float                                        AnalogCursorAccelerationMultiplier;                // 0xD8(0x4)(None)
	float                                        AnalogCursorSize;                                  // 0xDC(0x4)(None)
	bool                                         bUseEngineAnalogCursor;                            // 0xE0(0x1)(None)
	bool                                         bAnalogCursorNoAcceleration;                       // 0xE1(0x1)(None)
	uint8                                        Pad_1963[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCursorSettings* GetDefaultObj();

};

// 0x18 (0x4D0 - 0x4B8)
// Class ShooterGame.CustomActorList
class ACustomActorList : public AInfo
{
public:
	TArray<class AActor*>                        ActorList;                                         // 0x4B8(0x10)(ZeroConstructor)
	uint8                                        Pad_1968[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACustomActorList* GetDefaultObj();

	void DestroyActors();
};

// 0x60 (0x740 - 0x6E0)
// Class ShooterGame.CustomButtonWidget
class UCustomButtonWidget : public UButton
{
public:
	struct FCustomButtonWidgetStyle              ExtendedWidgetStyle;                               // 0x6E0(0x48)(None)
	bool                                         IsToggleButton;                                    // 0x728(0x1)(None)
	bool                                         IsToggledOn;                                       // 0x729(0x1)(None)
	uint8                                        Pad_1977[0x16];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UCustomButtonWidget* GetDefaultObj();

	void SetToggledState(bool IsToggled);
	void SetIsToggleButton(bool IsToggle);
	void GetToggledState(bool ReturnValue);
	void GetIsToggleButton(bool ReturnValue);
	void BPSetToggledState(bool IsToggled);
};

// 0x3960 (0x3F20 - 0x5C0)
// Class ShooterGame.ShooterGameMode
class AShooterGameMode : public APrimalGameMode
{
public:
	uint8                                        Pad_1B1E[0x108];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                BanFileName;                                       // 0x6C8(0x10)(None)
	uint8                                        Pad_1B1F[0x188];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UShooterCheatManager*                  ServerCheatManager;                                // 0x860(0x8)(ZeroConstructor)
	float                                        ForceLoadWorldSeconds;                             // 0x868(0x4)(None)
	uint8                                        Pad_1B20[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class URCONServer*                           RCONSocket;                                        // 0x888(0x8)(ZeroConstructor)
	class FString                                PlayersJoinNoCheckFilename;                        // 0x890(0x10)(None)
	class FString                                PlayersExclusiveCheckFilename;                     // 0x8A0(0x10)(None)
	class UShooterCheatManager*                  GlobalCommandsCheatManager;                        // 0x8B0(0x8)(ZeroConstructor)
	uint8                                        Pad_1B21[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CheckGlobalEnablesURL;                             // 0x8C8(0x10)(None)
	class UDatabase_LoginData*                   Database_LoginDataRef;                             // 0x8D8(0x8)(ZeroConstructor)
	class UDatabase_PubSub_GeneralNotifications* PubSub_GeneralNotificationsRef;                    // 0x8E0(0x8)(ZeroConstructor)
	uint8                                        Pad_1B23[0x178];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bGlobalDisableLoginLockCheck;                      // 0xA60(0x1)(None)
	bool                                         bTempDisableLoginLockCheck;                        // 0xA61(0x1)(None)
	uint8                                        Pad_1B24[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MyServerId;                                        // 0xA68(0x10)(None)
	uint8                                        Pad_1B25[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTribeData>                    TribesData;                                        // 0xAE8(0x10)(ZeroConstructor)
	TArray<class APrimalDinoCharacter*>          ActivelyTamingDinos;                               // 0xAF8(0x10)(ZeroConstructor)
	bool                                         bAutoCreateNewPlayerData;                          // 0xB08(0x1)(None)
	uint8                                        Pad_1B26[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DifficultyValue;                                   // 0xB10(0x4)(None)
	float                                        DifficultyValueMin;                                // 0xB14(0x4)(None)
	float                                        DifficultyValueMax;                                // 0xB18(0x4)(None)
	float                                        ProximityRadius;                                   // 0xB1C(0x4)(None)
	float                                        ProximityRadiusUnconsiousScale;                    // 0xB20(0x4)(None)
	uint8                                        Pad_1B27[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CheatClass;                                        // 0xB28(0x8)(ZeroConstructor)
	bool                                         bIsOfficialServer;                                 // 0xB30(0x1)(None)
	bool                                         bIsCurrentlySavingWorld;                           // 0xB31(0x1)(None)
	bool                                         bIsConsoleUnOfficialPCServer;                      // 0xB32(0x1)(None)
	bool                                         bServerAllowArkDownload;                           // 0xB33(0x1)(None)
	uint8                                        Pad_1B28[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAlwaysNotifyPlayerLeft;                           // 0xB36(0x1)(None)
	bool                                         bAlwaysNotifyPlayerJoined;                         // 0xB37(0x1)(None)
	bool                                         bServerHardcore;                                   // 0xB38(0x1)(None)
	uint8                                        Pad_1B29[0x34];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableCryoSicknessPVE;                            // 0xB6D(0x1)(None)
	uint8                                        Pad_1B2A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CryopodNerfDamageMult;                             // 0xB70(0x4)(None)
	float                                        CryopodNerfDuration;                               // 0xB74(0x4)(None)
	bool                                         bEnableMeshBitingProtection;                       // 0xB78(0x1)(None)
	uint8                                        Pad_1B2B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CryopodNerfIncomingDamageMultPercent;              // 0xB7C(0x4)(None)
	uint8                                        Pad_1B2D[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResourcesRespawnPeriodMultiplier;                  // 0xBC8(0x4)(None)
	float                                        KickIdlePlayersPeriod;                             // 0xBCC(0x4)(None)
	float                                        MateBoostEffectMultiplier;                         // 0xBD0(0x4)(None)
	float                                        AutoSavePeriodMinutes;                             // 0xBD4(0x4)(None)
	float                                        XPMultiplier;                                      // 0xBD8(0x4)(None)
	class FName                                  ActiveEvent;                                       // 0xBDC(0x8)(None)
	float                                        TribeNameChangeCooldown;                           // 0xBE4(0x4)(None)
	float                                        PlatformSaddleBuildAreaBoundsMultiplier;           // 0xBE8(0x4)(None)
	bool                                         bAlwaysAllowStructurePickup;                       // 0xBEC(0x1)(None)
	uint8                                        Pad_1B2F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StructurePickupTimeAfterPlacement;                 // 0xBF0(0x4)(None)
	float                                        StructurePickupHoldDuration;                       // 0xBF4(0x4)(None)
	bool                                         bAllowHideDamageSourceFromLogs;                    // 0xBF8(0x1)(None)
	uint8                                        Pad_1B30[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        KillXPMultiplier;                                  // 0xBFC(0x4)(None)
	float                                        HarvestXPMultiplier;                               // 0xC00(0x4)(None)
	float                                        CraftXPMultiplier;                                 // 0xC04(0x4)(None)
	float                                        GenericXPMultiplier;                               // 0xC08(0x4)(None)
	float                                        SpecialXPMultiplier;                               // 0xC0C(0x4)(None)
	float                                        AlphaKillXPMultiplier;                             // 0xC10(0x4)(None)
	float                                        CaveKillXPMultiplier;                              // 0xC14(0x4)(None)
	float                                        WildKillXPMultiplier;                              // 0xC18(0x4)(None)
	float                                        BossKillXPMultiplier;                              // 0xC1C(0x4)(None)
	float                                        TamedKillXPMultiplier;                             // 0xC20(0x4)(None)
	float                                        UnclaimedKillXPMultiplier;                         // 0xC24(0x4)(None)
	float                                        ExplorerNoteXPMultiplier;                          // 0xC28(0x4)(None)
	uint8                                        Pad_1B32[0x84];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UPrimalPlayerData*>             PlayerDatas;                                       // 0xCB0(0x10)(ZeroConstructor)
	uint8                                        Pad_1B33[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bForceRespawnDinos;                                // 0xCCE(0x1)(None)
	uint8                                        Pad_1B35[0x29];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnCharacterPossessedByPlayer;                      // 0xCF8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnCharacterUnpossessedByPlayer;                    // 0xD08(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnShooterCharacterSpawned;                         // 0xD18(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnShooterCharacterDied;                            // 0xD28(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnMissionTriggerBeginOverlap;                      // 0xD38(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnMissionTriggerEndOverlap;                        // 0xD48(0x10)(ZeroConstructor)
	float                                        TamedDinoDamageMultiplier;                         // 0xD58(0x4)(None)
	float                                        DinoDamageMultiplier;                              // 0xD5C(0x4)(None)
	float                                        PlayerDamageMultiplier;                            // 0xD60(0x4)(None)
	float                                        StructureDamageMultiplier;                         // 0xD64(0x4)(None)
	float                                        PlayerResistanceMultiplier;                        // 0xD68(0x4)(None)
	float                                        DinoResistanceMultiplier;                          // 0xD6C(0x4)(None)
	float                                        TamedDinoResistanceMultiplier;                     // 0xD70(0x4)(None)
	float                                        StructureResistanceMultiplier;                     // 0xD74(0x4)(None)
	bool                                         bJoinInProgressGamesAsSpectator;                   // 0xD78(0x1)(None)
	uint8                                        Pad_1B37[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TamingSpeedMultiplier;                             // 0xD7C(0x4)(None)
	float                                        HarvestAmountMultiplier;                           // 0xD80(0x4)(None)
	float                                        HarvestHealthMultiplier;                           // 0xD84(0x4)(None)
	float                                        PlayerCharacterWaterDrainMultiplier;               // 0xD88(0x4)(None)
	float                                        PlayerCharacterFoodDrainMultiplier;                // 0xD8C(0x4)(None)
	float                                        DinoCharacterFoodDrainMultiplier;                  // 0xD90(0x4)(None)
	float                                        RaidDinoCharacterFoodDrainMultiplier;              // 0xD94(0x4)(None)
	float                                        PlayerCharacterStaminaDrainMultiplier;             // 0xD98(0x4)(None)
	float                                        DinoCharacterStaminaDrainMultiplier;               // 0xD9C(0x4)(None)
	float                                        PlayerCharacterHealthRecoveryMultiplier;           // 0xDA0(0x4)(None)
	float                                        DinoCharacterHealthRecoveryMultiplier;             // 0xDA4(0x4)(None)
	float                                        CarnivoreNaturalTargetingRangeMultiplier;          // 0xDA8(0x4)(None)
	float                                        CarnivorePlayerAggroMultiplier;                    // 0xDAC(0x4)(None)
	float                                        HerbivoreNaturalTargetingRangeMultiplier;          // 0xDB0(0x4)(None)
	float                                        HerbivorePlayerAggroMultiplier;                    // 0xDB4(0x4)(None)
	bool                                         AIForceTargetPlayers;                              // 0xDB8(0x1)(None)
	bool                                         AIForceOverlapCheck;                               // 0xDB9(0x1)(None)
	uint8                                        Pad_1B3E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDisableSaveLoad;                                  // 0xDC0(0x1)(None)
	bool                                         bDisableXP;                                        // 0xDC1(0x1)(None)
	bool                                         bDisableDynamicMusic;                              // 0xDC2(0x1)(None)
	uint8                                        Pad_1B47[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLevelExperienceRamp>          LevelExperienceRampOverrides;                      // 0xDC8(0x10)(None)
	TArray<int32>                                OverridePlayerLevelEngramPoints;                   // 0xDD8(0x10)(None)
	TArray<int32>                                ExcludeItemIndices;                                // 0xDE8(0x10)(None)
	TArray<struct FEngramEntryOverride>          OverrideEngramEntries;                             // 0xDF8(0x10)(None)
	TArray<struct FEngramEntryOverride>          OverrideNamedEngramEntries;                        // 0xE08(0x10)(None)
	TArray<struct FEngramEntryAutoUnlock>        EngramEntryAutoUnlocks;                            // 0xE18(0x10)(None)
	TArray<class FString>                        PreventDinoTameClassNames;                         // 0xE28(0x10)(None)
	TArray<struct FClassMultiplier>              DinoClassStaminaMultipliers;                       // 0xE38(0x10)(None)
	TArray<struct FClassMultiplier>              TamedDinoClassStaminaMultipliers;                  // 0xE48(0x10)(None)
	TArray<struct FClassMultiplier>              DinoClassSpeedMultipliers;                         // 0xE58(0x10)(None)
	TArray<struct FClassMultiplier>              TamedDinoClassSpeedMultipliers;                    // 0xE68(0x10)(None)
	TArray<struct FDinoSpawnWeightMultiplier>    DinoSpawnWeightMultipliers;                        // 0xE78(0x10)(None)
	TArray<struct FClassMultiplier>              DinoClassResistanceMultipliers;                    // 0xE88(0x10)(None)
	TArray<struct FClassMultiplier>              TamedDinoClassResistanceMultipliers;               // 0xE98(0x10)(None)
	TArray<struct FClassMultiplier>              DinoClassDamageMultipliers;                        // 0xEA8(0x10)(None)
	TArray<struct FClassMultiplier>              TamedDinoClassDamageMultipliers;                   // 0xEB8(0x10)(None)
	TArray<struct FClassMultiplier>              HarvestResourceItemAmountClassMultipliers;         // 0xEC8(0x10)(None)
	TArray<struct FClassNameReplacement>         NPCReplacements;                                   // 0xED8(0x10)(None)
	float                                        PvPZoneStructureDamageMultiplier;                  // 0xEE8(0x4)(None)
	bool                                         bOnlyAllowSpecifiedEngrams;                        // 0xEEC(0x1)(None)
	uint8                                        Pad_1B4A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverrideMaxExperiencePointsPlayer;                 // 0xEF0(0x4)(None)
	int32                                        OverrideMaxExperiencePointsDino;                   // 0xEF4(0x4)(None)
	float                                        GlobalSpoilingTimeMultiplier;                      // 0xEF8(0x4)(None)
	float                                        GlobalItemDecompositionTimeMultiplier;             // 0xEFC(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeMultiplier;           // 0xF00(0x4)(None)
	float                                        MaxFallSpeedMultiplier;                            // 0xF04(0x4)(None)
	bool                                         bAutoPvETimer;                                     // 0xF08(0x1)(None)
	bool                                         bAutoPvEUseSystemTime;                             // 0xF09(0x1)(None)
	uint8                                        Pad_1B4B[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AutoPvEStartTimeSeconds;                           // 0xF14(0x4)(None)
	float                                        AutoPvEStopTimeSeconds;                            // 0xF18(0x4)(None)
	uint8                                        Pad_1B4C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AHibernationManager*                   HibernationManager;                                // 0xF20(0x8)(ZeroConstructor)
	int32                                        TributeItemExpirationSeconds;                      // 0xF28(0x4)(None)
	int32                                        TributeDinoExpirationSeconds;                      // 0xF2C(0x4)(None)
	int32                                        TributeCharacterExpirationSeconds;                 // 0xF30(0x4)(None)
	uint8                                        Pad_1B4D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxTributeItems;                                   // 0xF3C(0x4)(None)
	int32                                        MaxTributeDinos;                                   // 0xF40(0x4)(None)
	int32                                        MaxTributeCharacters;                              // 0xF44(0x4)(None)
	bool                                         bIncreasePvPRespawnInterval;                       // 0xF48(0x1)(None)
	uint8                                        Pad_1B4E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IncreasePvPRespawnIntervalCheckPeriod;             // 0xF4C(0x4)(None)
	float                                        IncreasePvPRespawnIntervalMultiplier;              // 0xF50(0x4)(None)
	float                                        IncreasePvPRespawnIntervalBaseAmount;              // 0xF54(0x4)(None)
	float                                        ResourceNoReplenishRadiusStructures;               // 0xF58(0x4)(None)
	float                                        ResourceNoReplenishRadiusPlayers;                  // 0xF5C(0x4)(None)
	float                                        CropGrowthSpeedMultiplier;                         // 0xF60(0x4)(None)
	float                                        LayEggIntervalMultiplier;                          // 0xF64(0x4)(None)
	float                                        PoopIntervalMultiplier;                            // 0xF68(0x4)(None)
	float                                        CropDecaySpeedMultiplier;                          // 0xF6C(0x4)(None)
	bool                                         bAllowChatFromDeadNonAdmins;                       // 0xF70(0x1)(None)
	bool                                         bAllowDisablingSpectator;                          // 0xF71(0x1)(None)
	bool                                         bPvEDisableFriendlyFire;                           // 0xF72(0x1)(None)
	bool                                         bFlyerPlatformAllowUnalignedDinoBasing;            // 0xF73(0x1)(None)
	bool                                         bAllowUnclaimDinos;                                // 0xF74(0x1)(None)
	uint8                                        Pad_1B53[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPerTribePlatformSaddleStructureLimit;           // 0xF78(0x4)(None)
	int32                                        MaxPlatformSaddleStructureLimit;                   // 0xF7C(0x4)(None)
	int32                                        MaxDinoBaseLevel;                                  // 0xF80(0x4)(None)
	int32                                        MaxNumberOfPlayersInTribe;                         // 0xF84(0x4)(None)
	float                                        TribeSlotReuseCooldown;                            // 0xF88(0x4)(None)
	float                                        MatingIntervalMultiplier;                          // 0xF8C(0x4)(None)
	float                                        EggHatchSpeedMultiplier;                           // 0xF90(0x4)(None)
	float                                        BabyMatureSpeedMultiplier;                         // 0xF94(0x4)(None)
	float                                        BabyFoodConsumptionSpeedMultiplier;                // 0xF98(0x4)(None)
	uint8                                        Pad_1B58[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PerLevelStatsMultiplier_Player[0xC];               // 0xFA0(0x30)(None)
	float                                        PerLevelStatsMultiplier_DinoTamed[0xC];            // 0xFD0(0x30)(None)
	float                                        PerLevelStatsMultiplier_DinoTamed_Add[0xC];        // 0x1000(0x30)(None)
	float                                        PerLevelStatsMultiplier_DinoTamed_Affinity[0xC];   // 0x1030(0x30)(None)
	float                                        PerLevelStatsMultiplier_DinoWild[0xC];             // 0x1060(0x30)(None)
	int32                                        MutagenLevelBoost[0xC];                            // 0x1090(0x30)(None)
	int32                                        MutagenLevelBoost_Bred[0xC];                       // 0x10C0(0x30)(None)
	int32                                        ItemStatClamps[0x8];                               // 0x10F0(0x20)(None)
	int32                                        MaxGateFrameOnSaddles;                             // 0x1110(0x4)(None)
	int32                                        MaxHexagonsPerCharacter;                           // 0x1114(0x4)(None)
	bool                                         bCustomGameModeAllowSpectatorJoinAfterMatchStart;  // 0x1118(0x1)(None)
	uint8                                        Pad_1B5B[0x1107];                                  // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bGameplayLogEnabled;                               // 0x2220(0x1)(None)
	bool                                         bServerGameLogEnabled;                             // 0x2221(0x1)(None)
	uint8                                        Pad_1B5C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                BonusSupplyCrateItemClass;                         // 0x2228(0x8)(ZeroConstructor)
	float                                        BonusSupplyCrateItemGiveInterval;                  // 0x2230(0x4)(None)
	float                                        StructureDamageRepairCooldown;                     // 0x2234(0x4)(None)
	float                                        CustomRecipeEffectivenessMultiplier;               // 0x2238(0x4)(None)
	float                                        CustomRecipeSkillMultiplier;                       // 0x223C(0x4)(None)
	class FString                                BonusSupplyCrateItemString;                        // 0x2240(0x10)(None)
	bool                                         MaxDifficulty;                                     // 0x2250(0x1)(None)
	bool                                         bPvEAllowTribeWar;                                 // 0x2251(0x1)(None)
	bool                                         bPvEAllowTribeWarCancel;                           // 0x2252(0x1)(None)
	bool                                         bAllowCustomRecipes;                               // 0x2253(0x1)(None)
	bool                                         bPassiveDefensesDamageRiderlessDinos;              // 0x2254(0x1)(None)
	uint8                                        Pad_1B5D[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableDeathTeamSpectator;                         // 0x2260(0x1)(None)
	bool                                         bTribeStoreCharacterConfiguration;                 // 0x2261(0x1)(None)
	uint8                                        Pad_1B5E[0xF6];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxTribeLogs;                                      // 0x2358(0x4)(None)
	uint8                                        Pad_1B5F[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDisableFriendlyFire;                              // 0x2378(0x1)(None)
	bool                                         bAllowInactiveTribes;                              // 0x2379(0x1)(None)
	bool                                         bForceMapPlayerLocation;                           // 0x237A(0x1)(None)
	uint8                                        Pad_1B60[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DinoHarvestingDamageMultiplier;                    // 0x237C(0x4)(None)
	float                                        PlayerHarvestingDamageMultiplier;                  // 0x2380(0x4)(None)
	float                                        DinoTurretDamageMultiplier;                        // 0x2384(0x4)(None)
	bool                                         bDisableLootCrates;                                // 0x2388(0x1)(None)
	uint8                                        Pad_1B61[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ExtinctionEventTimeInterval;                       // 0x238C(0x4)(None)
	uint8                                        Pad_1B62[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       NextExtinctionEventUTC;                            // 0x2394(0x4)(None)
	uint8                                        Pad_1B63[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseCharacterTracker;                              // 0x23B4(0x1)(None)
	bool                                         bShowFloatingDamageText;                           // 0x23B5(0x1)(None)
	uint8                                        Pad_1B64[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SavedGameModeVersion;                              // 0x23B8(0x4)(None)
	uint8                                        Pad_1B66[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAllowTekSuitPowersInGenesis;                      // 0x23C0(0x1)(None)
	uint8                                        Pad_1B69[0x47];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemCraftingCostOverride>     OverrideItemCraftingCosts;                         // 0x2408(0x10)(ZeroConstructor)
	TArray<struct FConfigItemCraftingCostOverride> ConfigOverrideItemCraftingCosts;                   // 0x2418(0x10)(None)
	TArray<struct FConfigMaxItemQuantityOverride> ConfigOverrideItemMaxQuantity;                     // 0x2428(0x10)(None)
	uint8                                        Pad_1B6B[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FConfigSupplyCrateItemsOverride> ConfigOverrideSupplyCrateItems;                    // 0x2488(0x10)(ZeroConstructor)
	TArray<struct FConfigNPCSpawnEntriesContainer> ConfigOverrideNPCSpawnEntriesContainer;            // 0x2498(0x10)(ZeroConstructor)
	TArray<struct FConfigNPCSpawnEntriesContainer> ConfigAddNPCSpawnEntriesContainer;                 // 0x24A8(0x10)(ZeroConstructor)
	TArray<struct FConfigNPCSpawnEntriesContainer> ConfigSubtractNPCSpawnEntriesContainer;            // 0x24B8(0x10)(ZeroConstructor)
	float                                        BabyImprintingStatScaleMultiplier;                 // 0x24C8(0x4)(None)
	float                                        BabyCuddleIntervalMultiplier;                      // 0x24CC(0x4)(None)
	float                                        BabyImprintAmountMultiplier;                       // 0x24D0(0x4)(None)
	float                                        BabyCuddleGracePeriodMultiplier;                   // 0x24D4(0x4)(None)
	float                                        BabyCuddleLoseImprintQualitySpeedMultiplier;       // 0x24D8(0x4)(None)
	float                                        HairGrowthSpeedMultiplier;                         // 0x24DC(0x4)(None)
	float                                        DinoHairGrowthSpeedMultiplier;                     // 0x24E0(0x4)(None)
	bool                                         bPreventDiseases;                                  // 0x24E4(0x1)(None)
	bool                                         bNonPermanentDiseases;                             // 0x24E5(0x1)(None)
	uint8                                        Pad_1B6F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAllClustersInventory*                 AllClustersInventory;                              // 0x24E8(0x8)(ZeroConstructor)
	int32                                        SaveForceRespawnDinosVersion;                      // 0x24F0(0x4)(None)
	uint8                                        Pad_1B70[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint64                                       ServerID;                                          // 0x24F8(0x8)(None)
	uint8                                        Pad_1B71[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                SupportedSpawnRegions;                             // 0x2558(0x10)(None)
	bool                                         bServerUseDinoList;                                // 0x2568(0x1)(None)
	uint8                                        Pad_1B72[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxAllowedRespawnInterval;                         // 0x256C(0x4)(None)
	bool                                         bUseDinoLevelUpAnimations;                         // 0x2570(0x1)(None)
	bool                                         bDisableDinoTaming;                                // 0x2571(0x1)(None)
	bool                                         bDisableDinoRiding;                                // 0x2572(0x1)(None)
	uint8                                        Pad_1B74[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SaveGameCustomVersion;                             // 0x2578(0x4)(None)
	uint8                                        Pad_1B76[0x884];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bFailedWaterDinoSpawnLogEnabled;                   // 0x2E00(0x1)(None)
	uint8                                        Pad_1B77[0x88F];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlayerBaseStatMultipliers[0xC];                    // 0x3690(0x30)(None)
	int32                                        NPCActiveCountTamed;                               // 0x36C0(0x4)(None)
	int32                                        NPCActiveCount;                                    // 0x36C4(0x4)(None)
	int32                                        NPCCount;                                          // 0x36C8(0x4)(None)
	float                                        RTSModeNumSelectableDinosScale;                    // 0x36CC(0x4)(None)
	float                                        RTSMaxRangeFromPlayerCharacterScale;               // 0x36D0(0x4)(None)
	float                                        RTSProximityToEnemyStructureScale;                 // 0x36D4(0x4)(None)
	float                                        MatingSpeedMultiplier;                             // 0x36D8(0x4)(None)
	float                                        FastDecayInterval;                                 // 0x36DC(0x4)(None)
	bool                                         bUseSingleplayerSettings;                          // 0x36E0(0x1)(None)
	bool                                         bDisableGenesisMissions;                           // 0x36E1(0x1)(None)
	bool                                         bDisableStructurePlacementCollision;               // 0x36E2(0x1)(None)
	bool                                         bForceUseInventoryAppends;                         // 0x36E3(0x1)(None)
	bool                                         bDisableWirelessCrafting;                          // 0x36E4(0x1)(None)
	bool                                         bDisableWirelessCraftingForDinos;                  // 0x36E5(0x1)(None)
	bool                                         bDisableWirelessCraftingForPlayers;                // 0x36E6(0x1)(None)
	bool                                         bDisableWirelessCraftingForStructures;             // 0x36E7(0x1)(None)
	float                                        WirelessCraftingRangeOverride;                     // 0x36E8(0x4)(None)
	float                                        SupplyCrateLootQualityMultiplier;                  // 0x36EC(0x4)(None)
	float                                        FishingLootQualityMultiplier;                      // 0x36F0(0x4)(None)
	float                                        ItemStackSizeMultiplier;                           // 0x36F4(0x4)(None)
	float                                        CraftingSkillBonusMultiplier;                      // 0x36F8(0x4)(None)
	bool                                         bAllowPlatformSaddleMultiFloors;                   // 0x36FC(0x1)(None)
	bool                                         bAllowUnlimitedRespecs;                            // 0x36FD(0x1)(None)
	uint8                                        Pad_1B7C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FuelConsumptionIntervalMultiplier;                 // 0x3700(0x4)(None)
	int32                                        DestroyTamesOverLevelClamp;                        // 0x3704(0x4)(None)
	int32                                        MaxAlliancesPerTribe;                              // 0x3708(0x4)(None)
	int32                                        MaxTribesPerAlliance;                              // 0x370C(0x4)(None)
	bool                                         bDisableDinoDecayClaiming;                         // 0x3710(0x1)(None)
	bool                                         bDisableNonTribePinAccess;                         // 0x3711(0x1)(None)
	bool                                         bUseTameLimitForStructuresOnly;                    // 0x3712(0x1)(None)
	bool                                         bLimitTurretsInRange;                              // 0x3713(0x1)(None)
	float                                        LimitTurretsRange;                                 // 0x3714(0x4)(None)
	int32                                        LimitTurretsNum;                                   // 0x3718(0x4)(None)
	bool                                         bHardLimitTurretsInRange;                          // 0x371C(0x1)(None)
	uint8                                        Pad_1B7D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LimitGeneratorsNum;                                // 0x3720(0x4)(None)
	float                                        LimitGeneratorsRange;                              // 0x3724(0x4)(None)
	int32                                        CropPlotStackLimit;                                // 0x3728(0x4)(None)
	bool                                         bDisablePhotoMode;                                 // 0x372C(0x1)(None)
	uint8                                        Pad_1B7E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PhotoModeRangeLimit;                               // 0x3730(0x4)(None)
	bool                                         bAutoUnlockAllEngrams;                             // 0x3734(0x1)(None)
	uint8                                        Pad_1B7F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ServerLastForceRespawnWildDinosTime;               // 0x3738(0x8)(None)
	class FString                                UseStructurePreventionVolumeTagString;             // 0x3740(0x10)(None)
	float                                        BaseTemperatureMultiplier;                         // 0x3750(0x4)(None)
	bool                                         bForceAllowAllStructures;                          // 0x3754(0x1)(None)
	bool                                         bForceAllowAscensionItemDownloads;                 // 0x3755(0x1)(None)
	bool                                         bShowCreativeMode;                                 // 0x3756(0x1)(None)
	uint8                                        Pad_1B80[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LimitNonPlayerDroppedItemsRange;                   // 0x3758(0x4)(None)
	int32                                        LimitNonPlayerDroppedItemsCount;                   // 0x375C(0x4)(None)
	float                                        GlobalPoweredBatteryDurabilityDecreasePerSecond;   // 0x3760(0x4)(None)
	float                                        SingleplayerSettingsCorpseLifespanMultiplier;      // 0x3764(0x4)(None)
	float                                        UseCorpseLifeSpanMultiplier;                       // 0x3768(0x4)(None)
	float                                        TimePeriodToHideDisconnectedPlayers;               // 0x376C(0x4)(None)
	bool                                         bUseBPPreSpawnedDino;                              // 0x3770(0x1)(None)
	uint8                                        Pad_1B81[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PreventOfflinePvPConnectionInvincibleInterval;     // 0x3774(0x4)(None)
	float                                        TamedDinoCharacterFoodDrainMultiplier;             // 0x3778(0x4)(None)
	float                                        WildDinoCharacterFoodDrainMultiplier;              // 0x377C(0x4)(None)
	float                                        WildDinoTorporDrainMultiplier;                     // 0x3780(0x4)(None)
	float                                        PassiveTameIntervalMultiplier;                     // 0x3784(0x4)(None)
	float                                        TamedDinoTorporDrainMultiplier;                    // 0x3788(0x4)(None)
	bool                                         bDisableWeatherFog;                                // 0x378C(0x1)(None)
	uint8                                        Pad_1B82[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MeshCheckingRayDistance;                           // 0x3790(0x4)(None)
	float                                        MeshCheckingSubdivisons;                           // 0x3794(0x4)(None)
	float                                        MeshCheckingPercentageToFail;                      // 0x3798(0x4)(None)
	bool                                         bIgnoreStructuresPreventionVolumes;                // 0x379C(0x1)(None)
	bool                                         bGenesisUseStructuresPreventionVolumes;            // 0x379D(0x1)(None)
	uint8                                        Pad_1B83[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LiveTuningFileName;                                // 0x37A0(0x10)(None)
	uint8                                        Pad_1B84[0x31];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bLogChatMessages;                                  // 0x37E1(0x1)(None)
	uint8                                        Pad_1B85[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ChatLogFlushIntervalSeconds;                       // 0x37E4(0x4)(None)
	int32                                        ChatLogFileSplitIntervalSeconds;                   // 0x37E8(0x4)(None)
	int32                                        ChatLogMaxAgeInDays;                               // 0x37EC(0x4)(None)
	uint8                                        Pad_1B86[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLeaderboardsContainer                LeaderboardContainer;                              // 0x3850(0x10)(None)
	uint8                                        Pad_1B87[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasCovertedToStore;                               // 0x38B8(0x1)(None)
	bool                                         bAllowStoredDatas;                                 // 0x38B9(0x1)(None)
	uint8                                        Pad_1B88[0x17E];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBuffAddition>                 AdditionalDefaultBuffs;                            // 0x3A38(0x10)(ZeroConstructor)
	bool                                         bParseServerToJson;                                // 0x3A48(0x1)(None)
	uint8                                        Pad_1B89[0x7F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPreSpawnedDino;                                  // 0x3AC8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnKilled;                                          // 0x3AD8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPostLogin;                                       // 0x3AE8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnStartNewPlayer;                                  // 0x3AF8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnAddNewTribe;                                     // 0x3B08(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnRemoveTribe;                                     // 0x3B18(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnRemovePlayerFromTribe;                           // 0x3B28(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnServerChatMessage;                               // 0x3B38(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnServerDirectMessage;                             // 0x3B48(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnServerNotification;                              // 0x3B58(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnNotifyDamage;                                    // 0x3B68(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnSerializeForSaveFile;                            // 0x3B78(0x10)(ZeroConstructor)
	uint8                                        Pad_1B8D[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseHexagonRewardMultiplier;                       // 0x3BA8(0x4)(None)
	float                                        HexagonRewardMultiplier;                           // 0x3BAC(0x4)(None)
	float                                        HexagonCostMultiplier;                             // 0x3BB0(0x4)(None)
	bool                                         bDisableHexagonStore;                              // 0x3BB4(0x1)(None)
	bool                                         bHexStoreAllowOnlyEngramTradeOption;               // 0x3BB5(0x1)(None)
	uint8                                        Pad_1B90[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClassNameReplacement>         DynamicNPCReplacements;                            // 0x3BB8(0x10)(None)
	TArray<struct FClassNameReplacement>         CollectiveNPCReplacements;                         // 0x3BC8(0x10)(None)
	TArray<class FString>                        PreventTransferForClassNames;                      // 0x3BD8(0x10)(None)
	bool                                         bAllowSpeedLeveling;                               // 0x3BE8(0x1)(None)
	bool                                         bAllowFlyerSpeedLeveling;                          // 0x3BE9(0x1)(None)
	bool                                         bEnableWorldBuffScaling;                           // 0x3BEA(0x1)(None)
	bool                                         bDisableWorldBuffs;                                // 0x3BEB(0x1)(None)
	bool                                         bEnablePlayerMoveThroughSleeping;                  // 0x3BEC(0x1)(None)
	bool                                         bEnablePlayerMoveThroughAlly;                      // 0x3BED(0x1)(None)
	bool                                         bAutoCreateTribes;                                 // 0x3BEE(0x1)(None)
	bool                                         bRiderDinoCollision;                               // 0x3BEF(0x1)(None)
	bool                                         bFreezeTribes;                                     // 0x3BF0(0x1)(None)
	uint8                                        Pad_1B93[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WorldBuffScalingEfficacy;                          // 0x3BF4(0x4)(None)
	bool                                         bUseOverrideTimeToRecoverValuesOnPlayerStatusComp; // 0x3BF8(0x1)(None)
	uint8                                        Pad_1B94[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideTimeToRecoverAfterDepletionStatusValue[0xC]; // 0x3BFC(0x30)(None)
	float                                        OverrideTimeToRecoverAfterDecreaseStatusValue[0xC]; // 0x3C2C(0x30)(None)
	bool                                         bUseOverrideTimeToRecoverValuesOnDinoStatusComp;   // 0x3C5C(0x1)(None)
	uint8                                        Pad_1B95[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideDinoTimeToRecoverAfterDepletionStatusValue[0xC]; // 0x3C60(0x30)(None)
	float                                        OverrideDinoTimeToRecoverAfterDecreaseStatusValue[0xC]; // 0x3C90(0x30)(None)
	bool                                         bUseDisabledStatusStates;                          // 0x3CC0(0x1)(None)
	uint8                                        DisabledStatusStates[0xE];                         // 0x3CC1(0xE)(None)
	uint8                                        Pad_1B97[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCrateTemporaryQualityModifierSet> TemporaryCrateModifiers;                           // 0x3CD0(0x10)(None)
	TArray<struct FResourceTemporaryAmountModifierSet> TemporaryResourceModifiers;                        // 0x3CE0(0x10)(None)
	float                                        AdjustableMutagenSpawnDelayMultiplier;             // 0x3CF0(0x4)(None)
	bool                                         bDisableDefaultMapItemSets;                        // 0x3CF4(0x1)(None)
	bool                                         DisableRailgunPVP;                                 // 0x3CF5(0x1)(None)
	uint8                                        Pad_1B9A[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DynamicDisabledWorldBuffs;                         // 0x3D00(0x10)(None)
	uint8                                        Pad_1B9B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RedisTimeoutInMinutes;                             // 0x3D20(0x4)(None)
	bool                                         RestartedDueToRedisTimeout;                        // 0x3D24(0x1)(None)
	uint8                                        Pad_1B9C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImprintLimit;                                      // 0x3D28(0x4)(None)
	int32                                        MaxStructuresToAllowForPickupOverride;             // 0x3D2C(0x4)(None)
	bool                                         bDisableCustomFoldersInTributeInventories;         // 0x3D30(0x1)(None)
	bool                                         bDisableRailgunPVP;                                // 0x3D31(0x1)(None)
	uint8                                        Pad_1B9D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumTimebetweeninventoryRetrieval;              // 0x3D34(0x4)(None)
	float                                        WildFollowerSpawnChanceMultiplier;                 // 0x3D38(0x4)(None)
	float                                        WildFollowerSpawnCountMultiplier;                  // 0x3D3C(0x4)(None)
	bool                                         bDisableDinoItemBlacklist;                         // 0x3D40(0x1)(None)
	bool                                         bPreventHibernationManager;                        // 0x3D41(0x1)(None)
	uint8                                        Pad_1B9E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DinoArmorDurabilityScale;                          // 0x3D44(0x4)(None)
	TArray<TSoftClassPtr<class APrimalStructure>> XmasEventStructuresToRemove;                       // 0x3D48(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     XmasEventItemsToRemove;                            // 0x3D58(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> EventInventoryContainersToRefresh;                 // 0x3D68(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> VDayDinosToRemove;                                 // 0x3D78(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     VDayItemsToRemove;                                 // 0x3D88(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> EasterEventStructuresToRemove;                     // 0x3D98(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     EasterItemsToRemove;                               // 0x3DA8(0x10)(ZeroConstructor)
	uint8                                        Pad_1BA1[0xB0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAntiDupeTransactionLog*               AntiDupeTransactionLog;                            // 0x3E68(0x8)(ZeroConstructor)
	uint8                                        Pad_1BA2[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterGameMode* GetDefaultObj();

	void UpdateTribeData(const struct FTribeData& NewTribeData);
	void TryGetIntOptionIni(const class FString& Section, const class FString& OptionName, int32 Value, bool ReturnValue);
	void TryGetIntOption(const class FString& Section, const class FString& Options, const class FString& OptionName, int32 Value, bool ReturnValue);
	void TryGetBoolOptionIni(const class FString& Section, const class FString& OptionName, bool Value, bool ReturnValue);
	void TryGetBoolOption(const class FString& Section, const class FString& Options, const class FString& OptionName, bool Value, bool ReturnValue);
	void TriggerLevelCustomEvents(class UWorld* InWorld, const class FString& EventName, int32 IDtoOnlyAllowExecutionOncePerFrame, bool ReturnValue);
	void TimeSinceMissionDeactivated(class UClass* MissionType, float ReturnValue);
	void StartIntervalUpdatingCachedTeamTameLists(class AShooterPlayerController* RequestingPlayer);
	void SortCurrentlyEvaluatedTameIntoAppropriateCachedTeamTameListForThisCurrentBatch();
	void ShiftAwaitingNEXTBatchOfTeamsToUpdateCachedTeamTameListsToCurrentBatch();
	void SetTimeOfDay(const class FString& TimeString);
	void SetLastMissionDeactivatedUtcTime(class UClass* MissionType, double UtcTime);
	void SetCreatedCachedTeamTameListsOnTribeDataOrPlayerData();
	void SendServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32 ReceiverTeamId, int32 ReceiverPlayerID, bool bDoBillboard);
	void SendServerDirectMessage(const class FString& PlayerSteamIDconst, const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int32 ReceiverTeamId, int32 ReceiverPlayerID, const class FString& PlayerName);
	void SendServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int32 ReceiverTeamId, int32 ReceiverPlayerID, const class FString& SenderId);
	void SendChatMessageToTeam(int32 Team, const struct FPrimalChatMessage& Message);
	void SendChatMessageToPlayer(class AShooterPlayerController* ToPlayer, const struct FPrimalChatMessage& Message);
	void SendChatMessage(const struct FPrimalChatMessage& Message);
	void RestartServer();
	void RequestUpdateCachedTeamTameList(class AShooterPlayerController* RequestingPlayer);
	void RequestPlayerRecieveKnownCachedTeamTameList(class AShooterPlayerController* RequestingPlayer);
	void RemovePlayerData(class AShooterPlayerState* PlayerState);
	void RemoveInactivePlayersAndTribes();
	void ReassertColorization();
	void QueueUpTeamForItsCachedTeamTameListToBeUpdated(class AShooterPlayerController* RequestingPlayer);
	void PrintToServerGameLog(const class FString& InString, bool bSendChatToAllAdmins);
	void PrintToGameplayLog(const class FString& InString);
	void PostAlarmNotificationTribe(int32 TribeID, const class FString& Title, const class FString& Message);
	void PostAlarmNotificationPlayerID(int32 PlayerID, const class FString& Title, const class FString& Message);
	void PostAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message);
	void OnLogout(class AController* Exiting);
	void OnLandscapeLevelUnloaded();
	void OnLandscapeLevelLoaded();
	void OnFinishedUpdatingCurrentBatchOfCachedTeamTameLists();
	void MovePlayersAwaitingUpdatedCachedTeamTameListToArrayOfPlayersToGetNotifiedAndRecieveUpdatedList();
	void LoadTribeData(int32 TribeID, const struct FTribeData& LoadedTribeData, bool bIsLoadingBackup, bool bDontCheckDirtyTribeWar, bool ReturnValue);
	void LoadedWorld();
	void ListAllPlayers(const class FString& Message);
	void KickPlayerController(class APlayerController* ThePC, const class FString& KickMessage);
	void KickAllPlayersAndReload();
	void IsTimeSinceMissionDeactivated(class UClass* MissionType, float CheckTimeSince, bool bForceTrueAtZeroTime, bool ReturnValue);
	void IsTeamIncludedInNextBatchToProcessTameList(int32 Team, int32 FoundIndex, bool ReturnValue);
	void IsTeamCurrentlyUpdatingItsCachedTeamTameList(int32 Team, int32 FoundIndex, bool ReturnValue);
	void IsPlayerInNextTeamBatchPlayersAwaitingUpdatedCachedTeamTameList(class AShooterPlayerController* RequestingPlayer, int32 FoundIndex, bool ReturnValue);
	void IsPlayerControllerAllowedToJoinNoCheck(class AShooterPlayerController* ForPlayer, bool ReturnValue);
	void IsPlayerControllerAllowedToExclusiveJoin(class AShooterPlayerController* ForPlayer, bool ReturnValue);
	void IsPlayerAwaitingToRecieveCachedTeamTameListASAP(class AShooterPlayerController* RequestingPlayer, int32 FoundIndex, bool ReturnValue);
	void IsPlayerAwaitingNotificationOnceTheirCachedTeamTameListFinishesUpdating(class AShooterPlayerController* RequestingPlayer, int32 FoundIndex, bool ReturnValue);
	void IsPlayerArrayOfInAllPlayersAwaitingUpdatedCachedTeamTameLists(class AShooterPlayerController* RequestingPlayer, int32 FoundIndex, bool ReturnValue);
	void IsPlayerAllowedToCheat(class AShooterPlayerController* ForPlayer, bool ReturnValue);
	void IsCachedTeamTameListOutOfDate(class AShooterPlayerController* RequestingPlayer, bool ReturnValue);
	void InitOptionString(const class FString& Commandline, const class FString& Section, const class FString& Option);
	void InitOptionInteger(const class FString& Commandline, const class FString& Section, const class FString& Option, int32 CurrentValue);
	void InitOptionFloat(const class FString& Commandline, const class FString& Section, const class FString& Option, float CurrentValue);
	void InitOptionBool(const class FString& Commandline, const class FString& Section, const class FString& Option, bool bDefaultValue);
	void InitGameStateDataSets();
	void IncrementNumDeaths(const class FString& PlayerDataID);
	void HitchDetected(const struct FSoftObjectPath& ForAsset, float HitchTime);
	void HandleNewPlayer(class AShooterPlayerController* NewPlayer, class UPrimalPlayerData* PlayerData, class AShooterCharacter* PlayerCharacter, bool bIsFromLogin, bool ReturnValue);
	void GetTribeDataBlueprint(int32 TribeID, const struct FTribeData& ReturnValue);
	void GetStringOption(const class FString& Section, const class FString& OptionName, const class FString& ReturnValue);
	void GetSessionTimeString(const class FString& ReturnValue);
	void GetServerSettingsFloat(const class FString& KeyValue, float OutFloat, bool ReturnValue);
	void GetServerName(bool bNumbersAndLettersOnly, const class FString& ReturnValue);
	void GetPlayerData(const class FString& PlayerDataID, class UPrimalPlayerData* ReturnValue);
	void GetOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int32 DinoTeam, bool bExactClassMatch, bool bIgnoreClass, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void GetOrLoadTribeData(int32 TribeID, const struct FTribeData& LoadedTribeData, bool ReturnValue);
	void GetNumDeaths(const class FString& PlayerDataID, int32 ReturnValue);
	void GetNumberOfLivePlayersOnTribe(const class FString& TribeName, int32 ReturnValue);
	void GetLaunchOptionFloat(const class FString& LaunchOptionKey, float ReturnVal, bool ReturnValue);
	void GetLastMissionDeactivatedUtcTime(class UClass* MissionType, double ReturnValue);
	void GetIntOptionIni(const class FString& Section, const class FString& OptionName, int32 ReturnValue);
	void GetFloatOptionIni(const class FString& Section, const class FString& OptionName, float ReturnValue);
	void GetBoolOptionIni(const class FString& Section, const class FString& OptionName, bool bDefaultValue, bool ReturnValue);
	void ForceRepopulateFoliageAtPoint(const struct FVector& AtPoint, float MaxRangeFromPoint, int32 MaxNumFoliages, class UClass* RepopulatedEmitter, const struct FVector& StructureDownTraceVector, const struct FVector& StructureUpTraceVector, bool bDontCheckForOverlaps, int32 TriggeredByTeamID, bool bCheckAreaAroundEachIndividualFoliage, float RadiusAroundEachIndivitualFoliageToCheck, bool bReallyForceIt);
	void ForceRepopulateAllHarvestElements(const struct FVector& AtPoint, float MaxRangeFromPoint);
	void ForceCreateTribe(const class FString& TribeName, int32 TeamOverride, int32 ReturnValue);
	void ForceAddPlayerToTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName, int32 ReturnValue);
	void DoMaintenanceRestartWarning();
	void DoMaintenanceRestart();
	void CountOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int32 DinoTeam, bool bExactClassMatch, bool bIgnoreClass, int32 ReturnValue);
	void ClearLastMissionDeactivatedTime(class UClass* MissionType);
	void CheckJoinInProgress(bool bIsFromLogin, class APlayerController* NewPlayer, bool ReturnValue);
	void ChatLogAppend(class AShooterPlayerController* SenderController, const struct FPrimalChatMessage& Message);
	void BPPreSpawnedDino(class APrimalDinoCharacter* TheDino);
	void BPIsSpawnpointPreferred(class APlayerStart* SpawnPoint, class AController* Player, bool ReturnValue);
	void BPIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player, bool ReturnValue);
	void AreTribesAllied(int32 TribeID1, int32 TribeID2, bool ReturnValue);
	void AllowTaming(int32 ForTeam, bool ReturnValue);
	void AllowDamage(class UWorld* ForWorld, int32 TargetingTeam1, int32 TargetingTeam2, bool bIgnoreDamageIfAllied, bool ReturnValue);
	void AdminExit(const class FString& Verify);
	void AddToTribeLog(int32 TribeID, const class FString& NewLog);
	void AddPlayerToNextTeamBatchPlayersAwaitingUpdatedCachedTeamTameList(class AShooterPlayerController* RequestingPlayer, bool ReturnValue);
	void AddPlayerToBeNotifiedWhenCachedTeamTameListIsUpdated(class AShooterPlayerController* RequestingPlayer);
};

// 0xB0 (0x3FD0 - 0x3F20)
// Class ShooterGame.CustomGameMode
class ACustomGameMode : public AShooterGameMode
{
public:
	bool                                         bFilterCharacterNames;                             // 0x3F20(0x1)(None)
	bool                                         bFilterTribeNames;                                 // 0x3F21(0x1)(None)
	bool                                         bFilterChat;                                       // 0x3F22(0x1)(None)
	uint8                                        Pad_1C7C[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                BadWordListURL;                                    // 0x3F28(0x10)(None)
	class FString                                BadWordWhiteListURL;                               // 0x3F38(0x10)(None)
	struct FAhoCorasickMatcher                   BadWordMatcher;                                    // 0x3F48(0x18)(None)
	struct FAhoCorasickMatcher                   BadWordWhitelistMatcher;                           // 0x3F60(0x18)(None)
	uint8                                        Pad_1C7D[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACustomGameMode* GetDefaultObj();

	void SaveIntToConfig(int32 IntValue, const class FString& KeyValue);
	void SaveFloatToConfig(float IntValue, const class FString& KeyValue);
	void SaveBoolToConfig(bool IntValue, const class FString& KeyValue);
	void OnUpdateTribeData(const struct FTribeData& NewTribeData, bool ReturnValue);
	void OnRemoveTribe(int32 TribeID, bool ReturnValue);
	void OnPlayerCanRestart(class APlayerController* Player, bool ReturnValue);
	void OnIsUsedSpawnPointStillSupported(class APlayerStart* SpawnPoint, class AController* Player, bool ReturnValue);
	void OnIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player, bool ReturnValue);
	void OnInitOptionEvent(const class FString& Options, bool ReturnValue);
	void OnInitGameState(bool ReturnValue);
	void OnInitGame(const class FString& MapName, const class FString& Options, const class FString& ErrorMessage, bool ReturnValue);
	void OnHandleLeavingMap(bool ReturnValue);
	void OnDoGameCommand(const class FString& TheCommand, const class FString& ReturnValue);
	void OnAllowRenameTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName, bool ReturnValue);
	void OnAllowNotifyRemotePlayerDeath(class AShooterCharacter* ForChar, bool ReturnValue);
	void OnAllowModifyStatusValue(class UPrimalCharacterStatusComponent* ForComp, enum class EPrimalCharacterStatusValue ValueType, float Amount, bool ReturnValue);
	void OnAllowClearTribe(class AShooterPlayerState* ForPlayerState, bool ReturnValue);
	void OnAllowAddXP(class UPrimalCharacterStatusComponent* ForComp, bool ReturnValue);
	void OnAllowAddToTribe(class AShooterPlayerState* ForPlayerState, const struct FTribeData& MyNewTribe, bool ReturnValue);
	void OnAdjustDamage(class AActor* Victim, float DefaultDamage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, float ReturnValue);
	void MakeTribeData(const class FString& TribeName, int32 OwnerPlayerDataId, int32 TribeID, const TArray<class FString>& MembersPlayerName, const TArray<int32>& MembersPlayerDataID, const TArray<int32>& TribeAdmins, bool bSetGovernment, const struct FTribeGovernment& TribeGovernment, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& MembersConfigs, const struct FTribeData& ReturnValue);
	void KickPlayersWithoutCharacter(const class FString& Reason);
	void KickPlayer(class APlayerController* NewPlayer);
	void IsInAllowedToCheatList(class APlayerController* NewPlayer, bool ReturnValue);
	void InitOptionFloatToINI(const class FString& Options, float FloatValue, const class FString& KeyValue);
	void GetValueFromINI(const class FString& KeyValue, float ReturnValue);
	void GetIntValueFromINI(const class FString& KeyValue, int32 ReturnValue);
	void GetIniFloatValue(const class FString& Section, const class FString& KeyValue, float ReturnValue);
	void GetFloatValueFromINI(const class FString& KeyValue, float ReturnValue);
	void GetBoolValueFromINI(const class FString& KeyValue, bool ReturnValue);
	void FilterBadWords(const class FString& String, bool bCheckWithoutSpecialChars, bool ReturnValue);
	void CleanUpSotfNotificationManager();
	void CheckForCommand(const class FString& CommandName, bool ReturnValue);
	void BreakTribeData(const struct FTribeData& Data, const class FString& TribeName, int32 OwnerPlayerDataId, int32 TribeID, const TArray<class FString>& MembersPlayerName, const TArray<int32>& MembersPlayerDataID, const TArray<int32>& TribeAdmins, bool bSetGovernment, const struct FTribeGovernment& TribeGovernment, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& MembersConfigs);
	void BlueprintRemoveTribe(int32 TribeID);
};

// 0x148 (0xF78 - 0xE30)
// Class ShooterGame.CustomGameState
class ACustomGameState : public AShooterGameState
{
public:
	class UClass*                                TribeFlagClass;                                    // 0xE30(0x8)(ZeroConstructor)
	TArray<class APrimalStructureTribeFlag*>     TribesFlags;                                       // 0xE38(0x10)(ZeroConstructor)
	TArray<struct FSOTFScorePlayerData>          PlayerScoreData;                                   // 0xE48(0x10)(ZeroConstructor)
	uint8                                        Pad_1DF2[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSOTFScoreTribeData>           TribeScoreData;                                    // 0xEA8(0x10)(None)
	uint8                                        Pad_1DF3[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableAllyRadarData;                              // 0xF08(0x1)(None)
	uint8                                        Pad_1DF4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AllyRadarUpdateFrequency;                          // 0xF0C(0x4)(None)
	uint8                                        Pad_1DF5[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ACustomGameState* GetDefaultObj();

	void SpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints, class APrimalBuff* ReturnValue);
	void SetTribeTexture(int32 TribeID, class UPaintingTexture* NewTexture);
	void SetScoreDataForTribe(int32 ForTargetingTeam, const struct FSOTFScoreTribeData& NewScoreData, bool bReplicateToClients);
	void SetScoreDataForPlayer(int32 LinkedID, const struct FSOTFScorePlayerData& NewScoreData, bool bReplicateToClients);
	void SetActionReportItem(const struct FActionReportItem& Data, const class FString& PlayerName, const class FString& TribeName, const class FString& TimeOfDeath, const class FString& LevelOfDeath, const class FString& DeathMessage);
	void RemoveTribeFlag(int32 TribeID);
	void ProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* ThePC, const struct FVector2D& ReturnValue);
	void OnSetHudEvent();
	void OnRep_TribeScoreData();
	void OnRep_PlayerScoreData();
	void OnOverrideDynamicMusic(class APrimalCharacter* ForCharacter, class USoundBase* ReturnValue);
	void OnNotifyPlayerDied(class AShooterCharacter* TheShooterChar, class AShooterPlayerController* PrevController, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void OnHasGameModeMatchStarted(bool ReturnValue);
	void OnHandleActorEvent(class AActor* ForActor, class FName NameParam, const struct FVector& VecParam);
	void OnForceOccludedFloatingHUD(class AActor* AnActor, class AShooterPlayerController* ForPC, bool ReturnValue);
	void OnExtraShooterCharacterTick(class AShooterCharacter* ForChar, float DeltaTime);
	void OnDrawingHUDNotifications(class AShooterHUD* HUD, bool ReturnValue);
	void OnDrawHUD(class AShooterHUD* HUD, bool ReturnValue);
	void OnDrawExtraPlayerFloatingHUD(class AShooterHUD* HUD, class AShooterCharacter* TheShooterChar, const struct FVector& AtLoc);
	void OnCheckGameStateIfCanRespawn(class APlayerController* ForPC, bool ReturnValue);
	void OnAllowTribeManager(class AShooterPlayerController* ForPC, bool ReturnValue);
	void OnAllowTribeManagement(bool ReturnValue);
	void OnAllowStartSupplyCrateSpawns(bool ReturnValue);
	void OnAllowShowPlayerHudUI(class APrimalCharacter* ForPawn, bool ReturnValue);
	void OnAllowRemoveItems(class UPrimalInventoryComponent* ForInv, class AShooterPlayerController* PC, class UPrimalItem* AnItemToTransfer, bool ReturnValue);
	void OnAllowPopUps(bool ReturnValue);
	void OnAllowOrbitCamera(class APrimalCharacter* ForCharacter, bool ReturnValue);
	void OnAllowFastTravel(class APrimalStructureBed* ForBed, class AShooterPlayerController* ForPC, bool ReturnValue);
	void OnAllowDaytimeTransitionSounds(bool ReturnValue);
	void OnAllowCreateSurvivor(bool ReturnValue);
	void MakePlayerDeathNotification(const class FString& PlayerDeathStringEnemy, const class FString& PlayerDeathStringAlly, const class FString& PlayerDeathStringYou, const class FString& DeathReason, const TArray<class FString>& DeadPlayerNames, bool bIsTribeDeath, const class FString& DeathTribeName, int32 TargetingTeamID, const class FString& LinkedPlayerID, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& PlayersData, const struct FPlayerDeathNotification& ReturnValue);
	void MakeBattleTribeData(const class FString& TribeName, int32 TribeID, const struct FBattleTribeData& ReturnValue);
	void MakeBattlePlayerData(const class FString& PlayerName, bool bConnected, bool bAlive, int32 TribeID, const class FString& PlayerID, const struct FBattlePlayerData& ReturnValue);
	void KickPlayer(class APlayerController* Controller, const class FString& Reason);
	void IsTribeID(int32 TeamID, bool ReturnValue);
	void IsAuthorityRole(bool ReturnValue);
	void HideUIScene(class UClass* SceneClass);
	void GetTribeTexture(int32 TribeID, class UTexture2D* ReturnValue);
	void GetTimeSeconds(double ReturnValue);
	void GetPlayerDatasForTribe(int32 TribeID, const TArray<struct FBattlePlayerData>& AllPlayerDatas, const TArray<struct FBattlePlayerData>& ReturnValue);
	void GetPawnName(class APawn* Pawn, const class FString& ReturnValue);
	void GetPawnKillerName(class APawn* Pawn, const class FString& ReturnValue);
	void GetFilteredAllyRadarTargets(const TArray<struct FAllyRadarDatas>& ReturnValue);
	void GetDeathNotificationText(class AShooterCharacter* TheShooterChar, class APawn* InstigatingPawn, const class FString& Killer, const class FString& KillerAndTribe, const class FString& TheNotificationStringYou, const class FString& TheNotificationStringAlly, const class FString& TheNotificationStringEnemy);
	void GetCustomActors(class FName SearchCustomTag, class ACustomActorList* ReturnValue);
	void GetColorForTargetingTeam(int32 ForTargetingTeam, const struct FColor& NameColor, const struct FColor& PlatformProfileNameColor);
	void GetAllShooterControllers(const TArray<class AShooterPlayerController*>& ReturnValue);
	void GetAllShooterCharactersOfTeam(int32 KillerTeam, const TArray<class AShooterCharacter*>& ReturnValue);
	void GetAllShooterCharacters(const TArray<class AShooterCharacter*>& ReturnValue);
	void GetAllDinoCharactersOfTeam(int32 KillerTeam, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void DrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
	void CreateScoreDataForTribe(const TArray<int32>& TargetingTeams);
	void CreateScoreDataForPlayers(const TArray<int32>& LinkedIDs);
	void CreateDeathNotification(class AShooterCharacter* TheShooterChar, class AShooterPlayerController* PrevController, class APawn* InstigatingPawn, int32 MaxNumberOfRespawns, const struct FPlayerDeathNotification& ReturnValue);
	void CreateDamageEvent(const struct FDamageEvent& ReturnValue);
	void CheckTimeSince(float Time, float Duration, bool ReturnValue);
	void BroadcastActorCustomEvent(class AActor* Actor, class FName EventCustomName, const class FString& EventCustomString, class AActor* InstigatorActor);
	void BreakTribeData(const struct FTribeData& InData, const class FString& TribeName, int32 OwnerPlayerDataId, int32 TribeID, const TArray<class FString>& MembersPlayerName, const TArray<int32>& MembersPlayerDataID, const TArray<int32>& TribeAdmins, bool bSetGovernment, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& MembersConfigs);
	void BreakPlayerDeathNotification(const struct FPlayerDeathNotification& Data, const class FString& PlayerDeathStringEnemy, const class FString& PlayerDeathStringAlly, const class FString& PlayerDeathStringYou, const class FString& DeathReason, const TArray<class FString>& DeadPlayerNames, bool bIsTribeDeath, const class FString& DeathTribeName, int32 TargetingTeamID, const class FString& LinkedPlayerID, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& PlayersData);
	void BreakBattleTribeData(const struct FBattleTribeData& InData, const class FString& TribeName, int32 TribeID);
	void BreakBattlePlayerData(const struct FBattlePlayerData& Data, const class FString& PlayerName, bool bConnected, bool bAlive, int32 TribeID, const class FString& PlayerID);
	void BreakActionReportItem(const struct FActionReportItem& Data, const class FString& PlayerName, const class FString& TribeName, const class FString& TimeOfDeath, const class FString& LevelOfDeath, const class FString& DeathMessage);
	void BPGetTribeFlagRef(int32 TribeID, bool CreateFlag, class APrimalStructureTribeFlag* ReturnValue);
	void BPGetScoreDataForTribe(int32 ForTargetingTeam, const struct FSOTFScoreTribeData& ReturnValue);
	void BPGetScoreDataForPlayer(int32 LinkedID, const struct FSOTFScorePlayerData& ReturnValue);
	void BPClientUpdateAllyRadar();
};

// 0x30 (0x538 - 0x508)
// Class ShooterGame.DamageVolumeBase
class ADamageVolumeBase : public AVolume
{
public:
	float                                        DamageAmount;                                      // 0x508(0x4)(None)
	float                                        DamageInterval;                                    // 0x50C(0x4)(None)
	class UClass*                                DamageType;                                        // 0x510(0x8)(ZeroConstructor)
	TArray<struct FDamageNegatingItem>           DamageNegatingItems;                               // 0x518(0x10)(ZeroConstructor)
	uint8                                        Pad_1E13[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADamageVolumeBase* GetDefaultObj();

	void OnEndOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* Actor);
};

// 0x8 (0x540 - 0x538)
// Class ShooterGame.DamageVolumeSwamp
class ADamageVolumeSwamp : public ADamageVolumeBase
{
public:
	uint8                                        Pad_1E15[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADamageVolumeSwamp* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class ShooterGame.DatabaseShared
class UDatabaseShared : public UObject
{
public:
	uint8                                        bInitialized : 1;                                  // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        Pad_1E19[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDatabaseShared* GetDefaultObj();

};

// 0x10 (0x78 - 0x68)
// Class ShooterGame.Database_LoginData
class UDatabase_LoginData : public UDatabaseShared
{
public:
	uint8                                        Pad_1E1A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDatabase_LoginData* GetDefaultObj();

};

// 0x0 (0x78 - 0x78)
// Class ShooterGame.Database_LoginData_Redis
class UDatabase_LoginData_Redis : public UDatabase_LoginData
{
public:

	static class UClass* StaticClass();
	static class UDatabase_LoginData_Redis* GetDefaultObj();

};

// 0x10 (0x78 - 0x68)
// Class ShooterGame.Database_PubSub_GeneralNotifications
class UDatabase_PubSub_GeneralNotifications : public UDatabaseShared
{
public:
	uint8                                        Pad_1E1C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDatabase_PubSub_GeneralNotifications* GetDefaultObj();

};

// 0x0 (0x78 - 0x78)
// Class ShooterGame.Database_PubSub_GeneralNotifications_Redis
class UDatabase_PubSub_GeneralNotifications_Redis : public UDatabase_PubSub_GeneralNotifications
{
public:

	static class UClass* StaticClass();
	static class UDatabase_PubSub_GeneralNotifications_Redis* GetDefaultObj();

};

// 0xF8 (0x9D0 - 0x8D8)
// Class ShooterGame.DataListEntryButton_CustomOverlay
class UDataListEntryButton_CustomOverlay : public UDataListEntryButton
{
public:
	uint8                                        Pad_1E20[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           CustomOverlayImage;                                // 0x8E0(0xD0)(ZeroConstructor)
	class UMaterialInterface*                    Material;                                          // 0x9B0(0x8)(ZeroConstructor)
	uint8                                        bCustomOverlayEnabled : 1;                         // Mask: 0x1, PropSize: 0x10x9B8(0x1)(None)
	uint8                                        BitPad_148 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E23[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             CustomOverlayScale;                                // 0x9C0(0x10)(None)

	static class UClass* StaticClass();
	static class UDataListEntryButton_CustomOverlay* GetDefaultObj();

};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.DataListEntryButton_DyeResources
class UDataListEntryButton_DyeResources : public UPrimalUI
{
public:
	uint8                                        Pad_1E25[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryButton_DyeResources* GetDefaultObj();

};

// 0xF8 (0x850 - 0x758)
// Class ShooterGame.DataListEntryButton_HostSession
class UDataListEntryButton_HostSession : public UBaseSelectableButtonWidget
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        bIsProcedural : 1;                                 // Mask: 0x2, PropSize: 0x10x758(0x1)(None)
	uint8                                        bIsActivated : 1;                                  // Mask: 0x4, PropSize: 0x10x758(0x1)(None)
	uint8                                        bIsMapMod : 1;                                     // Mask: 0x8, PropSize: 0x10x758(0x1)(None)
	uint8                                        bIsActiveModListingEntry : 1;                      // Mask: 0x10, PropSize: 0x10x758(0x1)(None)
	uint8                                        BitPad_149 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E29[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayName;                                       // 0x760(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x770(0x1)(None)
	uint8                                        Pad_1E2A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ShortMapName;                                      // 0x778(0x10)(None)
	class FString                                LongMapName;                                       // 0x788(0x10)(None)
	class FString                                ModName;                                           // 0x798(0x10)(None)
	class FString                                ModPath;                                           // 0x7A8(0x10)(None)
	uint64                                       ModItemId;                                         // 0x7B8(0x8)(None)
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x7C0(0x1)(None)
	uint8                                        Pad_1E2B[0x8F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryButton_HostSession* GetDefaultObj();

	void GetHasServerData(bool ReturnValue);
	void GetHasSaveGame(bool ReturnValue);
};

// 0x2E8 (0xA40 - 0x758)
// Class ShooterGame.DataListEntryButton_ListSession
class UDataListEntryButton_ListSession : public UBaseSelectableButtonWidget
{
public:
	struct FCustomButtonWidgetStyle              LastJoinedExtendedStyle;                           // 0x758(0x48)(None)
	struct FCustomButtonWidgetStyle              StandardExtendedStyle;                             // 0x7A0(0x48)(None)
	class FString                                UniqueID;                                          // 0x7E8(0x10)(None)
	class FString                                GameName;                                          // 0x7F8(0x10)(None)
	class FString                                BuildId;                                           // 0x808(0x10)(None)
	class FString                                OwnerName;                                         // 0x818(0x10)(None)
	class FString                                MapName;                                           // 0x828(0x10)(None)
	class FString                                DayTimeStr;                                        // 0x838(0x10)(None)
	uint32                                       NumPlayers;                                        // 0x848(0x4)(None)
	uint32                                       MaxNumPlayers;                                     // 0x84C(0x4)(None)
	uint64                                       ModId;                                             // 0x850(0x8)(None)
	uint64                                       TotalConversionId;                                 // 0x858(0x8)(None)
	uint64                                       Ping;                                              // 0x860(0x8)(None)
	class FString                                ModLabelString;                                    // 0x868(0x10)(None)
	bool                                         bHasMods;                                          // 0x878(0x1)(None)
	bool                                         bHasPassword;                                      // 0x879(0x1)(None)
	bool                                         bIsFavourite;                                      // 0x87A(0x1)(None)
	bool                                         bIsPVEServer;                                      // 0x87B(0x1)(None)
	uint8                                        Pad_1E2E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            PasswordTexture;                                   // 0x880(0x8)(ZeroConstructor)
	bool                                         bIsOfficialServer;                                 // 0x888(0x1)(None)
	bool                                         bUsingBattleEye;                                   // 0x889(0x1)(None)
	bool                                         bAllowDownloadCharacters;                          // 0x88A(0x1)(None)
	bool                                         bAllowDownloadItems;                               // 0x88B(0x1)(None)
	uint8                                        Pad_1E2F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            BattleEyeTexture;                                  // 0x890(0x8)(ZeroConstructor)
	class UTexture2D*                            OfficialServerTexture;                             // 0x898(0x8)(ZeroConstructor)
	class UTexture2D*                            PVPServerTexture;                                  // 0x8A0(0x8)(ZeroConstructor)
	class UTexture2D*                            PVEServerTexture;                                  // 0x8A8(0x8)(ZeroConstructor)
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x8B0(0x10)(None)
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x8C0(0x1)(None)
	uint8                                        Pad_1E31[0x17F];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryButton_ListSession* GetDefaultObj();

};

// 0x70 (0x7C8 - 0x758)
// Class ShooterGame.DataListEntryButton_MainMenu
class UDataListEntryButton_MainMenu : public UBaseSelectableButtonWidget
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        bIsProcedural : 1;                                 // Mask: 0x2, PropSize: 0x10x758(0x1)(None)
	uint8                                        BitPad_14A : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E34[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayName;                                       // 0x760(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x770(0x1)(None)
	uint8                                        Pad_1E35[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MapName;                                           // 0x778(0x10)(None)
	class FString                                ModName;                                           // 0x788(0x10)(None)
	class FString                                ModPath;                                           // 0x798(0x10)(None)
	uint64                                       ModItemId;                                         // 0x7A8(0x8)(None)
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x7B0(0x1)(None)
	uint8                                        BitPad_14B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E36[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCustomButtonWidget*                   ButtonObject;                                      // 0x7B8(0x8)(ZeroConstructor)
	class UTextBlock*                            EntryNameLabel;                                    // 0x7C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDataListEntryButton_MainMenu* GetDefaultObj();

};

// 0xA8 (0x980 - 0x8D8)
// Class ShooterGame.DataListEntryButton_PrimalFolder
class UDataListEntryButton_PrimalFolder : public UDataListEntryButton
{
public:
	struct FVector2D                             ItemNameSpacing;                                   // 0x8D8(0x10)(None)
	uint8                                        bIsItemSlotButton : 1;                             // Mask: 0x1, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        bSimpleIconOnly : 1;                               // Mask: 0x2, PropSize: 0x10x8E8(0x1)(None)
	uint8                                        BitPad_14C : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E3B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TextScaleMultiplier;                               // 0x8EC(0x4)(None)
	bool                                         bUseNewRenderingPath;                              // 0x8F0(0x1)(None)
	uint8                                        Pad_1E3C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TextLabelName;                                     // 0x8F4(0x8)(None)
	uint8                                        Pad_1E3D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPrimalFolderIcons                    IconsNormal;                                       // 0x900(0x20)(ZeroConstructor)
	struct FPrimalFolderIcons                    IconsSelected;                                     // 0x920(0x20)(ZeroConstructor)
	class FString                                FolderName;                                        // 0x940(0x10)(None)
	float                                        FolderNameTextClipOffset;                          // 0x950(0x4)(None)
	float                                        FolderNameTextFontScale;                           // 0x954(0x4)(None)
	class UTexture2D*                            FolderIcon;                                        // 0x958(0x8)(ZeroConstructor)
	enum class EFolderWidgetType                 FolderType;                                        // 0x960(0x1)(None)
	uint8                                        Pad_1E3F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                FontColor;                                         // 0x964(0x4)(None)
	uint8                                        FolderLevel;                                       // 0x968(0x1)(None)
	uint8                                        Pad_1E40[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataListPanel*                        ParentPanel;                                       // 0x970(0x8)(ZeroConstructor)
	uint8                                        Pad_1E41[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryButton_PrimalFolder* GetDefaultObj();

};

// 0x8E8 (0x11C0 - 0x8D8)
// Class ShooterGame.DataListEntryButton_PrimalItem
class UDataListEntryButton_PrimalItem : public UDataListEntryButton
{
public:
	struct FVector2D                             DesiredSize;                                       // 0x8D8(0x10)(None)
	struct FColor                                MiscInfoStringColor;                               // 0x8E8(0x4)(None)
	struct FColor                                ItemNameColor;                                     // 0x8EC(0x4)(None)
	struct FColor                                ItemCategoryColor;                                 // 0x8F0(0x4)(None)
	uint8                                        Pad_1E48[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FButtonStyle                          WidgetStyleWhenBroken;                             // 0x900(0x3F0)(ZeroConstructor)
	struct FDataListEntryButtonBorderColors      NormalBorderColors;                                // 0xCF0(0x10)(None)
	struct FDataListEntryButtonBorderColors      BrokenBorderColors;                                // 0xD00(0x10)(None)
	float                                        BarOffsetY;                                        // 0xD10(0x4)(None)
	float                                        DurabilityBarBorderThickness;                      // 0xD14(0x4)(None)
	float                                        DurabilityBarThickness;                            // 0xD18(0x4)(None)
	struct FColor                                DurabilityBarFgColor;                              // 0xD1C(0x4)(None)
	struct FColor                                DurabilityBarBgColor;                              // 0xD20(0x4)(None)
	struct FColor                                SpoilingBarFgColor;                                // 0xD24(0x4)(None)
	struct FColor                                SpoilingBarBgColor;                                // 0xD28(0x4)(None)
	uint8                                        Pad_1E49[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           WidgetSelectedStyleBrush;                          // 0xD30(0xD0)(ZeroConstructor)
	struct FVector2D                             WidgetSelectedStyleBrushSize;                      // 0xE00(0x10)(None)
	struct FVector2D                             WidgetSelectedStyleBrushOffset;                    // 0xE10(0x10)(None)
	struct FSlateBrush                           WidgetActiveStyleBrush;                            // 0xE20(0xD0)(ZeroConstructor)
	struct FSlateBrush                           WidgetBrokenOverlayStyleBrush;                     // 0xEF0(0xD0)(ZeroConstructor)
	struct FColor                                UnselectedTintColor;                               // 0xFC0(0x4)(None)
	struct FColor                                TintEngramRequirementsMet;                         // 0xFC4(0x4)(None)
	struct FColor                                TintEngramRequirementsUnmet;                       // 0xFC8(0x4)(None)
	struct FColor                                TintBlueprintRequirementsMet;                      // 0xFCC(0x4)(None)
	struct FColor                                TintBlueprintRequirementsUnmet;                    // 0xFD0(0x4)(None)
	struct FColor                                TintTekBlueprintRequirementsMet;                   // 0xFD4(0x4)(None)
	struct FColor                                TintTekBlueprintRequirementsUnmet;                 // 0xFD8(0x4)(None)
	struct FColor                                TintCompatibleWithDraggedItem;                     // 0xFDC(0x4)(None)
	struct FColor                                CraftRepairIconTint;                               // 0xFE0(0x4)(None)
	struct FMargin                               BorderSizePx;                                      // 0xFE4(0x10)(None)
	uint8                                        Pad_1E50[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            EngramBg;                                          // 0xFF8(0x8)(ZeroConstructor)
	class UTexture2D*                            BlueprintBg;                                       // 0x1000(0x8)(ZeroConstructor)
	class UTexture2D*                            TekgramBg;                                         // 0x1008(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemQualityOverlay;                                // 0x1010(0x8)(ZeroConstructor)
	class UTexture2D*                            SlottedIcon;                                       // 0x1018(0x8)(ZeroConstructor)
	class UTexture2D*                            ActiveSlotIcon;                                    // 0x1020(0x8)(ZeroConstructor)
	class UTexture2D*                            CraftingIcon;                                      // 0x1028(0x8)(ZeroConstructor)
	class UTexture2D*                            RepairingIcon;                                     // 0x1030(0x8)(ZeroConstructor)
	class UTexture2D*                            BrokenIcon;                                        // 0x1038(0x8)(ZeroConstructor)
	struct FVector2D                             QuantityTxtPosition;                               // 0x1040(0x10)(None)
	struct FVector2D                             ArmorDamageTxtPosition;                            // 0x1050(0x10)(None)
	struct FVector2D                             ArmorDamageIconPosition;                           // 0x1060(0x10)(None)
	float                                        ArmorDamageIconScale;                              // 0x1070(0x4)(None)
	uint8                                        Pad_1E55[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             AmmoTxtPosition;                                   // 0x1078(0x10)(None)
	struct FVector2D                             WeightTxtPosition;                                 // 0x1088(0x10)(None)
	struct FVector2D                             NameTxtPositionPercent;                            // 0x1098(0x10)(None)
	struct FVector2D                             NameTxtBoxSizePercent;                             // 0x10A8(0x10)(None)
	struct FVector2D                             CategoryTxtPosition;                               // 0x10B8(0x10)(None)
	struct FVector2D                             ItemNameSpacing;                                   // 0x10C8(0x10)(None)
	int32                                        UseItemCraftQueueIndex;                            // 0x10D8(0x4)(None)
	uint8                                        bUseRemoteCraftQueue : 1;                          // Mask: 0x1, PropSize: 0x10x10DC(0x1)(None)
	uint8                                        bIsItemSlotButton : 1;                             // Mask: 0x2, PropSize: 0x10x10DC(0x1)(None)
	uint8                                        BitPad_14D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E57[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TextScaleMultiplier;                               // 0x10E0(0x4)(None)
	float                                        TextArmorDamageSize;                               // 0x10E4(0x4)(None)
	float                                        TextQuantitySize;                                  // 0x10E8(0x4)(None)
	float                                        TextAmmoSize;                                      // 0x10EC(0x4)(None)
	float                                        TextWeightSize;                                    // 0x10F0(0x4)(None)
	float                                        TextNameSize;                                      // 0x10F4(0x4)(None)
	float                                        TextCategorySize;                                  // 0x10F8(0x4)(None)
	bool                                         EnableTextShadow;                                  // 0x10FC(0x1)(None)
	bool                                         EnableTextGlow;                                    // 0x10FD(0x1)(None)
	uint8                                        Pad_1E58[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          TextGlowColor;                                     // 0x1100(0x10)(None)
	struct FVector2D                             TextGlowInnerRadius;                               // 0x1110(0x10)(None)
	struct FVector2D                             TextGlowOuterRadius;                               // 0x1120(0x10)(None)
	class UFont*                                 DetailTextFont;                                    // 0x1130(0x8)(ZeroConstructor)
	float                                        ItemIconScale;                                     // 0x1138(0x4)(None)
	uint8                                        Pad_1E5A[0x74];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsUsingExtraCanvasBar;                            // 0x11B0(0x1)(None)
	uint8                                        Pad_1E5B[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryButton_PrimalItem* GetDefaultObj();

	void HandleOnContextMenuIsOpenChanged(bool bIsOpen);
	void GetShowExtraCanvasBar(bool IsVisible, float Percent, const struct FLinearColor& BarColor);
};

// 0xB8 (0x810 - 0x758)
// Class ShooterGame.DataListEntryEngramList
class UDataListEntryEngramList : public UPrimalUI
{
public:
	class UClass*                                EntryWidgetTemplate;                               // 0x758(0x8)(ZeroConstructor)
	class FName                                  DataPanelName;                                     // 0x760(0x8)(None)
	class FName                                  LevelLabelName;                                    // 0x768(0x8)(None)
	class FName                                  LevelEnabledEffectName;                            // 0x770(0x8)(None)
	class FName                                  ElementIconName;                                   // 0x778(0x8)(None)
	class FName                                  EngramRowStartName;                                // 0x780(0x8)(None)
	class FName                                  EngramRowMiddleName;                               // 0x788(0x8)(None)
	class FName                                  EngramRowEndName;                                  // 0x790(0x8)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x798(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x7A8(0x10)(None)
	int32                                        WidgetLimit;                                       // 0x7B8(0x4)(None)
	uint8                                        Pad_1E69[0x54];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryEngramList* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.DataListEntryInterface
class IDataListEntryInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDataListEntryInterface* GetDefaultObj();

};

// 0xC8 (0x3F8 - 0x330)
// Class ShooterGame.DataListEntryWidget
class UDataListEntryWidget : public UPrimalUserWidget
{
public:
	class FName                                  DataListButtonName;                                // 0x330(0x8)(None)
	int32                                        ExistingButtonExplicitIndexType;                   // 0x338(0x4)(None)
	class FName                                  TraditionalButtonName;                             // 0x33C(0x8)(None)
	class FName                                  TraditionalLabelName;                              // 0x344(0x8)(None)
	uint8                                        Pad_1E77[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ButtonBackgroundOverride;                          // 0x350(0x8)(ZeroConstructor)
	class FString                                DisplayStringOverride;                             // 0x358(0x10)(None)
	int32                                        PrimalItemButton_UseItemCraftQueueIndex;           // 0x368(0x4)(None)
	uint8                                        PrimalItemButton_bUseRemoteCraftQueue : 1;         // Mask: 0x1, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonShowDisplayStringWhenHasItem : 1;   // Mask: 0x2, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonShowDisplayStringWhenHasItemValue : 1; // Mask: 0x4, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringCenterX : 1;           // Mask: 0x8, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringCenterXValue : 1;      // Mask: 0x10, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringCenterY : 1;           // Mask: 0x20, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringCenterYValue : 1;      // Mask: 0x40, PropSize: 0x10x36C(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringOffset : 1;            // Mask: 0x80, PropSize: 0x10x36C(0x1)(None)
	uint8                                        Pad_1E79[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             OverrideButtonDisplayStringOffsetValue;            // 0x370(0x10)(None)
	uint8                                        bOverrideButtonDisplayStringScale : 1;             // Mask: 0x1, PropSize: 0x10x380(0x1)(None)
	uint8                                        bOverrideButtonDisplayStringFontSize : 1;          // Mask: 0x2, PropSize: 0x10x380(0x1)(None)
	uint8                                        bUseEngramToolTips : 1;                            // Mask: 0x4, PropSize: 0x10x380(0x1)(None)
	uint8                                        BitPad_151 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E7A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideButtonDisplayStringFontSizeValue;          // 0x384(0x4)(None)
	struct FVector2D                             OverrideButtonDisplayStringScaleValue;             // 0x388(0x10)(None)
	class UTexture2D*                            OverrideButtonSelectedIcon;                        // 0x398(0x8)(ZeroConstructor)
	bool                                         bBoundToDragging;                                  // 0x3A0(0x1)(None)
	bool                                         CanBeHighlightedWhenEmpty;                         // 0x3A1(0x1)(None)
	uint8                                        Pad_1E7B[0x56];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListEntryWidget* GetDefaultObj();

	void OnDraggedClickedEventObject(class UWidget* DraggeddWidget);
	void InitializeMeDefaults();
	void GetShowExtraCanvasBar(bool IsVisible, float Percent, const struct FLinearColor& BarColor);
	void GetDataListButton(class UDataListEntryButton* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.DataListInterface
class IDataListInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDataListInterface* GetDefaultObj();

};

// 0x208 (0xFA0 - 0xD98)
// Class ShooterGame.DataListPanel
class UDataListPanel : public UScrollBox
{
public:
	class UClass*                                EntryWidgetTemplate;                               // 0xD98(0x8)(ZeroConstructor)
	class UClass*                                EntryListTemplate;                                 // 0xDA0(0x8)(ZeroConstructor)
	class UClass*                                NullEntryWidgetTemplate;                           // 0xDA8(0x8)(ZeroConstructor)
	class UClass*                                PaddingEntryWidgetTemplate;                        // 0xDB0(0x8)(ZeroConstructor)
	class UClass*                                FolderWidgetTemplate;                              // 0xDB8(0x8)(ZeroConstructor)
	class UClass*                                GenericWidgetTemplate;                             // 0xDC0(0x8)(ZeroConstructor)
	TArray<class FString>                        CustomFolders;                                     // 0xDC8(0x10)(None)
	class UTexture2D*                            FolderIcon;                                        // 0xDD8(0x8)(ZeroConstructor)
	struct FColor                                FolderColor;                                       // 0xDE0(0x4)(None)
	uint8                                        Pad_1E7E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            BackFolderIcon;                                    // 0xDE8(0x8)(ZeroConstructor)
	struct FColor                                BackFolderColor;                                   // 0xDF0(0x4)(None)
	uint8                                        Pad_1E7F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            CustomFolderIcon;                                  // 0xDF8(0x8)(ZeroConstructor)
	struct FColor                                CustomFolderColor;                                 // 0xE00(0x4)(None)
	uint8                                        bSupportsCustomFolders : 1;                        // Mask: 0x1, PropSize: 0x10xE04(0x1)(None)
	uint8                                        bAllowMultiLevelCustomFolders : 1;                 // Mask: 0x2, PropSize: 0x10xE04(0x1)(None)
	uint8                                        bUsePaddingTemplate : 1;                           // Mask: 0x4, PropSize: 0x10xE04(0x1)(None)
	uint8                                        bUseForEngramList : 1;                             // Mask: 0x8, PropSize: 0x10xE04(0x1)(None)
	uint8                                        bForceRefreshDataListWidgetAdjacents : 1;          // Mask: 0x10, PropSize: 0x10xE04(0x1)(None)
	uint8                                        BitPad_152 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E80[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bBringHoveredItemsToTop;                           // 0xE08(0x1)(None)
	bool                                         bEnableSupportCustomFolders;                       // 0xE09(0x1)(None)
	bool                                         bForceDragging;                                    // 0xE0A(0x1)(None)
	bool                                         bForceEntryDisplayString;                          // 0xE0B(0x1)(None)
	bool                                         bForceEntryClickWhenNoData;                        // 0xE0C(0x1)(None)
	bool                                         bUseExistingButtons;                               // 0xE0D(0x1)(None)
	bool                                         bUseExistingButtonExplicitEntryIndexTypeMapping;   // 0xE0E(0x1)(None)
	bool                                         bSelectEntriesOnHighlight;                         // 0xE0F(0x1)(None)
	int32                                        MinimalItemCount;                                  // 0xE10(0x4)(None)
	bool                                         bSupplyAdjacentsToChildren;                        // 0xE14(0x1)(None)
	bool                                         bCanBeSelectedWhenEmpty;                           // 0xE15(0x1)(None)
	uint8                                        Pad_1E81[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        FilledRowsBeforeEnablingScrolling;                 // 0xE18(0x4)(None)
	uint8                                        Pad_1E82[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDataListEntryWidget*>          EntryWidgets;                                      // 0xE20(0x10)(ZeroConstructor)
	uint8                                        Pad_1E83[0xC0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CustomFolderBlueprint;                             // 0xEF0(0x8)(ZeroConstructor)
	bool                                         bOnlySkins;                                        // 0xEF8(0x1)(None)
	bool                                         bIsSkinSelectorMode;                               // 0xEF9(0x1)(None)
	bool                                         bIncludeSkins;                                     // 0xEFA(0x1)(None)
	bool                                         bCreateFolders;                                    // 0xEFB(0x1)(None)
	int8                                         FolderLevel;                                       // 0xEFC(0x1)(None)
	uint8                                        Pad_1E84[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CustomFolderFilter;                                // 0xF00(0x10)(None)
	int8                                         SortType;                                          // 0xF10(0x1)(None)
	uint8                                        Pad_1E85[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NameFilter;                                        // 0xF18(0x10)(None)
	uint8                                        Pad_1E86[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MyDataListType;                                    // 0xF50(0x4)(None)
	uint8                                        Pad_1E87[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDataListEntryWidget*>          CurrentCustomFolders;                              // 0xF58(0x10)(ZeroConstructor)
	class UDataListEntryWidget*                  BackWidget;                                        // 0xF68(0x8)(ZeroConstructor)
	uint8                                        Pad_1E88[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListPanel* GetDefaultObj();

	void PreemptiveRequestLoadAllEntries(bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.DataListProviderInterface
class IDataListProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDataListProviderInterface* GetDefaultObj();

};

// 0x90 (0x3C0 - 0x330)
// Class ShooterGame.DataListValueGeneric
class UDataListValueGeneric : public UPrimalUserWidget
{
public:
	FMulticastInlineDelegateProperty_            OnValueChanged;                                    // 0x330(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnTextCommitted;                                   // 0x340(0x10)(ZeroConstructor)
	class FText                                  OptionSelectedText;                                // 0x350(0x18)(None)
	TArray<class FText>                          OptionsValues;                                     // 0x368(0x10)(None)
	bool                                         bShowOverrideValue;                                // 0x378(0x1)(None)
	uint8                                        Pad_1EBF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FText                                  OverridedOptionSelectedText;                       // 0x380(0x18)(None)
	struct FLinearColor                          Color;                                             // 0x398(0x10)(None)
	struct FVector2D                             ColorPickerValue;                                  // 0x3A8(0x10)(None)
	uint8                                        Pad_1EC0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDataListValueGeneric* GetDefaultObj();

	void UpdateColorPicker(const struct FVector2D& ColorPickerSliderValue);
	void SetParameterValue(const class FString& Value, bool bPreventCallParent);
	void SetOverridedParameterValue(class FText Value, bool bPreventRecall);
	void SetOverridedFloatValue(float Value);
	void SetIsSelectedBP(bool Selected);
	void SetFloatValue(float Value);
	void SetBoolValue(bool Value);
	void OnOverridedParameterValue(const class FString& Value, bool bPreventCallParent);
	void IsExpanded(bool ReturnValue);
	void HasSlider(class USlider* ReturnValue);
	void HasExpandedSlider(class USlider* ReturnValue);
	void HandleOnValueChanged(float InValue);
	void HandleOnOverrideValueChanged(class FText Text, enum class ETextCommit CommitMethod);
	void GetOverridedFloatValue(float ReturnValue);
	void GetIsSelectedBP(bool ReturnValue);
	void GetFloatValue(float ReturnValue);
	void GetBoolValue(bool ReturnValue);
	void GetAllValueWidgets(const TArray<class UWidget*>& ReturnValue);
	void CycleDataValues(class UWidget* CurrentHighlighted, int32 Dir, class UWidget* ReturnValue);
	void CloseSlider();
};

// 0x30 (0x4E8 - 0x4B8)
// Class ShooterGame.DayCycleAmbientSound
class ADayCycleAmbientSound : public AActor
{
public:
	class UAudioComponent*                       AudioComponentDay;                                 // 0x4B8(0x8)(ZeroConstructor)
	class UAudioComponent*                       AudioComponentNight;                               // 0x4C0(0x8)(ZeroConstructor)
	float                                        DayTimeSoundMorningFadeInStart;                    // 0x4C8(0x4)(None)
	float                                        DayTimeSoundMorningFadeInEnd;                      // 0x4CC(0x4)(None)
	float                                        DayTimeSoundEveningFadeOutStart;                   // 0x4D0(0x4)(None)
	float                                        DayTimeSoundEveningFadeOutEnd;                     // 0x4D4(0x4)(None)
	uint8                                        bIsAlwaysAudible : 1;                              // Mask: 0x1, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bAllowConcurrentWithPostProcessSound : 1;          // Mask: 0x2, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bOnlyAudibleWhenRaining : 1;                       // Mask: 0x4, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bBlueprintAudibleWhenRainingEnabled : 1;           // Mask: 0x8, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        Pad_1EC3[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADayCycleAmbientSound* GetDefaultObj();

};

// 0x180 (0x638 - 0x4B8)
// Class ShooterGame.DayCycleManager
class ADayCycleManager : public AInfo
{
public:
	uint8                                        Pad_1F11[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurrentTime;                                       // 0x4C0(0x4)(None)
	float                                        TrueSkyTime;                                       // 0x4C4(0x4)(None)
	uint8                                        Pad_1F12[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TheDayNumberToMakeSerilizationWork;                // 0x4CC(0x4)(None)
	float                                        GlobalTrueSkyBrightness;                           // 0x4D0(0x4)(None)
	uint8                                        Pad_1F13[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               GlobalTrueSkyColorMultiplier;                      // 0x4D8(0x18)(None)
	float                                        GlobalIBLCaptureBrightness;                        // 0x4F0(0x4)(None)
	float                                        GlobalBakeAndStreamIBLMultiplier;                  // 0x4F4(0x4)(None)
	float                                        GlobalGroundColorMultiplier;                       // 0x4F8(0x4)(None)
	float                                        GlobalSkyColorMultiplier;                          // 0x4FC(0x4)(None)
	float                                        SM4SkyLightMult;                                   // 0x500(0x4)(None)
	float                                        SM4DirLightMult;                                   // 0x504(0x4)(None)
	struct FVector                               AtmosphericFogMultiplier;                          // 0x508(0x18)(None)
	float                                        SkyIBLIntensityMultiplier;                         // 0x520(0x4)(None)
	float                                        BaseTemperature;                                   // 0x524(0x4)(None)
	float                                        BaseWind;                                          // 0x528(0x4)(None)
	float                                        RainAmount;                                        // 0x52C(0x4)(None)
	float                                        SnowAmount;                                        // 0x530(0x4)(None)
	float                                        SkyWeatherSequenceBlend_Normal;                    // 0x534(0x4)(None)
	float                                        SkyWeatherSequenceBlend_Hot;                       // 0x538(0x4)(None)
	float                                        SkyWeatherSequenceBlend_Cold;                      // 0x53C(0x4)(None)
	float                                        SkyWeatherSequenceBlend_Rainy;                     // 0x540(0x4)(None)
	float                                        SkyWeatherSequenceBlend_Fog;                       // 0x544(0x4)(None)
	bool                                         bIsRaining;                                        // 0x548(0x1)(None)
	bool                                         bLastReplicatedIsRaining;                          // 0x549(0x1)(None)
	bool                                         bLastReplicatedIsSnowing;                          // 0x54A(0x1)(None)
	uint8                                        Pad_1F14[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            Sound_TransitionToMorning;                         // 0x550(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransitionToMidDay;                          // 0x558(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransitionToNight;                           // 0x560(0x8)(ZeroConstructor)
	float                                        Sound_TransitionToMorningTime;                     // 0x568(0x4)(None)
	float                                        Sound_TransitionToNightTime;                       // 0x56C(0x4)(None)
	float                                        Sound_TransitionToMidDayTime;                      // 0x570(0x4)(None)
	float                                        DayTimeStart;                                      // 0x574(0x4)(None)
	float                                        DayTimeEnd;                                        // 0x578(0x4)(None)
	float                                        DayTimeLengthMultiplier;                           // 0x57C(0x4)(None)
	TArray<class ALevelSequenceActor*>           NewLightingSequence;                               // 0x580(0x10)(ZeroConstructor)
	int32                                        ActiveLightingSequence;                            // 0x590(0x4)(None)
	uint8                                        Pad_1F16[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCheckForStructureActivation;                      // 0x59C(0x1)(None)
	bool                                         bUsesWind;                                         // 0x59D(0x1)(None)
	bool                                         bCheckForWeaponFiring;                             // 0x59E(0x1)(None)
	bool                                         bUseBPOverrideItemAutoDecreaseDurability;          // 0x59F(0x1)(None)
	bool                                         bHideSupplyCrates;                                 // 0x5A0(0x1)(None)
	uint8                                        Pad_1F17[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        PreventBuffClassesInDayCycleLevel;                 // 0x5A8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnStartDaytime;                                    // 0x5B8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnStartNighttime;                                  // 0x5C8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnDayChange;                                       // 0x5D8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnHazardChange;                                    // 0x5E8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        GenesisTradableOptions;                            // 0x5F8(0x10)(ZeroConstructor)
	class UClass*                                HexagonVFXActorClass;                              // 0x608(0x8)(ZeroConstructor)
	uint8                                        Pad_1F18[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        GivePlayersBuffsOnSpawn;                           // 0x618(0x10)(ZeroConstructor)
	TArray<struct FSoftObjectPath>               GivePlayersBuffAssetsOnSpawn;                      // 0x628(0x10)(None)

	static class UClass* StaticClass();
	static class ADayCycleManager* GetDefaultObj();

	void ShooterCharacterSpawned(class AShooterCharacter* TheShooterCharacter);
	void ShooterCharacterPossessed(class AShooterCharacter* TheShooterCharacter);
	void SetTimeOfDay(int32 Hours, int32 Minutes, int32 Seconds);
	void IsRainingAtLocation(const struct FVector& Location, bool ReturnValue);
	void IsDaytime(bool ReturnValue);
	void GetWindAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter, float ReturnValue);
	void GetWeatherModifiedAmbientSoundMultiplier(class ADayCycleAmbientSound* ForDayCycleAmbientSound, float ReturnValue);
	void GetWaterLineStartZ(const struct FVector& AtLocation, float ReturnValue);
	void GetTemperatureAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter, float ReturnValue);
	void GetPreventBuffClassesInDayCycleLevel(const TArray<class UClass*>& ReturnValue);
	void GetDeepWaterStartZ(const struct FVector& AtLocation, float ReturnValue);
	void GetDayNumberString(bool bIncludeDayString, const class FString& ReturnValue);
	void BPPostDrawSpawnMap(class AShooterPlayerController* ForPC, class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize);
	void BPOverrideItemAutoDecreaseDurability(class UPrimalItem* AnItem, bool ReturnValue);
	void BPOverrideGameStateMatineePlayRate(class AActor* ForMatinee, float InPlayRate, float ReturnValue);
	void BPOnDCMCheat(class FName CheatName, float Value);
	void BPGetAdditionalMapMarkers(class AShooterPlayerController* ForPC, const TArray<struct FPrimalMapMarkerEntryData>& ReturnValue);
	void BPAllowSpawningCrate(class UClass* CrateType, bool ReturnValue);
	void BPAdjustTemperature(float TemperatureIn, class ABiomeZoneVolume* BiomeZoneVolume, const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter, float ReturnValue);
	void AttemptWeaponFiring(class AShooterWeapon* TheWeapon);
	void AllowWeaponFiring(class AActor* TheWeaponOrStructure, bool ReturnValue);
	void AllowStructureActivation(class APrimalStructure* TheStructure, bool ReturnValue);
	void AdjustStructureItemInsulation(class AShooterCharacter* ForCharacter, class UPrimalItem* ForPrimalItem, enum class EPrimalItemStat TypeInsulation, float InsulationValue, float ReturnValue);
};

// 0xB0 (0xD8 - 0x28)
// Class ShooterGame.DeferredMovementContext
class UDeferredMovementContext : public UObject
{
public:
	uint8                                        Pad_1F1D[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class UPrimalCharacterMovement>> DeferredComponents;                                // 0x98(0x10)(None)
	struct FDeferredMovementTick                 TickFunction;                                      // 0xA8(0x30)(None)

	static class UClass* StaticClass();
	static class UDeferredMovementContext* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class ShooterGame.DestructibleActor
class ADestructibleActor : public ADestructibleBaseActor
{
public:
	class USceneComponent*                       ActorRootComponent;                                // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ADestructibleActor* GetDefaultObj();

	void SetFadingStaticMesh(class UStaticMesh* TheMesh);
	void SetFadingSkeletalMesh(class USkeletalMesh* TheMesh);
	void GetFadingMeshComponent(class UMeshComponent* ReturnValue);
};

// 0x18 (0x4D8 - 0x4C0)
// Class ShooterGame.DestroyedMeshActor
class ADestroyedMeshActor : public ADestructibleActor
{
public:
	float                                        TimeToSetNoCollision;                              // 0x4C0(0x4)(None)
	class FName                                  NoCollisionProfileName;                            // 0x4C4(0x8)(None)
	class FName                                  DefaultCollisionProfileName;                       // 0x4CC(0x8)(None)
	uint8                                        Pad_1F1E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADestroyedMeshActor* GetDefaultObj();

	void SetNoCollisionProfile();
};

// 0x20 (0x778 - 0x758)
// Class ShooterGame.DinoAncestryEntryWidget
class UDinoAncestryEntryWidget : public UPrimalUI
{
public:
	uint8                                        Pad_1F1F[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDinoAncestryEntryWidget* GetDefaultObj();

};

// 0x198 (0x8F0 - 0x758)
// Class ShooterGame.DinoListButtonWidget
class UDinoListButtonWidget : public UBaseSelectableButtonWidget
{
public:
	class FName                                  ContextMenuAnchorName;                             // 0x758(0x8)(None)
	class FName                                  DinoStatusLabelName;                               // 0x760(0x8)(None)
	class FName                                  ExpirationLabelName;                               // 0x768(0x8)(None)
	class FName                                  ExpirationLabelParentName;                         // 0x770(0x8)(None)
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x778(0x1)(None)
	uint8                                        BitPad_15D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F21[0x167];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UMenuAnchor*                           ContextMenuAnchor;                                 // 0x8E0(0x8)(ZeroConstructor)
	uint8                                        Pad_1F23[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDinoListButtonWidget* GetDefaultObj();

	void SetDinoExpiration(const class FString& Expiration);
	void SetButtonString(const class FString& Status);
	void OnGetContextMenuContent(class UWidget* ReturnValue);
	void InitializeWithClick(bool bCanExpire);
	void ForceSetSelected(bool bSelected);
};

// 0x88 (0x3B8 - 0x330)
// Class ShooterGame.ToolTipWidget
class UToolTipWidget : public UPrimalUserWidget
{
public:
	class FString                                ToolTipLabelName;                                  // 0x330(0x10)(None)
	int32                                        WidgetWidth;                                       // 0x340(0x4)(None)
	int32                                        WidgetHeight;                                      // 0x344(0x4)(None)
	uint8                                        bDoOverlayFade : 1;                                // Mask: 0x1, PropSize: 0x10x348(0x1)(None)
	uint8                                        BitPad_15E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F24[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseBPInitToolTip;                                 // 0x360(0x1)(None)
	bool                                         bUseBPUpdateToolTip;                               // 0x361(0x1)(None)
	uint8                                        Pad_1F25[0x56];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToolTipWidget* GetDefaultObj();

	void BPUpdateToolTip(float DeltaSeconds);
	void BPInitToolTip(class AShooterPlayerController* HUDOwner, const class FString& ToolTipString, class UObject* DataListEntry);
};

// 0x0 (0x3B8 - 0x3B8)
// Class ShooterGame.TooltipSmartLayoutWidget
class UTooltipSmartLayoutWidget : public UToolTipWidget
{
public:

	static class UClass* StaticClass();
	static class UTooltipSmartLayoutWidget* GetDefaultObj();

};

// 0x1C8 (0x580 - 0x3B8)
// Class ShooterGame.DinoListItemTooltip
class UDinoListItemTooltip : public UTooltipSmartLayoutWidget
{
public:
	class FName                                  FnameTitleBar_NameLabel;                           // 0x3B8(0x8)(None)
	class FName                                  FnameTitleBar_LevelLabel;                          // 0x3C0(0x8)(None)
	class FName                                  FnameInfo_ImageName;                               // 0x3C8(0x8)(None)
	TArray<class FName>                          FnameInfo_LabelNames;                              // 0x3D0(0x10)(None)
	TArray<class FName>                          FnameInfo_GroupNames;                              // 0x3E0(0x10)(None)
	float                                        Info_GroupFreq;                                    // 0x3F0(0x4)(None)
	uint8                                        Pad_1F27[0x17C];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            EnabledDinoTexture;                                // 0x570(0x8)(ZeroConstructor)
	class UMaterialInterface*                    EnabledDinoMaterial;                               // 0x578(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDinoListItemTooltip* GetDefaultObj();

};

// 0x120 (0x150 - 0x30)
// Class ShooterGame.DinoSetupDataAsset
class UDinoSetupDataAsset : public UDataAsset
{
public:
	struct FDinoSetup                            DinoSetup;                                         // 0x30(0x120)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UDinoSetupDataAsset* GetDefaultObj();

};

// 0x8 (0x30 - 0x28)
// Class ShooterGame.Object_WithWorldContext
class UObject_WithWorldContext : public UObject
{
public:
	uint8                                        Pad_1F28[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UObject_WithWorldContext* GetDefaultObj();

	void SetWorldContext(class UObject* NewWorldContext);
	void GetWorldContextObject(class UObject* ReturnValue);
};

// 0x20 (0x50 - 0x30)
// Class ShooterGame.DinoTrackFilterOption
class UDinoTrackFilterOption : public UObject_WithWorldContext
{
public:
	class FString                                FilterDisplayName;                                 // 0x30(0x10)(None)
	class FString                                OverwrittenAdditionalSearchInputDisplayName;       // 0x40(0x10)(None)

	static class UClass* StaticClass();
	static class UDinoTrackFilterOption* GetDefaultObj();

	void GetSearchActorListType(int32 ReturnValue);
	void GetOverwrittenAdditionalSearchInputDisplayName(const class FString& ReturnValue);
	void GetFilterDisplayName(const class FString& ReturnValue);
	void GetActorsToSearchThrough(const TArray<class AActor*>& ReturnValue);
};

// 0x0 (0x4C8 - 0x4C8)
// Class ShooterGame.DirectionalAmbientLight
class ADirectionalAmbientLight : public ALight
{
public:

	static class UClass* StaticClass();
	static class ADirectionalAmbientLight* GetDefaultObj();

};

// 0x0 (0x4C8 - 0x4C8)
// Class ShooterGame.DirectionalInjectedLight
class ADirectionalInjectedLight : public ALight
{
public:

	static class UClass* StaticClass();
	static class ADirectionalInjectedLight* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.DraggableObjectInterface
class IDraggableObjectInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IDraggableObjectInterface* GetDefaultObj();

};

// 0x20 (0x7B0 - 0x790)
// Class ShooterGame.DraggedDecoratorWidget
class UDraggedDecoratorWidget : public UCustomCanvasWidget
{
public:
	class UMaterialInterface*                    DraggedMaterial;                                   // 0x790(0x8)(ZeroConstructor)
	class UTexture2D*                            DraggedTexture;                                    // 0x798(0x8)(ZeroConstructor)
	uint8                                        Pad_1F2A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDraggedDecoratorWidget* GetDefaultObj();

};

// 0x3D8 (0x890 - 0x4B8)
// Class ShooterGame.DroppedItem
class ADroppedItem : public AActor
{
public:
	uint8                                        Pad_1F2E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemNetInfo                          MyItemInfo;                                        // 0x4C8(0x1C8)(ZeroConstructor)
	class UPrimalItem*                           MyItem;                                            // 0x690(0x8)(ZeroConstructor)
	uint8                                        bApplyImpulseOnSpawn : 1;                          // Mask: 0x1, PropSize: 0x10x698(0x1)(None)
	uint8                                        bDestroyOnStasis : 1;                              // Mask: 0x2, PropSize: 0x10x698(0x1)(None)
	uint8                                        bUseCollisionTrace : 1;                            // Mask: 0x4, PropSize: 0x10x698(0x1)(None)
	uint8                                        bPreventPickup : 1;                                // Mask: 0x8, PropSize: 0x10x698(0x1)(None)
	uint8                                        bDestroyOutOfWater : 1;                            // Mask: 0x10, PropSize: 0x10x698(0x1)(None)
	uint8                                        bUseClientDroppedItemPhysics : 1;                  // Mask: 0x20, PropSize: 0x10x698(0x1)(None)
	uint8                                        bIsUnderwater : 1;                                 // Mask: 0x40, PropSize: 0x10x698(0x1)(None)
	uint8                                        bNotifyPreviousOwnerOfPickup : 1;                  // Mask: 0x80, PropSize: 0x10x698(0x1)(None)
	uint8                                        bAssignedToTribePickupOnly : 1;                    // Mask: 0x1, PropSize: 0x10x699(0x1)(None)
	uint8                                        BitPad_160 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F30[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AssignedToTribeID;                                 // 0x69C(0x4)(None)
	uint8                                        bLowQuality : 1;                                   // Mask: 0x1, PropSize: 0x10x6A0(0x1)(None)
	uint8                                        BitPad_161 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F31[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpulseMagnitude;                                  // 0x6A4(0x4)(None)
	bool                                         bUseImpulseOffsetRanges;                           // 0x6A8(0x1)(None)
	uint8                                        Pad_1F32[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ImpulseOffsetRanges;                               // 0x6B0(0x18)(None)
	float                                        ForceSleepTimer;                                   // 0x6C8(0x4)(None)
	uint8                                        Pad_1F33[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DroppedItemScale;                                  // 0x6D0(0x18)(None)
	struct FVector2D                             OverlayTooltipPadding;                             // 0x6E8(0x10)(None)
	struct FVector2D                             OverlayTooltipScale;                               // 0x6F8(0x10)(None)
	struct FVector                               CenterLocationOffset;                              // 0x708(0x18)(None)
	class UClass*                                HUDOverlayToolTipWidget;                           // 0x720(0x8)(ZeroConstructor)
	class UClass*                                HUDOverlayToolTipWidgetOnlyAction;                 // 0x728(0x8)(ZeroConstructor)
	class FString                                DroppedByName;                                     // 0x730(0x10)(None)
	uint64                                       DroppedByPlayerID;                                 // 0x740(0x8)(None)
	double                                       DroppedItemDestructionTime;                        // 0x748(0x8)(None)
	struct FVector                               DroppedItemInterpTarget;                           // 0x750(0x18)(None)
	bool                                         bClientDisablePhysics;                             // 0x768(0x1)(None)
	uint8                                        Pad_1F34[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           NetDroppedMeshOverride;                            // 0x770(0x8)(ZeroConstructor)
	class UMaterialInterface*                    NetDroppedMeshMaterialOverride;                    // 0x778(0x8)(ZeroConstructor)
	struct FVector                               NetDroppedMeshOverrideScale3D;                     // 0x780(0x18)(None)
	struct FVector                               DroppedItemVelocity;                               // 0x798(0x18)(None)
	float                                        DroppedItemAccelerationGravity;                    // 0x7B0(0x4)(None)
	float                                        DroppedItemMaxFallSpeed;                           // 0x7B4(0x4)(None)
	uint8                                        Pad_1F35[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpawnDropSoundTime;                                // 0x7D0(0x8)(None)
	uint8                                        Pad_1F36[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsPreventDroppedItemPhysics;                      // 0x7F0(0x1)(None)
	uint8                                        Pad_1F37[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 DroppedByActor;                                    // 0x7F4(0x8)(ZeroConstructor)
	uint8                                        Pad_1F38[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalCharacter*                      BasedTransformCharacter;                           // 0x800(0x8)(ZeroConstructor)
	struct FVector                               BasedTransformLocation;                            // 0x808(0x18)(None)
	struct FVector                               BasedTransformVelocity;                            // 0x820(0x18)(None)
	class UStaticMesh*                           UsedMeshAsset;                                     // 0x838(0x8)(ZeroConstructor)
	bool                                         bUseBPDroppedItemImpacted;                         // 0x840(0x1)(None)
	bool                                         bUseBPSetupDroppedItemVisuals;                     // 0x841(0x1)(None)
	bool                                         bPreventDropAttachment;                            // 0x842(0x1)(None)
	uint8                                        Pad_1F39[0x2D];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FreezePhysicsAfterTime;                            // 0x870(0x4)(None)
	float                                        PickupAllRange;                                    // 0x874(0x4)(None)
	uint8                                        Pad_1F3A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bBPOnItemPickedUp : 1;                             // Mask: 0x1, PropSize: 0x10x880(0x1)(None)
	uint8                                        BitPad_162 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F3B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            PickupIcon;                                        // 0x888(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ADroppedItem* GetDefaultObj();

	void ResetLifeSpan(float NewLifeSpan);
	void ReplicateMovement();
	void KeepPhysicsActiveForDuration(float Duration);
	void IsAllowedToPickupItem(class APlayerController* PC, bool ReturnValue);
	void FreezePhysics();
	void ForceSleep();
	void BPSetupDroppedItemVisuals();
	void BPOnItemPickedUp(class APlayerController* ByPC, class UPrimalItem* InventoryItem);
	void BPDroppedItemImpacted(const struct FHitResult& ImpactHitInfo);
};

// 0x30 (0x8C0 - 0x890)
// Class ShooterGame.DroppedItemEgg
class ADroppedItemEgg : public ADroppedItem
{
public:
	class UClass*                                SpawnDinoEmitter;                                  // 0x890(0x8)(ZeroConstructor)
	float                                        IndoorsHypoThermalInsulation;                      // 0x898(0x4)(None)
	float                                        IndoorsHyperThermalInsulation;                     // 0x89C(0x4)(None)
	float                                        EggThermalInsulationTemperatureMultiplier;         // 0x8A0(0x4)(None)
	uint8                                        bIsEggTooHot : 1;                                  // Mask: 0x1, PropSize: 0x10x8A4(0x1)(None)
	uint8                                        bIsEggTooCold : 1;                                 // Mask: 0x2, PropSize: 0x10x8A4(0x1)(None)
	uint8                                        BitPad_163 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F3D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ABiomeZoneVolume*                      MyBiomeZone;                                       // 0x8A8(0x8)(ZeroConstructor)
	uint8                                        Pad_1F3E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADroppedItemEgg* GetDefaultObj();

	void NetSpawnDinoEmitter();
};

// 0x0 (0x890 - 0x890)
// Class ShooterGame.DroppedItemLowQuality
class ADroppedItemLowQuality : public ADroppedItem
{
public:

	static class UClass* StaticClass();
	static class ADroppedItemLowQuality* GetDefaultObj();

};

// 0x10 (0x8A0 - 0x890)
// Class ShooterGame.DroppedItemMission
class ADroppedItemMission : public ADroppedItem
{
public:
	uint8                                        bPickupOnlyAllowMissionPlayers : 1;                // Mask: 0x1, PropSize: 0x10x890(0x1)(None)
	uint8                                        bShowHUDMissionInfo : 1;                           // Mask: 0x2, PropSize: 0x10x890(0x1)(None)
	uint8                                        BitPad_164 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F41[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionType*                          OwnerMission;                                      // 0x898(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ADroppedItemMission* GetDefaultObj();

	void GetOwnerMission(class AMissionType* ReturnValue);
};

// 0x20 (0x8B0 - 0x890)
// Class ShooterGame.DroppedItemTorch
class ADroppedItemTorch : public ADroppedItemLowQuality
{
public:
	float                                        LifeTimeMeter;                                     // 0x890(0x4)(None)
	float                                        PassiveDurabilityCostPerInterval;                  // 0x894(0x4)(None)
	float                                        PassiveDurabilityCostInterval;                     // 0x898(0x4)(None)
	uint8                                        Pad_1F49[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastDurabilityConsumptionTime;                     // 0x8A0(0x8)(None)
	bool                                         FireIsOn;                                          // 0x8A8(0x1)(None)
	uint8                                        Pad_1F4A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ADroppedItemTorch* GetDefaultObj();

	void OnRep_FireIsOn();
	void GetFlameColorIndex(int32 ReturnValue);
};

// 0x30 (0x360 - 0x330)
// Class ShooterGame.DyeItemSelector
class UDyeItemSelector : public UPrimalUserWidget
{
public:
	uint8                                        Pad_1F4D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DyeDataListName;                                   // 0x340(0x8)(None)
	class FName                                  DyeSearchBoxName;                                  // 0x348(0x8)(None)
	uint8                                        Pad_1F4E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAllowPaintingWithoutResources;                    // 0x358(0x1)(None)
	uint8                                        Pad_1F4F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDyeItemSelector* GetDefaultObj();

	void UpdateDyeSelector();
	void InitDyeSelector(class UPrimalUI* PrimalUI);
	void HandleOnSearchTextChanged(class FText Text);
	void GetDataListPanel(class UDataListPanel* ReturnValue);
};

// 0x48 (0x7A0 - 0x758)
// Class ShooterGame.DyeRegionButtonWidget
class UDyeRegionButtonWidget : public UPrimalUI
{
public:
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        BitPad_165 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F51[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          DefaultBackgroundColor;                            // 0x75C(0x10)(None)
	struct FLinearColor                          DefaultPreviewColor;                               // 0x76C(0x10)(None)
	uint8                                        Pad_1F52[0x24];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UDyeRegionButtonWidget* GetDefaultObj();

};

// 0x70 (0x548 - 0x4D8)
// Class ShooterGame.FadingDestructibleActor
class AFadingDestructibleActor : public ADestroyedMeshActor
{
public:
	uint8                                        bFadeOut : 1;                                      // Mask: 0x1, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bRotationalFall : 1;                               // Mask: 0x2, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bDontUseRotationalFall : 1;                        // Mask: 0x4, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        bUseBPSetupForFalling : 1;                         // Mask: 0x8, PropSize: 0x10x4D8(0x1)(None)
	uint8                                        BitPad_166 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F55[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Fall_RotAccel;                                     // 0x4DC(0x4)(None)
	float                                        Fall_RotAccelRate;                                 // 0x4E0(0x4)(None)
	uint8                                        Pad_1F57[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Fall_Direction_Right;                              // 0x4E8(0x18)(None)
	float                                        Fall_Spin_Rand;                                    // 0x500(0x4)(None)
	float                                        Fall_SpinVelocity;                                 // 0x504(0x4)(None)
	float                                        Fall_SpinAccel;                                    // 0x508(0x4)(None)
	float                                        Fall_SpinAccelRate;                                // 0x50C(0x4)(None)
	float                                        Fall_RotVelocity;                                  // 0x510(0x4)(None)
	float                                        FadeOutDelayTime;                                  // 0x514(0x4)(None)
	float                                        FadeOutTime;                                       // 0x518(0x4)(None)
	bool                                         bIsDoingDrop;                                      // 0x51C(0x1)(None)
	uint8                                        Pad_1F58[0x23];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x540(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AFadingDestructibleActor* GetDefaultObj();

	void SetupFade();
	void BPSetupForFalling(class UStaticMesh* InMesh, const TArray<class UMaterialInterface*>& OverrideDestructionMaterials, const struct FVector& HitDirection, class USkeletalMesh* InSKMesh, bool Rotate, float Damage, float TotalHealth);
};

// 0x0 (0x68 - 0x68)
// Class ShooterGame.FallDamageType
class UFallDamageType : public UPrimalDamageType
{
public:

	static class UClass* StaticClass();
	static class UFallDamageType* GetDefaultObj();

};

// 0x0 (0x80 - 0x80)
// Class ShooterGame.FixSourceTreeCommandlet
class UFixSourceTreeCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class UFixSourceTreeCommandlet* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.FixupSplineActor
class AFixupSplineActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class AFixupSplineActor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.FlockingBehavior
class UFlockingBehavior : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UFlockingBehavior* GetDefaultObj();

	void UpdateFlockComponentLocations_ParticleBoids(const TArray<struct FBoid>& BoidArray, const TArray<class UParticleSystemComponent*>& ComponentArray);
	void UpdateFlockComponentLocations(const TArray<struct FBoid>& BoidArray, const TArray<class UStaticMeshComponent*>& ComponentArray);
	void UpdateBoidComponentLocation(const struct FBoid& ThisBoid, class USceneComponent* Comp);
	void TickPersistentFlockData(class UObject* WorldContextObject, const struct FFlockPersistentData& InOutFlockData, const TArray<struct FBoid>& BoidArray, float DeltaTime, int32 MaxNumTracesPerSecond, bool bDrawDebug);
	void SetAvoidanceAreaTransform(const struct FAvoidanceArea& InOutAvoidanceArea, const struct FTransform& NewTransform);
	void SetAvoidanceAreaArrayTransform(const TArray<struct FAvoidanceArea>& InOutAvoidanceAreas, const struct FTransform& NewTransform);
	void MakeIndexArray(int32 StartIndex, int32 NumIndices, const TArray<int32>& OutIndexArray);
	void IsPointInsideAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& WorldLocation, bool ReturnValue);
	void IsPointInsideAnyAvoidanceArea(const TArray<struct FAvoidanceArea>& Areas, const struct FVector& WorldLocation, bool ReturnValue);
	void InterpVectorArrayToSphere(const TArray<struct FVector>& InOutVectorArray, const struct FVector& Origin, float Radius, int32 NumRows, enum class ESimpleCurve LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpVectorArrayToRandom(const TArray<struct FVector>& InOutVectorArray, const struct FVector& Origin, float MinRadius, float MaxRadius, int32 RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpVectorArrayToGrid(const TArray<struct FVector>& InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float HorizSize, float VertSize, int32 NumRows, int32 NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpVectorArrayToCircle(const TArray<struct FVector>& InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpVectorArray(const TArray<struct FVector>& InOutVectorArray, const TArray<struct FVector>& RelativeTargetLocations, const struct FVector& Origin, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpBoidArrayToSphere(const TArray<struct FBoid>& InOutBoidArray, const struct FTransform& WorldTransform, float Radius, int32 NumRows, enum class ESimpleCurve LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpBoidArrayToRandom(const TArray<struct FBoid>& InOutBoidArray, const struct FTransform& WorldTransform, float MinRadius, float MaxRadius, int32 RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpBoidArrayToGrid(const TArray<struct FBoid>& InOutBoidArray, const struct FTransform& WorldTransform, const struct FRotator& Rotation, float HorizSize, float VertSize, int32 NumRows, int32 NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpBoidArrayToCircle(const TArray<struct FBoid>& InOutBoidArray, const struct FTransform& WorldTransform, const struct FRotator& CircleRotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void InterpBoidArray(const TArray<struct FBoid>& InOutBoidArray, const TArray<struct FBoid>& RelativeTargetLocations, const struct FTransform& WorldTransform, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
	void GetFlockRadius(const TArray<struct FBoid>& BoidArray, const struct FVector& FlockCentroid, bool bIgnoreLeaders, float ReturnValue);
	void GetFlockMembersOfType(const TArray<struct FBoid>& BoidArray, enum class EBoidType BoidType, const TArray<int32>& OutIndices);
	void GetFlockCentroid(const TArray<struct FBoid>& BoidArray, bool bIgnoreLeaders, const struct FVector& ReturnValue);
	void GetClosestSurfacePointOnAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& Loc, const struct FVector& ReturnValue);
	void GetAvoidanceDirection(const struct FAvoidanceArea& Area, const struct FVector& CurrentLoc, const struct FVector& CurrentDir, const struct FVector& ReturnValue);
	void GetAvoidanceAreaWorldLocation(const struct FAvoidanceArea& Area, const struct FVector& ReturnValue);
	void FlockTickSphereFormation(const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, float Radius, int32 NumRows, enum class ESimpleCurve LatitudeDistribution, float HelixSpeed);
	void FlockTickLeaders(const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, float DeltaTime, const struct FTransform& ParentTransform, float LeaderInterpSpeed, float LeaderAreaWidth);
	void FlockTickGridFormation(const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, const struct FRotator& GridRotation, float GridHorizSize, float GridVertSize, int32 GridNumRows, int32 GridNumCols);
	void FlockTickFollowersAndFreeAgents(const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, float DeltaTime, const struct FBoidBehavior& Behavior);
	void FlockTickCircleFormation(const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, const struct FRotator& CircleRotation, float CircleRadius, float MinInterpDistance);
	void FlockSetMaxSpeedAndForce(const TArray<struct FBoid>& InOutBoidArray, bool bUseBoidIndexWhitelist, const TArray<int32>& BoidIndexWhitelist, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange);
	void FlockCreate(const TArray<struct FBoid>& NewBoids, const struct FTransform& WorldTransform, int32 NumFlockBoids, int32 NumLeaderBoids, float InitialSpawnRadius, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange, const struct FVector2D& TurnRateRange);
	void DrawDebugAvoidanceArea(class UObject* WorldContextObject, const struct FAvoidanceArea& Area, float DrawDuration);
	void BoidTick(int32 BoidIndex, const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, float DeltaTime, const struct FBoidBehavior& Behavior);
	void BoidStopTargeting(int32 BoidIndex, const TArray<struct FBoid>& InOutBoidArray);
	void BoidSetTarget(int32 BoidIndex, const TArray<struct FBoid>& InOutBoidArray, const struct FVector& TargetWorldLocation);
	void BoidSetAlive(int32 BoidIndex, const TArray<struct FBoid>& InOutBoidArray, bool bIsAlive);
	void BoidMoveTo(int32 BoidIndex, const TArray<struct FBoid>& InOutBoidArray, const struct FFlockPersistentData& InOutFlockData, const struct FBoidBehavior& Behavior, float DeltaTime, const struct FVector& NewWorldLocation, float TargetDistanceThreshold, bool bUseIterp, float InterpSpeed);
	void AddAvoidanceAreaToFlockData(const struct FFlockPersistentData& InOutFlockData, const struct FAvoidanceArea& Area);
};

// 0xA8 (0xD0 - 0x28)
// Class ShooterGame.FogOfWar
class UFogOfWar : public UObject
{
public:
	class FString                                MapName;                                           // 0x28(0x10)(None)
	class UTexture2D*                            Texture;                                           // 0x38(0x8)(ZeroConstructor)
	uint8                                        bVisible : 1;                                      // Mask: 0x1, PropSize: 0x10x40(0x1)(None)
	uint8                                        BitPad_168 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FC2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpolationSpeed;                                // 0x44(0x4)(None)
	int32                                        SizeX;                                             // 0x48(0x4)(None)
	int32                                        SizeY;                                             // 0x4C(0x4)(None)
	float                                        LatitudeOrigin;                                    // 0x50(0x4)(None)
	float                                        LatitudeScale;                                     // 0x54(0x4)(None)
	float                                        LongitudeOrigin;                                   // 0x58(0x4)(None)
	float                                        LongitudeScale;                                    // 0x5C(0x4)(None)
	uint8                                        Pad_1FC3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            brushTexture;                                      // 0x68(0x8)(None)
	TArray<uint8>                                VisibilityBuffer;                                  // 0x70(0x10)(None)
	TArray<uint8>                                BrushTextureData;                                  // 0x80(0x10)(None)
	uint8                                        Pad_1FC4[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UFogOfWar* GetDefaultObj();

	void UpdateTexture();
	void Update(float DeltaTime, int32 X, int32 Y);
};

// 0x38 (0x368 - 0x330)
// Class ShooterGame.GamepadButtonLegendWidget
class UGamepadButtonLegendWidget : public UPrimalUserWidget
{
public:
	class FText                                  ButtonDescription;                                 // 0x330(0x18)(None)
	class UTexture2D*                            ButtonIcon;                                        // 0x348(0x8)(ZeroConstructor)
	class FName                                  ButtonIconImageName;                               // 0x350(0x8)(None)
	uint8                                        Pad_1FC5[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UGamepadButtonLegendWidget* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class ShooterGame.GenericDataListEntry
class UGenericDataListEntry : public UObject
{
public:
	uint8                                        Pad_1FC6[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Description;                                       // 0x50(0x10)(None)
	int32                                        CustomData;                                        // 0x60(0x4)(None)
	uint8                                        Pad_1FC7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CustomString;                                      // 0x68(0x10)(None)
	class UTexture2D*                            EntryIcon;                                         // 0x78(0x8)(ZeroConstructor)
	class UMaterialInterface*                    EntryMaterial;                                     // 0x80(0x8)(None)
	bool                                         bIsEnabled;                                        // 0x88(0x1)(None)
	uint8                                        Pad_1FC8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ExplicitEntryIndexType;                            // 0x8C(0x4)(None)

	static class UClass* StaticClass();
	static class UGenericDataListEntry* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class ShooterGame.GlobalBoneModifiers
class UGlobalBoneModifiers : public UObject
{
public:
	class FString                                Description;                                       // 0x28(0x10)(None)
	TArray<struct FBoneModifierNamed>            BoneModifiers;                                     // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UGlobalBoneModifiers* GetDefaultObj();

};

// 0x30 (0x500 - 0x4D0)
// Class ShooterGame.HazardTrigger
class AHazardTrigger : public ABaseBoxTrigger
{
public:
	struct FVector                               Bounds;                                            // 0x4D0(0x18)(None)
	bool                                         bIsActive;                                         // 0x4E8(0x1)(None)
	uint8                                        Pad_1FCB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastActivationTime;                                // 0x4F0(0x8)(None)
	bool                                         bConformToTerrain;                                 // 0x4F8(0x1)(None)
	uint8                                        Pad_1FCC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AHazardTrigger* GetDefaultObj();

	void OnDeactivated();
	void OnCharacterExit(class APrimalCharacter* Character);
	void OnCharacterEnter(class APrimalCharacter* Character);
	void OnActivated();
	void FindFloor(const struct FVector& TestLocation, const struct FFloorSlopeData& FloorSlope, float DepthOverride, bool UseActorNormal, bool ReturnValue);
	void Deactivate();
	void ClientActivation(bool bActivate);
	void CanActivate(bool ReturnValue);
	void Activate();
};

// 0xE8 (0x5E8 - 0x500)
// Class ShooterGame.HazardTrigger_Slide
class AHazardTrigger_Slide : public AHazardTrigger
{
public:
	class UAudioComponent*                       SoundToPlay;                                       // 0x500(0x8)(ZeroConstructor)
	TArray<class USplineComponent*>              Splines;                                           // 0x508(0x10)(ZeroConstructor)
	TArray<class UParticleSystem*>               SlideFX;                                           // 0x518(0x10)(ZeroConstructor)
	TArray<class UClass*>                        FinalEmitter;                                      // 0x528(0x10)(ZeroConstructor)
	TArray<class UClass*>                        WarningEmitter;                                    // 0x538(0x10)(ZeroConstructor)
	TArray<class UClass*>                        ImpactEmitter;                                     // 0x548(0x10)(ZeroConstructor)
	class USoundBase*                            SlideSound;                                        // 0x558(0x8)(ZeroConstructor)
	int32                                        StructureDamage;                                   // 0x560(0x4)(None)
	uint8                                        Pad_1FCD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                StructureDamageType;                               // 0x568(0x8)(ZeroConstructor)
	float                                        SplineSeparation;                                  // 0x570(0x4)(None)
	float                                        MinTimeBetweenActivations;                         // 0x574(0x4)(None)
	float                                        SlideSpeed;                                        // 0x578(0x4)(None)
	float                                        WaveWidth;                                         // 0x57C(0x4)(None)
	float                                        Impulse;                                           // 0x580(0x4)(None)
	float                                        MinWarningInterval;                                // 0x584(0x4)(None)
	float                                        MaxWarningInterval;                                // 0x588(0x4)(None)
	float                                        ActivationChance;                                  // 0x58C(0x4)(None)
	float                                        ActivationIncrement;                               // 0x590(0x4)(None)
	float                                        MinProjectileInterval;                             // 0x594(0x4)(None)
	float                                        MaxProjectileInterval;                             // 0x598(0x4)(None)
	float                                        ImpulseVelocityLimit;                              // 0x59C(0x4)(None)
	class UClass*                                ProjectileClass;                                   // 0x5A0(0x8)(ZeroConstructor)
	float                                        WarningTimer;                                      // 0x5A8(0x4)(None)
	float                                        CurrentActivationChance;                           // 0x5AC(0x4)(None)
	float                                        ProjectileTimer;                                   // 0x5B0(0x4)(None)
	uint8                                        Pad_1FCE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSlideData>                    SlideComponents;                                   // 0x5B8(0x10)(ZeroConstructor)
	TArray<struct FVector>                       SlidePositions;                                    // 0x5C8(0x10)(None)
	uint8                                        Pad_1FCF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AHazardTrigger_Slide* GetDefaultObj();

	void SpawnWarningFX();
	void SpawnProjectile(const struct FVector& Location, const struct FVector& Heading);
	void RebuildSplines();
};

// 0x48 (0x70 - 0x28)
// Class ShooterGame.HexagonTradableOption
class UHexagonTradableOption : public UObject
{
public:
	class UClass*                                ItemClass;                                         // 0x28(0x8)(None)
	class FString                                OverrideName;                                      // 0x30(0x10)(None)
	int32                                        Quantity;                                          // 0x40(0x4)(None)
	int32                                        ItemCost;                                          // 0x44(0x4)(None)
	uint8                                        bOverrideTradeAction : 1;                          // Mask: 0x1, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPAllowedToBePurchased : 1;                    // Mask: 0x2, PropSize: 0x10x48(0x1)(None)
	uint8                                        bUseBPGetItemCost : 1;                             // Mask: 0x4, PropSize: 0x10x48(0x1)(None)
	uint8                                        bIsEngramTradeOption : 1;                          // Mask: 0x8, PropSize: 0x10x48(0x1)(None)
	uint8                                        BitPad_169 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FD7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OverrideDescription;                               // 0x50(0x10)(None)
	int32                                        OverwrittenRecievedItemCount;                      // 0x60(0x4)(None)
	int32                                        MaxItemPurchaseTimes;                              // 0x64(0x4)(None)
	uint8                                        Pad_1FDE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHexagonTradableOption* GetDefaultObj();

	void GetItemCost(class AShooterPlayerController* PlayerController, int32 ReturnValue);
	void BPOverrideTradeAction(class AShooterPlayerController* PlayerController, bool ReturnValue);
	void BPGetItemCost(class AShooterPlayerController* PlayerController, int32 ReturnValue);
	void BPAllowedToBePurchased(class AShooterPlayerController* PlayerController, bool ReturnValue);
	void AllowedToBePurchased(class AShooterPlayerController* PlayerController, bool ReturnValue);
};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.HexagonVFXActor
class AHexagonVFXActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class AHexagonVFXActor* GetDefaultObj();

	void SetVolume(float NewVolume);
	void HoverThenAttract();
	void BeginMovingDirectlyToActor();
};

// 0x258 (0x710 - 0x4B8)
// Class ShooterGame.HibernationManager
class AHibernationManager : public AActor
{
public:
	uint8                                        Pad_1FF6[0x258];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AHibernationManager* GetDefaultObj();

};

// 0x58 (0x510 - 0x4B8)
// Class ShooterGame.HordeCrateManager
class AHordeCrateManager : public AActor
{
public:
	bool                                         bIsEnabled;                                        // 0x4B8(0x1)(None)
	bool                                         bUseBPForceStartHorde;                             // 0x4B9(0x1)(None)
	uint8                                        Pad_200C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDelayBeforeInitialEvent;                        // 0x4BC(0x4)(None)
	float                                        MaxDelayBeforeInitialEvent;                        // 0x4C0(0x4)(None)
	float                                        MinEventCheckInterval;                             // 0x4C4(0x4)(None)
	float                                        MaxEventCheckInterval;                             // 0x4C8(0x4)(None)
	float                                        MinDistanceFromOtherEvent;                         // 0x4CC(0x4)(None)
	TArray<struct FHordeCrateDifficultyLevel>    CrateDifficultyLevels;                             // 0x4D0(0x10)(ZeroConstructor)
	TArray<struct FHordeCrateDifficultyLevel>    ElementNodeDifficultyLevels;                       // 0x4E0(0x10)(ZeroConstructor)
	TArray<class AActor*>                        ActiveSpawnZones;                                  // 0x4F0(0x10)(ZeroConstructor)
	TArray<struct FHordeCrateEvent>              ActiveEvents;                                      // 0x500(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AHordeCrateManager* GetDefaultObj();

	void ForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int32 DifficultyIndex);
	void BPForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int32 DifficultyIndex);
};

// 0x58 (0x930 - 0x8D8)
// Class ShooterGame.HostSessionEntryButton
class UHostSessionEntryButton : public UDataListEntryButton
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x8D8(0x1)(None)
	uint8                                        bIsProcedural : 1;                                 // Mask: 0x2, PropSize: 0x10x8D8(0x1)(None)
	uint8                                        BitPad_176 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2013[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayName;                                       // 0x8E0(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x8F0(0x1)(None)
	uint8                                        Pad_2014[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MapName;                                           // 0x8F8(0x10)(None)
	class FString                                ModName;                                           // 0x908(0x10)(None)
	class FString                                ModPath;                                           // 0x918(0x10)(None)
	uint64                                       ModItemId;                                         // 0x928(0x8)(None)

	static class UClass* StaticClass();
	static class UHostSessionEntryButton* GetDefaultObj();

};

// 0x410 (0xB68 - 0x758)
// Class ShooterGame.HUDActiveMissionWidget
class UHUDActiveMissionWidget : public UPrimalUI
{
public:
	uint8                                        Pad_2017[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          ActiveMissionVisibilityWidgetNames;                // 0x760(0x10)(None)
	class FName                                  MissionNameTextBlockName;                          // 0x770(0x8)(None)
	class FName                                  MissionDifficultyTextBlockName;                    // 0x778(0x8)(None)
	class FName                                  MissionDescriptionTextBlockName;                   // 0x780(0x8)(None)
	class FName                                  ObjectiveTimeValueTextBlockName;                   // 0x788(0x8)(None)
	class FName                                  ObjectiveTimeLabelTextBlockName;                   // 0x790(0x8)(None)
	class FName                                  ObjectiveTimePanelName;                            // 0x798(0x8)(None)
	class FName                                  ObjectiveTimeProgressBarName;                      // 0x7A0(0x8)(None)
	class FName                                  MissionDifficultyPanelName;                        // 0x7A8(0x8)(None)
	class FName                                  PhaseRequirementContainerName;                     // 0x7B0(0x8)(None)
	struct FLinearColor                          MissionTimeRemainingDefaultTextColor;              // 0x7B8(0x10)(None)
	TArray<class FName>                          MissionStatTrackerVisibilityWidgetNames;           // 0x7C8(0x10)(None)
	class FName                                  MissionStatTrackerContainerName;                   // 0x7D8(0x8)(None)
	class UClass*                                PhaseRequirementWidgetClass;                       // 0x7E0(0x8)(ZeroConstructor)
	class FName                                  PhaseBackgroundBorderWidgetName;                   // 0x7E8(0x8)(None)
	class FName                                  PhaseRichTextBlockName;                            // 0x7F0(0x8)(None)
	class FName                                  PhaseDescriptionBlockName;                         // 0x7F8(0x8)(None)
	class FName                                  PhaseDescriptionPrefixBlockName;                   // 0x800(0x8)(None)
	class FName                                  PhaseDescriptionSuffixBlockName;                   // 0x808(0x8)(None)
	class FName                                  PhaseValueContainerName;                           // 0x810(0x8)(None)
	class FName                                  PhaseValueTextBlockName;                           // 0x818(0x8)(None)
	class FName                                  PhaseValueSlashTextBlockName;                      // 0x820(0x8)(None)
	class FName                                  PhaseMaxValueTextBlockName;                        // 0x828(0x8)(None)
	class FName                                  PhaseProgressContainerName;                        // 0x830(0x8)(None)
	class FName                                  PhaseProgressBarName;                              // 0x838(0x8)(None)
	struct FLinearColor                          PhaseNormalBackgroundColor;                        // 0x840(0x10)(None)
	struct FLinearColor                          PhaseCompleteBackgroundColor;                      // 0x850(0x10)(None)
	class FName                                  MissionAlertFlyoutContainerName;                   // 0x860(0x8)(None)
	class FName                                  MissionAlertEntryContainerName;                    // 0x868(0x8)(None)
	class FName                                  MissionAlertTitleTextBlockName;                    // 0x870(0x8)(None)
	class FName                                  MissionAlertBorderName;                            // 0x878(0x8)(None)
	class FName                                  TopMissionAlertFlyoutContainerName;                // 0x880(0x8)(None)
	class FName                                  TopMissionAlertEntryContainerName;                 // 0x888(0x8)(None)
	class FName                                  TopMissionAlertTitleTextBlockName;                 // 0x890(0x8)(None)
	class FName                                  TopMissionAlertBorderName;                         // 0x898(0x8)(None)
	struct FLinearColor                          MissionAlertColor_Negative;                        // 0x8A0(0x10)(None)
	struct FLinearColor                          MissionAlertColor_Neutral;                         // 0x8B0(0x10)(None)
	struct FLinearColor                          MissionAlertColor_Positive;                        // 0x8C0(0x10)(None)
	class UClass*                                AlertEntryWidgetClass;                             // 0x8D0(0x8)(ZeroConstructor)
	float                                        AlertFlyoutAnimationDuration;                      // 0x8D8(0x4)(None)
	enum class ESimpleCurve                      AlertFlyoutCurve;                                  // 0x8DC(0x1)(None)
	uint8                                        Pad_2018[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             AlertOffscreenTransform;                           // 0x8E0(0x10)(None)
	struct FVector2D                             TopAlertOffscreenTransform;                        // 0x8F0(0x10)(None)
	class USoundBase*                            DefaultPositiveMissionAlertSound;                  // 0x900(0x8)(ZeroConstructor)
	class USoundBase*                            DefaultNeutralMissionAlertSound;                   // 0x908(0x8)(ZeroConstructor)
	class USoundBase*                            DefaultNegativeMissionAlertSound;                  // 0x910(0x8)(ZeroConstructor)
	class FName                                  AlertEntryIconContainerName;                       // 0x918(0x8)(None)
	class FName                                  AlertEntryIconName;                                // 0x920(0x8)(None)
	class FName                                  AlertCountTextBlockName;                           // 0x928(0x8)(None)
	class FName                                  AlertContentTextBlockName;                         // 0x930(0x8)(None)
	class FName                                  RacePanelName;                                     // 0x938(0x8)(None)
	class FName                                  RacePositionTextBlockName;                         // 0x940(0x8)(None)
	class FName                                  RaceMaxPositionTextBlockName;                      // 0x948(0x8)(None)
	class FName                                  MissionTimeValueTextBlockName;                     // 0x950(0x8)(None)
	class FName                                  BestRaceTimeName;                                  // 0x958(0x8)(None)
	struct FLinearColor                          ObjectiveTimeRemainingProgressBarColor;            // 0x960(0x10)(None)
	struct FLinearColor                          LowObjectiveTimeRemainingProgressBarColor;         // 0x970(0x10)(None)
	struct FLinearColor                          PhaseReqTextColor_Negative;                        // 0x980(0x10)(None)
	struct FLinearColor                          PhaseReqTextColor_Neutral;                         // 0x990(0x10)(None)
	struct FLinearColor                          PhaseReqTextColor_Positive;                        // 0x9A0(0x10)(None)
	struct FLinearColor                          PhaseReqProgressColor_Negative;                    // 0x9B0(0x10)(None)
	struct FLinearColor                          PhaseReqProgressColor_Neutral;                     // 0x9C0(0x10)(None)
	struct FLinearColor                          PhaseReqProgressColor_Positive;                    // 0x9D0(0x10)(None)
	float                                        OpacityForSlashAndMaxValueText;                    // 0x9E0(0x4)(None)
	uint8                                        Pad_201A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                WorldBuffEffectListEntry_WidgetType;               // 0x9E8(0x8)(ZeroConstructor)
	uint8                                        Pad_201B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextBlock*                            BestRaceTimeTextBlock;                             // 0x9F8(0x8)(ZeroConstructor)
	uint8                                        Pad_201C[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxWorldBuffsDisplayedAtOnce;                      // 0xA0C(0x4)(None)
	uint8                                        Pad_201D[0x120];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionType*                          ActiveMission;                                     // 0xB30(0x8)(ZeroConstructor)
	class APrimalBuff_MissionData*               MissionData;                                       // 0xB38(0x8)(ZeroConstructor)
	class UUserWidget*                           ActiveMissionWidget;                               // 0xB40(0x8)(ZeroConstructor)
	class UCanvasPanel*                          CustomStatusCanvas;                                // 0xB48(0x8)(ZeroConstructor)
	uint8                                        Pad_201F[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDActiveMissionWidget* GetDefaultObj();

	void ShowMissionAlert(enum class EMissionAlertType AlertType, const class FString& AlertTitle, const TArray<struct FMissionAlertEntry>& NewEntries, bool bInstant, bool bFlyoutFromTop);
	void SetRacePositionText(class FText PositionText);
	void SetRacePanelVisibility(enum class ESlateVisibility NewVisibility);
	void IsMissionAlertVisible(bool bIsTop, bool ReturnValue);
	void HideMissionAlert(bool bInstant, bool bHideTop);
	void HaveActiveMission(bool ReturnValue);
	void GetActiveMissionWidget(class APlayerController* PlayerController, class UHUDActiveMissionWidget* ReturnValue);
};

// 0xC8 (0x820 - 0x758)
// Class ShooterGame.HUDCustomStatusWidget
class UHUDCustomStatusWidget : public UPrimalUI
{
public:
	uint8                                        Pad_2038[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CanvasPanelName;                                   // 0x760(0x8)(None)
	class UClass*                                TextWidgetClass;                                   // 0x768(0x8)(ZeroConstructor)
	class FName                                  TitleWidgetTextBlockName;                          // 0x770(0x8)(None)
	class FName                                  TextWidgetTextBlockName;                           // 0x778(0x8)(None)
	class FName                                  CustomTextContainerName;                           // 0x780(0x8)(None)
	class UClass*                                ProgressWidgetClass;                               // 0x788(0x8)(ZeroConstructor)
	class FName                                  ProgressWidgetProgressName;                        // 0x790(0x8)(None)
	class UClass*                                ImageWidgetClass;                                  // 0x798(0x8)(ZeroConstructor)
	class FName                                  ImageBackgroundWidgetName;                         // 0x7A0(0x8)(None)
	class FName                                  IconWidgetName;                                    // 0x7A8(0x8)(None)
	class UCanvasPanel*                          CustomStatusCanvas;                                // 0x7B0(0x8)(ZeroConstructor)
	uint8                                        Pad_2039[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UUserWidget*>                   WidgetRefs;                                        // 0x808(0x10)(ZeroConstructor)
	uint8                                        Pad_203A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDCustomStatusWidget* GetDefaultObj();

	void SetUseGamepadIcon(const struct FHUDElement& ElementInfo, bool Use);
	void SetHUDElementVisibility(const struct FHUDElement& ElementInfo, bool bIsVisible);
	void SetHUDElementTitle(const struct FHUDElement& ElementInfo, const class FString& NewTitle);
	void SetHUDElementTextScale(const struct FHUDElement& ElementInfo, float NewScale);
	void SetHUDElementTextPadding(const struct FHUDElement& ElementInfo, const struct FMargin& NewPadding);
	void SetHUDElementTextColor(const struct FHUDElement& ElementInfo, const struct FLinearColor& NewColor);
	void SetHUDElementTextAlignment_Title(const struct FHUDElement& ElementInfo, enum class ETextJustify NewAlignment);
	void SetHUDElementTextAlignment_Label(const struct FHUDElement& ElementInfo, enum class ETextJustify NewAlignment);
	void SetHUDElementSize(const struct FHUDElement& ElementInfo, const struct FVector2D& NewSize);
	void SetHUDElementScale(const struct FHUDElement& ElementInfo, const struct FVector2D& NewScale);
	void SetHUDElementProgressColor(const struct FHUDElement& ElementInfo, const struct FLinearColor& NewColor);
	void SetHUDElementProgressBarScale(const struct FHUDElement& ElementInfo, const struct FVector2D& NewScale);
	void SetHUDElementProgressBarPadding(const struct FHUDElement& ElementInfo, const struct FMargin& NewPadding);
	void SetHUDElementProgress(const struct FHUDElement& ElementInfo, float NewProgress);
	void SetHUDElementLocation(const struct FHUDElement& ElementInfo, const struct FVector2D& NewLocation);
	void SetHUDElementLabelNumeric(const struct FHUDElement& ElementInfo, float LabelValue, enum class ERoundingMode RoundingMode, bool bUseGrouping, int32 MinIntDigits, int32 MaxIntDigits, int32 MinFractionalDigits, int32 MaxFractionalDigits, bool bAddPercentSymbol);
	void SetHUDElementLabel(const struct FHUDElement& ElementInfo, const class FString& NewLabel);
	void SetHUDElementImage(const struct FHUDElement& ElementInfo, class UTexture2D* NewIcon, bool bSetIcon, bool bSetProgressBarFillImage, bool bSetBackgroundImage);
	void SetHUDElementIconScale(const struct FHUDElement& ElementInfo, const struct FVector2D& NewScale);
	void SetHUDElementIconRotation(const struct FHUDElement& ElementInfo, float NewAngle);
	void SetHUDElementIconPadding(const struct FHUDElement& ElementInfo, const struct FMargin& NewPadding);
	void SetHUDElementIconColor(const struct FHUDElement& ElementInfo, const struct FLinearColor& NewColor);
	void SetHUDElementBackgroundImageColor(const struct FHUDElement& ElementInfo, const struct FLinearColor& NewColor);
	void SetHUDElementAnchor(const struct FHUDElement& ElementInfo, const struct FAnchors& NewAnchor);
	void IsHUDElementVisible(class AActor* WidgetOwner, const struct FHUDElement& WidgetInfo, bool ReturnValue);
	void GetHUDElementRootWidget(class APlayerController* PlayerController, class UHUDCustomStatusWidget* ReturnValue);
};

// 0xE0 (0x410 - 0x330)
// Class ShooterGame.HUDElementBarWidget
class UHUDElementBarWidget : public UPrimalUserWidget
{
public:
	uint8                                        Pad_204A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                HatClass;                                          // 0x338(0x8)(ZeroConstructor)
	class UClass*                                ShirtClass;                                        // 0x340(0x8)(ZeroConstructor)
	class UClass*                                GlovesClass;                                       // 0x348(0x8)(ZeroConstructor)
	class UClass*                                PantsClass;                                        // 0x350(0x8)(ZeroConstructor)
	class UClass*                                bootsClass;                                        // 0x358(0x8)(ZeroConstructor)
	class UClass*                                ShoulderCannonClass;                               // 0x360(0x8)(ZeroConstructor)
	class FName                                  HelmetBarName;                                     // 0x368(0x8)(None)
	class FName                                  ShirtBarName;                                      // 0x370(0x8)(None)
	class FName                                  GlovesBarName;                                     // 0x378(0x8)(None)
	class FName                                  PantsBarName;                                      // 0x380(0x8)(None)
	class FName                                  BootsBarName;                                      // 0x388(0x8)(None)
	class FName                                  BoostIconName;                                     // 0x390(0x8)(None)
	class FName                                  ShoulderCannonBarName;                             // 0x398(0x8)(None)
	float                                        IconsBottomOffset;                                 // 0x3A0(0x4)(None)
	float                                        IconSeparation;                                    // 0x3A4(0x4)(None)
	bool                                         bBoostIconHidden;                                  // 0x3A8(0x1)(None)
	uint8                                        Pad_204B[0x4F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HelmetMaxAmmo;                                     // 0x3F8(0x4)(None)
	float                                        ShirtMaxAmmo;                                      // 0x3FC(0x4)(None)
	float                                        GlovesMaxAmmo;                                     // 0x400(0x4)(None)
	float                                        PantsMaxAmmo;                                      // 0x404(0x4)(None)
	float                                        bootsMaxAmmo;                                      // 0x408(0x4)(None)
	float                                        ShoulderMaxAmmo;                                   // 0x40C(0x4)(None)

	static class UClass* StaticClass();
	static class UHUDElementBarWidget* GetDefaultObj();

	void UpdateBoostIconVisibility();
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.HUDInterface
class IHUDInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IHUDInterface* GetDefaultObj();

};

// 0x90 (0x820 - 0x790)
// Class ShooterGame.HUDOVerlayWidget
class UHUDOVerlayWidget : public UCustomCanvasWidget
{
public:
	float                                        NotificationsYOffset;                              // 0x790(0x4)(None)
	float                                        NotificationsXOffset;                              // 0x794(0x4)(None)
	bool                                         bIsUnderlay;                                       // 0x798(0x1)(None)
	uint8                                        Pad_204D[0x87];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDOVerlayWidget* GetDefaultObj();

};

// 0x28 (0x780 - 0x758)
// Class ShooterGame.HUDPingsContainer
class UHUDPingsContainer : public UPrimalUI
{
public:
	class FName                                  PingContainerCanvasName;                           // 0x758(0x8)(None)
	class UClass*                                PingWidgetClass;                                   // 0x760(0x8)(ZeroConstructor)
	class UCanvasPanel*                          PingContainerCanvas;                               // 0x768(0x8)(ZeroConstructor)
	TArray<class UUserWidget*>                   SpawnedPingWidgets;                                // 0x770(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UHUDPingsContainer* GetDefaultObj();

};

// 0xE0 (0x838 - 0x758)
// Class ShooterGame.HUDPingWidget
class UHUDPingWidget : public UPrimalUI
{
public:
	class FName                                  PingPlayerNameTextBlockName;                       // 0x758(0x8)(None)
	class FName                                  PingRespondingPlayerNameTextBlockName;             // 0x760(0x8)(None)
	class FName                                  PingIconName;                                      // 0x768(0x8)(None)
	class FName                                  PingSwitcherName;                                  // 0x770(0x8)(None)
	class FName                                  PingOffScreenArrowName;                            // 0x778(0x8)(None)
	class FName                                  PingOffScreenIconName;                             // 0x780(0x8)(None)
	class FName                                  PingOffScreenArrowBackgroundName;                  // 0x788(0x8)(None)
	float                                        WidgetRemoveDuration;                              // 0x790(0x4)(None)
	uint8                                        Pad_2088[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPingData                             WidgetPingData;                                    // 0x798(0x60)(ZeroConstructor)
	uint8                                        Pad_2089[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsHovered : 1;                                    // Mask: 0x1, PropSize: 0x10x830(0x1)(None)
	uint8                                        Pad_208A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDPingWidget* GetDefaultObj();

	void UpdateWidgetPingData(const struct FPingData& WithPingData, bool ReturnValue);
	void RemovePingWidget();
	void OnPingWidgetRemoved();
	void OnPingWidgetCreated();
	void OnPingUnhovered(class AShooterCharacter* UnhoveringPlayer);
	void OnPingResponseReceived(class AShooterCharacter* RespondingPlayer);
	void OnPingHovered(class AShooterCharacter* HoveringPlayer);
	void IsPingValid(const struct FPingData& ForPingData, bool ReturnValue);
	void InitializePingWidget(const struct FPingData& FromPingData);
	void HasValidPingData(bool ReturnValue);
	void GetPingWorldLocation(const struct FPingData& FromPingData, const struct FVector& ReturnValue);
	void GetPingData(const struct FPingData& ReturnValue);
};

// 0x328 (0xA80 - 0x758)
// Class ShooterGame.HUDPointOfInterestWidget
class UHUDPointOfInterestWidget : public UPrimalUI
{
public:
	class FName                                  OuterContainerName;                                // 0x758(0x8)(None)
	class FName                                  PointTitleTextBlockName;                           // 0x760(0x8)(None)
	class FName                                  PointDescTextBlockName;                            // 0x768(0x8)(None)
	class FName                                  PointIconPanelName;                                // 0x770(0x8)(None)
	class FName                                  PointIconName;                                     // 0x778(0x8)(None)
	class FName                                  PointSwitcherName;                                 // 0x780(0x8)(None)
	class FName                                  PointOffScreenArrowName;                           // 0x788(0x8)(None)
	class FName                                  PointOffScreenIconName;                            // 0x790(0x8)(None)
	class FName                                  OnScreenPrimaryPanelName;                          // 0x798(0x8)(None)
	class FName                                  OffScreenPrimaryPanelName;                         // 0x7A0(0x8)(None)
	class FName                                  OnScreenIndicatorImageName;                        // 0x7A8(0x8)(None)
	class FName                                  OffScreenIndicatorImageName;                       // 0x7B0(0x8)(None)
	class FName                                  OnScreenProgressPanelName;                         // 0x7B8(0x8)(None)
	class FName                                  OnScreenProgressLabelName;                         // 0x7C0(0x8)(None)
	class FName                                  OffScreenProgressPanelName;                        // 0x7C8(0x8)(None)
	class FName                                  OffScreenProgressLabelName;                        // 0x7D0(0x8)(None)
	float                                        WidgetTitleHiddenIconRenderOffset_Y;               // 0x7D8(0x4)(None)
	uint8                                        Pad_20CC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPointOfInterestData                  WidgetPointOfInterestData;                         // 0x7E0(0x1E0)(ZeroConstructor)
	class UTexture2D*                            FallbackIcon;                                      // 0x9C0(0x8)(ZeroConstructor)
	class USoundBase*                            DefaultLocationAddedSound;                         // 0x9C8(0x8)(ZeroConstructor)
	class USoundBase*                            DefaultLocationReachedSound;                       // 0x9D0(0x8)(ZeroConstructor)
	uint8                                        bIsPulsing : 1;                                    // Mask: 0x1, PropSize: 0x10x9D8(0x1)(None)
	uint8                                        BitPad_179 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_20CD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OffScreenWidgetScale;                              // 0x9DC(0x4)(None)
	uint8                                        Pad_20CE[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDPointOfInterestWidget* GetDefaultObj();

	void UpdateWidgetPointOfInterestData(const struct FPointOfInterestData& WithPointData, bool ReturnValue);
	void SetDismissOverlay(bool Visible);
	void IsPointOfInterestValid(const struct FPointOfInterestData& ForPointData, bool ReturnValue);
	void IsPointOfInterestInitialized(const struct FPointOfInterestData& ForPointData, bool ReturnValue);
	void InitializePointOfInterestWidget(const struct FPointOfInterestData& FromPointData);
	void HasValidPointOfInterestData(bool ReturnValue);
	void GetPointOfInterestWorldRotation(const struct FPointOfInterestData& FromPointData, const struct FRotator& ReturnValue);
	void GetPointOfInterestWorldLocation(const struct FPointOfInterestData& FromPointData, const struct FVector& ReturnValue);
	void GetPointOfInterestTransform(const struct FPointOfInterestData& FromPointData, const struct FTransform& ReturnValue);
	void GetPointOfInterestReachedSound(class USoundBase* ReturnValue);
	void GetPointOfInterestData(const struct FPointOfInterestData& ReturnValue);
	void GetPointOfInterestCosmeticActorTransform(const struct FPointOfInterestData& FromPointData, const struct FTransform& ReturnValue);
	void GetPointOfInterestAddedSound(class USoundBase* ReturnValue);
	void DestroyPointOfInterestWidget();
	void CanActorViewPointOfInterest(class AActor* ForActor, const struct FPointOfInterestData& CanViewPointData, bool ReturnValue);
};

// 0x48 (0x7A0 - 0x758)
// Class ShooterGame.HUDPointsOfInterestContainer
class UHUDPointsOfInterestContainer : public UPrimalUI
{
public:
	class FName                                  PointContainerCanvasName;                          // 0x758(0x8)(None)
	class UClass*                                PointOfInterestWidgetClass;                        // 0x760(0x8)(ZeroConstructor)
	class UClass*                                TamingListEntryTemplate;                           // 0x768(0x8)(ZeroConstructor)
	class UClass*                                TrackedDinoListEntryTemplate;                      // 0x770(0x8)(ZeroConstructor)
	class UCanvasPanel*                          PointContainerCanvas;                              // 0x778(0x8)(ZeroConstructor)
	TArray<class UUserWidget*>                   SpawnedPointWidgets;                               // 0x780(0x10)(ZeroConstructor)
	class UTrackedDinoListEntryWidget*           TamingPOITooltip;                                  // 0x790(0x8)(ZeroConstructor)
	class UTrackedDinoListEntryWidget*           TrackedDinoPOITooltip;                             // 0x798(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UHUDPointsOfInterestContainer* GetDefaultObj();

};

// 0x160 (0x490 - 0x330)
// Class ShooterGame.HUDStatusBarsWidget
class UHUDStatusBarsWidget : public UPrimalUserWidget
{
public:
	uint8                                        Pad_20D7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                HealthBarName;                                     // 0x338(0x10)(None)
	class FString                                StaminaBarName;                                    // 0x348(0x10)(None)
	class FString                                OxygenBarName;                                     // 0x358(0x10)(None)
	class FString                                FoodBarName;                                       // 0x368(0x10)(None)
	class FString                                WaterBarName;                                      // 0x378(0x10)(None)
	class FString                                WeightBarName;                                     // 0x388(0x10)(None)
	class FString                                TorpidityBarName;                                  // 0x398(0x10)(None)
	class FName                                  XPBarName;                                         // 0x3A8(0x8)(None)
	class FName                                  IndoorsImageName;                                  // 0x3B0(0x8)(None)
	class FName                                  HarvestableImageName;                              // 0x3B8(0x8)(None)
	class FName                                  CharacterLabelName;                                // 0x3C0(0x8)(None)
	class UTexture2D*                            UsableHarvestableAllowed;                          // 0x3C8(0x8)(ZeroConstructor)
	class UTexture2D*                            HarvestableAllowed;                                // 0x3D0(0x8)(ZeroConstructor)
	class UTexture2D*                            HarvestablePrevented;                              // 0x3D8(0x8)(ZeroConstructor)
	class UTexture2D*                            UsableHarvestablePrevented;                        // 0x3E0(0x8)(ZeroConstructor)
	struct FLinearColor                          PoopFoodColor;                                     // 0x3E8(0x10)(None)
	struct FLinearColor                          RegularFoodColor;                                  // 0x3F8(0x10)(None)
	uint8                                        Pad_20D8[0x88];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UHUDStatusBarsWidget* GetDefaultObj();

};

// 0x710 (0x900 - 0x1F0)
// Class ShooterGame.InputKeyDisplayWidget
class UInputKeyDisplayWidget : public UWidget
{
public:
	struct FTextBlockStyle                       KeyTextStyle;                                      // 0x1F0(0x340)(ZeroConstructor)
	struct FTextBlockStyle                       SeparatorTextStyle;                                // 0x530(0x340)(ZeroConstructor)
	struct FVector2D                             ButtonImageSize;                                   // 0x870(0x10)(None)
	class FString                                TextPrefix;                                        // 0x880(0x10)(None)
	class FString                                TextSuffix;                                        // 0x890(0x10)(None)
	uint8                                        Pad_20D9[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInputKeyDisplayWidget* GetDefaultObj();

};

// 0x328 (0xA80 - 0x758)
// Class ShooterGame.InventoryArkCreaturesPanel
class UInventoryArkCreaturesPanel : public UPrimalUI
{
public:
	uint8                                        Pad_20DA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  UploadedCreatureListName;                          // 0x75C(0x8)(None)
	class FName                                  LocalCreatureListName;                             // 0x764(0x8)(None)
	class FName                                  UploadCreatureButtonName;                          // 0x76C(0x8)(None)
	class FName                                  DownloadCreatureButtonName;                        // 0x774(0x8)(None)
	uint8                                        Pad_20DB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DinoSlotButtonTemplate;                            // 0x780(0x8)(ZeroConstructor)
	uint8                                        Pad_20DC[0x2F8];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInventoryArkCreaturesPanel* GetDefaultObj();

	void UploadedDinoSlotButtonSelected(class UWidget* TheWidget);
	void LocalDinoSlotButtonSelected(class UWidget* TheWidget);
};

// 0x80 (0x7D8 - 0x758)
// Class ShooterGame.InventoryDinoAncestryPanel
class UInventoryDinoAncestryPanel : public UPrimalUI
{
public:
	class UClass*                                AncestryEntryWidgetTemplate;                       // 0x758(0x8)(ZeroConstructor)
	uint8                                        Pad_20DD[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInventoryDinoAncestryPanel* GetDefaultObj();

};

// 0x0 (0x3B0 - 0x3B0)
// Class ShooterGame.InventoryPanelContainerWidget
class UInventoryPanelContainerWidget : public UBorder
{
public:

	static class UClass* StaticClass();
	static class UInventoryPanelContainerWidget* GetDefaultObj();

};

// 0x2E0 (0xA38 - 0x758)
// Class ShooterGame.InventoryPanelWidget
class UInventoryPanelWidget : public UPrimalUI
{
public:
	class FName                                  TabBgSwitcherName;                                 // 0x758(0x8)(None)
	class FName                                  InventoryButtonName;                               // 0x760(0x8)(None)
	class FName                                  SkinsButtonName;                                   // 0x768(0x8)(None)
	class FName                                  CraftingButtonName;                                // 0x770(0x8)(None)
	class FName                                  CreaturesButtonName;                               // 0x778(0x8)(None)
	class FName                                  InventoryEnabledEffectName;                        // 0x780(0x8)(None)
	class FName                                  SkinsEnabledEffectName;                            // 0x788(0x8)(None)
	class FName                                  CraftingEnabledEffectName;                         // 0x790(0x8)(None)
	class FName                                  SearchTextBoxName;                                 // 0x798(0x8)(None)
	class FName                                  TooltipToggleButtonName;                           // 0x7A0(0x8)(None)
	class FName                                  SortMenuButtonName;                                // 0x7A8(0x8)(None)
	class FName                                  SortMenuAnchorName;                                // 0x7B0(0x8)(None)
	class FName                                  ShowAllButtonName;                                 // 0x7B8(0x8)(None)
	class FName                                  ShowEngramsButtonName;                             // 0x7C0(0x8)(None)
	class FName                                  ShowEngramsBoxName;                                // 0x7C8(0x8)(None)
	class FName                                  TransferAllButtonName;                             // 0x7D0(0x8)(None)
	class FName                                  DropAllButtonName;                                 // 0x7D8(0x8)(None)
	class FName                                  NewFolderButtonName;                               // 0x7E0(0x8)(None)
	class FName                                  DataListSwitcherName;                              // 0x7E8(0x8)(None)
	class FName                                  InventoryDataListName;                             // 0x7F0(0x8)(None)
	class FName                                  SkinDataListName;                                  // 0x7F8(0x8)(None)
	class FName                                  CraftingDataListName;                              // 0x800(0x8)(None)
	class FName                                  CraftingQueueHeaderBoxName;                        // 0x808(0x8)(None)
	class FName                                  CraftingQueueItemsBoxName;                         // 0x810(0x8)(None)
	TArray<class FName>                          CraftQueueItemButtonNames;                         // 0x818(0x10)(None)
	class FName                                  HeaderBoxName;                                     // 0x828(0x8)(None)
	class FName                                  InventoryTabLabelName;                             // 0x830(0x8)(None)
	class FName                                  CraftingTabLabelName;                              // 0x838(0x8)(None)
	class FName                                  ArkCreaturesPanelName;                             // 0x840(0x8)(None)
	class FName                                  ClearCraftingQueueButtonName;                      // 0x848(0x8)(None)
	class FName                                  AutoStackButtonName;                               // 0x850(0x8)(None)
	class FName                                  ReceivingItemsLabelName;                           // 0x858(0x8)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x860(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x870(0x10)(None)
	struct FVector2D                             DefaultWidgetSize;                                 // 0x880(0x10)(None)
	int32                                        DefaultWidgetWrapNum;                              // 0x890(0x4)(None)
	uint8                                        Pad_20ED[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             HandheldWidgetSize;                                // 0x898(0x10)(None)
	int32                                        HandheldWidgetWrapNum;                             // 0x8A8(0x4)(None)
	uint8                                        Pad_20EE[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsRemoteInventory;                                // 0x8C0(0x1)(None)
	uint8                                        Pad_20EF[0x177];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInventoryPanelWidget* GetDefaultObj();

	void UpdateOrderCombo();
	void SearchTextChanged(class FText Text);
	void OnOrderTypeSelected(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnGetSortContextMenuContent(class UWidget* ReturnValue);
	void OnGamepadPressSortIcon();
	void OnFilterTypeSelected(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.InventoryQuickSlotsPanel
class UInventoryQuickSlotsPanel : public UPrimalUI
{
public:
	uint8                                        Pad_20F2[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UInventoryQuickSlotsPanel* GetDefaultObj();

};

// 0xE8 (0x840 - 0x758)
// Class ShooterGame.InventoryStatsPanel
class UInventoryStatsPanel : public UPrimalUI
{
public:
	class FName                                  TabBgSwitcherName;                                 // 0x758(0x8)(None)
	class FName                                  PlayerStatsTabButtonName;                          // 0x760(0x8)(None)
	class FName                                  RemoteStatsTabButtonName;                          // 0x768(0x8)(None)
	class FName                                  RemoteStatsTabTextBlockName;                       // 0x770(0x8)(None)
	class FName                                  PlayerEnabledEffectName;                           // 0x778(0x8)(None)
	class FName                                  RemoteEnabledEffectName;                           // 0x780(0x8)(None)
	class FName                                  StatsWidgetSwitcherName;                           // 0x788(0x8)(None)
	class FName                                  PlayerStatsPanelName;                              // 0x790(0x8)(None)
	class FName                                  HeaderPanelName;                                   // 0x798(0x8)(None)
	class FName                                  RootSizeBoxName;                                   // 0x7A0(0x8)(None)
	class UClass*                                CharacterStatsPanelUITemplate;                     // 0x7A8(0x8)(ZeroConstructor)
	class UClass*                                StructureStatsPanelUITemplate;                     // 0x7B0(0x8)(ZeroConstructor)
	class UClass*                                ObeliskStatsPanelUITemplate;                       // 0x7B8(0x8)(ZeroConstructor)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x7C0(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x7D0(0x10)(None)
	uint8                                        Pad_20F4[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStatsPanelWidget*                     RemoteStatsPanel;                                  // 0x838(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UInventoryStatsPanel* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class ShooterGame.JsonObject
class UJsonObject : public UObject
{
public:
	uint8                                        Pad_216C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UJsonObject* GetDefaultObj();

	void SetVectorField(const class FString& Key, const struct FVector& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetVectorArrayField(const class FString& Key, const TArray<struct FVector>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetStructField(const class FString& Key, const struct FPropertyThunkWrapper& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetStringField(const class FString& Key, const class FString& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetStringArrayField(const class FString& Key, const TArray<class FString>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetRotatorField(const class FString& Key, const struct FRotator& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetRotatorArrayField(const class FString& Key, const TArray<struct FRotator>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter);
	void SetJsonObjectField(const class FString& Key, class UJsonObject* Object, bool bForceSingleKey, const class FString& Delimiter);
	void SetJsonObjectArrayField(const class FString& Key, const TArray<class UJsonObject*>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetIntField(const class FString& Key, int32 Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetIntArrayField(const class FString& Key, const TArray<int32>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetFloatField(const class FString& Key, float Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetFloatArrayField(const class FString& Key, const TArray<float>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetDoubleField(const class FString& Key, double Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetDoubleArrayField(const class FString& Key, const TArray<double>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetByteField(const class FString& Key, uint8 Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetByteArrayField(const class FString& Key, const TArray<uint8>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetBoolField(const class FString& Key, bool Value, bool bForceSingleKey, const class FString& Delimiter);
	void SetBoolArrayField(const class FString& Key, const TArray<bool>& Value, bool bForceSingleKey, const class FString& Delimiter);
	void JsonSerialize(const class FString& ReturnValue);
	void JsonDeserialize(const class FString& JsonData, const class FString& OutErrorMessage, class UObject* WorldContextObject, class UJsonObject* ReturnValue);
	void IsNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetVectorField(const class FString& Key, const struct FVector& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetVectorArrayField(const class FString& Key, const TArray<struct FVector>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetStructField(const class FString& Key, const struct FPropertyThunkWrapper& DestStruct, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetStringField(const class FString& Key, const class FString& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetStringArrayField(const class FString& Key, const TArray<class FString>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetRotatorField(const class FString& Key, const struct FRotator& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetRotatorArrayField(const class FString& Key, const TArray<struct FRotator>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetKeys(const class FString& Key, const TArray<class FString>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetJsonObjectField(const class FString& Key, class UJsonObject* OutObject, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetJsonObjectArrayField(const class FString& Key, const TArray<class UJsonObject*>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetIntField(const class FString& Key, int32 OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetIntArrayField(const class FString& Key, const TArray<int32>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetFloatField(const class FString& Key, float OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetFloatArrayField(const class FString& Key, const TArray<float>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetDoubleField(const class FString& Key, double OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetDoubleArrayField(const class FString& Key, const TArray<double>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetByteField(const class FString& Key, uint8 OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetByteArrayField(const class FString& Key, const TArray<uint8>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetBoolField(const class FString& Key, bool OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void GetBoolArrayField(const class FString& Key, const TArray<bool>& OutValue, bool bForceSingleKey, const class FString& Delimiter, bool ReturnValue);
	void CreateJsonObject(class UObject* WorldContextObject, class UJsonObject* ReturnValue);
	void CompareJsonValues(class UJsonObject* A, class UJsonObject* B, bool ReturnValue);
};

// 0x40 (0x5C0 - 0x580)
// Class ShooterGame.KeyInputWidget
class UKeyInputWidget : public UEditableText
{
public:
	uint8                                        Pad_2175[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UKeyInputWidget* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class ShooterGame.Leaderboard
class ULeaderboard : public UObject
{
public:
	class UClass*                                LeaderboardRowType;                                // 0x28(0x8)(ZeroConstructor)
	struct FLeaderboardDisplayRow                HeaderRow;                                         // 0x30(0x20)(None)
	enum class ELeaderboardColumnName            DefaultOrderByColumn;                              // 0x50(0x1)(None)
	enum class ELeaderboardOrdering              DefaultOrdering;                                   // 0x51(0x1)(None)
	enum class ELeaderboardGroupByMode           DefaultGroupByMode;                                // 0x52(0x1)(None)
	enum class ELeaderboardColumnName            DefaultGroupByColumn;                              // 0x53(0x1)(None)
	int32                                        DefaultNumRowsToDisplay;                           // 0x54(0x4)(None)

	static class UClass* StaticClass();
	static class ULeaderboard* GetDefaultObj();

	void GetLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, class FName MissionTag, const TArray<struct FLeaderboardRow>& LeaderboardRows, bool ReturnValue);
	void FormatLeaderboardRows(class UClass* LeaderboardType, class FName MissionTag, const TArray<struct FLeaderboardRow>& Rows, const TArray<struct FLeaderboardDisplayRow>& DisplayRows, const class FString& PlayerNetIDString);
	void FormatLeaderboardRow(class UClass* LeaderboardType, class FName MissionTag, const struct FLeaderboardRow& Row, const struct FLeaderboardDisplayRow& DisplayRow, const class FString& PlayerNetIDString);
	void CountLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, class FName MissionTag, int32 ReturnValue);
	void BPGetLeaderboardRows(class FName MissionTag, class AShooterGameMode* GameMode, const TArray<struct FLeaderboardRow>& LeaderboardRows);
	void BPFormatLeaderboardRow(class FName MissionTag, int32 Index, const struct FLeaderboardRow& DatabaseRow, const struct FLeaderboardDisplayRow& ReturnValue);
	void BPCountLeaderboardRows(class FName MissionTag, class AShooterGameMode* GameMode, int32 ReturnValue);
	void BPAddLeaderboardRow(class AShooterGameMode* GameMode, const struct FLeaderboardRow& NewRow, bool ReturnValue);
	void AddLeaderboardRow(class UWorld* WorldContextObject, class UClass* LeaderboardType, const struct FLeaderboardRow& NewRow, bool ReturnValue);
};

// 0xC8 (0x820 - 0x758)
// Class ShooterGame.LeaderboardRowWidget
class ULeaderboardRowWidget : public UPrimalUI
{
public:
	bool                                         bIsHeaderRow;                                      // 0x758(0x1)(None)
	uint8                                        Pad_2189[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ColumnContainerWidgetName;                         // 0x75C(0x8)(None)
	uint8                                        Pad_218A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLeaderboardColumnDefinition>  Columns;                                           // 0x768(0x10)(ZeroConstructor)
	struct FLinearColor                          DefaultLeaderboardRowTextColor;                    // 0x778(0x10)(None)
	struct FLinearColor                          DefaultLeaderboardRowBackgroundColor;              // 0x788(0x10)(None)
	class UTexture2D*                            DefaultLeaderboardRowBackgroundTexture;            // 0x798(0x8)(ZeroConstructor)
	struct FLinearColor                          PersonalLeaderboardRowTextColor;                   // 0x7A0(0x10)(None)
	struct FLinearColor                          PersonalLeaderboardRowBackgroundColor;             // 0x7B0(0x10)(None)
	class UTexture2D*                            PersonalLeaderboardRowBackgroundTexture;           // 0x7C0(0x8)(ZeroConstructor)
	struct FLinearColor                          HeaderLeaderboardRowTextColor;                     // 0x7C8(0x10)(None)
	struct FLinearColor                          HeaderLeaderboardRowBackgroundColor;               // 0x7D8(0x10)(None)
	class UTexture2D*                            HeaderLeaderboardRowBackgroundTexture;             // 0x7E8(0x8)(ZeroConstructor)
	uint8                                        Pad_218B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UHorizontalBox*                        ColumnContainer;                                   // 0x808(0x8)(ZeroConstructor)
	TArray<class UTextBlock*>                    ColumnWidgets;                                     // 0x810(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ULeaderboardRowWidget* GetDefaultObj();

	void SetRowContents(const struct FLeaderboardDisplayRow& RowData, float ContainerWidth, float RowHeight, bool IsHeaderRow, bool ManuallySetPlayersOwnRowStyling, bool UsePlayersOwnRowStyling);
};

// 0x40 (0xF0 - 0xB0)
// Class ShooterGame.MaterialExpressionIsPixelUnderwater
class UMaterialExpressionIsPixelUnderwater : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(None)
	uint8                                        Pad_218D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(ZeroConstructor)
	struct FVector2D                             ConstInput;                                        // 0xE0(0x10)(None)

	static class UClass* StaticClass();
	static class UMaterialExpressionIsPixelUnderwater* GetDefaultObj();

};

// 0x488 (0x538 - 0xB0)
// Class ShooterGame.MaterialExpressionPlatformSwitch
class UMaterialExpressionPlatformSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(ZeroConstructor)
	struct FExpressionInput                      Inputs[0x1C];                                      // 0xD8(0x460)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionPlatformSwitch* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorks
class UMaterialExpressionWaveWorks : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorks* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorksHeight
class UMaterialExpressionWaveWorksHeight : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorksHeight* GetDefaultObj();

};

// 0x28 (0xD8 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorksDisplacement
class UMaterialExpressionWaveWorksDisplacement : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorksDisplacement* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorksMaxDisplacement
class UMaterialExpressionWaveWorksMaxDisplacement : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorksMaxDisplacement* GetDefaultObj();

};

// 0x30 (0xE0 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorksShorelineData
class UMaterialExpressionWaveWorksShorelineData : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(ZeroConstructor)
	bool                                         bEnableFiltering;                                  // 0xD8(0x1)(None)
	uint8                                        Pad_2193[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorksShorelineData* GetDefaultObj();

};

// 0x0 (0xB0 - 0xB0)
// Class ShooterGame.MaterialExpressionWaveWorksWind
class UMaterialExpressionWaveWorksWind : public UMaterialExpression
{
public:

	static class UClass* StaticClass();
	static class UMaterialExpressionWaveWorksWind* GetDefaultObj();

};

// 0x10 (0x578 - 0x568)
// Class ShooterGame.ShooterMatineeActor
class AShooterMatineeActor : public AMatineeActor
{
public:
	bool                                         bUseMatineeManager;                                // 0x568(0x1)(None)
	uint8                                        Pad_2195[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MatineeManagerPriority;                            // 0x56C(0x4)(None)
	class AMatineeActorManager*                  MyMatineeManager;                                  // 0x570(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AShooterMatineeActor* GetDefaultObj();

};

// 0x18 (0x4D0 - 0x4B8)
// Class ShooterGame.MatineeActorManager
class AMatineeActorManager : public AInfo
{
public:
	bool                                         bPriorityToFloatSets;                              // 0x4B8(0x1)(None)
	bool                                         bPriorityToVectorSets;                             // 0x4B9(0x1)(None)
	uint8                                        Pad_2197[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AShooterMatineeActor*>          MatineeActorList;                                  // 0x4C0(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMatineeActorManager* GetDefaultObj();

};

// 0x30 (0x4E8 - 0x4B8)
// Class ShooterGame.MatineeCapture
class AMatineeCapture : public AActor
{
public:
	class AMatineeActor*                         MatineeActor;                                      // 0x4B8(0x8)(ZeroConstructor)
	float                                        CaptureFPS;                                        // 0x4C0(0x4)(None)
	int32                                        ResX;                                              // 0x4C4(0x4)(None)
	int32                                        ResY;                                              // 0x4C8(0x4)(None)
	float                                        PreviewMatineeTime;                                // 0x4CC(0x4)(None)
	bool                                         bBeginCapture;                                     // 0x4D0(0x1)(None)
	bool                                         bCancelCapture;                                    // 0x4D1(0x1)(None)
	uint8                                        Pad_2199[0x16];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMatineeCapture* GetDefaultObj();

};

// 0x20 (0x48 - 0x28)
// Class ShooterGame.MinimapData
class UMinimapData : public UObject
{
public:
	TArray<struct FMapData>                      MinimapData;                                       // 0x28(0x10)(None)
	class FString                                GeneralMapName;                                    // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UMinimapData* GetDefaultObj();

};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.PrimalSubMenuUI
class UPrimalSubMenuUI : public UPrimalUI
{
public:
	uint8                                        Pad_219B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalSubMenuUI* GetDefaultObj();

};

// 0x0 (0x768 - 0x768)
// Class ShooterGame.MinimapSubMenuUI
class UMinimapSubMenuUI : public UPrimalSubMenuUI
{
public:

	static class UClass* StaticClass();
	static class UMinimapSubMenuUI* GetDefaultObj();

};

// 0xC0 (0x818 - 0x758)
// Class ShooterGame.MissionBiomeCompletionWidget
class UMissionBiomeCompletionWidget : public UBaseSelectableButtonWidget
{
public:
	class UTexture2D*                            ButtonIcon;                                        // 0x758(0x8)(ZeroConstructor)
	class FText                                  SectionName;                                       // 0x760(0x18)(None)
	struct FLinearColor                          AllMissionsCompletedColor;                         // 0x778(0x10)(None)
	struct FLinearColor                          SectionNameTextColor;                              // 0x788(0x10)(None)
	struct FLinearColor                          CompletionPercentLabelTextColor;                   // 0x798(0x10)(None)
	struct FLinearColor                          NumCompletedValueTextColor;                        // 0x7A8(0x10)(None)
	struct FLinearColor                          NumCompletedLabelTextColor;                        // 0x7B8(0x10)(None)
	struct FLinearColor                          CompletionProgressBarForegroundColor;              // 0x7C8(0x10)(None)
	uint8                                        Pad_219E[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionBiomeCompletionWidget* GetDefaultObj();

};

// 0x1C8 (0x680 - 0x4B8)
// Class ShooterGame.PrimalTargetableActor
class APrimalTargetableActor : public AActor
{
public:
	uint8                                        Pad_21C9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       HurtFX;                                            // 0x4C8(0x8)(ZeroConstructor)
	TArray<struct FDamageTypeAdjuster>           DamageTypeAdjusters;                               // 0x4D0(0x10)(ZeroConstructor)
	uint8                                        Pad_21CA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class AActor>                  DestructionActorTemplate;                          // 0x4E8(0x30)(ZeroConstructor)
	float                                        LifeSpanAfterDeath;                                // 0x518(0x4)(None)
	uint8                                        Pad_21CB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             DeathSound;                                        // 0x520(0x8)(ZeroConstructor)
	float                                        PassiveDamageHealthReplicationPercentInterval;     // 0x528(0x4)(None)
	float                                        DamageNotifyTeamAggroMultiplier;                   // 0x52C(0x4)(None)
	float                                        DamageNotifyTeamAggroRange;                        // 0x530(0x4)(None)
	float                                        DamageNotifyTeamAggroRangeFalloff;                 // 0x534(0x4)(None)
	struct FVector                               DestructibleMeshLocationOffset;                    // 0x538(0x18)(None)
	struct FVector                               DestructibleMeshScaleOverride;                     // 0x550(0x18)(None)
	struct FRotator                              DestructibleMeshRotationOffset;                    // 0x568(0x18)(None)
	uint8                                        bDestructionActorTemplateServerOnly : 1;           // Mask: 0x1, PropSize: 0x10x580(0x1)(None)
	uint8                                        bDestroyedMeshUseSkeletalMeshComponent : 1;        // Mask: 0x2, PropSize: 0x10x580(0x1)(None)
	uint8                                        bPreventZeroDamageInstigatorSelfDamage : 1;        // Mask: 0x4, PropSize: 0x10x580(0x1)(None)
	uint8                                        bIsDead : 1;                                       // Mask: 0x8, PropSize: 0x10x580(0x1)(None)
	uint8                                        bDamageNotifyTeamAggroAI : 1;                      // Mask: 0x10, PropSize: 0x10x580(0x1)(None)
	uint8                                        BitPad_182 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWithinPreventionVolume : 1;                       // Mask: 0x40, PropSize: 0x10x580(0x1)(None)
	uint8                                        bAllowDamageByFriendlyDinos : 1;                   // Mask: 0x80, PropSize: 0x10x580(0x1)(None)
	uint8                                        bUseBPAdjustDamage : 1;                            // Mask: 0x1, PropSize: 0x10x581(0x1)(None)
	uint8                                        bForceZeroDamageProcessing : 1;                    // Mask: 0x2, PropSize: 0x10x581(0x1)(None)
	uint8                                        bForceFloatingDamageNumbers : 1;                   // Mask: 0x4, PropSize: 0x10x581(0x1)(None)
	uint8                                        bDoAllowRadialDamageWithoutVisiblityTrace : 1;     // Mask: 0x8, PropSize: 0x10x581(0x1)(None)
	uint8                                        bIgnoreDestructionEffects : 1;                     // Mask: 0x10, PropSize: 0x10x581(0x1)(None)
	uint8                                        bIgnoreDamageRepairCooldown : 1;                   // Mask: 0x20, PropSize: 0x10x581(0x1)(None)
	uint8                                        bUseHarvestingComponent : 1;                       // Mask: 0x40, PropSize: 0x10x581(0x1)(None)
	uint8                                        bUseBPDied : 1;                                    // Mask: 0x80, PropSize: 0x10x581(0x1)(None)
	uint8                                        Pad_21CC[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DescriptiveName;                                   // 0x588(0x10)(None)
	class UClass*                                DestroyedMeshActorClass;                           // 0x598(0x8)(ZeroConstructor)
	TSoftObjectPtr<class UGeometryCollection>    SoftDestructionGeoCollectionAsset;                 // 0x5A0(0x30)(ZeroConstructor)
	TArray<struct FDestructionGeoCollectionInfo> MultiSoftDestructionGeoCollectionAssets;           // 0x5D0(0x10)(ZeroConstructor)
	float                                        ReplicatedHealth;                                  // 0x5E0(0x4)(None)
	float                                        Health;                                            // 0x5E4(0x4)(None)
	float                                        MaxHealth;                                         // 0x5E8(0x4)(None)
	float                                        DestructibleMeshDeathImpulseScale;                 // 0x5EC(0x4)(None)
	TArray<struct FBoneDamageAdjuster>           BoneDamageAdjusters;                               // 0x5F0(0x10)(None)
	uint8                                        Pad_21CF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                OverlayToolTipWidget;                              // 0x608(0x8)(ZeroConstructor)
	struct FVector2D                             OverlayMultiUseTooltipScale;                       // 0x610(0x10)(None)
	struct FVector2D                             OverlayMultiUseTooltipPadding;                     // 0x620(0x10)(None)
	class UPrimalHarvestingComponent*            MyHarvestingComponent;                             // 0x630(0x8)(ZeroConstructor)
	uint8                                        Pad_21D0[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EShooterPhysMaterialType          TargetableDamageFXDefaultPhysMaterial;             // 0x648(0x1)(None)
	uint8                                        Pad_21D1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BPOverrideDestroyedMeshTextures : 1;               // Mask: 0x1, PropSize: 0x10x64C(0x1)(None)
	uint8                                        BitPad_183 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_21D2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                StructureSettingsClass;                            // 0x650(0x8)(ZeroConstructor)
	uint8                                        Pad_21D3[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                MyDestructionActor;                                // 0x678(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalTargetableActor* GetDefaultObj();

	void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void OverrideDestroyedMeshTextures(class UMeshComponent* MeshComp);
	void OnRep_ReplicatedHealth();
	void NetUpdatedHealth(int32 NewHealth);
	void IsInvincible(bool ReturnValue);
	void HarvestingDepleted(class UPrimalHarvestingComponent* FromComponent);
	void GetMaxHealth(float ReturnValue);
	void GetDescriptiveName(const class FString& ReturnValue);
	void BPSupressImpactEffects(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent, bool ReturnValue);
	void BPHitEffect(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent, const struct FVector& DamageLoc, const struct FRotator& HitNormal);
	void BPDied(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo, float ReturnValue);
};

// 0x980 (0x1000 - 0x680)
// Class ShooterGame.PrimalStructure
class APrimalStructure : public APrimalTargetableActor
{
public:
	uint8                                        Pad_233F[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             OverlayTooltipPadding;                             // 0x6B0(0x10)(None)
	struct FVector2D                             OverlayTooltipScale;                               // 0x6C0(0x10)(None)
	float                                        MaxTooltipPawnSpeed;                               // 0x6D0(0x4)(None)
	uint8                                        Pad_2341[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            BuildingIcon;                                      // 0x6D8(0x8)(ZeroConstructor)
	class FName                                  StructureTag;                                      // 0x6E0(0x8)(None)
	class UClass*                                ConsumesPrimalItem;                                // 0x6E8(0x8)(ZeroConstructor)
	float                                        ScaleFactor;                                       // 0x6F0(0x4)(None)
	int32                                        StructureSnapTypeFlags;                            // 0x6F4(0x4)(None)
	struct FIntVector                            ExtraStructureSnapTypeFlags;                       // 0x6F8(0xC)(None)
	uint8                                        Pad_2342[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStructureVariant>             Variants;                                          // 0x708(0x10)(ZeroConstructor)
	class FName                                  CurrentVariantTag;                                 // 0x718(0x8)(None)
	uint8                                        bIsFlippable : 1;                                  // Mask: 0x1, PropSize: 0x10x720(0x1)(None)
	uint8                                        bFlipByScale : 1;                                  // Mask: 0x2, PropSize: 0x10x720(0x1)(None)
	uint8                                        bFlipInvertLocOffset : 1;                          // Mask: 0x4, PropSize: 0x10x720(0x1)(None)
	uint8                                        bIsFlipped : 1;                                    // Mask: 0x8, PropSize: 0x10x720(0x1)(None)
	uint8                                        bShowInPlaceableList : 1;                          // Mask: 0x10, PropSize: 0x10x720(0x1)(None)
	uint8                                        bIsRepairing : 1;                                  // Mask: 0x20, PropSize: 0x10x720(0x1)(None)
	uint8                                        BitPad_199 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceAllowWallAttachments : 1;                    // Mask: 0x80, PropSize: 0x10x720(0x1)(None)
	uint8                                        bUseBPRefreshedStructureColors : 1;                // Mask: 0x1, PropSize: 0x10x721(0x1)(None)
	uint8                                        bIsBed : 1;                                        // Mask: 0x2, PropSize: 0x10x721(0x1)(None)
	uint8                                        bIsTeleporter : 1;                                 // Mask: 0x4, PropSize: 0x10x721(0x1)(None)
	uint8                                        bIsDoorframe : 1;                                  // Mask: 0x8, PropSize: 0x10x721(0x1)(None)
	uint8                                        bClientAddPlacedOnFloorStructures : 1;             // Mask: 0x10, PropSize: 0x10x721(0x1)(None)
	uint8                                        bUseBPPreventStasis : 1;                           // Mask: 0x20, PropSize: 0x10x721(0x1)(None)
	uint8                                        bDestroyOnStasis : 1;                              // Mask: 0x40, PropSize: 0x10x721(0x1)(None)
	uint8                                        bTriggerBPStasis : 1;                              // Mask: 0x80, PropSize: 0x10x721(0x1)(None)
	uint8                                        bUseBPPostLoadedFromSaveGame : 1;                  // Mask: 0x1, PropSize: 0x10x722(0x1)(None)
	uint8                                        bPlacementUsesWeaponClipAmmo : 1;                  // Mask: 0x2, PropSize: 0x10x722(0x1)(None)
	uint8                                        bIgnoreDyingWhenDemolished : 1;                    // Mask: 0x4, PropSize: 0x10x722(0x1)(None)
	uint8                                        bAbsoluteTakeAnythingAsGround : 1;                 // Mask: 0x8, PropSize: 0x10x722(0x1)(None)
	uint8                                        bDisablePlacementOnDynamicsFoliageAndDoors : 1;    // Mask: 0x10, PropSize: 0x10x722(0x1)(None)
	uint8                                        bSeatedDisableCollisionCheck : 1;                  // Mask: 0x20, PropSize: 0x10x722(0x1)(None)
	uint8                                        bUseBPIsAllowedToBuildEx : 1;                      // Mask: 0x40, PropSize: 0x10x722(0x1)(None)
	uint8                                        bUseBPHandleStructureEnabled : 1;                  // Mask: 0x80, PropSize: 0x10x722(0x1)(None)
	uint8                                        bForcePlacingOnVerticalGround : 1;                 // Mask: 0x1, PropSize: 0x10x723(0x1)(None)
	uint8                                        bPlacementShouldNotBeHorizontal : 1;               // Mask: 0x2, PropSize: 0x10x723(0x1)(None)
	uint8                                        bRequiresGroundedPlacement : 1;                    // Mask: 0x4, PropSize: 0x10x723(0x1)(None)
	uint8                                        bAllowPlacingOnOtherTeamStructuresPvPOnly : 1;     // Mask: 0x8, PropSize: 0x10x723(0x1)(None)
	uint8                                        bForceUseSkeletalMeshComponent : 1;                // Mask: 0x10, PropSize: 0x10x723(0x1)(None)
	uint8                                        UseBPOverrideTargetLocation : 1;                   // Mask: 0x20, PropSize: 0x10x723(0x1)(None)
	uint8                                        bOverrideFoundationSupportDistance : 1;            // Mask: 0x40, PropSize: 0x10x723(0x1)(None)
	uint8                                        BitPad_19A : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        PlacementOffsetForVerticalGround;                  // 0x724(0x4)(None)
	uint8                                        bForceDisableFootSound : 1;                        // Mask: 0x1, PropSize: 0x10x728(0x1)(None)
	uint8                                        bTraceThruEncroachmentPoints : 1;                  // Mask: 0x2, PropSize: 0x10x728(0x1)(None)
	uint8                                        bUseMeshOverlapInsteadOfEncroachmentPoints : 1;    // Mask: 0x4, PropSize: 0x10x728(0x1)(None)
	uint8                                        bDidSpawnEffects : 1;                              // Mask: 0x8, PropSize: 0x10x728(0x1)(None)
	uint8                                        bPreventDinoPlacementDistanceIncrease : 1;         // Mask: 0x10, PropSize: 0x10x728(0x1)(None)
	uint8                                        bPendingRemoval : 1;                               // Mask: 0x20, PropSize: 0x10x728(0x1)(None)
	uint8                                        bWasAttachedToPawn : 1;                            // Mask: 0x40, PropSize: 0x10x728(0x1)(None)
	uint8                                        bDontOverrideCollisionProfile : 1;                 // Mask: 0x80, PropSize: 0x10x728(0x1)(None)
	uint8                                        bUseAdvancedRotationPlacement : 1;                 // Mask: 0x1, PropSize: 0x10x729(0x1)(None)
	uint8                                        BitPad_19B : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bRootFoundationLimitBuildArea : 1;                 // Mask: 0x20, PropSize: 0x10x729(0x1)(None)
	uint8                                        bCenterOffscreenFloatingHUDWidgets : 1;            // Mask: 0x40, PropSize: 0x10x729(0x1)(None)
	uint8                                        BitPad_19C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2344[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlacementInitialTracePointOffsetForVerticalGround; // 0x72C(0x4)(None)
	TArray<class UClass*>                        StructuresAllowedToBeVerticalGround;               // 0x730(0x10)(ZeroConstructor)
	float                                        TraceDistanceFromActorToWallVerticalGround;        // 0x740(0x4)(None)
	uint8                                        Pad_2345[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FlipByScaleDirection;                              // 0x748(0x18)(None)
	struct FVector                               PlacementCollisionAdjustmentBuffer;                // 0x760(0x18)(None)
	float                                        PlacementYawOffset;                                // 0x778(0x4)(None)
	float                                        PlacementYawOffsetIncrement;                       // 0x77C(0x4)(None)
	struct FVector                               PlacementHitLocOffset;                             // 0x780(0x18)(None)
	struct FVector                               PlacementEncroachmentCheckOffset;                  // 0x798(0x18)(None)
	struct FVector                               PlacementEncroachmentBoxExtent;                    // 0x7B0(0x18)(None)
	struct FVector                               PlacementTraceScale;                               // 0x7C8(0x18)(None)
	struct FVector                               SnapAlternatePlacementTraceScale;                  // 0x7E0(0x18)(None)
	struct FVector                               WorldGeoCheckExtraBoxExtent;                       // 0x7F8(0x18)(None)
	struct FRotator                              PlacementRotOffset;                                // 0x810(0x18)(None)
	struct FRotator                              PlacementTraceRotOffset;                           // 0x828(0x18)(None)
	struct FRotator                              SnappingRotationOffset;                            // 0x840(0x18)(None)
	uint8                                        bAllowAttachToPawn : 1;                            // Mask: 0x1, PropSize: 0x10x858(0x1)(None)
	uint8                                        bAllowAttachToSaddle : 1;                          // Mask: 0x2, PropSize: 0x10x858(0x1)(None)
	uint8                                        bPlacementTraceIgnorePawns : 1;                    // Mask: 0x4, PropSize: 0x10x858(0x1)(None)
	uint8                                        bRequireFreePrimarySnappedStructure : 1;           // Mask: 0x8, PropSize: 0x10x858(0x1)(None)
	uint8                                        bAllowMultiplePrimarySnappedStructures : 1;        // Mask: 0x10, PropSize: 0x10x858(0x1)(None)
	uint8                                        bOnlyAllowPlacementInWater : 1;                    // Mask: 0x20, PropSize: 0x10x858(0x1)(None)
	uint8                                        bForcePlacingOnGround : 1;                         // Mask: 0x40, PropSize: 0x10x858(0x1)(None)
	uint8                                        bTakeAnythingAsGround : 1;                         // Mask: 0x80, PropSize: 0x10x858(0x1)(None)
	uint8                                        bIsFoundation : 1;                                 // Mask: 0x1, PropSize: 0x10x859(0x1)(None)
	uint8                                        bForceCheckNearbyEnemyFoundation : 1;              // Mask: 0x2, PropSize: 0x10x859(0x1)(None)
	uint8                                        bIsFloor : 1;                                      // Mask: 0x4, PropSize: 0x10x859(0x1)(None)
	uint8                                        bForceFloorCollisionGroup : 1;                     // Mask: 0x8, PropSize: 0x10x859(0x1)(None)
	uint8                                        bIsWall : 1;                                       // Mask: 0x10, PropSize: 0x10x859(0x1)(None)
	uint8                                        bDisallowPreventCropsBiomes : 1;                   // Mask: 0x20, PropSize: 0x10x859(0x1)(None)
	uint8                                        bCanBeRepaired : 1;                                // Mask: 0x40, PropSize: 0x10x859(0x1)(None)
	uint8                                        bReturnDamageOnHitFromPawn : 1;                    // Mask: 0x80, PropSize: 0x10x859(0x1)(None)
	uint8                                        bPreventStasis : 1;                                // Mask: 0x1, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bAllowUseFromRidingDino : 1;                       // Mask: 0x2, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bIsFenceFoundation : 1;                            // Mask: 0x4, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bUseFenceFoundation : 1;                           // Mask: 0x8, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bUseOnlyBlockSelfTraceChannel : 1;                 // Mask: 0x10, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bWasPlacementSnapped : 1;                          // Mask: 0x20, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bIsCoreStructure : 1;                              // Mask: 0x40, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bDeprecateStructure : 1;                           // Mask: 0x80, PropSize: 0x10x85A(0x1)(None)
	uint8                                        bRequiresToBeInsideZoneVolume : 1;                 // Mask: 0x1, PropSize: 0x10x85B(0x1)(None)
	uint8                                        bAllowLoadBearing : 1;                             // Mask: 0x2, PropSize: 0x10x85B(0x1)(None)
	uint8                                        bIsEnvironmentStructure : 1;                       // Mask: 0x4, PropSize: 0x10x85B(0x1)(None)
	uint8                                        BitPad_19D : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPOnVariantSwitch : 1;                         // Mask: 0x80, PropSize: 0x10x85B(0x1)(None)
	uint8                                        Pad_2347[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RepairCheckInterval;                               // 0x860(0x4)(None)
	float                                        PlacementFloorCheckZExtentUp;                      // 0x864(0x4)(None)
	float                                        RepairPercentPerInterval;                          // 0x868(0x4)(None)
	float                                        DecayDestructionPeriod;                            // 0x86C(0x4)(None)
	TArray<class UClass*>                        PreventPlacingOnFloorClasses;                      // 0x870(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AllowPlacingOnFloorClasses;                        // 0x880(0x10)(ZeroConstructor)
	class UStaticMeshComponent*                  MyStaticMesh;                                      // 0x890(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  CosmeticVariantStaticMesh;                         // 0x898(0x8)(ZeroConstructor)
	class USceneComponent*                       MyRootTransform;                                   // 0x8A0(0x8)(ZeroConstructor)
	uint8                                        bRequiresPlacementOnStructureFloors : 1;           // Mask: 0x1, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bDisablePlacementOnStructureFloors : 1;            // Mask: 0x2, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bDestroyStructureIfFloorDestroyed : 1;             // Mask: 0x4, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bUsePlacementCollisionCheck : 1;                   // Mask: 0x8, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bUseLenientWorldGeoObstructionCheck : 1;           // Mask: 0x10, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bRequiresSnapping : 1;                             // Mask: 0x20, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bSnappingRequiresNearbyFoundation : 1;             // Mask: 0x40, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bAllowSnapRotation : 1;                            // Mask: 0x80, PropSize: 0x10x8A8(0x1)(None)
	uint8                                        bUseBPAllowSnapRotationForStructure : 1;           // Mask: 0x1, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bForceHideObstructedSnaps : 1;                     // Mask: 0x2, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bDontCheckSnapsForObstruction : 1;                 // Mask: 0x4, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bPlacementChooseRotation : 1;                      // Mask: 0x8, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bPlacementIgnoreChooseRotation : 1;                // Mask: 0x10, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bPlacementAdjustHeight : 1;                        // Mask: 0x20, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bUseSnapFromPlacementOverrideEvenWhenNotSnapped : 1; // Mask: 0x40, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bRequiresPlacingOnWall : 1;                        // Mask: 0x80, PropSize: 0x10x8A9(0x1)(None)
	uint8                                        bSnapRequiresPlacementOnGround : 1;                // Mask: 0x1, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bAllowSnapOntoSameLocation : 1;                    // Mask: 0x2, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bOnlyFoundationIfSnappedToFoundation : 1;          // Mask: 0x4, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bFoundationRequiresGroundTrace : 1;                // Mask: 0x8, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bPlacingOnGroundRequiresNoStructure : 1;           // Mask: 0x10, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bTakeGroundNormal : 1;                             // Mask: 0x20, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bTakeGroundNormalDirectly : 1;                     // Mask: 0x40, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bFinalPlacementDontAdjustForMaxRange : 1;          // Mask: 0x80, PropSize: 0x10x8AA(0x1)(None)
	uint8                                        bAllowStructureColors : 1;                         // Mask: 0x1, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bDebug : 1;                                        // Mask: 0x2, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bUseFadeInEffect : 1;                              // Mask: 0x4, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bUsingStructureColors : 1;                         // Mask: 0x8, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bPreventDefaultVariant : 1;                        // Mask: 0x10, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bCarriedByDino : 1;                                // Mask: 0x20, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bAllowPickingUpStructureAfterPlacement : 1;        // Mask: 0x40, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bDisablePickingUpStructureAfterPlacementOnTryMultiUse : 1; // Mask: 0x80, PropSize: 0x10x8AB(0x1)(None)
	uint8                                        bUseBlueprintAnimNotifyCustomEvent : 1;            // Mask: 0x1, PropSize: 0x10x8AC(0x1)(None)
	uint8                                        BitPad_19F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_234C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TraceIgnoreStructuresWithTypeFlags;                // 0x8B0(0x4)(None)
	uint8                                        Pad_234D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          EncroachmentCheckIgnoreStructureTypeTags;          // 0x8B8(0x10)(None)
	uint8                                        bUsesHealth : 1;                                   // Mask: 0x1, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bIgnoreSnappedToOtherFloorStructures : 1;          // Mask: 0x2, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bEnforceStructureLinkExactRotation : 1;            // Mask: 0x4, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bForceSnappedStructureToGround : 1;                // Mask: 0x8, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bForceBlockIK : 1;                                 // Mask: 0x10, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bStationaryStructure : 1;                          // Mask: 0x20, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bIgnorePawns : 1;                                  // Mask: 0x40, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bForcePushTroughWallCheck : 1;                     // Mask: 0x80, PropSize: 0x10x8C8(0x1)(None)
	uint8                                        bCanDemolish : 1;                                  // Mask: 0x1, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bAllowPlacingOnOtherTeamStructures : 1;            // Mask: 0x2, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bPreventPlacementInWater : 1;                      // Mask: 0x4, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bAllowInRegularStructurePreventionZones : 1;       // Mask: 0x8, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bDontSetStructureCollisionChannels : 1;            // Mask: 0x10, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bForcePreventEnemyStructuresNearby : 1;            // Mask: 0x20, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bAllowEnemyDemolish : 1;                           // Mask: 0x40, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bDontActuallySnapJustPlacement : 1;                // Mask: 0x80, PropSize: 0x10x8C9(0x1)(None)
	uint8                                        bIgnoreMaxStructuresInRange : 1;                   // Mask: 0x1, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bPaintingUseSkeletalMesh : 1;                      // Mask: 0x2, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bUsesPaintingComponent : 1;                        // Mask: 0x4, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bCanBuildUpon : 1;                                 // Mask: 0x8, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bHasResetDecayTime : 1;                            // Mask: 0x10, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bForceAllowInPreventionVolumes : 1;                // Mask: 0x20, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bDoForceCreateDynamicMaterials : 1;                // Mask: 0x40, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bUseBPGetInfoFromConsumedItemForPlacedStructure : 1; // Mask: 0x80, PropSize: 0x10x8CA(0x1)(None)
	uint8                                        bImmuneToAutoDemolish : 1;                         // Mask: 0x1, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bIgnoreMaxStructuresInSmallRadius : 1;             // Mask: 0x2, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bAdjustPlacementIfCollide : 1;                     // Mask: 0x4, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bAlignToSaddleWhenPlacing : 1;                     // Mask: 0x8, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bAllowTargetingByCorruptDinos : 1;                 // Mask: 0x10, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bUseBPTreatAsFoundationForSnappedStructure : 1;    // Mask: 0x20, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bUseBPOnStructurePickup : 1;                       // Mask: 0x40, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bPerInstanceSnapPoints : 1;                        // Mask: 0x80, PropSize: 0x10x8CB(0x1)(None)
	uint8                                        bSnapToWaterSurface : 1;                           // Mask: 0x1, PropSize: 0x10x8CC(0x1)(None)
	uint8                                        bUseBPUpdatedHealth : 1;                           // Mask: 0x2, PropSize: 0x10x8CC(0x1)(None)
	uint8                                        BitPad_1A0 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_234F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPOverrideDescriptiveName : 1;                 // Mask: 0x1, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bUseBPOverrideDescriptiveNameForPreview : 1;       // Mask: 0x2, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bPreventCreationOfDynamicMaterials : 1;            // Mask: 0x4, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        BitPad_1A1 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2351[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPrimalStructureSnapPoint>     SnapPoints;                                        // 0x8D8(0x10)(ZeroConstructor)
	int32                                        bTraceCheckOnlyUseStructuresWithTypeFlags;         // 0x8E8(0x4)(None)
	uint8                                        AllowStructureColorSets[0x6];                      // 0x8EC(0x6)(None)
	uint8                                        Pad_2352[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               WaterVolumeCheckPointOffset;                       // 0x8F8(0x18)(None)
	float                                        WaterPlacementMinimumWaterHeight;                  // 0x910(0x4)(None)
	float                                        PlacementMaxZDelta;                                // 0x914(0x4)(None)
	float                                        PlacementChooseRotationMaxRangeOverride;           // 0x918(0x4)(None)
	float                                        PlacementAdjustHeightLimitUp;                      // 0x91C(0x4)(None)
	float                                        PlacementAdjustHeightLimitDown;                    // 0x920(0x4)(None)
	float                                        PlacementMaxRange;                                 // 0x924(0x4)(None)
	float                                        MaxSnapLocRange;                                   // 0x928(0x4)(None)
	float                                        SnapOverlapCheckRadius;                            // 0x92C(0x4)(None)
	float                                        MaximumFoundationSupport2DBuildDistance;           // 0x930(0x4)(None)
	float                                        AdditionalFoundationSupportDistanceForLinkedStructures; // 0x934(0x4)(None)
	float                                        PlacementFloorCheckZExtent;                        // 0x938(0x4)(None)
	float                                        LastHealthPercentage;                              // 0x93C(0x4)(None)
	struct FRotator                              TakeGroundNormalRotationOffset;                    // 0x940(0x18)(None)
	float                                        DemolishGiveItemCraftingResourcePercentage;        // 0x958(0x4)(None)
	uint8                                        bDestroyOnStasisUnlessPrevented : 1;               // Mask: 0x1, PropSize: 0x10x95C(0x1)(None)
	uint8                                        BitPad_1A2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2354[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalStructure>        AllowReplacementByStructureClassType;              // 0x960(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalStructure>        PreventReplacementOfStructureClassType;            // 0x990(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> PreventReplacementOfStructureClassTypes;           // 0x9C0(0x10)(ZeroConstructor)
	struct FVector                               ReplacementCheckOffset;                            // 0x9D0(0x18)(None)
	float                                        MaximumHeightAboveWorldGround;                     // 0x9E8(0x4)(None)
	float                                        MaximumHeightUnderWorldMaxKillZ;                   // 0x9EC(0x4)(None)
	struct FRotator                              PreviewCameraRotation;                             // 0x9F0(0x18)(None)
	struct FVector                               PreviewCameraPivotOffset;                          // 0xA08(0x18)(None)
	float                                        PreviewCameraDistanceScaleFactor;                  // 0xA20(0x4)(None)
	float                                        PreviewCameraDefaultZoomMultiplier;                // 0xA24(0x4)(None)
	float                                        PreviewCameraMaxZoomMultiplier;                    // 0xA28(0x4)(None)
	uint8                                        bPreviewApplyColorToChildComponents : 1;           // Mask: 0x1, PropSize: 0x10xA2C(0x1)(None)
	uint8                                        BitPad_1A3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2355[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReturnDamageAmount;                                // 0xA30(0x4)(None)
	int32                                        StructureRangeTypeFlag;                            // 0xA34(0x4)(None)
	TArray<class FName>                          StructureRangeTags;                                // 0xA38(0x10)(None)
	int32                                        LimitMaxStructuresInRangeTypeFlag;                 // 0xA48(0x4)(None)
	float                                        ReturnDamageImpulse;                               // 0xA4C(0x4)(None)
	class UClass*                                ReturnDamageType;                                  // 0xA50(0x8)(ZeroConstructor)
	TArray<class UClass*>                        ReturnDamageExcludeIncomingTypes;                  // 0xA58(0x10)(ZeroConstructor)
	TArray<class UClass*>                        ReturnDamageOnlyForIncomingTypes;                  // 0xA68(0x10)(ZeroConstructor)
	int32                                        OwningPlayerID;                                    // 0xA78(0x4)(None)
	uint8                                        Pad_2356[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OwningPlayerName;                                  // 0xA80(0x10)(None)
	double                                       LastInAllyRangeTime;                               // 0xA90(0x8)(None)
	double                                       PickupAllowedBeforeNetworkTime;                    // 0xA98(0x8)(None)
	float                                        DecayDestructionPeriodMultiplier;                  // 0xAA0(0x4)(None)
	uint8                                        Pad_2357[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPrimalStructureSnapPointOverride     PreviewSnapOverride;                               // 0xAA8(0x88)(ZeroConstructor)
	TWeakObjectPtr<class APrimalDinoCharacter>   SaddleDino;                                        // 0xB30(0x8)(ZeroConstructor)
	TArray<class APrimalDinoCharacter*>          LatchedDinos;                                      // 0xB38(0x10)(ZeroConstructor)
	class UMaterialInterface*                    PreviewMaterial;                                   // 0xB48(0x8)(ZeroConstructor)
	class UMaterialInterface*                    PreviewMaterialMasked;                             // 0xB50(0x8)(ZeroConstructor)
	TArray<class UMaterialInstanceDynamic*>      PreviewMaterialInstances;                          // 0xB58(0x10)(ZeroConstructor)
	class FName                                  PreviewMaterialColorParamName;                     // 0xB68(0x8)(None)
	TArray<class APrimalStructure*>              LinkedStructures;                                  // 0xB70(0x10)(ZeroConstructor)
	TArray<uint32>                               LinkedStructuresID;                                // 0xB80(0x10)(None)
	TArray<class APrimalStructure*>              StructuresPlacedOnFloor;                           // 0xB90(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> SnapToStructureTypesToExclude;                     // 0xBA0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> SnapFromStructureTypesToExclude;                   // 0xBB0(0x10)(ZeroConstructor)
	TArray<class FName>                          SnapToStructureTagsToExclude;                      // 0xBC0(0x10)(None)
	TArray<class FName>                          SnapFromStructureTagsToExclude;                    // 0xBD0(0x10)(None)
	class APrimalStructure*                      PlacedOnFloorStructure;                            // 0xBE0(0x8)(ZeroConstructor)
	class APrimalStructure*                      PrimarySnappedStructureChild;                      // 0xBE8(0x8)(ZeroConstructor)
	class APrimalStructure*                      PrimarySnappedStructureParent;                     // 0xBF0(0x8)(ZeroConstructor)
	class FString                                OwnerName;                                         // 0xBF8(0x10)(None)
	int16                                        StructureColors[0x6];                              // 0xC08(0xC)(None)
	uint8                                        Pad_235C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 AttachedTo;                                        // 0xC18(0x8)(ZeroConstructor)
	uint32                                       StructureID;                                       // 0xC20(0x4)(None)
	uint32                                       AttachedToDinoID1;                                 // 0xC24(0x4)(None)
	TArray<TSoftClassPtr<class APrimalStructure>> OnlyAllowStructureClassesToAttach;                 // 0xC28(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> OnlyAllowStructureClassesFromAttach;               // 0xC38(0x10)(ZeroConstructor)
	uint8                                        Pad_235E[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    StructureIconMaterial;                             // 0xC78(0x8)(ZeroConstructor)
	struct FVector                               AdvancedRotationPlacementOffset;                   // 0xC80(0x18)(None)
	class UClass*                                SpawnEmitter;                                      // 0xC98(0x8)(ZeroConstructor)
	class UClass*                                DestructionEmitter;                                // 0xCA0(0x8)(ZeroConstructor)
	struct FVector                               SpawnEmitterLocationOffset;                        // 0xCA8(0x18)(None)
	struct FRotator                              SpawnEmitterRotationOffset;                        // 0xCC0(0x18)(None)
	class UClass*                                PickupGivesItem;                                   // 0xCD8(0x8)(ZeroConstructor)
	float                                        ExcludeInStructuresRadius;                         // 0xCE0(0x4)(None)
	uint8                                        Pad_235F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ExcludeInStructuresRadiusClasses;                  // 0xCE8(0x10)(ZeroConstructor)
	TArray<class FName>                          ExcludeInStructuresRadiusTags;                     // 0xCF8(0x10)(None)
	uint8                                        Pad_2360[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStructurePaintingComponent*           PaintingComponent;                                 // 0xD20(0x8)(ZeroConstructor)
	TArray<class FString>                        PreventBuildStructureReasonStringOverrides;        // 0xD28(0x10)(None)
	struct FVector                               FloatingHudLocTextOffset;                          // 0xD38(0x18)(None)
	float                                        UsablePriority;                                    // 0xD50(0x4)(None)
	uint8                                        Pad_2362[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ForceLimitStructuresInRange;                       // 0xD60(0x4)(None)
	uint8                                        bPreventAttachToSaddle : 1;                        // Mask: 0x1, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bForcePersonalStructureOwnership : 1;              // Mask: 0x2, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bBPOverrideAllowStructureAccess : 1;               // Mask: 0x4, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bBPOverideDemolish : 1;                            // Mask: 0x8, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bUseBPOnDemolish : 1;                              // Mask: 0x10, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bBPOverrideAllowSnappingWith : 1;                  // Mask: 0x20, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bBPOverrideAllowSnappingWithButAlsoCallSuper : 1;  // Mask: 0x40, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bUseBPOnLinkedStructureDestroyed : 1;              // Mask: 0x80, PropSize: 0x10xD64(0x1)(None)
	uint8                                        bUseTribeGroupStructureRank : 1;                   // Mask: 0x1, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bForceBlockStationaryTraces : 1;                   // Mask: 0x2, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bAttachToStaticMeshSocket : 1;                     // Mask: 0x4, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bAttachToStaticMeshSocketRotation : 1;             // Mask: 0x8, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bForceGroundForFoundation : 1;                     // Mask: 0x10, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bBPOverrideSnappedToTransform : 1;                 // Mask: 0x20, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bBPOverrideSnappedFromTransform : 1;               // Mask: 0x40, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bBPOverridePlacementRotation : 1;                  // Mask: 0x80, PropSize: 0x10xD65(0x1)(None)
	uint8                                        bDisableStructureOnElectricStorm : 1;              // Mask: 0x1, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bNoCollision : 1;                                  // Mask: 0x2, PropSize: 0x10xD66(0x1)(None)
	uint8                                        BitPad_1A5 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsPreviewStructure : 1;                           // Mask: 0x8, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bStructureUseAltCollisionChannel : 1;              // Mask: 0x10, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bDemolishJustDestroy : 1;                          // Mask: 0x20, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bHighPriorityDemolish : 1;                         // Mask: 0x40, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bDisableSnapStructure : 1;                         // Mask: 0x80, PropSize: 0x10xD66(0x1)(None)
	uint8                                        bTriggerBPUnstasis : 1;                            // Mask: 0x1, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bBlueprintDrawHUD : 1;                             // Mask: 0x2, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bBlueprintDrawPreviewHUD : 1;                      // Mask: 0x4, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bUsesWorldSpaceMaterial : 1;                       // Mask: 0x8, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bForceIgnoreStationaryObjectTrace : 1;             // Mask: 0x10, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bForceAllowNearSupplyCrateSpawns : 1;              // Mask: 0x20, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bBPPostSetStructureCollisionChannels : 1;          // Mask: 0x40, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bPickupGiveItemRequiresAccess : 1;                 // Mask: 0x80, PropSize: 0x10xD67(0x1)(None)
	uint8                                        bUseBPAllowPickupGiveItem : 1;                     // Mask: 0x1, PropSize: 0x10xD68(0x1)(None)
	uint8                                        bPreventAttachedChildStructures : 1;               // Mask: 0x2, PropSize: 0x10xD68(0x1)(None)
	uint8                                        BitPad_1A6 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2367[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PlacementMaterialForwardDirIndex;                  // 0xD6C(0x4)(None)
	uint8                                        bPreventPreviewIfWeaponPlaced : 1;                 // Mask: 0x1, PropSize: 0x10xD70(0x1)(None)
	uint8                                        bStructuresInRangeTypeFlagUseAltCollisionChannel : 1; // Mask: 0x2, PropSize: 0x10xD70(0x1)(None)
	uint8                                        BitPad_1A7 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIgnoredByTargeting : 1;                           // Mask: 0x8, PropSize: 0x10xD70(0x1)(None)
	uint8                                        BitPad_1A8 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2368[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForcePreventPlacingInOfflineRaidStructuresRadius;  // 0xD74(0x4)(None)
	class FName                                  AttachToStaticMeshSocketNameBase;                  // 0xD78(0x8)(None)
	struct FVector                               AttachToStaticMeshSocketMinScaleDefault;           // 0xD80(0x18)(None)
	TMap<class FName, struct FVector>            AttachToStaticMeshSocketMinScaleOverrides;         // 0xD98(0x50)(None)
	class UClass*                                StructureHarvestingComponent;                      // 0xDE8(0x8)(ZeroConstructor)
	class UPrimalHarvestingComponent*            MyStructureHarvestingComponent;                    // 0xDF0(0x8)(ZeroConstructor)
	uint8                                        Pad_2369[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ItemsUseAlternateActorClassAttachment;             // 0xE08(0x8)(ZeroConstructor)
	float                                        UnstasisAutoDestroyAfterTime;                      // 0xE10(0x4)(None)
	uint8                                        TribeGroupStructureRank;                           // 0xE14(0x1)(None)
	uint8                                        Pad_236A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        PreventSaddleDinoClasses;                          // 0xE18(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AllowSaddleDinoClasses;                            // 0xE28(0x10)(ZeroConstructor)
	class FName                                  PlaceOnWallUseStaticMeshTag;                       // 0xE38(0x8)(None)
	TSoftClassPtr<class APrimalStructure>        SnapStructureClass;                                // 0xE40(0x30)(ZeroConstructor)
	float                                        DemolishActivationTime;                            // 0xE70(0x4)(None)
	uint8                                        Pad_236B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               GroundEncroachmentCheckLocationOffset;             // 0xE78(0x18)(None)
	int32                                        StructureMinAllowedVersion;                        // 0xE90(0x4)(None)
	int32                                        SavedStructureMinAllowedVersion;                   // 0xE94(0x4)(None)
	float                                        OverrideEnemyFoundationPreventionRadius;           // 0xE98(0x4)(None)
	float                                        OverridePVPEnemyFoundationPreventionRadius;        // 0xE9C(0x4)(None)
	float                                        ExpandEnemyFoundationPreventionRadius;             // 0xEA0(0x4)(None)
	int32                                        BedID;                                             // 0xEA4(0x4)(None)
	TArray<class UClass*>                        ForceAllowWallAttachmentClasses;                   // 0xEA8(0x10)(ZeroConstructor)
	float                                        LimitMaxStructuresInRangeRadius;                   // 0xEB8(0x4)(None)
	uint8                                        Pad_236C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        FastDecayLinkedStructureClasses;                   // 0xEC0(0x10)(ZeroConstructor)
	float                                        PlacementMaxZAbovePlayerHeight;                    // 0xED0(0x4)(None)
	uint8                                        Pad_236D[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USceneComponent*>               OverrideTargetComponents;                          // 0xEE0(0x10)(ZeroConstructor)
	float                                        OverrideApproachRadius;                            // 0xEF0(0x4)(None)
	uint8                                        Pad_236E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionType*                          OwnerMission;                                      // 0xEF8(0x8)(ZeroConstructor)
	uint8                                        bBPCheckItemRequiementsToBuild : 1;                // Mask: 0x1, PropSize: 0x10xF00(0x1)(None)
	uint8                                        BitPad_1A9 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_236F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemNetID                            PlaceUsingItemID;                                  // 0xF04(0x8)(None)
	uint8                                        Pad_2370[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          CustomDataModifiedOnStructurePickup;               // 0xF10(0x10)(None)
	uint8                                        bUseBPGetAggroDinoOnDamageSettings : 1;            // Mask: 0x1, PropSize: 0x10xF20(0x1)(None)
	uint8                                        BitPad_1AA : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanAttachToExosuit : 1;                           // Mask: 0x4, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bCanBeStoredByExosuit : 1;                         // Mask: 0x8, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bStructureIgnoreDying : 1;                         // Mask: 0x10, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bClientReceivedStructuresPlacedOnFloor : 1;        // Mask: 0x20, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bHasAnyStructuresPlacedOnFloor : 1;                // Mask: 0x40, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bUseBPPreventCharacterBasing : 1;                  // Mask: 0x80, PropSize: 0x10xF20(0x1)(None)
	uint8                                        bDontSetDynamicObstacle : 1;                       // Mask: 0x1, PropSize: 0x10xF21(0x1)(None)
	uint8                                        bDontSetDamageParameters : 1;                      // Mask: 0x2, PropSize: 0x10xF21(0x1)(None)
	uint8                                        bBedUsesDefaultDestination : 1;                    // Mask: 0x4, PropSize: 0x10xF21(0x1)(None)
	uint8                                        bAllowRegisterSkeletalMeshesOnDedicatedServer : 1; // Mask: 0x8, PropSize: 0x10xF21(0x1)(None)
	uint8                                        bUseInfiniteStaticMeshDrawDistance : 1;            // Mask: 0x10, PropSize: 0x10xF21(0x1)(None)
	uint8                                        BitPad_1AB : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFloorDontHideGrass;                               // 0xF22(0x1)(None)
	uint8                                        Pad_2371[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FloorHideGrassTraceToGroundDistanceNonFoundation;  // 0xF24(0x4)(None)
	uint8                                        Pad_2372[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            RenameIcon;                                        // 0xF38(0x8)(ZeroConstructor)
	class UTexture2D*                            PickupIcon;                                        // 0xF40(0x8)(ZeroConstructor)
	class UTexture2D*                            DemolishIcon;                                      // 0xF48(0x8)(ZeroConstructor)
	class UTexture2D*                            RepairIcon;                                        // 0xF50(0x8)(ZeroConstructor)
	class UTexture2D*                            CantRepairIcon;                                    // 0xF58(0x8)(ZeroConstructor)
	class UTexture2D*                            ColorizeIcon;                                      // 0xF60(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenContainerIcon;                                 // 0xF68(0x8)(ZeroConstructor)
	class UTexture2D*                            ClaimIcon;                                         // 0xF70(0x8)(ZeroConstructor)
	class UTexture2D*                            UseSoapIcon;                                       // 0xF78(0x8)(ZeroConstructor)
	class UTexture2D*                            ShowRangeIcon;                                     // 0xF80(0x8)(ZeroConstructor)
	class UTexture2D*                            HideRangeIcon;                                     // 0xF88(0x8)(ZeroConstructor)
	class UTexture2D*                            LockIcon;                                          // 0xF90(0x8)(ZeroConstructor)
	class UTexture2D*                            UnlockIcon;                                        // 0xF98(0x8)(ZeroConstructor)
	class UTexture2D*                            SetPinCodeIcon;                                    // 0xFA0(0x8)(ZeroConstructor)
	class UTexture2D*                            ClearPinCodeIcon;                                  // 0xFA8(0x8)(ZeroConstructor)
	class UTexture2D*                            EnterPinCodeIcon;                                  // 0xFB0(0x8)(ZeroConstructor)
	class UTexture2D*                            SetPinCodeInRangeIcon;                             // 0xFB8(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableAdminOnlyAccess;                             // 0xFC0(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableAdminOnlyAccess;                            // 0xFC8(0x8)(ZeroConstructor)
	class UTexture2D*                            TribeRankSettingsIcon;                             // 0xFD0(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    TribeActivationRankSelectionIcons;                 // 0xFD8(0x10)(ZeroConstructor)
	class UTexture2D*                            VariantsFolderIcon;                                // 0xFE8(0x8)(ZeroConstructor)
	class UTexture2D*                            DefaultVariantIcon;                                // 0xFF0(0x8)(ZeroConstructor)
	uint8                                        bHasWindSourceComponentsToInteractWithVolumetricDispatcher : 1; // Mask: 0x1, PropSize: 0x10xFF8(0x1)(None)
	uint8                                        Pad_2373[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructure* GetDefaultObj();

	void UpdateTribeGroupStructureRank(uint8 NewRank);
	void UpdateStructureMesh();
	void UpdateStencilValuesWithStenilDepth(enum class EStencilAlliance InAlliance);
	void UpdateStencilValues();
	void UpdatedHealth(bool bDoReplication);
	void TickPlacingStructure(class APrimalStructurePlacer* PlacerActor, float DeltaTime, bool ReturnValue);
	void StartRepair();
	void SpawnZiplineActors(class APrimalStructure* ZiplineAnchor0, class APrimalStructure* ZiplineAnchor1);
	void SnapsAreOptional(bool ReturnValue);
	void SetZiplineStructurePointers(class APrimalStructure* Structure0, class APrimalStructure* Structure1);
	void SetVariant(class FName VariantTag, bool bForceSet, bool ReturnValue);
	void SetupDynamicMeshMaterials(class UMeshComponent* MeshComp);
	void SetStructureColorValue(int32 ColorRegionIndex, int32 SetVal);
	void SetStaticMobility();
	void SetPreventSaving(bool bPrevent);
	void SetHarvestingActive(bool bActive, bool bOverrideBaseHealth, float BaseHarvestHealthMult, bool bAssignToTribe, int32 AssignedToTribeID);
	void SetEnabledPrimarySnappedStructureParent(bool bEnabled);
	void SetEnabled(bool bEnabled);
	void SetDynamicMobility();
	void SetDefaultDestinationStructure(class APrimalStructure* DestinationStructure, class AShooterPlayerController* ForPC);
	void SetContainerActive(bool bNewActive);
	void SetBoundsScale(float NewScale);
	void SetBedEnabled(bool bEnabled);
	void RefreshStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, class FName BoneName, bool bFlipped, bool ReturnValue);
	void RefreshStructureColors(class UMeshComponent* ForceRefreshComponent);
	void PreviewCulledStructures(const TArray<class APrimalStructure*>& InOutStructuresOnFloor, const TArray<class APrimalStructure*>& ReturnValue);
	void PrepareAsPlacementPreview();
	void PickupStructureAndDependingLinkedStructures(class APlayerController* ForPC, bool IsFirstPickup);
	void PickupStructure(bool bIsQuickPickup, class AShooterPlayerController* PC, class UPrimalItem* ReturnValue);
	void OverrideOwner(class AActor* NewOwner, bool ForceOnlyRelevantToOwner);
	void OnStructurePlacementRefreshed();
	void OnRep_StructureColors();
	void OnRep_CurrentVariantTag();
	void NonPlayerFinalStructurePlacement(int32 PlacementTargetingTeam, int32 PlacementOwningPlayerID, const class FString& PlacementOwningPlayerName, class APrimalStructure* ForcePrimaryParent);
	void NetUpdateTeamAndOwnerName(int32 NewTeam, const class FString& NewOwnerName);
	void NetUpdateOriginalOwnerNameAndID(int32 NewOriginalOwnerID, const class FString& NewOriginalOwnerName);
	void NetSpawnCoreStructureDeathActor();
	void NetSetIgnoreDestructionEffects(bool bNewIgnoreDestructionEffects);
	void NetResetClientReceivedStructuersPlacedOnFloors();
	void NetDoSpawnEffects();
	void MultiSetPickupAllowedBeforeNetworkTime(double NewTime);
	void MultiRefreshVariantSettings(class FName NewVariantTag);
	void MultiAddStructuresPlacedOnFloor(class APrimalStructure* Structure);
	void LinkStructure(class APrimalStructure* NewLinkedStructure);
	void IsValidSnapPointTo(class APrimalStructure* ChildStructure, int32 MySnapPointToIndex, bool ReturnValue);
	void IsValidSnapPointFrom(class APrimalStructure* ParentStructure, int32 MySnapPointFromIndex, bool ReturnValue);
	void IsValidForSnappingFrom(class APrimalStructure* OtherStructure, bool ReturnValue);
	void IsRepairAllowed(bool ReturnValue);
	void IsPointObstructedByWorldGeometry(class UWorld* ForWorld, const struct FVector& ThePoint, bool bIgnoreTerrain, bool bOnlyCheckTerrain, bool bIgnoreFoliage, float OBSTRUCTION_CHECK_DIST, bool ReturnValue);
	void IsPointNearSupplyCrateSpawn(class UWorld* TheWorld, const struct FVector& AtPoint, bool ReturnValue);
	void IsPinLocked(bool ReturnValue);
	void IsOnlyLinkedToFastDecayStructures(bool ReturnValue);
	void IsLinkedToWaterOrPowerSource(bool ReturnValue);
	void IsAllowedToDemolish(class AShooterPlayerController* ForPC, bool ReturnValue);
	void IsAllowedToBuild(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FPlacementData& OutPlacementData, bool bDontAdjustForMaxRange, const struct FRotator& PlayerViewRotation, bool bFinalPlacement, bool bUseOriginalOutPlacementData, int32 ReturnValue);
	void GetTooltipStructureInfoBP(class AShooterPlayerController* PlayerOwner, const TArray<struct FTooltipTextInfo>& ReturnValue);
	void GetTooltipStructureInfo(class AShooterPlayerController* PlayerOwner, const TArray<struct FTooltipTextInfo>& ReturnValue);
	void GetStructuresInRange(class UWorld* TheWorld, const struct FVector& AtLocation, float WithinRange, class UClass* StructureClass, const TArray<class APrimalStructure*>& StructuresOut, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure);
	void GetStructureMeshAndTransform(class FName VariantTag, const struct FTransform& MeshTransform, class UStaticMesh* ReturnValue);
	void GetStructureColorValue(int32 ColorRegionIndex, int32 ReturnValue);
	void GetStructureColor(int32 ColorRegionIndex, const struct FLinearColor& ReturnValue);
	void GetSnapPointName(int32 SnapPointIndex, class FName ReturnValue);
	void GetPinCode(int32 ReturnValue);
	void GetPhysMaterialOverride(class UPhysicalMaterial* ReturnValue);
	void GetPaintingTexture(class UPaintingTexture* ReturnValue);
	void GetPaintingStaticMesh(class UStaticMeshComponent* ReturnValue);
	void GetNumStructuresInRangeStructureTypeFlag(class UWorld* TheWorld, const struct FVector& AtLocation, int32 TypeFlag, const TArray<class FName>& StructureTags, float WithinRange, bool bCheckBPCountStructureInRange, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure, bool bCheckWithAltCollisionChannel, class APrimalDinoCharacter* OnSaddleDino, int32 ForTeam, int32 ReturnValue);
	void GetNearbyStructuresOfClass(class UWorld* World, class UClass* StructureClass, const struct FVector& Location, float Range, const TArray<class APrimalStructure*>& Structures);
	void GetDefaultVariant(const struct FStructureVariant& ReturnValue);
	void GetDefaultDestinationID(int32 ReturnValue);
	void GetDayCycleManager(class ADayCycleManager* ReturnValue);
	void GetClosestStructureToPoint(class UWorld* ForWorld, const struct FVector& AtPoint, float OverlapRadius, class APrimalStructure* ReturnValue);
	void GetBedID(int32 ReturnValue);
	void GetBedFilterClass(class UClass* ReturnValue);
	void GetAttachedToShip(class APrimalStructure* ReturnValue);
	void GetAdditionalComponentsForDyePreview(const TArray<class UStaticMeshComponent*>& ReturnValue);
	void ForceReplicateLinkedStructures();
	void FinalStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, class FName BoneName, bool bFlipped, const struct FPlacementData& PlacementData, bool ReturnValue);
	void DisableStructurePickup();
	void DestroyStructuresPlacedOnFloor();
	void DemolishStructureAndDependingLinkedStructures(class APlayerController* ForPC, TMap<class UClass*, int32> CollectedResources, bool IsFirst, bool bUseResourceMap);
	void Demolish(class APlayerController* ForPC, class AActor* DamageCauser);
	void DelayedDisableSnapParent();
	void CreateDynamicMaterials(class UMeshComponent* ForceCreateForComponent);
	void ClientUpdateLinkedStructures(const TArray<uint32>& NewLinkedStructures);
	void ClearStructureLinks(class APlayerController* ForPC);
	void ClearCustomColors();
	void CanPickupStructureFromRecentPlacement(bool ReturnValue);
	void CanBeStoredByExosuit(class AShooterPlayerController* ForPC, bool ReturnValue);
	void CanAttachToExosuit(class AShooterPlayerController* ForPC, bool ReturnValue);
	void CallDrawHUD(class AShooterHUD* HUD);
	void CallDrawFloatingHUD(class AShooterHUD* HUD);
	void BPUseCountStructureInRange(bool ReturnValue);
	void BPUpdatedHealth(bool bDoReplication);
	void BPUnstasis();
	void BPTriggerStasisEvent();
	void BPTreatAsFoundationForSnappedStructure(class APrimalStructure* OtherStructure, const struct FPlacementData& WithPlacementData, bool ReturnValue);
	void BPStructurePreGetMultiUseEntries(class APlayerController* ForPC);
	void BPRefreshedStructureColors();
	void BPPreventUsingAsFloorForStructure(const struct FPlacementData& TheOutPlacementData, class APrimalStructure* StructureToPlaceOnMe, bool ReturnValue);
	void BPPreventStasis(bool ReturnValue);
	void BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime, class APrimalStructure* FromStructure, bool ReturnValue);
	void BPPreventPlacingStructureOntoMe(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FHitResult& ForHitResult, bool ReturnValue);
	void BPPreventPlacingOnFloorStructure(const struct FPlacementData& TheOutPlacementData, class APrimalStructure* FloorStructure, bool ReturnValue);
	void BPPreventPlacementOnPawn(class APlayerController* PC, class APrimalCharacter* ForCharacter, class FName ForBone, bool ReturnValue);
	void BPPreventCharacterBasing(class AActor* OtherActor, class UPrimitiveComponent* BasedOnComponent, bool ReturnValue);
	void BPPostSetStructureCollisionChannels();
	void BPPostLoadedFromSaveGame();
	void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void BPPlacedStructure(class APlayerController* ForPC);
	void BPOverrideTargetLocation(const struct FVector& AttackPos, const struct FVector& ReturnValue);
	void BPOverrideSnappedToTransform(class APrimalStructure* ChildStructure, int32 ChildSnapFromIndex, class FName ChildSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int32 SnapToIndex, class FName SnapToName, const struct FVector& OutLocation, const struct FRotator& OutRotation, int32 bForceInvalidateSnap, bool ReturnValue);
	void BPOverrideSnappedFromTransform(class APrimalStructure* ParentStructure, int32 ParentSnapFromIndex, class FName ParentSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int32 SnapToIndex, class FName SnapToName, const struct FVector& OutLocation, const struct FRotator& OutRotation, int32 bForceInvalidateSnap, bool ReturnValue);
	void BPOverridePlacementRotation(const struct FVector& ViewPos, const struct FRotator& ViewRot, const struct FRotator& ReturnValue);
	void BPOverrideDescriptiveNameForPreview(const class FString& ReturnValue);
	void BPOverrideDescriptiveName(const class FString& ReturnValue);
	void BPOverrideDemolish(class AShooterPlayerController* ForPC, bool ReturnValue);
	void BPOverrideCantBuildReasonString(int32 CantBuildReason, const class FString& ReturnValue);
	void BPOverrideAllowStructureAccess(class AShooterPlayerController* ForPC, bool bIsAccessAllowed, bool bForInventoryOnly, bool ReturnValue);
	void BPOnVariantSwitch(class FName NewVariantTag);
	void BPOnStructurePickup(class APlayerController* PlayerController, class UClass* ItemType, class UPrimalItem* NewlyPickedUpItem, bool bIsQuickPickup);
	void BPOnLinkedStructureDestroyed(class APrimalStructure* DestroyedStructure);
	void BPOnDemolish(class APlayerController* ForPC, class AActor* DamageCauser);
	void BPNotifyAmmoBoxReloadedStructure(class APrimalStructure* ReloadedStructure);
	void BPNetRefreshStructureColors(bool bUseColors);
	void BPIsAllowedToBuildEx(const struct FPlacementData& OutPlacementData, int32 CurrentAllowedReason, class APlayerController* PC, bool bFinalPlacement, bool bChoosingRotation, int32 ReturnValue);
	void BPIsAllowedToBuild(const struct FPlacementData& OutPlacementData, int32 CurrentAllowedReason, int32 ReturnValue);
	void BPImpactEffect(const struct FHitResult& HitRes, const struct FVector& ShootDirection, bool ReturnValue);
	void BPHandleStructureEnabled(bool bEnabled);
	void BPHandleBedFastTravel(class AShooterPlayerController* ForPC, class APrimalStructure* ToBed, bool ReturnValue);
	void BPGetStructureID(class APrimalStructure* PrimalStructure, int32 ReturnValue);
	void BPGetSnapToPlacementMeshOverride(class APrimalStructure* ChildStructure, const struct FPlacementData& OutPlacementData, class UStaticMesh* OutMeshOverride, class UClass* OutClassOverride, const struct FVector& PreviewLocOffset, const struct FRotator& PreviewRotOffset, const struct FVector& PreviewScaleOffset);
	void BPGetSnapPoints(const TArray<struct FPrimalStructureSnapPoint>& ReturnValue);
	void BPGetSnapFromPlacementMeshOverride(class APrimalStructure* ParentStructure, const struct FPlacementData& OutPlacementData, class UStaticMesh* OutMeshOverride, class UClass* OutClassOverride, const struct FVector& PreviewLocOffset, const struct FRotator& PreviewRotOffset, const struct FVector& PreviewScaleOffset);
	void BPGetInfoFromConsumedItemForPlacedStructure(class UPrimalItem* ItemToConsumed);
	void BPGetFromID(class UWorld* World, int32 TheStructureID, class APrimalStructure* ReturnValue);
	void BPGetAmmoBoxReloadPercent(float ReturnValue);
	void BPGetAllLinkedStructures(const TArray<class APrimalStructure*>& OutLinkedStructures, class UClass* StructureClass);
	void BPGetAggroDinoOnDamageSettings(const TArray<class FName>& AggroDinoClassesCustomTags, float AggroDinoClassesRange);
	void BPForceConsideredEnemyFoundation(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FVector& TestAtLocation, bool ReturnValue);
	void BPDefaultProcessEditText(class AShooterPlayerController* ForPC, const class FString& TextToUse, bool CheckedBox);
	void BPCheckItemRequiementsToBuild(class UPrimalItem* ItemToConsumed, int32 ReturnValue);
	void BPBeginPreview();
	void BPApplyCustomDurabilityOnPickup(class UPrimalItem* PickedUp);
	void BPAllowSwitchToVariant(class FName VariantTag, bool ReturnValue);
	void BPAllowSnapRotationForStructure(int32 ThisSnapPointIndex, class FName ThisSnapPointName, class APrimalStructure* OtherStructure, int32 OtherStructureSnapPointIndex, class FName OtherStructureSnapPointName, bool ReturnValue);
	void BPAllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC, bool ReturnValue);
	void BPAllowPickupGiveItem(class APlayerController* ForPC, bool ReturnValue);
	void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
	void BlueprintDrawPreviewHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
	void BlueprintDrawHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
	void BlueprintAnimNotifyCustomEvent(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void ApplyPrimalItemSettingsToStructure(class UMeshComponent* MeshToColorize, class UPrimalItem* AssociatedPrimalItem);
	void AllowStructureAccess(class APlayerController* ForPC, bool ReturnValue);
	void AllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC, bool ReturnValue);
};

// 0x460 (0x1460 - 0x1000)
// Class ShooterGame.PrimalStructureItemContainer
class APrimalStructureItemContainer : public APrimalStructure
{
public:
	class UPrimalInventoryComponent*             MyInventoryComponent;                              // 0x1000(0x8)(ZeroConstructor)
	uint8                                        bAdjustDamageAsPlayerWithEquipment : 1;            // Mask: 0x1, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bUseCollisionCompsForFloatingDPS : 1;              // Mask: 0x2, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bOnlyConsumeDurabilityOnEquipmentForEnemies : 1;   // Mask: 0x4, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bAutoActivateContainer : 1;                        // Mask: 0x8, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bCanToggleActivation : 1;                          // Mask: 0x10, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bAutoActivateWhenFueled : 1;                       // Mask: 0x20, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bAllowCustomName : 1;                              // Mask: 0x40, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bContainerActivated : 1;                           // Mask: 0x80, PropSize: 0x10x1008(0x1)(None)
	uint8                                        bOnlyUseSpoilingMultipliersIfActivated : 1;        // Mask: 0x1, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bCraftingSubstractConnectedWater : 1;              // Mask: 0x2, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bForceNoPinLocking : 1;                            // Mask: 0x4, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bServerBPNotifyInventoryItemChanges : 1;           // Mask: 0x8, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bClientBPNotifyInventoryItemChanges : 1;           // Mask: 0x10, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bDisplayActivationOnInventoryUI : 1;               // Mask: 0x20, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bUseBPGetFuelConsumptionMultiplier : 1;            // Mask: 0x40, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bPreventToggleActivation : 1;                      // Mask: 0x80, PropSize: 0x10x1009(0x1)(None)
	uint8                                        bServerBPNotifyInventoryItemChangesUseQuantity : 1; // Mask: 0x1, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bStartedUnderwater : 1;                            // Mask: 0x2, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bCheckStartedUnderwater : 1;                       // Mask: 0x4, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bDisplayActivationOnInventoryUISecondary : 1;      // Mask: 0x8, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bDisplayActivationOnInventoryUITertiary : 1;       // Mask: 0x10, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bFuelAllowActivationWhenNoPower : 1;               // Mask: 0x20, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bPoweredAllowBattery : 1;                          // Mask: 0x40, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bPoweredUsingBattery : 1;                          // Mask: 0x80, PropSize: 0x10x100A(0x1)(None)
	uint8                                        bPoweredHasBattery : 1;                            // Mask: 0x1, PropSize: 0x10x100B(0x1)(None)
	uint8                                        bPoweredAllowSolar : 1;                            // Mask: 0x2, PropSize: 0x10x100B(0x1)(None)
	uint8                                        bPoweredUsingSolar : 1;                            // Mask: 0x4, PropSize: 0x10x100B(0x1)(None)
	uint8                                        bUseColorRegionForEmitterColor : 1;                // Mask: 0x8, PropSize: 0x10x100B(0x1)(None)
	uint8                                        BitPad_1AE : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        SolarRefreshIntervalMin;                           // 0x100C(0x4)(None)
	float                                        SolarRefreshIntervalMax;                           // 0x1010(0x4)(None)
	float                                        SolarRefreshInterval;                              // 0x1014(0x4)(None)
	double                                       LastSolarRefreshTime;                              // 0x1018(0x8)(None)
	class UClass*                                BatteryClassOverride;                              // 0x1020(0x8)(ZeroConstructor)
	int32                                        PoweredOverrideCounter;                            // 0x1028(0x4)(None)
	uint8                                        UseBPApplyPinCode : 1;                             // Mask: 0x1, PropSize: 0x10x102C(0x1)(None)
	uint8                                        BitPad_1AF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23C2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            ActivateMaterials;                                 // 0x1030(0x10)(ZeroConstructor)
	TArray<class UMaterialInterface*>            InActivateMaterials;                               // 0x1040(0x10)(ZeroConstructor)
	TArray<struct FItemToDisplayInStructureTooltip> ItemsToDisplayInStructureTooltip;                  // 0x1050(0x10)(ZeroConstructor)
	class UChildActorComponent*                  MyChildEmitterSpawnable;                           // 0x1060(0x8)(ZeroConstructor)
	uint8                                        bIsLocked : 1;                                     // Mask: 0x1, PropSize: 0x10x1068(0x1)(None)
	uint8                                        bIsPinLocked : 1;                                  // Mask: 0x2, PropSize: 0x10x1068(0x1)(None)
	uint8                                        bHasFuel : 1;                                      // Mask: 0x4, PropSize: 0x10x1068(0x1)(None)
	uint8                                        bIsUnderwater : 1;                                 // Mask: 0x8, PropSize: 0x10x1068(0x1)(None)
	uint8                                        BitPad_1B0 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23C3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                BoxName;                                           // 0x1070(0x10)(None)
	int32                                        MaxBoxNameLength;                                  // 0x1080(0x4)(None)
	uint8                                        bDisableActivationUnderwater : 1;                  // Mask: 0x1, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bForcePreventAutoActivateWhenConnectedToWater : 1; // Mask: 0x2, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bSupportsLocking : 1;                              // Mask: 0x4, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bSupportsPinLocking : 1;                           // Mask: 0x8, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bDropInventoryOnDestruction : 1;                   // Mask: 0x10, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bDestroyWhenAllItemsRemoved : 1;                   // Mask: 0x20, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bDrinkingWater : 1;                                // Mask: 0x40, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bPoweredWaterSourceWhenActive : 1;                 // Mask: 0x80, PropSize: 0x10x1084(0x1)(None)
	uint8                                        bActiveRequiresPower : 1;                          // Mask: 0x1, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bIsPowerJunction : 1;                              // Mask: 0x2, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bHidePowerJunctionConnection : 1;                  // Mask: 0x4, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bAutoActivateIfPowered : 1;                        // Mask: 0x8, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bLastToggleActivated : 1;                          // Mask: 0x10, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bSupportsPinActivation : 1;                        // Mask: 0x20, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bIsPowered : 1;                                    // Mask: 0x40, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bOnlyAllowTeamActivation : 1;                      // Mask: 0x80, PropSize: 0x10x1085(0x1)(None)
	uint8                                        bReplicateItemFuelClass : 1;                       // Mask: 0x1, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bUseOpenSceneAction : 1;                           // Mask: 0x2, PropSize: 0x10x1086(0x1)(None)
	uint8                                        BitPad_1B1 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPActivated : 1;                               // Mask: 0x8, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bUseBPCanBeActivated : 1;                          // Mask: 0x10, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bUseBPCanBeActivatedByPlayer : 1;                  // Mask: 0x20, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bBPOnContainerActiveHealthDecrease : 1;            // Mask: 0x40, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bBPIsValidWaterSourceForPipe : 1;                  // Mask: 0x80, PropSize: 0x10x1086(0x1)(None)
	uint8                                        bAllowAutoActivateWhenNoPower : 1;                 // Mask: 0x1, PropSize: 0x10x1087(0x1)(None)
	uint8                                        bAutoActivateWhenNoPower : 1;                      // Mask: 0x2, PropSize: 0x10x1087(0x1)(None)
	uint8                                        bPreventUsingAsWirelessCraftingSource : 1;         // Mask: 0x4, PropSize: 0x10x1087(0x1)(None)
	uint8                                        BitPad_1B2 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        InsulationRange;                                   // 0x1088(0x4)(None)
	float                                        HyperThermiaInsulation;                            // 0x108C(0x4)(None)
	float                                        HypoThermiaInsulation;                             // 0x1090(0x4)(None)
	float                                        ContainerActiveDecreaseHealthSpeed;                // 0x1094(0x4)(None)
	float                                        FuelConsumptionIntervalsMultiplier;                // 0x1098(0x4)(None)
	float                                        DropInventoryOnDestructionLifespan;                // 0x109C(0x4)(None)
	class FString                                ActivateContainerString;                           // 0x10A0(0x10)(None)
	class UTexture2D*                            ActivateContainerIcon;                             // 0x10B0(0x8)(ZeroConstructor)
	class FString                                DeactivateContainerString;                         // 0x10B8(0x10)(None)
	class UTexture2D*                            DeactivateContainerIcon;                           // 0x10C8(0x8)(ZeroConstructor)
	class UClass*                                ContainerActiveHealthDecreaseDamageTypePassive;    // 0x10D0(0x8)(ZeroConstructor)
	TArray<class UClass*>                        ActiveRequiresFuelItems;                           // 0x10D8(0x10)(ZeroConstructor)
	TArray<float>                                FuelItemsConsumeInterval;                          // 0x10E8(0x10)(None)
	TArray<class UClass*>                        FuelItemsConsumedGiveItems;                        // 0x10F8(0x10)(ZeroConstructor)
	double                                       NetDestructionTime;                                // 0x1108(0x8)(None)
	uint32                                       CurrentPinCode;                                    // 0x1110(0x4)(None)
	uint8                                        Pad_23C5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       CurrentFuelTimeCache;                              // 0x1118(0x8)(None)
	double                                       LastCheckedFuelTime;                               // 0x1120(0x8)(None)
	int32                                        LinkedPowerJunctionStructureID;                    // 0x1128(0x4)(None)
	int32                                        CurrentItemCount;                                  // 0x112C(0x4)(None)
	int32                                        BlacklistedItemCount;                              // 0x1130(0x4)(None)
	int32                                        MaxItemCount;                                      // 0x1134(0x4)(None)
	int32                                        EmitterColorRegionIndex;                           // 0x1138(0x4)(None)
	TWeakObjectPtr<class APrimalStructure>       LinkedPowerJunctionStructure;                      // 0x113C(0x8)(ZeroConstructor)
	uint8                                        Pad_23C6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                NextConsumeFuelGiveItemType;                       // 0x1148(0x8)(ZeroConstructor)
	uint8                                        Pad_23C7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastActiveStateChangeTime;                         // 0x1158(0x8)(None)
	uint8                                        Pad_23C8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPrimalMapMarkerEntryData             MapMarkerLocationInfo;                             // 0x1168(0x28)(None)
	uint8                                        Pad_23C9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BasedCharacterDamageInterval;                      // 0x1198(0x4)(None)
	float                                        BasedCharacterDamageAmount;                        // 0x119C(0x4)(None)
	class UClass*                                BasedCharacterDamageType;                          // 0x11A0(0x8)(ZeroConstructor)
	class UClass*                                EngramRequirementClassOverride;                    // 0x11A8(0x8)(ZeroConstructor)
	class AActor*                                LinkedBlueprintSpawnActorPoint;                    // 0x11B0(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalStructureItemContainer> PoweredNearbyStructureTemplate;                    // 0x11B8(0x30)(ZeroConstructor)
	float                                        PoweredNearbyStructureRange;                       // 0x11E8(0x4)(None)
	uint8                                        Pad_23CA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       JunctionLinkParticleTemplate;                      // 0x11F0(0x8)(ZeroConstructor)
	class UClass*                                UISceneTemplate;                                   // 0x11F8(0x8)(ZeroConstructor)
	class FString                                OpenSceneActionName;                               // 0x1200(0x10)(None)
	class UTexture2D*                            OpenSceneActionIcon;                               // 0x1210(0x8)(ZeroConstructor)
	class FString                                DisabledOpenSceneActionName;                       // 0x1218(0x10)(None)
	class UTexture2D*                            DisabledOpenSceneActionIcon;                       // 0x1228(0x8)(ZeroConstructor)
	class UClass*                                RequiresItemForOpenSceneAction;                    // 0x1230(0x8)(ZeroConstructor)
	uint8                                        bRequiresItemExactClass : 1;                       // Mask: 0x1, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bDestroyWhenAllItemsRemovedExceptDefaults : 1;     // Mask: 0x2, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bInventoryForcePreventRemoteAddItems : 1;          // Mask: 0x4, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bInventoryForcePreventItemAppends : 1;             // Mask: 0x8, PropSize: 0x10x1238(0x1)(None)
	uint8                                        BitPad_1B4 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseDeathCacheCharacterID : 1;                     // Mask: 0x20, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bHideAutoActivateToggle : 1;                       // Mask: 0x40, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bUseCooldownOnTransferAll : 1;                     // Mask: 0x80, PropSize: 0x10x1238(0x1)(None)
	uint8                                        bUseAmmoContainerBuff : 1;                         // Mask: 0x1, PropSize: 0x10x1239(0x1)(None)
	uint8                                        BitPad_1B5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23CD[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       DeathCacheCreationTime;                            // 0x1240(0x8)(None)
	uint8                                        Pad_23CE[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              JunctionLinkCableParticle;                         // 0x1260(0x8)(ZeroConstructor)
	struct FVector                               JunctionCableBeamOffsetStart;                      // 0x1268(0x18)(None)
	struct FVector                               JunctionCableBeamOffsetEnd;                        // 0x1280(0x18)(None)
	class USoundBase*                            ContainerActivatedSound;                           // 0x1298(0x8)(ZeroConstructor)
	class USoundBase*                            ContainerDeactivatedSound;                         // 0x12A0(0x8)(ZeroConstructor)
	class UClass*                                DemolishInventoryDepositClass;                     // 0x12A8(0x8)(ZeroConstructor)
	class UClass*                                FuelItemTrueClass;                                 // 0x12B0(0x8)(ZeroConstructor)
	class UClass*                                ReplicatedFuelItemClass;                           // 0x12B8(0x8)(ZeroConstructor)
	float                                        CurrentFuelQuantity;                               // 0x12C0(0x4)(None)
	uint8                                        bDrawFuelRemaining : 1;                            // Mask: 0x1, PropSize: 0x10x12C4(0x1)(None)
	uint8                                        BitPad_1B6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23CF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DrawFuelRemainingOffset;                           // 0x12C8(0x4)(None)
	float                                        TimeCooldownRequestFuelRemaining;                  // 0x12CC(0x4)(None)
	int16                                        ReplicatedFuelItemColorIndex;                      // 0x12D0(0x2)(None)
	uint8                                        Pad_23D0[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFXSystemAsset*                        DefaultParticleTemplate;                           // 0x12D8(0x8)(ZeroConstructor)
	struct FLinearColor                          DefaultParticleLightColor;                         // 0x12E0(0x10)(None)
	class USoundBase*                            DefaultAudioTemplate;                              // 0x12F0(0x8)(ZeroConstructor)
	TArray<class UClass*>                        OverrideParticleTemplateItemClasses;               // 0x12F8(0x10)(ZeroConstructor)
	TArray<class UFXSystemAsset*>                OverrideParticleTemplates;                         // 0x1308(0x10)(ZeroConstructor)
	bool                                         AllowOverrideParticleLightColor;                   // 0x1318(0x1)(None)
	bool                                         bHideUnusedParticleTypesOnRefreshActiveEffects;    // 0x1319(0x1)(None)
	uint8                                        Pad_23D1[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLinearColor>                  OverrideParticleLightColor;                        // 0x1320(0x10)(None)
	TArray<class USoundBase*>                    OverrideAudioTemplates;                            // 0x1330(0x10)(ZeroConstructor)
	float                                        MaxActivationDistance;                             // 0x1340(0x4)(None)
	uint8                                        Pad_23D2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                BoxNamePrefaceString;                              // 0x1348(0x10)(None)
	uint8                                        TribeGroupInventoryRank;                           // 0x1358(0x1)(None)
	uint8                                        bUseBPGetQuantityOfItemWithoutCheckingInventory : 1; // Mask: 0x1, PropSize: 0x10x1359(0x1)(None)
	uint8                                        bUseBPSetPlayerConstructor : 1;                    // Mask: 0x2, PropSize: 0x10x1359(0x1)(None)
	uint8                                        bReplicateLastActivatedTime : 1;                   // Mask: 0x4, PropSize: 0x10x1359(0x1)(None)
	uint8                                        bIsAmmoContainer : 1;                              // Mask: 0x8, PropSize: 0x10x1359(0x1)(None)
	uint8                                        bServerBPNotifyInventoryItemChangesUseSwapped : 1; // Mask: 0x10, PropSize: 0x10x1359(0x1)(None)
	uint8                                        bBPNotifyRemoteViewerChange : 1;                   // Mask: 0x20, PropSize: 0x10x1359(0x1)(None)
	uint8                                        BitPad_1B7 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23D3[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                FuelConsumeDecreaseDurabilityAmounts;              // 0x1360(0x10)(None)
	float                                        RandomFuelUpdateTimeMin;                           // 0x1370(0x4)(None)
	float                                        RandomFuelUpdateTimeMax;                           // 0x1374(0x4)(None)
	double                                       LastDeactivatedTime;                               // 0x1378(0x8)(None)
	double                                       LastActivatedTime;                                 // 0x1380(0x8)(None)
	float                                        ValidCraftingResourceMaxDurability;                // 0x1388(0x4)(None)
	float                                        ActivationCooldownTime;                            // 0x138C(0x4)(None)
	uint64                                       DeathCacheCharacterID;                             // 0x1390(0x8)(None)
	class UParticleSystemComponent*              LocalCorpseEmitter;                                // 0x1398(0x8)(ZeroConstructor)
	float                                        SinglePlayerFuelConsumptionIntervalsMultiplier;    // 0x13A0(0x4)(None)
	float                                        PoweredBatteryDurabilityToDecreasePerSecond;       // 0x13A4(0x4)(None)
	float                                        DropInventoryDepositTraceDistance;                 // 0x13A8(0x4)(None)
	uint8                                        Pad_23D4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FPrimalWirelessReferences> WirelessExchangeRefs;                              // 0x13B0(0x50)(ZeroConstructor)
	TArray<TWeakObjectPtr<class AShooterPlayerController>> ValidatedByPinCodePlayerControllers;               // 0x1400(0x10)(ZeroConstructor)
	uint8                                        Pad_23D5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseMeshOriginForInventoryAccessTrace : 1;         // Mask: 0x1, PropSize: 0x10x1418(0x1)(None)
	uint8                                        BitPad_1B8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23D6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ActivatedIconColor;                                // 0x141C(0x4)(None)
	struct FColor                                DeactivatedIconColor;                              // 0x1420(0x4)(None)
	uint8                                        Pad_23D7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            EnableUnpoweredAutoActivationIcon;                 // 0x1428(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableUnpoweredAutoActivationIcon;                // 0x1430(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableAutoCraftIcon;                               // 0x1438(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableAutoCraftIcon;                              // 0x1440(0x8)(ZeroConstructor)
	class UTexture2D*                            AllowWirelessCraftingIcon;                         // 0x1448(0x8)(ZeroConstructor)
	class UTexture2D*                            PreventWirelessCraftingIcon;                       // 0x1450(0x8)(ZeroConstructor)
	class UTexture2D*                            DrinkWaterIcon;                                    // 0x1458(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer* GetDefaultObj();

	void VerifyPinCode(int32 PinCode, bool ReturnValue);
	void UpdateTribeGroupInventoryRank(uint8 NewRank);
	void UpdateSolarPower();
	void UpdateContainerActiveHealthDecrease();
	void TryActivation();
	void SetPoweredOverrideCounter(int32 NewPoweredOverrideCounter);
	void RemovePowerJunctionLinkParticle();
	void RefreshWatered();
	void RefreshPowerJunctionLink();
	void RefreshPowered(class APrimalStructureItemContainer* InDirectPower);
	void RefreshInventoryItemCounts();
	void OnContainerRenamed();
	void NetUpdateLocation(const struct FVector& NewLocation);
	void NetUpdateBoxName(const class FString& NewName);
	void NetSetContainerActive(bool bSetActive, class UClass* NetReplicatedFuelItemClass, int16 NetReplicatedFuelItemColorIndex);
	void NetRefreshActiveEffects();
	void MovePowerJunctionLink();
	void IsValidForDinoFeedingContainer(class APrimalDinoCharacter* ForDino, bool ReturnValue);
	void IsValidatedPinCodePlayerController(class APlayerController* ForPC, bool ReturnValue);
	void IsPlayerControllerInPinCodeValidationList(class APlayerController* PlayerController, bool ReturnValue);
	void HasSamePinCode(class APrimalStructureItemContainer* OtherContainer, bool ReturnValue);
	void GetTimeFuelRemaining(float ReturnValue);
	void GetOverrideParticleLightColor(const struct FLinearColor& ReturnValue);
	void GetDeathCacheCharacterID(int32 ReturnValue);
	void EnableActive();
	void CanBeActivated(bool ReturnValue);
	void BPSetPlayerConstructor(class APlayerController* PC);
	void BPRename(const class FString& NewName);
	void BPPreGetMultiUseEntries(class APlayerController* ForPC);
	void BPOnContainerActiveHealthDecrease();
	void BPNotifyRemoteViewerChange(bool bOpened);
	void BPNotifyPowerChanged();
	void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* TheItem, bool bEquipItem);
	void BPIsValidWaterSourceForPipe(class APrimalStructureWaterPipe* ForWaterPipe, bool ReturnValue);
	void BPIncrementItemCountQty(class UClass* ItemTemplate, int32 Qty, bool bRequireExactClassMatch, int32 ReturnValue);
	void BPGetQuantityOfItemWithoutCheckingInventory(class UClass* ItemToCheckFor, bool bRequireExactClassMatch, int32 ReturnValue);
	void BPGetItemCountQty(class UClass* ItemTemplate, bool bRequireExactClassMatch, int32 ReturnValue);
	void BPGetFuelConsumptionMultiplier(float ReturnValue);
	void BPGetCollisionCompInstanceInfo(const struct FHitResult& HitInfo, bool bSuccess, bool bUseArmor, enum class EPrimalEquipmentType ArmorType, class FName BoneName);
	void BPDisplayWirelessSupplyLinks(class FName WirelessTag, const TArray<class APrimalStructureItemContainer*>& SupplyLinks);
	void BPContainerDeactivated();
	void BPContainerActivated();
	void BPCanBeActivatedByPlayer(class AShooterPlayerController* PC, bool ReturnValue);
	void BPCanBeActivated(bool ReturnValue);
	void BPApplyPinCode(class AShooterPlayerController* ForPC, int32 AppledPinCode, bool bIsSetting, int32 TheCustomIndex, bool ReturnValue);
	void AllowToggleActivation(class AShooterPlayerController* ForPC, bool ReturnValue);
	void AdjustNetDestructionTime(float Delta, bool ReturnValue);
	void AddToValidatedByPinCodePlayerControllers(class AShooterPlayerController* ForPC, int32 ReturnValue);
	void AddPowerJunctionLinkParticle(class APrimalStructure* MyOutlet);
};

// 0xC0 (0x1520 - 0x1460)
// Class ShooterGame.MissionDispatcher
class AMissionDispatcher : public APrimalStructureItemContainer
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x1460(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              ParticleSystemComponent;                           // 0x1468(0x8)(ZeroConstructor)
	class UPrimalInventoryComponent*             TheInventoryComponent;                             // 0x1470(0x8)(ZeroConstructor)
	TArray<class AActor*>                        MissionActors;                                     // 0x1478(0x10)(ZeroConstructor)
	TArray<class UClass*>                        MissionTypes;                                      // 0x1488(0x10)(ZeroConstructor)
	int32                                        AutoStartMissionTypesIndex;                        // 0x1498(0x4)(None)
	enum class EMissionDispatcherTriggerMode     MissionDispatcherTriggerMode;                      // 0x149C(0x1)(None)
	uint8                                        Pad_23EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          AdditionalMissionTriggerKeys;                      // 0x14A0(0x10)(None)
	uint8                                        bAllowConcurrentMissions : 1;                      // Mask: 0x1, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bAllowJoinMissionInProgress : 1;                   // Mask: 0x2, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bForceStartMission : 1;                            // Mask: 0x4, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPCanSpawnMission : 1;                         // Mask: 0x8, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPGetMissionStartLocation : 1;                 // Mask: 0x10, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPOnMissionStarted : 1;                        // Mask: 0x20, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPActivateMissionActors : 1;                   // Mask: 0x40, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPDeactivateMissionActors : 1;                 // Mask: 0x80, PropSize: 0x10x14B0(0x1)(None)
	uint8                                        bUseBPOnRunningMissionDeactivated : 1;             // Mask: 0x1, PropSize: 0x10x14B1(0x1)(None)
	uint8                                        bUseBPOverrideMultiUseMissionList : 1;             // Mask: 0x2, PropSize: 0x10x14B1(0x1)(None)
	uint8                                        bParticleSystemActiveOnlyWhenMissionNotRunning : 1; // Mask: 0x4, PropSize: 0x10x14B1(0x1)(None)
	uint8                                        bUseMissionMetaTags : 1;                           // Mask: 0x8, PropSize: 0x10x14B1(0x1)(None)
	uint8                                        BitPad_1BB : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23EB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionType*                          RunningMission;                                    // 0x14B8(0x8)(ZeroConstructor)
	float                                        MaxDistanceAllowToStartMission;                    // 0x14C0(0x4)(None)
	uint8                                        Pad_23EC[0x5C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AMissionDispatcher* GetDefaultObj();

	void StartMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, const class FString& OutClientFailureReason, class AMissionType* ReturnValue);
	void OnRunningMissionDeactivated(class AMissionType* Mission);
	void MultiSetParticleSystemActive(bool bIsActive);
	void MultiDeactivateMissionActors();
	void MultiActivateMissionActors();
	void IsValidDispatcherForMissionType(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, bool ReturnValue);
	void GetFallbackSeed(class UClass* ForMission, bool bRemoveSeed, int32 ReturnValue);
	void GenerateFallbackSeeds();
	void ClearFallbackSeeds(class UClass* OptionalForMission);
	void BPOverrideMultiUseMissionList(class APlayerController* ForPC, class AShooterCharacter* StartingCharacter, const TArray<class UClass*>& ReturnValue);
	void BPOnRunningMissionDeactivated(class AMissionType* Mission);
	void BPOnMissionStarted(class AMissionType* NewMission, class AShooterCharacter* StartingCharacter);
	void BPOnMissionFailToStart(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
	void BPGetMissionStartLocation(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, const struct FVector& ReturnValue);
	void BPDeactivateMissionActors();
	void BPCanSpawnMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, bool ReturnValue);
	void BPActivateMissionActors();
	void AddFallbackSeed(class UClass* ForMission, int32 Seed, int32 MaxNumberOfFallbackSeeds);
};

// 0x10 (0x4C8 - 0x4B8)
// Class ShooterGame.MissionDispatcherPoint
class AMissionDispatcherPoint : public AActor
{
public:
	TArray<class FName>                          MissionTags;                                       // 0x4B8(0x10)(None)

	static class UClass* StaticClass();
	static class AMissionDispatcherPoint* GetDefaultObj();

};

// 0x58 (0x410 - 0x3B8)
// Class ShooterGame.MissionDispatcherToolTipWidget
class UMissionDispatcherToolTipWidget : public UToolTipWidget
{
public:
	class FString                                MissionNameLabelName;                              // 0x3B8(0x10)(None)
	class FString                                TitleLabelName;                                    // 0x3C8(0x10)(None)
	class FString                                MissionStatusLabelName;                            // 0x3D8(0x10)(None)
	uint8                                        Pad_23ED[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionDispatcherToolTipWidget* GetDefaultObj();

};

// 0x20 (0x778 - 0x758)
// Class ShooterGame.MissionListEntryWidget
class UMissionListEntryWidget : public UBaseSelectableButtonWidget
{
public:
	class FString                                ItemLabelName;                                     // 0x758(0x10)(None)
	uint8                                        Pad_23EE[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionListEntryWidget* GetDefaultObj();

};

// 0x88 (0xB0 - 0x28)
// Class ShooterGame.MissionMetaTagInfo
class UMissionMetaTagInfo : public UObject
{
public:
	struct FMetaTagIDInfo                        MetaTagInfo[0xB];                                  // 0x28(0x84)(None)
	uint8                                        Pad_23F0[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionMetaTagInfo* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.MissionModuleBase
class UMissionModuleBase : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMissionModuleBase* GetDefaultObj();

	void BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* ForTarget, float ForTargetingDesireValue, float ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.MissionModuleInterface
class IMissionModuleInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IMissionModuleInterface* GetDefaultObj();

	void RunMissionModule(class UClass* ModuleClass, class UNewMissionModuleBase* ReturnValue);
};

// 0x28 (0x358 - 0x330)
// Class ShooterGame.MissionObjectiveEntryWidget
class UMissionObjectiveEntryWidget : public UPrimalUserWidget
{
public:
	class FString                                ItemLabelName;                                     // 0x330(0x10)(None)
	uint8                                        Pad_23F1[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionObjectiveEntryWidget* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.MissionPrerequisite
class UMissionPrerequisite : public UObject
{
public:

	static class UClass* StaticClass();
	static class UMissionPrerequisite* GetDefaultObj();

	void IsSatisfied(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, const class FString& OutReason, bool ReturnValue);
};

// 0x20 (0x350 - 0x330)
// Class ShooterGame.MissionRequirementEntryWidget
class UMissionRequirementEntryWidget : public UPrimalUserWidget
{
public:
	class FString                                DisplayText;                                       // 0x330(0x10)(None)
	class FName                                  CustomTag;                                         // 0x340(0x8)(None)
	uint8                                        Pad_23F6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionRequirementEntryWidget* GetDefaultObj();

	void SetDisplayText(const class FString& Text);
	void SetCustomTag(class FName Tag);
	void Initialize(bool ReturnValue);
};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.PrimalPointNote
class APrimalPointNote : public ANote
{
public:

	static class UClass* StaticClass();
	static class APrimalPointNote* GetDefaultObj();

};

// 0x50 (0x508 - 0x4B8)
// Class ShooterGame.MissionServerSidePoint
class AMissionServerSidePoint : public APrimalPointNote
{
public:
	class FName                                  TriggerKey;                                        // 0x4B8(0x8)(None)
	int32                                        TriggerOrder;                                      // 0x4C0(0x4)(None)
	int32                                        CustomDataInt;                                     // 0x4C4(0x4)(None)
	float                                        CustomDataFloat;                                   // 0x4C8(0x4)(None)
	uint8                                        Pad_23F8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                CustomDataFloatArray;                              // 0x4D0(0x10)(None)
	struct FVector                               CustomDataVector;                                  // 0x4E0(0x18)(None)
	class FString                                CustomDataString;                                  // 0x4F8(0x10)(None)

	static class UClass* StaticClass();
	static class AMissionServerSidePoint* GetDefaultObj();

	void SetTriggerKey(class FName NewTriggerKey);
};

// 0x8 (0x4C0 - 0x4B8)
// Class ShooterGame.SplineActor
class ASplineActor : public AActor
{
public:
	class USplineComponent*                      SplineComponent;                                   // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASplineActor* GetDefaultObj();

};

// 0x60 (0x520 - 0x4C0)
// Class ShooterGame.MissionSpline
class AMissionSpline : public ASplineActor
{
public:
	bool                                         bValidateSpline;                                   // 0x4C0(0x1)(None)
	uint8                                        Pad_23FD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SplineValidationMinTotalLength;                    // 0x4C4(0x4)(None)
	enum class ECollisionChannel                 SplineValidationChannel;                           // 0x4C8(0x1)(None)
	uint8                                        Pad_23FE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SplineValidationNumTracesPerSplineSegment;         // 0x4CC(0x4)(None)
	float                                        SplineValidationDebugDrawDuration;                 // 0x4D0(0x4)(None)
	class FName                                  TriggerKey;                                        // 0x4D4(0x8)(None)
	int32                                        TriggerOrder;                                      // 0x4DC(0x4)(None)
	int32                                        CustomDataInt;                                     // 0x4E0(0x4)(None)
	float                                        CustomDataFloat;                                   // 0x4E4(0x4)(None)
	TArray<float>                                CustomDataFloatArray;                              // 0x4E8(0x10)(None)
	struct FVector                               CustomDataVector;                                  // 0x4F8(0x18)(None)
	class FString                                CustomDataString;                                  // 0x510(0x10)(None)

	static class UClass* StaticClass();
	static class AMissionSpline* GetDefaultObj();

	void SpawnerUpdate(float DeltaTime);
	void FindLocationAndDirectionClosestToWorldLocation(const struct FVector& WorldLocation, const struct FVector& OutLocation, const struct FVector& OutDirection, float OutSplineKey, bool ReturnValue);
};

// 0x10 (0x340 - 0x330)
// Class ShooterGame.MissionTimerWidget
class UMissionTimerWidget : public UPrimalUserWidget
{
public:
	uint8                                        Pad_23FF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMissionTimerWidget* GetDefaultObj();

};

// 0x540 (0xA10 - 0x4D0)
// Class ShooterGame.MissionTrigger
class AMissionTrigger : public ABaseBoxTrigger
{
public:
	uint8                                        Pad_2401[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TriggerKey;                                        // 0x4E0(0x8)(None)
	int32                                        TriggerOrder;                                      // 0x4E8(0x4)(None)
	int32                                        CustomDataInt;                                     // 0x4EC(0x4)(None)
	float                                        CustomDataFloat;                                   // 0x4F0(0x4)(None)
	uint8                                        Pad_2402[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                CustomDataFloatArray;                              // 0x4F8(0x10)(None)
	struct FVector                               CustomDataVector;                                  // 0x508(0x18)(None)
	class FString                                CustomDataString;                                  // 0x520(0x10)(None)
	struct FPointOfInterestData                  MyPointOfInterestData;                             // 0x530(0x1E0)(ZeroConstructor)
	struct FPointOfInterestCompanionBehavior     MyPointOfInterestCompanionBehavior;                // 0x710(0x300)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMissionTrigger* GetDefaultObj();

	void IsPointOfInterestValid(bool ReturnValue);
	void GetMyPointOfInterestData(const struct FPointOfInterestData& ReturnValue);
	void GetMyPointOfInterestCompanionBehavior(const struct FPointOfInterestCompanionBehavior& ReturnValue);
};

// 0x680 (0xB38 - 0x4B8)
// Class ShooterGame.MissionType
class AMissionType : public AActor
{
public:
	class USceneComponent*                       MissionRoot;                                       // 0x4B8(0x8)(ZeroConstructor)
	class UPrimalInventoryComponent*             MissionInventory;                                  // 0x4C0(0x8)(ZeroConstructor)
	int32                                        MissionVersion;                                    // 0x4C8(0x4)(None)
	uint8                                        Pad_2620[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          PrereqMissionTags;                                 // 0x4D0(0x10)(None)
	TArray<class FName>                          PreventsStargingMissionsOfTags;                    // 0x4E0(0x10)(None)
	TArray<class FName>                          BuffTagsThatPreventMission;                        // 0x4F0(0x10)(None)
	TArray<class UClass*>                        UnlockPrequisites;                                 // 0x500(0x10)(ZeroConstructor)
	TArray<class UClass*>                        PrereqMissionTypes;                                // 0x510(0x10)(ZeroConstructor)
	float                                        MissionTimeOfDayUnlockTime;                        // 0x520(0x4)(None)
	float                                        MissionTimeOfDayLockTime;                          // 0x524(0x4)(None)
	enum class EMissionDispatchMode              DispatchMode;                                      // 0x528(0x1)(None)
	uint8                                        Pad_2621[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MissionDispatcherMaxDistance;                      // 0x52C(0x4)(None)
	float                                        MissionWildDinoOutgoingDamageScale;                // 0x530(0x4)(None)
	float                                        MissionWildDinoIncomingDamageScale;                // 0x534(0x4)(None)
	int32                                        MaxPlayerCount;                                    // 0x538(0x4)(None)
	int32                                        MaxDinosPerPlayerAllowedOnMission;                 // 0x53C(0x4)(None)
	float                                        GlobalMissionCooldown;                             // 0x540(0x4)(None)
	float                                        PerPlayerMissionCooldown;                          // 0x544(0x4)(None)
	int32                                        TargetPlayerLevel;                                 // 0x548(0x4)(None)
	int32                                        MinPlayerLevel;                                    // 0x54C(0x4)(None)
	int32                                        MaxPlayerLevel;                                    // 0x550(0x4)(None)
	uint8                                        bSupportsMissionTimeOfDayLocking : 1;              // Mask: 0x1, PropSize: 0x10x554(0x1)(None)
	uint8                                        bOnlyAllowMountsOnMission : 1;                     // Mask: 0x2, PropSize: 0x10x554(0x1)(None)
	uint8                                        bTreatPlayerLevelRangeAsHardCap : 1;               // Mask: 0x4, PropSize: 0x10x554(0x1)(None)
	uint8                                        bUseBPStaticIsPlayerEligibleForMission : 1;        // Mask: 0x8, PropSize: 0x10x554(0x1)(None)
	uint8                                        bAutoSendMissionCompleteNotification : 1;          // Mask: 0x10, PropSize: 0x10x554(0x1)(None)
	uint8                                        bAutoSendMissionCompleteAlert : 1;                 // Mask: 0x20, PropSize: 0x10x554(0x1)(None)
	uint8                                        bAutoRewardLootOnMissionComplete : 1;              // Mask: 0x40, PropSize: 0x10x554(0x1)(None)
	uint8                                        bAutoRewardXPOnMissionComplete : 1;                // Mask: 0x80, PropSize: 0x10x554(0x1)(None)
	uint8                                        bUseBPGetExtraLocalMissionIndicators : 1;          // Mask: 0x1, PropSize: 0x10x555(0x1)(None)
	uint8                                        bMissionPreventsCryoDeploy : 1;                    // Mask: 0x2, PropSize: 0x10x555(0x1)(None)
	uint8                                        bMissionPreventsMekDeploy : 1;                     // Mask: 0x4, PropSize: 0x10x555(0x1)(None)
	uint8                                        bMissionPreventsDinoSpawner : 1;                   // Mask: 0x8, PropSize: 0x10x555(0x1)(None)
	uint8                                        bMissionPreventsFlyers : 1;                        // Mask: 0x10, PropSize: 0x10x555(0x1)(None)
	uint8                                        bMissionPreventsVehicle : 1;                       // Mask: 0x20, PropSize: 0x10x555(0x1)(None)
	uint8                                        bUseBPCanRideMissionDino : 1;                      // Mask: 0x40, PropSize: 0x10x555(0x1)(None)
	uint8                                        bDisabledOnXboxSinglePlayer : 1;                   // Mask: 0x80, PropSize: 0x10x555(0x1)(None)
	uint8                                        bDisabledOnPS4SinglePlayer : 1;                    // Mask: 0x1, PropSize: 0x10x556(0x1)(None)
	uint8                                        BitPad_1D1 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2622[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MissionDisplayName;                                // 0x558(0x10)(None)
	class FString                                MissionDescription;                                // 0x568(0x10)(None)
	class FString                                MissionSuccessMessage;                             // 0x578(0x10)(None)
	struct FLinearColor                          MissionSuccessMessageColor;                        // 0x588(0x10)(None)
	class FString                                MissionFailedMessage;                              // 0x598(0x10)(None)
	struct FLinearColor                          MissionFailedMessageColor;                         // 0x5A8(0x10)(None)
	class FString                                MissionAlertTitle;                                 // 0x5B8(0x10)(None)
	class FString                                MissionInitiatedString;                            // 0x5C8(0x10)(None)
	float                                        MissionCompleteAlertDisplayTime;                   // 0x5D8(0x4)(None)
	uint8                                        Pad_2625[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            MissionIcon;                                       // 0x5E0(0x8)(ZeroConstructor)
	class USoundBase*                            CombatMusicOverride;                               // 0x5E8(0x8)(ZeroConstructor)
	TArray<struct FLootTableEntry>               RewardLootTable;                                   // 0x5F0(0x10)(ZeroConstructor)
	int32                                        RewardItemCount;                                   // 0x600(0x4)(None)
	float                                        RewardXPRatio;                                     // 0x604(0x4)(None)
	int32                                        FirstTimeCompletionHexagonRewardBonus;             // 0x608(0x4)(None)
	int32                                        FirstTimeCompletionHexagonRewardOverride;          // 0x60C(0x4)(None)
	int32                                        HexagonsOnCompletion;                              // 0x610(0x4)(None)
	bool                                         bDivideHexogonsOnCompletion;                       // 0x614(0x1)(None)
	bool                                         bAutoRewardFromCustomItemSets;                     // 0x615(0x1)(None)
	bool                                         bRollExtraLootSetsPerPlayer;                       // 0x616(0x1)(None)
	uint8                                        Pad_2627[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinimumItemSetGenerationRolls;                     // 0x618(0x4)(None)
	bool                                         bEqualRewardsToAllParticipants;                    // 0x61C(0x1)(None)
	uint8                                        Pad_262A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GenerateItemSetsQualityMultiplierMin;              // 0x620(0x4)(None)
	float                                        GenerateItemSetsQualityMultiplierMax;              // 0x624(0x4)(None)
	float                                        MinItemSets;                                       // 0x628(0x4)(None)
	float                                        MaxItemSets;                                       // 0x62C(0x4)(None)
	float                                        NumItemSetsPower;                                  // 0x630(0x4)(None)
	uint8                                        bSetsRandomWithoutReplacement : 1;                 // Mask: 0x1, PropSize: 0x10x634(0x1)(None)
	uint8                                        BitPad_1D2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_262B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSupplyCrateItemSet>           CustomItemSets;                                    // 0x638(0x10)(ZeroConstructor)
	uint8                                        bUseCustomMissionsUIRewardsLabelText : 1;          // Mask: 0x1, PropSize: 0x10x648(0x1)(None)
	uint8                                        BitPad_1D3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_262D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CustomMissionsUIRewardsLabelText;                  // 0x650(0x10)(None)
	class FName                                  InitialMissionPhase;                               // 0x660(0x8)(None)
	TArray<struct FMissionPhase>                 Phases;                                            // 0x668(0x10)(ZeroConstructor)
	TArray<struct FMissionPhaseData>             PhaseData;                                         // 0x678(0x10)(None)
	class UClass*                                MissionInventoryTemplate;                          // 0x688(0x8)(ZeroConstructor)
	class UClass*                                LeaderboardType;                                   // 0x690(0x8)(ZeroConstructor)
	TArray<struct FLeaderboardRow>               DefaultLeaderboardRows;                            // 0x698(0x10)(None)
	TArray<struct FMissionWorldBuffData>         SuccessWorldBuffs;                                 // 0x6A8(0x10)(None)
	TArray<struct FMissionWorldBuffData>         FailureWorldBuffs;                                 // 0x6B8(0x10)(None)
	TArray<class FName>                          DisableTekArmorBuffs;                              // 0x6C8(0x10)(None)
	uint8                                        bAlwaysCreateMissionInventory : 1;                 // Mask: 0x1, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bAutoUpdateRequirements : 1;                       // Mask: 0x2, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bAutoUpdateWorldIndicators : 1;                    // Mask: 0x4, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bUsePerPlayerWorldIndicators : 1;                  // Mask: 0x8, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bUsePerPlayerPhaseRequirements : 1;                // Mask: 0x10, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bAutoDeactivateMissionBuff : 1;                    // Mask: 0x20, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bMissionWeaponsHaveInfiniteAmmo : 1;               // Mask: 0x40, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bUseDinoEvents : 1;                                // Mask: 0x80, PropSize: 0x10x6D8(0x1)(None)
	uint8                                        bDestroyMissionDinosOnDeactivate : 1;              // Mask: 0x1, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bAllowHarvestingMissionDinos : 1;                  // Mask: 0x2, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUsePlayerEvents : 1;                              // Mask: 0x4, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUseInventoryEvents : 1;                           // Mask: 0x8, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUseTriggerEvents : 1;                             // Mask: 0x10, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUseStructureEvents : 1;                           // Mask: 0x20, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUseBPTryCompletePhase : 1;                        // Mask: 0x40, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bUseBPGenerateMissionRewards : 1;                  // Mask: 0x80, PropSize: 0x10x6D9(0x1)(None)
	uint8                                        bDebugWorldIndicators : 1;                         // Mask: 0x1, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bAutoDeactivateMissionWithNoPlayers : 1;           // Mask: 0x2, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bAutoSaveMissionCompleteStatusPerPlayer : 1;       // Mask: 0x4, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bRepeatableMission : 1;                            // Mask: 0x8, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bDisableLevelUpSoundDuringMission : 1;             // Mask: 0x10, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bUseBPOverrideMissionTimerColor : 1;               // Mask: 0x20, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bUseBPOverrideMissionIndicatorString : 1;          // Mask: 0x40, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bForceCompleteOnDeactivate : 1;                    // Mask: 0x80, PropSize: 0x10x6DA(0x1)(None)
	uint8                                        bRemovePlayerFromMissionOnDeath : 1;               // Mask: 0x1, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        bPersistentMission : 1;                            // Mask: 0x2, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        bUseMissionTagAsStringIfLookupFails : 1;           // Mask: 0x4, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        bScaleMinDistanceToWaypointByRotationRate : 1;     // Mask: 0x8, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        BitPad_1D4 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventShowingMissionTime : 1;                    // Mask: 0x20, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        bAllowNegativeMissionStartNetworkTime : 1;         // Mask: 0x40, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        bShowInUI : 1;                                     // Mask: 0x80, PropSize: 0x10x6DB(0x1)(None)
	uint8                                        Pad_2632[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTaggedString>                 CustomMissionRequirements;                         // 0x6E0(0x10)(None)
	uint8                                        bSingletonMission : 1;                             // Mask: 0x1, PropSize: 0x10x6F0(0x1)(None)
	uint8                                        BitPad_1D5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2633[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDistanceToWaypointMultiplier;                   // 0x6F4(0x4)(None)
	int32                                        MissionDebugFlags;                                 // 0x6F8(0x4)(None)
	uint8                                        Pad_2634[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TriggerKeys;                                       // 0x700(0x10)(None)
	float                                        MissionMaxDurationSeconds;                         // 0x710(0x4)(None)
	float                                        MissionDurationConsoleOffsetSeconds;               // 0x714(0x4)(None)
	enum class EMissionTimerMode                 MissionTimerUIMode;                                // 0x718(0x1)(None)
	enum class EMissionTimerMode                 MissionDurationUIMode;                             // 0x719(0x1)(None)
	uint8                                        Pad_2635[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                MissionObjectiveTimeLabelString;                   // 0x720(0x10)(None)
	float                                        LifetimeAfterDeactivated;                          // 0x730(0x4)(None)
	uint8                                        Pad_2636[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTaggedString>                 MissionStrings;                                    // 0x738(0x10)(None)
	class UClass*                                MissionBuffType;                                   // 0x748(0x8)(ZeroConstructor)
	bool                                         bListEntryOnly;                                    // 0x750(0x1)(None)
	bool                                         bUseThrottledTick;                                 // 0x751(0x1)(None)
	uint8                                        Pad_2637[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimeRange                            ThrottledTickTimeRange;                            // 0x754(0x8)(None)
	bool                                         bUseThrottledServerTick;                           // 0x75C(0x1)(None)
	uint8                                        Pad_2638[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimeRange                            ThrottledServerTickTimeRange;                      // 0x760(0x8)(None)
	bool                                         bUseThrottledClientTick;                           // 0x768(0x1)(None)
	uint8                                        Pad_2639[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimeRange                            ThrottledClientTickTimeRange;                      // 0x76C(0x8)(None)
	uint8                                        Pad_263A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     StartedByCharacter;                                // 0x778(0x8)(ZeroConstructor)
	TArray<struct FCharacterAndControllerPair>   PlayersOnMission;                                  // 0x780(0x10)(ZeroConstructor)
	double                                       MissionStartNetworkTime;                           // 0x790(0x8)(None)
	double                                       PostSetupMissionStartNetworkTime;                  // 0x798(0x8)(None)
	enum class EMissionState                     MissionState;                                      // 0x7A0(0x1)(None)
	uint8                                        Pad_263B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            CurrentMissionMusic;                               // 0x7A8(0x8)(ZeroConstructor)
	TArray<class AMissionSpline*>                DinoPathingSplines;                                // 0x7B0(0x10)(ZeroConstructor)
	bool                                         UseDynamicMissionStrings;                          // 0x7C0(0x1)(None)
	uint8                                        Pad_263C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PrepAreaRadius;                                    // 0x7C4(0x4)(None)
	float                                        PrepDuration;                                      // 0x7C8(0x4)(None)
	bool                                         bPrepUseTargetingTeamOfStartingPlayer;             // 0x7CC(0x1)(None)
	enum class ETargetingTeamBehavior            PrepTargetingTeamBehavior;                         // 0x7CD(0x1)(None)
	uint8                                        Pad_263D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PrepAreaEmitter;                                   // 0x7D0(0x8)(ZeroConstructor)
	bool                                         bSetPrepAreaEmitterLifespanToPrepDuration;         // 0x7D8(0x1)(None)
	uint8                                        Pad_263E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       PrepAreaPlayerInclusionParticles;                  // 0x7E0(0x8)(ZeroConstructor)
	bool                                         bPrepAreaAutoSendNotificationToIncludedPlayers;    // 0x7E8(0x1)(None)
	uint8                                        Pad_263F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PrepAreaNotificationPrefix;                        // 0x7F0(0x10)(None)
	class USoundBase*                            MissionSuccessSound;                               // 0x800(0x8)(ZeroConstructor)
	class USoundBase*                            MissionFailedSound;                                // 0x808(0x8)(ZeroConstructor)
	TArray<class FName>                          LevelsToLoad;                                      // 0x810(0x10)(None)
	TArray<class FName>                          LevelsToLoadSinglePlayerAndListenServer;           // 0x820(0x10)(None)
	FMulticastInlineDelegateProperty_            MissionPhaseStartedEvent;                          // 0x830(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            MissionPhaseEndedEvent;                            // 0x840(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            MissionDeactivatedEvent;                           // 0x850(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            MissionResetTimerEvent;                            // 0x860(0x10)(ZeroConstructor)
	class UClass*                                MissionCustomData;                                 // 0x870(0x8)(ZeroConstructor)
	TArray<class APrimalDinoCharacter*>          MissionDinos;                                      // 0x878(0x10)(ZeroConstructor)
	TArray<class APrimalStructure*>              MissionStructures;                                 // 0x888(0x10)(ZeroConstructor)
	uint8                                        Pad_2640[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ADroppedItemMission*>           MissionDroppedItems;                               // 0x8E8(0x10)(ZeroConstructor)
	TArray<struct FTeleportedCharacter>          TeleportedCharacters;                              // 0x8F8(0x10)(ZeroConstructor)
	TArray<struct FPlayerItems>                  PlayerUsableItems;                                 // 0x908(0x10)(ZeroConstructor)
	class AActor*                                MissionDispatcher;                                 // 0x918(0x8)(ZeroConstructor)
	TArray<class AShooterCharacter*>             PlayersPendingAddToMission;                        // 0x920(0x10)(ZeroConstructor)
	uint8                                        Pad_2641[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             Gen2TeleportBuff;                                  // 0x938(0x30)(ZeroConstructor)
	uint8                                        Pad_2642[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MissionPhaseIndex;                                 // 0x988(0x4)(None)
	uint8                                        Pad_2643[0xAC];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseGen2TeleportBuff : 1;                          // Mask: 0x1, PropSize: 0x10xA38(0x1)(None)
	uint8                                        BitPad_1D6 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasRunSetup : 1;                                  // Mask: 0x4, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bSuspendedDueToStasis : 1;                         // Mask: 0x8, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bSaveMissionItemData : 1;                          // Mask: 0x10, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bAbsoluteForcePreventLeavingMission : 1;           // Mask: 0x20, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bHasActivatedSuccessFailureWorldBuffs : 1;         // Mask: 0x40, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bUseBPGetMissionTargetingDesire : 1;               // Mask: 0x80, PropSize: 0x10xA38(0x1)(None)
	uint8                                        bUseBPOverrideRandomWanderLocation : 1;            // Mask: 0x1, PropSize: 0x10xA39(0x1)(None)
	uint8                                        bAllowTargetingOtherMissionDinos : 1;              // Mask: 0x2, PropSize: 0x10xA39(0x1)(None)
	uint8                                        bOnlyReverseTeleportOnMissionDeactivation : 1;     // Mask: 0x4, PropSize: 0x10xA39(0x1)(None)
	uint8                                        bUsesFallbackSeeds : 1;                            // Mask: 0x8, PropSize: 0x10xA39(0x1)(None)
	uint8                                        BitPad_1D7 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2644[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MissionDepositInventoryClass;                      // 0xA40(0x8)(ZeroConstructor)
	double                                       LastThrottledTickEventTime;                        // 0xA48(0x8)(None)
	float                                        CurrentThrottledTickEventInterval;                 // 0xA50(0x4)(None)
	uint8                                        Pad_2645[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastThrottledServerTickEventTime;                  // 0xA58(0x8)(None)
	float                                        CurrentThrottledServerTickEventInterval;           // 0xA60(0x4)(None)
	uint8                                        Pad_2646[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastThrottledClientTickEventTime;                  // 0xA68(0x8)(None)
	float                                        CurrentThrottledClientTickEventInterval;           // 0xA70(0x4)(None)
	uint8                                        Pad_2647[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastAutoSwitchPhaseTime;                           // 0xA78(0x8)(None)
	float                                        CurrentAutoSwitchPhaseInterval;                    // 0xA80(0x4)(None)
	uint8                                        Pad_2648[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          SplineSpanwerTriggerKeys;                          // 0xA90(0x10)(None)
	class FName                                  OnFailureKillAllTamesInTileStreamingVolumeCustomTag; // 0xAA0(0x8)(None)
	TArray<class AMissionSpline*>                SplineSpawners;                                    // 0xAA8(0x10)(ZeroConstructor)
	uint8                                        Pad_2649[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ActivePreventsMissions;                            // 0xB18(0x10)(None)
	TArray<class UObject*>                       ExtraReferences;                                   // 0xB28(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMissionType* GetDefaultObj();

	void UpdateWorldIndicators(bool bForceNetUpdate);
	void UpdateRequirements(bool bForceNetUpdate);
	void UpdateMissionPrepArea(const struct FVector& PrepAreaWorldLocation, float MinUpdateFrequencyInSeconds);
	void TryCompletePhase(bool bForceChange, bool ReturnValue);
	void TryChangeMissionPhase(class FName NewPhase, bool bForceChange, bool ReturnValue);
	void TotalMaxHealth_Players(const TArray<class AShooterCharacter*>& PlayerArray, float ReturnValue);
	void TotalMaxHealth_Dinos(const TArray<class APrimalDinoCharacter*>& DinoArray, float ReturnValue);
	void TotalMaxHealth_Characters(const TArray<class APrimalCharacter*>& CharacterArray, float ReturnValue);
	void TotalCurrentHealth_Players(const TArray<class AShooterCharacter*>& PlayerArray, float ReturnValue);
	void TotalCurrentHealth_Dinos(const TArray<class APrimalDinoCharacter*>& DinoArray, float ReturnValue);
	void TotalCurrentHealth_Characters(const TArray<class APrimalCharacter*>& CharacterArray, float ReturnValue);
	void TeleportCharacterForMission(class APrimalCharacter* Character, const struct FVector& NewLocation, bool bOverrideRotation, const struct FRotator& RotationOverride, bool bForceSetReturnLocation, bool bWasMountedDino, bool bSkipDinoFailChecks, bool ReturnValue);
	void SuspendMission();
	void StopMissionMusic();
	void StaticOnReplicatedMissionDataUpdated(class APrimalBuff_MissionData* MissionData);
	void StaticOnMissionDataInitialized(class APrimalBuff_MissionData* MissionData);
	void StaticGetTaggedString(class UClass* MissionType, class FName Tag, const class FString& OutString, bool ReturnValue);
	void SpawnMissionWeapon(class AShooterCharacter* ForPlayer, class UClass* WeaponItem, float ItemQuality, bool AutoEquip, class AShooterWeapon* ReturnValue);
	void SpawnMissionStructure(class UClass* StructureType, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AShooterPlayerController* OwnerPlayerController, int32 TargetingTeamOverride, class APrimalStructure* ReturnValue);
	void SpawnMissionItem(class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int32 QuantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FVector& WorldLocation, const struct FRotator& WorldRotation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride, class ADroppedItemMission* ReturnValue);
	void SpawnMissionDinoGroupExtended(int32 NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const TArray<struct FDinoSetup>& DinoSetups, enum class ESpawnPattern Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bRandomizeDinos, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck, bool bDoOverlapCheck, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void SpawnMissionDinoGroup(int32 NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, enum class ESpawnPattern Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void SpawnMissionDino(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck, bool bDoOverlapCheck, class APrimalDinoCharacter* ReturnValue);
	void SpawnMission(class UObject* WorldContextObject, class UClass* MissionType, class AShooterCharacter* ForCharacter, const struct FVector& Location, const class FString& FailureReason, class AActor* MissionDispatcherActor, bool bForceSpawn, class AMissionType* ReturnValue);
	void SpawnEmitterForPlayers(const TArray<class AShooterCharacter*>& Players, class UClass* EmitterType, const struct FTransform& EmitterTransform, float EmitterLifespan);
	void SortMissionWorldIndicatorArrayByDistance(const struct FVector& WorldLocation, class APrimalCharacter* ForCharacter, bool bReverseSort, const TArray<struct FMissionWorldIndicator>& InOutWorldIndicators);
	void SetupMissionPrepArea(const struct FVector& PrepAreaWorldLocation, const struct FRotator& PrepAreaEmitterRotation, const struct FVector& PrepAreaEmitterScale);
	void SetSpecificSplineKeyTarget(class APrimalDinoCharacter* ForDino, int32 Index);
	void SetReverseTeleportReturnLocation(class APrimalCharacter* Character, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetPlayerPrepAreaState(class AShooterCharacter* PlayerPawn, bool bInsidePrepArea);
	void SetPlayerParticleSystemIndicator(class AShooterCharacter* PlayerPawn, class UParticleSystem* IndicatorParticles, float RemoveAfterDuration, bool bForceNetUpdate);
	void SetPhaseStartedDelegate(class FName PhaseName, FDelegateProperty_ Delegate);
	void SetPhaseEndedDelegate(class FName PhaseName, FDelegateProperty_ Delegate);
	void SetPhaseCompleted(int32 PhaseIndex, bool bCompleted);
	void SetMissionTimeRemaining(float SecondsRemaining);
	void SetMissionMusic(class USoundBase* LoopingMusicTrack);
	void SetMissionDeactivationTimer(float NumSeconds);
	void SetMissionCompletedStatus(class AShooterCharacter* PlayerCharacter, bool bCompleted, bool bUseOverrideVersion, int32 OverrideVersion, bool bUseOverrideCompleteUtcTime, double CompleteUtcTime, bool ReturnValue);
	void SetDinoAITargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget, float AcceptableRadius, bool ReturnValue);
	void SetDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget, bool ReturnValue);
	void SetDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget, bool ReturnValue);
	void ServerRequestToggleWeapon(class AShooterCharacter* Character);
	void SendNotificationToPlayer(class AShooterCharacter* Player, class FName StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
	void SendNotificationToAllPlayers(class FName StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
	void SendMissionAlertToPlayer(class AShooterCharacter* Player, enum class EMissionAlertType AlertType, const class FString& AlertTitle, const TArray<struct FMissionAlertEntry>& AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
	void SendMissionAlertToAllPlayers(enum class EMissionAlertType AlertType, const class FString& AlertTitle, const TArray<struct FMissionAlertEntry>& AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
	void ReverseTeleportCharacter(class APrimalCharacter* Character, bool ReturnValue);
	void ResetSplinePoints(class APrimalDinoCharacter* ForDino);
	void ResetMissionTimer();
	void RemovePlayerUsableItem(class AShooterCharacter* Character, const struct FItemNetID& ItemID);
	void RemovePlayerFromMission(class AShooterCharacter* PlayerCharacter, bool bCompletedSuccessfully, bool bRemoveSilently);
	void RemoveItemsFromInventory_Balanced(bool bIsBalanced, const TArray<class APrimalCharacter*>& FromCharacters, class UClass* ItemClass, int32 TotalAmountToRemove, bool bMoveToMissionInventory, bool bOnlyRemoveIfEnough, bool bExactClassMatch, bool bIgnoreHotbar, int32 ReturnValue);
	void RemoveItemsFromInventory(class UPrimalInventoryComponent* Inventory, class UClass* ItemClass, int32 AmountToRemove, bool bMoveToMissionInventory, bool bExactClassMatch, bool bIgnoreHotbar, int32 ReturnValue);
	void ReAddPlayerFromReconnect(class AShooterCharacter* Player);
	void ReactivateSuspendedMission();
	void RacePlayerData_SetTargetCheckpoint(const TArray<struct FRacePlayerData>& InOutPlayerData, int32 PlayerIndex, int32 NewTargetCheckpoint);
	void RacePlayerData_SetCheckpointData(const TArray<struct FRacePlayerData>& InOutPlayerData, int32 PlayerIndex, int32 CheckpointIndex, bool bCheckpointReached, float CheckpointTime);
	void RacePlayerData_NumCheckpoints(const TArray<struct FRacePlayerData>& PlayerData, int32 ReturnValue);
	void RacePlayerData_Initialize(const TArray<struct FRacePlayerData>& InOutPlayerData, const TArray<class AShooterPlayerController*>& Controllers, int32 NumCheckpoints);
	void RacePlayerData_IndexOfController(const TArray<struct FRacePlayerData>& PlayerData, class AShooterPlayerController* Controller, int32 ReturnValue);
	void RacePlayerData_GetTargetCheckpoint(const TArray<struct FRacePlayerData>& PlayerData, int32 PlayerIndex, int32 ReturnValue);
	void RacePlayerData_GetPlayerRanking(const TArray<struct FRacePlayerData>& PlayerData, const struct FVector& MissionStartLocation, const TArray<class AMissionTrigger*>& Checkpoints, int32 PlayerIndex, int32 ReturnValue);
	void RacePlayerData_GetCheckpointData(const TArray<struct FRacePlayerData>& PlayerData, int32 PlayerIndex, int32 CheckpointIndex, bool bCheckpointReached, float CheckpointTime);
	void RacePlayerData_GetAllPlayerRankings(const TArray<struct FRacePlayerData>& PlayerData, const TArray<int32>& OutRankings, const struct FVector& MissionStartLocation, const TArray<class AMissionTrigger*>& Checkpoints);
	void RacePlayerData_FixupControllers(const TArray<struct FRacePlayerData>& InOutPlayerData, bool ReturnValue);
	void RaceClosestPlayerToCheckpoint(const TArray<struct FRacePlayerData>& PlayerData, const struct FVector& MissionStartLocation, const TArray<class AMissionTrigger*>& Checkpoints, int32 A, int32 B, bool ReturnValue);
	void PostLoadWorldFixup();
	void PlayMissionMusic(class USoundBase* LoopingMusicToPlay);
	void OpenLeaderboardsForPlayer(class AShooterCharacter* Player, const TArray<struct FLeaderboardRow>& Rows);
	void OpenLeaderboardsForAllPlayers(const TArray<struct FLeaderboardRow>& Rows);
	void OnUpdateRequirements(class FName PhaseName, const TArray<struct FMissionPhaseRequirement>& NewRequirements);
	void OnThrottledTick(float DeltaTime);
	void OnThrottledServerTick(float DeltaTime);
	void OnThrottledClientTick(float DeltaTime);
	void OnRep_MissionState();
	void OnRep_MissionPhaseIndex();
	void OnPlayerSpawned(class AShooterCharacter* PlayerPawn);
	void OnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, class FName TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, class FName TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnMissionPhaseStarted(class FName OldPhase, class FName NewPhase);
	void OnMissionPhaseEnded(class FName OldPhase, class FName NewPhase);
	void OnInventoryItemRemoved(class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountRemoved);
	void OnInventoryItemAdded(class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountAdded, bool bEquippedItem);
	void NumLivingPlayers(const TArray<class AShooterCharacter*>& PlayerArray, int32 ReturnValue);
	void NumLivingDinos(const TArray<class APrimalDinoCharacter*>& DinoArray, int32 ReturnValue);
	void NumLivingCharacters(const TArray<class APrimalCharacter*>& CharacterArray, int32 ReturnValue);
	void NonStaticGetPhaseRequirementDescription(const struct FMissionPhaseRequirement& Req, const class FString& ReturnValue);
	void MultiResetMissionTimer(double NewMissionStartNetworkTime);
	void MultiMissionStateChange(enum class EMissionState NewState);
	void MultiMissionPhaseStarted(class FName OldPhaseName, class FName NewPhaseName);
	void MultiMissionPhaseEnded(class FName OldPhaseName, class FName NewPhaseName);
	void MissionFindPathAsync(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass, int32 ReturnValue);
	void MissionAI_SetReversPathForDino(class APrimalDinoCharacter* ForDino, bool ShouldReverseAtEnd);
	void MissionAI_SetForcePathSplineForDino(class APrimalDinoCharacter* ForDino, class USplineComponent* Path);
	void MissionAI_IsAtPathDestination(class APrimalDinoCharacter* ForDino, float MaxDistance, const struct FVector& TargetOffset, enum class ECollisionChannel TraceChannel, float DebugDrawDuration, bool ReturnValue);
	void MissionAI_GetTarget(class APrimalDinoCharacter* ForDino, class AActor* ReturnValue);
	void MissionAI_GetMissionFromController(class AActor* ControllerActor, enum class EBoolExecResult OutResult, class AMissionType* Mission, class APrimalDinoCharacter* DinoPawn, class APrimalDinoAIController* DinoController);
	void MissionAI_FindPathToTarget(class APrimalDinoCharacter* ForDino, const struct FVector& NextTargetLocation, bool ReturnValue);
	void ItemToAlertEntry(class UPrimalItem* Item, const struct FMissionAlertEntry& ReturnValue);
	void IsPlayerOnMission(class AShooterCharacter* PlayerCharacter, bool ReturnValue);
	void IsPlayerEligibleForMission(class UClass* MissionType, class APlayerController* Controller, const class FString& Reason, bool ReturnValue);
	void IsPhaseNameValid(class FName Name, bool ReturnValue);
	void IsPhaseComplete(class FName PhaseName, bool ReturnValue);
	void IsMissionComplete(class AShooterCharacter* ForCharacter, class AShooterPlayerController* ForController, bool ReturnValue);
	void IsMetaDataMissionType(class UObject* WorldContextObject, class UClass* MissionType, bool ReturnValue);
	void IsFriendlyWithAnyTargetingTeam(class APrimalCharacter* Character, const TArray<int32>& TargetingTeams, bool ReturnValue);
	void IsFriendlyWithAllTargetingTeams(class APrimalCharacter* Character, const TArray<int32>& TargetingTeams, bool ReturnValue);
	void IsActive(bool ReturnValue);
	void HasPlayerCompletedMissionByTag(class FName MissionTagName, class AShooterCharacter* Character, int32 VersionCompleted, double UtcTimeCompleted, bool ReturnValue);
	void HasPlayerCompletedMission(class UClass* MissionType, class AShooterCharacter* Character, int32 VersionCompleted, double UtcTimeCompleted, bool ReturnValue);
	void GivePlayerXP(class AShooterCharacter* Player, float XPAmount);
	void GivePlayerLoot(class AShooterCharacter* Player, const TArray<struct FLootTableEntry>& LootTable, const TArray<class UPrimalItem*>& ReturnValue);
	void GetTargetingTeamsOfAllPlayersOnMission(const TArray<int32>& OutTargetingTeams);
	void GetTaggedString(class FName Tag, const class FString& OutString, bool ReturnValue);
	void GetReverseTeleportReturnLocation(class APrimalCharacter* Character, const struct FVector& ReverseTeleportLocation, const struct FRotator& ReverseTeleportRotation, bool ReturnValue);
	void GetRemainingTime(float ReturnValue);
	void GetRealMissionTagFromMetaData(class UObject* WorldContextObject, class UClass* MissionType, class FName ReturnValue);
	void GetPlayerUsableItems(class AShooterCharacter* Character, const TArray<struct FItemNetID>& OutItemIDs);
	void GetPhaseRequirements(class FName PhaseName, const TArray<struct FMissionPhaseRequirement>& Requirements, class AShooterCharacter* ForPlayer);
	void GetPhaseRequirementProgress(const struct FMissionPhaseRequirement& Req, float ReturnValue);
	void GetPhaseRequirementDescription(class UClass* ForMission, const struct FMissionPhaseRequirement& Req, const class FString& ReturnValue);
	void GetPhaseDisplayText(const class FString& ReturnValue);
	void GetPerPlayerWorldIndicators(class AShooterPlayerController* Controller, class AShooterCharacter* Character, const TArray<struct FMissionWorldIndicator>& WorldIndicators);
	void GetNearbyStructures(class UObject* WorldContextObject, const TArray<class APrimalStructure*>& OutStructures, class UClass* StructureType, bool bExactTypeMatch, const struct FVector& Location, float Radius);
	void GetNearbyPlayersEligibleForMission(class UObject* WorldContextObject, const TArray<class AShooterCharacter*>& OutCharacters, class UClass* MissionType, const struct FVector& Location, float Radius, bool bSortByDistanceToLocation, bool bRespectMissionMaxPlayerCount, int32 InTargetingTeam, enum class ETargetingTeamBehavior TargetingTeamBehavior);
	void GetNearbyPlayersAndTamedDinos(class UObject* WorldContextObject, const TArray<class APrimalCharacter*>& OutCharacters, const struct FVector& Location, float Radius, int32 OnlyFriendlyWithTargetingTeam);
	void GetNearbyPlayers(class UObject* WorldContextObject, const TArray<class AShooterCharacter*>& OutCharacters, const struct FVector& Location, float Radius, int32 OnlyFriendlyWithTargetingTeam);
	void GetNearbyMissionDispatchers(class UObject* WorldContextObject, class UClass* ForMissionType, class AShooterCharacter* ForPlayer, const struct FVector& SearchOrigin, const TArray<class AMissionDispatcher*>& OutDispatchers, float Radius, bool bSortByDistance, bool bRequireMissionInDisaptcher);
	void GetNearbyDinos(class UObject* WorldContextObject, const TArray<class APrimalDinoCharacter*>& OutCharacters, const struct FVector& Location, float Radius, bool bIncludeTamed, bool bIncludeWild, int32 OnlyFriendlyWithTargetingTeam);
	void GetNearbyCharacters(class UObject* WorldContextObject, const TArray<class APrimalCharacter*>& OutCharacters, const struct FVector& Location, float Radius);
	void GetMissionWorldIndicatorWorldLocation(const struct FMissionWorldIndicator& WorldIndicator, class APrimalCharacter* ForCharacter, const struct FVector& ReturnValue);
	void GetMissionWorldIndicatorIcon(const struct FMissionWorldIndicator& WorldIndicator, class UTexture2D* ReturnValue);
	void GetMissionWorldIndicatorDescription(class UClass* FromMissionType, const struct FMissionWorldIndicator& WorldIndicator, const class FString& ReturnValue);
	void GetMissionTagForMission(class UClass* MissionType, class FName ReturnValue);
	void GetMissionTag(class FName ReturnValue);
	void GetMissionLeaderboardRows(const TArray<struct FLeaderboardRow>& OutRows, bool ReturnValue);
	void GetMissionDurationInSeconds(class UClass* MissionType, float ReturnValue);
	void GetMissionDurationFromTag(class FName MissionTag, class AShooterCharacter* Character, const class FString& ReturnValue);
	void GetMissionDisplayName(class APlayerController* ShootCont, const class FString& ReturnValue);
	void GetMissionDataForCharacter(class AShooterCharacter* Character, bool bCreateIfMissing, class APrimalBuff_MissionData* ReturnValue);
	void GetMissionClassName(class FName ReturnValue);
	void GetMissionBuff(class AShooterCharacter* Character, class APrimalBuff* ReturnValue);
	void GetIntFromMissionType(class FName Tag, class AShooterCharacter* PlayerPawn, int32 ReturnValue);
	void GetDispatcherPointLocation(class UObject* WorldContextObject, class UClass* ForMissionType, const struct FVector& ReturnValue);
	void GetDifficultyString(class UWorld* World, const class FString& DiffString, const struct FLinearColor& DiffColor, bool ReturnValue);
	void GetCurrentWorldIndicators(const TArray<struct FMissionWorldIndicator>& WorldIndicators);
	void GetCurrentSplineKeyTarget(class APrimalDinoCharacter* ForDino, int32 ReturnValue);
	void GetCurrentMissionPhaseName(class FName ReturnValue);
	void GetCurrentMissionPhaseIndex(int32 ReturnValue);
	void GetAllPlayersOnMission(const TArray<class AShooterCharacter*>& OutCharacters);
	void GetAllPlayerControllersOnMission(const TArray<class AShooterPlayerController*>& OutControllers);
	void GetAllPlayerControllersInvolvedInMission(const TArray<class AShooterPlayerController*>& OutPlayerControllers);
	void GetAllPlayerCharactersInvolvedInMission(const TArray<class AShooterCharacter*>& OutPlayerCharacters);
	void GetAllMissionTriggersWithKey(class UObject* WorldContextObject, class FName TriggerKey, const TArray<class AMissionTrigger*>& OutTriggerActors, bool bSortByTriggerOrder, bool bReverseSort);
	void GetAllMissionTriggerKeys(const TArray<class FName>& ReturnValue);
	void GetAllMissionSplinesWithKey(class UObject* WorldContextObject, class FName TriggerKey, const TArray<class AMissionSpline*>& OutSplineActors, bool bSortByTriggerOrder, bool bReverseSort);
	void GetAllMissionServerSidePointsWithKey(class UObject* WorldContextObject, class FName TriggerKey, const TArray<class AMissionServerSidePoint*>& OutServerSidePointActors, bool bSortByTriggerOrder, bool bReverseSort, bool bExcludeMissionBounds);
	void GeneratePhaseRequirements(class FName PhaseName, const TArray<struct FMissionPhaseRequirement>& Requirements);
	void GeneratePerPlayerPhaseRequirements(class AShooterPlayerController* Controller, class AShooterCharacter* Character, class FName PhaseName, const TArray<struct FMissionPhaseRequirement>& Requirements);
	void FindMissionsMatchingTag(class UObject* WorldContextObject, class FName MissionTag, const TArray<class UClass*>& Missions);
	void FindClosestSplineActorWithTriggerKey(class UObject* WorldContextObject, const struct FVector& WorldLocation, class FName TriggerKey, class AMissionSpline* ReturnValue);
	void FindClosestSplineActor(const struct FVector& WorldLocation, const TArray<class AMissionSpline*>& Splines, class AMissionSpline* ReturnValue);
	void FindClosestPathingSpline(const struct FVector& WorldLocation, class USplineComponent* ReturnValue);
	void FinalizeMissionPrep(bool bForceAdd, int32 ReturnValue);
	void DeactivateMission();
	void CountMissionLeaderboardRows(int32 ReturnValue);
	void CountInventoryItemsFromAllPlayersInMission(class UClass* ItemType, bool bRequireExactClassMatch, int32 ReturnValue);
	void CountInventoryItems(class APrimalCharacter* Character, class UClass* ItemType, bool bRequireExactClassMatch, int32 ReturnValue);
	void ClearReverseTeleportReturnLocation(class APrimalCharacter* Character, bool ReturnValue);
	void ClearDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino, bool ReturnValue);
	void ClearDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino, bool ReturnValue);
	void CleanupInvalidPlayers(bool RemoveIfInvalid);
	void CanStartPhase(class FName PhaseName, bool ReturnValue);
	void CanStartMission(class UClass* MissionType, class APlayerController* Controller, const class FString& ClientFailureReason, class AActor* OutMissionDispatcher, bool ReturnValue);
	void CalcXPRatio(enum class ELevelExperienceRampType RampType, int32 Level, float Ratio, float ReturnValue);
	void CalculateMissionExperienceForPlayer(class AShooterCharacter* Player, float ReturnValue);
	void BPTryCompletePhase(class FName PhaseName, bool ReturnValue);
	void BPStaticIsPlayerEligibleForMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, const class FString& OutReason, bool ReturnValue);
	void BPStaticCanStartMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, const class FString& ClientFailureReason, class AActor* OutSelectedMissionDispatcher, bool ReturnValue);
	void BPPhaseNameToIndex(class FName Name, bool bIndexIsValid, int32 ReturnValue);
	void BPOverrideRandomWanderLocation(class APrimalDinoCharacter* Dino, const struct FVector& InVec, const struct FVector& OutVec, bool ReturnValue);
	void BPOverrideMissionTimerColor(class AShooterPlayerController* ShooterContr, const struct FLinearColor& DefaultColor, const struct FLinearColor& CurrentColor, const struct FLinearColor& TimerOverrideColor, bool ReturnValue);
	void BPOverrideMissionIndicatorString(class AShooterCharacter* ForCharacter, const struct FMissionWorldIndicator& Indicator, const class FString& String, const class FString& ReturnValue);
	void BPOnReceivedMissionPathFindingResult(int32 ID, class UNavigationPath* Path, uint8 Result);
	void BPOnPlayerRemovedFromMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess);
	void BPOnPlayerAddedToMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
	void BPOnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BPOnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BPOnMissionTimedOut();
	void BPOnMissionSuspended();
	void BPOnMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionStructureDamage(class APrimalStructure* Structure, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void BPOnMissionServerSetup();
	void BPOnMissionPlayerRespawned(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
	void BPOnMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountRemoved);
	void BPOnMissionPlayerDied(class AShooterCharacter* Player, class AShooterPlayerController* Controller, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountAdded, bool bEquippedItem);
	void BPOnMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* ByPC, class UPrimalItem* InventoryItem);
	void BPOnMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnMissionDinoDamage(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void BPOnMissionDeactivated();
	void BPOnMissionComplete(class AShooterCharacter* ForPlayer, class AShooterPlayerController* ForController, bool bLastPhaseSuccess, float XPRewarded, const TArray<class UPrimalItem*>& ItemsRewarded);
	void BPOnMissionCheat(class FName CheatName, bool bSetValue, float Value);
	void BPOnMissionActivated();
	void BPIsPhaseComplete(class FName PhaseName, bool ReturnValue);
	void BPGetPhaseDisplayText(class FName PhaseName, const class FString& ReturnValue);
	void BPGetMissionTimerText(class AShooterPlayerController* ShootCont, const class FString& ReturnValue);
	void BPGetMissionTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* ForTarget, float ForTargetingDesireValue, float ReturnValue);
	void BPGetMissionDurationText(class AShooterPlayerController* ShootCont, const class FString& ReturnValue);
	void BPGetMetaTagsAsInts(const TArray<int32>& OutTagIds);
	void BPGetExtraLocalMissionIndicators(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, const TArray<struct FMissionWorldIndicator>& IndicatorsIn, const TArray<struct FMissionWorldIndicator>& IndicatorsOut);
	void BPGenerateMissionRewards(const struct FCharacterAndControllerPair& Player, bool bCompletedSuccessfully, float XPReward, const TArray<class UPrimalItem*>& GeneratedItems);
	void BPCanRideMissionDino(class AShooterCharacter* Character, class APrimalDinoCharacter* Dino, bool ReturnValue);
	void BPAllowTimeout(bool ReturnValue);
	void BPAllowPlayerToLeaveMission(class AShooterCharacter* PlayerPawn, bool ReturnValue);
	void AllowMissionCreation(class AShooterCharacter* ForCharacter, const struct FVector& Location, class AActor* MissionDispatcherActor, const class FString& FailureReason, bool ReturnValue);
	void AddPlayerUsableItem(class AShooterCharacter* Character, class UPrimalItem* Item);
	void AddPlayerToMission(class AShooterCharacter* PlayerCharacter, bool bForceAdd, bool ReturnValue);
	void AddPlayersInRadiusToMission(const struct FVector& WorldLocation, float Radius, int32 MaxPlayersToAdd, bool bPrioritizeByDistanceToWorldLocation, int32 InTargetingTeam, enum class ETargetingTeamBehavior TargetingTeamBehavior, bool bForceAdd, int32 ReturnValue);
	void AddMissionLeaderboardRow(class AShooterPlayerController* Controller, double NetworkTime, float FloatValue, int32 IntValue, class FName NameValue, const class FString& StringValue, bool ReturnValue);
};

// 0x90 (0xBC8 - 0xB38)
// Class ShooterGame.MissionType_ModularMissionBase
class AMissionType_ModularMissionBase : public AMissionType
{
public:
	uint8                                        Pad_2710[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        Modules;                                           // 0xB40(0x10)(ZeroConstructor)
	float                                        DelayBeforeInitalModule;                           // 0xB50(0x4)(None)
	float                                        MissionTimeRemainingAfterEscapePhase;              // 0xB54(0x4)(None)
	TArray<class AShooterProjectile*>            MissionProjectiles;                                // 0xB58(0x10)(ZeroConstructor)
	uint8                                        MissionCompleted : 1;                              // Mask: 0x1, PropSize: 0x10xB68(0x1)(None)
	uint8                                        CurrentModuleCompleted : 1;                        // Mask: 0x2, PropSize: 0x10xB68(0x1)(None)
	uint8                                        BitPad_1DA : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2712[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrModule;                                        // 0xB6C(0x4)(None)
	class FName                                  CurrRequirementsTitle;                             // 0xB70(0x8)(None)
	class UNewMissionModuleBase*                 CurrentModule;                                     // 0xB78(0x8)(ZeroConstructor)
	double                                       CurrentModuleStartTime;                            // 0xB80(0x8)(None)
	float                                        CurrentModuleTimeLimit;                            // 0xB88(0x4)(None)
	int32                                        NumDeadMissionDinos;                               // 0xB8C(0x4)(None)
	int32                                        NumDestroyedMissionStructures;                     // 0xB90(0x4)(None)
	uint8                                        Pad_2713[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        SpawnedForModuleActors;                            // 0xB98(0x10)(ZeroConstructor)
	TArray<struct FMissionWorldIndicator>        SpecialWorldIndicators;                            // 0xBA8(0x10)(ZeroConstructor)
	TArray<class UNewMissionModuleBase*>         AdditionalModules;                                 // 0xBB8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AMissionType_ModularMissionBase* GetDefaultObj();

	void SpawnActorForMissionModule(class UClass* ActorClass, const struct FTransform& ActorTransform, bool bSpawnEvenIfColliding, class AActor* ReturnValue);
	void SetupMissionModules();
	void RemoveSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToRemove);
	void RemoveAllSpecialWorldIndicators();
	void RegisterProjectile(class AShooterProjectile* TheProjectile);
	void MultiMissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct FTransform& TheTransform, float OverrideTimeDilation);
	void MultiFireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, const TArray<class AActor*>& SubprojectileTargets, class AActor* FiringActor);
	void MultiDeactivateWarmerColderHUD();
	void MultiActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, const TArray<struct FVector>& Locations);
	void MissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct FTransform& TheTransform, float OverrideTimeDilation);
	void FireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, const TArray<class AActor*>& SubprojectileTargets, class AActor* FiringActor, class AShooterProjectile* ReturnValue);
	void ExecuteNextMissionModule();
	void DeactivateWarmerColderHUD();
	void CreateLeaderboardEntry(class AShooterPlayerController* ForPC);
	void BPOnMissionProjectileExpoloded(class AShooterProjectile* TheProjectile);
	void AddSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToAdd);
	void ActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, const TArray<struct FVector>& Locations);
};

// 0x2F0 (0x320 - 0x30)
// Class ShooterGame.ModDataAsset
class UModDataAsset : public UDataAsset
{
public:
	class FString                                ModName;                                           // 0x30(0x10)(None)
	class FString                                ModDescription;                                    // 0x40(0x10)(None)
	class UClass*                                DefaultGameMode;                                   // 0x50(0x8)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalEngramBlueprintClasses;                  // 0x58(0x10)(ZeroConstructor)
	TArray<class UClass*>                        RemoveEngramBlueprintClasses;                      // 0x68(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> AdditionalStructuresToPlace;                       // 0x78(0x10)(ZeroConstructor)
	TArray<struct FClassAddition>                AdditionalStructureEngrams;                        // 0x88(0x10)(ZeroConstructor)
	TArray<float>                                AdditionalEggWeightsToSpawn;                       // 0x98(0x10)(None)
	TArray<class UClass*>                        AdditionalEggItemsToSpawn;                         // 0xA8(0x10)(ZeroConstructor)
	TArray<float>                                FertilizedAdditionalEggWeightsToSpawn;             // 0xB8(0x10)(None)
	TArray<class UClass*>                        FertilizedAdditionalEggItemsToSpawn;               // 0xC8(0x10)(ZeroConstructor)
	TArray<struct FExtraEggItem>                 AdditionalExtraEggItems;                           // 0xD8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalDinoEntries;                             // 0xE8(0x10)(ZeroConstructor)
	TSoftClassPtr<class AActor>                  OverridePhotoModeClass;                            // 0xF8(0x30)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UMaterialInterface>> AdditionalBuffPostProcessEffects;                  // 0x128(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalTradableOptions;                         // 0x138(0x10)(ZeroConstructor)
	TArray<struct FInvalidReferenceRedirector>   AdditionalInvalidReferenceRedirects;               // 0x148(0x10)(ZeroConstructor)
	TArray<struct FWorldDefaultItemSet>          AdditionalDefaultMapItemSets;                      // 0x158(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_NPC;                                         // 0x168(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_SupplyCrates;                                // 0x178(0x10)(ZeroConstructor)
	TArray<struct FActiveEventSupplyCrateWeight> Remap_ActiveEventSupplyCrates;                     // 0x188(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_ResourceComponents;                          // 0x198(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_NPCSpawnEntries;                             // 0x1A8(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_Engrams;                                     // 0x1B8(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_Items;                                       // 0x1C8(0x10)(ZeroConstructor)
	TArray<struct FNPCSpawnEntriesContainerAdditions> TheNPCSpawnEntriesContainerAdditions;              // 0x1D8(0x10)(ZeroConstructor)
	TArray<struct FAvailableMission>             AvailableMissions;                                 // 0x1E8(0x10)(ZeroConstructor)
	bool                                         bWantsToRunMissions;                               // 0x1F8(0x1)(None)
	uint8                                        Pad_2720[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoBabySetup>                DinoBabySetups;                                    // 0x200(0x10)(None)
	TArray<struct FDinoBabySetup>                DinoGestationSetups;                               // 0x210(0x10)(None)
	TArray<struct FUnlockableEmoteEntry>         UnlockableEmotes;                                  // 0x220(0x10)(ZeroConstructor)
	TArray<struct FEmoteGroup>                   EmoteGroups;                                       // 0x230(0x10)(ZeroConstructor)
	TArray<struct FColorDefinition>              ColorDefinitions;                                  // 0x240(0x10)(None)
	TArray<struct FClassRemappingWeight>         GlobalNPCRandomSpawnClassWeights;                  // 0x250(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          AdditionalHeadHairStyleDefinitions;                // 0x260(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          AdditionalFacialHairStyleDefinitions;              // 0x270(0x10)(ZeroConstructor)
	TArray<class UClass*>                        ServerExtraWorldSingletonActorClasses;             // 0x280(0x10)(ZeroConstructor)
	TArray<struct FBuffAddition>                 AdditionalDefaultBuffs;                            // 0x290(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanMaleAnimSequenceOverrides;          // 0x2A0(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanFemaleAnimSequenceOverrides;        // 0x2B0(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanMaleAnimMontagesOverrides;          // 0x2C0(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanFemaleAnimMontagesOverrides;        // 0x2D0(0x10)(ZeroConstructor)
	TArray<struct FStructureToBuildAddition>     AdditionalStructuresToBuild;                       // 0x2E0(0x10)(ZeroConstructor)
	TArray<struct FStructureVariantAddition>     AdditionalStructureVariants;                       // 0x2F0(0x10)(ZeroConstructor)
	bool                                         bForceServerUseDinoList;                           // 0x300(0x1)(None)
	bool                                         bForceEnablePhysicsSimulation;                     // 0x301(0x1)(None)
	uint8                                        Pad_2722[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        AdditionalWorldBuffDefinitions;                    // 0x308(0x10)(ZeroConstructor)
	int32                                        OverrideServerPhysXSubsteps;                       // 0x318(0x4)(None)
	uint8                                        Pad_2723[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UModDataAsset* GetDefaultObj();

};

// 0x38 (0x60 - 0x28)
// Class ShooterGame.MountedDLCManager
class UMountedDLCManager : public UObject
{
public:
	TArray<struct FMountedDLCInfo>               MountedDLCs;                                       // 0x28(0x10)(None)
	TArray<struct FMountedDLCMapInfo>            MountedDLCMaps;                                    // 0x38(0x10)(None)
	uint8                                        Pad_2727[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMountedDLCManager* GetDefaultObj();

};

// 0x40 (0x370 - 0x330)
// Class ShooterGame.MultiUseActionWidget
class UMultiUseActionWidget : public UPrimalUserWidget
{
public:
	uint8                                        Pad_2743[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMultiUseActionWidget* GetDefaultObj();

	void Update();
	void Init(class UObject* ActorTargetRefInfo);
};

// 0x38 (0x3F0 - 0x3B8)
// Class ShooterGame.MultiUseTooltip
class UMultiUseTooltip : public UToolTipWidget
{
public:
	uint8                                        Pad_2745[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMultiUseTooltip* GetDefaultObj();

};

// 0x80 (0xA8 - 0x28)
// Class ShooterGame.NewMissionModuleBase
class UNewMissionModuleBase : public UObject
{
public:
	uint8                                        DebugLifetime : 1;                                 // Mask: 0x1, PropSize: 0x10x28(0x1)(None)
	uint8                                        IsSubModule : 1;                                   // Mask: 0x2, PropSize: 0x10x28(0x1)(None)
	uint8                                        RequiresUpateMissionPrepAreaByMission : 1;         // Mask: 0x4, PropSize: 0x10x28(0x1)(None)
	uint8                                        DeactivateMissionOnModuleLimitPassed : 1;          // Mask: 0x8, PropSize: 0x10x28(0x1)(None)
	uint8                                        BitPad_1F3 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_286F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ModuleTimeLimit;                                   // 0x2C(0x4)(None)
	struct FStruct_MissionModule_Travel          TravelStruct;                                      // 0x30(0x38)(None)
	TArray<class UClass*>                        SubmodulesToRunAtStart;                            // 0x68(0x10)(ZeroConstructor)
	TArray<class UClass*>                        SubmodulesToRunOnComplete;                         // 0x78(0x10)(ZeroConstructor)
	class AMissionType_ModularMissionBase*       MyOuter;                                           // 0x88(0x8)(ZeroConstructor)
	TArray<class AMissionServerSidePoint*>       ModuleNavPoints;                                   // 0x90(0x10)(None)
	uint8                                        ModuleEndedBefore : 1;                             // Mask: 0x1, PropSize: 0x10xA0(0x1)(None)
	uint8                                        CurrentlyDelayed : 1;                              // Mask: 0x2, PropSize: 0x10xA0(0x1)(None)
	uint8                                        Pad_2874[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNewMissionModuleBase* GetDefaultObj();

	void TriggerHandleMissionModuleBegin();
	void SetOuter(class AMissionType_ModularMissionBase* NewOuter, int32 ReturnValue);
	void RunSubModulesOnComplete();
	void RunSubModulesAtStart();
	void OnOuterDestroyed(class AActor* DestroyedActor);
	void HandleMissionTriggerOverlapEnd(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, int32 ReturnValue);
	void HandleMissionTriggerOverlapBegin(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, int32 ReturnValue);
	void HandleMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, int32 ReturnValue);
	void HandleMissionStructureDamaged(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, int32 ReturnValue);
	void HandleMissionProjectileExploded(class AShooterProjectile* Projectile, int32 ReturnValue);
	void HandleMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountRemoved, int32 ReturnValue);
	void HandleMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* Inventory, class UPrimalItem* Item, int32 AmountAdded, bool bEquippedItem, int32 ReturnValue);
	void HandleMissionModuleEnd(int32 ReturnValue);
	void HandleMissionModuleBegin(int32 ReturnValue);
	void HandleMissionGetPerPlayerIndicators(class AShooterCharacter* Character, const TArray<struct FMissionWorldIndicator>& ReturnValue);
	void HandleMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* PC, class UPrimalItem* Item, int32 ReturnValue);
	void HandleMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, int32 ReturnValue);
	void HandleMissionDinoDamaged(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, int32 ReturnValue);
	void HandleLastMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, int32 ReturnValue);
	void HandleLastMissionProjectileExploded(class AShooterProjectile* Projectile, int32 ReturnValue);
	void HandleLastMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, int32 ReturnValue);
	void GetWorld(class UWorld* ReturnValue);
	void GetModuleRequirementsTitle(const class FString& ReturnValue);
	void GetModuleRequirementsMessage(const TArray<struct FMissionPhaseRequirement>& ReturnValue);
	void BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* ForTarget, float ForTargetingDesireValue, float ReturnValue);
};

// 0x0 (0x758 - 0x758)
// Class ShooterGame.NewOptionsButtonWidget
class UNewOptionsButtonWidget : public UBaseSelectableButtonWidget
{
public:

	static class UClass* StaticClass();
	static class UNewOptionsButtonWidget* GetDefaultObj();

};

// 0x0 (0xB8 - 0xB8)
// Class ShooterGame.NinjaLiveBaseComponent
class UNinjaLiveBaseComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UNinjaLiveBaseComponent* GetDefaultObj();

	void ScaleResolutionForSettings(int32 ToScale, int32 ReturnValue);
	void IsFluidSimEnabled(bool ReturnValue);
};

// 0x28 (0x50 - 0x28)
// Class ShooterGame.NPCSpawnEntriesContainer
class UNPCSpawnEntriesContainer : public UObject
{
public:
	TArray<struct FNPCSpawnEntry>                NPCSpawnEntries;                                   // 0x28(0x10)(ZeroConstructor)
	TArray<struct FNPCSpawnLimit>                NPCSpawnLimits;                                    // 0x38(0x10)(None)
	float                                        MaxDesiredNumEnemiesMultiplier;                    // 0x48(0x4)(None)
	uint8                                        Pad_288E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UNPCSpawnEntriesContainer* GetDefaultObj();

};

// 0x218 (0x6D0 - 0x4B8)
// Class ShooterGame.NPCZoneManager
class ANPCZoneManager : public AInfo
{
public:
	TArray<class ANPCZoneVolume*>                LinkedZoneVolumes;                                 // 0x4B8(0x10)(ZeroConstructor)
	TArray<struct FLinkedZoneSpawnVolumeEntry>   LinkedZoneSpawnVolumeEntries;                      // 0x4C8(0x10)(ZeroConstructor)
	TArray<class AActor*>                        DefaultZoneSpawnVolumeFloors;                      // 0x4D8(0x10)(ZeroConstructor)
	TArray<class AActor*>                        DefaultZoneSpawnVolumeIgnoreCeilings;              // 0x4E8(0x10)(ZeroConstructor)
	TArray<class FName>                          DefaultZoneSpawnVolumeFloorTags;                   // 0x4F8(0x10)(None)
	TArray<class FName>                          DefaultZoneSpawnVolumeIgnoreCeilingTags;           // 0x508(0x10)(None)
	TSoftClassPtr<class UNPCSpawnEntriesContainer> NPCSpawnEntriesContainerObject;                    // 0x518(0x30)(ZeroConstructor)
	bool                                         bEnabled;                                          // 0x548(0x1)(None)
	bool                                         bHasCompletedSetup;                                // 0x549(0x1)(None)
	bool                                         bForceInEditor;                                    // 0x54A(0x1)(None)
	bool                                         bNeverSpawnInWater;                                // 0x54B(0x1)(None)
	bool                                         bOnlySpawnInWater;                                 // 0x54C(0x1)(None)
	uint8                                        Pad_28B6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          OnlyAllowSpawningOnActorTags;                      // 0x550(0x10)(None)
	bool                                         bAllowExtentTest;                                  // 0x560(0x1)(None)
	uint8                                        Pad_28B7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinDesiredNumberOfNPC;                             // 0x564(0x4)(None)
	int32                                        SP_MinDesiredNumberOfNPC;                          // 0x568(0x4)(None)
	uint8                                        Pad_28B8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DesiredNumberOfNPCMultiplier;                      // 0x570(0x4)(None)
	float                                        TheSpawnPointMinimumFloorNormal;                   // 0x574(0x4)(None)
	float                                        TheNewNewEditorNumberOfNPCMultiplier;              // 0x578(0x4)(None)
	float                                        KillOffOverweightNPCStasisTime;                    // 0x57C(0x4)(None)
	float                                        TheMaximumWorldTimeForFullIncrease;                // 0x580(0x4)(None)
	float                                        TheMinimumPlayerDistanceFromSpawnPoint;            // 0x584(0x4)(None)
	float                                        TheIncreaseNPCInterval;                            // 0x588(0x4)(None)
	float                                        SP_TheIncreaseNPCInterval;                         // 0x58C(0x4)(None)
	float                                        TheIncreaseNPCIntervalMax;                         // 0x590(0x4)(None)
	float                                        TheDecreaseNPCInterval;                            // 0x594(0x4)(None)
	float                                        NPCAIRangeMultiplier;                              // 0x598(0x4)(None)
	float                                        NPCAIAggroNotifyNeighborsRangeMultiplier;          // 0x59C(0x4)(None)
	bool                                         bNPCDontWander;                                    // 0x5A0(0x1)(None)
	bool                                         bNPCWildIgnoreWild;                                // 0x5A1(0x1)(None)
	bool                                         bNPCNoKillXP;                                      // 0x5A2(0x1)(None)
	bool                                         bNPCPreventSaving;                                 // 0x5A3(0x1)(None)
	bool                                         bForceUntameable;                                  // 0x5A4(0x1)(None)
	bool                                         bForcePreventHibernation;                          // 0x5A5(0x1)(None)
	bool                                         bUsesManualSpawning;                               // 0x5A6(0x1)(None)
	bool                                         bDedicatedServerForceManualSpawningOnLayerLoadedDinos; // 0x5A7(0x1)(None)
	bool                                         bIgnoreVolumeEcompassingCheck;                     // 0x5A8(0x1)(None)
	bool                                         bSpawnAllNPCEntries;                               // 0x5A9(0x1)(None)
	bool                                         bOnlyUseInSingleplayer;                            // 0x5AA(0x1)(None)
	bool                                         bOnlyUseInDedicatedServer;                         // 0x5AB(0x1)(None)
	float                                        NPCWanderRadiusMultiplier;                         // 0x5AC(0x4)(None)
	int32                                        MaxNumberSpawnZoneRandomPointChecks;               // 0x5B0(0x4)(None)
	int32                                        TheNPCFullIncreaseMaximumIterations;               // 0x5B4(0x4)(None)
	float                                        TheMinimumTamedDinoDistanceFromSpawnPoint;         // 0x5B8(0x4)(None)
	float                                        TheMinimumStructureDistanceFromSpawnPoint;         // 0x5BC(0x4)(None)
	float                                        NPCLerpToMaxRandomBaseLevel;                       // 0x5C0(0x4)(None)
	float                                        ManualSpawningNPCLerpToMaxRandomBaseLevel;         // 0x5C4(0x4)(None)
	int32                                        MaximumNumberNearbyCoreStructures;                 // 0x5C8(0x4)(None)
	int32                                        AbsoluteMaximumNumberNearbyCoreStructures;         // 0x5CC(0x4)(None)
	bool                                         bAutoKillUseGlobalStasisArray;                     // 0x5D0(0x1)(None)
	bool                                         bUseSpawnBlockingCheck;                            // 0x5D1(0x1)(None)
	bool                                         bTraceForSpawnPoints;                              // 0x5D2(0x1)(None)
	bool                                         bUseSpawnOverlapCheck;                             // 0x5D3(0x1)(None)
	bool                                         bSpawnRequiresTraceDownThroughCeiling;             // 0x5D4(0x1)(None)
	uint8                                        Pad_28BD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnPointRequiresTraceUpToCeilingDistance;        // 0x5D8(0x4)(None)
	uint8                                        Pad_28BE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ANPCZoneVolume*                        HardLimitWildDinosToVolume;                        // 0x5E0(0x8)(ZeroConstructor)
	bool                                         bTraceForSpawnAgainstWater;                        // 0x5E8(0x1)(None)
	bool                                         bNPCForcePreventExitingWater;                      // 0x5E9(0x1)(None)
	uint8                                        Pad_28BF[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseSpawnPointOverrideRotation;                    // 0x5EB(0x1)(None)
	uint8                                        Pad_28C0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AVolume*                               NPCLimitTargetsToVolume;                           // 0x5F0(0x8)(ZeroConstructor)
	float                                        NPCLevelMultiplier;                                // 0x5F8(0x4)(None)
	int32                                        ForceOverrideNPCBaseLevel;                         // 0x5FC(0x4)(None)
	float                                        IncreaseNPCIntervalMultiplier;                     // 0x600(0x4)(None)
	bool                                         bDirectlyLinkDinoCount;                            // 0x604(0x1)(None)
	uint8                                        Pad_28C1[0x13];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNPCSpawnLimit>                NPCSpawnLimits;                                    // 0x618(0x10)(ZeroConstructor)
	int32                                        UseDesiredNumberOfNPC;                             // 0x628(0x4)(None)
	uint8                                        Pad_28C2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       FirstUpdateTime;                                   // 0x630(0x8)(None)
	int32                                        NumNPCSpawned;                                     // 0x638(0x4)(None)
	int32                                        NumSpawnFailures;                                  // 0x63C(0x4)(None)
	double                                       LastIncreaseNPCTime;                               // 0x640(0x8)(None)
	double                                       LastDecreaseNPCTime;                               // 0x648(0x8)(None)
	float                                        DirectLinkDinoCount;                               // 0x650(0x4)(None)
	bool                                         bIsCaveManager;                                    // 0x654(0x1)(None)
	uint8                                        Pad_28C3[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloseStructureDistanceFromSpawnPoint;              // 0x66C(0x4)(None)
	TArray<class AActor*>                        SpawnPointOverrides;                               // 0x670(0x10)(ZeroConstructor)
	TArray<class APrimalDinoCharacter*>          DirectLinkedDinos;                                 // 0x680(0x10)(ZeroConstructor)
	class FName                                  NonDedicatedFreezeWildDinoPhysicsIfLayerUnloaded;  // 0x690(0x8)(None)
	class FName                                  SubLevelWaterCheckUseTagOverride;                  // 0x698(0x8)(None)
	bool                                         bUseHighestPriorityPhysicsWaterVolume;             // 0x6A0(0x1)(None)
	bool                                         bForcedInNoDinos;                                  // 0x6A1(0x1)(None)
	bool                                         bIgnoreSingleplayerSpawnRangeCheck;                // 0x6A2(0x1)(None)
	uint8                                        Pad_28C5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumManualSpawnInterval;                        // 0x6A4(0x4)(None)
	double                                       LastManuallySpawnedTime;                           // 0x6A8(0x8)(None)
	bool                                         bIgnoreNPCRandomClassReplacements;                 // 0x6B0(0x1)(None)
	bool                                         bAllowSpawnPointOverridesNonDedicatedLevelUnloadedFreezing; // 0x6B1(0x1)(None)
	uint8                                        Pad_28C6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TheNPCDynamicIncreaseMaximumIterations;            // 0x6B4(0x4)(None)
	TArray<float>                                WeightedChancesToSpawnWildChildrenOnCreatureSpawnMultipliers; // 0x6B8(0x10)(None)
	uint8                                        Pad_28C7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANPCZoneManager* GetDefaultObj();

	void StaticSpawnNPCs(class UObject* WorldContext, class ANPCZoneManager* AtZoneManager, class UClass* TheNPCSpawnEntries, const struct FVector& AtSpawnPoint, const struct FRotator& AtRotation, int32 UseSpawnVolumeIndex, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void DestroyAllLinkedDinos();
	void CheckIncreaseNPC(bool bForceDirectlyLinkDinos);
};

// 0x0 (0x508 - 0x508)
// Class ShooterGame.NPCZoneSpawnVolume
class ANPCZoneSpawnVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class ANPCZoneSpawnVolume* GetDefaultObj();

};

// 0x60 (0x568 - 0x508)
// Class ShooterGame.NPCZoneVolume
class ANPCZoneVolume : public AVolume
{
public:
	uint8                                        Pad_28D0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOnlyCountWaterDinos : 1;                          // Mask: 0x1, PropSize: 0x10x510(0x1)(None)
	uint8                                        bOnlyCountLandDinos : 1;                           // Mask: 0x2, PropSize: 0x10x510(0x1)(None)
	uint8                                        bDoHigherQualityLedgeDetection : 1;                // Mask: 0x4, PropSize: 0x10x510(0x1)(None)
	uint8                                        bCountTamedDinos : 1;                              // Mask: 0x8, PropSize: 0x10x510(0x1)(None)
	uint8                                        BitPad_1FA : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_28D1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> OnlyCountDinoClasses;                              // 0x518(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> IgnoreDinoClasses;                                 // 0x528(0x10)(ZeroConstructor)
	TArray<struct FHibernationCountInfo>         HibernatedEntities;                                // 0x538(0x10)(ZeroConstructor)
	float                                        HibernatedCountWeights;                            // 0x548(0x4)(None)
	uint8                                        Pad_28D2[0x1C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ANPCZoneVolume* GetDefaultObj();

	void OnEndOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* Actor);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.ObjectSerializer
class UObjectSerializer : public UObject
{
public:

	static class UClass* StaticClass();
	static class UObjectSerializer* GetDefaultObj();

};

// 0x1F8 (0x6B0 - 0x4B8)
// Class ShooterGame.OceanDinoManager
class AOceanDinoManager : public AActor
{
public:
	float                                        ViewerNumDinosGatherRadius;                        // 0x4B8(0x4)(None)
	float                                        ViewerDinoSpawnRadiusMin;                          // 0x4BC(0x4)(None)
	float                                        ViewerDinoSpawnRadiusMax;                          // 0x4C0(0x4)(None)
	float                                        ViewerDinoSpawnViewOffsetMin;                      // 0x4C4(0x4)(None)
	float                                        ViewerDinoSpawnViewOffsetMax;                      // 0x4C8(0x4)(None)
	uint8                                        Pad_28D9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FOceanDinoDepthEntry>          OceanDinoDepthEntries;                             // 0x4D0(0x10)(ZeroConstructor)
	int32                                        MaxValidSpawnPointAttempts;                        // 0x4E0(0x4)(None)
	int32                                        MaxNumViewersToUpdatePerFrame;                     // 0x4E4(0x4)(None)
	float                                        ViewerNumDinosTargetMinPlayers;                    // 0x4E8(0x4)(None)
	float                                        ViewerNumDinosTargetMaxPlayers;                    // 0x4EC(0x4)(None)
	float                                        RaftMinViewerSpeed;                                // 0x4F0(0x4)(None)
	uint8                                        Pad_28DA[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NumDinosMinPlayers;                                // 0x548(0x4)(None)
	float                                        NumDinosMaxPlayers;                                // 0x54C(0x4)(None)
	class UClass*                                KilledOceanDinoAreaDeathBuff;                      // 0x550(0x8)(ZeroConstructor)
	TArray<class FName>                          OceanVolumeTags;                                   // 0x558(0x10)(None)
	uint8                                        Pad_28DD[0x140];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinViewerDeltaDistanceToRefreshOceanSpawns;        // 0x6A8(0x4)(None)
	uint8                                        Pad_28DE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AOceanDinoManager* GetDefaultObj();

};

// 0x0 (0x30 - 0x30)
// Class ShooterGame.ParticleModuleWaveWorksBase
class UParticleModuleWaveWorksBase : public UParticleModule
{
public:

	static class UClass* StaticClass();
	static class UParticleModuleWaveWorksBase* GetDefaultObj();

};

// 0x8 (0x38 - 0x30)
// Class ShooterGame.ParticleModuleWindForce
class UParticleModuleWindForce : public UParticleModuleWaveWorksBase
{
public:
	float                                        MaxWindSpeedScale;                                 // 0x30(0x4)(None)
	float                                        WindForceScale;                                    // 0x34(0x4)(None)

	static class UClass* StaticClass();
	static class UParticleModuleWindForce* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.ParticleModuleWaveHatDetector
class UParticleModuleWaveHatDetector : public UParticleModuleWaveWorksBase
{
public:
	float                                        MaxDetectorWaitTime;                               // 0x30(0x4)(None)
	float                                        FoamWaveHatsThreshold;                             // 0x34(0x4)(None)
	float                                        WaveVelocityScale;                                 // 0x38(0x4)(None)
	uint8                                        Pad_28E0[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleModuleWaveHatDetector* GetDefaultObj();

};

// 0x1C8 (0xAA0 - 0x8D8)
// Class ShooterGame.OnlineSessionEntryButton
class UOnlineSessionEntryButton : public UDataListEntryButton
{
public:
	class FString                                GameName;                                          // 0x8D8(0x10)(None)
	class FString                                BuildId;                                           // 0x8E8(0x10)(None)
	class FString                                OwnerName;                                         // 0x8F8(0x10)(None)
	class FString                                MapName;                                           // 0x908(0x10)(None)
	class FString                                DayTimeStr;                                        // 0x918(0x10)(None)
	uint32                                       NumPlayers;                                        // 0x928(0x4)(None)
	uint32                                       MaxNumPlayers;                                     // 0x92C(0x4)(None)
	uint64                                       ModId;                                             // 0x930(0x8)(None)
	uint64                                       TotalConversionId;                                 // 0x938(0x8)(None)
	uint64                                       Ping;                                              // 0x940(0x8)(None)
	bool                                         bHasPassword;                                      // 0x948(0x1)(None)
	bool                                         bIsFavourite;                                      // 0x949(0x1)(None)
	bool                                         bIsPVEServer;                                      // 0x94A(0x1)(None)
	uint8                                        Pad_28E3[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            PasswordTexture;                                   // 0x950(0x8)(ZeroConstructor)
	bool                                         bIsOfficialServer;                                 // 0x958(0x1)(None)
	bool                                         bUsingBattleEye;                                   // 0x959(0x1)(None)
	bool                                         bAllowDownloadCharacters;                          // 0x95A(0x1)(None)
	bool                                         bAllowDownloadItems;                               // 0x95B(0x1)(None)
	uint8                                        Pad_28E4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            BattleEyeTexture;                                  // 0x960(0x8)(ZeroConstructor)
	class UTexture2D*                            OfficialServerTexture;                             // 0x968(0x8)(ZeroConstructor)
	class UTexture2D*                            PVPServerTexture;                                  // 0x970(0x8)(ZeroConstructor)
	class UTexture2D*                            PVEServerTexture;                                  // 0x978(0x8)(ZeroConstructor)
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x980(0x10)(None)
	uint8                                        Pad_28E5[0x110];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UOnlineSessionEntryButton* GetDefaultObj();

};

// 0xB8 (0xE0 - 0x28)
// Class ShooterGame.PaintingCache
class UPaintingCache : public UObject
{
public:
	uint8                                        Pad_28EE[0x88];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UPaintingTexture*>              PaintingTextures;                                  // 0xB0(0x10)(None)
	uint8                                        Pad_28EF[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPaintingCache* GetDefaultObj();

	void ForceCacheLocalPaintingTemplatesToDisk(const class FString& Filename, const class FString& PaintingClass, class UPaintingTexture* PaintingTexture, bool OverrideExisting, bool ReturnValue);
};

// 0x70 (0x128 - 0xB8)
// Class ShooterGame.PaintingStreamingComponent
class UPaintingStreamingComponent : public UActorComponent
{
public:
	uint8                                        Pad_28F7[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPaintingStreamingComponent* GetDefaultObj();

	void ServerSendNextChunk(class UStructurePaintingComponent* PaintingComponent);
	void ServerRequestPaintingStream(class UStructurePaintingComponent* PaintingComponent);
	void ServerCancelPaintingStream(class UStructurePaintingComponent* PaintingComponent);
	void ForceRefreshStructurePainting(class UStructurePaintingComponent* Structure);
	void ClientRecieveChunk(class UStructurePaintingComponent* PaintingComponent, const TArray<uint8>& Bytes);
	void ClientEndStreamingJob(class UStructurePaintingComponent* PaintingComponent);
	void ClientCancelSteamingJob(class UStructurePaintingComponent* PaintingComponent);
	void ClientBeginStreamingJob(class UStructurePaintingComponent* PaintingComponent, int32 Revision);
};

// 0x40 (0x68 - 0x28)
// Class ShooterGame.PaintingTexture
class UPaintingTexture : public UObject
{
public:
	uint32                                       Revision;                                          // 0x28(0x4)(None)
	uint8                                        Pad_28F9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            Texture;                                           // 0x30(0x8)(None)
	uint8                                        Pad_28FA[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPaintingTexture* GetDefaultObj();

};

// 0x80 (0x3B0 - 0x330)
// Class ShooterGame.PanelBuffTypeUI
class UPanelBuffTypeUI : public UPrimalUserWidget
{
public:
	uint8                                        Pad_28FB[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPanelBuffTypeUI* GetDefaultObj();

};

// 0x188 (0x8E0 - 0x758)
// Class ShooterGame.PlayerHUDUI
class UPlayerHUDUI : public UPrimalUI
{
public:
	class FString                                SlotItemsDataListName;                             // 0x758(0x10)(None)
	class FName                                  PrimaryStatusBarsWidgetName;                       // 0x768(0x8)(None)
	class FName                                  SecondaryStatusBarsWidgetName;                     // 0x770(0x8)(None)
	class FName                                  CraftQueueItemButtonName;                          // 0x778(0x8)(None)
	class FName                                  ExtraProgressBarName;                              // 0x780(0x8)(None)
	class FString                                SlotItemsDataListParentPanelName;                  // 0x788(0x10)(None)
	class FName                                  CompassBarWidgetName;                              // 0x798(0x8)(None)
	class FName                                  ElementBarWidgetName;                              // 0x7A0(0x8)(None)
	TArray<struct FHUDRichTextOverlayData>       RichTextOverlayData;                               // 0x7A8(0x10)(ZeroConstructor)
	TArray<class UPrimalRichTextBlock*>          RichTextBlocks;                                    // 0x7B8(0x10)(ZeroConstructor)
	bool                                         UsingFastInventory;                                // 0x7C8(0x1)(None)
	uint8                                        Pad_28FE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        UseItemKeybindingsArray;                           // 0x7D0(0x10)(None)
	uint8                                        Pad_28FF[0xB8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UProgressBarWidget*                    ExtraProgressBar;                                  // 0x898(0x8)(ZeroConstructor)
	uint8                                        Pad_2900[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPlayerHUDUI* GetDefaultObj();

	void UpdatedKeybindingBP();
	void OnFastInventoryChangedBP(bool bActivate);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PointOfInterestCompanionInterface
class IPointOfInterestCompanionInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPointOfInterestCompanionInterface* GetDefaultObj();

	void GetPointCompanionBehaviorData(const struct FPointOfInterestCompanionBehavior& ReturnValue);
};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.PointOfInterestCosmeticActor_Base
class APointOfInterestCosmeticActor_Base : public AActor
{
public:

	static class UClass* StaticClass();
	static class APointOfInterestCosmeticActor_Base* GetDefaultObj();

};

// 0x1F8 (0x6B0 - 0x4B8)
// Class ShooterGame.PointOfInterestCosmeticActor
class APointOfInterestCosmeticActor : public APointOfInterestCosmeticActor_Base
{
public:
	class USceneComponent*                       CosmeticRootComp;                                  // 0x4B8(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              CosmeticParticlesComp;                             // 0x4C0(0x8)(ZeroConstructor)
	uint8                                        Pad_2904[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPointOfInterestData                  MyPointOfInterestData;                             // 0x4D0(0x1E0)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APointOfInterestCosmeticActor* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PointOfInterestInterface
class IPointOfInterestInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class IPointOfInterestInterface* GetDefaultObj();

	void ViewPoint(class AActor* ViewedByActor);
	void UnviewPoint(class AActor* UnviewedByActor);
	void SetPointTagUniqueState(bool bNewUniqueState);
	void GetPointOfInterestData(const struct FPointOfInterestData& ReturnValue);
	void GetPointCustomData(class UClass* ReturnValue);
	void CanBeViewed(class AActor* ByActor, bool ReturnValue);
};

// 0x8 (0x4D8 - 0x4D0)
// Class ShooterGame.PointOfInterestManagerList
class APointOfInterestManagerList : public ACustomActorList
{
public:
	uint8                                        bRefreshPointsArray : 1;                           // Mask: 0x1, PropSize: 0x10x4D0(0x1)(None)
	uint8                                        Pad_2921[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APointOfInterestManagerList* GetDefaultObj();

	void ScanForAllValidPointsOfInterest();
	void ReConstructPointsInList();
	void PopulatePointsActorList();
	void ManualAddPointOfInterestActor(class AActor* AddActor, bool ReturnValue);
	void CheckListForTagCollisions(class AActor* ForSpecificActor, bool ReturnValue);
};

// 0xF8 (0x120 - 0x28)
// Class ShooterGame.PreviewImage
class UPreviewImage : public UObject
{
public:
	uint8                                        Pad_2924[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOV;                                               // 0x30(0x4)(None)
	uint8                                        Pad_2925[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureRenderTarget2D*                RenderTarget;                                      // 0x38(0x8)(ZeroConstructor)
	struct FVector                               MeshScale;                                         // 0x40(0x18)(None)
	float                                        LightBrightness;                                   // 0x58(0x4)(None)
	uint8                                        Pad_2926[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              LightRotation;                                     // 0x60(0x18)(None)
	struct FRotator                              MeshRotation;                                      // 0x78(0x18)(None)
	struct FVector                               CameraLocation;                                    // 0x90(0x18)(None)
	struct FRotator                              CameraRotation;                                    // 0xA8(0x18)(None)
	enum class ESkyLightSourceType               AmbientSourceType;                                 // 0xC0(0x1)(None)
	uint8                                        Pad_2927[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          AmbientCubemap;                                    // 0xC8(0x8)(ZeroConstructor)
	struct FColor                                AmbientLightColor;                                 // 0xD0(0x4)(None)
	float                                        AmbientBrightness;                                 // 0xD4(0x4)(None)
	class UWorld*                                GameWorld;                                         // 0xD8(0x8)(ZeroConstructor)
	TArray<class USceneComponent*>               PreviewComponents;                                 // 0xE0(0x10)(ZeroConstructor)
	class UMeshComponent*                        PreviewMesh;                                       // 0xF0(0x8)(ZeroConstructor)
	class UWorld*                                PreviewWorld;                                      // 0xF8(0x8)(ZeroConstructor)
	class USceneCaptureComponent2D*              CaptureComponent;                                  // 0x100(0x8)(ZeroConstructor)
	class UDirectionalLightComponent*            DirctionalLight;                                   // 0x108(0x8)(ZeroConstructor)
	class USkyLightComponent*                    SkyLight;                                          // 0x110(0x8)(ZeroConstructor)
	class ULineBatchComponent*                   LineBatcher;                                       // 0x118(0x8)(None)

	static class UClass* StaticClass();
	static class UPreviewImage* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class ShooterGame.PrimalAIState
class UPrimalAIState : public UObject
{
public:
	class APrimalDinoCharacter*                  Pawn;                                              // 0x28(0x8)(ZeroConstructor)
	class FName                                  AnimationCustomName;                               // 0x30(0x8)(None)
	TArray<class UPrimalAIState*>                ChildStates;                                       // 0x38(0x10)(ZeroConstructor)
	class UPrimalAIState*                        ParentState;                                       // 0x48(0x8)(None)
	uint8                                        IsInAnimationState : 1;                            // Mask: 0x1, PropSize: 0x10x50(0x1)(None)
	uint8                                        IsInAttackState : 1;                               // Mask: 0x2, PropSize: 0x10x50(0x1)(None)
	uint8                                        bShouldResetInLosingTarget : 1;                    // Mask: 0x4, PropSize: 0x10x50(0x1)(None)
	uint8                                        bBPCanUseState : 1;                                // Mask: 0x8, PropSize: 0x10x50(0x1)(None)
	uint8                                        bUseBPSkipIntervalCheck : 1;                       // Mask: 0x10, PropSize: 0x10x50(0x1)(None)
	uint8                                        bUseBPSkipRangeCheck : 1;                          // Mask: 0x20, PropSize: 0x10x50(0x1)(None)
	uint8                                        BitPad_1FD : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bUseBPCanAttack;                                   // 0x51(0x1)(None)
	bool                                         bUseBPOverrideAttackWeight;                        // 0x52(0x1)(None)
	uint8                                        Pad_2947[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIState* GetDefaultObj();

	void TickAnimationStateEvent(float DeltaTime, class FName CustomEventName, enum class ENetRole WithRole);
	void TickAnimationState(float DeltaTime, class FName CustomEventName, enum class ENetRole WithRole);
	void StartAnimationStateEvent(class FName CustomEventName, enum class ENetRole WithRole);
	void StartAnimationState(class FName CustomEventName, enum class ENetRole WithRole);
	void ShouldSkipRangeCheckEvent(bool ReturnValue);
	void ShouldSkipIntervalCheckEvent(bool ReturnValue);
	void SetLastAttackTime();
	void SetInAnimationStateActive(bool Value);
	void OnTickEvent(float DeltaSeconds);
	void OnTick(float DeltaSeconds);
	void OnEndEvent();
	void OnEnd();
	void OnChildStateEndedEvent(class UPrimalAIState* PrimalAIState);
	void OnCanUseStateEvent(bool ReturnValue);
	void OnBeginEvent(class UPrimalAIState* InParentState);
	void OnBegin(class UPrimalAIState* InParentState);
	void GetDebugInfoString(const class FString& ReturnValue);
	void EndAnimationStateEvent(class FName CustomEventName, enum class ENetRole WithRole);
	void EndAnimationState(class FName CustomEventName, enum class ENetRole WithRole);
	void CanUseState(bool ReturnValue);
	void BPOverrideAttackWeight(float InputWeight, float Distance, float AttackRangeOffset, class AActor* OtherTarget, float ReturnValue);
	void BPIsChildState(bool ReturnValue);
	void BPGetDebugInfoString(const class FString& ReturnValue);
	void BPCanAttack(float Distance, float AttackRangeOffset, class AActor* OtherTarget, bool ReturnValue);
};

// 0x60 (0xB8 - 0x58)
// Class ShooterGame.PrimalAIStateDinoRangedState
class UPrimalAIStateDinoRangedState : public UPrimalAIState
{
public:
	float                                        AccuracyWeight;                                    // 0x58(0x4)(None)
	float                                        ClampAngle;                                        // 0x5C(0x4)(None)
	struct FVector                               WorldGeometryTargetLocOffset;                      // 0x60(0x18)(None)
	struct FVector                               CharacterTargetLocOffset;                          // 0x78(0x18)(None)
	uint8                                        bScaleProjDamageByDinoDamage : 1;                  // Mask: 0x1, PropSize: 0x10x90(0x1)(None)
	uint8                                        bGetTargetDirection : 1;                           // Mask: 0x2, PropSize: 0x10x90(0x1)(None)
	uint8                                        bUseAimSocket : 1;                                 // Mask: 0x4, PropSize: 0x10x90(0x1)(None)
	uint8                                        BitPad_1FE : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseRangedSockets : 1;                             // Mask: 0x10, PropSize: 0x10x90(0x1)(None)
	uint8                                        bUseBPRangedAttack : 1;                            // Mask: 0x20, PropSize: 0x10x90(0x1)(None)
	uint8                                        bUseBPRangedAttackOnBegin : 1;                     // Mask: 0x40, PropSize: 0x10x90(0x1)(None)
	uint8                                        bLeadTarget : 1;                                   // Mask: 0x80, PropSize: 0x10x90(0x1)(None)
	uint8                                        Pad_2969[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AimSocket;                                         // 0x94(0x8)(None)
	uint8                                        Pad_296A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          RangedSockets;                                     // 0xA0(0x10)(None)
	float                                        SpreadOffset;                                      // 0xB0(0x4)(None)
	uint8                                        Pad_296B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoRangedState* GetDefaultObj();

	void PreventAttackForTime(float Time);
	void OffsetVectorRandomlyReturnsAltered(const struct FVector& InVector, float MinPercent, float MaxPercent, const struct FVector& ReturnValue);
	void GetZGravityOffset(const struct FVector& ProjectileVelocity, const struct FVector& ProjectileStartLocation, const struct FVector& ProjectileFinalLocation, float ReturnValue);
	void FindDirectionToLeadTarget(const struct FVector& VectorToHitTargetStandingStill, float ExtraTimeAllowed, const struct FVector& CurrentVelocityOfTarget, const struct FVector& ReturnValue);
	void ClampProjectileVectorInForwardDirection(const struct FVector& OriginalShootingDirection, class FName RangedSocket, const struct FVector& ReturnValue);
	void BPRangedAttackOnBegin(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
	void BPRangedAttack(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
};

// 0x20 (0xD8 - 0xB8)
// Class ShooterGame.PrimalAIStateBotRangedState
class UPrimalAIStateBotRangedState : public UPrimalAIStateDinoRangedState
{
public:
	bool                                         bDrawDebug;                                        // 0xB8(0x1)(None)
	uint8                                        Pad_2970[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ChanceBotWillAimDirectlyAtPlayer;                  // 0xBC(0x4)(None)
	float                                        ChanceBotWillAimDirectlyAtDino;                    // 0xC0(0x4)(None)
	float                                        ChanceBotWillCompletelyMissPlayer;                 // 0xC4(0x4)(None)
	float                                        ChanceBotWillCompletelyMissDino;                   // 0xC8(0x4)(None)
	float                                        ConeHalfAngle;                                     // 0xCC(0x4)(None)
	float                                        ConeHalfAngleRandRange;                            // 0xD0(0x4)(None)
	bool                                         bUseBPGetSocketLocation;                           // 0xD4(0x1)(None)
	uint8                                        Pad_2971[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateBotRangedState* GetDefaultObj();

	void BPGetSocketLocation(const struct FVector& ReturnValue);
};

// 0x48 (0xA0 - 0x58)
// Class ShooterGame.PrimalAIStateBPBase
class UPrimalAIStateBPBase : public UPrimalAIState
{
public:
	uint8                                        bCanAttackWhileFlying : 1;                         // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        bClearAttackStateOnEnd : 1;                        // Mask: 0x2, PropSize: 0x10x58(0x1)(None)
	uint8                                        bUseBPOnClearAttackState : 1;                      // Mask: 0x4, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_200 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsMeleeAttack : 1;                                // Mask: 0x10, PropSize: 0x10x58(0x1)(None)
	uint8                                        bUseTickEvent : 1;                                 // Mask: 0x20, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_201 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2986[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinTickEventTime;                                  // 0x5C(0x4)(None)
	float                                        MaxTickEventTime;                                  // 0x60(0x4)(None)
	uint8                                        bUseTickAnimationStateEvent : 1;                   // Mask: 0x1, PropSize: 0x10x64(0x1)(None)
	uint8                                        bUseBPShouldEndAttack : 1;                         // Mask: 0x2, PropSize: 0x10x64(0x1)(None)
	uint8                                        bUseBPOnAnimNotifyCustomEvent : 1;                 // Mask: 0x4, PropSize: 0x10x64(0x1)(None)
	uint8                                        bEndStateWhenAttackAnimCompletes : 1;              // Mask: 0x8, PropSize: 0x10x64(0x1)(None)
	uint8                                        bUseBPOnAttackStart : 1;                           // Mask: 0x10, PropSize: 0x10x64(0x1)(None)
	uint8                                        bUseBPOnAttackEnd : 1;                             // Mask: 0x20, PropSize: 0x10x64(0x1)(None)
	uint8                                        bUseBPOnAttackTick : 1;                            // Mask: 0x40, PropSize: 0x10x64(0x1)(None)
	uint8                                        BitPad_202 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2988[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinAttackTickTime;                                 // 0x68(0x4)(None)
	float                                        MaxAttackTickTime;                                 // 0x6C(0x4)(None)
	uint8                                        Pad_2989[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateBPBase* GetDefaultObj();

	void SpawnAndFireProjectile(class UClass* ProjectileClass, class FName ProjectileSocket, float ProjectileInterval, bool bOverrideProjectileSpawn, const struct FVector& OverrideSpawnLoc, const struct FRotator& OverrideSpawnRot, bool ReturnValue);
	void SetLastAttackTimeToNow(float Offset);
	void IsTimeSinceStateBegin(float CheckTimeSince, bool bForceTrueAtZeroTime, bool ReturnValue);
	void GetTimeSinceStateBegin(float ReturnValue);
	void GetStateBeginTime(double ReturnValue);
	void GetLastAttackTimeAndInterval(double LastAttackTime, float AttackInterval);
	void FinishState();
	void DealMeleeDamageDirect(class AActor* TargetActor, const struct FVector& DamageSourceWorldLocation, float DamageAmount, float DamageImpulse, class UClass* DamageTypeClass, bool bUseBlueprintAdjustOutputDamage, bool bInstantlyHarvestCorpse);
	void DealMeleeDamage(class AActor* Actor, const struct FHitResult& FromHitResult);
	void BPShouldEndAttack(bool ReturnValue);
	void BPOnClearAttackState();
	void BPOnAttackTick(float DeltaTime);
	void BPOnAttackStart(int32 AttackIndex);
	void BPOnAttackEnd(int32 AttackIndex);
	void BPOnAnimNotifyCustomEvent(class FName CustomEventName, class UAnimSequenceBase* Animation, enum class ENetRole Role);
};

// 0x80 (0xD8 - 0x58)
// Class ShooterGame.PrimalAIStateDinoMeleeState
class UPrimalAIStateDinoMeleeState : public UPrimalAIState
{
public:
	class UClass*                                SpawnProjectileClass;                              // 0x58(0x8)(ZeroConstructor)
	float                                        SpawnProjectileInterval;                           // 0x60(0x4)(None)
	class FName                                  SpawnProjectileSocket;                             // 0x64(0x8)(None)
	uint8                                        bCanAttackWhileFlying : 1;                         // Mask: 0x1, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bClearAttackStateOnEnd : 1;                        // Mask: 0x2, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bDoSecondarySwingTrace : 1;                        // Mask: 0x4, PropSize: 0x10x6C(0x1)(None)
	uint8                                        BitPad_203 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDontActuallyDealDamage : 1;                       // Mask: 0x20, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUseBPOnHitActor : 1;                              // Mask: 0x40, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUseBPGetSocketLocation : 1;                       // Mask: 0x80, PropSize: 0x10x6C(0x1)(None)
	uint8                                        Pad_298F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class UObject>>         SecondarySwingRadiusTargetClasses;                 // 0x70(0x10)(ZeroConstructor)
	float                                        SecondarySwingRadius;                              // 0x80(0x4)(None)
	uint8                                        Pad_2990[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SecondarySwingLocOffset;                           // 0x88(0x18)(None)
	uint8                                        Pad_2991[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoMeleeState* GetDefaultObj();

	void BPOnHitActor(const struct FHitResult& HitResult);
	void BPGetSocketLocation(class FName SocketName, const struct FVector& SocketLocation);
};

// 0x8 (0xE0 - 0xD8)
// Class ShooterGame.PrimalAIStateDinoFlyerGrab
class UPrimalAIStateDinoFlyerGrab : public UPrimalAIStateDinoMeleeState
{
public:
	class APrimalCharacter*                      FirstHit;                                          // 0xD8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoFlyerGrab* GetDefaultObj();

};

// 0x8 (0xE0 - 0xD8)
// Class ShooterGame.PrimalAIStateDinoGrabAndReleaseState
class UPrimalAIStateDinoGrabAndReleaseState : public UPrimalAIStateDinoMeleeState
{
public:
	class APrimalCharacter*                      FirstHit;                                          // 0xD8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoGrabAndReleaseState* GetDefaultObj();

};

// 0x98 (0xF0 - 0x58)
// Class ShooterGame.PrimalAIStateDinoSpiderMinions
class UPrimalAIStateDinoSpiderMinions : public UPrimalAIState
{
public:
	class UClass*                                MinionCharacterTypeClass;                          // 0x58(0x8)(ZeroConstructor)
	TArray<class UClass*>                        MinionCharacterTypeClasses;                        // 0x60(0x10)(ZeroConstructor)
	TArray<float>                                MinionCharacterTypeClassesWeights;                 // 0x70(0x10)(None)
	uint8                                        MinionMaxCount;                                    // 0x80(0x1)(None)
	uint8                                        Pad_2992[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnRandomOffset;                                 // 0x98(0x18)(None)
	struct FVector                               SpawnFixedOffset;                                  // 0xB0(0x18)(None)
	class FName                                  EggSocket;                                         // 0xC8(0x8)(None)
	bool                                         bFirstBatch;                                       // 0xD0(0x1)(None)
	bool                                         bPreventMinionTaming;                              // 0xD1(0x1)(None)
	bool                                         bPreventMinionSaving;                              // 0xD2(0x1)(None)
	uint8                                        Pad_2993[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BatchMinionCoolDown;                               // 0xD4(0x4)(None)
	double                                       LastBatchTime;                                     // 0xD8(0x8)(None)
	uint8                                        BatchCount;                                        // 0xE0(0x1)(None)
	uint8                                        AbsoluteMaxMinions;                                // 0xE1(0x1)(None)
	uint8                                        RemainingMinionBatchCount;                         // 0xE2(0x1)(None)
	uint8                                        Pad_2994[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverrideMinionBaseLevel;                           // 0xE4(0x4)(None)
	int32                                        NumMinionsToSpawn;                                 // 0xE8(0x4)(None)
	uint8                                        Pad_2995[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoSpiderMinions* GetDefaultObj();

};

// 0x18 (0x70 - 0x58)
// Class ShooterGame.PrimalAIStateDinoSpiderRangedAcidState
class UPrimalAIStateDinoSpiderRangedAcidState : public UPrimalAIState
{
public:
	class FName                                  SprayStartSocket;                                  // 0x58(0x8)(None)
	float                                        TimeBetweenProjectile;                             // 0x60(0x4)(None)
	bool                                         bScaleProjDamageByDinoDamage;                      // 0x64(0x1)(None)
	bool                                         bAimAtTarget;                                      // 0x65(0x1)(None)
	uint8                                        Pad_2996[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       NextSprayTime;                                     // 0x68(0x8)(None)

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoSpiderRangedAcidState* GetDefaultObj();

};

// 0x30 (0xE8 - 0xB8)
// Class ShooterGame.PrimalAIStateDinoSpiderRangedWebState
class UPrimalAIStateDinoSpiderRangedWebState : public UPrimalAIStateDinoRangedState
{
public:
	class FName                                  SprayStartSocket;                                  // 0xB8(0x8)(None)
	class FName                                  SprayEndSocket;                                    // 0xC0(0x8)(None)
	uint8                                        bClampDirection : 1;                               // Mask: 0x1, PropSize: 0x10xC8(0x1)(None)
	uint8                                        BitPad_204 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2997[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeBetweenProjectile;                             // 0xCC(0x4)(None)
	float                                        LeadTime;                                          // 0xD0(0x4)(None)
	uint8                                        Pad_2998[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       NextSprayTime;                                     // 0xD8(0x8)(None)
	float                                        SpreadOffsetPitch;                                 // 0xE0(0x4)(None)
	int32                                        NumberOfProjectilesMultiplier;                     // 0xE4(0x4)(None)

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoSpiderRangedWebState* GetDefaultObj();

};

// 0x8 (0xC0 - 0xB8)
// Class ShooterGame.PrimalAIStateDinoSpineyLizardTailRangeState
class UPrimalAIStateDinoSpineyLizardTailRangeState : public UPrimalAIStateDinoRangedState
{
public:
	uint8                                        Pad_2999[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAIStateDinoSpineyLizardTailRangeState* GetDefaultObj();

};

// 0xB8 (0x400 - 0x348)
// Class ShooterGame.PrimalAnimInstance
class UPrimalAnimInstance : public UAnimInstance
{
public:
	class APrimalCharacter*                      MyPrimalCharOwner;                                 // 0x348(0x8)(ZeroConstructor)
	class UPrimalCharacterMovement*              MyPrimalMovementComp;                              // 0x350(0x8)(ZeroConstructor)
	float                                        CurrentDeltaTime;                                  // 0x358(0x4)(None)
	uint8                                        Pad_29A0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CurrentOwnerVelocity;                              // 0x360(0x18)(None)
	struct FVector                               CurrentOwnerAcceleration;                          // 0x378(0x18)(None)
	struct FVector                               CurrentMeshVelocity;                               // 0x390(0x18)(None)
	float                                        CurrentMeshSpeed;                                  // 0x3A8(0x4)(None)
	uint8                                        Pad_29A1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CurrentMeshAcceleration;                           // 0x3B0(0x18)(None)
	struct FVector                               PreviousMeshLocation;                              // 0x3C8(0x18)(None)
	struct FVector                               PreviousMeshVelocity;                              // 0x3E0(0x18)(None)
	bool                                         bCheatDisableIK;                                   // 0x3F8(0x1)(None)
	uint8                                        bEnableAnimationGroundConforming : 1;              // Mask: 0x1, PropSize: 0x10x3F9(0x1)(None)
	uint8                                        Pad_29A2[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalAnimInstance* GetDefaultObj();

	void RefreshCachedTraversalVars();
	void PlayHitEffect(float DamageTaken, const struct FVector& HitLocation, const struct FRotator& HitNormal, const struct FVector& HitVelocity, class FName ImpactedBoneName, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bHitKilledDino, bool UsesImpulse, const struct FVector& CalculatedHitImpulse, TSoftObjectPtr<class AShooterProjectile> ProjectileRef);
	void OnSuddenStop(const struct FVector& PrevVelocity, class APawn* PawnInstigator);
	void GenerateDebugText(const class FString& Result);
};

// 0x188 (0x1C0 - 0x38)
// Class ShooterGame.PrimalAssets
class UPrimalAssets : public UPrimalAssetsBase
{
public:
	uint8                                        Pad_29A3[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class UObject*, struct FAssetRetainer>  RetainedObjects;                                   // 0x170(0x50)(None)

	static class UClass* StaticClass();
	static class UPrimalAssets* GetDefaultObj();

	void ClassAssetResolve(TSoftClassPtr<class UObject> Ptr, class UClass* ReturnValue);
	void ClassAssetRequest(TSoftClassPtr<class UObject> Ptr, class UClass* ReturnValue);
	void AssetResolve(TSoftObjectPtr<class UObject> Ptr, class UObject* ReturnValue);
	void AssetRequest(TSoftObjectPtr<class UObject> Ptr, class UObject* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PrimalAutocastFunctions
class UPrimalAutocastFunctions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPrimalAutocastFunctions* GetDefaultObj();

	void ToCompOwner(class UActorComponent* InComponent, class AActor* ReturnValue);
	void PrimalPawnToPrimalCharacter(class APrimalPawn* InPawn, class APrimalCharacter* ReturnValue);
	void PrimalGameModeToShooterGameMode(class APrimalGameMode* InGameMode, class AShooterGameMode* ReturnValue);
	void PrimalGameInstanceToShooterGameInstance(class UPrimalGameInstance* InInstance, class UShooterGameInstance* ReturnValue);
	void PrimalDamageToShooterDamage(class UPrimalDamageType* InDamage, class UShooterDamageType* ReturnValue);
	void PPCToSPC(class APrimalPlayerController* InController, class AShooterPlayerController* ReturnValue);
	void PFCFromDinoAIController(class APrimalDinoAIController* InController, class UPrimalPathFollowingComponent* ReturnValue);
	void PFCFromAIController(class AAIController* InController, class UPrimalPathFollowingComponent* ReturnValue);
	void PCToSPC(class APlayerController* InController, class AShooterPlayerController* ReturnValue);
	void PCToPPC(class APlayerController* InController, class APrimalPlayerController* ReturnValue);
	void PawnToPrimalPawn(class APawn* InPawn, class APrimalPawn* ReturnValue);
	void PawnToPrimalCharacter(class APawn* InPawn, class APrimalCharacter* ReturnValue);
	void LocalPlayerToShooterLocalPlayer(class ULocalPlayer* InPlayer, class UShooterLocalPlayer* ReturnValue);
	void HUDToShooterHUD(class AHUD* InHUD, class AShooterHUD* ReturnValue);
	void GameStateToShooterGameState(class AGameState* InGameState, class AShooterGameState* ReturnValue);
	void GameStateBaseToShooterGameState(class AGameStateBase* InGameState, class AShooterGameState* ReturnValue);
	void GameStateBaseToGameState(class AGameStateBase* InGameState, class AGameState* ReturnValue);
	void GameModeToShooterGameMode(class AGameMode* InGameMode, class AShooterGameMode* ReturnValue);
	void GameModeToPrimalGameMode(class AGameMode* InGameMode, class APrimalGameMode* ReturnValue);
	void GameModeBaseToShooterGameMode(class AGameModeBase* InGameMode, class AShooterGameMode* ReturnValue);
	void GameModeBaseToPrimalGameMode(class AGameModeBase* InGameMode, class APrimalGameMode* ReturnValue);
	void GameInstanceToShooterGameInstance(class UGameInstance* InInstance, class UShooterGameInstance* ReturnValue);
	void GameInstanceToPrimalGameInstance(class UGameInstance* InInstance, class UPrimalGameInstance* ReturnValue);
	void FloatToDouble(double Value, double ReturnValue);
	void DoubleToFloat(double Value, double ReturnValue);
	void DamageToShooterDamage(class UDamageType* InDamage, class UShooterDamageType* ReturnValue);
	void DamageToPrimalDamage(class UDamageType* InDamage, class UPrimalDamageType* ReturnValue);
	void ControllertoPrimalController(class AController* InController, class APrimalController* ReturnValue);
	void CharacterToPrimalCharacter(class ACharacter* InCharacter, class APrimalCharacter* ReturnValue);
	void CharacterMovementToPCM(class UCharacterMovementComponent* InMovement, class UPrimalCharacterMovement* ReturnValue);
	void AIControllerToDinoAIController(class AAIController* InController, class APrimalDinoAIController* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PrimalBlueprintFunctions
class UPrimalBlueprintFunctions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UPrimalBlueprintFunctions* GetDefaultObj();

	void SetCastFarShadow(class UPrimitiveComponent* Component, bool bCastFarShadow);
	void K2_SetTimerForNextTickDelegate(FDelegateProperty_ Delegate, bool bLooping, const struct FTimerHandle& ReturnValue);
	void K2_SetTimerForNextTick(class UObject* Object, const class FString& FunctionName, bool bLooping, const struct FTimerHandle& ReturnValue);
	void GetInjectedLightDirection(class UObject* WorldContextObject, class ADirectionalLight* ForLight, const struct FRotator& ReturnValue);
	void GetBehaviorTree(class UBTNode* NodeOwner, class UBehaviorTreeComponent* ReturnValue);
	void ForceNotifyBlackboardValue(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key);
	void ConvertTransformToRelative(const struct FTransform& WorldTransform, const struct FTransform& LocalTransform, const struct FTransform& ReturnValue);
	void ControllerEvent_GetUserIndex(const struct FControllerEvent& Input, int32 ReturnValue);
	void ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input, const struct FKey& ReturnValue);
	void ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input, float ReturnValue);
};

// 0x440 (0xA30 - 0x5F0)
// Class ShooterGame.PrimalDinoAIController
class APrimalDinoAIController : public AAIController
{
public:
	uint8                                        Pad_2A5E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DieIfLeftWaterWanderMinimumWaterHeightMultiplier;  // 0x5F8(0x4)(None)
	float                                        DieIfLeftWaterReachedRadiusDistanceCheckMultiplier; // 0x5FC(0x4)(None)
	float                                        DieIfLeftWaterTargetUnsubmergedTimeout;            // 0x600(0x4)(None)
	float                                        LandDinoMaxWaterTargetDepthCapsuleMultiplier;      // 0x604(0x4)(None)
	float                                        ExtraCorpseTargetingRange;                         // 0x608(0x4)(None)
	float                                        FleeFromAttackCoolDownTime;                        // 0x60C(0x4)(None)
	float                                        FleeFromAttackTimeLimit;                           // 0x610(0x4)(None)
	float                                        ForceFleeUnderHealthPercentage;                    // 0x614(0x4)(None)
	bool                                         bFleeOnCriticalHealth;                             // 0x618(0x1)(None)
	uint8                                        Pad_2A5F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DieIfLeftWaterTargetingRequiresFreeDepth;          // 0x61C(0x4)(None)
	float                                        DieIfLeftWaterWanderRequiresCapsuleMultiFreeDepth; // 0x620(0x4)(None)
	uint8                                        Pad_2A60[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastBlockadeCheckTime;                             // 0x628(0x8)(None)
	double                                       LastMovingAroundBlockadeTime;                      // 0x630(0x8)(None)
	float                                        MovingAroundBlockadeDirection;                     // 0x638(0x4)(None)
	uint8                                        Pad_2A61[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MovingAroundBlockadePoint;                         // 0x640(0x18)(None)
	float                                        LastBlockadeWidth;                                 // 0x658(0x4)(None)
	uint8                                        Pad_2A62[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastBlockadeHitNormal;                             // 0x660(0x18)(None)
	struct FVector                               LastBlockadeHitLocation;                           // 0x678(0x18)(None)
	struct FVector                               StartMovingAroundBlockadeLocation;                 // 0x690(0x18)(None)
	class AActor*                                LastMovingAroundBlockadeActor;                     // 0x6A8(0x8)(ZeroConstructor)
	uint8                                        bForcedAggro : 1;                                  // Mask: 0x1, PropSize: 0x10x6B0(0x1)(None)
	uint8                                        BitPad_209 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A63[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                ForceTargetActor;                                  // 0x6B8(0x8)(ZeroConstructor)
	uint8                                        bDeferredTickMode : 1;                             // Mask: 0x1, PropSize: 0x10x6C0(0x1)(None)
	uint8                                        BitPad_20A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A64[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Target;                                            // 0x6C8(0x8)(ZeroConstructor)
	float                                        AttackDestinationOffset;                           // 0x6D0(0x4)(None)
	bool                                         bUseOverlapTargetCheck;                            // 0x6D4(0x1)(None)
	bool                                         bNotifyNeighborsWithoutDamage;                     // 0x6D5(0x1)(None)
	bool                                         bUseBPShouldNotifyNeighbor;                        // 0x6D6(0x1)(None)
	bool                                         bUseBPShouldNotifyAnyNeighbor;                     // 0x6D7(0x1)(None)
	bool                                         bRequireAbsoluteDamageForNeighborNotification;     // 0x6D8(0x1)(None)
	uint8                                        Pad_2A65[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AboveDeltaZAttackRange;                            // 0x6DC(0x4)(None)
	float                                        BelowDeltaZAttackRange;                            // 0x6E0(0x4)(None)
	float                                        WildAboveDeltaZTargetingRange;                     // 0x6E4(0x4)(None)
	float                                        WildBelowDeltaZTargetingRange;                     // 0x6E8(0x4)(None)
	bool                                         bWildUseDeltaZTargetingForFlyerPawnOrBigDino;      // 0x6EC(0x1)(None)
	uint8                                        Pad_2A66[0x13];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDontWander;                                       // 0x700(0x1)(None)
	bool                                         bOnlyOverlapTargetCorpsesUnlessHasTarget;          // 0x701(0x1)(None)
	uint8                                        Pad_2A67[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NaturalTargetingRange;                             // 0x704(0x4)(None)
	float                                        TamedTargetingRange;                               // 0x708(0x4)(None)
	float                                        TamedCorpseFoodTargetingRange;                     // 0x70C(0x4)(None)
	float                                        WanderRandomDistanceAmount;                        // 0x710(0x4)(None)
	float                                        FlyingWanderFixedDistanceAmount;                   // 0x714(0x4)(None)
	float                                        FlyingWanderRandomDistanceAmount;                  // 0x718(0x4)(None)
	float                                        MaxFlyingTargetDeltaZ;                             // 0x71C(0x4)(None)
	float                                        WanderFlyingZScaler;                               // 0x720(0x4)(None)
	float                                        WanderFlyingClampZHeightAboveGround;               // 0x724(0x4)(None)
	float                                        WanderFlyingMinZHeightAboveGround;                 // 0x728(0x4)(None)
	float                                        WanderFixedDistanceAmount;                         // 0x72C(0x4)(None)
	bool                                         bUseAggro;                                         // 0x730(0x1)(None)
	uint8                                        Pad_2A68[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinAggroValue;                                     // 0x734(0x4)(None)
	float                                        AggroToAddUponRemovingTarget;                      // 0x738(0x4)(None)
	float                                        AggroToAddUponAcquiringTarget;                     // 0x73C(0x4)(None)
	float                                        AggroFactorDecreaseSpeed;                          // 0x740(0x4)(None)
	float                                        AggroFactorDecreaseGracePeriod;                    // 0x744(0x4)(None)
	float                                        AggroFactorDamagePercentageMultiplier;             // 0x748(0x4)(None)
	float                                        AggroNotifyNeighborsMultiplier;                    // 0x74C(0x4)(None)
	float                                        AggroNotifyNeighborsRange;                         // 0x750(0x4)(None)
	float                                        AggroNotifyNeighborsRangeFalloff;                  // 0x754(0x4)(None)
	float                                        TargetingDistanceReductionFactorLinear;            // 0x758(0x4)(None)
	float                                        TargetingDistanceReductionFactorExponent;          // 0x75C(0x4)(None)
	float                                        BeyondTargetingRangeAggroAddition;                 // 0x760(0x4)(None)
	float                                        AggroFactorDesirabilityMultiplier;                 // 0x764(0x4)(None)
	float                                        AttackRange;                                       // 0x768(0x4)(None)
	float                                        AttackInterval;                                    // 0x76C(0x4)(None)
	float                                        AttackRotationRangeDegrees;                        // 0x770(0x4)(None)
	float                                        AttackRotationGroundSpeedMultiplier;               // 0x774(0x4)(None)
	float                                        RangeTargetWildDinosMultiplier;                    // 0x778(0x4)(None)
	uint8                                        Pad_2A69[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              AttackRotationRate;                                // 0x780(0x18)(None)
	bool                                         bFocusOnTargetDuringAttack;                        // 0x798(0x1)(None)
	uint8                                        Pad_2A6A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FlyingMoveTowardsTargetOffset;                     // 0x7A0(0x18)(None)
	struct FVector                               CombatFlyingMoveTowardsTargetOffset;               // 0x7B8(0x18)(None)
	struct FVector                               FlyingTargetFocalPositionOffset;                   // 0x7D0(0x18)(None)
	float                                        FlyingReachedDestinationThresholdOffset;           // 0x7E8(0x4)(None)
	float                                        SeekingIntervalCheckToFly;                         // 0x7EC(0x4)(None)
	float                                        SeekingPercentChanceToFly;                         // 0x7F0(0x4)(None)
	float                                        SeekingIntervalCheckToLand;                        // 0x7F4(0x4)(None)
	float                                        SeekingPercentChanceToLand;                        // 0x7F8(0x4)(None)
	float                                        MinimumWanderGroundNormalZ;                        // 0x7FC(0x4)(None)
	float                                        FollowStoppingDistance;                            // 0x800(0x4)(None)
	float                                        CorpseAttackDestinationMultiplier;                 // 0x804(0x4)(None)
	bool                                         bUseOverlapTargetCheckTraces;                      // 0x808(0x1)(None)
	bool                                         bUseAlternateMovePoint;                            // 0x809(0x1)(None)
	bool                                         bTotallyIgnoreWaterTargets;                        // 0x80A(0x1)(None)
	bool                                         bWaterDinoAllowUnsubmergedTargets;                 // 0x80B(0x1)(None)
	uint8                                        Pad_2A6B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastCheckAttackRangePawnLocation;                  // 0x810(0x18)(None)
	struct FVector                               LastCheckAttackRangeClosestPoint;                  // 0x828(0x18)(None)
	struct FVector                               LastCheckAttackRangeTargetLocation;                // 0x840(0x18)(None)
	class AActor*                                LastCheckAttackRangeTarget;                        // 0x858(0x8)(ZeroConstructor)
	bool                                         HasAttackPriority;                                 // 0x860(0x1)(None)
	uint8                                        Pad_2A6C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                TamedAITargetingRangeMultipliers;                  // 0x868(0x10)(None)
	float                                        MateBoostAggroNotifyNeighborsMultiplier;           // 0x878(0x4)(None)
	uint8                                        Pad_2A6D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBehaviorTree*                         BehaviourTree;                                     // 0x880(0x8)(ZeroConstructor)
	class UBehaviorTree*                         HasEnemyTree;                                      // 0x888(0x8)(ZeroConstructor)
	class UBehaviorTree*                         BabyHasEnemyTree;                                  // 0x890(0x8)(ZeroConstructor)
	class UBehaviorTree*                         ForcedAggroHasEnemyTree;                           // 0x898(0x8)(ZeroConstructor)
	class UBehaviorTree*                         NoEnemyTree;                                       // 0x8A0(0x8)(ZeroConstructor)
	class UBehaviorTree*                         FleeFromAttackTree;                                // 0x8A8(0x8)(ZeroConstructor)
	class UBehaviorTree*                         TamedNoEnemyTree;                                  // 0x8B0(0x8)(ZeroConstructor)
	class UBehaviorTree*                         MissionTree;                                       // 0x8B8(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> AggroNotifyNeighborsClasses;                       // 0x8C0(0x10)(ZeroConstructor)
	uint8                                        bIgnoreMoveAroundBlockade : 1;                     // Mask: 0x1, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bFlyingUseMoveAroundBlockade : 1;                  // Mask: 0x2, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bUseGeometryInsteadOfStationObjForFreeDepthTest : 1; // Mask: 0x4, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bNotifyBPTargetSet : 1;                            // Mask: 0x8, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bUseBPSetupFindTarget : 1;                         // Mask: 0x10, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bNotAllowedToFindTargets : 1;                      // Mask: 0x20, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bAllowForceFleeToSameTargetingTeam : 1;            // Mask: 0x40, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        bUseBPUpdateBestTarget : 1;                        // Mask: 0x80, PropSize: 0x10x8D0(0x1)(None)
	uint8                                        Pad_2A6F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MoveAroundBlockadeAdditionalWidth;                 // 0x8D4(0x4)(None)
	float                                        MoveAroundObjectMaxVelocity;                       // 0x8D8(0x4)(None)
	float                                        ForcedAggroTimeCounter;                            // 0x8DC(0x4)(None)
	float                                        TamedMaxFollowDistance;                            // 0x8E0(0x4)(None)
	uint8                                        bTargetChanged : 1;                                // Mask: 0x1, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bAttackForcesRunning : 1;                          // Mask: 0x2, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bUseFlyingTargetOffsets : 1;                       // Mask: 0x4, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bRidingDinoTargetPlayer : 1;                       // Mask: 0x8, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bRidingPlayerTargetDino : 1;                       // Mask: 0x10, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bIgnoreWaterOrAmphibiousTargets : 1;               // Mask: 0x20, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bUseBPTargetingDesire : 1;                         // Mask: 0x40, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bDisableForceFlee : 1;                             // Mask: 0x80, PropSize: 0x10x8E4(0x1)(None)
	uint8                                        bUseCombatMoveTowardsTargetOffset : 1;             // Mask: 0x1, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bUseBPOverrideIgnoredByWildDino : 1;               // Mask: 0x2, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bCanUseAttackStateOnTargetChange : 1;              // Mask: 0x4, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        BitPad_20C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceOnlyTargetingPlayerOrTamed : 1;              // Mask: 0x10, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bForceTargetingAllStructures : 1;                  // Mask: 0x20, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bForceTargetDinoRider : 1;                         // Mask: 0x40, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bFlyerAllowWaterTargeting : 1;                     // Mask: 0x80, PropSize: 0x10x8E5(0x1)(None)
	uint8                                        bUseBPForceTargetDinoRider : 1;                    // Mask: 0x1, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bAlwaysStartledWhenAggroedByNeighbor : 1;          // Mask: 0x2, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bForceOnlyTargetingPlayers : 1;                    // Mask: 0x4, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bIsMissionDino : 1;                                // Mask: 0x8, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        bUseImprovedAggroFalloffBehavior : 1;              // Mask: 0x10, PropSize: 0x10x8E6(0x1)(None)
	uint8                                        BitPad_20D : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A72[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseStructureTargetingDesire;                      // 0x8E8(0x4)(None)
	float                                        LandDinoMaxFlyerTargetDeltaZ;                      // 0x8EC(0x4)(None)
	float                                        NaturalMaxDepthZ;                                  // 0x8F0(0x4)(None)
	TWeakObjectPtr<class AActor>                 ForcedAttackTarget;                                // 0x8F4(0x8)(ZeroConstructor)
	int32                                        ForcedAttackEnemyTeam;                             // 0x8FC(0x4)(None)
	double                                       LastForcedAttackEnemyTeamTime;                     // 0x900(0x8)(None)
	uint8                                        Pad_2A73[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForcedFleeDuration;                                // 0x91C(0x4)(None)
	float                                        MinAttackIntervalForFleeing;                       // 0x920(0x4)(None)
	float                                        MinAttackIntervalForFleeing_Water;                 // 0x924(0x4)(None)
	float                                        MinLocChangeIntervalForFleeing;                    // 0x928(0x4)(None)
	float                                        PercentageTorporForFleeing;                        // 0x92C(0x4)(None)
	float                                        DamagedForceAggroInterval;                         // 0x930(0x4)(None)
	uint8                                        Pad_2A74[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceAggroUntilTime;                               // 0x938(0x8)(None)
	double                                       LastExecutedAttackTime;                            // 0x940(0x8)(None)
	double                                       LastForcedFleeTime;                                // 0x948(0x8)(None)
	double                                       LastFleeLocCheckTime;                              // 0x950(0x8)(None)
	uint8                                        Pad_2A75[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumAlliesToAttack;                                 // 0x970(0x4)(None)
	float                                        FindLandingPositionZOffset;                        // 0x974(0x4)(None)
	float                                        TamedFollowAcceptanceRadiusOffset;                 // 0x978(0x4)(None)
	float                                        TamedFollowAcceptanceHeightOffset;                 // 0x97C(0x4)(None)
	float                                        AIFlightMaxLandingZDistance;                       // 0x980(0x4)(None)
	uint8                                        Pad_2A76[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForcedMoveToUntilTime;                             // 0x988(0x8)(None)
	uint8                                        Pad_2A77[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBP_TamedOverrideHorizontalLandingRange : 1;    // Mask: 0x1, PropSize: 0x10x998(0x1)(None)
	uint8                                        bFlyerWanderDefaultToOrigin : 1;                   // Mask: 0x2, PropSize: 0x10x998(0x1)(None)
	uint8                                        bCheckBuffTargetingDesireOverride : 1;             // Mask: 0x4, PropSize: 0x10x998(0x1)(None)
	uint8                                        bAllowSwimWanderingForLandDinos : 1;               // Mask: 0x8, PropSize: 0x10x998(0x1)(None)
	uint8                                        bUse_BPOverrideLandingLocation : 1;                // Mask: 0x10, PropSize: 0x10x998(0x1)(None)
	uint8                                        BitPad_20E : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2A78[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class AActor>>          WildTargetingDesireMultiplierClasses;              // 0x9A0(0x10)(ZeroConstructor)
	TArray<float>                                WildTargetingDesireMultiplierValues;               // 0x9B0(0x10)(None)
	TArray<TSoftClassPtr<class AActor>>          TamedTargetingDesireMultiplierClasses;             // 0x9C0(0x10)(ZeroConstructor)
	TArray<float>                                TamedTargetingDesireMultiplierValues;              // 0x9D0(0x10)(None)
	TSet<TWeakObjectPtr<class AActor>>           IgnoredTargets;                                    // 0x9E0(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalDinoAIController* GetDefaultObj();

	void WantsAttackPriority(bool ReturnValue);
	void UpdateMoveFocus();
	void UpdateAggro();
	void StopBrainComponent(const class FString& Reason);
	void StaticGetRandomWanderDestination(class APrimalDinoCharacter* TargetCharacter, class APrimalDinoAIController* TargetAIController, const struct FVector& LocOverride, float RandomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& OrientRandOffsetByRotation, float GroundCheckSpreadOverride, const struct FVector& ReturnValue);
	void ShouldForceRunWhenAttacking(bool ReturnValue);
	void SetTarget(class AActor* InTarget, bool bDontAddAggro, bool bOverlapFoundTarget);
	void SetHasAttackPriority(bool Value);
	void SetAttackRotationRate();
	void SetAttackGroundSpeed();
	void ResumeBrainComponent(const class FString& Reason);
	void RestartBrainComponent();
	void ResetRotationUseAcceleration();
	void ResetRotationRate();
	void ResetGroundSpeed();
	void ResetAccelerationFollowsRotation();
	void RecoverMovement();
	void RebootBrainComponent();
	void PlayStartledAnim();
	void PauseBrainComponent(const class FString& Reason);
	void OrderedToLand(bool ReturnValue);
	void OnLosingTargetEvent();
	void IsWithinAttackRangeAndCalculateBestAttack(class AActor* Other, bool bAttackChanged, bool ReturnValue);
	void IsWithinAttackRange(class AActor* Other, bool bForceUseLastAttackIndex, bool ReturnValue);
	void IsLogicPaused(bool ReturnValue);
	void IsForceTargetDinoRider(class AShooterCharacter* PlayerTarget, bool ReturnValue);
	void GetWanderAroundActorDestination(class APrimalDinoCharacter* DinoCharacter, const struct FVector& OriginalDestination, const struct FVector& ReturnValue);
	void GetTarget(class AActor* ReturnValue);
	void GetRandomWanderDestination(const struct FVector& LocOverride, float RandomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& OrientRandOffsetByRotation, const struct FVector& ReturnValue);
	void GetMinAttackRange(float ReturnValue);
	void GetLandingLocation(const struct FVector& ReturnValue);
	void GetHasAttackPriority(bool ReturnValue);
	void GetCurrentAttackIndex(uint8 ReturnValue);
	void GetControllerPawn(class APawn* ReturnValue);
	void GetControlledDino(class APrimalDinoCharacter* ReturnValue);
	void GetClosestTree(const struct FOverlapResult& OutHit, class UStaticMeshComponent* ReturnValue);
	void GetAttackRotationRate(const struct FRotator& ReturnValue);
	void GetAttackRotationRangeDegrees(float ReturnValue);
	void GetAttackRotationGroundSpeedMultiplier(float ReturnValue);
	void GetAttackRange(float ReturnValue);
	void GetAttackInterval(float ReturnValue);
	void GetAggroNotifyNeighborsRange(float ReturnValue);
	void GetAggroEntry(int32 Index, class AActor* OutAttacker, float OutAggroFactor, double OutLastAggroHitTime, bool ReturnValue);
	void GetAggroEntriesCount(int32 ReturnValue);
	void GetAggroEntriesAttackerAtIndex(int32 Index, class AActor* ReturnValue);
	void GetAggroDesirability(class AActor* InTarget, float ReturnValue);
	void FindTarget(bool bDontSet, class AActor* ReturnValue);
	void FindNewTarget(bool bDontSet, class AActor* ReturnValue);
	void ClearAggroEntries();
	void ChangedAITarget();
	void CanLand(bool ReturnValue);
	void CalculateAndSetWonderingAIStateEvent(bool StateChanged, bool ReturnValue);
	void CalculateAndSetWonderingAIState(bool StateChanged, bool ReturnValue);
	void BPUpdateBestTarget(class AActor* bestTarget, bool DontSetIn, bool DontSetOut, class AActor* ReturnValue);
	void BPShouldNotifyNeighbor(class APrimalDinoCharacter* Neighbor, bool ReturnValue);
	void BPShouldNotifyAnyNeighbor(class APrimalDinoCharacter* Neighbor, bool ReturnValue);
	void BPSetupFindTarget();
	void BPOverrideLandingLocation(float OutRadius, const struct FVector& ReturnValue);
	void BPOverrideIgnoredByWildDino(class AActor* WildDinoToIgnore, bool ReturnValue);
	void BPOnFleeEvent();
	void BPNotifyTargetSet();
	void BPGetTargetingDesire(class AActor* ForTarget, float ForTargetingDesireValue, float ReturnValue);
	void BPForceTargetDinoRider(class AShooterCharacter* PlayerTarget, bool ReturnValue);
	void BP_TamedOverrideHorizontalLandingRange(const struct FVector2D& ReturnValue);
	void AvoidOutOfWater();
	void AvoidGenericToPoint(const struct FVector& TargetDestination);
	void AddToAggro(class AActor* Attacker, float DamagePercent, bool bNotifyNeighbors, bool SetValue, bool bIsFromDamage, bool SkipTeamCheck);
};

// 0x28 (0xA58 - 0xA30)
// Class ShooterGame.PrimalBotAIController
class APrimalBotAIController : public APrimalDinoAIController
{
public:
	float                                        DinoSearchRadius;                                  // 0xA30(0x4)(None)
	uint8                                        Pad_2A7E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AAIAttackCoordinator*                  AttackCoordinator;                                 // 0xA38(0x8)(ZeroConstructor)
	class UClass*                                RiddenDinoControllerClass;                         // 0xA40(0x8)(ZeroConstructor)
	TWeakObjectPtr<class APrimalDinoCharacter>   ClaimedDino;                                       // 0xA48(0x8)(ZeroConstructor)
	uint8                                        Pad_2A7F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalBotAIController* GetDefaultObj();

	void UpdateDinoClaim();
	void TimeSinceGivenAttackPriority(float ReturnValue);
	void SetAttackCoordinator(class AAIAttackCoordinator* Coordinator);
	void ReleaseClaimOnDino();
	void IsTooFarToAttack(bool ReturnValue);
	void IsTooCloseToAttack(bool ReturnValue);
	void InitializeBlackboardValues(class APrimalBotCharacter* Bot);
	void ClaimDino(class APrimalDinoCharacter* Dino, bool ReturnValue);
};

// 0x1200 (0x1AB0 - 0x8B0)
// Class ShooterGame.PrimalCharacter
class APrimalCharacter : public ACharacter
{
public:
	uint8                                        Pad_2CC1[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ProneEyeHeight;                                    // 0x8C8(0x4)(None)
	float                                        ExtraMaxAccelerationModifier;                      // 0x8CC(0x4)(None)
	float                                        ExtraFrictionModifier;                             // 0x8D0(0x4)(None)
	uint8                                        Pad_2CC2[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               OldLocation;                                       // 0x8E0(0x18)(None)
	struct FRotator                              OldRotation;                                       // 0x8F8(0x18)(None)
	float                                        EffectorInterpSpeed;                               // 0x910(0x4)(None)
	float                                        HalfLegLength;                                     // 0x914(0x4)(None)
	float                                        TwoLeggedVirtualPointDistFactor;                   // 0x918(0x4)(None)
	float                                        FullIKDistance;                                    // 0x91C(0x4)(None)
	float                                        IKAfterFallingTime;                                // 0x920(0x4)(None)
	float                                        SimpleIkRate;                                      // 0x924(0x4)(None)
	struct FVector                               GroundCheckExtent;                                 // 0x928(0x18)(None)
	double                                       LastForceAimedCharactersTime;                      // 0x940(0x8)(None)
	float                                        FluidInteractionScalar;                            // 0x948(0x4)(None)
	uint8                                        Pad_2CC3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          JumpAnim;                                          // 0x950(0x8)(ZeroConstructor)
	class UAnimMontage*                          LandedAnim;                                        // 0x958(0x8)(ZeroConstructor)
	class UAnimMontage*                          HurtAnim;                                          // 0x960(0x8)(ZeroConstructor)
	class UAnimMontage*                          HurtAnim_Flying;                                   // 0x968(0x8)(ZeroConstructor)
	class UAnimMontage*                          HurtAnim_Sleeping;                                 // 0x970(0x8)(ZeroConstructor)
	class UAnimMontage*                          PinnedAnim;                                        // 0x978(0x8)(ZeroConstructor)
	class UParticleSystem*                       HurtFX;                                            // 0x980(0x8)(ZeroConstructor)
	class USoundBase*                            HurtSound;                                         // 0x988(0x8)(ZeroConstructor)
	class FName                                  RootBodyBoneName;                                  // 0x990(0x8)(None)
	struct FDecalData                            HurtDecalData;                                     // 0x998(0x20)(ZeroConstructor)
	struct FVector                               SavedBaseWorldLocation;                            // 0x9B8(0x18)(None)
	uint8                                        Pad_2CC4[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsVoiceTalking;                                   // 0x9E8(0x1)(None)
	uint8                                        Pad_2CC5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TribeName;                                         // 0x9F0(0x10)(None)
	float                                        WaterSubmergedDepthThreshold;                      // 0xA00(0x4)(None)
	float                                        ProneWaterSubmergedDepthThreshold;                 // 0xA04(0x4)(None)
	enum class EMovementMode                     SubmergedWaterMovementMode;                        // 0xA08(0x1)(None)
	enum class EMovementMode                     UnSubmergedWaterMovementMode;                      // 0xA09(0x1)(None)
	uint8                                        Pad_2CC6[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UToolTipWidget*                        CustomTooltipWidget;                               // 0xA10(0x8)(ZeroConstructor)
	TArray<struct FDamageTypeAdjuster>           DamageTypeAdjusters;                               // 0xA18(0x10)(ZeroConstructor)
	float                                        SnapshotScale;                                     // 0xA28(0x4)(None)
	uint8                                        Pad_2CC7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPrimalSnapshotPose>           SnapshotPoses;                                     // 0xA30(0x10)(ZeroConstructor)
	class UClass*                                PoopItemClass;                                     // 0xA40(0x8)(ZeroConstructor)
	class UClass*                                TaxidermySkinClass;                                // 0xA48(0x8)(ZeroConstructor)
	class FName                                  DragBoneName;                                      // 0xA50(0x8)(None)
	class FName                                  DragSocketName;                                    // 0xA58(0x8)(None)
	float                                        MaxDragDistance;                                   // 0xA60(0x4)(None)
	float                                        MaxDragDistanceTimeout;                            // 0xA64(0x4)(None)
	TArray<class FName>                          BonesToIngoreWhileDragged;                         // 0xA68(0x10)(None)
	float                                        DefaultTPVZoom;                                    // 0xA78(0x4)(None)
	float                                        MaxTPVZoom;                                        // 0xA7C(0x4)(None)
	float                                        MinTPVZoom;                                        // 0xA80(0x4)(None)
	float                                        PreviewCameraMaxZoomMultiplier;                    // 0xA84(0x4)(None)
	float                                        PreviewCameraDefaultZoomMultiplier;                // 0xA88(0x4)(None)
	float                                        PreviewCameraDistanceScaleFactor;                  // 0xA8C(0x4)(None)
	class USoundBase*                            StartDraggedSound;                                 // 0xA90(0x8)(ZeroConstructor)
	class USoundBase*                            EndDraggedSound;                                   // 0xA98(0x8)(ZeroConstructor)
	class APrimalCharacter*                      DraggedCharacter;                                  // 0xAA0(0x8)(ZeroConstructor)
	class APrimalCharacter*                      DraggingCharacter;                                 // 0xAA8(0x8)(ZeroConstructor)
	uint8                                        Pad_2CC8[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceUnfreezeSkeletalDynamicsUntilTime;            // 0xB20(0x8)(None)
	float                                        StasisConsumerRangeMultiplier;                     // 0xB28(0x4)(None)
	uint8                                        bIsProne : 1;                                      // Mask: 0x1, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bCanEverProne : 1;                                 // Mask: 0x2, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bUseBlueprintJumpInputEvents : 1;                  // Mask: 0x4, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bUseDeferredMovement : 1;                          // Mask: 0x8, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bUseBPOverrideAccessInventoryInput : 1;            // Mask: 0x10, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bDisableCameraShakeOnNotifyHit : 1;                // Mask: 0x20, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bHasBuffPreSerializeForInstigator : 1;             // Mask: 0x40, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bIsSleeping : 1;                                   // Mask: 0x80, PropSize: 0x10xB2C(0x1)(None)
	uint8                                        bWantsToRun : 1;                                   // Mask: 0x1, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bActiveRunToggle : 1;                              // Mask: 0x2, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bLocalIsDragging : 1;                              // Mask: 0x4, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bIsBeingDragged : 1;                               // Mask: 0x8, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bDisableSpawnDefaultController : 1;                // Mask: 0x10, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bIsDragging : 1;                                   // Mask: 0x20, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bIsDraggingWithGrapHook : 1;                       // Mask: 0x40, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bAllowCapsuleDamageAfterDeath : 1;                 // Mask: 0x80, PropSize: 0x10xB2D(0x1)(None)
	uint8                                        bRemoteRunning : 1;                                // Mask: 0x1, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bCanRun : 1;                                       // Mask: 0x2, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bUseHealthDamageMaterialOverlay : 1;               // Mask: 0x4, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bIsBlinking : 1;                                   // Mask: 0x8, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bSleepedWaterRagdoll : 1;                          // Mask: 0x10, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bCanBeTorpid : 1;                                  // Mask: 0x20, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bDebugIK : 1;                                      // Mask: 0x40, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bDebugIK_ShowTraceNames : 1;                       // Mask: 0x80, PropSize: 0x10xB2E(0x1)(None)
	uint8                                        bForceAlwaysUpdateMesh : 1;                        // Mask: 0x1, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bRagdollIgnoresPawnCapsules : 1;                   // Mask: 0x2, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bUsePoopAnimationNotify : 1;                       // Mask: 0x4, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bIsBigDino : 1;                                    // Mask: 0x8, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bDeathUseRagdoll : 1;                              // Mask: 0x10, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bCanBeCarried : 1;                                 // Mask: 0x20, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bUseBPCanNotifyTeamAggroAI : 1;                    // Mask: 0x40, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bDamageNotifyTeamAggroAI : 1;                      // Mask: 0x80, PropSize: 0x10xB2F(0x1)(None)
	uint8                                        bUseBP_OverrideCameraTargetOriginLocation : 1;     // Mask: 0x1, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bUseBPGetOverrideCameraInterpSpeed : 1;            // Mask: 0x2, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bRecentlyUpdateIk : 1;                             // Mask: 0x4, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bIKEnabled : 1;                                    // Mask: 0x8, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bIsCarried : 1;                                    // Mask: 0x10, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bIsCarriedAsPassenger : 1;                         // Mask: 0x20, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bUseBPPreventFallDamage : 1;                       // Mask: 0x40, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bUseBPNotifyIsDamageCauserOfAddedBuff : 1;         // Mask: 0x80, PropSize: 0x10xB30(0x1)(None)
	uint8                                        bPreventProjectileAttachment : 1;                  // Mask: 0x1, PropSize: 0x10xB31(0x1)(None)
	uint8                                        BitPad_213 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CCB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                ImmobilizationActor;                               // 0xB38(0x8)(ZeroConstructor)
	uint8                                        bForceIKOnDedicatedServer : 1;                     // Mask: 0x1, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bIgnoreAllImmobilizationTraps : 1;                 // Mask: 0x2, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bForceTriggerIgnoredTraps : 1;                     // Mask: 0x4, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bIsImmobilized : 1;                                // Mask: 0x8, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bCanIgnoreWater : 1;                               // Mask: 0x10, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bIsDead : 1;                                       // Mask: 0x20, PropSize: 0x10xB40(0x1)(None)
	uint8                                        ReplicateAllBones : 1;                             // Mask: 0x40, PropSize: 0x10xB40(0x1)(None)
	uint8                                        AutoStopReplicationWhenSleeping : 1;               // Mask: 0x80, PropSize: 0x10xB40(0x1)(None)
	uint8                                        bCanDrag : 1;                                      // Mask: 0x1, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bCanBeDragged : 1;                                 // Mask: 0x2, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bUsesRunningAnimation : 1;                         // Mask: 0x4, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bForceNetDidLand : 1;                              // Mask: 0x8, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bPreventSimpleIK : 1;                              // Mask: 0x10, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bOnlyAllowRunningWhileFlying : 1;                  // Mask: 0x20, PropSize: 0x10xB41(0x1)(None)
	uint8                                        bOrbitCamera : 1;                                  // Mask: 0x40, PropSize: 0x10xB41(0x1)(None)
	uint8                                        BitPad_214 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_215 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDraggedFromExtremitiesOnly : 1;                   // Mask: 0x80, PropSize: 0x10xB42(0x1)(None)
	uint8                                        bEnableIK : 1;                                     // Mask: 0x1, PropSize: 0x10xB43(0x1)(None)
	uint8                                        bOnlyPlayPoopAnimWhileWalking : 1;                 // Mask: 0x2, PropSize: 0x10xB43(0x1)(None)
	uint8                                        bUseBlueprintAnimNotifyCustomEvent : 1;            // Mask: 0x4, PropSize: 0x10xB43(0x1)(None)
	uint8                                        bNoDamageImpulse : 1;                              // Mask: 0x8, PropSize: 0x10xB43(0x1)(None)
	uint8                                        bPreventImmobilization : 1;                        // Mask: 0x10, PropSize: 0x10xB43(0x1)(None)
	uint8                                        BitPad_216 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CCD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_217 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSleepingUseRagdoll : 1;                           // Mask: 0x2, PropSize: 0x10xB48(0x1)(None)
	uint8                                        bDediForceUnregisterSKMesh : 1;                    // Mask: 0x4, PropSize: 0x10xB48(0x1)(None)
	uint8                                        bReadyToPoop : 1;                                  // Mask: 0x8, PropSize: 0x10xB48(0x1)(None)
	uint8                                        bHasDynamicBase : 1;                               // Mask: 0x10, PropSize: 0x10xB48(0x1)(None)
	uint8                                        BitPad_218 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_219 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDieIfLeftWater : 1;                               // Mask: 0x2, PropSize: 0x10xB49(0x1)(None)
	uint8                                        bIsAmphibious : 1;                                 // Mask: 0x4, PropSize: 0x10xB49(0x1)(None)
	uint8                                        bUseAmphibiousTargeting : 1;                       // Mask: 0x8, PropSize: 0x10xB49(0x1)(None)
	uint8                                        bIsWaterDino : 1;                                  // Mask: 0x10, PropSize: 0x10xB49(0x1)(None)
	uint8                                        bIsFlyerDino : 1;                                  // Mask: 0x20, PropSize: 0x10xB49(0x1)(None)
	uint8                                        bIgnoreTargetingCarnivores : 1;                    // Mask: 0x40, PropSize: 0x10xB49(0x1)(None)
	uint8                                        BitPad_21A : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_21B : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsPlayingLowHealthAnim : 1;                       // Mask: 0x2, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        bAllowCharacterPainting : 1;                       // Mask: 0x4, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        bTickStatusComponent : 1;                          // Mask: 0x8, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        BitPad_21C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDontActuallyEmitPoop : 1;                         // Mask: 0x20, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        bBPHUDOverideBuffProgressBar : 1;                  // Mask: 0x40, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        bAllowRunningWhileSwimming : 1;                    // Mask: 0x80, PropSize: 0x10xB4A(0x1)(None)
	uint8                                        bUseBPNotifyBumpedByPawn : 1;                      // Mask: 0x1, PropSize: 0x10xB4B(0x1)(None)
	uint8                                        bUseBPNotifyBumpedPawn : 1;                        // Mask: 0x2, PropSize: 0x10xB4B(0x1)(None)
	uint8                                        bUseBPAdjustDamage : 1;                            // Mask: 0x4, PropSize: 0x10xB4B(0x1)(None)
	uint8                                        BitPad_21D : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPTimerServer : 1;                             // Mask: 0x1, PropSize: 0x10xB4C(0x1)(None)
	uint8                                        bUseBPTimerNonDedicated : 1;                       // Mask: 0x2, PropSize: 0x10xB4C(0x1)(None)
	uint8                                        bTriggerBPStasis : 1;                              // Mask: 0x4, PropSize: 0x10xB4C(0x1)(None)
	uint8                                        bUseBPSetCharacterMeshseMaterialScalarParamValue : 1; // Mask: 0x8, PropSize: 0x10xB4C(0x1)(None)
	uint8                                        BitPad_21E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CCE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BPTimerServerMin;                                  // 0xB50(0x4)(None)
	float                                        BPTimerServerMax;                                  // 0xB54(0x4)(None)
	float                                        BPTimerNonDedicatedMin;                            // 0xB58(0x4)(None)
	float                                        BPTimerNonDedicatedMax;                            // 0xB5C(0x4)(None)
	double                                       NextBPTimerServer;                                 // 0xB60(0x8)(None)
	double                                       NextBPTimerNonDedicated;                           // 0xB68(0x8)(None)
	uint8                                        bIsMounted : 1;                                    // Mask: 0x1, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bPreventTargetingByTurrets : 1;                    // Mask: 0x2, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bDelayFootstepsUnderMinInterval : 1;               // Mask: 0x4, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bSleepingDisableIK : 1;                            // Mask: 0x8, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bRagdollRetainAnimations : 1;                      // Mask: 0x10, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bUseBPAddedAttachments : 1;                        // Mask: 0x20, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bCanPlayLandingAnim : 1;                           // Mask: 0x40, PropSize: 0x10xB70(0x1)(None)
	uint8                                        bOnlyHasRunningAnimationWhenWalking : 1;           // Mask: 0x80, PropSize: 0x10xB70(0x1)(None)
	uint8                                        BitPad_21F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventTargetingAndMovement : 1;                  // Mask: 0x2, PropSize: 0x10xB71(0x1)(None)
	uint8                                        bPreventMovement : 1;                              // Mask: 0x4, PropSize: 0x10xB71(0x1)(None)
	uint8                                        bPreventWaterHopCorrectionVelChange : 1;           // Mask: 0x8, PropSize: 0x10xB71(0x1)(None)
	uint8                                        BitPad_220 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBPPreventInputType : 1;                           // Mask: 0x20, PropSize: 0x10xB71(0x1)(None)
	uint8                                        bForcePreventAllInput : 1;                         // Mask: 0x40, PropSize: 0x10xB71(0x1)(None)
	uint8                                        bPreventAllBuffs : 1;                              // Mask: 0x80, PropSize: 0x10xB71(0x1)(None)
	uint8                                        LastIsInsideVaccumSealedCube : 1;                  // Mask: 0x1, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bPreventJump : 1;                                  // Mask: 0x2, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bUseBPPreventStasis : 1;                           // Mask: 0x4, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bDestroyOnStasis : 1;                              // Mask: 0x8, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bUseBPPreSerializeSaveGame : 1;                    // Mask: 0x10, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bUseBPPostLoadedFromSaveGame : 1;                  // Mask: 0x20, PropSize: 0x10xB72(0x1)(None)
	uint8                                        bUseHeavyCombatMusic : 1;                          // Mask: 0x40, PropSize: 0x10xB72(0x1)(None)
	uint8                                        BitPad_221 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBPModifyAllowedViewHitDir : 1;                    // Mask: 0x1, PropSize: 0x10xB73(0x1)(None)
	uint8                                        bBPLimitPlayerRotation : 1;                        // Mask: 0x2, PropSize: 0x10xB73(0x1)(None)
	uint8                                        bBPManagedFPVViewLocation : 1;                     // Mask: 0x4, PropSize: 0x10xB73(0x1)(None)
	uint8                                        bBPCameraRotationFinal : 1;                        // Mask: 0x8, PropSize: 0x10xB73(0x1)(None)
	uint8                                        bServerBPNotifyInventoryItemChangesUseQuantity : 1; // Mask: 0x10, PropSize: 0x10xB73(0x1)(None)
	uint8                                        bServerBPNotifyInventoryItemChanges : 1;           // Mask: 0x20, PropSize: 0x10xB73(0x1)(None)
	uint8                                        BitPad_222 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastCausedDamageTime;                              // 0xB78(0x8)(None)
	class AActor*                                LastDamageCauser;                                  // 0xB80(0x8)(ZeroConstructor)
	uint8                                        bIsAtMaxInventoryItems : 1;                        // Mask: 0x1, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bUseBPOnStaminaDrained : 1;                        // Mask: 0x2, PropSize: 0x10xB88(0x1)(None)
	uint8                                        BitPad_223 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPGrabDebugSnapshot : 1;                       // Mask: 0x8, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bIsAttachedOtherCharacter : 1;                     // Mask: 0x10, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bUseBPOnLethalDamage : 1;                          // Mask: 0x20, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bUseBPAdjustTorpidityDamage : 1;                   // Mask: 0x40, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bUseBPForceCameraStyle : 1;                        // Mask: 0x80, PropSize: 0x10xB88(0x1)(None)
	uint8                                        bUseBPRemovedAsPassenger : 1;                      // Mask: 0x1, PropSize: 0x10xB89(0x1)(None)
	uint8                                        bDisableFPV : 1;                                   // Mask: 0x2, PropSize: 0x10xB89(0x1)(None)
	uint8                                        bConsumeZoomInput : 1;                             // Mask: 0x4, PropSize: 0x10xB89(0x1)(None)
	uint8                                        bDisableIkOnDeath : 1;                             // Mask: 0x8, PropSize: 0x10xB89(0x1)(None)
	uint8                                        BitPad_224 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD3[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ImmobilizationTrapsToIgnore;                       // 0xB90(0x10)(ZeroConstructor)
	uint8                                        Pad_2CD4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalDinoCharacter>   CarryingDino;                                      // 0xBA8(0x8)(ZeroConstructor)
	class FName                                  DediOverrideCapsuleCollisionProfileName;           // 0xBB0(0x8)(None)
	class FName                                  DediOverrideMeshCollisionProfileName;              // 0xBB8(0x8)(None)
	class FName                                  SnaredFromSocket;                                  // 0xBC0(0x8)(None)
	class UClass*                                DeathDestructionDepositInventoryClass;             // 0xBC8(0x8)(ZeroConstructor)
	float                                        DamageNotifyTeamAggroMultiplier;                   // 0xBD0(0x4)(None)
	float                                        DamageNotifyTeamAggroRange;                        // 0xBD4(0x4)(None)
	float                                        DamageNotifyTeamAggroRangeFalloff;                 // 0xBD8(0x4)(None)
	float                                        ReplicatedCurrentHealth;                           // 0xBDC(0x4)(None)
	float                                        ReplicatedMaxHealth;                               // 0xBE0(0x4)(None)
	float                                        ReplicatedCurrentTorpor;                           // 0xBE4(0x4)(None)
	float                                        ReplicatedMaxTorpor;                               // 0xBE8(0x4)(None)
	uint8                                        Pad_2CD6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalProjectileGrapplingHook*        LastGrapHookPullingMe;                             // 0xBF0(0x8)(ZeroConstructor)
	uint8                                        BitPad_225 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bInRagdoll : 1;                                    // Mask: 0x4, PropSize: 0x10xBF8(0x1)(None)
	uint8                                        bIsNPC : 1;                                        // Mask: 0x8, PropSize: 0x10xBF8(0x1)(None)
	uint8                                        BitPad_226 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsDraggingWithOffset : 1;                         // Mask: 0x1, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bIsDraggedWithOffset : 1;                          // Mask: 0x2, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bPreventRunningWhileWalking : 1;                   // Mask: 0x4, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bCanLandOnWater : 1;                               // Mask: 0x8, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bUseBPAdjustMoveForward : 1;                       // Mask: 0x10, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bUseBPAdjustMoveRight : 1;                         // Mask: 0x20, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bUseBPGetGravity : 1;                              // Mask: 0x40, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bAllowDamageWhenMounted : 1;                       // Mask: 0x80, PropSize: 0x10xBF9(0x1)(None)
	uint8                                        bUseBPOnAttachmentReplication : 1;                 // Mask: 0x1, PropSize: 0x10xBFA(0x1)(None)
	uint8                                        bUseBPOnMovementModeChangedNotify : 1;             // Mask: 0x2, PropSize: 0x10xBFA(0x1)(None)
	uint8                                        bUseBPOnAnimPlayedNotify : 1;                      // Mask: 0x4, PropSize: 0x10xBFA(0x1)(None)
	uint8                                        bUseBPOverrideCharacterNewFallVelocity : 1;        // Mask: 0x8, PropSize: 0x10xBFA(0x1)(None)
	uint8                                        BitPad_227 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD8[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPOverrideCharacterSound : 1;                  // Mask: 0x1, PropSize: 0x10xBFC(0x1)(None)
	uint8                                        bUseBPOverrideCharacterParticle : 1;               // Mask: 0x2, PropSize: 0x10xBFC(0x1)(None)
	uint8                                        BitPad_228 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CD9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBP_OnSetRunningEvent : 1;                      // Mask: 0x1, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bForceTurretFastTargeting : 1;                     // Mask: 0x2, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bFlyingOrWaterDinoPreventBackwardsRun : 1;         // Mask: 0x4, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bUseBPOverrideFlyingVelocity : 1;                  // Mask: 0x8, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bSleepingDisableRagdoll : 1;                       // Mask: 0x10, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bDestroyOnStasisWhenDead : 1;                      // Mask: 0x20, PropSize: 0x10xC00(0x1)(None)
	uint8                                        bPreventLiveBlinking : 1;                          // Mask: 0x40, PropSize: 0x10xC00(0x1)(None)
	uint8                                        BitPad_229 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceAlwaysUpdateMeshAndCollision : 1;            // Mask: 0x1, PropSize: 0x10xC01(0x1)(None)
	uint8                                        BitPad_22A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CDA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPGetHUDElements : 1;                          // Mask: 0x1, PropSize: 0x10xC04(0x1)(None)
	uint8                                        bPreventHurtAnim : 1;                              // Mask: 0x2, PropSize: 0x10xC04(0x1)(None)
	uint8                                        BitPad_22B : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CDC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     LastGrapHookPullingOwner;                          // 0xC08(0x8)(ZeroConstructor)
	uint8                                        bUseBPCanBeBaseForCharacter : 1;                   // Mask: 0x1, PropSize: 0x10xC10(0x1)(None)
	uint8                                        bUseBPCanBaseOnCharacter : 1;                      // Mask: 0x2, PropSize: 0x10xC10(0x1)(None)
	uint8                                        bUseBPOnLanded : 1;                                // Mask: 0x4, PropSize: 0x10xC10(0x1)(None)
	uint8                                        bEnableMoveCollapsing : 1;                         // Mask: 0x8, PropSize: 0x10xC10(0x1)(None)
	uint8                                        bUseBP_ForceAllowBuffClasses : 1;                  // Mask: 0x10, PropSize: 0x10xC10(0x1)(None)
	uint8                                        BitPad_22C : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CDD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DragOffset;                                        // 0xC18(0x18)(None)
	uint8                                        bUseBPCheckJumpInput : 1;                          // Mask: 0x1, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBPOverrideHurtAnim : 1;                        // Mask: 0x2, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBPOverrideDamageCauserHitMarker : 1;           // Mask: 0x4, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bIsSkinned : 1;                                    // Mask: 0x8, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBPAdjustImpulseFromDamage : 1;                 // Mask: 0x10, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBPAdjustCharacterMovementImpulse : 1;          // Mask: 0x20, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBPModifyFOVInterpSpeed : 1;                    // Mask: 0x40, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bVerifyBasingForSaddleStructures : 1;              // Mask: 0x80, PropSize: 0x10xC30(0x1)(None)
	uint8                                        bUseBP_OverrideTerminalVelocity : 1;               // Mask: 0x1, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bUseBP_ShouldForceDisableTPVCameraInterpolation : 1; // Mask: 0x2, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bUseBPAllowPlayMontage : 1;                        // Mask: 0x4, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bPreventPerPixelPainting : 1;                      // Mask: 0x8, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bUseBPItemSlotOverrides : 1;                       // Mask: 0x10, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bPreventMoveUp : 1;                                // Mask: 0x20, PropSize: 0x10xC31(0x1)(None)
	uint8                                        bForceAllowDediServerGroundConformInterpolate : 1; // Mask: 0x40, PropSize: 0x10xC31(0x1)(None)
	uint8                                        BitPad_22D : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2CDF[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundBase*>                    CharacterOverrideSoundFrom;                        // 0xC38(0x10)(ZeroConstructor)
	TArray<class USoundBase*>                    CharacterOverrideSoundTo;                          // 0xC48(0x10)(ZeroConstructor)
	TArray<class UParticleSystem*>               CharacterOverrideParticleFrom;                     // 0xC58(0x10)(ZeroConstructor)
	TArray<class UParticleSystem*>               CharacterOverrideParticleTo;                       // 0xC68(0x10)(ZeroConstructor)
	uint8                                        Pad_2CE0[0x44];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DraggedBoneIndex;                                  // 0xCBC(0x4)(None)
	int32                                        CustomBitFlags;                                    // 0xCC0(0x4)(None)
	float                                        RunningSpeedModifier;                              // 0xCC4(0x4)(None)
	uint8                                        Pad_2CE1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          DeathAnim;                                         // 0xCD8(0x8)(ZeroConstructor)
	class UAnimationAsset*                       ReplicatedDeathAnim;                               // 0xCE0(0x8)(ZeroConstructor)
	TSoftObjectPtr<class UAnimationAsset>        SavedDeathAnim;                                    // 0xCE8(0x30)(ZeroConstructor)
	class USoundBase*                            DeathSound;                                        // 0xD18(0x8)(ZeroConstructor)
	class USoundBase*                            RunLoopSound;                                      // 0xD20(0x8)(ZeroConstructor)
	class USoundBase*                            RunStopSound;                                      // 0xD28(0x8)(ZeroConstructor)
	TArray<class USoundBase*>                    FootStepSoundsPhysMat;                             // 0xD30(0x10)(ZeroConstructor)
	TArray<class USoundBase*>                    LandedSoundsPhysMat;                               // 0xD40(0x10)(ZeroConstructor)
	struct FVelocityBasedCharacterSoundInfo      VelocityBasedLandedSounds;                         // 0xD50(0x38)(ZeroConstructor)
	uint8                                        Pad_2CE2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  MeshRootSocketName;                                // 0xD8C(0x8)(None)
	uint8                                        Pad_2CE3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxFallSpeed;                                      // 0xD9C(0x4)(None)
	float                                        FallDamageMultiplier;                              // 0xDA0(0x4)(None)
	uint8                                        Pad_2CE4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioComponent*                       RunLoopAC;                                         // 0xDA8(0x8)(ZeroConstructor)
	struct FConstraintInstance                   DraggingConstraint;                                // 0xDB0(0x278)(None)
	uint8                                        Pad_2CE5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ServerTargetCarriedYaw;                            // 0x1030(0x4)(None)
	uint8                                        Pad_2CE6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            NetDynamicMusicSound;                              // 0x1038(0x8)(ZeroConstructor)
	TWeakObjectPtr<class APrimalDinoCharacter>   MountedDino;                                       // 0x1040(0x8)(ZeroConstructor)
	double                                       MountedDinoTime;                                   // 0x1048(0x8)(None)
	uint8                                        Pad_2CE7[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 LastBasedMovementActorRef;                         // 0x1090(0x8)(ZeroConstructor)
	float                                        GrabWeightThreshold;                               // 0x1098(0x4)(None)
	float                                        DragWeight;                                        // 0x109C(0x4)(None)
	uint8                                        Pad_2CE8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DescriptiveName;                                   // 0x10A8(0x10)(None)
	TArray<struct FVector_NetQuantize>           ReplicatedRagdollPositions;                        // 0x10B8(0x10)(None)
	TArray<struct FRotator_NetQuantize>          ReplicatedRagdollRotations;                        // 0x10C8(0x10)(None)
	uint8                                        Pad_2CE9[0x64];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        KillXPBase;                                        // 0x113C(0x4)(None)
	uint8                                        Pad_2CEA[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RagdollReplicationInterval;                        // 0x1150(0x4)(None)
	uint8                                        Pad_2CEB[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBoneDamageAdjuster>           BoneDamageAdjusters;                               // 0x1160(0x10)(None)
	float                                        ClientRotationInterpSpeed;                         // 0x1170(0x4)(None)
	float                                        ClientLocationInterpSpeed;                         // 0x1174(0x4)(None)
	float                                        MaxDragMovementSpeed;                              // 0x1178(0x4)(None)
	uint8                                        Pad_2CEC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              CurrentAimRot;                                     // 0x1180(0x18)(None)
	struct FVector                               CurrentRootLoc;                                    // 0x1198(0x18)(None)
	uint8                                        Pad_2CED[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalCharacterStatusComponent*       MyCharacterStatusComponent;                        // 0x11C8(0x8)(ZeroConstructor)
	uint8                                        Pad_2CEE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalInventoryComponent*             MyInventoryComponent;                              // 0x11D8(0x8)(ZeroConstructor)
	class UAnimMontage*                          SyncedMontage;                                     // 0x11E0(0x8)(ZeroConstructor)
	uint8                                        Pad_2CEF[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MontageSyncInterval;                               // 0x11F4(0x4)(None)
	double                                       LastRunningTime;                                   // 0x11F8(0x8)(None)
	struct FVector                               TPVCameraOffset;                                   // 0x1200(0x18)(None)
	struct FVector                               TPVCameraOffsetMultiplier;                         // 0x1218(0x18)(None)
	float                                        TPVCameraHorizontalOffsetFactorMax;                // 0x1230(0x4)(None)
	float                                        TPVCameraHorizontalOffsetFactorMaxClamp;           // 0x1234(0x4)(None)
	struct FVector                               TPVCameraOrgOffset;                                // 0x1238(0x18)(None)
	float                                        LandedSoundMaxRange;                               // 0x1250(0x4)(None)
	float                                        FallingDamageHealthScaleBase;                      // 0x1254(0x4)(None)
	float                                        FootstepsMaxRange;                                 // 0x1258(0x4)(None)
	float                                        MinTimeBetweenFootsteps;                           // 0x125C(0x4)(None)
	uint8                                        Pad_2CF0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinTimeBetweenFootstepsRunning;                    // 0x1268(0x4)(None)
	uint8                                        Pad_2CF1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UAnimMontage>>   AnimationsPreventInput;                            // 0x1270(0x10)(ZeroConstructor)
	class UClass*                                DeathHarvestingComponent;                          // 0x1280(0x8)(ZeroConstructor)
	class UPrimalHarvestingComponent*            MyDeathHarvestingComponent;                        // 0x1288(0x8)(ZeroConstructor)
	uint8                                        Pad_2CF2[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AController>            LastDamageEventInstigator;                         // 0x12C0(0x8)(ZeroConstructor)
	uint8                                        Pad_2CF3[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EVisibilityBasedAnimTickOption    PreDragComponentUpdateFlag;                        // 0x12E8(0x1)(None)
	enum class EShooterPhysMaterialType          TargetableDamageFXDefaultPhysMaterial;             // 0x12E9(0x1)(None)
	uint8                                        Pad_2CF4[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          PoopAnimation;                                     // 0x12F0(0x8)(ZeroConstructor)
	uint8                                        Pad_2CF5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       CorpseDestructionTime;                             // 0x1300(0x8)(None)
	bool                                         bIsHost;                                           // 0x1308(0x1)(None)
	uint8                                        Pad_2CF6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CorpseLifespan;                                    // 0x130C(0x4)(None)
	float                                        TPVStructurePlacingHeightMultiplier;               // 0x1310(0x4)(None)
	float                                        CorpseFadeAwayTime;                                // 0x1314(0x4)(None)
	float                                        RagdollDeathImpulseScaler;                         // 0x1318(0x4)(None)
	uint8                                        Pad_2CF7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            PoopSound;                                         // 0x1320(0x8)(ZeroConstructor)
	float                                        BaseTargetingDesirability;                         // 0x1328(0x4)(None)
	float                                        DeadBaseTargetingDesirability;                     // 0x132C(0x4)(None)
	struct FRotator                              OrbitCamRot;                                       // 0x1330(0x18)(None)
	float                                        OrbitCamZoom;                                      // 0x1348(0x4)(None)
	float                                        OrbitCamZoomStepSize;                              // 0x134C(0x4)(None)
	float                                        OrbitCamMinZoomLevel;                              // 0x1350(0x4)(None)
	float                                        OrbitCamMaxZoomLevel;                              // 0x1354(0x4)(None)
	uint8                                        Pad_2CF8[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeNotInFalling;                              // 0x1380(0x8)(None)
	float                                        MaxCursorHUDDistance;                              // 0x1388(0x4)(None)
	float                                        AddForwardVelocityOnJump;                          // 0x138C(0x4)(None)
	struct FVector                               DeathActorTargetingOffset;                         // 0x1390(0x18)(None)
	class FName                                  SocketOverrideTargetingLocation;                   // 0x13A8(0x8)(None)
	uint8                                        Pad_2CF9[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeSubmerged;                                 // 0x13E0(0x8)(None)
	uint8                                        Pad_2CFA[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FootPhysicalSurfaceCheckInterval;                  // 0x13F8(0x4)(None)
	uint8                                        Pad_2CFB[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalCharacter>       LastAttackedNearbyPlayer;                          // 0x1410(0x8)(ZeroConstructor)
	double                                       LastAttackedNearbyPlayerTime;                      // 0x1418(0x8)(None)
	uint8                                        Pad_2CFC[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RagdollImpactDamageVelocityScale;                  // 0x1440(0x4)(None)
	float                                        RagdollImpactDamageMinDecelerationSpeed;           // 0x1444(0x4)(None)
	float                                        StartFallingImpactRagdollTimeInterval;             // 0x1448(0x4)(None)
	uint8                                        Pad_2CFD[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeUpdatedCharacterStatusComponent;           // 0x1478(0x8)(None)
	double                                       LastTimeUpdatedCorpseDestructionTime;              // 0x1480(0x8)(None)
	uint8                                        Pad_2CFE[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            EnteredSwimmingSound;                              // 0x14A0(0x8)(ZeroConstructor)
	struct FVelocityBasedCharacterSoundInfo      VelocityBasedEnteredSwimmingSounds;                // 0x14A8(0x38)(ZeroConstructor)
	class USoundBase*                            EnteredSleepingSound;                              // 0x14E0(0x8)(ZeroConstructor)
	class USoundBase*                            LeftSleepingSound;                                 // 0x14E8(0x8)(ZeroConstructor)
	uint8                                        Pad_2CFF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastWalkingTime;                                   // 0x1500(0x8)(None)
	uint8                                        Pad_2D00[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CorpseDraggedDecayRate;                            // 0x1528(0x4)(None)
	float                                        PoopAltItemChance;                                 // 0x152C(0x4)(None)
	class UClass*                                PoopAltItemClass;                                  // 0x1530(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalBuff>>     DefaultBuffs;                                      // 0x1538(0x10)(ZeroConstructor)
	class UTexture2D*                            PoopIcon;                                          // 0x1548(0x8)(ZeroConstructor)
	float                                        RunningMaxDesiredRotDelta;                         // 0x1550(0x4)(None)
	float                                        CorpseDestructionTimer;                            // 0x1554(0x4)(None)
	double                                       LastSkinnedTime;                                   // 0x1558(0x8)(None)
	uint8                                        Pad_2D01[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnDied;                                            // 0x1568(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnNotifyDamage;                                    // 0x1578(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnSleepStateChanged;                               // 0x1588(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyLevelUp;                                     // 0x1598(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyUnstasis;                                    // 0x15A8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyStasis;                                      // 0x15B8(0x10)(ZeroConstructor)
	uint8                                        Pad_2D02[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeInSwimming;                                // 0x15E8(0x8)(None)
	uint8                                        Pad_2D03[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDefaultTextureParamOverride>  DefaultNoItemTextureParamOverrides;                // 0x15F8(0x10)(ZeroConstructor)
	uint8                                        Pad_2D04[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStructurePaintingComponent*           PaintingComponent;                                 // 0x1620(0x8)(ZeroConstructor)
	float                                        ExtraMaxSpeedModifier;                             // 0x1628(0x4)(None)
	float                                        ExtraRotationRateModifier;                         // 0x162C(0x4)(None)
	float                                        TamedDinoCallOutRange;                             // 0x1630(0x4)(None)
	uint8                                        Pad_2D05[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TargetPathfindingLocationOffset;                   // 0x1640(0x18)(None)
	double                                       LastTookDamageTime;                                // 0x1658(0x8)(None)
	float                                        ExtraReceiveDamageMultiplier;                      // 0x1660(0x4)(None)
	float                                        ExtraMeleeDamageMultiplier;                        // 0x1664(0x4)(None)
	uint8                                        Pad_2D06[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageTheMeleeDamageCauserPercent;                 // 0x1680(0x4)(None)
	float                                        DurabilityDegrateTheMeleeDamageCauserPercent;      // 0x1684(0x4)(None)
	class UClass*                                DamageTheMeleeDamageCauserDamageType;              // 0x1688(0x8)(ZeroConstructor)
	uint8                                        TribeGroupInventoryRank;                           // 0x1690(0x1)(None)
	uint8                                        Pad_2D07[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CharacterDamageImpulseMultiplier;                  // 0x1694(0x4)(None)
	uint8                                        Pad_2D08[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCanBePushed : 1;                                  // Mask: 0x1, PropSize: 0x10x16A0(0x1)(None)
	uint8                                        bCanPushOthers : 1;                                // Mask: 0x2, PropSize: 0x10x16A0(0x1)(None)
	uint8                                        bIsBigPusher : 1;                                  // Mask: 0x4, PropSize: 0x10x16A0(0x1)(None)
	uint8                                        bCanEverCrouch : 1;                                // Mask: 0x8, PropSize: 0x10x16A0(0x1)(None)
	uint8                                        BitPad_22E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D09[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxRagdollDeathVelocityImpulse;                    // 0x16C0(0x4)(None)
	float                                        ClientRotationInterpSpeedMultiplierGround;         // 0x16C4(0x4)(None)
	double                                       LastIkUpdateTime;                                  // 0x16C8(0x8)(None)
	float                                        GlideGravityScaleMultiplier;                       // 0x16D0(0x4)(None)
	float                                        GlideMaxCarriedWeight;                             // 0x16D4(0x4)(None)
	uint8                                        Pad_2D0A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DefaultCameraStyle;                                // 0x16E0(0x8)(None)
	float                                        ScaleDeathHarvestHealthyByMaxHealthBase;           // 0x16E8(0x4)(None)
	uint8                                        Pad_2D0B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            NotifyInputEvent;                                  // 0x16F0(0x10)(ZeroConstructor)
	uint8                                        Pad_2D0C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RunMinVelocityRotDot;                              // 0x1710(0x4)(None)
	uint8                                        Pad_2D0D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastHitDamageTime;                                 // 0x1718(0x8)(None)
	uint8                                        bShouldBeInGodMode;                                // 0x1720(0x1)(None)
	uint8                                        Pad_2D0E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class APrimalCharacter>> SavedBasedCharacters;                              // 0x1728(0x10)(ZeroConstructor)
	uint8                                        Pad_2D0F[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MeshingTickCounterMultiplier;                      // 0x1788(0x4)(None)
	uint8                                        Pad_2D10[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalBuff>>     PreventBuffClasses;                                // 0x1790(0x10)(ZeroConstructor)
	TArray<class FName>                          PreventBuffClassesWithTag;                         // 0x17A0(0x10)(None)
	uint8                                        bIgnoreLowGravityDisorientation : 1;               // Mask: 0x1, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bUseBPOnMassTeleportEvent : 1;                     // Mask: 0x2, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bUseBlueprintAnimNotifyCustomState : 1;            // Mask: 0x4, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bPreventIKWhenNotWalking : 1;                      // Mask: 0x8, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bIgnoreCorpseDecompositionMultipliers : 1;         // Mask: 0x10, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bInterpHealthDamageMaterialOverlayAlpha : 1;       // Mask: 0x20, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bSuppressPlayerKillNotification : 1;               // Mask: 0x40, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bAllowCorpseDestructionWithPreventSaving : 1;      // Mask: 0x80, PropSize: 0x10x17B0(0x1)(None)
	uint8                                        bPreventInventoryAccess : 1;                       // Mask: 0x1, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bUseGetOverrideSocket : 1;                         // Mask: 0x2, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bAllowBPNewDoorInteractionDrawHUD : 1;             // Mask: 0x4, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bJumpOnRelease : 1;                                // Mask: 0x8, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bAllowMultiUseByRemoteDino : 1;                    // Mask: 0x10, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bUseBPOverrideJumpZModifier : 1;                   // Mask: 0x20, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bUseZeroGravityWander : 1;                         // Mask: 0x40, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bUseBPPreventNotifySound : 1;                      // Mask: 0x80, PropSize: 0x10x17B1(0x1)(None)
	uint8                                        bUseBP_ModifyInputAcceleration : 1;                // Mask: 0x1, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bUseBP_ModifySavedMoveAcceleration_PreRep : 1;     // Mask: 0x2, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bUseBP_ModifySavedMoveAcceleration_PostRep : 1;    // Mask: 0x4, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bForceSimpleTeleportFade : 1;                      // Mask: 0x8, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bUseBPGetArmorDurabilityDecreaseMultiplier : 1;    // Mask: 0x10, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bUseBPShieldBlock : 1;                             // Mask: 0x20, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bHideFromScans : 1;                                // Mask: 0x40, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bOverrideWalkingVelocity : 1;                      // Mask: 0x80, PropSize: 0x10x17B2(0x1)(None)
	uint8                                        bOverrideSwimmingVelocity : 1;                     // Mask: 0x1, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bOverrideSwimmingAcceleration : 1;                 // Mask: 0x2, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bOverrideNewFallVelocity : 1;                      // Mask: 0x4, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bOverrideFlyingVelocity : 1;                       // Mask: 0x8, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bUsesRootMotion : 1;                               // Mask: 0x10, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bEnableAnimationGroundConforming : 1;              // Mask: 0x20, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        bWasBeingDragged : 1;                              // Mask: 0x40, PropSize: 0x10x17B3(0x1)(None)
	uint8                                        BitPad_22F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D11[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ControlledInventoryAccessDistanceOffset;           // 0x17D0(0x4)(None)
	uint8                                        Pad_2D12[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnOrbitCameraViewChange;                           // 0x17D8(0x10)(ZeroConstructor)
	float                                        AdditionalMaxUseDistance;                          // 0x17E8(0x4)(None)
	TWeakObjectPtr<class AActor>                 TetherActor;                                       // 0x17EC(0x8)(ZeroConstructor)
	float                                        TetherRadius;                                      // 0x17F4(0x4)(None)
	float                                        TetherHeight;                                      // 0x17F8(0x4)(None)
	uint8                                        Pad_2D13[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPOverridePhysicsImpulses : 1;                 // Mask: 0x1, PropSize: 0x10x17FD(0x1)(None)
	uint8                                        BitPad_230 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D14[0x42];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAllowASACamera : 1;                               // Mask: 0x1, PropSize: 0x10x1840(0x1)(None)
	uint8                                        BitPad_231 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D15[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ASACameraConfigClass;                              // 0x1848(0x8)(ZeroConstructor)
	class UPrimalCameraConfig*                   CurrentPrimalCameraConfig;                         // 0x1850(0x8)(ZeroConstructor)
	class FName                                  CameraProfileIdOverride;                           // 0x1858(0x8)(None)
	double                                       LastStartedSleepingTime;                           // 0x1860(0x8)(None)
	double                                       ForcePreventCharZInterpUntilTime;                  // 0x1868(0x8)(None)
	TMap<class FName, class UAnimationAsset*>    DeathAnimations;                                   // 0x1870(0x50)(ZeroConstructor)
	uint8                                        bDediServerAutoUnregisterSkeletalMeshWhenNotRelevant : 1; // Mask: 0x1, PropSize: 0x10x18C0(0x1)(None)
	uint8                                        bPreventUnconsciousMeshBasing : 1;                 // Mask: 0x2, PropSize: 0x10x18C0(0x1)(None)
	uint8                                        bUseOnCharacterSteppedNotify : 1;                  // Mask: 0x4, PropSize: 0x10x18C0(0x1)(None)
	uint8                                        BitPad_232 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsDoingDraggedInterp : 1;                         // Mask: 0x1, PropSize: 0x10x18C1(0x1)(None)
	uint8                                        bCorrectMeshRelativeZOffsetWhileDragged : 1;       // Mask: 0x2, PropSize: 0x10x18C1(0x1)(None)
	uint8                                        bReturnToCapsuleCenterWhenDroppedInWater : 1;      // Mask: 0x4, PropSize: 0x10x18C1(0x1)(None)
	uint8                                        BitPad_233 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D16[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class UParticleSystemComponent*>        ParticleSystemsToActivateAfterDragged;             // 0x18C8(0x50)(ZeroConstructor)
	TSet<class UNiagaraComponent*>               NiagaraSystemsToActivateAfterDragged;              // 0x1918(0x50)(ZeroConstructor)
	float                                        DraggingInterpSpeed;                               // 0x1968(0x4)(None)
	float                                        DraggingInterpDuration;                            // 0x196C(0x4)(None)
	enum class EMovementMode                     DraggedMovementMode;                               // 0x1970(0x1)(None)
	uint8                                        Pad_2D17[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                CharacterSavedDynamicBase;                         // 0x1978(0x8)(ZeroConstructor)
	class FName                                  CharacterSavedDynamicBaseBoneName;                 // 0x1980(0x8)(None)
	struct FVector                               CharacterSavedDynamicBaseRelativeLocation;         // 0x1988(0x18)(None)
	struct FQuat                                 CharacterSavedDynamicBaseRelativeRotation;         // 0x19A0(0x20)(None)
	uint8                                        Pad_2D18[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DragSocketVerticalOffsetAsCapsulePercent;          // 0x19D8(0x4)(None)
	enum class ETickingGroup                     BeingDraggedMovementComponentTickGroup;            // 0x19DC(0x1)(None)
	enum class ETickingGroup                     DraggingMovementComponentTickGroup;                // 0x19DD(0x1)(None)
	uint8                                        Pad_2D19[0x26];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CharacterLocalControlZInterpSpeed;                 // 0x1A04(0x4)(None)
	float                                        DeathCapsuleRadiusMultiplier;                      // 0x1A08(0x4)(None)
	float                                        DeathCapsuleHalfHeightMultiplier;                  // 0x1A0C(0x4)(None)
	float                                        DeathMeshRelativeZOffsetAsCapsulePercent;          // 0x1A10(0x4)(None)
	float                                        EnvironmentInteractionPlasticityMult;              // 0x1A14(0x4)(None)
	float                                        EnvironmentInteractionPlasticityExponent;          // 0x1A18(0x4)(None)
	uint8                                        bOverrideBlendSpaceSmoothType : 1;                 // Mask: 0x1, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        BitPad_234 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetworkClientsUpdateBasedMovementOnTick : 1;      // Mask: 0x4, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        bUseArmorDurabilityVFX : 1;                        // Mask: 0x8, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        bPreventStaggeredMovement : 1;                     // Mask: 0x10, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        bBPForceUseOldASECamera : 1;                       // Mask: 0x20, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        bUsesWaterFinLocking : 1;                          // Mask: 0x40, PropSize: 0x10x1A1C(0x1)(None)
	uint8                                        BitPad_235 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D1A[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        DamageImpactFXForAttacker;                         // 0x1A28(0x8)(ZeroConstructor)
	float                                        DamageImpactFXSizeOverride;                        // 0x1A30(0x4)(None)
	class FName                                  NonLocationalDamageHurtFXSocket;                   // 0x1A34(0x8)(None)
	uint8                                        Pad_2D1B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NonLocationalDamageHurtFXScaleOverride;            // 0x1A40(0x18)(None)
	double                                       PossessedAtTime;                                   // 0x1A58(0x8)(None)
	class UTexture2D*                            DragBodyIcon;                                      // 0x1A60(0x8)(ZeroConstructor)
	class UTexture2D*                            ReleaseBodyIcon;                                   // 0x1A68(0x8)(ZeroConstructor)
	class UTexture2D*                            MoveCloserIcon;                                    // 0x1A70(0x8)(ZeroConstructor)
	class UTexture2D*                            ColorizeIcon;                                      // 0x1A78(0x8)(ZeroConstructor)
	class UTexture2D*                            TrackingInfoIcon;                                  // 0x1A80(0x8)(ZeroConstructor)
	class UTexture2D*                            ToggleTrackingIcon;                                // 0x1A88(0x8)(ZeroConstructor)
	class UTexture2D*                            TogglePOIIcon;                                     // 0x1A90(0x8)(ZeroConstructor)
	float                                        EquippedArmorDurabilityPercent1;                   // 0x1A98(0x4)(None)
	float                                        EquippedArmorDurabilityPercent2;                   // 0x1A9C(0x4)(None)
	float                                        ArmorDurabilityPercentUpdateInterval;              // 0x1AA0(0x4)(None)
	uint8                                        Pad_2D1C[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalCharacter* GetDefaultObj();

	void ZoomOut();
	void ZoomIn();
	void UseCenteredTPVCamera(bool ReturnValue);
	void UpdateTickSetting();
	void UpdateSwimmingState();
	void UpdateHasBuffPreSerialize(bool ReturnValue);
	void UpdateEquippedItemDurabilityVariable(const struct FItemNetID& ItemID, float ItemDurabilityPercentage);
	void UpdateEquippedItemDurabilityMaterials(const struct FItemNetID& ItemID, float ItemDurabilityPercentage);
	void UpdateAllEquippedItemsDurabilityVariables();
	void UpdateAllEquippedItemsDurabilityMaterials();
	void UnProne(bool bClientSimulation);
	void TurnInput(float Val);
	void TurnAtRate(float Val);
	void TryPoop();
	void TryGiveDefaultWeaponReleased();
	void TryGiveDefaultWeapon();
	void TickMovementComponent(float DeltaTime);
	void TempDampenInputAcceleration();
	void TakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, float ReturnValue);
	void StopAnimEx(class UAnimMontage* AnimMontage, bool bReplicate, bool bReplicateToOwner, float BlendOutTime);
	void StaticRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
	void StaticGetSnapshotPoseCount(class UPrimalItem* Item, int32 ReturnValue);
	void StaticGetSnapshotPose(class UPrimalItem* Item, int32 PoseIndex, const struct FPrimalSnapshotPose& ReturnValue);
	void StaticApplyCharacterSnapshotEquipment(class UPrimalInventoryComponent* Inventory, class AActor* To);
	void StaticApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32 Pose, bool bCollisionOn);
	void StartForceSkelUpdate(float ForTime, bool bForceUpdateMesh, bool bServerOnly);
	void SleepBodies();
	void ShouldUseSlowInterpToOldCamera(bool ReturnValue);
	void ShouldUseLongFallCameraPivotZValues(bool ReturnValue);
	void ShouldUseDurabilityVarForItemType(enum class EPrimalEquipmentType TheItemType, bool ReturnValue);
	void ShouldUseDurabilityVar(int32 VarIndex, bool ReturnValue);
	void ShouldUseAutonomousCorrectionOffset(bool ReturnValue);
	void ShouldUseASACamera(bool bCheckShouldSwitchToOld, bool ReturnValue);
	void ShouldUseArmorDurabilityVFX(bool ReturnValue);
	void ShouldDisableCameraInterpolation(bool ReturnValue);
	void ShouldDealDamageTo(class APrimalCharacter* OtherCharacter, bool bAllowDamageToSelf, bool bAllowDamageToTribe, bool bAllowDamageToAlliedTribes, bool ReturnValue);
	void ShouldASACameraSwitchToOld(bool bDontCheckForTargeting, bool ReturnValue);
	void SetSleeping(bool bSleeping, bool bUseRagdollLocationOffset, bool bPreserveSavedAnim);
	void SetMyInventoryComponent(class UPrimalInventoryComponent* TheInventoryComponent);
	void SetMovementTether(class AActor* InTetherActor, float Radius, float Height);
	void SetLastCausedDamageTime(double LastCausedDamageTimeValue);
	void SetEquippedItemDurabilityPercent(const struct FItemNetID& ItemID, float ItemDurabilityPercentage);
	void SetEnableIK(bool bEnable);
	void SetCharacterMeshesMaterialScalarParamValue(class FName ParamName, float Value);
	void SetCameraProfile(class FName NewProfileId);
	void SetBoundsScale(float NewScale);
	void ServerTryPoop();
	void ServerSetRunning(bool bNewRunning);
	void ServerRequestDragTarget(class APrimalCharacter* Target);
	void ServerRequestDrag();
	void ServerGiveDefaultWeapon();
	void ServerDinoOrder(class APrimalDinoCharacter* ADino, enum class EDinoTamedOrder OrderType, class AActor* Target);
	void ServerCaptureDermis(class APrimalCharacter* Target);
	void ServerCallStayOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallStay();
	void ServerCallSetAggressive();
	void ServerCallPassiveFlee();
	void ServerCallPassive();
	void ServerCallNeutral();
	void ServerCallMoveTo(const struct FVector& MoveToLoc);
	void ServerCallLandFlyerOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollowOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollowDistanceCycleOne(class APrimalDinoCharacter* ForDinoChar);
	void ServerCallFollow();
	void ServerCallAttackTargetNew();
	void ServerCallAttackTarget(class AActor* TheTarget);
	void ServerCallAggressive();
	void RequestPoop();
	void RemoveAllJumpDeactivatedBuffs(class APrimalBuff* IgnoredBuff);
	void Prone(bool bClientSimulation);
	void PreventsTargeting(class AActor* ByActor, bool ReturnValue);
	void PreventInputType(enum class EPrimalCharacterInputType InputType, bool ReturnValue);
	void PreventInputDoesOffset(bool ReturnValue);
	void Poop(bool bForcePoop, bool ReturnValue);
	void PlayHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath);
	void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
	void PlayerCommand(const class FString& TheCommand, const class FString& ReturnValue);
	void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void PlayAnimEx(class UAnimMontage* AnimMontage, float InPlayRate, class FName StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, bool bForceKeepSynced, float BlendInTime, float BlendOutTime, float ReturnValue);
	void OverrideCameraTargetOriginLocation(const struct FVector& OutOverrideOrigin, class FName WithCameraStyle);
	void OverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float TPVCameraSpeedInterpMultiplier, float TPVOffsetInterpSpeed);
	void OrbitCamToggle();
	void OrbitCamOn();
	void OrbitCamOff();
	void OnStopRunning();
	void OnStopJump();
	void OnStopFire();
	void OnStopAltFire();
	void OnStartRunning();
	void OnStartJump();
	void OnStartFire();
	void OnStartAltFire();
	void OnRunToggleReleased();
	void OnRunTogglePressed();
	void OnRunToggle();
	void OnRep_RagdollPositions();
	void OnRep_PaintingComponent();
	void OnRep_MountedDino();
	void OnRep_IsSleeping();
	void OnRep_IsProne();
	void OnRep_IsDead();
	void OnRep_EquippedItemDurability();
	void OnRep_DraggedCharacter();
	void OnMassTeleportEvent(enum class EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void OnEndDrag();
	void OnDetachedFromCharacter(class APrimalCharacter* ACharacter, int32 OverrideDirection);
	void OnCharacterStepped(const struct FVector& PrevLocation, const struct FVector& NewLocation);
	void OnBeginDrag(class APrimalCharacter* Dragged, int32 BoneIndex, bool bWithGrapHook);
	void OnAttachedToCharacter();
	void OnAltFireReleased();
	void OnAltFirePressed();
	void NetUpdateTribeName(const class FString& NewTribeName);
	void NetStopAllAnimMontage();
	void NetSetReplicatedDeathAnim(class UAnimationAsset* Anim);
	void NetSetMovementModeSimulatedInternal(enum class EMovementMode NewMovementMode);
	void NetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, enum class EMovementMode NewMovementMode);
	void NetPlaySoundOnCharacter(class USoundBase* SoundToPlay, bool bPlayOnOwner);
	void NetPlayDeathAnimIfNeeded(bool bOnlyPlayOnClient);
	void NetOnJumped();
	void NetForceUpdateAimedCharacters(const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
	void NetForceSleepRagdoll();
	void NetDidLand();
	void NetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, enum class EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ);
	void NativeSimulateHair(const TArray<struct FVector>& CurrentPos, const TArray<struct FVector>& LastPos, const TArray<struct FVector>& RestPos, const TArray<struct FVector>& PivotPos, const TArray<float>& RestDistance, const struct FVector& HairSocketLoc, const struct FRotator& HairSocketRot, const struct FVector& ChestSocketLoc, const struct FRotator& ChestSocketRot, float DeltaTime, float Damping, float DampingFrontModifier, float DampingBack, float InWater, float HairWetness, float DragForce, float HairScale, float SpringForce, float SpringForceFrontModifier, float SpringForceBack, float GravityForce, const struct FVector& ShoulderLCollisionOffset, float ShoulderLCollisionRadius, const struct FVector& ShoulderRCollisionOffset, float ShoulderRCollisionRadius, const struct FVector& HeadHairCollisionOffset, float HeadHairCollisionRadius, const struct FVector& NeckHairCollisionOffset, float NeckHairCollisionRadius, float MaxDistanceToRestPos, const struct FTransform& LastHeadTransform, bool bPosAsPivot, bool bCollideMiddle, bool bCollideWithNeck);
	void NativeOnLanded(const struct FHitResult& Hit);
	void MoveUp(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void ModifyStasisComponentRadius(float Delta);
	void LookUpAtRate(float Val);
	void LocalUnpossessed();
	void LoadPrimalCameraConfig(class UClass* PrimalCameraConfigClass);
	void LivesInWater(bool ReturnValue);
	void LevelUpPlayerAddedStat(enum class EPrimalCharacterStatusValue StatToLevel, int32 NumLevels, class AShooterPlayerController* ForPlayer, int32 ReturnValue);
	void IsWithinTether(bool ReturnValue);
	void IsWildSlow(bool ReturnValue);
	void IsWatered(bool ReturnValue);
	void IsValidForCombatMusic(bool ReturnValue);
	void IsTargetWithinTether(const struct FVector& Destination, float AdditionalRadius, bool ReturnValue);
	void IsSwimmingOnWaterSurface(bool ReturnValue);
	void IsSubmerged(bool bDontCheckSwimming, bool bUseFullThreshold, bool bForceCheck, bool bFromVolumeChange, bool ReturnValue);
	void IsSitting(bool bIgnoreLockedToSeat, bool ReturnValue);
	void IsRunning(bool ReturnValue);
	void IsRider(bool ReturnValue);
	void IsRagdolled(bool ReturnValue);
	void IsProneOrSitting(bool bIgnoreLockedToSeat, bool ReturnValue);
	void IsPrimalCharWalking(bool ReturnValue);
	void IsPrimalCharSwimming(bool ReturnValue);
	void IsPrimalCharFriendly(class APrimalCharacter* PrimalChar, bool ReturnValue);
	void IsPrimalCharFlying(bool ReturnValue);
	void IsPrimalCharFalling(bool ReturnValue);
	void IsOwningClient(bool ReturnValue);
	void IsOnSeatingStructure(bool ReturnValue);
	void IsMoving(bool ReturnValue);
	void IsMovementTethered(bool ReturnValue);
	void IsMontagePlaying(class UAnimMontage* AnimMontage, float TimeFromEndToConsiderFinished, bool ReturnValue);
	void IsMeshGameplayRelevant(bool ReturnValue);
	void IsInvincible(bool ReturnValue);
	void IsInVacuumSealedSpace(bool ReturnValue);
	void IsInStatusState(enum class EPrimalCharacterStatusState StatusStateType, bool ReturnValue);
	void IsHostileTo(class APrimalCharacter* OtherCharacter, bool IgnoreDead, bool ReturnValue);
	void IsHostileOrAggressiveTo(class APrimalCharacter* OtherCharacter, bool ReturnValue);
	void IsGameInputAllowed(bool ReturnValue);
	void IsFirstPerson(bool ReturnValue);
	void IsDeadOrDying(bool ReturnValue);
	void IsDamageOccludedByStructures(class AActor* DamageCauser, bool ReturnValue);
	void IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried, bool ReturnValue);
	void IsBossDino(bool ReturnValue);
	void IsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage, bool ReturnValue);
	void IsBeingDestroyed(bool ReturnValue);
	void IsBaby(bool ReturnValue);
	void IsAttachedToSomething(bool ReturnValue);
	void IsASACameraEnabled(bool ReturnValue);
	void IsAlliedWithOtherTeam(int32 OtherTeamID, bool ReturnValue);
	void IsAlive(bool ReturnValue);
	void Immobilize(bool bImmobilize, class AActor* UsingActor, bool bImmobilizeFalling, bool bPreventDismount);
	void HurtMe(int32 HowMuch);
	void HasValidASACameraConfig(bool ReturnValue);
	void HasDynamicBase(bool ReturnValue);
	void HasCryoSickness(bool ReturnValue);
	void HasBuffWithCustomTags(const TArray<class FName>& CustomTags, bool ReturnValue);
	void HasBuffWithCustomTagConst(class FName BuffCustomTag, bool ReturnValue);
	void HasBuffWithCustomTag(class FName BuffCustomTag, bool ReturnValue);
	void HasBuff(class UClass* BuffClass, bool UseExactMatch, bool ReturnValue);
	void HasAnyBuffWithDisabledWeaponTag(class FName Tag, class APrimalBuff* FoundBuff, bool ReturnValue);
	void GiveKillExperience(bool ReturnValue);
	void GetVisualVelocity(const struct FVector& ReturnValue);
	void GetVelocityBasedSoundIndex(const struct FVelocityBasedCharacterSoundInfo& InStruct, const struct FVector& InVelocity, int32 ReturnValue);
	void GetTransitionToTargetingCameraInterpSpeed(float ReturnValue);
	void GetTransitionToCameraStateInterpTime(enum class EPrimalCameraState ToFinalCameraState, float ReturnValue);
	void GetTPVWeaponCameraOffset(const struct FVector& ReturnValue);
	void GetTPVHorizontalCameraOffsetFromSlider(float ReturnValue);
	void GetTPVHorizontalCameraOffset(float ReturnValue);
	void GetTPVCameraOffsetMultiplier(const struct FVector& ReturnValue);
	void GetTPVCameraOffset(bool bForASACamera, const struct FVector& ReturnValue);
	void GetTooltipCharacterInfoBP(class AShooterPlayerController* PlayerOwner, const TArray<struct FTooltipTextInfo>& ReturnValue);
	void GetTooltipCharacterInfo(class AShooterPlayerController* PlayerOwner, const TArray<struct FTooltipTextInfo>& ReturnValue);
	void GetTetherObject(class AActor* ReturnValue);
	void GetTetheredVelocity(const struct FVector& RequestedVelocity, float DeltaSeconds, const struct FVector& ReturnValue);
	void GetTetheredDestination(const struct FVector& Destination, float AdditionalRadius, const struct FVector& ReturnValue);
	void GetSocketLocation(class FName SocketName, const struct FVector& ReturnValue);
	void GetSnapshotComponent(class AActor* From, class FName Tag, class UActorComponent* ReturnValue);
	void GetShortName(const class FString& ReturnValue);
	void GetRunningSpeedModifier(bool bIsForDefaultSpeed, float ReturnValue);
	void GetRole(enum class ENetRole ReturnValue);
	void GetPrimalMovement(class UPrimalCharacterMovement* ReturnValue);
	void GetPrimalCharMovementMode(enum class EMovementMode ReturnValue);
	void GetPrimalCameraSettings(const struct FPrimalCameraProfile& ForCameraProfile, const struct FPrimalCameraSettings& OutCameraSettings, class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void GetPrimalCameraParamsFromSettings(const struct FPrimalCameraParams& OutCameraParams, const struct FPrimalCameraSettings& FromCameraSettings, class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void GetPrimalCameraParams(const struct FPrimalCameraParams& OutCameraParams, class APrimalCharacter* CharForConditionChecks, bool bIncludeWeaponOverride, class FName ForProfileId);
	void GetPrimalCameraDesiredPivotRotation(const struct FRotator& CurrentPivotRotation, bool bIncludeWeaponOverride, class FName ForProfileId, const struct FRotator& ReturnValue);
	void GetPrimalCameraDesiredPivotOffset(bool bIncludeWeaponOverride, class FName ForProfileId, const struct FVector& ReturnValue);
	void GetPrimalCameraDesiredPivotLocation(const struct FVector& CurrentPivotLocation, bool bIncludeWeaponOverride, class FName ForProfileId, const struct FVector& ReturnValue);
	void GetPrimalCameraDesiredArmLength(float CurrentCameraArmLength, float DefaultCameraArmLength, float ReturnValue);
	void GetPhysMatTypeFromHits(const TArray<struct FHitResult>& FromHits, enum class EPhysicalSurface ReturnValue);
	void GetPhysMatTypeFromHit(const struct FHitResult& FromHit, enum class EPhysicalSurface ReturnValue);
	void GetPaintingTexture(class UPaintingTexture* ReturnValue);
	void GetPaintingMesh(class UMeshComponent* ReturnValue);
	void GetOverrideSocket(class FName From, class FName ReturnValue);
	void GetOverridenMontage(class UAnimMontage* AnimMontage, class UAnimMontage* ReturnValue);
	void GetOverridenAnimSequence(class UAnimSequence* AnimSeq, class UAnimSequence* ReturnValue);
	void GetMyBiomeZoneVolume(class ABiomeZoneVolume* ReturnValue);
	void GetMoveAnimRate(float ReturnValue);
	void GetMaxHealth(float ReturnValue);
	void GetLocalPlayerIndex(int32 ReturnValue);
	void GetLastRenderTimeWithShadow(double ReturnValue);
	void GetLastRenderTimeNoShadow(double ReturnValue);
	void GetLastCausedDamageTime(double ReturnValue);
	void GetKillXP(float ReturnValue);
	void GetInterpolatedRotation_NonFlattened(const struct FRotator& ReturnValue);
	void GetInputDirectionVector(bool bRelativeToViewDirection, const struct FVector& ReturnValue);
	void GetImmersionDepth(float ReturnValue);
	void GetHealthPercentage(float ReturnValue);
	void GetHealth(float ReturnValue);
	void GetGrappledBuffClassOverride(class UClass* ReturnValue);
	void GetFXBloodColor(const struct FLinearColor& ReturnValue);
	void GetFPVShadowMeshOffset(bool bReturnMeshLocation, const struct FVector& ReturnValue);
	void GetFootPhysicalSurfaceType(bool bForce, bool bIsForFootstepParticles, enum class EPhysicalSurface ReturnValue);
	void GetFloatingHUDLocation(const struct FVector& ReturnValue);
	void GetFallAcceleration(float ReturnValue);
	void GetEquippedItemDurabilityPercent(const struct FItemNetID& ItemID, float ReturnValue);
	void GetDragWeight(class APrimalCharacter* ForDragger, float ReturnValue);
	void GetDraggedRotation(class APrimalCharacter* Dragger, const struct FRotator& ReturnValue);
	void GetDraggedRelativeRotation(bool bFlip180, const struct FRotator& ReturnValue);
	void GetDraggedRelativeLocation(const struct FVector& ReturnValue);
	void GetDraggedLocation(class APrimalCharacter* Dragger, const struct FVector& ReturnValue);
	void GetDetailedDescription(const class FString& IndentPrefix, const TArray<class FString>& ReturnValue);
	void GetDescriptiveName(const class FString& ReturnValue);
	void GetDefaultMovementSpeed(float ReturnValue);
	void GetDebugInfoString(const class FString& ReturnValue);
	void GetDeathAnim(float KillingDamage, const struct FVector& ImpactVelocity, class APawn* InstigatingPawn, class AActor* DamageCauser, class UAnimationAsset* ReturnValue);
	void GetCustomTooltip(const struct FVector2D& TooltipPadding, const struct FVector2D& TooltipScale, const struct FVector& TooltipLocationOffset, class UClass* ReturnValue);
	void GetCurrentPrimalCameraSettings(const struct FPrimalCameraSettings& OutCameraSettings, class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void GetCurrentCameraProfileId(class FName ReturnValue);
	void GetCurrentCameraProfile(const struct FPrimalCameraProfile& OutCameraProfile, bool ReturnValue);
	void GetCurrentCameraModeIndex(int32 ReturnValue);
	void GetCharacterViewLocationAndDirection(const struct FVector& ViewLocation, const struct FVector& ViewDirection, bool bFromCrosshairOrCamera, float FallbackAngleOffsetDegrees);
	void GetCharacterStatusComponent(class UPrimalCharacterStatusComponent* ReturnValue);
	void GetCharactersGrappledToMe(const TArray<class APrimalCharacter*>& GrappledCharsArray);
	void GetCapsuleTopLocation(const struct FVector& ReturnValue);
	void GetCapsuleBottomLocation(const struct FVector& ReturnValue);
	void GetCameraProfileForId(class FName CameraProfileId, const struct FPrimalCameraProfile& OutCameraProfile, bool ReturnValue);
	void GetBuffWithCustomTag(class FName BuffCustomTag, class APrimalBuff* ReturnValue);
	void GetBuffStackCount(class UClass* BuffClass, bool UseExactMatch, int32 ReturnValue);
	void GetBuffs(const TArray<class APrimalBuff*>& TheBuffs);
	void GetBuff(class UClass* BuffClass, class APrimalBuff* ReturnValue);
	void GetBaseStatusValue(enum class EPrimalCharacterStatusValue StatusValueType, float ReturnValue);
	void GetBaseDragWeight(float ReturnValue);
	void GetBasedOrSeatingOnDino(class APrimalDinoCharacter* ReturnValue);
	void GetBasedOnDinoAsActor(bool bUseReplicatedData, bool bOnlyConsciousDino, class AActor* ReturnValue);
	void GetBasedOnDino(bool bUseReplicatedData, bool bOnlyConsciousDino, class APrimalDinoCharacter* ReturnValue);
	void GetBasedMovementComponent(class UPrimitiveComponent* ReturnValue);
	void GetAttachedExplosive(class APrimalStructureExplosive* ReturnValue);
	void GetAllBuffs(const TArray<class APrimalBuff*>& AllBuffs);
	void GetAllAttachedChars(const TArray<class APrimalCharacter*>& AttachedCharsArray, bool bIncludeSelf, bool bIncludeBased, bool bIncludePassengers, bool bIncludeCarried, bool ReturnValue);
	void GetAimOffsets(float DeltaTime, const struct FRotator& RootRotOffset, float TheRootYawSpeed, float MaxYawAimClamp, const struct FVector& RootLocOffset, bool bInterpolationStep, const struct FRotator& ReturnValue);
	void GetAimedActor(const struct FHitResult& OutHitResult, enum class ECollisionChannel CollisionChannel, float MaxDistanceOverride, float CheckRadius, bool bForceUseCameraLocation, bool bForceUpdateAimedActors);
	void GenerateDeathAnim(float KillingDamage, const struct FVector& ImpactVelocity, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void ForceUpdateCharacter(class UWorld* World, class APrimalCharacter* PrimalChar);
	void ForceUpdateAimedCharacters(class UWorld* World, const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius, bool bOnlyRefreshRelevancyValues);
	void ForceTickPoseDelta();
	void ForceRefreshBones();
	void ForceMeshRelevant(float Duration);
	void ForceAddUnderwaterCharacterStatusValues(bool ReturnValue);
	void FadeOutLoadingMusic();
	void ExecSetSleeping(bool bEnable);
	void ExecSetPawnSleeping(bool bEnable);
	void EndForceSkelUpdate();
	void EndDragCharacter();
	void EnableTurnToFaceRotation(bool ReturnValue);
	void EnableIK(bool bEnable, bool bForceOnDedicated);
	void EnableBPTimerServer(bool bEnable);
	void EnableBPTimerNonDedicated(bool bEnable);
	void EnableBodiesGravity();
	void EmitPoop();
	void EditorBeginPlay();
	void DoSetRagdollPhysics();
	void DoFindGoodSpot(const struct FVector& RagdollLoc, bool bClearCollisionSweep);
	void DoCharacterDetachment(bool bIncludeRiding, bool bIncludeCarrying, class APrimalBuff* BuffToIgnore);
	void DinoMountOnMe(class APrimalDinoCharacter* DinoCharacter, bool ReturnValue);
	void DidTeleport(const struct FVector& NewLoc, const struct FRotator& NewRot, bool bDoCameraFade, const struct FLinearColor& CameraFadeColor);
	void DetachFromOtherCharacter(bool EnableMovementAndCollision);
	void DeathHarvestingFadeOut();
	void DeactivateBuffs(class UClass* ForBuffClass, class UPrimalItem* ForInstigatorItem, bool PerfectClassMatch);
	void CreateSnapshotComponent(class AActor* For, class UObject* Template, class FName Tag, class FName Name, class UActorComponent* ReturnValue);
	void ConsumeProjectileImpact(class AShooterProjectile* TheProjectile, const struct FHitResult& HitResult, bool ReturnValue);
	void ClientSyncAnimation(class UAnimMontage* AnimMontage, float PlayRate, float ServerCurrentMontageTime, bool bForceTickPoseAndServerUpdateMesh, float BlendInTime, float BlendOutTime);
	void ClientStopAnimation(class UAnimMontage* AnimMontage, bool bStopOnOwner, float BlendOutTime);
	void ClientRagdollUpdate(const TArray<struct FVector_NetQuantize>& BoneLocations, const struct FRotator_NetQuantize& TargetRootRotation);
	void ClientPlayAnimation(class UAnimMontage* AnimMontage, float PlayRate, class FName StartSectionName, bool bPlayOnOwner, bool bForceTickPoseAndServerUpdateMesh);
	void ClientOrderedMoveTo(const struct FVector& MoveToLoc);
	void ClientOrderedAttackTarget(class AActor* AttackTarget);
	void ClientNotifyLevelUp();
	void ClientFailedPoop();
	void ClientEndRagdollUpdate();
	void ClientDidPoop();
	void ClearRidingDinoAsPassenger(bool bFromDino);
	void ClearMovementTether();
	void ClearMountedDino(bool FromMountedDino);
	void ClearControlInputVector();
	void ClearCarryingDino(bool bFromDino, bool bCancelAnyCarryBuffs);
	void CharacterIsCarriedAsPassenger(bool ReturnValue);
	void CharacterBuffsPreventFirstPerson(bool ReturnValue);
	void CaptureCharacterSnapshot(class UPrimalItem* Item);
	void CanUseCameraSettings(const struct FPrimalCameraSettingsConditions& TheCameraSettingsConditions, class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void CanMountOnMe(class APrimalDinoCharacter* DinoCharacter, bool ReturnValue);
	void CanDragCharacter(class APrimalCharacter* Character, bool bIgnoreWeight, bool ReturnValue);
	void CameraCheckIsRunning(class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void CameraCheckIsMoving(class APrimalCharacter* CharForConditionChecks, bool ReturnValue);
	void CallDrawHUD(class AShooterHUD* HUD);
	void CallDrawFloatingHUD(class AShooterHUD* HUD);
	void BuffsPreventInventoryAccess(bool ReturnValue);
	void BPTriggerStasisEvent();
	void BPTimerServer();
	void BPTimerNonDedicated();
	void BPSuicide();
	void BPSpawnAttackerDamageImpactFX(class FName SocketName, class APrimalCharacter* VictimChar);
	void BPSkipMovementOptimization(bool ReturnValue);
	void BPShouldLimitRightDirection(bool ReturnValue);
	void BPShouldLimitForwardDirection(bool ReturnValue);
	void BPSetCharacterMeshesMaterialScalarParamValue(class FName ParamName, float Value);
	void BPRemovedAttachmentsForItem(class UPrimalItem* AnItem);
	void BPRemovedAsPassenger(class APrimalCharacter* Character);
	void BPRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
	void BPPreventStasis(bool ReturnValue);
	void BPPreventNotifySound(class USoundBase* SoundIn, bool ReturnValue);
	void BPPreventInputType(enum class EPrimalCharacterInputType InputType, bool ReturnValue);
	void BPPreventFirstPerson(bool ReturnValue);
	void BPPreventFallDamage(const struct FHitResult& HitResult, float FallDamageAmount, bool ReturnValue);
	void BPPreSerializeSaveGame();
	void BPPostLoadedFromSaveGame();
	void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void BPOverrideUseItemSlot(int32 ItemSlot);
	void BPOverrideReleaseItemSlot(int32 ItemSlot);
	void BPOverridePrimalCameraParams(const struct FPrimalCameraParams& OutParams, bool ReturnValue);
	void BPOverridePhysicsImpulses(float DeltaSeconds, class UPrimalCharacterMovement* PrimalCharacterMovement);
	void BPOverrideJumpZModifier(float InJumpZModifier, float ReturnValue);
	void BPOverrideInventoryAccessInput(bool ReturnValue);
	void BPOverrideHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, bool bIsPointDamage, const struct FVector& PointDamageLocation, const struct FVector& PointDamageHitNormal, class UAnimMontage* ReturnValue);
	void BPOverrideHeldItemSlot(int32 ItemSlot);
	void BPOverrideFPVViewLocation(class APrimalCharacter* ViewingCharacter, bool ReturnValue);
	void BPOverrideFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime, const struct FVector& ReturnValue);
	void BPOverrideDamageCauserHitMarker(class AShooterPlayerController* DamageCauserController, bool bHitFriendlyTarget, float PreDamageHealth, float DamageAmount, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointDamageHitResult, const struct FHitMarkerSettings& ReturnValue);
	void BPOverrideCurrentCameraProfileId(class FName OutProfileId, bool ReturnValue);
	void BPOverrideCurrentCameraProfile(const struct FPrimalCameraProfile& OutCameraProfile, bool ReturnValue);
	void BPOverrideCharacterSound(class USoundBase* SoundIn, class USoundBase* ReturnValue);
	void BPOverrideCharacterParticle(class UParticleSystem* ParticleIn, class UParticleSystem* ReturnValue);
	void BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime, const struct FVector& ReturnValue);
	void BPOverrideCameraPivotLocationInterpParams(const struct FPrimalCameraParams& CameraParams, const struct FPrimalCameraPivotZInterpOverrides& PivotZInterpOverrides, const struct FPrimalCameraInterpParams& LastInterpParamsX, const struct FPrimalCameraInterpParams& LastInterpParamsY, const struct FPrimalCameraInterpParams& LastInterpParamsZ, const struct FPrimalCameraInterpParams& OutInterpParamsX, const struct FPrimalCameraInterpParams& OutInterpParamsY, const struct FPrimalCameraInterpParams& OutInterpParamsZ, bool ReturnValue);
	void BPOverrideCameraDesiredPivotRotation(const struct FRotator& CurrentCameraPivotRotation, const struct FRotator& DesiredCameraPivotRotation, bool ReturnValue);
	void BPOverrideCameraDesiredPivotOffset(const struct FPrimalCameraParams& CameraParams, const struct FVector& DesiredCameraOffset, bool ReturnValue);
	void BPOverrideCameraDesiredPivotLocation(const struct FVector& CurrentCameraPivotLocation, const struct FVector& DesiredCameraPivotLocation, bool ReturnValue);
	void BPOverrideCameraArmLengthInterpParams(const struct FPrimalCameraParams& CameraParams, const struct FPrimalCameraInterpParams& OutInterpParams, bool ReturnValue);
	void BPOverrideCameraArmLength(const struct FPrimalCameraParams& CameraParams, float CurrentCameraArmLength, float DesiredCameraArmLength, bool ReturnValue);
	void BPOnStaminaDrained();
	void BPOnMovementModeChangedNotify(enum class EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void BPOnMassTeleportEvent(enum class EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void BPOnLethalDamage(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool bPreventDeath);
	void BPOnAttachmentReplication(bool ReturnValue);
	void BPOnAnimPlayedNotify(class UAnimMontage* AnimMontage, float InPlayRate, class FName StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	void BPNotifyToggleHUD(bool bHUDHidden);
	void BPNotifyLevelUp(int32 ExtraCharacterLevel);
	void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* TheItem, bool bEquipItem);
	void BPNotifyDroppedItemPickedUp(class ADroppedItem* ItemPickedUp, class APrimalCharacter* PickedUpBy);
	void BPNotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
	void BPNotifyBumpedByPawn(class APrimalCharacter* ByPawn);
	void BPNotifyBPNotifyIsDamageCauserOfAddedBuff(class APrimalBuff* Buff);
	void BPNewDoorInteractionDrawHUD(class AShooterHUD* HUD, const struct FVector2D& DoorDescriptionLoc);
	void BPNetSetMovementMode(enum class EMovementMode NewMovementMode);
	void BPNetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, enum class EMovementMode NewMovementMode);
	void BPNetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, enum class EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ, bool bApplyToBigPawns);
	void BPModifyViewHitDir(class APrimalCharacter* ViewingCharacter, float InViewHitDir, float ReturnValue);
	void BPModifyRightDirectionInput(const struct FVector& DirectionInput, const struct FVector& ReturnValue);
	void BPModifyFOVInterpSpeed(float FOVInterpSpeedIn, float ReturnValue);
	void BPModifyFOV(float FOVIn, float ReturnValue);
	void BPModifyForwardDirectionInput(const struct FVector& DirectionInput, const struct FVector& ReturnValue);
	void BPLocalUnpossessed();
	void BPLocalPossessedBy(class APlayerController* ByController);
	void BPLimitPlayerRotation(class APrimalCharacter* ViewingCharacter, const struct FRotator& InViewRotation, const struct FRotator& ReturnValue);
	void BPIsConscious(bool ReturnValue);
	void BPIsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage, bool ReturnValue);
	void BPIsBasedOnDynamicActor(bool ReturnValue);
	void BPHasPlayerController(bool ReturnValue);
	void BPHandleRightShoulderButton(bool ReturnValue);
	void BPHandlePoop(bool ReturnValue);
	void BPHandleLeftShoulderButton(bool ReturnValue);
	void BPGrabDebugSnapshot(const TArray<struct FBlueprintVisualLogEntry>& ReturnValue);
	void BPGetStatusNameString(enum class EPrimalCharacterStatusValue ValueType, const class FString& ReturnValue);
	void BPGetOverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpolationMultiplier, float DefaultTPVOffsetInterpSpeed, float TPVCameraSpeedInterpolationMultiplier, float TPVOffsetInterpSpeed);
	void BPGetIsBuried(bool ReturnValue);
	void BPGetHUDOverrideBuffProgressBarPercent(float ReturnValue);
	void BPGetHUDElements(class APlayerController* ForPC, const TArray<struct FHUDElement>& OutElements);
	void BPGetGravityZScale(float ReturnValue);
	void BPGetFPVViewLocation(class APrimalCharacter* ViewingCharacter, const struct FVector& ReturnValue);
	void BPGetExtraMeleeDamageModifier(float ReturnValue);
	void BPGetDebugInfoString(const class FString& ReturnValue);
	void BPGetArmorDurabilityDecreaseMultiplier(float ReturnValue);
	void BPGetApproachRadius(float ReturnValue);
	void BPGetAddForwardVelocityOnJump(float ReturnValue);
	void BPForceUseOldASECamera(bool ReturnValue);
	void BPForceCameraStyle(class APrimalCharacter* ForViewTarget, enum class ECameraStyle ReturnValue);
	void BPCheckJumpInput(bool bUseCustomErrorMessage, const class FString& ErrorMessageToDisplay);
	void BPCharacterUnsleeped();
	void BPCharacterSleeped();
	void BPCharacterDetach();
	void BPCanNotifyTeamAggroAI(class APrimalDinoCharacter* Dino, bool ReturnValue);
	void BPCanBeBaseForCharacter(class APawn* Pawn, bool ReturnValue);
	void BPCanBaseOnCharacter(class APrimalCharacter* BaseCharacter, bool ReturnValue);
	void BPCameraRotationFinal(class APrimalCharacter* ViewingCharacter, const struct FRotator& InCurrentFinalRot, const struct FRotator& ReturnValue);
	void BPCameraBaseOrientation(class APrimalCharacter* ViewingCharacter, const struct FRotator& ReturnValue);
	void BPApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32 Pose, bool bCollisionOn);
	void BPAnimNotifyCustomState_End(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAdjustTorpidityDamage(float DesiredTorpidityDamage, float HealthDamageAmount, class UClass* DamageType, float ReturnValue);
	void BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo, const struct FVector& ReturnValue);
	void BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo, float ReturnValue);
	void BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ, const struct FVector& ReturnValue);
	void BPAddedAttachmentsForItem(class UPrimalItem* AnItem);
	void BP_ShouldDisableCameraInterpolation(bool ReturnValue);
	void BP_OverrideTerminalVelocity(float ReturnValue);
	void BP_OverrideCameraTargetOriginLocation(const struct FVector& OutOverrideOrigin, class FName WithCameraStyle);
	void BP_OnZoomOut();
	void BP_OnZoomInOrbitCam();
	void BP_OnZoomIn();
	void BP_OnStartCarried(class APrimalDinoCharacter* ADino);
	void BP_OnSetRunning(bool bNewIsRunning);
	void BP_OnSetDeath();
	void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
	void BP_OnJumpReleased();
	void BP_OnJumpPressed();
	void BP_OnEndCarried(bool bFromDino, bool bCancelAnyCarryBuffs);
	void BP_OnCameraStyleChangedNotify(class FName NewCameraStyle, class FName OldCameraStyle);
	void BP_ModifySavedMoveAcceleration_PreRep(const struct FVector& ModifyClientAccel, bool ReturnValue);
	void BP_ModifySavedMoveAcceleration_PostRep(const struct FVector& ModifyServerAccel, bool ReturnValue);
	void BP_ModifyInputAcceleration(const struct FVector& ModifyInputAccel);
	void BP_IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried, bool ReturnValue);
	void BP_GetMaxSpeedModifier(float ReturnValue);
	void BP_ForceAllowAddBuff(class UClass* BuffClass, bool ReturnValue);
	void BP_AnimationPreventsInput(bool ReturnValue);
	void BlueprintAnimNotifyCustomEvent(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void AttachToOtherCharacter(class APrimalCharacter* CharacterToAttachTo, class FName InSocketName, bool EnableMovementAndCollision, enum class EAttachLocation AttachLocation);
	void AttachedToOtherCharacterUpdateWorldLocation(const struct FVector& WorldLocation);
	void ApplyCustomFallDamage(const struct FVector& Location, const struct FVector& Velocity, float FallDamageThreshold);
	void AllowPlayMontage(class UAnimMontage* AnimMontage, bool ReturnValue);
};

// 0x1768 (0x3218 - 0x1AB0)
// Class ShooterGame.PrimalDinoCharacter
class APrimalDinoCharacter : public APrimalCharacter
{
public:
	uint8                                        Pad_315F[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BaseDinoScale;                                     // 0x1AD0(0x18)(None)
	TWeakObjectPtr<class AActor>                 ForcedMasterTarget;                                // 0x1AE8(0x8)(ZeroConstructor)
	class FName                                  MountCharacterSocketName;                          // 0x1AF0(0x8)(None)
	TWeakObjectPtr<class APrimalCharacter>       MountCharacter;                                    // 0x1AF8(0x8)(ZeroConstructor)
	uint8                                        Pad_3160[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RidingAttackExtraVelocity;                         // 0x1B08(0x18)(None)
	class UAnimMontage*                          StartChargeAnimation;                              // 0x1B20(0x8)(ZeroConstructor)
	TArray<class UAnimMontage*>                  AttackAnimations;                                  // 0x1B28(0x10)(ZeroConstructor)
	TArray<float>                                AttackAnimationWeights;                            // 0x1B38(0x10)(None)
	TArray<float>                                AttackAnimationsTimeFromEndToConsiderFinished;     // 0x1B48(0x10)(None)
	uint8                                        bAttackStopsMovement : 1;                          // Mask: 0x1, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        bLocationBasedAttack : 1;                          // Mask: 0x2, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        bTamedWanderHarvestAllowUsableHarvestingAsWell : 1; // Mask: 0x4, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        bUseBPKilledSomethingEvent : 1;                    // Mask: 0x8, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        bPreventDinoResetAffinityOnUnsleep : 1;            // Mask: 0x10, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        bKeepInventoryForWakingTame : 1;                   // Mask: 0x20, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        BitPad_25D : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHadLinkedSupplyCrate : 1;                         // Mask: 0x80, PropSize: 0x10x1B58(0x1)(None)
	uint8                                        BitPad_25E : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHiddenForLocalPassenger : 1;                      // Mask: 0x4, PropSize: 0x10x1B59(0x1)(None)
	uint8                                        bRunCheckCarriedTrace : 1;                         // Mask: 0x8, PropSize: 0x10x1B59(0x1)(None)
	uint8                                        CanElevate : 1;                                    // Mask: 0x10, PropSize: 0x10x1B59(0x1)(None)
	uint8                                        BitPad_25F : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTamedWanderCorpseHarvesting : 1;                  // Mask: 0x1, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bUseBPNotifyStructurePlacedNearby : 1;             // Mask: 0x2, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bUseBPCanTargetCorpse : 1;                         // Mask: 0x4, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bUseBPShouldForceFlee : 1;                         // Mask: 0x8, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        BitPad_260 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceWanderOverrideNPCZoneManager : 1;            // Mask: 0x20, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bDeprecateDino : 1;                                // Mask: 0x40, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bForceFoodItemAutoConsume : 1;                     // Mask: 0x80, PropSize: 0x10x1B5A(0x1)(None)
	uint8                                        bFlyerAllowFlyingWithExplosive : 1;                // Mask: 0x1, PropSize: 0x10x1B5B(0x1)(None)
	uint8                                        bForceUseDediAttackTiming : 1;                     // Mask: 0x2, PropSize: 0x10x1B5B(0x1)(None)
	uint8                                        bForcePreventExitingWater : 1;                     // Mask: 0x4, PropSize: 0x10x1B5B(0x1)(None)
	uint8                                        bWakingTameConsumeEntireStack : 1;                 // Mask: 0x8, PropSize: 0x10x1B5B(0x1)(None)
	uint8                                        BitPad_261 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        ColorizationIntensity;                             // 0x1B5C(0x4)(None)
	uint8                                        bAllowCarryCharacterWithoutRider : 1;              // Mask: 0x1, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bWildDinoPreventWeight : 1;                        // Mask: 0x2, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bDebugMeleeAttacks : 1;                            // Mask: 0x4, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bRetainCarriedCharacterOnDismount : 1;             // Mask: 0x8, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bUseBPOnTamedProcessOrder : 1;                     // Mask: 0x10, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bUseBP_OnTamedOrderReceived : 1;                   // Mask: 0x20, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bAllowAttackWithCryoSickness : 1;                  // Mask: 0x40, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bUseBPCanCryo : 1;                                 // Mask: 0x80, PropSize: 0x10x1B60(0x1)(None)
	uint8                                        bWildPreventTeleporting : 1;                       // Mask: 0x1, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bUseBPClampMaxHarvestHealth : 1;                   // Mask: 0x2, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bForceUseAltAimSocketsForTurrets : 1;              // Mask: 0x4, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bUseBPBecameNewBaby : 1;                           // Mask: 0x8, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bTryAlwaysApplyCryoSickness : 1;                   // Mask: 0x10, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bUseBPSetSimulatedInterpRollOverride : 1;          // Mask: 0x20, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bUseBPSetInitialAimOffsetTargets : 1;              // Mask: 0x40, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bConsoleIgnoreSafeZonesForCrosshair : 1;           // Mask: 0x80, PropSize: 0x10x1B61(0x1)(None)
	uint8                                        bForceDrawCrosshairWhenHUDIsHidden : 1;            // Mask: 0x1, PropSize: 0x10x1B62(0x1)(None)
	uint8                                        bUseBPCanLand : 1;                                 // Mask: 0x2, PropSize: 0x10x1B62(0x1)(None)
	uint8                                        bAllowCheckRefreshDefaultInventoryItems : 1;       // Mask: 0x4, PropSize: 0x10x1B62(0x1)(None)
	uint8                                        bIsBigBossDinoWithHighPrioritySounds : 1;          // Mask: 0x8, PropSize: 0x10x1B62(0x1)(None)
	uint8                                        BitPad_262 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3163[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            FemaleMaterialOverrides;                           // 0x1B68(0x10)(ZeroConstructor)
	uint8                                        bUseBPCheckCanSpawnFromLocation : 1;               // Mask: 0x1, PropSize: 0x10x1B78(0x1)(None)
	uint8                                        BitPad_263 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3164[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PaintConsumptionMultiplier;                        // 0x1B7C(0x4)(None)
	float                                        ChargingBlockedStopTimeThreshold;                  // 0x1B80(0x4)(None)
	uint8                                        Pad_3165[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          MeleeSwingSockets;                                 // 0x1B88(0x10)(None)
	int32                                        MeleeDamageAmount;                                 // 0x1B98(0x4)(None)
	float                                        MeleeDamageImpulse;                                // 0x1B9C(0x4)(None)
	float                                        MeleeSwingRadius;                                  // 0x1BA0(0x4)(None)
	uint8                                        Pad_3166[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoAttackInfo>               AttackInfos;                                       // 0x1BA8(0x10)(ZeroConstructor)
	uint8                                        CurrentAttackIndex;                                // 0x1BB8(0x1)(None)
	uint8                                        LastAttackIndex;                                   // 0x1BB9(0x1)(None)
	uint8                                        Pad_3167[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MeleeDamageType;                                   // 0x1BC0(0x8)(ZeroConstructor)
	class UClass*                                StepActorDamageTypeOverride;                       // 0x1BC8(0x8)(ZeroConstructor)
	float                                        AttackOffset;                                      // 0x1BD0(0x4)(None)
	float                                        FleeHealthPercentage;                              // 0x1BD4(0x4)(None)
	float                                        BreakFleeHealthPercentage;                         // 0x1BD8(0x4)(None)
	uint8                                        Pad_3168[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TamerString;                                       // 0x1BE0(0x10)(None)
	class FString                                TamedName;                                         // 0x1BF0(0x10)(None)
	TArray<struct FHibernationZoneInfo>          HibernatedZoneVolumes;                             // 0x1C00(0x10)(ZeroConstructor)
	struct FVector2D                             OverlayTooltipPadding;                             // 0x1C10(0x10)(None)
	struct FVector2D                             OverlayTooltipScale;                               // 0x1C20(0x10)(None)
	class UClass*                                HUDOverlayToolTipWidget;                           // 0x1C30(0x8)(ZeroConstructor)
	class UClass*                                MyDinoEntry;                                       // 0x1C38(0x8)(ZeroConstructor)
	struct FVector                               RiderFPVCameraOffset;                              // 0x1C40(0x18)(None)
	uint8                                        Pad_3169[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FinalNPCLevelMultiplier;                           // 0x1C90(0x4)(None)
	float                                        LandingTraceMaxDistance;                           // 0x1C94(0x4)(None)
	float                                        FlyingWanderFixedDistanceAmount;                   // 0x1C98(0x4)(None)
	float                                        FlyingWanderRandomDistanceAmount;                  // 0x1C9C(0x4)(None)
	float                                        AcceptableLandingRadius;                           // 0x1CA0(0x4)(None)
	float                                        MaxLandingTime;                                    // 0x1CA4(0x4)(None)
	float                                        GenderSpeedMultipliers[0x2];                       // 0x1CA8(0x8)(None)
	float                                        ChargeSpeedMultiplier;                             // 0x1CB0(0x4)(None)
	uint8                                        Pad_316A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          ChargingAnim;                                      // 0x1CB8(0x8)(ZeroConstructor)
	float                                        ChargingStaminaPerSecondDrain;                     // 0x1CC0(0x4)(None)
	float                                        ChargingStopDotTreshold;                           // 0x1CC4(0x4)(None)
	uint8                                        Pad_316B[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AShooterCharacter>      Rider;                                             // 0x1CE8(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AShooterCharacter>      PreviousRider;                                     // 0x1CF0(0x8)(ZeroConstructor)
	class UClass*                                SaddleItemClass;                                   // 0x1CF8(0x8)(ZeroConstructor)
	class FString                                SaddleSlotNameOverride;                            // 0x1D00(0x10)(None)
	TArray<struct FSaddlePassengerSeatDefinition> NoSaddlePassengerSeats;                            // 0x1D10(0x10)(ZeroConstructor)
	TWeakObjectPtr<class APrimalCharacter>       CarriedCharacter;                                  // 0x1D20(0x8)(ZeroConstructor)
	uint8                                        Pad_316C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          DinoWithPassengerAnim;                             // 0x1D30(0x8)(ZeroConstructor)
	class UAnimMontage*                          DinoWithDinoPassengerAnim;                         // 0x1D38(0x8)(ZeroConstructor)
	TArray<TWeakObjectPtr<class APrimalCharacter>> PassengerPerSeat;                                  // 0x1D40(0x10)(ZeroConstructor)
	TArray<class APrimalCharacter*>              SavedPassengerPerSeat;                             // 0x1D50(0x10)(ZeroConstructor)
	uint8                                        Pad_316D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastClientCameraRotationServerUpdate;              // 0x1D70(0x8)(None)
	TArray<class USceneComponent*>               OverrideTargetComponents;                          // 0x1D78(0x10)(ZeroConstructor)
	float                                        WhistleTraceOffset;                                // 0x1D88(0x4)(None)
	uint8                                        Pad_316E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastPlayedAttackAnimation;                         // 0x1D9C(0x4)(None)
	uint8                                        AttackIndexOfPlayedAnimation;                      // 0x1DA0(0x1)(None)
	uint8                                        Pad_316F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoBaseLevelWeightEntry>     DinoBaseLevelWeightEntries;                        // 0x1DA8(0x10)(None)
	uint8                                        Pad_3170[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RidingFirstPersonViewLocationOffset;               // 0x1E28(0x18)(None)
	uint8                                        bIsLanding : 1;                                    // Mask: 0x1, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bCanCharge : 1;                                    // Mask: 0x2, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bCancelInterpolation : 1;                          // Mask: 0x4, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bIsCharging : 1;                                   // Mask: 0x8, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bChargeDamageStructures : 1;                       // Mask: 0x10, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bReplicatePitchWhileSwimming : 1;                  // Mask: 0x20, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bIsFlying : 1;                                     // Mask: 0x40, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bIsWakingTame : 1;                                 // Mask: 0x80, PropSize: 0x10x1E40(0x1)(None)
	uint8                                        bAllowRiding : 1;                                  // Mask: 0x1, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bForceAutoTame : 1;                                // Mask: 0x2, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bRiderJumpTogglesFlight : 1;                       // Mask: 0x4, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bHasRider : 1;                                     // Mask: 0x8, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bAllowCarryFlyerDinos : 1;                         // Mask: 0x10, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        BitPad_264 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFlyerForceNoPitch : 1;                            // Mask: 0x40, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bFlyerForceLimitPitch : 1;                         // Mask: 0x80, PropSize: 0x10x1E41(0x1)(None)
	uint8                                        bPreventStasis : 1;                                // Mask: 0x1, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bAutoTameable : 1;                                 // Mask: 0x2, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bAlwaysSetTamingTeamOnItemAdd : 1;                 // Mask: 0x4, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        BitPad_265 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCheatForceTameRide : 1;                           // Mask: 0x10, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bIsFemale : 1;                                     // Mask: 0x20, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bRiderUseDirectionalAttackIndex : 1;               // Mask: 0x40, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bCanBeTamed : 1;                                   // Mask: 0x80, PropSize: 0x10x1E42(0x1)(None)
	uint8                                        bTargetingIgnoredByWildDinos : 1;                  // Mask: 0x1, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bTargetingIgnoreWildDinos : 1;                     // Mask: 0x2, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bCanMountOnHumans : 1;                             // Mask: 0x4, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bIKIgnoreSaddleStructures : 1;                     // Mask: 0x8, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bAttackTargetWhenLaunched : 1;                     // Mask: 0x10, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bCanOpenLockedDoors : 1;                           // Mask: 0x20, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bUseColorization : 1;                              // Mask: 0x40, PropSize: 0x10x1E43(0x1)(None)
	uint8                                        bMeleeSwingDamageBlockedByStrutures : 1;           // Mask: 0x80, PropSize: 0x10x1E43(0x1)(None)
	float                                        BabyChanceOfTwins;                                 // 0x1E44(0x4)(None)
	uint8                                        bAllowTargetingCorpses : 1;                        // Mask: 0x1, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bRiderDontRequireSaddle : 1;                       // Mask: 0x2, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bAllowsFishingOnSaddle : 1;                        // Mask: 0x4, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bCanBeOrdered : 1;                                 // Mask: 0x8, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bOverridePlatformStructureLimit : 1;               // Mask: 0x10, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bMeleeAttackHarvetUsableComponents : 1;            // Mask: 0x20, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bPlatformSaddleIgnoreRotDotCheck : 1;              // Mask: 0x40, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bUseInteprolatedVelocity : 1;                      // Mask: 0x80, PropSize: 0x10x1E48(0x1)(None)
	uint8                                        bIsCarnivore : 1;                                  // Mask: 0x1, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bAllowRidingInWater : 1;                           // Mask: 0x2, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bUsesGender : 1;                                   // Mask: 0x4, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bTargetEverything : 1;                             // Mask: 0x8, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bTamedWanderHarvestNonUsableHarvesting : 1;        // Mask: 0x10, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bEnableTamedWandering : 1;                         // Mask: 0x20, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bEnableTamedMating : 1;                            // Mask: 0x40, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bCollectVictimItems : 1;                           // Mask: 0x80, PropSize: 0x10x1E49(0x1)(None)
	uint8                                        bServerInitializedDino : 1;                        // Mask: 0x1, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        BitPad_266 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasMateBoost : 1;                                 // Mask: 0x4, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        BitPad_267 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTamingHasFood : 1;                                // Mask: 0x10, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        bDontWander : 1;                                   // Mask: 0x20, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        bAnimIsMoving : 1;                                 // Mask: 0x40, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        bDoStepDamage : 1;                                 // Mask: 0x80, PropSize: 0x10x1E4A(0x1)(None)
	uint8                                        bPreventBasingWhenUntamed : 1;                     // Mask: 0x1, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        bForceAlwaysAllowBasing : 1;                       // Mask: 0x2, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        bChargingRequiresWalking : 1;                      // Mask: 0x4, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        bUseRootLocSwimOffset : 1;                         // Mask: 0x8, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        BitPad_268 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDisplaySummonedNotification : 1;                  // Mask: 0x20, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        bDisplayKilledNotification : 1;                    // Mask: 0x40, PropSize: 0x10x1E4B(0x1)(None)
	uint8                                        bUseBPGetAttackWeight : 1;                         // Mask: 0x80, PropSize: 0x10x1E4B(0x1)(None)
	float                                        BabyGestationSpeed;                                // 0x1E4C(0x4)(None)
	uint8                                        bServerForceUpdateDinoGameplayMeshNearPlayer : 1;  // Mask: 0x1, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bPreventAllRiderWeapons : 1;                       // Mask: 0x2, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bPreventAllRiderWeaponsOnReequip : 1;              // Mask: 0x4, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bAllowDeathAutoGrab : 1;                           // Mask: 0x8, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bSupportWakingTame : 1;                            // Mask: 0x10, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bAllowAutoUnstasisDestroy : 1;                     // Mask: 0x20, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bDebugBaby : 1;                                    // Mask: 0x40, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        bAlwaysUpdateAimOffsetInterpolation : 1;           // Mask: 0x80, PropSize: 0x10x1E50(0x1)(None)
	uint8                                        WildAmbientHarvestingAnimationServerTickPose : 1;  // Mask: 0x1, PropSize: 0x10x1E51(0x1)(None)
	uint8                                        bPreventSleepingTame : 1;                          // Mask: 0x2, PropSize: 0x10x1E51(0x1)(None)
	uint8                                        bTamedWanderHarvest : 1;                           // Mask: 0x4, PropSize: 0x10x1E51(0x1)(None)
	uint8                                        bSimulatedNetLandCheckFloor : 1;                   // Mask: 0x8, PropSize: 0x10x1E51(0x1)(None)
	uint8                                        bRefreshedColorization : 1;                        // Mask: 0x10, PropSize: 0x10x1E51(0x1)(None)
	uint8                                        BitPad_269 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_26A : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFlyerPreventRiderAutoFly : 1;                     // Mask: 0x8, PropSize: 0x10x1E52(0x1)(None)
	uint8                                        bAllowFlyerLandedRider : 1;                        // Mask: 0x10, PropSize: 0x10x1E52(0x1)(None)
	uint8                                        bPreventFlyerFlyingRider : 1;                      // Mask: 0x20, PropSize: 0x10x1E52(0x1)(None)
	uint8                                        bPreventFlyerCapsuleExpansion : 1;                 // Mask: 0x40, PropSize: 0x10x1E52(0x1)(None)
	uint8                                        bIncludeCarryWeightOfBasedPawns : 1;               // Mask: 0x80, PropSize: 0x10x1E52(0x1)(None)
	uint8                                        bForceRiderNetworkParent : 1;                      // Mask: 0x1, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bForcePerfectTame : 1;                             // Mask: 0x2, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bCanHaveBaby : 1;                                  // Mask: 0x4, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bUseBabyGestation : 1;                             // Mask: 0x8, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bPreventUnalignedDinoBasing : 1;                   // Mask: 0x10, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bOverrideLevelMusicIfTamed : 1;                    // Mask: 0x20, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        bReachedMaxStructures : 1;                         // Mask: 0x40, PropSize: 0x10x1E53(0x1)(None)
	uint8                                        BitPad_26B : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        ExtraBabyGestationSpeedMultiplier;                 // 0x1E54(0x4)(None)
	uint8                                        bSupportsSaddleStructures : 1;                     // Mask: 0x1, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        bBonesHidden : 1;                                  // Mask: 0x2, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        BitPad_26C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanBeRepaired : 1;                                // Mask: 0x8, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        bFlyerDontAutoLandOnDismount : 1;                  // Mask: 0x10, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        bIsRepairing : 1;                                  // Mask: 0x20, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        bIsBaby : 1;                                       // Mask: 0x40, PropSize: 0x10x1E58(0x1)(None)
	uint8                                        BitPad_26D : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanUnclaimTame : 1;                               // Mask: 0x1, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bAllowWildDinoEquipment : 1;                       // Mask: 0x2, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bUseTamedVisibleComponents : 1;                    // Mask: 0x4, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bAllowDemolish : 1;                                // Mask: 0x8, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bUseGang : 1;                                      // Mask: 0x10, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bBlueprintDrawFloatingHUD : 1;                     // Mask: 0x20, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bEggBoosted : 1;                                   // Mask: 0x40, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bUseBPTamedTick : 1;                               // Mask: 0x80, PropSize: 0x10x1E59(0x1)(None)
	uint8                                        bUseBPOverrideWantsToRun : 1;                      // Mask: 0x1, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bUseBPPlayDying : 1;                               // Mask: 0x2, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bSupportsPassengerSeats : 1;                       // Mask: 0x4, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bAddPassengerSeatMultiUseEntries : 1;              // Mask: 0x8, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bUseSaddlePassengerSeatsWhenAvailable : 1;         // Mask: 0x10, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bScaleInsulationByMeleeDamage : 1;                 // Mask: 0x20, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bInventoryOnlyAllowCraftingWhenWandering : 1;      // Mask: 0x40, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bUseWildRandomScale : 1;                           // Mask: 0x80, PropSize: 0x10x1E5A(0x1)(None)
	uint8                                        bHeldJumpSlowFalling : 1;                          // Mask: 0x1, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        bIsHeldJumpSlowFalling : 1;                        // Mask: 0x2, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        BitPad_26E : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTriggerBPUnstasis : 1;                            // Mask: 0x8, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        bWildProduceEggDynamically : 1;                    // Mask: 0x10, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        bPreventWakingTameFeeding : 1;                     // Mask: 0x20, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        bForceDisablingTaming : 1;                         // Mask: 0x40, PropSize: 0x10x1E5B(0x1)(None)
	uint8                                        BitPad_26F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        AutoFadeOutAfterTameTime;                          // 0x1E5C(0x4)(None)
	uint8                                        bFlyerAllowRidingInCaves : 1;                      // Mask: 0x1, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bScaleExtraRunningSpeedModifier : 1;               // Mask: 0x2, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bOverrideCrosshairAlpha : 1;                       // Mask: 0x4, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bOverrideCrosshairColor : 1;                       // Mask: 0x8, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bUseBPGetCrosshairLocation : 1;                    // Mask: 0x10, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bOverrideCrosshairSpread : 1;                      // Mask: 0x20, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bCenterOffscreenFloatingHUDWidgets : 1;            // Mask: 0x40, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bClampOffscreenFloatingHUDWidgets : 1;             // Mask: 0x80, PropSize: 0x10x1E60(0x1)(None)
	uint8                                        bUseFixedSpawnLevel : 1;                           // Mask: 0x1, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bTreatCrouchInputAsAttack : 1;                     // Mask: 0x2, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bUseBPGetRiderUnboardLocation : 1;                 // Mask: 0x4, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bUseBPGetRiderUnboardDirection : 1;                // Mask: 0x8, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bUniqueDino : 1;                                   // Mask: 0x10, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bModifyBasedCamera : 1;                            // Mask: 0x20, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bUseBPOnRefreshColorization : 1;                   // Mask: 0x40, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bHideAncestorsButton : 1;                          // Mask: 0x80, PropSize: 0x10x1E61(0x1)(None)
	uint8                                        bUseBP_OverrideDinoName : 1;                       // Mask: 0x1, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPDinoTooltipCustomProgressBar : 1;            // Mask: 0x2, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPDisplayTamedMessage : 1;                     // Mask: 0x4, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPOverrideTamingDescriptionLabel : 1;          // Mask: 0x8, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPCanMountOnCharacter : 1;                     // Mask: 0x10, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bIsNursingDino : 1;                                // Mask: 0x20, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bIsNursing : 1;                                    // Mask: 0x40, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPGetRiderSocket : 1;                          // Mask: 0x80, PropSize: 0x10x1E62(0x1)(None)
	uint8                                        bUseBPShowTamingPanel : 1;                         // Mask: 0x1, PropSize: 0x10x1E63(0x1)(None)
	uint8                                        bFlyerPrioritizeAllyMountToCarry : 1;              // Mask: 0x2, PropSize: 0x10x1E63(0x1)(None)
	uint8                                        bUseBPOverrideMutationLabels : 1;                  // Mask: 0x4, PropSize: 0x10x1E63(0x1)(None)
	uint8                                        bPreventMovementModeChangeForDinoPassengers : 1;   // Mask: 0x8, PropSize: 0x10x1E63(0x1)(None)
	uint8                                        bPreventRiderImmobilization : 1;                   // Mask: 0x10, PropSize: 0x10x1E63(0x1)(None)
	uint8                                        BitPad_270 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         HasAlreadySetGender;                               // 0x1E64(0x1)(None)
	uint8                                        Pad_3174[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BasedCameraSpeedMultiplier;                        // 0x1E68(0x4)(None)
	uint8                                        Pad_3175[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastEggBoostedTime;                                // 0x1E70(0x8)(None)
	float                                        WildPercentageChanceOfBaby;                        // 0x1E78(0x4)(None)
	float                                        WildBabyAgeWeight;                                 // 0x1E7C(0x4)(None)
	float                                        BabyGestationProgress;                             // 0x1E80(0x4)(None)
	float                                        FlyerForceLimitPitchMin;                           // 0x1E84(0x4)(None)
	bool                                         bUntamedUseOverlapEvents;                          // 0x1E88(0x1)(None)
	uint8                                        Pad_3176[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FlyerForceLimitPitchMax;                           // 0x1E8C(0x4)(None)
	uint8                                        Pad_3177[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BabyChanceOfTriplets;                              // 0x1E98(0x4)(None)
	float                                        BabyAge;                                           // 0x1E9C(0x4)(None)
	float                                        MaxPercentOfCapsulHeightAllowedForIK;              // 0x1EA0(0x4)(None)
	float                                        SlopeBiasForMaxCapsulePercent;                     // 0x1EA4(0x4)(None)
	float                                        FlyingForceRotationRateModifier;                   // 0x1EA8(0x4)(None)
	uint8                                        Pad_3178[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          HideBoneNames;                                     // 0x1EB0(0x10)(None)
	class FString                                HideBonesString;                                   // 0x1EC0(0x10)(None)
	struct FVector                               WaterSurfaceExtraJumpVector;                       // 0x1ED0(0x18)(None)
	struct FVector                               FlyerTakeOffAdditionalVelocity;                    // 0x1EE8(0x18)(None)
	float                                        OpenDoorDelay;                                     // 0x1F00(0x4)(None)
	float                                        TamedWanderHarvestInterval;                        // 0x1F04(0x4)(None)
	float                                        TamedWanderHarvestSearchRange;                     // 0x1F08(0x4)(None)
	float                                        TamedWanderHarvestCollectRadius;                   // 0x1F0C(0x4)(None)
	struct FVector                               TamedWanderHarvestCollectOffset;                   // 0x1F10(0x18)(None)
	float                                        RootLocSwimOffset;                                 // 0x1F28(0x4)(None)
	float                                        PlayAnimBelowHealthPercent;                        // 0x1F2C(0x4)(None)
	float                                        LeavePlayAnimBelowHealthPercent;                   // 0x1F30(0x4)(None)
	float                                        PlatformSaddleMaxStructureBuildDistance2D;         // 0x1F34(0x4)(None)
	class UAnimMontage*                          PlayAnimBelowHealth;                               // 0x1F38(0x8)(ZeroConstructor)
	class USoundBase*                            LowHealthExitSound;                                // 0x1F40(0x8)(ZeroConstructor)
	class USoundBase*                            LowHealthEnterSound;                               // 0x1F48(0x8)(ZeroConstructor)
	class UClass*                                LowHealthDinoSettings;                             // 0x1F50(0x8)(ZeroConstructor)
	float                                        SwimOffsetInterpSpeed;                             // 0x1F58(0x4)(None)
	uint8                                        Pad_3179[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AIRangeMultiplier;                                 // 0x1F60(0x4)(None)
	uint8                                        PreventColorizationRegions[0x6];                   // 0x1F64(0x6)(None)
	uint8                                        AllowPaintingColorRegions[0x6];                    // 0x1F6A(0x6)(None)
	uint8                                        ColorSetIndices[0x6];                              // 0x1F70(0x6)(None)
	uint8                                        Pad_317A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ColorSetNames[0x6];                                // 0x1F78(0x30)(None)
	float                                        ColorSetIntensityMultipliers[0x6];                 // 0x1FA8(0x18)(None)
	TWeakObjectPtr<class APrimalBuff>            ColorOverrideBuff;                                 // 0x1FC0(0x8)(ZeroConstructor)
	uint8                                        Pad_317B[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MeleeAttackStaminaCost;                            // 0x1FD4(0x4)(None)
	class UAnimMontage*                          WakingTameAnimation;                               // 0x1FD8(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AActor>                 Target;                                            // 0x1FE0(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AActor>                 TamedFollowTarget;                                 // 0x1FE8(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AActor>                 TamedLandTarget;                                   // 0x1FF0(0x8)(ZeroConstructor)
	float                                        PercentChanceFemale;                               // 0x1FF8(0x4)(None)
	uint8                                        Pad_317C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        DeathGiveItemClasses;                              // 0x2000(0x10)(ZeroConstructor)
	TArray<float>                                DeathGiveItemChanceToBeBlueprint;                  // 0x2010(0x10)(None)
	float                                        DeathGiveItemQualityMin;                           // 0x2020(0x4)(None)
	float                                        DeathGiveItemQualityMax;                           // 0x2024(0x4)(None)
	float                                        DeathGiveItemRange;                                // 0x2028(0x4)(None)
	uint8                                        Pad_317D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DeathGiveAchievement;                              // 0x2030(0x10)(None)
	class USoundBase*                            OverrideAreaMusic;                                 // 0x2040(0x8)(ZeroConstructor)
	struct FVector                               UnboardLocationOffset;                             // 0x2048(0x18)(None)
	uint8                                        Pad_317E[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RidingNetUpdateFequency;                           // 0x20F0(0x4)(None)
	float                                        RiderMaxSpeedModifier;                             // 0x20F4(0x4)(None)
	float                                        RiderExtraMaxSpeedModifier;                        // 0x20F8(0x4)(None)
	float                                        RiderMaxRunSpeedModifier;                          // 0x20FC(0x4)(None)
	float                                        RiderRotationRateModifier;                         // 0x2100(0x4)(None)
	float                                        SwimmingRotationRateModifier;                      // 0x2104(0x4)(None)
	float                                        ChargingRotationRateModifier;                      // 0x2108(0x4)(None)
	uint8                                        Pad_317F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          EnterFlightAnim;                                   // 0x2110(0x8)(ZeroConstructor)
	class UAnimMontage*                          ExitFlightAnim;                                    // 0x2118(0x8)(ZeroConstructor)
	class UAnimMontage*                          SleepConsumeFoodAnim;                              // 0x2120(0x8)(ZeroConstructor)
	class UAnimMontage*                          WakingConsumeFoodAnim;                             // 0x2128(0x8)(ZeroConstructor)
	class UAnimMontage*                          FallAsleepAnim;                                    // 0x2130(0x8)(ZeroConstructor)
	class UAnimMontage*                          TamedUnsleepAnim;                                  // 0x2138(0x8)(ZeroConstructor)
	class UAnimMontage*                          WildUnsleepAnim;                                   // 0x2140(0x8)(ZeroConstructor)
	class UAnimMontage*                          OpenDoorAnim;                                      // 0x2148(0x8)(ZeroConstructor)
	float                                        ControlFacePitchInterpSpeed;                       // 0x2150(0x4)(None)
	float                                        TamedWalkableFloorZ;                               // 0x2154(0x4)(None)
	float                                        CurrentMovementAnimRate;                           // 0x2158(0x4)(None)
	int32                                        MinPlayerLevelForWakingTame;                       // 0x215C(0x4)(None)
	uint8                                        Pad_3180[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                TamedInventoryComponentTemplate;                   // 0x2168(0x8)(ZeroConstructor)
	struct FWeightedObjectList                   DeathInventoryTemplates;                           // 0x2170(0x20)(ZeroConstructor)
	float                                        DeathInventoryChanceToUse;                         // 0x2190(0x4)(None)
	float                                        WakingTameFeedInterval;                            // 0x2194(0x4)(None)
	uint8                                        Pad_3181[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DeathInventoryQualityPerLevelMultiplier;           // 0x21A0(0x4)(None)
	float                                        RequiredTameAffinity;                              // 0x21A4(0x4)(None)
	float                                        RequiredTameAffinityPerBaseLevel;                  // 0x21A8(0x4)(None)
	uint8                                        TamedAITargetingRange;                             // 0x21AC(0x1)(None)
	uint8                                        bMeleeSwingDamageBlockedByAllStationaryObjects : 1; // Mask: 0x1, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bUseBPChargingModifyInputAcceleration : 1;         // Mask: 0x2, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bUseBPOnRepIsCharging : 1;                         // Mask: 0x4, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bUseBPPreventOrderAllowed : 1;                     // Mask: 0x8, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bPassengerDinosUsePassengerAnim : 1;               // Mask: 0x10, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bUsesPassengerAnimOnDinos : 1;                     // Mask: 0x20, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bOverrideRotationOnCarriedCharacter : 1;           // Mask: 0x40, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bAdvancedCarryRelease : 1;                         // Mask: 0x80, PropSize: 0x10x21AD(0x1)(None)
	uint8                                        bForceCarriedPlayerToCheckForWalls : 1;            // Mask: 0x1, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        bClearRiderOnDinoImmobilized : 1;                  // Mask: 0x2, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        bUseBPIsBasedOnActor : 1;                          // Mask: 0x4, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        bUseBPModifyControlRotation : 1;                   // Mask: 0x8, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        bUseBPOnDinoFiredProjectile : 1;                   // Mask: 0x10, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        bUseBPGetRidingMultiUseEntries : 1;                // Mask: 0x20, PropSize: 0x10x21AE(0x1)(None)
	uint8                                        BitPad_271 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3185[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  PassengerBoneNameOverride;                         // 0x21B0(0x8)(None)
	float                                        CurrentTameAffinity;                               // 0x21B8(0x4)(None)
	float                                        TameIneffectivenessModifier;                       // 0x21BC(0x4)(None)
	float                                        TameIneffectivenessByAffinity;                     // 0x21C0(0x4)(None)
	uint8                                        Pad_3187[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseBPIsValidUnStasisCaster;                       // 0x21D0(0x1)(None)
	uint8                                        Pad_3188[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPrimalSaddleStructure>        SaddleStructures;                                  // 0x21E0(0x10)(ZeroConstructor)
	int32                                        MaxSaddleStructuresHeight;                         // 0x21F0(0x4)(None)
	bool                                         CalculateStructureHeightFromSaddle;                // 0x21F4(0x1)(None)
	bool                                         CalculateStructureDistanceFromSaddle;              // 0x21F5(0x1)(None)
	uint8                                        Pad_3189[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SaddlePivotOffset;                                 // 0x21F8(0x4)(None)
	int32                                        MaxSaddleStructuresNum;                            // 0x21FC(0x4)(None)
	class UClass*                                DinoSettingsClass;                                 // 0x2200(0x8)(ZeroConstructor)
	float                                        TamingFoodConsumeInterval;                         // 0x2208(0x4)(None)
	float                                        DediForceAttackAnimTime;                           // 0x220C(0x4)(None)
	float                                        DediForceStartAttackAfterAnimTime;                 // 0x2210(0x4)(None)
	float                                        WakingTameFoodIncreaseMultiplier;                  // 0x2214(0x4)(None)
	int32                                        TamingTeamID;                                      // 0x2218(0x4)(None)
	int32                                        OwningPlayerID;                                    // 0x221C(0x4)(None)
	class FString                                OwningPlayerName;                                  // 0x2220(0x10)(None)
	double                                       TamingLastFoodConsumptionTime;                     // 0x2230(0x8)(None)
	double                                       LastTameConsumedFoodTime;                          // 0x2238(0x8)(None)
	uint32                                       DinoID1;                                           // 0x2240(0x4)(None)
	uint32                                       DinoID2;                                           // 0x2244(0x4)(None)
	uint8                                        Pad_318B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TamedAggressionLevel;                              // 0x2260(0x4)(None)
	float                                        TamingIneffectivenessModifierIncreaseByDamagePercent; // 0x2264(0x4)(None)
	uint8                                        Pad_318C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalStructureItemContainer_SupplyCrate> LinkedSupplyCrate;                                 // 0x2270(0x8)(ZeroConstructor)
	float                                        UntamedPoopTimeMinInterval;                        // 0x2278(0x4)(None)
	float                                        UntamedPoopTimeMaxInterval;                        // 0x227C(0x4)(None)
	float                                        MeleeHarvestDamageMultiplier;                      // 0x2280(0x4)(None)
	float                                        AllowRidingMaxDistance;                            // 0x2284(0x4)(None)
	float                                        UntamedPoopTimeCache;                              // 0x2288(0x4)(None)
	uint8                                        Pad_318E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                BaseEggClass;                                      // 0x2290(0x8)(ZeroConstructor)
	TArray<class UClass*>                        EggItemsToSpawn;                                   // 0x2298(0x10)(ZeroConstructor)
	TArray<float>                                EggWeightsToSpawn;                                 // 0x22A8(0x10)(None)
	TArray<class UClass*>                        FertilizedEggItemsToSpawn;                         // 0x22B8(0x10)(ZeroConstructor)
	TArray<float>                                FertilizedEggWeightsToSpawn;                       // 0x22C8(0x10)(None)
	float                                        EggChanceToSpawnUnstasis;                          // 0x22D8(0x4)(None)
	float                                        EggIntervalBetweenUnstasisChances;                 // 0x22DC(0x4)(None)
	float                                        EggRangeMaximumNumberFromSameDinoType;             // 0x22E0(0x4)(None)
	int32                                        EggMaximumNumberFromSameDinoType;                  // 0x22E4(0x4)(None)
	float                                        EggRangeMaximumNumber;                             // 0x22E8(0x4)(None)
	int32                                        EggMaximumNumber;                                  // 0x22EC(0x4)(None)
	class FName                                  EggSpawnSocketName;                                // 0x22F0(0x8)(None)
	class UAnimMontage*                          EggLayingAnimation;                                // 0x22F8(0x8)(ZeroConstructor)
	float                                        UntamedWalkingSpeedModifier;                       // 0x2300(0x4)(None)
	float                                        TamedWalkingSpeedModifier;                         // 0x2304(0x4)(None)
	float                                        UntamedRunningSpeedModifier;                       // 0x2308(0x4)(None)
	float                                        TamedRunningSpeedModifier;                         // 0x230C(0x4)(None)
	class UClass*                                RandomColorSetsMale;                               // 0x2310(0x8)(ZeroConstructor)
	class UClass*                                RandomColorSetsFemale;                             // 0x2318(0x8)(ZeroConstructor)
	class UClass*                                SpawnerColorSets;                                  // 0x2320(0x8)(ZeroConstructor)
	class UAnimSequence*                         RiderAnimOverride;                                 // 0x2328(0x8)(ZeroConstructor)
	class UAnimSequence*                         TurningRightRiderAnimOverride;                     // 0x2330(0x8)(ZeroConstructor)
	class UAnimSequence*                         TurningLeftRiderAnimOverride;                      // 0x2338(0x8)(ZeroConstructor)
	class UAnimSequence*                         LatchedRiderAnimOverride;                          // 0x2340(0x8)(ZeroConstructor)
	class UAnimSequence*                         RiderMoveAnimOverride;                             // 0x2348(0x8)(ZeroConstructor)
	float                                        RidingAnimSpeedFactor;                             // 0x2350(0x4)(None)
	uint8                                        Pad_3190[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          StartRidingAnimOverride;                           // 0x2358(0x8)(ZeroConstructor)
	class UAnimMontage*                          StopRidingAnimOverride;                            // 0x2360(0x8)(ZeroConstructor)
	class FName                                  TargetingTeamNameOverride;                         // 0x2368(0x8)(None)
	float                                        ExtraTamedSpeedMultiplier;                         // 0x2370(0x4)(None)
	float                                        ExtraUnTamedSpeedMultiplier;                       // 0x2374(0x4)(None)
	double                                       LastEggSpawnChanceTime;                            // 0x2378(0x8)(None)
	class FName                                  OriginalNPCVolumeName;                             // 0x2380(0x8)(None)
	float                                        OutsideOriginalNPCVolumeStasisDestroyInterval;     // 0x2388(0x4)(None)
	float                                        StasisedDestroyInterval;                           // 0x238C(0x4)(None)
	float                                        TamedAllowNamingTime;                              // 0x2390(0x4)(None)
	float                                        MovementSpeedScalingRotationRatePower;             // 0x2394(0x4)(None)
	float                                        AttackNoStaminaTorpidityMultiplier;                // 0x2398(0x4)(None)
	float                                        DecayDestructionPeriod;                            // 0x239C(0x4)(None)
	double                                       TamedAtTime;                                       // 0x23A0(0x8)(None)
	double                                       LastInAllyRangeTime;                               // 0x23A8(0x8)(None)
	uint8                                        Pad_3192[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APrimalStructure*>              LatchedOnStructures;                               // 0x23C0(0x10)(ZeroConstructor)
	class UPrimalDinoSettings*                   MyDinoSettingsCDO;                                 // 0x23D0(0x8)(ZeroConstructor)
	uint8                                        Pad_3193[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LocInterpolationSnapDistance;                      // 0x23DC(0x4)(None)
	uint8                                        Pad_3194[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HUDScaleMultiplier;                                // 0x23F0(0x4)(None)
	float                                        HUDTextScaleMultiplier;                            // 0x23F4(0x4)(None)
	float                                        TamedCorpseLifespan;                               // 0x23F8(0x4)(None)
	float                                        MateBoostDamageReceiveMultiplier;                  // 0x23FC(0x4)(None)
	float                                        MateBoostDamageGiveMultiplier;                     // 0x2400(0x4)(None)
	float                                        MateBoostRange;                                    // 0x2404(0x4)(None)
	class FName                                  DinoNameTag;                                       // 0x2408(0x8)(None)
	class AShooterPlayerController*              AttackMyTargetForPlayerController;                 // 0x2410(0x8)(ZeroConstructor)
	float                                        RidingAttackExtraVelocityDelay;                    // 0x2418(0x4)(None)
	float                                        StepDamageRadialDamageInterval;                    // 0x241C(0x4)(None)
	float                                        StepDamageRadialDamageExtraRadius;                 // 0x2420(0x4)(None)
	float                                        StepDamageRadialDamageAmountGeneral;               // 0x2424(0x4)(None)
	float                                        StepDamageRadialDamageAmountHarvestable;           // 0x2428(0x4)(None)
	uint8                                        Pad_3195[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                StepHarvestableDamageType;                         // 0x2438(0x8)(ZeroConstructor)
	float                                        StepDamageFootDamageInterval;                      // 0x2440(0x4)(None)
	float                                        StepDamageFootDamageRadius;                        // 0x2444(0x4)(None)
	float                                        StepDamageFootDamageAmount;                        // 0x2448(0x4)(None)
	uint8                                        Pad_3196[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          StepDamageFootDamageSockets;                       // 0x2450(0x10)(None)
	float                                        DurationBeforeMovingStuckPawn;                     // 0x2460(0x4)(None)
	uint8                                        Pad_3197[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          StartledAnimationRightDefault;                     // 0x2488(0x8)(ZeroConstructor)
	class UAnimMontage*                          StartledAnimationLeft;                             // 0x2490(0x8)(ZeroConstructor)
	TArray<class UAnimMontage*>                  StartledAnimations;                                // 0x2498(0x10)(ZeroConstructor)
	class UAnimMontage*                          FlyingStartledAnimation;                           // 0x24A8(0x8)(ZeroConstructor)
	float                                        RandomPlayStartledAnimIntervalMin;                 // 0x24B0(0x4)(None)
	float                                        RandomPlayStartledAnimIntervalMax;                 // 0x24B4(0x4)(None)
	float                                        StartledAnimationCooldown;                         // 0x24B8(0x4)(None)
	float                                        DefaultActivateAttackRangeOffset;                  // 0x24BC(0x4)(None)
	float                                        CorpseTargetingMultiplier;                         // 0x24C0(0x4)(None)
	uint8                                        Pad_3198[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CorpseLifespanNonRelevant;                         // 0x24DC(0x4)(None)
	uint8                                        bUseBPUnstasisConsumeFood : 1;                     // Mask: 0x1, PropSize: 0x10x24E0(0x1)(None)
	uint8                                        bUseBPOnDinoStartled : 1;                          // Mask: 0x2, PropSize: 0x10x24E0(0x1)(None)
	uint8                                        bRemoteDinoConsumesStaminaWhileRunning : 1;        // Mask: 0x4, PropSize: 0x10x24E0(0x1)(None)
	uint8                                        bIncrementedZoneManagerDirectLink : 1;             // Mask: 0x8, PropSize: 0x10x24E0(0x1)(None)
	uint8                                        BitPad_272 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3199[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ANPCZoneManager*                       DirectLinkNPCZoneManager;                          // 0x24E8(0x8)(ZeroConstructor)
	uint8                                        Pad_319A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinStaminaForRider;                                // 0x24F8(0x4)(None)
	float                                        LoseStaminaWithRiderRate;                          // 0x24FC(0x4)(None)
	float                                        FollowingRunDistance;                              // 0x2500(0x4)(None)
	float                                        MaxDinoKillerTransferWeightPercent;                // 0x2504(0x4)(None)
	float                                        NPCZoneVolumeCountWeight;                          // 0x2508(0x4)(None)
	uint8                                        Pad_319B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FloatingHUDTextWorldOffset;                        // 0x2510(0x18)(None)
	uint8                                        Pad_319C[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                RepairRequirementsItem;                            // 0x25A0(0x8)(ZeroConstructor)
	uint8                                        Pad_319D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RepairCheckInterval;                               // 0x25AC(0x4)(None)
	float                                        RepairPercentPerInterval;                          // 0x25B0(0x4)(None)
	uint8                                        Pad_319E[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RiderCheckTraceOffset;                             // 0x25C0(0x18)(None)
	struct FVector                               RiderEjectionImpulse;                              // 0x25D8(0x18)(None)
	float                                        WakingTameAffinityDecreaseFoodPercentage;          // 0x25F0(0x4)(None)
	float                                        WakingTameAllowFeedingFoodPercentage;              // 0x25F4(0x4)(None)
	float                                        WakingTameFoodAffinityMultiplier;                  // 0x25F8(0x4)(None)
	float                                        CheckForWildAmbientHarvestingIntervalMin;          // 0x25FC(0x4)(None)
	float                                        CheckForWildAmbientHarvestingIntervalMax;          // 0x2600(0x4)(None)
	uint8                                        Pad_319F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          WildAmbientHarvestingAnimation;                    // 0x2608(0x8)(ZeroConstructor)
	TArray<class UAnimMontage*>                  WildAmbientHarvestingAnimations;                   // 0x2610(0x10)(ZeroConstructor)
	TArray<class UClass*>                        WildAmbientHarvestingComponentClasses;             // 0x2620(0x10)(ZeroConstructor)
	float                                        WildAmbientHarvestingRadius;                       // 0x2630(0x4)(None)
	uint8                                        Pad_31A0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AbsoluteBaseLevel;                                 // 0x2638(0x4)(None)
	uint8                                        Pad_31A2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStatValuePair>                OverrideBaseStatLevelsOnSpawn;                     // 0x2640(0x10)(None)
	TArray<enum class EPrimalCharacterStatusValue> OverrideStatPriorityOnSpawn;                       // 0x2650(0x10)(None)
	class UClass*                                TamedHarvestDamageType;                            // 0x2660(0x8)(ZeroConstructor)
	struct FDinoSaddleStruct                     SaddleStruct;                                      // 0x2668(0x20)(ZeroConstructor)
	uint8                                        Pad_31A3[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                StartChargingShake;                                // 0x26B0(0x8)(ZeroConstructor)
	class UClass*                                LightEndChargingShake;                             // 0x26B8(0x8)(ZeroConstructor)
	class UClass*                                HardEndChargingShake;                              // 0x26C0(0x8)(ZeroConstructor)
	float                                        ChargeBumpDamage;                                  // 0x26C8(0x4)(None)
	uint8                                        Pad_31A5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ChargeBumpDamageType;                              // 0x26D0(0x8)(ZeroConstructor)
	float                                        ChargeBumpImpulse;                                 // 0x26D8(0x4)(None)
	float                                        MinChargeInterval;                                 // 0x26DC(0x4)(None)
	float                                        PlayerMountedLaunchFowardSpeed;                    // 0x26E0(0x4)(None)
	float                                        PlayerMountedLaunchUpSpeed;                        // 0x26E4(0x4)(None)
	float                                        AttackOnLaunchMaximumTargetDistance;               // 0x26E8(0x4)(None)
	float                                        KeepFlightRemainingTime;                           // 0x26EC(0x4)(None)
	class UAnimMontage*                          MountCharacterAnimation;                           // 0x26F0(0x8)(ZeroConstructor)
	class UAnimMontage*                          UnmountCharacterAnimation;                         // 0x26F8(0x8)(ZeroConstructor)
	class UAnimMontage*                          EndChargingAnimation;                              // 0x2700(0x8)(ZeroConstructor)
	float                                        FlyingRunSpeedModifier;                            // 0x2708(0x4)(None)
	float                                        ChargingAnimDelay;                                 // 0x270C(0x4)(None)
	class FName                                  RiderSocketName;                                   // 0x2710(0x8)(None)
	float                                        ChargingActivationRequiresStamina;                 // 0x2718(0x4)(None)
	float                                        ChargingActivationConsumesStamina;                 // 0x271C(0x4)(None)
	float                                        FlyerHardBreakingOverride;                         // 0x2720(0x4)(None)
	float                                        BabyScale;                                         // 0x2724(0x4)(None)
	float                                        BabySpeedMultiplier;                               // 0x2728(0x4)(None)
	float                                        BabyPitchMultiplier;                               // 0x272C(0x4)(None)
	float                                        BabyVolumeMultiplier;                              // 0x2730(0x4)(None)
	TWeakObjectPtr<class AActor>                 WanderAroundActor;                                 // 0x2734(0x8)(ZeroConstructor)
	float                                        WanderAroundActorMaxDistance;                      // 0x273C(0x4)(None)
	uint8                                        Pad_31A9[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             BuffGivenToBasedCharacters;                        // 0x2760(0x30)(ZeroConstructor)
	uint8                                        Pad_31AA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastUpdatedBabyAgeAtTime;                          // 0x2798(0x8)(None)
	double                                       LastUpdatedGestationAtTime;                        // 0x27A0(0x8)(None)
	double                                       LastUpdatedMatingAtTime;                           // 0x27A8(0x8)(None)
	float                                        BabyAgeSpeed;                                      // 0x27B0(0x4)(None)
	float                                        ExtraBabyAgeSpeedMultiplier;                       // 0x27B4(0x4)(None)
	float                                        FemaleMatingRangeAddition;                         // 0x27B8(0x4)(None)
	float                                        FemaleMatingTime;                                  // 0x27BC(0x4)(None)
	double                                       NextAllowedMatingTime;                             // 0x27C0(0x8)(None)
	float                                        MatingProgress;                                    // 0x27C8(0x4)(None)
	uint8                                        Pad_31AB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastMatingNotificationTime;                        // 0x27D0(0x8)(None)
	class APrimalDinoCharacter*                  MatingWithDino;                                    // 0x27D8(0x8)(ZeroConstructor)
	class UAnimMontage*                          MatingAnimationMale;                               // 0x27E0(0x8)(ZeroConstructor)
	uint8                                        GestationEggNumberOfLevelUpPointsApplied[0xC];     // 0x27E8(0xC)(None)
	uint8                                        GestationEggNumberOfMutationsApplied[0xC];         // 0x27F4(0xC)(None)
	float                                        GestationEggTamedIneffectivenessModifier;          // 0x2800(0x4)(None)
	uint8                                        GestationEggColorSetIndices[0x6];                  // 0x2804(0x6)(None)
	uint8                                        Pad_31AC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NewFemaleMinTimeBetweenMating;                     // 0x280C(0x4)(None)
	float                                        NewFemaleMaxTimeBetweenMating;                     // 0x2810(0x4)(None)
	uint8                                        Pad_31AD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalBuff>>     DefaultTamedBuffs;                                 // 0x2818(0x10)(ZeroConstructor)
	uint8                                        Pad_31AE[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HyperThermiaInsulation;                            // 0x2858(0x4)(None)
	float                                        HypoThermiaInsulation;                             // 0x285C(0x4)(None)
	float                                        InsulationRange;                                   // 0x2860(0x4)(None)
	float                                        GangOverlapRange;                                  // 0x2864(0x4)(None)
	float                                        GangDamageResistance;                              // 0x2868(0x4)(None)
	float                                        GangDamage;                                        // 0x286C(0x4)(None)
	int32                                        MaxGangCount;                                      // 0x2870(0x4)(None)
	int32                                        GangCount;                                         // 0x2874(0x4)(None)
	uint8                                        Pad_31B0[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WildRandomScale;                                   // 0x28A0(0x4)(None)
	float                                        HeldJumpSlowFallingGravityZScale;                  // 0x28A4(0x4)(None)
	class UAnimMontage*                          SlowFallingAnim;                                   // 0x28A8(0x8)(ZeroConstructor)
	float                                        SlowFallingStaminaCostPerSecond;                   // 0x28B0(0x4)(None)
	float                                        NoRiderRotationModifier;                           // 0x28B4(0x4)(None)
	class FName                                  RiderFPVCameraUseSocketName;                       // 0x28B8(0x8)(None)
	class FName                                  RiderLatchedFPVCameraUseSocketName;                // 0x28C0(0x8)(None)
	class FName                                  PassengerFPVCameraRootSocket;                      // 0x28C8(0x8)(None)
	TArray<class FName>                          FPVRiderBoneNamesToHide;                           // 0x28D0(0x10)(None)
	float                                        ExtraRunningSpeedModifier;                         // 0x28E0(0x4)(None)
	float                                        ScaleExtraRunningSpeedModifierMin;                 // 0x28E4(0x4)(None)
	float                                        ScaleExtraRunningSpeedModifierMax;                 // 0x28E8(0x4)(None)
	float                                        ScaleExtraRunningSpeedModifierSpeed;               // 0x28EC(0x4)(None)
	float                                        LastHigherScaleExtraRunningSpeedValue;             // 0x28F0(0x4)(None)
	uint8                                        Pad_31B1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastHigherScaleExtraRunningSpeedTime;              // 0x28F8(0x8)(None)
	uint8                                        bSimulateRootMotion : 1;                           // Mask: 0x1, PropSize: 0x10x2900(0x1)(None)
	uint8                                        bUseBPOverrideStencilAllianceForTarget : 1;        // Mask: 0x2, PropSize: 0x10x2900(0x1)(None)
	uint8                                        bIsScout : 1;                                      // Mask: 0x4, PropSize: 0x10x2900(0x1)(None)
	uint8                                        bDisableHighQualityAIVolumeLedgeChecking : 1;      // Mask: 0x8, PropSize: 0x10x2900(0x1)(None)
	uint8                                        bDoHighQualityLedgeChecking : 1;                   // Mask: 0x10, PropSize: 0x10x2900(0x1)(None)
	uint8                                        BitPad_273 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31B2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RiderMovementSpeedScalingRotationRatePowerMultiplier; // 0x2904(0x4)(None)
	float                                        HighQualityLedgeDetectionExtraTraceDistance;       // 0x2908(0x4)(None)
	uint8                                        bOnlyDoStepDamageWhenRunning : 1;                  // Mask: 0x1, PropSize: 0x10x290C(0x1)(None)
	uint8                                        BitPad_274 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventPlatformSaddleMultiFloors : 1;             // Mask: 0x4, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bPreventMountedDinoMeshHiding : 1;                 // Mask: 0x8, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bUsePlayerMountedCarryingDinoAnimation : 1;        // Mask: 0x10, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bPreventRotationRateModifier : 1;                  // Mask: 0x20, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bStepDamageFoliageOnly : 1;                        // Mask: 0x40, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bPreventUntamedRun : 1;                            // Mask: 0x80, PropSize: 0x10x290C(0x1)(None)
	uint8                                        bAllowTogglingPublicSeating : 1;                   // Mask: 0x1, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bAllowPublicSeating : 1;                           // Mask: 0x2, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bAllowWaterSurfaceExtraJump : 1;                   // Mask: 0x4, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bUseVelocityForRequestedMoveIfStuck : 1;           // Mask: 0x8, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bUseBPDoAttack : 1;                                // Mask: 0x10, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bStepDamageNonFoliageWithoutRunning : 1;           // Mask: 0x20, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bStepDamageAllTargetables : 1;                     // Mask: 0x40, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bDamageNonFoliageFeetSocketsOnly : 1;              // Mask: 0x80, PropSize: 0x10x290D(0x1)(None)
	uint8                                        bRiderDontBeBlockedByPawnMesh : 1;                 // Mask: 0x1, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bUseExtendedUnstasisCheck : 1;                     // Mask: 0x2, PropSize: 0x10x290E(0x1)(None)
	uint8                                        BitPad_275 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowDinoAutoConsumeInventoryFood : 1;            // Mask: 0x8, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bForceNoCharacterStatusComponentTick : 1;          // Mask: 0x10, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bIsRaidDino : 1;                                   // Mask: 0x20, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bWildIgnoredByAutoTurrets : 1;                     // Mask: 0x40, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bWildAllowTargetingNeutralStructures : 1;          // Mask: 0x80, PropSize: 0x10x290E(0x1)(None)
	uint8                                        bDoStepDamageTamedOnly : 1;                        // Mask: 0x1, PropSize: 0x10x290F(0x1)(None)
	uint8                                        bStepDamageNonFoliageTamedOnly : 1;                // Mask: 0x2, PropSize: 0x10x290F(0x1)(None)
	uint8                                        BitPad_276 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceWildDeathInventoryDeposit : 1;               // Mask: 0x8, PropSize: 0x10x290F(0x1)(None)
	uint8                                        bIsCarryingCharacter : 1;                          // Mask: 0x10, PropSize: 0x10x290F(0x1)(None)
	uint8                                        bIsCarryingPassenger : 1;                          // Mask: 0x20, PropSize: 0x10x290F(0x1)(None)
	uint8                                        bUseBPCanTakePassenger : 1;                        // Mask: 0x40, PropSize: 0x10x290F(0x1)(None)
	uint8                                        bForwardPlatformSaddleStructureDamageToDino : 1;   // Mask: 0x80, PropSize: 0x10x290F(0x1)(None)
	float                                        ForwardPlatformSaddleStructureDamageToDinoMultiplier; // 0x2910(0x4)(None)
	class FName                                  ForwardPlatformSaddleStructurePointDamageToBone;   // 0x2914(0x8)(None)
	uint8                                        Pad_31B4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LoadDestroyWildDinosUnderVersion;                  // 0x2920(0x4)(None)
	int32                                        SaveDestroyWildDinosUnderVersion;                  // 0x2924(0x4)(None)
	float                                        AllowWaterSurfaceExtraJumpStaminaCost;             // 0x2928(0x4)(None)
	uint8                                        Pad_31B5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            PlayKillLocalSound;                                // 0x2930(0x8)(ZeroConstructor)
	uint8                                        Pad_31B6[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        TribeGroupPetOrderingRank;                         // 0x2958(0x1)(None)
	uint8                                        TribeGroupPetRidingRank;                           // 0x2959(0x1)(None)
	uint8                                        FollowStoppingDistance;                            // 0x295A(0x1)(None)
	uint8                                        Pad_31B8[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ImprinterName;                                     // 0x2960(0x10)(None)
	class FString                                ImprinterPlayerUniqueNetId;                        // 0x2970(0x10)(None)
	float                                        BabyMinCuddleInterval;                             // 0x2980(0x4)(None)
	float                                        BabyMaxCuddleInterval;                             // 0x2984(0x4)(None)
	float                                        BabyCuddleGracePeriod;                             // 0x2988(0x4)(None)
	float                                        BabyCuddleLoseImpringQualityPerSecond;             // 0x298C(0x4)(None)
	float                                        BabyCuddleWalkDistance;                            // 0x2990(0x4)(None)
	uint8                                        Pad_31B9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BabyCuddleWalkStartingLocation;                    // 0x2998(0x18)(None)
	double                                       BabyNextCuddleTime;                                // 0x29B0(0x8)(None)
	enum class EBabyCuddleType                   BabyCuddleType;                                    // 0x29B8(0x1)(None)
	uint8                                        Pad_31BA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                BabyCuddleFood;                                    // 0x29C0(0x8)(ZeroConstructor)
	class UAnimMontage*                          BabyCuddledAnimation;                              // 0x29C8(0x8)(ZeroConstructor)
	TArray<class UClass*>                        MyBabyCuddleFoodTypes;                             // 0x29D0(0x10)(ZeroConstructor)
	float                                        RiderMaxImprintingQualityDamageReduction;          // 0x29E0(0x4)(None)
	float                                        RiderMaxImprintingQualityDamageMultiplier;         // 0x29E4(0x4)(None)
	float                                        BabyImprintingQualityTotalMaturationTime;          // 0x29E8(0x4)(None)
	float                                        WakingTameMaxDistance;                             // 0x29EC(0x4)(None)
	float                                        TimeBetweenTamedWakingEatAnimations;               // 0x29F0(0x4)(None)
	uint8                                        Pad_31BC[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_277 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDontPlayAttackingMusic : 1;                       // Mask: 0x2, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bForceIgnoreRagdollHarvesting : 1;                 // Mask: 0x4, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bBPModifyAimOffsetTargetLocation : 1;              // Mask: 0x8, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bBPModifyAimOffsetNoTarget : 1;                    // Mask: 0x10, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bIsVehicle : 1;                                    // Mask: 0x20, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bDisallowPostNetReplication : 1;                   // Mask: 0x40, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bTakingOff : 1;                                    // Mask: 0x80, PropSize: 0x10x2A00(0x1)(None)
	uint8                                        bPreventMating : 1;                                // Mask: 0x1, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bAttackStopsRotation : 1;                          // Mask: 0x2, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bFlyerDinoAllowBackwardsFlight : 1;                // Mask: 0x4, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bFlyerDinoAllowStrafing : 1;                       // Mask: 0x8, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bIgnoreTargetingLiveUnriddenDinos : 1;             // Mask: 0x10, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bSleepedForceCreateInventory : 1;                  // Mask: 0x20, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bLocalForceNearbySkelMeshUpdate : 1;               // Mask: 0x40, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bFlyerDisableEnemyTargetingMaxDeltaZ : 1;          // Mask: 0x80, PropSize: 0x10x2A01(0x1)(None)
	uint8                                        bIsBossDino : 1;                                   // Mask: 0x1, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        bTamedAIAllowSpecialAttacks : 1;                   // Mask: 0x2, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        bTamedAIToggleSpecialAttacks : 1;                  // Mask: 0x4, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        BitPad_278 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bRepeatPrimaryAttack : 1;                          // Mask: 0x10, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        bPreventUploading : 1;                             // Mask: 0x20, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        bPreventHibernation : 1;                           // Mask: 0x40, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        bRiderMovementLocked : 1;                          // Mask: 0x80, PropSize: 0x10x2A02(0x1)(None)
	uint8                                        BitPad_279 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNeutered : 1;                                     // Mask: 0x2, PropSize: 0x10x2A03(0x1)(None)
	uint8                                        bIgnoreAllWhistles : 1;                            // Mask: 0x4, PropSize: 0x10x2A03(0x1)(None)
	uint8                                        bUseBPDoHarvestAttack : 1;                         // Mask: 0x8, PropSize: 0x10x2A03(0x1)(None)
	uint8                                        bUseBPModifyHarvestingQuantity : 1;                // Mask: 0x10, PropSize: 0x10x2A03(0x1)(None)
	uint8                                        bUseBPModifyHarvestingWeightsArray : 1;            // Mask: 0x20, PropSize: 0x10x2A03(0x1)(None)
	uint8                                        BitPad_27A : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        StepDamageFootDamageRunningMultiplier;             // 0x2A04(0x4)(None)
	uint8                                        bUseBPModifyHarvestDamage : 1;                     // Mask: 0x1, PropSize: 0x10x2A08(0x1)(None)
	uint8                                        bHideFloatingHUD : 1;                              // Mask: 0x2, PropSize: 0x10x2A08(0x1)(None)
	uint8                                        BitPad_27B : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31BD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxRangeForWeaponTriggeredTooltip;                 // 0x2A0C(0x4)(None)
	uint8                                        bDisableHarvesting : 1;                            // Mask: 0x1, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bUseBPDinoPostBeginPlay : 1;                       // Mask: 0x2, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        BitPad_27C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFlyerDontGainImpulseOnSubmerged : 1;              // Mask: 0x8, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bUseBPCanAutodrag : 1;                             // Mask: 0x10, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bUseBPCanDragCharacter : 1;                        // Mask: 0x20, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bAllowDraggingWhileFalling : 1;                    // Mask: 0x40, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bSingleplayerFreezePhysicsWhenNoTarget : 1;        // Mask: 0x80, PropSize: 0x10x2A10(0x1)(None)
	uint8                                        bPreventDinoLevelOnDecriptiveName : 1;             // Mask: 0x1, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        BitPad_27D : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsCloneDino : 1;                                  // Mask: 0x4, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bUseAdvancedAnimLerp : 1;                          // Mask: 0x8, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bPreventWanderingUnderWater : 1;                   // Mask: 0x10, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bWildAllowFollowTamedTarget : 1;                   // Mask: 0x20, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bAllowDamageSameTeamAndClass : 1;                  // Mask: 0x40, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bAllowsTurretMode : 1;                             // Mask: 0x80, PropSize: 0x10x2A11(0x1)(None)
	uint8                                        bAllowRidingInTurretMode : 1;                      // Mask: 0x1, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bIsInTurretMode : 1;                               // Mask: 0x2, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bUseBPShouldCancelDoAttack : 1;                    // Mask: 0x4, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bUseBPModifyDesiredRotation : 1;                   // Mask: 0x8, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bUseLocalSpaceDesiredRotationWithRider : 1;        // Mask: 0x10, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bUseBPDesiredRotationIsLocalSpace : 1;             // Mask: 0x20, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        BitPad_27E : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPOverrideCameraViewTarget : 1;                // Mask: 0x80, PropSize: 0x10x2A12(0x1)(None)
	uint8                                        bIsRobot : 1;                                      // Mask: 0x1, PropSize: 0x10x2A13(0x1)(None)
	uint8                                        BitPad_27F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        StepRadialDamageOffset;                            // 0x2A14(0x4)(None)
	uint8                                        bUseBP_CustomModifier_RotationRate : 1;            // Mask: 0x1, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bUseBP_CustomModifier_MaxSpeed : 1;                // Mask: 0x2, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bUseBP_OnStartLandingNotify : 1;                   // Mask: 0x4, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        BitPad_280 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseAttackForceWalkDistanceMultiplier : 1;         // Mask: 0x10, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bForcePerFrameTicking : 1;                         // Mask: 0x20, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bHadStaticBase : 1;                                // Mask: 0x40, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bNoKillXP : 1;                                     // Mask: 0x80, PropSize: 0x10x2A18(0x1)(None)
	uint8                                        bIgnoreAllyLook : 1;                               // Mask: 0x1, PropSize: 0x10x2A19(0x1)(None)
	uint8                                        bBabyInitiallyUnclaimed : 1;                       // Mask: 0x2, PropSize: 0x10x2A19(0x1)(None)
	uint8                                        bUseBPForceTurretFastTargeting : 1;                // Mask: 0x4, PropSize: 0x10x2A19(0x1)(None)
	uint8                                        BitPad_281 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSuppressWakingTameMessage : 1;                    // Mask: 0x10, PropSize: 0x10x2A19(0x1)(None)
	uint8                                        bPreventFlyerLanding : 1;                          // Mask: 0x20, PropSize: 0x10x2A19(0x1)(None)
	uint8                                        BitPad_282 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDisableCollisionWithDinosWhenFlying : 1;          // Mask: 0x1, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bAllowTrapping : 1;                                // Mask: 0x2, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bPreventWildTrapping : 1;                          // Mask: 0x4, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bIsTrapTamed : 1;                                  // Mask: 0x8, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bIgnoreDestroyOnRapidDeath : 1;                    // Mask: 0x10, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bPreventFallingBumpCheck : 1;                      // Mask: 0x20, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bIsDestroyingDino : 1;                             // Mask: 0x40, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bCheckBPAllowClaiming : 1;                         // Mask: 0x80, PropSize: 0x10x2A1A(0x1)(None)
	uint8                                        bUseBlueprintExtraBabyScale : 1;                   // Mask: 0x1, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        bPreventNeuter : 1;                                // Mask: 0x2, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        bUseBPGetDragSocketName : 1;                       // Mask: 0x4, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        bUseBPGetDragSocketDinoName : 1;                   // Mask: 0x8, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        bUseBPGetLookOffsetSocketName : 1;                 // Mask: 0x10, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        bTargetEverythingIncludingSameTeamInPVE : 1;       // Mask: 0x20, PropSize: 0x10x2A1B(0x1)(None)
	uint8                                        BitPad_283 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        ForcePawnBigPushingForTime;                        // 0x2A1C(0x4)(None)
	uint8                                        bForceUsePhysicalFootSurfaceTrace : 1;             // Mask: 0x1, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bUseBP_OnPostNetReplication : 1;                   // Mask: 0x2, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bPassiveFlee : 1;                                  // Mask: 0x4, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        BitPad_284 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOnlyTargetConscious : 1;                          // Mask: 0x10, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bBPManagedFPVViewLocationNoRider : 1;              // Mask: 0x20, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bHideSaddleInFPV : 1;                              // Mask: 0x40, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bPreventCloning : 1;                               // Mask: 0x80, PropSize: 0x10x2A20(0x1)(None)
	uint8                                        bPreventStasisOnDedi : 1;                          // Mask: 0x1, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bAlwaysCheckForFloor : 1;                          // Mask: 0x2, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bAlwaysCheckForFalling : 1;                        // Mask: 0x4, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bForceAllowCarryWaterDinos : 1;                    // Mask: 0x8, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bUseBP_AllowWalkableSlopeOverride : 1;             // Mask: 0x10, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bUseBP_CanFly : 1;                                 // Mask: 0x20, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bUseBP_OverrideBasedCharactersCameraInterpSpeed : 1; // Mask: 0x40, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bUseBPOverrideFloatingHUDLocation : 1;             // Mask: 0x80, PropSize: 0x10x2A21(0x1)(None)
	uint8                                        bInterceptPlayerEmotes : 1;                        // Mask: 0x1, PropSize: 0x10x2A22(0x1)(None)
	uint8                                        bUseBP_ShouldPreventBasedCharactersCameraInterpolation : 1; // Mask: 0x2, PropSize: 0x10x2A22(0x1)(None)
	uint8                                        bRidingIsSeperateUnstasisCaster : 1;               // Mask: 0x4, PropSize: 0x10x2A22(0x1)(None)
	uint8                                        bIsOceanManagerDino : 1;                           // Mask: 0x8, PropSize: 0x10x2A22(0x1)(None)
	uint8                                        bIsSaveProfilingDino : 1;                          // Mask: 0x10, PropSize: 0x10x2A22(0x1)(None)
	uint8                                        BitPad_285 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31C2[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WanderRadiusMultiplier;                            // 0x2A24(0x4)(None)
	uint8                                        DisableCameraShakes : 1;                           // Mask: 0x1, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bUseBP_OverrideCarriedCharacterTransform : 1;      // Mask: 0x2, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bUseBP_OnBasedPawnNotifies : 1;                    // Mask: 0x4, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bUsesWaterWalking : 1;                             // Mask: 0x8, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bIsMek : 1;                                        // Mask: 0x10, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bIsEnforcer : 1;                                   // Mask: 0x20, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bIsExtinctionTitan : 1;                            // Mask: 0x40, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bHasInvisiableSaddle : 1;                          // Mask: 0x80, PropSize: 0x10x2A28(0x1)(None)
	uint8                                        bUseWildDinoMapMultipliers : 1;                    // Mask: 0x1, PropSize: 0x10x2A29(0x1)(None)
	uint8                                        bIgnoreFlierRidingRestrictions : 1;                // Mask: 0x2, PropSize: 0x10x2A29(0x1)(None)
	uint8                                        bRotatingUpdatesDinoIK : 1;                        // Mask: 0x4, PropSize: 0x10x2A29(0x1)(None)
	uint8                                        bUseBP_OverrideRiderCameraCollisionSweep : 1;      // Mask: 0x8, PropSize: 0x10x2A29(0x1)(None)
	uint8                                        bDrawHealthBar : 1;                                // Mask: 0x10, PropSize: 0x10x2A29(0x1)(None)
	uint8                                        BitPad_286 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31C3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HealthBarMaxDrawDistance;                          // 0x2A2C(0x4)(None)
	uint8                                        bUseShoulderMountedLaunch : 1;                     // Mask: 0x1, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        bUsePreciseLaunching : 1;                          // Mask: 0x2, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        BitPad_287 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowInvalidTameVersion : 1;                      // Mask: 0x10, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        bForceAllowPvECarry : 1;                           // Mask: 0x20, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        bUnderwaterMating : 1;                             // Mask: 0x40, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        bBabyPreventExitingWater : 1;                      // Mask: 0x80, PropSize: 0x10x2A30(0x1)(None)
	uint8                                        bUseBPCheckSeven : 1;                              // Mask: 0x1, PropSize: 0x10x2A31(0x1)(None)
	uint8                                        bPreventExportDino : 1;                            // Mask: 0x2, PropSize: 0x10x2A31(0x1)(None)
	uint8                                        bPreventPassengerFPV : 1;                          // Mask: 0x4, PropSize: 0x10x2A31(0x1)(None)
	uint8                                        BitPad_288 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31CA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AIDinoForceActiveUntasisingRange;                  // 0x2A34(0x4)(None)
	float                                        WildRunningRotationRateModifier;                   // 0x2A38(0x4)(None)
	float                                        TamedRunningRotationRateModifier;                  // 0x2A3C(0x4)(None)
	float                                        TamedSwimmingRotationRateModifier;                 // 0x2A40(0x4)(None)
	float                                        WildSwimmingRotationRateModifier;                  // 0x2A44(0x4)(None)
	TWeakObjectPtr<class ANPCZoneVolume>         HardLimitWildDinoToVolume;                         // 0x2A48(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AVolume>                WildLimitTargetVolume;                             // 0x2A50(0x8)(ZeroConstructor)
	float                                        RiderFlyingRotationRateModifier;                   // 0x2A58(0x4)(None)
	float                                        NoRiderFlyingRotationRateModifier;                 // 0x2A5C(0x4)(None)
	float                                        AICombatRotationRateModifier;                      // 0x2A60(0x4)(None)
	float                                        WalkingRotationRateModifier;                       // 0x2A64(0x4)(None)
	enum class EFilterInterpolationType          MountedBlendFilterSmoothType;                      // 0x2A68(0x1)(None)
	enum class EFilterInterpolationType          UnMountedBlendFilterSmoothType;                    // 0x2A69(0x1)(None)
	uint8                                        Pad_31CB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SetAttackTargetTraceWidth;                         // 0x2A70(0x4)(None)
	uint8                                        Pad_31CD[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          PlayerMountedCarryAnimation;                       // 0x2A90(0x8)(ZeroConstructor)
	uint8                                        bUseBPOnMountStateChanged : 1;                     // Mask: 0x1, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bHandleUseButtonPressBP : 1;                       // Mask: 0x2, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bGlideWhenFalling : 1;                             // Mask: 0x4, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bGlideWhenMounted : 1;                             // Mask: 0x8, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bForceAllowBackwardsMovement : 1;                  // Mask: 0x10, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bPreventBackwardsWalking : 1;                      // Mask: 0x20, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bSupplyPlayerMountedCarryAnimation : 1;            // Mask: 0x40, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bForceAllowMountedCarryRunning : 1;                // Mask: 0x80, PropSize: 0x10x2A98(0x1)(None)
	uint8                                        bCanLatch : 1;                                     // Mask: 0x1, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bIsLatched : 1;                                    // Mask: 0x2, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bIsLatchedDownward : 1;                            // Mask: 0x4, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bIsLatching : 1;                                   // Mask: 0x8, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bRotateToFaceLatchingObject : 1;                   // Mask: 0x10, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bLimitRiderYawOnLatched : 1;                       // Mask: 0x20, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bCanRideLatched : 1;                               // Mask: 0x40, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bAllowMountedWeaponry : 1;                         // Mask: 0x80, PropSize: 0x10x2A99(0x1)(None)
	uint8                                        bKeepAffinityOnDamageRecievedWakingTame : 1;       // Mask: 0x1, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bUseBPFedWakingTameEvent : 1;                      // Mask: 0x2, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bForceRiderDrawCrosshair : 1;                      // Mask: 0x4, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bForceDrawHUD : 1;                                 // Mask: 0x8, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bForceDrawHUDWithoutRecentlyRendered : 1;          // Mask: 0x10, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bHideFloatingName : 1;                             // Mask: 0x20, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bCanTargetVehicles : 1;                            // Mask: 0x40, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bRidingRequiresTamed : 1;                          // Mask: 0x80, PropSize: 0x10x2A9A(0x1)(None)
	uint8                                        bSuppressDeathNotification : 1;                    // Mask: 0x1, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseCustomHealthBarColor : 1;                      // Mask: 0x2, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseOnUpdateMountedDinoMeshHiding : 1;             // Mask: 0x4, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseBPInterceptTurnInputEvents : 1;                // Mask: 0x8, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseBPInterceptMoveInputEvents : 1;                // Mask: 0x10, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseBPInterceptMoveInputEventsEvenIfZero : 1;      // Mask: 0x20, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseBPAdjustAttackIndex : 1;                       // Mask: 0x40, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bCheckBPAllowCarryCharacter : 1;                   // Mask: 0x80, PropSize: 0x10x2A9B(0x1)(None)
	uint8                                        bUseBPOnEndCharging : 1;                           // Mask: 0x1, PropSize: 0x10x2A9C(0x1)(None)
	uint8                                        bUseBPNotifyMateBoostChanged : 1;                  // Mask: 0x2, PropSize: 0x10x2A9C(0x1)(None)
	uint8                                        bUseBPCarriedDinoBabyRescaled : 1;                 // Mask: 0x4, PropSize: 0x10x2A9C(0x1)(None)
	uint8                                        BitPad_289 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31D0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HealthBarOffsetY;                                  // 0x2AA0(0x4)(None)
	uint8                                        Pad_31D1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AMissionType*                          OwnerMission;                                      // 0x2AA8(0x8)(ZeroConstructor)
	uint8                                        bForceAllowBackwardsMovementWithNoRider : 1;       // Mask: 0x1, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bIsCorrupted : 1;                                  // Mask: 0x2, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bIsHordeDino : 1;                                  // Mask: 0x4, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bBPOverrideHealthBarOffset : 1;                    // Mask: 0x8, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bDropWildEggsWithoutMateBoost : 1;                 // Mask: 0x10, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bIsTemporaryMissionDino : 1;                       // Mask: 0x20, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bForcePreventInventoryAccess : 1;                  // Mask: 0x40, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bAllowWildRunningWithoutTarget : 1;                // Mask: 0x80, PropSize: 0x10x2AB0(0x1)(None)
	uint8                                        bIsBed : 1;                                        // Mask: 0x1, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bUseBPGetTargetingDesirability : 1;                // Mask: 0x2, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bAlwaysAllowStrafing : 1;                          // Mask: 0x4, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bForceAllowTamedTickEggLay : 1;                    // Mask: 0x8, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bHasBuffPreventingUploading : 1;                   // Mask: 0x10, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bDisableHarvestHealthGain : 1;                     // Mask: 0x20, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        bRemainLatchedOnClearRider : 1;                    // Mask: 0x40, PropSize: 0x10x2AB1(0x1)(None)
	uint8                                        BitPad_28A : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31D2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LimitRiderYawOnLatchedRange;                       // 0x2AB4(0x4)(None)
	float                                        LatchingDistanceLimit;                             // 0x2AB8(0x4)(None)
	float                                        LatchingInitialYaw;                                // 0x2ABC(0x4)(None)
	float                                        LatchingInitialPitch;                              // 0x2AC0(0x4)(None)
	float                                        LatchingInterpolatedPitch;                         // 0x2AC4(0x4)(None)
	float                                        LatchedFirstPersonViewAngle;                       // 0x2AC8(0x4)(None)
	float                                        LatchingCameraInterpolationSpeed;                  // 0x2ACC(0x4)(None)
	float                                        TargetLatchingInitialYaw;                          // 0x2AD0(0x4)(None)
	float                                        CurrentStrafeMagnitude;                            // 0x2AD4(0x4)(None)
	float                                        GainStaminaWhenLatchedRate;                        // 0x2AD8(0x4)(None)
	float                                        AIAggroNotifyNeighborsClassesRangeScale;           // 0x2ADC(0x4)(None)
	int32                                        LastFrameMoveRight;                                // 0x2AE0(0x4)(None)
	int32                                        LastFrameMoveLeft;                                 // 0x2AE4(0x4)(None)
	struct FRotator                              LastRiderMountedWeaponRotation;                    // 0x2AE8(0x18)(None)
	uint8                                        Pad_31D3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DeathGivesDossierIndex;                            // 0x2B08(0x4)(None)
	float                                        DeathGivesDossierDelay;                            // 0x2B0C(0x4)(None)
	bool                                         TameGivesDossier;                                  // 0x2B10(0x1)(None)
	uint8                                        Pad_31D4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator_NetQuantizeSmartPitch        LastMovementDesiredRotation_MountedWeaponry;       // 0x2B18(0x18)(None)
	class FName                                  SaddleRiderMovementTraceThruSocketName;            // 0x2B30(0x8)(None)
	float                                        SwimmingRunSpeedModifier;                          // 0x2B38(0x4)(None)
	float                                        RidingSwimmingRunSpeedModifier;                    // 0x2B3C(0x4)(None)
	double                                       DinoDownloadedAtTime;                              // 0x2B40(0x8)(None)
	class FString                                UploadedFromServerName;                            // 0x2B48(0x10)(None)
	class FString                                LatestUploadedFromServerName;                      // 0x2B58(0x10)(None)
	class FString                                PreviousUploadedFromServerName;                    // 0x2B68(0x10)(None)
	class FString                                TamedOnServerName;                                 // 0x2B78(0x10)(None)
	TArray<struct FDinoAncestorsEntry>           DinoAncestors;                                     // 0x2B88(0x10)(None)
	TArray<struct FDinoAncestorsEntry>           DinoAncestorsMale;                                 // 0x2B98(0x10)(None)
	TArray<struct FDinoAncestorsEntry>           NextBabyDinoAncestors;                             // 0x2BA8(0x10)(None)
	TArray<struct FDinoAncestorsEntry>           NextBabyDinoAncestorsMale;                         // 0x2BB8(0x10)(None)
	int32                                        MaxAllowedRandomMutations;                         // 0x2BC8(0x4)(None)
	int32                                        RandomMutationRolls;                               // 0x2BCC(0x4)(None)
	float                                        RandomMutationChance;                              // 0x2BD0(0x4)(None)
	float                                        RandomMutationGivePoints;                          // 0x2BD4(0x4)(None)
	int32                                        RandomMutationsMale;                               // 0x2BD8(0x4)(None)
	int32                                        RandomMutationsFemale;                             // 0x2BDC(0x4)(None)
	int32                                        GestationEggRandomMutationsFemale;                 // 0x2BE0(0x4)(None)
	int32                                        GestationEggRandomMutationsMale;                   // 0x2BE4(0x4)(None)
	class FName                                  WakingTameDistanceSocketName;                      // 0x2BE8(0x8)(None)
	int32                                        WakingTameConsumeEntireStackMaxQuantity;           // 0x2BF0(0x4)(None)
	float                                        AttackPlayerDesirabilityMultiplier;                // 0x2BF4(0x4)(None)
	uint8                                        Pad_31D6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FlyerAttachedExplosiveSpeedMultiplier;             // 0x2C08(0x4)(None)
	uint8                                        Pad_31D7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoExtraDefaultItemList>     DinoExtraDefaultInventoryItems;                    // 0x2C10(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DeathGiveEngramClasses;                            // 0x2C20(0x10)(ZeroConstructor)
	float                                        SinglePlayerOutgoingDamageModifier;                // 0x2C30(0x4)(None)
	float                                        SinglePlayerIncomingDamageModifier;                // 0x2C34(0x4)(None)
	uint8                                        Pad_31D8[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          DinoLevelUpAnimationOverride;                      // 0x2C60(0x8)(ZeroConstructor)
	TArray<class UClass*>                        DamageVictimClassesIgnoreBlockingGeomtryTrace;     // 0x2C68(0x10)(ZeroConstructor)
	uint8                                        Pad_31D9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloneBaseElementCost;                              // 0x2C88(0x4)(None)
	float                                        CloneElementCostPerLevel;                          // 0x2C8C(0x4)(None)
	int32                                        LastValidTameVersion;                              // 0x2C90(0x4)(None)
	int32                                        SavedLastValidTameVersion;                         // 0x2C94(0x4)(None)
	class FName                                  NonDedicatedFreezeDinoPhysicsIfLayerUnloaded;      // 0x2C98(0x8)(None)
	struct FVector                               UnboardLocationTraceOffset;                        // 0x2CA0(0x18)(None)
	class FName                                  AttackLineOfSightMeshSocketName;                   // 0x2CB8(0x8)(None)
	float                                        AttackForceWalkDistanceMultiplier;                 // 0x2CC0(0x4)(None)
	float                                        AttackForceWalkRotationRateMultiplier;             // 0x2CC4(0x4)(None)
	int32                                        OverrideDinoTameSoundIndex;                        // 0x2CC8(0x4)(None)
	uint8                                        Pad_31DA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            SwimSound;                                         // 0x2CD0(0x8)(ZeroConstructor)
	float                                        SwimSoundIntervalPerHundredSpeed;                  // 0x2CD8(0x4)(None)
	uint8                                        Pad_31DB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                TamedAIControllerOverride;                         // 0x2CE0(0x8)(ZeroConstructor)
	int32                                        PersonalTamedDinoCost;                             // 0x2CE8(0x4)(None)
	uint8                                        Pad_31DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       UploadEarliestValidTime;                           // 0x2CF0(0x8)(None)
	float                                        StasisAutoDestroyInterval;                         // 0x2CF8(0x4)(None)
	float                                        CarryCameraYawOffset;                              // 0x2CFC(0x4)(None)
	float                                        ExtraDamageMultiplier;                             // 0x2D00(0x4)(None)
	float                                        ExtraTamedBaseHealthMultiplier;                    // 0x2D04(0x4)(None)
	float                                        AttackRangeOffset;                                 // 0x2D08(0x4)(None)
	float                                        DinoExtraIncreasePlayerCollisionActivationDistanceSquared; // 0x2D0C(0x4)(None)
	uint8                                        Pad_31DD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideApproachRadius;                            // 0x2D14(0x4)(None)
	float                                        TamedOverrideStasisComponentRadius;                // 0x2D18(0x4)(None)
	uint8                                        Pad_31DE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           UniqueDino_MapMarkerMesh;                          // 0x2D20(0x8)(ZeroConstructor)
	struct FColor                                UniqueDino_MapMarkerColor;                         // 0x2D28(0x4)(None)
	float                                        OverrideDinoMaxExperiencePoints;                   // 0x2D2C(0x4)(None)
	int32                                        MaxDinoTameLevels;                                 // 0x2D30(0x4)(None)
	int32                                        DestroyTamesOverLevelClampOffset;                  // 0x2D34(0x4)(None)
	float                                        NursingTroughFoodEffectivenessMultiplier;          // 0x2D38(0x4)(None)
	uint8                                        Pad_31DF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ForceAllowFoodAsConsumableList;                    // 0x2D40(0x10)(ZeroConstructor)
	int32                                        CustomReplicatedData;                              // 0x2D50(0x4)(None)
	uint8                                        Pad_31E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnNotifySetRider;                                  // 0x2D58(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnNotifyClearRider;                                // 0x2D68(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnSetMountedDino;                                  // 0x2D78(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnClearMountedDino;                                // 0x2D88(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnNotifyAddPassenger;                              // 0x2D98(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnNotifyClearPassenger;                            // 0x2DA8(0x10)(ZeroConstructor)
	double                                       NextAllowedBedUseTime;                             // 0x2DB8(0x8)(None)
	float                                        UseBedCooldownTime;                                // 0x2DC0(0x4)(None)
	uint8                                        bUseBPGetOtherActorToIgnore : 1;                   // Mask: 0x1, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        BitPad_28B : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        MutagenApplied : 1;                                // Mask: 0x4, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bAllowWhistleThroughRemoteDino : 1;                // Mask: 0x8, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bForceValidUnstasisCaster : 1;                     // Mask: 0x10, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bControlledDinoPreventsPlayerInventory : 1;        // Mask: 0x20, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bDinoFPVDisableMotionBlur : 1;                     // Mask: 0x40, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bPaintingUseSaddle : 1;                            // Mask: 0x80, PropSize: 0x10x2DC4(0x1)(None)
	uint8                                        bPaintingSupportSkins : 1;                         // Mask: 0x1, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        bDinoDontOverrideControllerPitch : 1;              // Mask: 0x2, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        bUseBPOverridePassengerAdditiveAnim : 1;           // Mask: 0x4, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        bReplicatePassengerTPVAim : 1;                     // Mask: 0x8, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        bForceDisableClientGravitySim : 1;                 // Mask: 0x10, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        bUseBPGetTargetingDesirabilityForTurrets : 1;      // Mask: 0x20, PropSize: 0x10x2DC5(0x1)(None)
	uint8                                        BitPad_28C : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31E1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CarriedAsBabyPassengerSizeLimitOverride;           // 0x2DC8(0x4)(None)
	float                                        MutagenBaseCost;                                   // 0x2DCC(0x4)(None)
	int32                                        PaintTextureResolution;                            // 0x2DD0(0x4)(None)
	struct FLinearColor                          PaintingAllowedUVRanges;                           // 0x2DD4(0x10)(None)
	uint8                                        Pad_31E2[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnFlyerStartLanding;                               // 0x2DF0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnFlyerLanded;                                     // 0x2E00(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnFlyerLandingInterrupted;                         // 0x2E10(0x10)(ZeroConstructor)
	bool                                         bOnlyDrawFloatingHUDAsLocalPlayerController;       // 0x2E20(0x1)(None)
	bool                                         bHasPlayerController;                              // 0x2E21(0x1)(None)
	uint8                                        Pad_31E3[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  CopyDinoSettingsRangeMesh;                         // 0x2E28(0x8)(ZeroConstructor)
	uint8                                        GestationGenderOverride;                           // 0x2E30(0x1)(None)
	uint8                                        Pad_31E4[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPOverrideIsSubmergedForWaterTargeting : 1;    // Mask: 0x1, PropSize: 0x10x2E49(0x1)(None)
	uint8                                        BitPad_28D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31E5[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalInventoryComponent*             SecondaryInventoryComponent;                       // 0x2E50(0x8)(ZeroConstructor)
	uint8                                        bAllowFlyerDinoSubmerging : 1;                     // Mask: 0x1, PropSize: 0x10x2E58(0x1)(None)
	uint8                                        bPreventZeroingFlyerPitchWhenSwimming : 1;         // Mask: 0x2, PropSize: 0x10x2E58(0x1)(None)
	uint8                                        bRiderDisableAimOffset : 1;                        // Mask: 0x4, PropSize: 0x10x2E58(0x1)(None)
	uint8                                        bDontForceUpdateRateOptimizations : 1;             // Mask: 0x8, PropSize: 0x10x2E58(0x1)(None)
	uint8                                        BitPad_28E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bDisabledFromAscension;                            // 0x2E59(0x1)(None)
	uint8                                        Pad_31E6[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RiddenStasisRangeMultiplier;                       // 0x2E5C(0x4)(None)
	class AActor*                                WildFollowingParentRef;                            // 0x2E60(0x8)(ZeroConstructor)
	TArray<class AActor*>                        WildFollowerRefs;                                  // 0x2E68(0x10)(ZeroConstructor)
	TArray<struct FWildFollowerSpawnEntry>       OverwrittenWildFollowingDinoInfos;                 // 0x2E78(0x10)(ZeroConstructor)
	float                                        ForcedWildBabyAge;                                 // 0x2E88(0x4)(None)
	uint8                                        bIsAWildFollowerKnownServerside : 1;               // Mask: 0x1, PropSize: 0x10x2E8C(0x1)(None)
	uint8                                        AllowWildBabyTaming : 1;                           // Mask: 0x2, PropSize: 0x10x2E8C(0x1)(None)
	uint8                                        bIsParentWildDino : 1;                             // Mask: 0x4, PropSize: 0x10x2E8C(0x1)(None)
	uint8                                        BitPad_28F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31E7[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIgnoreNPCCountVolumes : 1;                        // Mask: 0x1, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bDisablePathfinding : 1;                           // Mask: 0x2, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bDontOverrideToNavMeshStepHeight : 1;              // Mask: 0x4, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bUseDinoLimbWallAvoidance : 1;                     // Mask: 0x8, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bAlwaysUpdateDinoLimbWallAvoidance : 1;            // Mask: 0x10, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bUpdateDinoLimbWallAvoidance : 1;                  // Mask: 0x20, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        bCheatPossessed : 1;                               // Mask: 0x40, PropSize: 0x10x2E98(0x1)(None)
	uint8                                        BitPad_290 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31E8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DinoLimbWallAvoidanceLastLocation;                 // 0x2EA0(0x18)(None)
	struct FRotator                              DinoLimbWallAvoidanceLastRotation;                 // 0x2EB8(0x18)(None)
	struct FRotator                              DinoLimbWallAvoidanceLastAimRotation;              // 0x2ED0(0x18)(None)
	class UPrimalNavigationInvokerComponent*     NavigationInvokerComponent;                        // 0x2EE8(0x8)(ZeroConstructor)
	float                                        DieIfLeftWaterSpawnCapsuleDepthMulti;              // 0x2EF0(0x4)(None)
	uint8                                        bRestrictNonAlliedCarriedPlayerYaw : 1;            // Mask: 0x1, PropSize: 0x10x2EF4(0x1)(None)
	uint8                                        BitPad_291 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_31E9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  RestrictNonAlliedCarriedPlayerYawSocket;           // 0x2EF8(0x8)(None)
	class UTexture2D*                            RideIcon;                                          // 0x2F00(0x8)(ZeroConstructor)
	class UTexture2D*                            DriveIcon;                                         // 0x2F08(0x8)(ZeroConstructor)
	class UTexture2D*                            EquipSaddleToRideIcon;                             // 0x2F10(0x8)(ZeroConstructor)
	class UTexture2D*                            PassangerSeatsGenericIcon;                         // 0x2F18(0x8)(ZeroConstructor)
	class UTexture2D*                            EnablePublicSeatingIcon;                           // 0x2F20(0x8)(ZeroConstructor)
	class UTexture2D*                            DisablePublicSeatingIcon;                          // 0x2F28(0x8)(ZeroConstructor)
	class UTexture2D*                            FlyingMountsDisabledIcon;                          // 0x2F30(0x8)(ZeroConstructor)
	class UTexture2D*                            RequiresEngramToMountIcon;                         // 0x2F38(0x8)(ZeroConstructor)
	class UTexture2D*                            OptionsIcon;                                       // 0x2F40(0x8)(ZeroConstructor)
	class UTexture2D*                            BehaviourIcon;                                     // 0x2F48(0x8)(ZeroConstructor)
	class UTexture2D*                            PickupIcon;                                        // 0x2F50(0x8)(ZeroConstructor)
	class UTexture2D*                            NeuterIcon;                                        // 0x2F58(0x8)(ZeroConstructor)
	class UTexture2D*                            ExportIcon;                                        // 0x2F60(0x8)(ZeroConstructor)
	class UTexture2D*                            AllowSpecialAttacksIcon;                           // 0x2F68(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableSpecialAttacksIcon;                         // 0x2F70(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableTurretModeIcon;                              // 0x2F78(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableTurretModeIcon;                             // 0x2F80(0x8)(ZeroConstructor)
	class UTexture2D*                            HideBoneIcon;                                      // 0x2F88(0x8)(ZeroConstructor)
	class UTexture2D*                            UnhideBoneIcon;                                    // 0x2F90(0x8)(ZeroConstructor)
	class UTexture2D*                            RepairIcon;                                        // 0x2F98(0x8)(ZeroConstructor)
	class UTexture2D*                            CantRepairIcon;                                    // 0x2FA0(0x8)(ZeroConstructor)
	class UTexture2D*                            RenameIcon;                                        // 0x2FA8(0x8)(ZeroConstructor)
	class UTexture2D*                            DemolishIcon;                                      // 0x2FB0(0x8)(ZeroConstructor)
	class UTexture2D*                            ImprintOnIcon;                                     // 0x2FB8(0x8)(ZeroConstructor)
	class UTexture2D*                            WantsToCuddleIcon;                                 // 0x2FC0(0x8)(ZeroConstructor)
	class UTexture2D*                            WantsToGoOnAWalkIcon;                              // 0x2FC8(0x8)(ZeroConstructor)
	class UTexture2D*                            WantsCareIcon;                                     // 0x2FD0(0x8)(ZeroConstructor)
	class UTexture2D*                            FeedToComfortIcon;                                 // 0x2FD8(0x8)(ZeroConstructor)
	class UTexture2D*                            FeedToTameIcon;                                    // 0x2FE0(0x8)(ZeroConstructor)
	class UTexture2D*                            PutItemInLastSlotToTameIcon;                       // 0x2FE8(0x8)(ZeroConstructor)
	class UTexture2D*                            PutTamingFoodInLastSlotToTameIcon;                 // 0x2FF0(0x8)(ZeroConstructor)
	class UTexture2D*                            DoesNotWantToBeTamedIcon;                          // 0x2FF8(0x8)(ZeroConstructor)
	class UTexture2D*                            NeedLevelToFeedIcon;                               // 0x3000(0x8)(ZeroConstructor)
	class UTexture2D*                            WaitUntilHungryIcon;                               // 0x3008(0x8)(ZeroConstructor)
	class UTexture2D*                            ClaimIcon;                                         // 0x3010(0x8)(ZeroConstructor)
	class UTexture2D*                            UnclaimIcon;                                       // 0x3018(0x8)(ZeroConstructor)
	class UTexture2D*                            HarvestSettingIcon;                                // 0x3020(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableResourceHarvestingIcon;                     // 0x3028(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableResourceHarvestingIcon;                      // 0x3030(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableVictimItemCollectionIcon;                   // 0x3038(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableVictimItemCollectionIcon;                    // 0x3040(0x8)(ZeroConstructor)
	class UTexture2D*                            OrderGroupSettingsIcon;                            // 0x3048(0x8)(ZeroConstructor)
	class UTexture2D*                            AddTameToGroupIcon;                                // 0x3050(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    AddTameToGroupSelectionIcons;                      // 0x3058(0x10)(ZeroConstructor)
	class UTexture2D*                            RemoveTameFromGroupsIcon;                          // 0x3068(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    RemoveTameFromGroupSelectionIcons;                 // 0x3070(0x10)(ZeroConstructor)
	class UTexture2D*                            AddClassToGroupIcon;                               // 0x3080(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    AddClassToGroupSelectionIcons;                     // 0x3088(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    RemoveClassFromGroupSelectionIcons;                // 0x3098(0x10)(ZeroConstructor)
	class UTexture2D*                            StanceIcon;                                        // 0x30A8(0x8)(ZeroConstructor)
	class UTexture2D*                            StancePassiveFleeIcon;                             // 0x30B0(0x8)(ZeroConstructor)
	class UTexture2D*                            StancePassiveIcon;                                 // 0x30B8(0x8)(ZeroConstructor)
	class UTexture2D*                            StanceNeutralIcon;                                 // 0x30C0(0x8)(ZeroConstructor)
	class UTexture2D*                            StanceAggressiveIcon;                              // 0x30C8(0x8)(ZeroConstructor)
	class UTexture2D*                            StanceAttackTargetIcon;                            // 0x30D0(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableAllyLookingIcon;                            // 0x30D8(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableAllyLookingIcon;                             // 0x30E0(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableIgnoreGroupWhistlesIcon;                     // 0x30E8(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableIgnoreGroupWhistlesIcon;                    // 0x30F0(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableMatingIcon;                                  // 0x30F8(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableMatingIcon;                                 // 0x3100(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableWanderingIcon;                               // 0x3108(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableWanderingIcon;                              // 0x3110(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableFollowingIcon;                               // 0x3118(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableFollowingIcon;                              // 0x3120(0x8)(ZeroConstructor)
	class UTexture2D*                            ChangeFollowDistanceIcon;                          // 0x3128(0x8)(ZeroConstructor)
	class UTexture2D*                            FollowDistanceLowestIcon;                          // 0x3130(0x8)(ZeroConstructor)
	class UTexture2D*                            FollowDistanceLowIcon;                             // 0x3138(0x8)(ZeroConstructor)
	class UTexture2D*                            FollowDistanceMediumIcon;                          // 0x3140(0x8)(ZeroConstructor)
	class UTexture2D*                            FollowDistanceHighIcon;                            // 0x3148(0x8)(ZeroConstructor)
	class UTexture2D*                            FollowDistanceHighestIcon;                         // 0x3150(0x8)(ZeroConstructor)
	class UTexture2D*                            ShowCopySettingsVisualIcon;                        // 0x3158(0x8)(ZeroConstructor)
	class UTexture2D*                            HideCopySettingsVisualIcon;                        // 0x3160(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsIcon;                                  // 0x3168(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsInRangeIcon;                           // 0x3170(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsInRangeWithPinCodeIcon;                // 0x3178(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingOptionsIcon;                              // 0x3180(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingRangeLowestIcon;                          // 0x3188(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingRangeLowIcon;                             // 0x3190(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingRangeMediumIcon;                          // 0x3198(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingRangeHighIcon;                            // 0x31A0(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingRangeHighestIcon;                         // 0x31A8(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableOnlyTargetConsciousIcon;                     // 0x31B0(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableOnlyTargetConsciousIcon;                    // 0x31B8(0x8)(ZeroConstructor)
	class UTexture2D*                            TribeRankSettingsIcon;                             // 0x31C0(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    TribeOrderRankSelectionIcons;                      // 0x31C8(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    TribeRidingRankSelectionIcons;                     // 0x31D8(0x10)(ZeroConstructor)
	float                                        PathfollowingMaxSpeedModifer;                      // 0x31E8(0x4)(None)
	uint8                                        Pad_31EA[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DinoArmorDurabilityScalingMultiplier;              // 0x3210(0x4)(None)
	uint8                                        Pad_31EB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalDinoCharacter* GetDefaultObj();

	void UpdateTribeGroupRanks(uint8 NewTribeGroupPetOrderingRank, uint8 NewTribeGroupPetRidingRank);
	void UpdateNextAllowedMatingTime(double FromTime);
	void UpdateMateBoost(bool bForce);
	void UpdateImprintingQuality(float NewImprintingQuality);
	void UpdateImprintingDetailsForController(class AShooterPlayerController* ForPC);
	void UpdateImprintingDetails(const class FString& NewImprinterName, const class FString& NewImprinterPlayerUniqueNetId);
	void UpdateHasBuffPreventingUploading(bool ReturnValue);
	void UpdateBabyCuddling(double NewBabyNextCuddleTime, uint8 NewBabyCuddleType, class UClass* NewBabyCuddleFood);
	void UpdateAttackTargets();
	void UntameDino(float TamingAffinityLimit);
	void UnclaimDino(bool bDestroyAI);
	void TamedProcessOrder(class APrimalCharacter* FromCharacter, enum class EDinoTamedOrder OrderType, bool bForce, class AActor* EnemyTarget, bool ReturnValue);
	void TameDino(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit, int32 OverrideTamingTeamID, bool bPreventNameDialog, bool bSkipAddingTamedLevels, bool bSuppressNotifications);
	void StopActiveState(bool bShouldResetAttackIndex);
	void StartSurfaceCameraForPassengers(float Yaw, float Pitch, float Roll);
	void StartSurfaceCameraForPassenger(class AShooterCharacter* Passenger, float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
	void StartLanding(const struct FVector& OverrideLandingLocation);
	void SpawnNewAIController(class UClass* NewAIController, class UBehaviorTree* MissionBehaviorTreeOverride);
	void SpawnFromDinoDataEx(const struct FARKDinoData& InDinoData, class UWorld* InWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, bool DupedDino, int32 ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController, class APrimalDinoCharacter* ReturnValue);
	void SpawnFromDinoData(const struct FARKDinoData& InDinoData, class UWorld* InWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, int32 ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController, class APrimalDinoCharacter* ReturnValue);
	void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
	void SpawnDino(class UWorld* World, class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, float LevelMultiplier, int32 ExtraLevelOffset, bool AddLevelOffsetBeforeMultiplier, bool bOverrideBaseNPCLevel, int32 BaseLevelOverrideValue, bool bNPCDontWander, float NPCAIRangeMultiplier, int32 NPCAbsoluteBaseLevel, bool bSpawnWithoutCapsuleOffset, bool ShouldGender, bool MakeFemale, class APrimalDinoCharacter* ReturnValue);
	void ShouldForceFlee(bool ReturnValue);
	void ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar, bool ReturnValue);
	void ShouldDealDamage(class AActor* TestActor, bool ReturnValue);
	void ShouldAttackOfPlayedAnimationStopMovement(bool ReturnValue);
	void SetupAsWildFollowerOfOtherDino(class APrimalDinoCharacter* ParentDino, bool ReturnValue);
	void SetupAsWildBabyOfSingleParent(class APrimalDinoCharacter* ParentDino, float DesiredAgeMin, float DesiredAgeMax, bool ReturnValue);
	void SetTurretModeMovementRestrictions(bool Enabled, bool bAlsoSetTurretMode);
	void SetTurretMode(bool Enabled, bool ReturnValue);
	void SetState(class UPrimalAIState* State);
	void SetStasisComponentRadius(float StasisOverrideRadius);
	void SetRider(class AShooterCharacter* ARider);
	void SetPreventSaving(bool FPreventSaving);
	void SetNextAllowedMatingTime(double NextAllowedMatingTime);
	void SetMovementAccelerationVector(const struct FVector& FVector);
	void SetLeftDynamicActorBaseTime(double NewLeftDynamicActorBaseTime);
	void SetLastMovementDesiredRotation(const struct FRotator& InRotation);
	void SetLastAttackTimeForAttack(int32 AttackIndex, double NewTime);
	void SetImprintPlayer(class AShooterCharacter* ForChar);
	void SetGestationData(const struct FUnreplicatedEggData& GestationData);
	void SetForceDisableClientGravitySim(bool bForceDisable);
	void SetFlight(bool bFly, bool bCancelForceLand, bool SkipAnimsPreventInputCheck);
	void SetFCustomTrackedDinoInfoMembersByDinoRef(bool Isfavorited, bool bIsTrackedWaypoint, bool bIsValidForCurrentFilter, int32 ByPlayerTargetingTeam, const struct FCustomTrackedActorInfo& ReturnValue);
	void SetCurrentAttackIndex(uint8 Index);
	void SetColorizationData(const TArray<uint8>& ColorData);
	void SetCharacterStatusTameable(bool bSetTameable, bool bCreateInventory, bool bInventoryForWakingTame);
	void SetBabyAge(float TheAge);
	void SetAnimWeightsForAttackAtIndex(int32 AttackIndex, const TArray<float>& NewWeights);
	void SetAllowedPaintingColorRegion(int32 RegionIndex, bool bIsAllowed);
	void ServerUpdateAttackTargets(class AActor* AttackTarget, const struct FVector& AttackLocation);
	void ServerToggleCharging();
	void ServerToClientsPlayAttackAnimation(int8 AttackinfoIndex, int8 AnimationIndex, float InPlayRate, class FName StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, class AActor* MyTarget);
	void ServerTamedTick();
	void ServerSleepingTick();
	void ServerSetRiderMountedWeaponRotation(const struct FRotator& InVal);
	void ServerRequestWaterSurfaceJump();
	void ServerRequestToggleFlight();
	void ServerRequestBraking(bool bWantsToBrake);
	void ServerRequestAttack(int32 AttackIndex);
	void ServerInterruptLanding();
	void ServerFinishedLanding();
	void ServerClearRider(int32 OverrideUnboardDirection);
	void RidingTick(float DeltaSeconds);
	void ResetBrainComponent();
	void RequestTerminateEmbryo(class APlayerController* ForPC);
	void RequestDisplayEmbryoData(class APlayerController* ForPC, bool bEnable);
	void RemovePassenger(class APrimalCharacter* ACharacter, bool bFromCharacter, bool bFromPlayerController);
	void RemoveFromMeleeSwingHurtList(class AActor* AnActor);
	void RemoveDinoReferenceFromLatchingStructure();
	void RefreshColorization(bool bForceRefresh);
	void RefreshBabyScaling();
	void ReassertColorization();
	void ProcessOrderMoveTo(const struct FVector& MoveToLoc, bool bClearFollowTargets);
	void ProcessOrderFollowTarget(class AActor* TheTarget, bool bClearFollowTargets);
	void ProcessOrderAttackTarget(class AActor* TheTarget, bool bClearFollowTargets);
	void PreventShowingDinoTooltip(bool ReturnValue);
	void PlayWeightedAttackAnimation();
	void PlayHardEndChargingShake();
	void PlayedAnimationHasAttack(bool ReturnValue);
	void OverrideRandomWanderLocation(const struct FVector& OriginalDestination, const struct FVector& InVec);
	void OverrideFinalWanderLocation(const struct FVector& OutVec, bool ReturnValue);
	void OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float TPVCameraSpeedInterpMultiplier, float TPVOffsetInterpSpeed);
	void OnVoiceTalkingStateChanged(bool IsTalking, bool IsMuted);
	void OnUpdateMountedDinoMeshHiding(bool bShouldBeVisible);
	void OnUncryo(class AShooterPlayerController* ForPC);
	void OnSpawnedForItem(class UPrimalItem* ForItem);
	void OnRep_Saddle();
	void OnRep_Rider();
	void OnRep_PassengerPerSeat();
	void OnRep_CarriedCharacter();
	void OnRep_bIsFlying();
	void OnRep_bIsCharging();
	void OnRep_bBonesHidden();
	void OnCryo(class AShooterPlayerController* ForPC);
	void NotifyClientsEmbryoTerminated();
	void NetUpdateDinoOwnerData(const class FString& NewOwningPlayerName, int32 NewOwningPlayerID);
	void NetUpdateDinoNameStrings(const class FString& NewTamerString, const class FString& NewTamedName);
	void MultiSetAttachedStructurePickupAllowedBeforeNetworkTime(double NewTime, class APrimalStructure* Structure);
	void MulticastUpdateAllColorSets(int32 Color0, int32 Color1, int32 Color2, int32 Color3, int32 Color4, int32 Color5);
	void Multi_OnCryo(class AShooterPlayerController* ForPC);
	void LowerDinoBP(float Val);
	void KeepFlightTimer();
	void IsWildFollowingParentValid(class APrimalDinoCharacter* FollowingParent, bool ReturnValue);
	void IsWildFollowerOtherwiseValidAndLiving(bool ReturnValue);
	void IsWakingTame(bool ReturnValue);
	void IsVoiceTalking(bool ReturnValue);
	void IsPassengerSeatAvailable(int32 PassengerSeatIndex, bool ReturnValue);
	void IsMissionDino(bool ReturnValue);
	void IsInTekShield(bool ReturnValue);
	void IsInFlyerPreventionVolume(bool ReturnValue);
	void IsImprintPlayer(class AShooterCharacter* ForChar, bool ReturnValue);
	void IsFleeing(bool ReturnValue);
	void IsCurrentlyPlayingAttackAnimation(bool ReturnValue);
	void IsCurrentAttackStopsMovement(bool ReturnValue);
	void IsAWildFollowerKnownServerside(bool ReturnValue);
	void IsAttacking(bool ReturnValue);
	void IsAllowedToTransfer(class UObject* WorldContextObject, bool ReturnValue);
	void IsAllowedToMate(bool ReturnValue);
	void InterruptLatching();
	void InterruptLanding();
	void InterceptRiderEmoteAnim(class UAnimMontage* EmoteAnim, bool ReturnValue);
	void InterceptMountedOnPlayerEmoteAnim(class UAnimMontage* EmoteAnim, bool ReturnValue);
	void ImprintOnPlayerTarget(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit);
	void HasTarget(bool ReturnValue);
	void HasSelfBuried(bool ReturnValue);
	void HasOfflineRider(bool ReturnValue);
	void HasBuffPreventingFlight(bool ReturnValue);
	void HasBuffPreventingClearRiderOnDinoImmobilized(bool ReturnValue);
	void HandleMountedDinoAction(class AShooterPlayerController* PC);
	void GiveSaddleFromString(const class FString& BlueprintPath, float Quality, float MinRandomQuality, bool bAutoEquip, class UPrimalItem* ReturnValue);
	void GiveSaddle(class UClass* SaddleType, float Quality, float MinRandomQuality, bool bAutoEquip, class UPrimalItem* ReturnValue);
	void GiveDeathDossier();
	void GetZoomMinValue(float ReturnValue);
	void GetZoomMaxValue(float ReturnValue);
	void GetWiegthedAttack(float Distance, float AttackRangeOffset, class AActor* OtherTarget, uint8 ReturnValue);
	void GetUsesColorizationRegion(int32 RegionIndex, bool ReturnValue);
	void GetUntamedTargetingTeam(int32 ReturnValue);
	void GetTamedLandTarget(class AActor* ReturnValue);
	void GetTamedFollowTarget(class AActor* ReturnValue);
	void GetStateOfPlayedAnimationAttack(class UPrimalAIState* ReturnValue);
	void GetSocketLocationTemp(class FName SocketName, const struct FVector& ReturnValue);
	void GetSocketForMeleeTraceForHitBlockers(int32 AttackIndex, class FName ReturnValue);
	void GetSeatIndexForPassenger(class APrimalCharacter* PassengerChar, int32 ReturnValue);
	void GetSaddleMeshComponents(const TArray<class UMeshComponent*>& OutMeshes);
	void GetSaddleMeshComponent(class USkeletalMeshComponent* ReturnValue);
	void GetSaddleActorComponents(const TArray<class UActorComponent*>& OutMeshes);
	void GetRootYawSpeed(float DeltaTime, float ReturnValue);
	void GetPlayerSpawnRotation(const struct FRotator& ReturnValue);
	void GetPlayerSpawnLocation(const struct FVector& ReturnValue);
	void GetPassengersSeatIndex(class APrimalCharacter* Passenger, int32 ReturnValue);
	void GetPassengersAndSeatIndexes(const TArray<class APrimalCharacter*>& Passengers, const TArray<int32>& Indexes);
	void GetPassengers(const TArray<class APrimalCharacter*>& ReturnValue);
	void GetPassengerPerSeat(int32 SeatIndex, class APrimalCharacter* ReturnValue);
	void GetNumPassengerSeats(bool bOnlyManualPassengerSeats, int32 ReturnValue);
	void GetNumAvailablePassengerSeats(bool bOnlyManualPassengerSeats, int32 ReturnValue);
	void GetLastStartedTalkingTime(double ReturnValue);
	void GetLandingLocation(const struct FVector& ReturnValue);
	void GetGestationTimeRemaining(float ReturnValue);
	void GetGestationData(const struct FUnreplicatedEggData& GestationData);
	void GetForceTickPose(bool ReturnValue);
	void GetFoodItemEffectivenessMultipliersIndex(class UPrimalItem* FoodItem, int32 ReturnValue);
	void GetFirstValidWildFollowingParentRef(class APrimalDinoCharacter* ReturnValue);
	void GetFirstAffinityFoodItemClass(class UClass* ReturnValue);
	void GetDinoVelocity(const struct FVector& ReturnValue);
	void GetDinoTameSound(class USoundBase* ReturnValue);
	void GetDinoPlatformCollisionIgnoreActors(const TArray<class AActor*>& ReturnValue);
	void GetDinoLevelUpAnimation(class UAnimMontage* ReturnValue);
	void GetDinoIDsAsStrings(const class FString& OutDinoID1, const class FString& OutDinoID2);
	void GetDinoIDs(int32 OutDinoID1, int32 OutDinoID2);
	void GetDinoEntryIcon(class UTexture* ReturnValue);
	void GetDinoDescriptiveName(bool IgnoreArticle, bool IncludeDetails, const class FString& ReturnValue);
	void GetDinoDeathTime(float ReturnValue);
	void GetDinoData(const struct FARKDinoData& OutDinoData);
	void GetDinoColor(int32 ColorRegionIndex, const struct FLinearColor& ReturnValue);
	void GetDesiredNavmeshGenerationRadiusName(class FName ReturnValue);
	void GetCurrentDinoName(class APlayerController* ForPC, const class FString& ReturnValue);
	void GetCurrentAttackInfo(int32 AttackIndex, const struct FDinoAttackInfo& AttackInfo, bool ReturnValue);
	void GetCurrentAttackIndexForInput(enum class EDinoInputAction Input, int32 ReturnValue);
	void GetCurrentAimOffsetsRotation(const struct FRotator& ReturnValue);
	void GetColorSetNamesAsArray(const TArray<class FName>& ReturnValue);
	void GetColorSetInidcesAsString(const class FString& ReturnValue);
	void GetColorizationData(const TArray<uint8>& ReturnValue);
	void GetColorForColorizationRegion(int32 Region, int32 ColorIndexOverride, const struct FLinearColor& ReturnValue);
	void GetCanMutateStat(int32 StatTypeIndex, bool ReturnValue);
	void GetBedFilterClass(class UClass* ReturnValue);
	void GetBabyScale(float ReturnValue);
	void GetBabyCuddleInterval(float ReturnValue);
	void GetBabyCuddleFood(class UClass* ReturnValue);
	void GetAllowedPaintingColorRegion(int32 RegionIndex, bool ReturnValue);
	void GetAllAttachedExplosives(bool bInlcudeAttachedChars, const TArray<class APrimalStructureExplosive*>& ReturnValue);
	void GetAimOffsetsTransform(float DeltaTime, const struct FTransform& RootRotOffsetTransform, float TheRootYawSpeed, float MaxYawAimClamp, const struct FVector& RootLocOffset, bool bInterpolationStep, const struct FRotator& ReturnValue);
	void GetAIFollowStoppingDistanceOffset(float ReturnValue);
	void GetAIFollowStoppingDistanceMultiplier(float ReturnValue);
	void GetAffinityIncreaseForFoodItem(class UPrimalItem* FoodItem, float ReturnValue);
	void GetActorCenterTraceLocation(const struct FVector& ReturnValue);
	void GetActiveState(class UPrimalAIState* ReturnValue);
	void ForceUpdateColorSets(int32 ColorRegion, int32 ColorSet);
	void ForceSetTamedAggressionLevel(int32 AggressionLevel);
	void ForceClearRider();
	void FireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage);
	void FireMultipleProjectilesEx(class UClass* ProjectileClass, const TArray<struct FVector>& Locations, const TArray<struct FVector>& Directions, bool bAddPawnVelocityToProjectile, bool bScaleProjDamageByDinoDamage, class USceneComponent* HomingTarget, const struct FVector& HomingTargetOffset, float OverrideInitialSpeed);
	void FireMultipleProjectiles(const TArray<struct FVector>& Locations, const TArray<struct FVector>& Directions, bool bScaleProjectileDamageByDinoDamage);
	void FedWakingTameDino();
	void EndCharging(bool bForce);
	void ElevateDinoBP(float Val);
	void DoOverrideMountedAirControl(float AirControlIn, float ReturnValue);
	void DoNeuter();
	void DoMate(class APrimalDinoCharacter* WithMate);
	void DoesUseHibernation(bool ReturnValue);
	void DoDeathHarvestingFadeOut();
	void DoAttack(int32 AttackIndex, bool bSetCurrentAttack, bool bInterruptCurrentAttack, bool ReturnValue);
	void DinoShoulderMountedLaunch(const struct FVector& LaunchDir, class AShooterCharacter* ThrowingCharacter);
	void DinoFireProjectileEx(class UClass* ProjectileClass, const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage, bool bAddDinoVelocityToProjectile, float OverrideInitialSpeed, float OverrideMaxSpeed, float ExtraDirectDamageMultiplier, float ExtraExplosionDamageMultiplier, bool SpawnOnOwningClient);
	void Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool ReturnValue);
	void DestroyController();
	void CycleAttackWeightsForAttackAtIndex(int32 AttackIndex);
	void CreateCloneFertilizedEgg(const struct FVector& AtLoc, const struct FRotator& AtRot, class UClass* DroppedItemTemplateOverride, int32 NumMutationsToAdd, class ADroppedItem* ReturnValue);
	void CreateBabyDino(class APrimalDinoCharacter* ReturnValue);
	void CopySettingsToOtherDino(class APlayerController* ForPC, class APrimalDinoCharacter* FromDino, class APrimalDinoCharacter* OtherDino, int32 SettingTypeUseIndex);
	void CopyPaintingComponentFrom(class APrimalDinoCharacter* Other);
	void ClientStartLanding(const struct FVector& LandingLoc);
	void ClientShouldNotifyLanded();
	void ClientInterruptLanding();
	void ClearTamedLandTarget();
	void ClearRider(bool bFromRider, bool bCancelForceLand, bool SpawnDinoDefaultController, int32 OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
	void ClearPassengers();
	void ClearMountCharacter(bool bFromMountCharacter);
	void ClearCharacterAIMovement();
	void ClearCarriedCharacter(bool FromCarriedCharacter, bool bCancelAnyCarryBuffs);
	void CheckForTamedFoodConsumption(int32 Steps);
	void CheckDinoDuped(bool UpedDino);
	void CheatAction(const class FString& Action);
	void CarryCharacter(class APrimalCharacter* ARider, bool byPassCanCarryCheck, bool ReturnValue);
	void CanTakePassenger(class APrimalCharacter* ACharacter, int32 PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace, bool ReturnValue);
	void CanSkipAnimGraph(bool ReturnValue);
	void CanOrder(class APrimalCharacter* FromCharacter, bool bBuildingStructures, bool ReturnValue);
	void CanNurseDino(class APrimalDinoCharacter* OtherDino, bool ReturnValue);
	void CanMount(class APrimalCharacter* ACharacter, bool ReturnValue);
	void CanFly(bool ReturnValue);
	void CanDinoAttackTargetsWithoutRider(bool ReturnValue);
	void CanCryo(class AShooterPlayerController* ForPC, bool ReturnValue);
	void CanClearRider(bool ReturnValue);
	void CancelCurrentAttack(bool bStopCurrentAttackAnim, float AttackAnimBlendOutTime, bool ReturnValue);
	void CanCarryCharacter(class APrimalCharacter* CanCarryPawn, bool ReturnValue);
	void CanAttack(int32 AttackIndex, bool ReturnValue);
	void BSetupDinoTameable();
	void BrakeDinoBP(float Val);
	void BPUntamedConsumeFoodItem(class UPrimalItem* FoodItem);
	void BPUnstasisConsumeFood(float FoodNeeded, float ReturnValue);
	void BPUnstasis();
	void BPUnsetupDinoTameable();
	void BPTamedConsumeFoodItem(class UPrimalItem* FoodItem);
	void BPStaticCreateBabyDinoNoAncestors(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& TheGroundLoc, float ActorRotationYaw, const TArray<uint8>& EggColorSetIndices, const TArray<uint8>& EggNumberOfLevelUpPointsApplied, const TArray<uint8>& EggMutationsApplied, float EggTamedIneffectivenessModifier, int32 NotifyTeamOverride, int32 EggRandomMutationsFemale, int32 EggRandomMutationsMale, class APrimalDinoCharacter* ReturnValue);
	void BPStaticCreateBabyDino(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& TheGroundLoc, float ActorRotationYaw, const TArray<uint8>& EggColorSetIndices, const TArray<uint8>& EggNumberOfLevelUpPointsApplied, const TArray<uint8>& EggMutationsApplied, float EggTamedIneffectivenessModifier, const TArray<struct FDinoAncestorsEntry>& EggDinoAncestors, const TArray<struct FDinoAncestorsEntry>& EggDinoAncestorsMale, int32 NotifyTeamOverride, int32 EggRandomMutationsFemale, int32 EggRandomMutationsMale, int32 EggGenderOverride, class APrimalDinoCharacter* ReturnValue);
	void BPShowTamingPanel(bool CurrentVisibility, bool ReturnValue);
	void BPShouldForceFlee(bool ReturnValue);
	void BPShouldDinoBeTracked(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, bool Handled, bool ReturnValue);
	void BPShouldCancelDoAttack(int32 AttackIndex, bool ReturnValue);
	void BPSetupTamed(bool bWasJustTamed);
	void BPSetSimulatedInterpRollOverride(float ReturnValue);
	void BPSetInitialAimOffsetTargets(const struct FVector& TargetRootLoc, const struct FRotator& TargetAimRot, const struct FVector& OutTargetRootLoc, const struct FRotator& OutTargetAimRot);
	void BPSetForcedAggro(class AActor* TargetableActor, float AggroAmount, float ForcedAggroTime);
	void BPSentKilledNotification(class AShooterPlayerController* ToPC);
	void BPResetClone();
	void BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime, bool ReturnValue);
	void BPPreventRiding(class AShooterCharacter* ByPawn, bool bDontCheckDistance, bool ReturnValue);
	void BPPreventOrderAllowed(class APrimalCharacter* FromCharacter, enum class EDinoTamedOrder OrderType, bool bForce, class AActor* EnemyTarget, bool OrderNotExecuted, bool ReturnValue);
	void BPPrepareForLaunchFromShoulder(const struct FVector& ViewLoc, const struct FVector& ViewDir);
	void BPOverrideTamingDescriptionLabel(const struct FSlateColor& TextColor, const class FString& ReturnValue);
	void BPOverrideStencilAllianceForTarget(class APrimalCharacter* TargetDino, class UPrimitiveComponent* Component, enum class EStencilAlliance ReturnValue);
	void BPOverridePassengerAdditiveAnim(class APrimalCharacter* ForPassenger, class UAnimSequence* ReturnValue);
	void BPOverrideMutationLabels(bool Male, const class FString& ReturnValue);
	void BPOverrideMoveToOrder(const struct FVector& MoveToLocation, class AShooterCharacter* OrderingPlayer, bool ReturnValue);
	void BPOverrideIsSubmergedForWaterTargeting(bool ReturnValue);
	void BPOverrideHealthBarOffset(class APlayerController* ForPC, float ReturnValue);
	void BPOverrideGetAttackAnimationIndex(int32 AttackIndex, const TArray<class UAnimMontage*>& AnimationArray, int32 ReturnValue);
	void BPOverrideFloatingHUDLocation(const struct FVector& ReturnValue);
	void BPOverrideCameraViewTarget(class FName CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool bOverrideCameraLocation, const struct FVector& CameraLocation, bool bOverrideCameraRotation, const struct FRotator& CameraRotation, bool bOverrideCameraFOV, float CameraFOV);
	void BPOrderedMoveToLoc(const struct FVector& DestLoc);
	void BPOnTamedProcessOrder(class APrimalCharacter* FromCharacter, enum class EDinoTamedOrder OrderType, bool bForce, class AActor* EnemyTarget, bool OrderNotExecuted);
	void BPOnStopJump(bool ReturnValue);
	void BPOnStartJump(bool ReturnValue);
	void BPOnSetMountedDino();
	void BPOnSetFlight(bool bFly);
	void BPOnRepIsCharging();
	void BPOnRefreshColorization(const TArray<struct FLinearColor>& Colors);
	void BPOnEndCharging();
	void BPOnDinoStartled(class UAnimMontage* StartledAnimPlayed, bool bFromAIController);
	void BPOnDinoFiredProjectile(class AShooterProjectile* Projectile);
	void BPOnDinoCheat(class FName CheatName, bool bSetValue, float Value);
	void BPOnClearMountedDino();
	void BPNotifyWildHarvestAttack(int32 HarvestIndex);
	void BPNotifyStructurePlacedNearby(class APrimalStructure* NewStructure);
	void BPNotifySetRider(class AShooterCharacter* RiderSetting);
	void BPNotifyNameEditText(class AShooterPlayerController* ForPC);
	void BPNotifyMateBoostChanged();
	void BPNotifyIfPassengerLaunchShoulderMount(class APrimalCharacter* LaunchedCharacter);
	void BPNotifyClearRider(class AShooterCharacter* RiderClearing);
	void BPNotifyClearPassenger(class APrimalCharacter* PassengerChar, int32 SeatIndex);
	void BPNotifyClaimed();
	void BPNotifyCarriedDinoBabyAgeIncrement(class APrimalDinoCharacter* AgingCarriedDino, float PreviousAge, float NewAge);
	void BPNotifyBabyAgeIncrement(float PreviousAge, float NewAge);
	void BPNotifyAddPassenger(class APrimalCharacter* PassengerChar, int32 SeatIndex);
	void BPModifyHarvestingWeightsArray(const TArray<float>& ResourceWeightsIn, const TArray<class UPrimalItem*>& ResourceItems, const TArray<float>& ResourceWeightsOut);
	void BPModifyHarvestingQuantity(float OriginalQuantity, class UClass* ResourceSelected, float ReturnValue);
	void BPModifyHarvestDamage(class UPrimalHarvestingComponent* HarvestComponent, float InDamage, float ReturnValue);
	void BPModifyDesiredRotation(float DeltaTime, const struct FRotator& InDesiredRotation, const struct FRotator& OutDesiredRotation, bool ReturnValue);
	void BPModifyControlRotation(const struct FRotator& ControlRotation, const struct FRotator& OutControlRotation, bool ReturnValue);
	void BPModifyAimOffsetTargetLocation(const struct FVector& AimTargetLocation, const struct FVector& ReturnValue);
	void BPModifyAimOffsetNoTarget(const struct FRotator& Aim, const struct FRotator& ReturnValue);
	void BPKilledSomethingEvent(class APrimalCharacter* KilledTarget);
	void BPIsValidUnStasisCaster(bool ReturnValue);
	void BPIsTamed(bool ReturnValue);
	void BPIsHidden(bool ReturnValue);
	void BPIsBasedOnActor(class AActor* Other, bool ReturnValue);
	void BPHasCurrentAttack(bool ReturnValue);
	void BPHandleUseButtonPress(class AShooterPlayerController* RiderController, bool ReturnValue);
	void BPHandleOnStopTargeting(bool ReturnValue);
	void BPHandleOnStopFire(bool ReturnValue);
	void BPHandleControllerInitiatedAttack(int32 AttackIndex, bool ReturnValue);
	void BPGetTargetingDesirability(class AActor* Attacker, float ReturnValue);
	void BPGetRidingMultiUseEntries(class APlayerController* ForPC, const TArray<struct FMultiUseEntry>& MultiUseEntries, const TArray<struct FMultiUseEntry>& ReturnValue);
	void BPGetRiderUnboardLocation(class APrimalCharacter* RidingCharacter, const struct FVector& ReturnValue);
	void BPGetRiderUnboardDirection(class APrimalCharacter* RidingCharacter, const struct FVector& ReturnValue);
	void BPGetRiderSocket(class FName ReturnValue);
	void BPGetPassengerDinoAdditionalOffset(class APrimalDinoCharacter* Passenger, const struct FVector& ReturnValue);
	void BPGetOtherActorToIgnore(class AActor* ReturnValue);
	void BPGetLookOffsetSocketName(class APrimalCharacter* ForPrimalChar, class FName ReturnValue);
	void BPGetHealthBarColor(const struct FVector& ReturnValue);
	void BPGetDragSocketName(class APrimalCharacter* DraggingChar, class FName ReturnValue);
	void BPGetDragSocketDinoName(class APrimalDinoCharacter* AGrabbedDino, class FName ReturnValue);
	void BPGetCustomDinoSetup(const struct FDinoSetup& ReturnValue);
	void BPGetCurrentAttackIndex(int32 ReturnValue);
	void BPGetCrosshairSpread(float ReturnValue);
	void BPGetCrosshairLocation(float CanvasClipX, float CanvasClipY, float OutX, float OutY);
	void BPGetCrosshairColor(const struct FLinearColor& ReturnValue);
	void BPGetCrosshairAlpha(float ReturnValue);
	void BPGetAttackOfPlayedAnimation(const struct FDinoAttackInfo& AttackInfo, bool ReturnValue);
	void BPForceTurretFastTargeting(bool ReturnValue);
	void BPForceReachedDestination();
	void BPFedWakingTameEvent(class APlayerController* ForPC);
	void BPExShouldRestrictNonAlliedCarriedPlayerYaw(bool ReturnValue);
	void BPDrawToRiderHUD(class AShooterHUD* HUD);
	void BPDoHarvestAttack(int32 HarvestIndex);
	void BPDoAttack(int32 AttackIndex);
	void BPDisplayTamedMessage(bool ReturnValue);
	void BPDinoTooltipCustomTorpidityProgressBar(bool OverrideTorpidityProgressBarIfActive, float ProgressPercent, const class FString& Label, bool ReturnValue);
	void BPDinoTooltipCustomTamingProgressBar(bool OverrideTamingProgressBarIfActive, float ProgressPercent, const class FString& Label, bool ReturnValue);
	void BPDinoPrepareForARKUploading();
	void BPDinoPostBeginPlay();
	void BPDinoARKDownloadedEnd();
	void BPDinoARKDownloadedBegin();
	void BPDidSetCarriedCharacter(class APrimalCharacter* WithPreviousCarriedCharacter);
	void BPDidClearCarriedCharacter(class APrimalCharacter* WithPreviousCarriedCharacter);
	void BPDesiredRotationIsLocalSpace(bool ReturnValue);
	void BPConsumeInventoryFoodItem(class UPrimalItem* FoodItem, bool bConsumeEntireStack, class AShooterCharacter* ReturnValue);
	void BPClampMaxHarvestHealth(float ReturnValue);
	void BPCheckSeven(bool ReturnValue);
	void BPCheckCanSpawnFromLocation(const struct FVector& CheckLocation, const struct FVector& ReturnValue);
	void BPChargingModifyInputAcceleration(const struct FVector& InputAcceleration, const struct FVector& ReturnValue);
	void BPCarriedDinoBabyRescaled(class APrimalDinoCharacter* AgingCarriedDino, float NewAge);
	void BPCanTargetCorpse(bool ReturnValue);
	void BPCanTame(class AShooterPlayerController* ForPC, bool bIgnoreMaxTamedDinos, bool ReturnValue);
	void BPCanTakePassenger(class APrimalCharacter* Character, int32 PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool ReturnValue);
	void BPCanMountOnCharacter(class APrimalCharacter* Character, bool ReturnValue);
	void BPCanLand(bool CanLand, bool ReturnValue);
	void BPCanIgnoreImmobilizationTrap(class UClass* TrapClass, bool bForceTrigger, bool ReturnValue);
	void BPCanDragCharacter(class APrimalCharacter* Character, bool ReturnValue);
	void BPCanCryo(class AShooterPlayerController* ForPC, bool ReturnValue);
	void BPCanAutodrag(class APrimalCharacter* CharacterToDrag, bool ReturnValue);
	void BPBecomeBaby();
	void BPBecomeAdult();
	void BPBecameNewBaby(class APrimalDinoCharacter* Parent);
	void BPAllowEquippingItemType(enum class EPrimalEquipmentType EquipmentType, bool ReturnValue);
	void BPAllowClaiming(class AShooterPlayerController* ForPlayer, bool ReturnValue);
	void BPAllowCarryCharacter(class APrimalCharacter* CheckCharacter, bool ReturnValue);
	void BPAdjustAttackIndex(int32 AttackIndex, int32 ReturnValue);
	void BP_ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar, bool ReturnValue);
	void BP_PreventUnmounting(bool ReturnValue);
	void BP_PreventCarryingByCharacter(class APrimalCharacter* ByCarrier, bool ReturnValue);
	void BP_PreventCarrying(bool ReturnValue);
	void BP_OverrideRiderCameraCollisionSweep(const struct FVector& SweepStart, const struct FVector& SweepEnd, const struct FHitResult& ReturnValue);
	void BP_OverrideDinoName(const class FString& CurrentDinoName, class APlayerController* ForPC, const class FString& ReturnValue);
	void BP_OverrideCarriedCharacterTransform(class APrimalCharacter* ForCarriedChar, bool ReturnValue);
	void BP_OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float TPVCameraSpeedInterpMultiplier, float TPVOffsetInterpSpeed);
	void BP_OnUncryo(class AShooterPlayerController* ForPC);
	void BP_OnTargetedByTamedOrder(class APrimalCharacter* OrderingCharacter, class APrimalDinoCharacter* AttackingDino, bool bForced);
	void BP_OnTamedOrderReceived(class APrimalCharacter* FromCharacter, enum class EDinoTamedOrder OrderType, bool bForce, class AActor* EnemyTarget, bool OrderNotExecuted);
	void BP_OnStartLandingNotify();
	void BP_OnStartLandFailed(int32 ReasonIndex);
	void BP_OnRiderChangeWeapons(class AShooterCharacter* TheRider, class UPrimalItem* NewWeapon);
	void BP_OnPostNetReplication(const struct FVector& ReplicatedLoc, const struct FRotator& ReplicatedRot);
	void BP_OnLandingInterruptedNotify();
	void BP_OnCryo(class AShooterPlayerController* ForPC);
	void BP_OnBasedPawnRemovedNotify(class AActor* RemovedActor);
	void BP_OnBasedPawnAddedNotify(class AActor* AddedActor);
	void BP_InterceptTurnInput(float AxisValue, bool ReturnValue);
	void BP_InterceptMoveRight(float AxisValue, bool ReturnValue);
	void BP_InterceptMoveForward(float AxisValue, bool ReturnValue);
	void BP_GetCustomModifier_RotationRate(float ReturnValue);
	void BP_GetCustomModifier_MaxSpeed(float ReturnValue);
	void BP_ForceAllowMountedWeapon(class UClass* WeaponTemplate, bool ReturnValue);
	void BP_CanFly(bool ReturnValue);
	void BP_AllowWalkableSlopeOverride(class UPrimitiveComponent* ForComponent, bool ReturnValue);
	void BlueprintTamedTick();
	void BlueprintPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void BlueprintOverrideWantsToRun(bool bInputWantsToRun, bool ReturnValue);
	void BlueprintOverrideHarvestDamageType(float OutHarvestDamageMultiplier, class UClass* ReturnValue);
	void BlueprintGetAttackWeight(int32 AttackIndex, float InputWeight, float Distance, float AttackRangeOffset, class AActor* OtherTarget, float ReturnValue);
	void BlueprintExtraBabyScaling(float ReturnValue);
	void BlueprintDrawFloatingHUD(class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
	void BlueprintDestroyActor();
	void BlueprintCanRiderAttack(int32 AttackIndex, bool ReturnValue);
	void BlueprintCanAttack(int32 AttackIndex, float Distance, float AttackRangeOffset, class AActor* OtherTarget, bool ReturnValue);
	void BlueprintAdjustOutputDamage(int32 AttackIndex, float OriginalDamageAmount, class AActor* HitActor, class UClass* OutDamageType, float OutDamageImpulse, float ReturnValue);
	void BlendSpaceGenerated(class UBlendSpace* BlendSpace);
	void AssertColorNames();
	void AreSpawnerSublevelsLoaded(bool ReturnValue);
	void ApplyRidingAttackExtraVelocity();
	void ApplyMutagen();
	void AnimNotifyMountedDino();
	void AllowWakingTame(class APlayerController* ForPC, bool ReturnValue);
	void AllowMountedWeaponry(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry, bool ReturnValue);
	void AllowCarryCharacter(class APrimalCharacter* CanCarryPawn, bool ReturnValue);
	void AddToMeleeSwingHurtList(class AActor* AnActor, bool ReturnValue);
	void AddSaddleCheat(class UClass* AnItem);
	void AddPassenger(class APrimalCharacter* ACharacter, int32 PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace, bool ReturnValue);
	void AddedImprintingQuality(float Amount);
	void AddDinoReferenceInLatchingStructure(class APrimalStructure* Structure);
};

// 0xB8 (0x32D0 - 0x3218)
// Class ShooterGame.PrimalBotCharacter
class APrimalBotCharacter : public APrimalDinoCharacter
{
public:
	class USkeletalMesh*                         AlternateSkeletalMesh;                             // 0x3218(0x8)(ZeroConstructor)
	class UClass*                                AlternateAnimBP;                                   // 0x3220(0x8)(ZeroConstructor)
	class UAnimSequence*                         AlternateDinoRidingAnimation;                      // 0x3228(0x8)(ZeroConstructor)
	class UAnimSequence*                         AlternateDinoRidingMoveAnimation;                  // 0x3230(0x8)(ZeroConstructor)
	bool                                         HasMeleeWeapon;                                    // 0x3238(0x1)(None)
	uint8                                        Pad_325F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> RideableDinoClasses;                               // 0x3240(0x10)(ZeroConstructor)
	bool                                         bIsRiding;                                         // 0x3250(0x1)(None)
	uint8                                        Pad_3260[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         DefaultDinoRidingAnimation;                        // 0x3258(0x8)(ZeroConstructor)
	class UAnimSequence*                         DefaultDinoRidingMoveAnimation;                    // 0x3260(0x8)(ZeroConstructor)
	bool                                         UseAltAimOffsetAnimation;                          // 0x3268(0x1)(None)
	bool                                         bIsStationary;                                     // 0x3269(0x1)(None)
	uint8                                        Pad_3261[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalDinoCharacter>   DinoBeingRidden;                                   // 0x326C(0x8)(ZeroConstructor)
	bool                                         bIsUsingAlternateMesh;                             // 0x3274(0x1)(None)
	uint8                                        Pad_3262[0x5B];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalBotCharacter* GetDefaultObj();

	void OnRep_RidingDino();
	void IsUsingAlternateSkelMesh(bool ReturnValue);
	void GetMinAttackRange(float ReturnValue);
	void GetMaxAttackRange(float ReturnValue);
	void GetDinoRidingMoveAnimation(class UAnimSequence* ReturnValue);
	void GetDinoRidingAnimation(class UAnimSequence* ReturnValue);
	void GetBotAnimSequenceOverride(class UAnimSequence* AnimSeq, class UAnimSequence* ReturnValue);
	void CurrentlyRiddenDino(class APrimalDinoCharacter* ReturnValue);
	void ClearRidingDino();
	void CanRideDino(class APrimalDinoCharacter* Dino, bool ReturnValue);
	void AttachToDino(class APrimalDinoCharacter* Dino);
};

// 0x10 (0xC8 - 0xB8)
// Class ShooterGame.PrimalBotRidingComponent
class UPrimalBotRidingComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class APrimalBotCharacter>    Rider;                                             // 0xB8(0x8)(ZeroConstructor)
	TWeakObjectPtr<class APrimalBotCharacter>    Claimer;                                           // 0xC0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalBotRidingComponent* GetDefaultObj();

};

// 0xB8 (0x5C8 - 0x510)
// Class ShooterGame.PrimalEmitterSpawnable
class APrimalEmitterSpawnable : public AEmitter
{
public:
	class USceneComponent*                       RootTransformComp;                                 // 0x510(0x8)(ZeroConstructor)
	class UAudioComponent*                       SoundToPlay;                                       // 0x518(0x8)(ZeroConstructor)
	class UClass*                                CameraShake;                                       // 0x520(0x8)(ZeroConstructor)
	float                                        CameraShakeInnerRadius;                            // 0x528(0x4)(None)
	float                                        CameraShakeOuterRadius;                            // 0x52C(0x4)(None)
	float                                        CameraShakeFalloff;                                // 0x530(0x4)(None)
	float                                        CameraShakeScaleMultiplier;                        // 0x534(0x4)(None)
	struct FDecalData                            DecalToSpawn;                                      // 0x538(0x20)(ZeroConstructor)
	uint8                                        bCameraShakeOrientTowardsEpicenter : 1;            // Mask: 0x1, PropSize: 0x10x558(0x1)(None)
	uint8                                        bHighPrioritySound : 1;                            // Mask: 0x2, PropSize: 0x10x558(0x1)(None)
	uint8                                        bShallowEmitterSpawnable : 1;                      // Mask: 0x4, PropSize: 0x10x558(0x1)(None)
	uint8                                        bShallowEmitterDontSpawnOutOfView : 1;             // Mask: 0x8, PropSize: 0x10x558(0x1)(None)
	uint8                                        bAllowLoopingEmitter : 1;                          // Mask: 0x10, PropSize: 0x10x558(0x1)(None)
	uint8                                        bForceNoRotation : 1;                              // Mask: 0x20, PropSize: 0x10x558(0x1)(None)
	uint8                                        bTickSoundInRangePlayback : 1;                     // Mask: 0x40, PropSize: 0x10x558(0x1)(None)
	uint8                                        bWasActivated : 1;                                 // Mask: 0x80, PropSize: 0x10x558(0x1)(None)
	uint8                                        BitPad_292 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasImpulseDataAvailable : 1;                      // Mask: 0x2, PropSize: 0x10x559(0x1)(None)
	uint8                                        BitPad_293 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3263[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShallowEmitterDontSpawnOutOfViewCheckRadius;       // 0x55C(0x4)(None)
	float                                        ShallowEmitterOverrideSecondsBeforeInactive;       // 0x560(0x4)(None)
	float                                        ActivateSoundFadeInDuration;                       // 0x564(0x4)(None)
	float                                        DeactivateSoundFadeOutDuration;                    // 0x568(0x4)(None)
	float                                        ShallowEmitterSpawnableMaxDistance;                // 0x56C(0x4)(None)
	bool                                         bDelayedDeactivation;                              // 0x570(0x1)(None)
	uint8                                        Pad_3264[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          ColorParameter;                                    // 0x574(0x10)(None)
	uint8                                        Pad_3265[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraComponent*                     NiagaraComponent;                                  // 0x588(0x8)(ZeroConstructor)
	class AActor*                                SpawnedForActor;                                   // 0x590(0x8)(ZeroConstructor)
	struct FVector                               ImpulseData;                                       // 0x598(0x18)(None)
	struct FVector                               HitLocation;                                       // 0x5B0(0x18)(None)

	static class UClass* StaticClass();
	static class APrimalEmitterSpawnable* GetDefaultObj();

	void UpdateEmitter(float DeltaTime, float Alpha, class AActor* FromActor);
	void ToggleActivation(bool DoActivate);
	void StartDeactivation();
	void StartActivation();
	void SetupEmitter(class AActor* FromActor);
	void SetImpulseData(const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn);
	void PreActivation();
};

// 0x588 (0xB50 - 0x5C8)
// Class ShooterGame.PrimalBuff
class APrimalBuff : public APrimalEmitterSpawnable
{
public:
	float                                        DeactivationLifespan;                              // 0x5C8(0x4)(None)
	class FName                                  InstigatorAttachmentSocket;                        // 0x5CC(0x8)(None)
	class FName                                  InstigatorAttachmentSocket_PlayerOverride;         // 0x5D4(0x8)(None)
	uint8                                        bSlowInstigatorFalling : 1;                        // Mask: 0x1, PropSize: 0x10x5DC(0x1)(None)
	uint8                                        bDeactivateOnJump : 1;                             // Mask: 0x2, PropSize: 0x10x5DC(0x1)(None)
	uint8                                        bPreventJump : 1;                                  // Mask: 0x4, PropSize: 0x10x5DC(0x1)(None)
	uint8                                        bPreventDinoRiding : 1;                            // Mask: 0x8, PropSize: 0x10x5DC(0x1)(None)
	uint8                                        bPreventDinoDismount : 1;                          // Mask: 0x10, PropSize: 0x10x5DC(0x1)(None)
	uint8                                        BitPad_294 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3333[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPNotifyPreventDismounting : 1;                // Mask: 0x1, PropSize: 0x10x5E0(0x1)(None)
	uint8                                        bForceShowFloatingName : 1;                        // Mask: 0x2, PropSize: 0x10x5E0(0x1)(None)
	uint8                                        bForceHideFloatingName : 1;                        // Mask: 0x4, PropSize: 0x10x5E0(0x1)(None)
	uint8                                        BitPad_295 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3334[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPreventCarryOrPassenger : 1;                      // Mask: 0x1, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bDeactivated : 1;                                  // Mask: 0x2, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bUsesInstigator : 1;                               // Mask: 0x4, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bFollowTarget : 1;                                 // Mask: 0x8, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bOverrideRightShoulderOnPlayer : 1;                // Mask: 0x10, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bAddCharacterValues : 1;                           // Mask: 0x20, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bOnlyAddCharacterValuesUnderwater : 1;             // Mask: 0x40, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bDisableIfCharacterUnderwater : 1;                 // Mask: 0x80, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bUseInstigatorItem : 1;                            // Mask: 0x1, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bDestroyOnTargetStasis : 1;                        // Mask: 0x2, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bAoETraceToTargets : 1;                            // Mask: 0x4, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bAOEOnlyApplyOtherBuffToWildDinos : 1;             // Mask: 0x8, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bAoEIgnoreDinosTargetingInstigator : 1;            // Mask: 0x10, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bAoEOnlyOnDinosTargetingInstigator : 1;            // Mask: 0x20, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bBuffForceNoTick : 1;                              // Mask: 0x40, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bBuffForceNoTickDedicated : 1;                     // Mask: 0x80, PropSize: 0x10x5E5(0x1)(None)
	uint8                                        bCustomDepthStencilIgnoreHealth : 1;               // Mask: 0x1, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        bCompleteCustomDepthStencilOverride : 1;           // Mask: 0x2, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        bUseActivateSoundFadeInDuration : 1;               // Mask: 0x4, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        bDinoIgnoreBuffPostprocessEffectWhenRidden : 1;    // Mask: 0x8, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        bPlayerIgnoreBuffPostprocessEffectWhenRidingDino : 1; // Mask: 0x10, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        bRemoteForcedFlee : 1;                             // Mask: 0x20, PropSize: 0x10x5E6(0x1)(None)
	uint8                                        BitPad_296 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3336[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RemoteForcedFleeDuration;                          // 0x5E8(0x4)(None)
	uint8                                        Pad_3337[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               AoETraceToTargetsStartOffset;                      // 0x5F0(0x18)(None)
	TWeakObjectPtr<class AActor>                 Target;                                            // 0x608(0x8)(ZeroConstructor)
	TWeakObjectPtr<class UPrimalItem>            InstigatorItem;                                    // 0x610(0x8)(ZeroConstructor)
	float                                        SlowInstigatorFallingAddZVelocity;                 // 0x618(0x4)(None)
	float                                        SlowInstigatorFallingDampenZVelocity;              // 0x61C(0x4)(None)
	float                                        DeactivateAfterTime;                               // 0x620(0x4)(None)
	float                                        WeaponRecoilMultiplier;                            // 0x624(0x4)(None)
	float                                        ReceiveDamageMultiplier;                           // 0x628(0x4)(None)
	float                                        MeleeDamageMultiplier;                             // 0x62C(0x4)(None)
	float                                        DepleteInstigatorItemDurabilityPerSecond;          // 0x630(0x4)(None)
	float                                        ValuesToAddPerSecond[0xC];                         // 0x634(0x30)(None)
	uint8                                        Pad_3338[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStatusValueModifierDescription       BuffDescription;                                   // 0x668(0x50)(ZeroConstructor)
	float                                        CharacterAdd_DefaultHyperthermicInsulation;        // 0x6B8(0x4)(None)
	float                                        CharacterAdd_DefaultHypothermicInsulation;         // 0x6BC(0x4)(None)
	float                                        CharacterMultiplier_ExtraWaterConsumptionMultiplier; // 0x6C0(0x4)(None)
	float                                        CharacterMultiplier_ExtraFoodConsumptionMultiplier; // 0x6C4(0x4)(None)
	float                                        CharacterMultiplier_SubmergedOxygenDecreaseSpeed;  // 0x6C8(0x4)(None)
	float                                        ViewMinExposureMultiplier;                         // 0x6CC(0x4)(None)
	float                                        ViewMaxExposureMultiplier;                         // 0x6D0(0x4)(None)
	float                                        XPtoAdd;                                           // 0x6D4(0x4)(None)
	float                                        XPtoAddRate;                                       // 0x6D8(0x4)(None)
	int32                                        DinoColorizationPriority;                          // 0x6DC(0x4)(None)
	float                                        DinoColorizationInterpSpeed;                       // 0x6E0(0x4)(None)
	uint8                                        bUseBPDinoRefreshColorization : 1;                 // Mask: 0x1, PropSize: 0x10x6E4(0x1)(None)
	uint8                                        bOverrideInventoryWeightMultipliers : 1;           // Mask: 0x2, PropSize: 0x10x6E4(0x1)(None)
	uint8                                        bDeactivateAfterAddingXP : 1;                      // Mask: 0x4, PropSize: 0x10x6E4(0x1)(None)
	uint8                                        BitPad_297 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3339[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemMultiplier>               OverrideInventoryItemClassWeightMultipliers;       // 0x6E8(0x10)(ZeroConstructor)
	uint8                                        Pad_333A[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOnlyActivateSoundForInstigator : 1;               // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        bAOEBuffCarnosOnly : 1;                            // Mask: 0x2, PropSize: 0x10x758(0x1)(None)
	uint8                                        bCausesCryoSickness : 1;                           // Mask: 0x4, PropSize: 0x10x758(0x1)(None)
	uint8                                        bModifyMaxSpeed : 1;                               // Mask: 0x8, PropSize: 0x10x758(0x1)(None)
	uint8                                        bDisplayHUDProgressBar : 1;                        // Mask: 0x10, PropSize: 0x10x758(0x1)(None)
	uint8                                        bForceUsePreventTargeting : 1;                     // Mask: 0x20, PropSize: 0x10x758(0x1)(None)
	uint8                                        bForceUsePreventTargetingTurret : 1;               // Mask: 0x40, PropSize: 0x10x758(0x1)(None)
	uint8                                        bBPOverrideWeaponBob : 1;                          // Mask: 0x80, PropSize: 0x10x758(0x1)(None)
	uint8                                        bUseBPModifyPlayerBoneModifiers : 1;               // Mask: 0x1, PropSize: 0x10x759(0x1)(None)
	uint8                                        bDediServerUseBPModifyPlayerBoneModifiers : 1;     // Mask: 0x2, PropSize: 0x10x759(0x1)(None)
	uint8                                        bUseBPNonDedicatedPlayerPostAnimUpdate : 1;        // Mask: 0x4, PropSize: 0x10x759(0x1)(None)
	uint8                                        bUseBPIsCharacterHardAttached : 1;                 // Mask: 0x8, PropSize: 0x10x759(0x1)(None)
	uint8                                        bDoCharacterDetachment : 1;                        // Mask: 0x10, PropSize: 0x10x759(0x1)(None)
	uint8                                        bDoCharacterDetachmentIncludeRiding : 1;           // Mask: 0x20, PropSize: 0x10x759(0x1)(None)
	uint8                                        bDoCharacterDetachmentIncludeCarrying : 1;         // Mask: 0x40, PropSize: 0x10x759(0x1)(None)
	uint8                                        bUseBPInitializedCharacterAnimScriptInstance : 1;  // Mask: 0x80, PropSize: 0x10x759(0x1)(None)
	uint8                                        bUseBPCanBeCarried : 1;                            // Mask: 0x1, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bUsePostAdjustDamage : 1;                          // Mask: 0x2, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bPreventFallDamage : 1;                            // Mask: 0x4, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bUseBPOnInstigatorCapsuleComponentHit : 1;         // Mask: 0x8, PropSize: 0x10x75A(0x1)(None)
	uint8                                        BitPad_298 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPOverrideCameraViewTarget : 1;                // Mask: 0x20, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bUseBPForceCameraStyle : 1;                        // Mask: 0x40, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bUseBPIsValidUnstasisActor : 1;                    // Mask: 0x80, PropSize: 0x10x75A(0x1)(None)
	uint8                                        bUseBPOverrideIsNetRelevantFor : 1;                // Mask: 0x1, PropSize: 0x10x75B(0x1)(None)
	uint8                                        bPreventClearRiderOnDinoImmobilize : 1;            // Mask: 0x2, PropSize: 0x10x75B(0x1)(None)
	uint8                                        bAlwaysShowBuffDescription : 1;                    // Mask: 0x4, PropSize: 0x10x75B(0x1)(None)
	uint8                                        BitPad_299 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        SubmergedMaxSpeedModifier;                         // 0x75C(0x4)(None)
	float                                        UnsubmergedMaxSpeedModifier;                       // 0x760(0x4)(None)
	float                                        SubmergedMaxAccelerationModifier;                  // 0x764(0x4)(None)
	float                                        UnsubmergedMaxAccelerationModifier;                // 0x768(0x4)(None)
	float                                        SubmergedRotationRateModifier;                     // 0x76C(0x4)(None)
	float                                        UnsubmergedRotationRateModifier;                   // 0x770(0x4)(None)
	float                                        FrictionModifier;                                  // 0x774(0x4)(None)
	TArray<struct FDamagePrimalCharacterStatusValueModifier> CharacterStatusValueModifiers;                     // 0x778(0x10)(ZeroConstructor)
	uint8                                        Pad_333B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       BuffStartTime;                                     // 0x790(0x8)(None)
	uint8                                        Pad_333C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bForcedOnSpectatorPlayerController;                // 0x7A0(0x1)(None)
	uint8                                        Pad_333D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UMaterialInterface>     BuffPostProcessEffect;                             // 0x7A8(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class AActor>>          PreventActorClassesTargeting;                      // 0x7D8(0x10)(ZeroConstructor)
	TArray<float>                                PreventActorClassesTargetingRanges;                // 0x7E8(0x10)(None)
	class AMissionType*                          RelatedMission;                                    // 0x7F8(0x8)(ZeroConstructor)
	bool                                         bHasRelatedMission;                                // 0x800(0x1)(None)
	uint8                                        Pad_333E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAOEApplyOtherBuffOnPlayers : 1;                   // Mask: 0x1, PropSize: 0x10x804(0x1)(None)
	uint8                                        bAOEApplyOtherBuffOnDinos : 1;                     // Mask: 0x2, PropSize: 0x10x804(0x1)(None)
	uint8                                        bAOEApplyOtherBuffIgnoreSameTeam : 1;              // Mask: 0x4, PropSize: 0x10x804(0x1)(None)
	uint8                                        bAOEApplyOtherBuffRequireSameTeam : 1;             // Mask: 0x8, PropSize: 0x10x804(0x1)(None)
	uint8                                        bBuffDrawFloatingHUD : 1;                          // Mask: 0x10, PropSize: 0x10x804(0x1)(None)
	uint8                                        bAddResetsBuffTime : 1;                            // Mask: 0x20, PropSize: 0x10x804(0x1)(None)
	uint8                                        bAoEBuffAllowIfAlreadyBuffed : 1;                  // Mask: 0x40, PropSize: 0x10x804(0x1)(None)
	uint8                                        bNetResetBuffStart : 1;                            // Mask: 0x80, PropSize: 0x10x804(0x1)(None)
	uint8                                        bImmobilizeTarget : 1;                             // Mask: 0x1, PropSize: 0x10x805(0x1)(None)
	uint8                                        bForcePlayerProne : 1;                             // Mask: 0x2, PropSize: 0x10x805(0x1)(None)
	uint8                                        bHideBuffFromHUD : 1;                              // Mask: 0x4, PropSize: 0x10x805(0x1)(None)
	uint8                                        bHideTimerFromHUD : 1;                             // Mask: 0x8, PropSize: 0x10x805(0x1)(None)
	uint8                                        bBPAddMultiUseEntries : 1;                         // Mask: 0x10, PropSize: 0x10x805(0x1)(None)
	uint8                                        bIsBuffPersistent : 1;                             // Mask: 0x20, PropSize: 0x10x805(0x1)(None)
	uint8                                        bBPUseBumpedByPawn : 1;                            // Mask: 0x40, PropSize: 0x10x805(0x1)(None)
	uint8                                        bBPUseBumpedPawn : 1;                              // Mask: 0x80, PropSize: 0x10x805(0x1)(None)
	uint8                                        bAllowBuffWhenInstigatorDead : 1;                  // Mask: 0x1, PropSize: 0x10x806(0x1)(None)
	uint8                                        bNotifyDamage : 1;                                 // Mask: 0x2, PropSize: 0x10x806(0x1)(None)
	uint8                                        bAllowBuffStasis : 1;                              // Mask: 0x4, PropSize: 0x10x806(0x1)(None)
	uint8                                        bApplyStatModifierToPlayers : 1;                   // Mask: 0x8, PropSize: 0x10x806(0x1)(None)
	uint8                                        bApplyStatModifierToDinos : 1;                     // Mask: 0x10, PropSize: 0x10x806(0x1)(None)
	uint8                                        bPreventOnWildDino : 1;                            // Mask: 0x20, PropSize: 0x10x806(0x1)(None)
	uint8                                        bPreventOnDino : 1;                                // Mask: 0x40, PropSize: 0x10x806(0x1)(None)
	uint8                                        bPreventOnPlayer : 1;                              // Mask: 0x80, PropSize: 0x10x806(0x1)(None)
	uint8                                        bPreventOnBigDino : 1;                             // Mask: 0x1, PropSize: 0x10x807(0x1)(None)
	uint8                                        bPreventOnBossDino : 1;                            // Mask: 0x2, PropSize: 0x10x807(0x1)(None)
	uint8                                        bPreventOnRobotDino : 1;                           // Mask: 0x4, PropSize: 0x10x807(0x1)(None)
	uint8                                        bIsDisease : 1;                                    // Mask: 0x8, PropSize: 0x10x807(0x1)(None)
	uint8                                        bUseBPPreventAddingOtherBuff : 1;                  // Mask: 0x10, PropSize: 0x10x807(0x1)(None)
	uint8                                        bUseBPPreventRunning : 1;                          // Mask: 0x20, PropSize: 0x10x807(0x1)(None)
	uint8                                        BitPad_29A : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        PreventIfMovementMassGreaterThan;                  // 0x808(0x4)(None)
	uint8                                        Pad_333F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             AOEOtherBuffToApply;                               // 0x810(0x30)(ZeroConstructor)
	float                                        AOEBuffRange;                                      // 0x840(0x4)(None)
	float                                        CharacterAOEBuffDamage;                            // 0x844(0x4)(None)
	float                                        CharacterAOEBuffResistance;                        // 0x848(0x4)(None)
	float                                        Maximum2DVelocityForStaminaRecovery;               // 0x84C(0x4)(None)
	uint8                                        bUseBPNotifyItemAdded : 1;                         // Mask: 0x1, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPNotifyItemQuantityUpdated : 1;               // Mask: 0x2, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPNotifyItemRemoved : 1;                       // Mask: 0x4, PropSize: 0x10x850(0x1)(None)
	uint8                                        bAddReactivates : 1;                               // Mask: 0x8, PropSize: 0x10x850(0x1)(None)
	uint8                                        bAoEApplyDamageAllTargetables : 1;                 // Mask: 0x10, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPAdjustCharacterMovementImpulse : 1;          // Mask: 0x20, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPAdjustImpulseFromDamage : 1;                 // Mask: 0x40, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPGetHUDElements : 1;                          // Mask: 0x80, PropSize: 0x10x850(0x1)(None)
	uint8                                        bUseBPGetCameraShakeScalar : 1;                    // Mask: 0x1, PropSize: 0x10x851(0x1)(None)
	uint8                                        bForceDrawMissionDinoTargetHealthbars : 1;         // Mask: 0x2, PropSize: 0x10x851(0x1)(None)
	uint8                                        bUseBPGetWaypointsBuff : 1;                        // Mask: 0x4, PropSize: 0x10x851(0x1)(None)
	uint8                                        BitPad_29B : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3340[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            PostprocessBlendablesToExclude;                    // 0x858(0x10)(ZeroConstructor)
	uint8                                        Pad_3341[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             BuffToGiveOnDeactivation;                          // 0x880(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalBuff>>     BuffClassesToCancelOnActivation;                   // 0x8B0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalBuff>>     ActivePreventsBuffClasses;                         // 0x8C0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalCharacter>> BuffRequiresOwnerClass;                            // 0x8D0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalCharacter>> BuffPreventsOwnerClass;                            // 0x8E0(0x10)(ZeroConstructor)
	float                                        XPEarningMultiplier;                               // 0x8F0(0x4)(None)
	bool                                         bUseBPSetupForInstigator;                          // 0x8F4(0x1)(None)
	bool                                         bUseBPDeactivated;                                 // 0x8F5(0x1)(None)
	bool                                         bUseBPOverrideBuffToGiveOnDeactivation;            // 0x8F6(0x1)(None)
	bool                                         bUseBPCustomAllowAddBuff;                          // 0x8F7(0x1)(None)
	bool                                         bUseBPInformDamageCauserOfBuffAdded;               // 0x8F8(0x1)(None)
	uint8                                        bUseBPActivated : 1;                               // Mask: 0x1, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bUseBPHandleOnStartFire : 1;                       // Mask: 0x2, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bUseBPHandleOnStartAltFire : 1;                    // Mask: 0x4, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bUseBPHandleOnStopAltFire : 1;                     // Mask: 0x8, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bUseBPPreventFlight : 1;                           // Mask: 0x10, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bRequireController : 1;                            // Mask: 0x20, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bDontPlayInstigatorActiveSoundOnDino : 1;          // Mask: 0x40, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bAddExtendBuffTime : 1;                            // Mask: 0x80, PropSize: 0x10x8F9(0x1)(None)
	uint8                                        bUseTickingDeactivation : 1;                       // Mask: 0x1, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        bCheckPreventInput : 1;                            // Mask: 0x2, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        bBPDrawBuffStatusHUD : 1;                          // Mask: 0x4, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        bStatusComponentUsingExtendedHUDText : 1;          // Mask: 0x8, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        bEnableStaticPathing : 1;                          // Mask: 0x10, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        bHUDFormatTimerAsTimecode : 1;                     // Mask: 0x20, PropSize: 0x10x8FA(0x1)(None)
	uint8                                        BitPad_29C : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_334A[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               StaticPathingDestination;                          // 0x900(0x18)(None)
	uint8                                        Pad_334B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPPreventThrowingItem : 1;                     // Mask: 0x1, PropSize: 0x10x920(0x1)(None)
	uint8                                        bPreventInputDoesOffset : 1;                       // Mask: 0x2, PropSize: 0x10x920(0x1)(None)
	uint8                                        bNotifyExperienceGained : 1;                       // Mask: 0x4, PropSize: 0x10x920(0x1)(None)
	uint8                                        bOnlyTickWhenVisible : 1;                          // Mask: 0x8, PropSize: 0x10x920(0x1)(None)
	uint8                                        bBPAdjustStatusValueModification : 1;              // Mask: 0x10, PropSize: 0x10x920(0x1)(None)
	uint8                                        BitPad_29D : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPNotifyOtherBuffActivated : 1;                // Mask: 0x40, PropSize: 0x10x920(0x1)(None)
	uint8                                        bUseBPNotifyOtherBuffDeactivated : 1;              // Mask: 0x80, PropSize: 0x10x920(0x1)(None)
	uint8                                        bUseBPPreventFirstPerson : 1;                      // Mask: 0x1, PropSize: 0x10x921(0x1)(None)
	uint8                                        bForceAddUnderwaterCharacterStatusValues : 1;      // Mask: 0x2, PropSize: 0x10x921(0x1)(None)
	uint8                                        bPreventInstigatorAttack : 1;                      // Mask: 0x4, PropSize: 0x10x921(0x1)(None)
	uint8                                        bUseBPOnInstigatorMovementModeChangedNotify : 1;   // Mask: 0x8, PropSize: 0x10x921(0x1)(None)
	uint8                                        bUseBPPreventInstigatorMovementMode : 1;           // Mask: 0x10, PropSize: 0x10x921(0x1)(None)
	uint8                                        bUseBPOverrideTalkerCharacter : 1;                 // Mask: 0x20, PropSize: 0x10x921(0x1)(None)
	uint8                                        bBuffHandleInstigatorMultiUseEntries : 1;          // Mask: 0x40, PropSize: 0x10x921(0x1)(None)
	uint8                                        bUseBPPreventInstigatorAttack : 1;                 // Mask: 0x80, PropSize: 0x10x921(0x1)(None)
	uint8                                        bUseBPPreventOnStartJump : 1;                      // Mask: 0x1, PropSize: 0x10x922(0x1)(None)
	uint8                                        BitPad_29E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_334C[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        BPNotifyActivationToOtherBuffClasses;              // 0x928(0x10)(ZeroConstructor)
	class UPrimalBuffPersistentData*             MyBuffPersistentData;                              // 0x938(0x8)(ZeroConstructor)
	class UClass*                                BuffPersistentDataClass;                           // 0x940(0x8)(ZeroConstructor)
	TArray<struct FMaxStatScaler>                MaxStatScalers;                                    // 0x948(0x10)(None)
	TWeakObjectPtr<class AActor>                 BuffDamageCauser;                                  // 0x958(0x8)(ZeroConstructor)
	class USoundBase*                            ExtraActivationSoundToPlay;                        // 0x960(0x8)(ZeroConstructor)
	bool                                         bPersistentBuffSurvivesLevelUp;                    // 0x968(0x1)(None)
	uint8                                        Pad_334D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AoEApplyDamage;                                    // 0x96C(0x4)(None)
	float                                        AoEApplyDamageInterval;                            // 0x970(0x4)(None)
	uint8                                        Pad_334E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                AoEApplyDamageType;                                // 0x978(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             ForceNetworkSpatializationMaxLimitBuffType;        // 0x980(0x30)(ZeroConstructor)
	int32                                        ForceNetworkSpatializationMaxLimitBuffTypeFlag;    // 0x9B0(0x4)(None)
	int32                                        ForceNetworkSpatializationBuffMaxLimitNum;         // 0x9B4(0x4)(None)
	float                                        ForceNetworkSpatializationBuffMaxLimitRange;       // 0x9B8(0x4)(None)
	float                                        InsulationRange;                                   // 0x9BC(0x4)(None)
	float                                        HyperThermiaInsulation;                            // 0x9C0(0x4)(None)
	float                                        HypoThermiaInsulation;                             // 0x9C4(0x4)(None)
	struct FVector                               AoEBuffLocOffset;                                  // 0x9C8(0x18)(None)
	TArray<TSoftClassPtr<class AActor>>          AoEClassesToInclude;                               // 0x9E0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class AActor>>          AoEClassesToExclude;                               // 0x9F0(0x10)(ZeroConstructor)
	bool                                         bUseBPExcludeAoEActor;                             // 0xA00(0x1)(None)
	bool                                         bOverrideBuffDescription;                          // 0xA01(0x1)(None)
	bool                                         bOverrideBuffType;                                 // 0xA02(0x1)(None)
	bool                                         bOnlyTickIfPlayerCharacter;                        // 0xA03(0x1)(None)
	bool                                         bOnlyTickWhenPossessed;                            // 0xA04(0x1)(None)
	bool                                         bDestroyWhenUnpossessed;                           // 0xA05(0x1)(None)
	uint8                                        Pad_3352[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OnlyForInstigatorSoundFadeInTime;                  // 0xA10(0x4)(None)
	bool                                         bUseBuffTickServer;                                // 0xA14(0x1)(None)
	bool                                         bUseBuffTickClient;                                // 0xA15(0x1)(None)
	uint8                                        Pad_3353[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BuffTickServerMaxTime;                             // 0xA18(0x4)(None)
	float                                        BuffTickServerMinTime;                             // 0xA1C(0x4)(None)
	float                                        BuffTickClientMaxTime;                             // 0xA20(0x4)(None)
	float                                        BuffTickClientMinTime;                             // 0xA24(0x4)(None)
	bool                                         bUseRemoteClientTick;                              // 0xA28(0x1)(None)
	uint8                                        Pad_3360[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BuffTickRemoteClientMaxTime;                       // 0xA2C(0x4)(None)
	float                                        BuffTickRemoteClientMinTime;                       // 0xA30(0x4)(None)
	bool                                         bContinueTickingServerAfterDeactivate;             // 0xA34(0x1)(None)
	bool                                         bContinueTickingClientAfterDeactivate;             // 0xA35(0x1)(None)
	uint8                                        Pad_3361[0x26];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AddBuffMaxNumStacks;                               // 0xA5C(0x4)(None)
	class USoundBase*                            DeactivatedSound;                                  // 0xA60(0x8)(ZeroConstructor)
	bool                                         bDeactivatedSoundOnlyLocal;                        // 0xA68(0x1)(None)
	bool                                         bDisableBloom;                                     // 0xA69(0x1)(None)
	bool                                         bBPModifyCharacterFOV;                             // 0xA6A(0x1)(None)
	uint8                                        Pad_3362[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PostProcessInterpSpeedDown;                        // 0xA6C(0x4)(None)
	float                                        PostProcessInterpSpeedUp;                          // 0xA70(0x4)(None)
	float                                        TPVCameraSpeedInterpolationMultiplier;             // 0xA74(0x4)(None)
	bool                                         bIsCarryBuff;                                      // 0xA78(0x1)(None)
	uint8                                        Pad_3363[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPostProcessMaterialAdjuster>  PostprocessMaterialAdjusters;                      // 0xA80(0x10)(ZeroConstructor)
	uint8                                        bBPOverrideCharacterWalkVelocity : 1;              // Mask: 0x1, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bBPOverrideCharacterSwimmingVelocity : 1;          // Mask: 0x2, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bBPOverrideCharacterNewFallVelocity : 1;           // Mask: 0x4, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bBPOverrideCharacterFlyingVelocity : 1;            // Mask: 0x8, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bForceOverrideCharacterWalkingVelocity : 1;        // Mask: 0x10, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bForceOverrideCharacterSwimmingVelocity : 1;       // Mask: 0x20, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bForceOverrideCharacterFlyingVelocity : 1;         // Mask: 0x40, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bForceOverrideCharacterNewFallVelocity : 1;        // Mask: 0x80, PropSize: 0x10xA90(0x1)(None)
	uint8                                        bOverrideCharacterLanding : 1;                     // Mask: 0x1, PropSize: 0x10xA91(0x1)(None)
	uint8                                        bOverrideCharacterMovementInput : 1;               // Mask: 0x2, PropSize: 0x10xA91(0x1)(None)
	uint8                                        BitPad_29F : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3364[0xE];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AOEBuffIntervalMin;                                // 0xAA0(0x4)(None)
	float                                        AOEBuffIntervalMax;                                // 0xAA4(0x4)(None)
	float                                        MaximumVelocityZForSlowingFall;                    // 0xAA8(0x4)(None)
	uint8                                        Pad_3365[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAllowMultiUseEntriesFromSelf : 1;                 // Mask: 0x1, PropSize: 0x10xAB0(0x1)(None)
	uint8                                        BitPad_2A0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3366[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPHandleOnStopFire : 1;                        // Mask: 0x1, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        bForceCrosshair : 1;                               // Mask: 0x2, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        bPreventLogoutSleeping : 1;                        // Mask: 0x4, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        bUseInterceptInstigatorPlayerEmote : 1;            // Mask: 0x8, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        bTriggerBPStasis : 1;                              // Mask: 0x10, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        bTriggerBPUnstasis : 1;                            // Mask: 0x20, PropSize: 0x10xAB4(0x1)(None)
	uint8                                        BitPad_2A1 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bAddTPVCameraOffset;                               // 0xAB5(0x1)(None)
	bool                                         bOverrideTPVCameraOffset;                          // 0xAB6(0x1)(None)
	uint8                                        Pad_3367[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TPVCameraOffset;                                   // 0xAB8(0x18)(None)
	bool                                         bOverrideTPVCameraOffsetMultiplier;                // 0xAD0(0x1)(None)
	uint8                                        Pad_3368[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TPVCameraOffsetMultiplier;                         // 0xAD8(0x18)(None)
	bool                                         bUseCenteredTPVCamera;                             // 0xAF0(0x1)(None)
	bool                                         bUseBlueprintAnimNotifications;                    // 0xAF1(0x1)(None)
	uint8                                        bUseBPGetGravity : 1;                              // Mask: 0x1, PropSize: 0x10xAF2(0x1)(None)
	uint8                                        bUseBPOnOwnerMassTeleportEvent : 1;                // Mask: 0x2, PropSize: 0x10xAF2(0x1)(None)
	uint8                                        bUseBPShouldForceOwnerDedicatedMovementTickPerFrame : 1; // Mask: 0x4, PropSize: 0x10xAF2(0x1)(None)
	uint8                                        BitPad_2A2 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3369[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAllowOnlyCustomFallDamage : 1;                    // Mask: 0x1, PropSize: 0x10xAF4(0x1)(None)
	uint8                                        BitPad_2A3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_336A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPGetMoveAnimRate : 1;                         // Mask: 0x1, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        bUseBPOverrideTargetingDesire : 1;                 // Mask: 0x2, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        bBuffPreventsApplyingLevelUps : 1;                 // Mask: 0x4, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        bBuffPreSerializeForInstigator : 1;                // Mask: 0x8, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        bUseFinalAdjustDamage : 1;                         // Mask: 0x10, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        bUseBPOverrideWaterJumpVelocity : 1;               // Mask: 0x20, PropSize: 0x10xAF8(0x1)(None)
	uint8                                        BitPad_2A4 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_336B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBP_OnOwnerDealtDamage : 1;                     // Mask: 0x1, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bUseGetGravityZScale : 1;                          // Mask: 0x2, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bUseBP_AdjustDamageEx : 1;                         // Mask: 0x4, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bUseBP_OverrideTerminalVelocity : 1;               // Mask: 0x8, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bUseBuffOverrideFinalWanderLocation : 1;           // Mask: 0x10, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bModifyMaxAcceleration : 1;                        // Mask: 0x20, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bModifyRotationRate : 1;                           // Mask: 0x40, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bModifyFriction : 1;                               // Mask: 0x80, PropSize: 0x10xAFC(0x1)(None)
	uint8                                        bDisableFootstepsParticles : 1;                    // Mask: 0x1, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bForceAllowAddingWithoutController : 1;            // Mask: 0x2, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bForceAllowWhileBuried : 1;                        // Mask: 0x4, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bUseBP_OnOwnerTeleported : 1;                      // Mask: 0x8, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bUseBPAdjustRadialDamage : 1;                      // Mask: 0x10, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bUseForcedBuffAimOverride : 1;                     // Mask: 0x20, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bUseBPPreventTekArmorBuffs : 1;                    // Mask: 0x40, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bBuffPreventsInventoryAccess : 1;                  // Mask: 0x80, PropSize: 0x10xAFD(0x1)(None)
	uint8                                        bReactivateWithNewDamageCauser : 1;                // Mask: 0x1, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bUseBPDinoNameColorOverride : 1;                   // Mask: 0x2, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bBuffPreventsCryo : 1;                             // Mask: 0x4, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bUseBuffOverrideInventoryAccessInput : 1;          // Mask: 0x8, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bListenForInput : 1;                               // Mask: 0x10, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bInterceptUseAction : 1;                           // Mask: 0x20, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bInterceptWeaponToggle : 1;                        // Mask: 0x40, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bUseBPPreventNotifySound : 1;                      // Mask: 0x80, PropSize: 0x10xAFE(0x1)(None)
	uint8                                        bBuffDrawFloatingHUDRemotePlayers : 1;             // Mask: 0x1, PropSize: 0x10xAFF(0x1)(None)
	uint8                                        bUseConsolidatedMultiUseWheel : 1;                 // Mask: 0x2, PropSize: 0x10xAFF(0x1)(None)
	uint8                                        BitPad_2A5 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        CharacterMultiplier_DefaultExtraDamageMultiplier;  // 0xB00(0x4)(None)
	uint8                                        bForceAlwaysAllowBuff : 1;                         // Mask: 0x1, PropSize: 0x10xB04(0x1)(None)
	uint8                                        bForceSelfTick : 1;                                // Mask: 0x2, PropSize: 0x10xB04(0x1)(None)
	uint8                                        bForceInstigatorTick : 1;                          // Mask: 0x4, PropSize: 0x10xB04(0x1)(None)
	uint8                                        bSkipInstigatorTick : 1;                           // Mask: 0x8, PropSize: 0x10xB04(0x1)(None)
	uint8                                        BitPad_2A6 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowTurretsToTargetInstigatorIfTraceHitsBuff : 1; // Mask: 0x40, PropSize: 0x10xB04(0x1)(None)
	uint8                                        bIsHighRiskMissionBuff : 1;                        // Mask: 0x80, PropSize: 0x10xB04(0x1)(None)
	uint8                                        Pad_336C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StaminaDrainMultiplier;                            // 0xB08(0x4)(None)
	uint8                                        Pad_336D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DisabledWeaponTags;                                // 0xB10(0x10)(None)
	bool                                         bUseBPGetCrosshairColor;                           // 0xB20(0x1)(None)
	bool                                         bUseBPGetPlayerFootStepSound;                      // 0xB21(0x1)(None)
	bool                                         bUseBPModifyArmorValue;                            // 0xB22(0x1)(None)
	bool                                         bShowMammalIncubationOptions;                      // 0xB23(0x1)(None)
	float                                        ExtendBuffTimeOverride;                            // 0xB24(0x4)(None)
	float                                        AdditionalRidingDistance;                          // 0xB28(0x4)(None)
	uint8                                        Pad_336E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPPreClaimWildFollower : 1;                    // Mask: 0x1, PropSize: 0x10xB34(0x1)(None)
	uint8                                        bUseBPGetBuffLevelUpStatOverride : 1;              // Mask: 0x2, PropSize: 0x10xB34(0x1)(None)
	uint8                                        bUseBPBuffKilledSomethingEvent : 1;                // Mask: 0x4, PropSize: 0x10xB34(0x1)(None)
	uint8                                        BitPad_2A7 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_336F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBuffMPCAdjuster>              MPCAdjusters;                                      // 0xB38(0x10)(ZeroConstructor)
	bool                                         bBuffHidesNonWeaponHUD;                            // 0xB48(0x1)(None)
	uint8                                        bUseBPNofityMontagePlay : 1;                       // Mask: 0x1, PropSize: 0x10xB49(0x1)(None)
	uint8                                        Pad_3371[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalBuff* GetDefaultObj();

	void UpdateStaticPathingDestination(const struct FVector& LocOverride, float RandomOffsetMultiplier, bool UseRandomNegativeXDir, bool OrientRandOffsetByRotation, const struct FRotator& RandOffsetByRotation, float GroundCheckSpreadOverride, const struct FVector& ReturnValue);
	void UpdateBuffPersistentData();
	void UpdateBuffLifetime(float NewLifetime, bool bRestartBuffLifetime);
	void StaticAddBuff(class UClass* BuffClass, class APrimalCharacter* ForCharacter, class UPrimalItem* AssociatedItem, class AActor* DamageCauser, bool bForceOnClient, class APrimalBuff* ReturnValue);
	void ShouldUseAutonomousCorrectionOffset(bool ReturnValue);
	void ShouldForceOwnerDedicatedMovementTickPerFrame(bool ReturnValue);
	void SetValueToAddPerSecond(enum class EPrimalCharacterStatusValue StatusValueType, float Value);
	void SetupForInstigator();
	void SetGestationMonitoringTarget(class APrimalDinoCharacter* ForTarget, bool bEnable);
	void SetBuffCauser(class AActor* CausedBy);
	void ServerRequestRelatedMissionData();
	void ResetServerBuffTick(float MinTime, float MaxTime);
	void ResetClientBuffTick(float MinTime, float MaxTime);
	void ResetBuffStart(bool ReturnValue);
	void ReduceBuffTime(float AmountOfTimeToReduce, bool ReturnValue);
	void PreventJump(bool ReturnValue);
	void PreventInstigatorMovementMode(enum class EMovementMode NewMovementMode, uint8 NewCustomMode, bool ReturnValue);
	void PreventInstigatorAttack(int32 AttackIndex, bool ReturnValue);
	void PreventBlockingWithShield(bool ReturnValue);
	void PreventActorTargeting(class AActor* ByActor, bool ReturnValue);
	void OnOwnerTeleported();
	void OnInputEvent(class APrimalCharacter* ForPrimalCharacter, enum class EPrimalCharacterInputType InputType);
	void OnCapsuleHitCallback(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBuffLifetimeUpdated();
	void NotifyDamage(float DamageAmount, class UClass* DamageClass, class AController* EventInstigator, class AActor* DamageCauser);
	void NotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
	void NotifyBumpedByPawn(class APrimalCharacter* BumpedBy);
	void NetSyncBuffLifetime();
	void NetResetBuffStart();
	void NetDeactivate();
	void Multi_SyncBuffLifetime(float NewDeactivateAfterTime);
	void IsOwningClient(bool ReturnValue);
	void InterceptInstigatorPlayerEmoteAnim(class UAnimMontage* EmoteAnim, bool ReturnValue);
	void InstigatorDie();
	void HideBuffFromHUD(bool ReturnValue);
	void HandleBuffAnimNotify(class FName AnimNotifyName, const class FString& AnimNotifyStringData);
	void GetValueToAddPerSecond(enum class EPrimalCharacterStatusValue StatusValueType, float ReturnValue);
	void GetUniqueName(const class FString& ReturnValue);
	void GetTimeLeft(float ReturnValue);
	void GetRemainingTime(float ReturnValue);
	void GetOverrideWaterJumpVelocity(float OutOfWaterZ, float ReturnValue);
	void GetInstigatorPlayerController(class APlayerController* ReturnValue);
	void GetHUDProgressBarPercent(float ReturnValue);
	void GetForcedBuffAimOverride(bool bIsWeaponAim, const struct FRotator& ReturnValue);
	void GetEnabledGestationMonitoringTargets(const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void GetDebugInfoString(const class FString& ReturnValue);
	void GetDeactivationTime(double ReturnValue);
	void GetCustomTooltip(const struct FVector2D& TooltipPadding, const struct FVector2D& TooltipScale, const struct FVector& TooltipLocationOffset, class UClass* ReturnValue);
	void GetBuffType(int32 ReturnValue);
	void GetBuffTickServerDeltaTime(float ReturnValue);
	void GetBuffTickClientDeltaTime(float ReturnValue);
	void GetBuffPostprocessMaterial(class UMaterialInstanceDynamic* ReturnValue);
	void GetBuffPostprocessIntensity(float ReturnValue);
	void GetBuffDescription(const struct FStatusValueModifierDescription& ReturnValue);
	void ExtendBuffTime(float AmountOfAdditionalTime, bool ReturnValue);
	void DrawBuffFloatingHUD(int32 BuffIndex, class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
	void DoTeleporterHaptics(class APlayerController* PC, const struct FVector& Location, float ElapsedTime);
	void DinoInstigatorReceivedRider(class AShooterCharacter* Rider);
	void DinoInstigatorClearedRider();
	void ClientReceiveRelatedMissionData(class AMissionType* InMission, bool InHasRelatedMission);
	void BuffTickServer(float DeltaTime);
	void BuffTickClient(float DeltaTime);
	void BuffPostAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType);
	void BuffOverrideInventoryAccessInput(class AController* InController, bool bInputPressed, bool ReturnValue);
	void BuffOverrideFinalWanderLocation(const struct FVector& OutVec, bool ReturnValue);
	void BuffAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* TheDamageCauser, class UClass* TheDamgeType, float ReturnValue);
	void BPUnstasis();
	void BPStasis();
	void BPShouldForceOwnerDedicatedMovementTickPerFrame(bool ReturnValue);
	void BPSetupForInstigator(class AActor* ForInstigator);
	void BPResetBuffStart();
	void BPReactivateWithDamageCauser(class AActor* ForInstigator, class AActor* ForDamageCauser);
	void BPPreventThrowingItem(class UPrimalItem* ForItem, bool ReturnValue);
	void BPPreventTekArmorBuffs(const TArray<class FName>& ReturnValue);
	void BPPreventRunning(bool ReturnValue);
	void BPPreventRidingInstigator(class APrimalCharacter* ForPawn, bool ReturnValue);
	void BPPreventOnStartJump(bool ReturnValue);
	void BPPreventNotifySound(class USoundBase* SoundIn, bool ReturnValue);
	void BPPreventInstigatorMovementMode(enum class EMovementMode NewMovementMode, uint8 NewCustomMode, bool ReturnValue);
	void BPPreventInstigatorAttack(int32 AttackIndex, bool ReturnValue);
	void BPPreventflight(bool ReturnValue);
	void BPPreventFirstPerson(bool ReturnValue);
	void BPPreventCharacterStatusValueModifiers(class APrimalCharacter* ForInstigator, bool ReturnValue);
	void BPPreventCharacterLanding(const struct FVector& ImpactPoint, const struct FVector& ImpactAccel, const struct FVector& ImpactVelocity, const struct FVector& NewVelocity, bool ReturnValue);
	void BPPreventAddingOtherBuff(class UClass* AnotherBuffClass, bool ReturnValue);
	void BPPreSetupForInstigator(class AActor* ForInstigator);
	void BPPreSerializeForInstigator(bool bBeginningSerialize);
	void BPPreClaimWildFollower(class AShooterPlayerController* ByPC);
	void BPOverrideWeaponBob(const struct FVector& InWeaponBob, const struct FVector& ReturnValue);
	void BPOverrideTargetingDesire(class AActor* ForTarget, float ForTargetingDesireValue, float ReturnValue);
	void BPOverrideTalkerCharacter(class APrimalCharacter* ReturnValue);
	void BPOverrideRightShoulderOnPlayer(class APlayerController* PC, bool ReturnValue);
	void BPOverrideIsNetRelevantFor(class APlayerController* RealViewer, class AActor* Viewer, const struct FVector& SrcLocation, bool ReturnValue);
	void BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime, const struct FVector& ReturnValue);
	void BPOverrideCameraViewTarget(class FName CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool bOverrideCameraLocation, const struct FVector& CameraLocation, bool bOverrideCameraRotation, const struct FRotator& CameraRotation, bool bOverrideCameraFOV, float CameraFOV);
	void BPOverrideBuffToGiveOnDeactivation(class UClass* ReturnValue);
	void BPOnPreventedFiringDisabledWeapon(class AShooterWeapon* Weapon, class FName PreventingTag);
	void BPOnOwnerMassTeleportEvent(enum class EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
	void BPOnInstigatorMovementModeChangedNotify(enum class EMovementMode PrevMovementMode, uint8 PreviousCustomMode, enum class EMovementMode NewMovementMode, uint8 NewCustomMode);
	void BPOnInstigatorCapsuleComponentHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BPOnInputEvent(enum class EPrimalCharacterInputType InputType);
	void BPNotifyPreventDismounting(class APrimalDinoCharacter* FromDino);
	void BPNotifyOtherBuffDeactivated(class APrimalBuff* OtherBuff);
	void BPNotifyOtherBuffActivatedToThisBuffClass(class APrimalBuff* ActivatedBuff);
	void BPNotifyOtherBuffActivated(class APrimalBuff* OtherBuff);
	void BPNotifyItemRemoved(class UPrimalItem* AnItem);
	void BPNotifyItemQuantityUpdated(class UPrimalItem* AnItem, int32 Amount);
	void BPNotifyItemAdded(class UPrimalItem* AnItem, bool bEquipItem);
	void BPNotifyExperienceGained(float ActualExpGained, float ExpectedExpGain, enum class EXPType ExpTypeGained);
	void BPNonDedicatedPlayerPostAnimUpdate();
	void BPNofityMontagePlay(class UAnimMontage* Montage);
	void BPModifyPlayerBoneModifiers(const TArray<struct FBoneModifier>& InBoneModifiers, const TArray<struct FBoneModifier>& ReturnValue);
	void BPModifyArmorValue(class UPrimalItem* ForItem, float BaseArmorValue, float ReturnValue);
	void BPIsValidUnStasisCaster(bool ReturnValue);
	void BPIsCharacterHardAttached(bool ReturnValue);
	void BPInterceptWeaponToggle(bool ReturnValue);
	void BPInterceptUseAction(bool ReturnValue);
	void BPInstigatorUnpossessed();
	void BPInstigatorSleeped(bool bIsSleeped);
	void BPInstigatorReceivedKillingDamage();
	void BPInstigatorPossessed(class AController* ByController);
	void BPInstigatorLocalPossessed(class AShooterPlayerController* ByController);
	void BPInstigatorDied();
	void BPInitializedCharacterAnimScriptInstance();
	void BPInformDamageCauserOfBuffAdded(class APrimalCharacter* ForCharacter, class AActor* DamageCauser, bool ReturnValue);
	void BPHandleOnStopFire(bool bFromGamepad);
	void BPHandleOnStopAltFire(bool bFromGamepad);
	void BPHandleOnStartFire(bool bFromGamepad);
	void BPHandleOnStartAltFire(bool bFromGamepad);
	void BPGetWaypointsBuff(const TArray<struct FPointOfInterestData_ForCompanion>& IndicatorsOut);
	void BPGetPlayerFootStepSound(class USoundCue* ReturnValue);
	void BPGetMoveAnimRate(float ReturnValue);
	void BPGetHUDElements(class APlayerController* ForPC, const TArray<struct FHUDElement>& OutElements);
	void BPGetGravityZScale(float CurrentScale, float ReturnValue);
	void BPGetDinoNameColorOverride(class AShooterHUD* HUD, const struct FColor& ColorToOverride, const struct FColor& ReturnValue);
	void BPGetDebugInfoString(const class FString& ReturnValue);
	void BPGetCrosshairColor(const struct FColor& ReturnValue);
	void BPGetBabyImprintingSpeedMultiplier(float ReturnValue);
	void BPForceDinoNameTargetingTeamOverride(class AShooterHUD* HUD, int32 TargetingTeamToCheck, int32 ReturnValue);
	void BPForceCameraStyle(class APrimalCharacter* ForViewTarget, enum class ECameraStyle ReturnValue);
	void BPFinalAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* InDamageCauser, class UClass* TheDamgeType, float ReturnValue);
	void BPExcludeAoEActor(class AActor* ActorToConsider, bool ReturnValue);
	void BPDrawBuffStatusHUD(class AShooterHUD* HUD, float XPos, float YPos, float ScaleMult);
	void BPDinoRefreshColorization(const TArray<struct FLinearColor>& DinoColors, const TArray<struct FLinearColor>& OverrideColors);
	void BPDeactivated(class AActor* ForInstigator);
	void BPDeactivate();
	void BPCustomAllowAddBuff(class APrimalCharacter* ForCharacter, class AActor* DamageCauser, bool ReturnValue);
	void BPCheckPreventInput(enum class EPrimalCharacterInputType InputType, bool ReturnValue);
	void BPCharacterDetach();
	void BPCanBeCarried(class APrimalCharacter* ByCarrier, bool ReturnValue);
	void BPBuffPreventUploading(bool ReturnValue);
	void BPBuffKilledSomethingEvent(class APrimalCharacter* KilledTarget);
	void BPBPGetCameraShakeScalar(class UClass* CurrentShake, float CurrentScale, float ReturnValue);
	void BPAnimNotifyCustomState_End(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void BPAdjustStatusValueModification(class UPrimalCharacterStatusComponent* ForComponent, enum class EPrimalCharacterStatusValue ValueType, float InAmount, class UClass* DamageTypeClass, bool bManualModification, float ReturnValue);
	void BPAdjustRadialDamage(float CurrentDamage, const struct FVector& Origin, const struct FRadialDamageEvent& DamageEvent, float ReturnValue);
	void BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo, const struct FVector& ReturnValue);
	void BPAdjustDamage_Ex(float Damage, const struct FHitResult& HitInfo, const struct FVector& ImpulseDir, class AController* EventInstigator, class AActor* InDamageCauser, class UClass* TheDamgeType, float ReturnValue);
	void BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ, const struct FVector& ReturnValue);
	void BPActivated(class AActor* ForInstigator);
	void BP_OverrideTerminalVelocity(float ReturnValue);
	void BP_OverrideMoveRightInput(float CurrentInput, float ReturnValue);
	void BP_OverrideMoveForwardInput(float CurrentInput, float ReturnValue);
	void BP_OverrideCharacterWalkingVelocity(const struct FVector& InitialVelocity, float Friction, float DeltaTime, const struct FVector& ReturnValue);
	void BP_OverrideCharacterSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime, const struct FVector& ReturnValue);
	void BP_OverrideCharacterFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime, const struct FVector& ReturnValue);
	void BP_OnOwnerTeleported();
	void BP_OnOwnerDealtDamage(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
	void BP_OnBuffLifetimeUpdated();
	void BP_ModifyCharacterFOV(float InFOV, float ReturnValue);
	void ApplyPhysicsImpulses(float DeltaSeconds);
	void AllowPostProcessEffect(bool ReturnValue);
	void AddDamageStatusValueModifier(class APrimalCharacter* AddToCharacter, enum class EPrimalCharacterStatusValue ValueType, bool bSpeedToAddInSeconds, bool bContinueOnUnchangedValue, bool bResetExistingModifierDescriptionIndex, bool bSetValue, bool bSetAdditionalValue, float LimitExistingModifierDescriptionToMaxAmount, float DamageMultiplierAmountToAdd, float SpeedToAdd, int32 StatusValueModifierDescriptionIndex, bool bUsePercentualDamage, bool bMakeUntameable, float PercentualDamage, class UClass* ScaleValueByCharacterDamageType);
	void AddBuffLifetime(float AdditionalLifetime);
};

// 0x20 (0x48 - 0x28)
// Class ShooterGame.PrimalBuffPersistentData
class UPrimalBuffPersistentData : public UObject
{
public:
	bool                                         bPermanentlyPersist;                               // 0x28(0x1)(None)
	uint8                                        Pad_342A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ForPrimalBuffClass;                                // 0x30(0x8)(None)
	class FString                                ForPrimalBuffClassString;                          // 0x38(0x10)(None)

	static class UClass* StaticClass();
	static class UPrimalBuffPersistentData* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class ShooterGame.PrimalBuffPersistentData_MissionData
class UPrimalBuffPersistentData_MissionData : public UPrimalBuffPersistentData
{
public:
	class AMissionType*                          ActiveMission;                                     // 0x48(0x8)(ZeroConstructor)
	int32                                        ActiveMissionIndex;                                // 0x50(0x4)(None)
	uint8                                        Pad_3431[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSerializedMissionData>        MissionData;                                       // 0x58(0x10)(None)

	static class UClass* StaticClass();
	static class UPrimalBuffPersistentData_MissionData* GetDefaultObj();

};

// 0x960 (0x14B0 - 0xB50)
// Class ShooterGame.PrimalBuff_Companion
class APrimalBuff_Companion : public APrimalBuff
{
public:
	class USceneComponent*                       CompanionRoot;                                     // 0xB50(0x8)(ZeroConstructor)
	class USkeletalMeshComponentWithSoftRef*     CompanionMeshComp;                                 // 0xB58(0x8)(ZeroConstructor)
	class USphereComponent*                      CompanionUseSphereComp;                            // 0xB60(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AShooterCharacter>      MyPlayer;                                          // 0xB68(0x8)(ZeroConstructor)
	TWeakObjectPtr<class AShooterPlayerController> MyPC;                                              // 0xB70(0x8)(ZeroConstructor)
	uint8                                        bDebugCompanion : 1;                               // Mask: 0x1, PropSize: 0x10xB78(0x1)(None)
	uint8                                        bIsOrbitingPointOfInterest : 1;                    // Mask: 0x2, PropSize: 0x10xB78(0x1)(None)
	uint8                                        bHasReachedPointOrbit : 1;                         // Mask: 0x4, PropSize: 0x10xB78(0x1)(None)
	uint8                                        BitPad_2A8 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3473[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReachPointOrbitWithinDist;                         // 0xB7C(0x4)(None)
	float                                        ReactionDialogVolumeMultiplier;                    // 0xB80(0x4)(None)
	float                                        CompanionViewDot;                                  // 0xB84(0x4)(None)
	class USoundAttenuation*                     CompanionSoundAttenuation;                         // 0xB88(0x8)(ZeroConstructor)
	class UClass*                                DefaultMissionCompanionReactionData;               // 0xB90(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              CurrentCompanionReactionVFX;                       // 0xB98(0x8)(ZeroConstructor)
	class UAudioComponent*                       CurrentCompanionReactionSFX;                       // 0xBA0(0x8)(ZeroConstructor)
	TArray<struct FPointOfInterestData_ForCompanion> CurrentPointsOfInterest;                           // 0xBA8(0x10)(ZeroConstructor)
	enum class ECompanionState                   CompanionState_Current;                            // 0xBB8(0x1)(None)
	enum class ECompanionState                   CompanionState_Previous;                           // 0xBB9(0x1)(None)
	uint8                                        Pad_3474[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCompanionReactionData>        ReactionStack;                                     // 0xBC0(0x10)(ZeroConstructor)
	TArray<class UMaterialInterface*>            DialogueIconOverrideStack;                         // 0xBD0(0x10)(ZeroConstructor)
	TArray<int32>                                CurrentIDStack;                                    // 0xBE0(0x10)(None)
	struct FVector                               CurrentFocusedLocation;                            // 0xBF0(0x18)(None)
	uint8                                        Pad_3475[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPointOfInterestData_ForCompanion     CurrentFocusedPointData;                           // 0xC10(0x4E0)(ZeroConstructor)
	struct FCompanionEventData                   CurrentEventData;                                  // 0x10F0(0x50)(ZeroConstructor)
	class AActor*                                CurrentEventActor;                                 // 0x1140(0x8)(ZeroConstructor)
	class FName                                  LastPointTag_StartOrbit;                           // 0x1148(0x8)(None)
	class FName                                  LastPointTag_ReachedOrbit;                         // 0x1150(0x8)(None)
	double                                       LastPlayedReactionNetworkTime;                     // 0x1158(0x8)(None)
	uint8                                        bShowsHexagonsInInventory : 1;                     // Mask: 0x1, PropSize: 0x10x1160(0x1)(None)
	uint8                                        bEnableDebugReactions : 1;                         // Mask: 0x2, PropSize: 0x10x1160(0x1)(None)
	uint8                                        BitPad_2A9 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3476[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCompanionReactionData                PreviouslyPlayedReaction;                          // 0x1168(0xB0)(ZeroConstructor)
	uint8                                        bDontPlayEnglishLinesAsLocalizationFallback : 1;   // Mask: 0x1, PropSize: 0x10x1218(0x1)(None)
	uint8                                        BitPad_2AA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3477[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        FullyTranslatedLanguages;                          // 0x1220(0x10)(None)
	class UClass*                                HUDOverlayToolTipWidgetExtended;                   // 0x1230(0x8)(ZeroConstructor)
	TArray<int32>                                ReactionExplorerNotesToUnlock;                     // 0x1238(0x10)(None)
	uint8                                        Pad_3478[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            AsyncLoadedDialogueAnimTexture;                    // 0x1260(0x8)(ZeroConstructor)
	class USoundCue*                             AsyncLoadedSoundCue;                               // 0x1268(0x8)(ZeroConstructor)
	class USoundWave*                            AsyncLoadedSoundWave;                              // 0x1270(0x8)(ZeroConstructor)
	class FName                                  AnimTextureParamName;                              // 0x1278(0x8)(None)
	class FName                                  AnimTextureStartTimeParamName;                     // 0x1280(0x8)(None)
	class FName                                  AnimTextureDurationParamName;                      // 0x1288(0x8)(None)
	float                                        AnimTextureDurationOffset;                         // 0x1290(0x4)(None)
	uint8                                        bIsAwaitingLoadedTexture : 1;                      // Mask: 0x1, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bHasFinishedLoadingTexture : 1;                    // Mask: 0x2, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bIsAwaitingLoadedSoundCue : 1;                     // Mask: 0x4, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bHasFinishedLoadingSoundWave : 1;                  // Mask: 0x8, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bIsAwaitingLoadedSoundWave : 1;                    // Mask: 0x10, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bIsAwaitingFallbackSubtitleAudio : 1;              // Mask: 0x20, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bHasFinishedLoadingSoundCue : 1;                   // Mask: 0x40, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bProbablyPlayingReaction : 1;                      // Mask: 0x80, PropSize: 0x10x1294(0x1)(None)
	uint8                                        bHasSomePaddingBeforePlayingReaction : 1;          // Mask: 0x1, PropSize: 0x10x1295(0x1)(None)
	uint8                                        bGoingToTryToSplitSoundCueForLocalization : 1;     // Mask: 0x2, PropSize: 0x10x1295(0x1)(None)
	uint8                                        bHasPlayedDefaultReactionAnimTexture : 1;          // Mask: 0x4, PropSize: 0x10x1295(0x1)(None)
	uint8                                        bIsPlayingFallbackReactionAnimTexture : 1;         // Mask: 0x8, PropSize: 0x10x1295(0x1)(None)
	uint8                                        bForceCompanionHidden : 1;                         // Mask: 0x10, PropSize: 0x10x1295(0x1)(None)
	uint8                                        BitPad_2AB : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3479[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentReactionSFXIndex;                           // 0x1298(0x4)(None)
	int32                                        PreviousReactionSFXIndex;                          // 0x129C(0x4)(None)
	struct FSoftObjectPath                       CurrentSoundWaveStringAssetReference;              // 0x12A0(0x20)(None)
	struct FSoftObjectPath                       CurrentSoundCueStringAssetReference;               // 0x12C0(0x20)(None)
	struct FSoftObjectPath                       CurrentAnimTextureStringAssetReference;            // 0x12E0(0x20)(None)
	struct FSoftObjectPath                       FallbackSubtitleAudioString;                       // 0x1300(0x20)(None)
	TArray<class UMaterialInstanceDynamic*>      MeshDynamicMaterials;                              // 0x1320(0x10)(ZeroConstructor)
	class UMaterialInterface*                    CompanionReactionSubtitleIcon;                     // 0x1330(0x8)(ZeroConstructor)
	struct FSoftObjectPath                       DefaultReactionAnimtexture;                        // 0x1338(0x20)(None)
	struct FLocalizedSoundWaveAnimTexturePairArrays LocalizedAudioTracks;                              // 0x1358(0x20)(None)
	bool                                         IsUsingLocalizedAudioTrack;                        // 0x1378(0x1)(None)
	bool                                         DebugBypassVRTeleportRestrictions;                 // 0x1379(0x1)(None)
	bool                                         ForcedMonologueCheat;                              // 0x137A(0x1)(None)
	uint8                                        Pad_347A[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class AMissionType>            FinalBossFightEasy;                                // 0x1380(0x30)(ZeroConstructor)
	TSoftClassPtr<class AMissionType>            FinalBossFightMed;                                 // 0x13B0(0x30)(ZeroConstructor)
	TSoftClassPtr<class AMissionType>            FinalBossFightHard;                                // 0x13E0(0x30)(ZeroConstructor)
	TSoftClassPtr<class AMissionType>            FinalBossFightFlowTest;                            // 0x1410(0x30)(ZeroConstructor)
	float                                        AllowedHLNAFocusedSelectedRemoteTargetDistance;    // 0x1440(0x4)(None)
	uint8                                        Pad_347B[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnReactionPlayed_Delegate;                         // 0x1460(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnReactionStopped_Delegate;                        // 0x1470(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnReactionAnimPlayed_Delegate;                     // 0x1480(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnReactionComponentSpawned_VFX_Delegate;           // 0x1490(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnReactionComponentSpawned_SFX_Delegate;           // 0x14A0(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalBuff_Companion* GetDefaultObj();

	void TraceForCompanionBlockersFromPlayer(const struct FVector& AdjustedLocation, const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bDebug, float TraceRadius, bool ReturnValue);
	void Tick_UpdateCompanionTransform(float DeltaTime);
	void Tick_UpdateCompanionState(float DeltaTime);
	void Tick_CompanionSearchForPOIs(float DeltaTime);
	void Tick_CompanionReactions(float DeltaTime);
	void Tick_CompanionEvents(float DeltaTime);
	void StopCompanionReaction();
	void StopCompanionMontage(class UAnimMontage* AnimToStop, float BlendOutTime);
	void StopCompanionEventExternal();
	void StopCompanionEvent();
	void StartCompanionEventExternal(class AActor* EventActor, const struct FCompanionEventData& WithEventData);
	void StartCompanionEvent(class AActor* EventActor, const struct FCompanionEventData& WithEventData);
	void ShouldOrbitPointOfInterest(const struct FPointOfInterestData_ForCompanion& WithPointData, bool ReturnValue);
	void SetUpAnimTexture();
	void SetCompaionHiddenSetting(bool IsHidden);
	void Server_SetCompanionState(enum class ECompanionState NewState);
	void RefreshCompanionColorization();
	void PlayLinkedCompanionReactionsByExplorerNoteIndex(int32 Index);
	void PlayCompanionMontage(class UAnimMontage* AnimToPlay, float BlendInTime, float BlendOutTime, float PlayRate, float ReturnValue);
	void OutputAsyncLoadedFiles();
	void OnSpawnHexagons(float OverrideCollectSFXVolume, bool VFXImmediatelyAttracts);
	void OnSpawnedForPlayer();
	void OnRep_CompanionState();
	void OnPlayerPlayAnimation(class UAnimMontage* PlayedAnim, float AnimDuration, class FName StartSectionName);
	void OnPlayerDeath(class APrimalCharacter* DiedCharacter);
	void OnMyPlayerMissionStarted(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission);
	void OnMyPlayerMissionComplete(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission, bool bSuccess);
	void OnMadeHexagonPurchase();
	void OnFoundPoI(const struct FPointOfInterestData_ForCompanion& FoundPointData, class AActor* FoundPointActor);
	void OnEndOverlapCompanionEventTrigger(class AActor* ForTrigger);
	void OnCompanionStateChanged();
	void OnCompanionReactionStopped(const struct FCompanionReactionData& StoppedReactionData, int32 UniqueID);
	void OnCompanionReactionPlayed(const struct FCompanionReactionData& PlayedReactionData, int32 UniqueID);
	void OnCompanionEventStarted(const struct FCompanionEventData& StartingEventData);
	void OnCompanionEventEnded(const struct FCompanionEventData& StoppingEventData);
	void OnBeginOverlapCompanionEventTrigger(class AActor* ForTrigger);
	void NotifyItemCrafted(class UPrimalItem* AnItem);
	void NotifyItemAddedToCropPlot(class UPrimalItem* AnItem);
	void NotifyHasTamedDino(class UClass* DinoClass);
	void Net_SetCompanionState(enum class ECompanionState NewState);
	void IsPlayingCompanionReaction(bool ReturnValue);
	void IsPlayerLookingAtCompanion(bool ReturnValue);
	void IsPlayerADS(bool ReturnValue);
	void IsCompanionReadyToMonologue(bool ReturnValue);
	void IsCompanionAbleToMonologue(bool ReturnValue);
	void HasCompanionReachedPointOrbit(const struct FPointOfInterestData_ForCompanion& OfPointData, bool ReturnValue);
	void GetPointCompanionWorldOrbitOrigin(const struct FPointOfInterestData_ForCompanion& ForPointData, const struct FVector& ReturnValue);
	void GetMyPlayerHUD(class AShooterHUD* ReturnValue);
	void GetCurrentCompanionReactionData(const struct FCompanionReactionData& ReturnValue);
	void GetCurrentCompanionEventData(const struct FCompanionEventData& ReturnValue);
	void GetCompanionWorldLocation(const struct FVector& ReturnValue);
	void GetClosestNearbyPointOfInterest(const struct FPointOfInterestData_ForCompanion& ClosestPointData, const struct FVector& ClosestPointLoc, bool ReturnValue);
	void GetAllExplorerNotesInWorld(class UWorld* World, const TArray<class AActor*>& ReturnValue);
	void ForceUnhibernateAtLocation(const struct FVector& AtLocation, bool ReturnValue);
	void ForceHibernateAtLocation(const struct FVector& AtLocation, const TArray<class AActor*>& ActorsToHibernate, bool ReturnValue);
	void FocusOnRemoteTarget();
	void DrawFocusedActorToolTip(class AActor* TargetedActor);
	void ClientToggleForceMonologue(bool Newval);
	void ClientOutputAsyncLoadedFiles();
	void ClientAllowVRTeleport();
	void Client_AddCompanionReaction(const struct FCompanionReactionData& WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int32 UniqueID);
	void CanStartCompanionEvent(class AActor* EventActor, const struct FCompanionEventData& WithEventData, bool ReturnValue);
	void CanRemotelyFocusOnRemoteActorForTooltip(class AActor* TargetedActor, bool ReturnValue);
	void CanPlayEnvironmentalCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData, bool ReturnValue);
	void CanPlayCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData, bool ReturnValue);
	void BPServerside_IsPerMapExplorerNoteUnlocked(int32 ExplorerNoteIndex, bool CouldDetermine, bool HasPlayerUnlockedNote);
	void AnimateOutHLNASubtitleIcon();
	void AnimateInHLNASubtitleIcon();
	void AddCompanionReaction(const struct FCompanionReactionData& WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int32 UniqueID);
};

// 0x298 (0xDE8 - 0xB50)
// Class ShooterGame.PrimalBuff_Grappled
class APrimalBuff_Grappled : public APrimalBuff
{
public:
	TArray<struct FGrappleTether>                CurrentGrappleTethers;                             // 0xB50(0x10)(ZeroConstructor)
	TArray<struct FGrappleTether>                LastSyncedGrappleTethers;                          // 0xB60(0x10)(ZeroConstructor)
	TArray<struct FReplicatedGrappleTetherData>  ReplicatedGrappleTethers;                          // 0xB70(0x10)(ZeroConstructor)
	class APrimalCharacter*                      MyOwner;                                           // 0xB80(0x8)(ZeroConstructor)
	class APrimalCharacter*                      MyOwnerCDO;                                        // 0xB88(0x8)(ZeroConstructor)
	enum class EGrappleState                     GrappleState_Current;                              // 0xB90(0x1)(None)
	enum class EGrappleState                     GrappleState_Previous;                             // 0xB91(0x1)(None)
	enum class EGrappleState                     WantsGrappleState;                                 // 0xB92(0x1)(None)
	uint8                                        Pad_3517[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DefaultGrappledBuffClass;                          // 0xB98(0x8)(ZeroConstructor)
	class USoundCue*                             PullingSoundCue;                                   // 0xBA0(0x8)(ZeroConstructor)
	class USoundCue*                             ReleasingSoundCue;                                 // 0xBA8(0x8)(ZeroConstructor)
	class UStaticMesh*                           GrappleTetherMesh;                                 // 0xBB0(0x8)(ZeroConstructor)
	uint8                                        bDetachGrappledChars : 1;                          // Mask: 0x1, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bDebugGrappling : 1;                               // Mask: 0x2, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bDebugGrappling_AgainstSurface : 1;                // Mask: 0x4, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bAllowGrappleLogicOnRemoteClients : 1;             // Mask: 0x8, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bForceIdleGrappleState : 1;                        // Mask: 0x10, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bHasGrappleBuffInitialized : 1;                    // Mask: 0x20, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bIsOwnerAgainstSurface : 1;                        // Mask: 0x40, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bOwnerMovementAffectedByGrappleTethers : 1;        // Mask: 0x80, PropSize: 0x10xBB8(0x1)(None)
	uint8                                        bLastIsOwnerSubmerged : 1;                         // Mask: 0x1, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bLastIsOwnerSwinging : 1;                          // Mask: 0x2, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bHasAnyValidTethers : 1;                           // Mask: 0x4, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bHasValidReservedTethers : 1;                      // Mask: 0x8, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bBrokeAnyTethersThisFrame : 1;                     // Mask: 0x10, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bHasAnyGrappledChars : 1;                          // Mask: 0x20, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bHasAnyTethersAttachedToDynamicActors : 1;         // Mask: 0x40, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bDidOverrideVelocityThisFrame : 1;                 // Mask: 0x80, PropSize: 0x10xBB9(0x1)(None)
	uint8                                        bShouldResetOwnerVars : 1;                         // Mask: 0x1, PropSize: 0x10xBBA(0x1)(None)
	uint8                                        BitPad_2AC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3518[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxAllowedGrappleTethers;                          // 0xBBC(0x4)(None)
	float                                        ForceFallingWhenDirToTetherAboveUpDot;             // 0xBC0(0x4)(None)
	float                                        ForceFallingWhenAboveVelocityAwayFromAnchor;       // 0xBC4(0x4)(None)
	float                                        ForceFallingBelowTetherToOwnerDeltaZ;              // 0xBC8(0x4)(None)
	float                                        ReduceFallDamageUnderAngleToAnchor;                // 0xBCC(0x4)(None)
	float                                        GrappledFallDamageMult_MIN;                        // 0xBD0(0x4)(None)
	float                                        OwnerInput_SwingSpeed;                             // 0xBD4(0x4)(None)
	float                                        SwingingVelocityDampingRate_Idle;                  // 0xBD8(0x4)(None)
	float                                        SwingingVelocityDampingRate_Pulling;               // 0xBDC(0x4)(None)
	struct FVector2D                             SwingingVelocityDampingRateAxisMults_Pulling;      // 0xBE0(0x10)(None)
	float                                        SwingingVelocityDampingRate_Releasing;             // 0xBF0(0x4)(None)
	float                                        SwingingVelocityDampingRate_OwnerInput;            // 0xBF4(0x4)(None)
	float                                        TetherTensionVelocityDampingRate;                  // 0xBF8(0x4)(None)
	float                                        GrappleVelocityMAX;                                // 0xBFC(0x4)(None)
	float                                        SwingingClientPositionErrorOverride_Player;        // 0xC00(0x4)(None)
	float                                        SwingingClientPositionErrorOverride_Dino_MovingFlying; // 0xC04(0x4)(None)
	float                                        SwingingClientPositionErrorOverride_Dino_Stopped;  // 0xC08(0x4)(None)
	float                                        SwingingClientLocationInterpSpeed;                 // 0xC0C(0x4)(None)
	float                                        SwingingClientRotationInterpSpeed;                 // 0xC10(0x4)(None)
	float                                        SyncGrappleTetherLengthInterval;                   // 0xC14(0x4)(None)
	float                                        PullableWeightLimit;                               // 0xC18(0x4)(None)
	float                                        TetherMaxLength;                                   // 0xC1C(0x4)(None)
	float                                        TetherMinLength;                                   // 0xC20(0x4)(None)
	float                                        TetherAutoDetachUnderLength;                       // 0xC24(0x4)(None)
	float                                        TetherBreakLimit_OwnerPastCurrentLengthDelta;      // 0xC28(0x4)(None)
	float                                        TetherBreakLimit_OwnerPastCurrentLengthForTime;    // 0xC2C(0x4)(None)
	float                                        TetherBreakLimit_GrappledActorAboveVelocity;       // 0xC30(0x4)(None)
	float                                        TetherWidth;                                       // 0xC34(0x4)(None)
	double                                       LastGrappleTetherLengthSyncTime;                   // 0xC38(0x8)(None)
	struct FVector                               OwnerInput_CurrentSwingingVelocity;                // 0xC40(0x18)(None)
	struct FVector2D                             OwnerInput_CurrentSynced;                          // 0xC58(0x10)(None)
	struct FVector2D                             OwnerInput_LastSynced;                             // 0xC68(0x10)(None)
	double                                       OwnerInput_LastSyncTime;                           // 0xC78(0x8)(None)
	float                                        OwnerInput_SyncInverval;                           // 0xC80(0x4)(None)
	uint8                                        Pad_3519[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DirToAgainstSurface;                               // 0xC88(0x18)(None)
	struct FVector                               LastDirToAgainstSurface;                           // 0xCA0(0x18)(None)
	float                                        RequiredDirToSurfaceDotDeltaToUpdate;              // 0xCB8(0x4)(None)
	uint8                                        Pad_351A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               AgainstSurfaceNormal;                              // 0xCC0(0x18)(None)
	float                                        TetherPullMaxVelocity;                             // 0xCD8(0x4)(None)
	float                                        TetherPullAcceleration;                            // 0xCDC(0x4)(None)
	float                                        TetherPullMaxVelocity_GrappledChar;                // 0xCE0(0x4)(None)
	float                                        TetherPullAcceleration_GrappledChar;               // 0xCE4(0x4)(None)
	float                                        TetherReleaseMaxVelocity;                          // 0xCE8(0x4)(None)
	float                                        TetherReleaseMaxVelocity_GrappledChar;             // 0xCEC(0x4)(None)
	struct FVector                               CurrentTetherMoveVelocity;                         // 0xCF0(0x18)(None)
	struct FVector                               AvgParentCharVelocity;                             // 0xD08(0x18)(None)
	float                                        ClientSuggestTetherLength_AllowedDelta;            // 0xD20(0x4)(None)
	float                                        ClientSuggestTetherLength_AllowedInterval;         // 0xD24(0x4)(None)
	double                                       ClientSuggestTetherLength_LastReceivedTime;        // 0xD28(0x8)(None)
	float                                        ValidHitSurface_DistanceFromCapsuleEdge;           // 0xD30(0x4)(None)
	uint8                                        Pad_351B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ValidHitSurface_UpVectorAngleRange;                // 0xD38(0x10)(None)
	struct FVector2D                             LastProjectedOwnerInputs;                          // 0xD48(0x10)(None)
	float                                        OwnerCapsuleRadius;                                // 0xD58(0x4)(None)
	float                                        OwnerCapsuleHalfHeight;                            // 0xD5C(0x4)(None)
	struct FVector                               PreviousOwnerVelocity;                             // 0xD60(0x18)(None)
	float                                        TetherTensionStrength;                             // 0xD78(0x4)(None)
	float                                        TetherTensionExponent;                             // 0xD7C(0x4)(None)
	float                                        ForceFallingStateImpulse;                          // 0xD80(0x4)(None)
	uint8                                        Pad_351C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ReservedTetherTags;                                // 0xD88(0x10)(None)
	class FString                                TetherTagOwnerConnectorString;                     // 0xD98(0x10)(None)
	struct FVector2D                             GrappledGravityScaleRange;                         // 0xDA8(0x10)(None)
	float                                        GrappledGravityScaleMult_Idle;                     // 0xDB8(0x4)(None)
	float                                        GrappledGravityScaleMult_Pulling;                  // 0xDBC(0x4)(None)
	float                                        GrappledGravityScaleMult_Releasing;                // 0xDC0(0x4)(None)
	float                                        AtTetherLimitBelowDistFromEnd;                     // 0xDC4(0x4)(None)
	struct FVector                               LastGravity;                                       // 0xDC8(0x18)(None)
	float                                        LookingAtAgainstSurfaceAngle;                      // 0xDE0(0x4)(None)
	float                                        VelocityOverrideMaxDeltaTime;                      // 0xDE4(0x4)(None)

	static class UClass* StaticClass();
	static class APrimalBuff_Grappled* GetDefaultObj();

	void UpdateTethersByState(float DeltaTime);
	void UpdateTetherMasterRef(const struct FGrappleTether& ForTether, bool bInit, bool ReturnValue);
	void UpdateOwnerSwingingVelocity();
	void UpdateOwnerMovementSpeed(const struct FVector& WithCharVelocity);
	void UpdateGrappleTetherVars(const struct FGrappleTether& ForTether);
	void UpdateBrokenTethers();
	void UpdateAgainstSurfaceFromHits(const TArray<struct FHitResult>& Hits);
	void Tick_UpdateGrappleTethers(float DeltaTime);
	void Tick_UpdateAgainstSurface(float DeltaTime);
	void TetherHasValidMasterRef(const struct FGrappleTether& ForTether, bool ReturnValue);
	void SyncOwnerInputs(const struct FVector2D& NewInputs);
	void SyncGrappleTetherLengths();
	void SimulateTetherFriction(const struct FVector& WithCharVelocity, float DeltaTime);
	void SimulateTautTetherForces(const struct FVector& WithCharVelocity, float DeltaTime, float LastGravityZ);
	void ShouldUseDynamicTetherTension(const struct FGrappleTether& ForTether, bool ReturnValue);
	void ShouldTetherBreak(const struct FGrappleTether& ForTether, class APrimalCharacter* ForChar, float OverrideBreakPastDist, bool ReturnValue);
	void ShouldReturnToIdleGrappleState(bool ReturnValue);
	void ShouldReplicateOwnerInputs(bool ReturnValue);
	void ShouldOwnerBeAffectedByTether(const struct FGrappleTether& ForTether, enum class EGrappleState ForGrappeState, bool ReturnValue);
	void ShouldForceOwnerIntoFallingState(const struct FGrappleTether& ForTether, const struct FVector& WithOwnerVelocity, enum class EMovementMode CheckMovementModeOverride, bool ReturnValue);
	void SetupDelegateBindingsForChar(class APrimalCharacter* ForChar, bool bDoBind);
	void SetGrappleTetherLength(const struct FGrappleTether& ForTether, float SetNewLength, int32 ForTetherIndex, bool ReturnValue);
	void SetGrappleTetherAtIndexLength(int32 AtIndex, float SetNewLength, bool ReturnValue);
	void SetGrappleState(enum class EGrappleState NewGrappleState, bool bForceUpdate, bool ReturnValue);
	void Server_SyncOwnerInputs(const struct FVector2D& NewInputs);
	void Server_SuggestTetherLengths(const TArray<float>& NewTetherLengths);
	void Server_SuggestTetherLength(float NewTetherLength);
	void Server_SetGrappleState(uint8 NewGrappleState, bool bForceUpdate);
	void ResetOwnerVars();
	void ResetOwnerClientPositionErrorTolerance();
	void RemoveGrappleTether(int32 AtIndex, const class FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bForceNetSync, bool bRemoveAllTethersWithTag, bool ReturnValue);
	void RefreshAllTetherMasterRefs();
	void ReceiveTetherLengthSuggestion(int32 ForTetherIndex, float NewTetherLength);
	void ReceiveTetherLengthsSuggestion(const TArray<float>& NewTetherLengths);
	void OnRep_ReplicatedGrappleTethers();
	void OnRep_GrappleState();
	void OnReleasedPrimalChar(class APrimalCharacter* ReleasedChar);
	void OnOwnerSleepStateChanged(class APrimalCharacter* ForChar, bool bIsSleeping);
	void OnOwnerDeath(class APrimalCharacter* DyingChar);
	void OnOwnerCapsuleHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnGrappleTethersChanged();
	void OnGrappleTetherRemoved(const struct FGrappleTether& RemovedTether);
	void OnGrappleTetherBroken(int32 BrokenIndex);
	void OnGrappleTetherAdded(const struct FGrappleTether& AddedTether);
	void OnGrappleStateChangedNotify(uint8 NewGrappleState, bool bIsEarlyNotify);
	void OnGrappleStateChanged();
	void OnGrappledPrimalChar(class APrimalCharacter* GrappledChar, const struct FGrappleTether& WithMasterTether);
	void OnGrappledCharSleepStateChange(class APrimalCharacter* ForChar, bool bIsSleeping);
	void OnGrappledCharDeath(class APrimalCharacter* DyingChar);
	void OnAgainstValidSurfaceUpdated();
	void OnAgainstValidSurfaceStateChanged();
	void NetSyncGrappleTethers();
	void Multi_SyncGrappleTetherLengths(const TArray<float>& SyncedTetherLengths);
	void Multi_SyncGrappleTetherLength(float SyncedTetherLength);
	void ModifyTetherTensionLerpValue(float CurrentLerpValue, float ReturnValue);
	void ModifyTetherMoveVelocity(const struct FVector& CurrentMoveVelocity, const struct FGrappleTether& ForTether);
	void ModifyOverriddenCharVelocity(const struct FVector& CurrentCharVelocity, float DeltaTime);
	void ModifyGrappledCharVelocity(const struct FVector& CurrentCharVelocity, const struct FGrappleTether& ForTether, float DeltaTime);
	void MakeGrappleTether(const struct FCreateGrappleTetherData& FromData, class APrimalBuff_Grappled* ForMasterBuff, const struct FGrappleTether& ReturnValue);
	void IsValidSurfaceHit(const struct FHitResult& ForHit, bool ReturnValue);
	void IsValidGrappleHit(const struct FHitResult& ForHit, bool ReturnValue);
	void IsTethersMasterGrappleBuff(const struct FGrappleTether& CheckTether, bool ReturnValue);
	void IsTetherAtMaxLength(const struct FGrappleTether& ForTether, bool ReturnValue);
	void IsSwingingTowardsAxisCenter(const struct FGrappleTether& ForTether, bool ReturnValue);
	void IsOwnerLookingAtAgainstSurface(bool ReturnValue);
	void IsOwnerAgainstValidSurface(bool ReturnValue);
	void IsOwnerAboveGround(const struct FVector& FoundGroundLocation, float CheckDistance, bool ReturnValue);
	void IsHitWithinGrappleRange(const struct FHitResult& ForHit, bool ReturnValue);
	void IsGrappleTetherValid(const struct FGrappleTether& CheckTether, bool ReturnValue);
	void IsGrappledCharHardAttached(class APrimalCharacter* ForChar, bool ReturnValue);
	void IsCharPastMaxTetherLength(const struct FGrappleTether& ForTether, class APrimalCharacter* ForChar, bool ReturnValue);
	void InitializeGrappleTether(const struct FGrappleTether& InitTether, class APrimalBuff_Grappled* ByGrappleBuff, bool ReturnValue);
	void InitGrappleBuff();
	void GrappleTick(float DeltaTime);
	void GetTetherMasterRef(const struct FGrappleTether& ForTether, const struct FGrappleTether& MasterRef, bool ReturnValue);
	void GetTetherBreakLimit_OwnerPastCurrentLengthForTime(const struct FGrappleTether& ForTether, float ReturnValue);
	void GetTetherBreakLimit_OwnerPastCurrentLengthDelta(const struct FGrappleTether& ForTether, float ReturnValue);
	void GetTetherBreakLimit_GrappledActorAboveVelocity(const struct FGrappleTether& ForTether, float ReturnValue);
	void GetRequiredTetherLengthForChar(const struct FGrappleTether& ForTether, class APrimalCharacter* ForChar, float ReturnValue);
	void GetReplicatedOwnerInputs(const struct FVector2D& ReturnValue);
	void GetOwnerAppendedTetherTag(const class FString& WithRootTag, class APrimalBuff_Grappled* OwnerGrappleBuff, const class FString& ReturnValue);
	void GetNumValidTethers(bool bOnlyReservedTethers, int32 ReturnValue);
	void GetNumReservedTethers(int32 ReturnValue);
	void GetMinTetherLength(const struct FGrappleTether& ForTether, float ReturnValue);
	void GetMaxTetherLength(const struct FGrappleTether& ForTether, float ReturnValue);
	void GetInitGrappleAnchorRelativeOffset(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner, const struct FVector& ReturnValue);
	void GetGrappleVelocityDampingRate(class APrimalCharacter* ForChar, const struct FGrappleTether& ForTether, float ReturnValue);
	void GetGrappleTetherRootTag(const class FString& ForTag, const class FString& ReturnValue);
	void GetGrappleTetherReleaseMaxVelocity(class APrimalCharacter* ForReleasingChar, const struct FGrappleTether& ForTether, float ReturnValue);
	void GetGrappleTetherPullMaxVelocity(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether, float ReturnValue);
	void GetGrappleTetherPullAcceleration(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether, float ReturnValue);
	void GetGrappleAnchorWorldLocation(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner, const struct FVector& ReturnValue);
	void GetCurrentTetherMoveDir(const struct FGrappleTether& ForTether, const struct FVector& ReturnValue);
	void GetCurrentSwingingAxisValues(const struct FVector2D& ReturnValue);
	void GetCurrentGrappleState(const struct FGrappleTether& ForTether, enum class EGrappleState ReturnValue);
	void GetCharDistanceFromTetherEndRatio(const struct FGrappleTether& ForTether, class APrimalCharacter* ForChar, float ReturnValue);
	void GetCharAngleToGrappleTetherEnd(const struct FGrappleTether& ForTether, class APrimalCharacter* ForChar, float ReturnValue);
	void GetAverageTetherEndLocation(bool bReservedTethersOnly, const struct FVector& ReturnValue);
	void GetAllCurrentGrapplers(const TArray<class APrimalCharacter*>& ReturnValue);
	void GetActorAttachParentChar(class AActor* ForActor, class APrimalCharacter* ReturnValue);
	void EndGrapple();
	void DisplayGrappleSystemHudNotification(class AShooterPlayerController* ForPC, class AActor* FromActor, uint8 NotificationType, int32 NotificationID, const class FString& ReasonString, bool ReturnValue);
	void CustomGrappleTick(float DeltaTime);
	void ClampOwnerReleasingVelocity(const struct FVector& WithReleasingVelocity);
	void ClampGrappleVelocity(const struct FVector& ClampVelocity);
	void CheckForTetherBreak(const struct FGrappleTether& CheckTether, int32 WithIndex, float OverrideBreakPastDist);
	void CheckForAutoBreakTether(const struct FGrappleTether& CheckTether, bool ReturnValue);
	void CanUpdateTetherLength(const struct FGrappleTether& ForTether, float WithLength, bool ReturnValue);
	void CanTetherOwnerPullGrappledChar(const struct FGrappleTether& ForTether, bool ReturnValue);
	void CanSyncGrappleTetherLengths(bool ReturnValue);
	void CanReceiveNewGrappleTether(const class FString& WithTag, bool ReturnValue);
	void CanPullChar(class APrimalCharacter* PullChar, bool bForStart, bool ReturnValue);
	void CanOwnerGrappleSwing(bool ReturnValue);
	void CanManipulateOwnerVelocity(bool ReturnValue);
	void CanGrappleTetherAffectOwnerMovement(const struct FGrappleTether& ForTether, bool ReturnValue);
	void CanCharControlGrappleTether(class APrimalCharacter* ForChar, const struct FGrappleTether& ForTether, bool bAllowSlaveGrappleToControl, bool ReturnValue);
	void CanChangeGrappleState(uint8 DesiredGrappleState, bool ReturnValue);
	void CanBeGrappledAgainstSurface(bool ReturnValue);
	void BreakGrappleTether(int32 AtIndex, const class FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bBreakAllTethersWithTag, bool ReturnValue);
	void BreakChildTetherOnGrappledChar(const struct FGrappleTether& WithTether, bool ReturnValue);
	void BreakAllTethers();
	void BP_InterceptGrappleLogic(const struct FVector& CharVelocity, bool ReturnValue);
	void AreGrappleTetherTagsEqual(const class FString& TagA, const class FString& TagB, bool bOnlyCompareRootTag, bool ReturnValue);
	void ApplyTetherMoveVelocity(const struct FVector& CurrentVelocity, float DeltaTime);
	void ApplyOwnerSwingingVelocity(const struct FVector& CurrentVelocity, float DeltaTime);
	void AllowGrappleLogic(bool ReturnValue);
	void AdjustMovementVectorIfAgainstSurface(const struct FVector& AdjustVector);
	void AddGrappleTether(const struct FCreateGrappleTetherData& FromData, bool bPreventNetSync, int32 AddAtIndex, int32 ReturnValue);
};

// 0x138 (0xC88 - 0xB50)
// Class ShooterGame.PrimalBuff_MissionData
class APrimalBuff_MissionData : public APrimalBuff
{
public:
	class AMissionType*                          ActiveMission;                                     // 0xB50(0x8)(ZeroConstructor)
	int32                                        ActiveMissionIndex;                                // 0xB58(0x4)(None)
	uint8                                        Pad_356C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClientMissionData>            CurrentMissions;                                   // 0xB60(0x10)(ZeroConstructor)
	class UParticleSystem*                       MissionIndicatorParticles;                         // 0xB70(0x8)(ZeroConstructor)
	class FString                                NonHostPrepAreaNotification;                       // 0xB78(0x10)(None)
	class UClass*                                PendingMission;                                    // 0xB88(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPlayerAddedToMission;                            // 0xB90(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnPlayerRemovedFromMission;                        // 0xBA0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            MissionClientDataUpdated;                          // 0xBB0(0x10)(ZeroConstructor)
	uint8                                        Pad_356D[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClientMissionSubscriptionData> ReplicatedMissionDataSubscriptions;                // 0xC10(0x10)(ZeroConstructor)
	uint8                                        Pad_356E[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalBuff_MissionData* GetDefaultObj();

	void UnloadLevelsForMissionTag(class FName MissionTag);
	void SetMissionData_Vector(class FName MissionTag, class FName Key, const struct FVector& Value);
	void SetMissionData_Struct(class FName MissionTag, class FName Key, const struct FPropertyThunkWrapper& Value);
	void SetMissionData_String(class FName MissionTag, class FName Key, const class FString& Value);
	void SetMissionData_Rotator(class FName MissionTag, class FName Key, const struct FRotator& Value);
	void SetMissionData_Int(class FName MissionTag, class FName Key, int32 Value);
	void SetMissionData_Float(class FName MissionTag, class FName Key, float Value);
	void SetMissionData_Double(class FName MissionTag, class FName Key, double Value);
	void SetMissionData_Bool(class FName MissionTag, class FName Key, bool Value);
	void ServerRequestToggleWeapon(class AMissionType* Mission);
	void ServerRequestStartMissionWithMissionTag(class FName MissionTag, class AMissionDispatcher* FromDispatcher);
	void ServerRequestStartMission(class UClass* MissionType, class AMissionDispatcher* FromDispatcher);
	void ServerRequestMissionEligibilityCheck(class AMissionDispatcher* DispatcherFilter);
	void ServerRequestEquipMissionItem(class AMissionType* Mission, const struct FItemNetID& ItemID);
	void ServerRequestCancelMission();
	void ServerMulticastRequiredProps();
	void ReplicatedMissionDataUpdated();
	void OnRep_MissionIndicatorParticles();
	void OnRep_CurrentMissions();
	void OnRep_ActiveMissionIndex();
	void OnActiveMissionPhaseStarted(class AMissionType* Mission, class FName OldPhase, class FName NewPhase);
	void OnActiveMissionPhaseEnded(class AMissionType* Mission, class FName OldPhase, class FName NewPhase);
	void MultiUpdateMissionData_Int(class FName MissionTag, class FName Key, int32 Value);
	void MultiUpdateMissionData_Bool(class FName MissionTag, class FName Key, bool Value);
	void MultiClearParticleIndicator(float RemoveAfterDuration);
	void LoadLevelsForMissionTag(class FName MissionTag);
	void IsPlayerEligibleForMission_CheckFromClient(class UClass* MissionType, bool bOutIsRecentData, const struct FClientMissionEligibility& OutEligibilityData, float MaxTimeConsideredRecent, class AMissionDispatcher* DispatcherFilter, bool ReturnValue);
	void IsMissionTypeActiveWithMissionTag(class FName MissionTag, bool ReturnValue);
	void IsMissionTypeActive(class UClass* MissionType, bool bExactClassMatch, bool ReturnValue);
	void GetWorldIndicatorsForMission(class AMissionType* Mission, const TArray<struct FMissionWorldIndicator>& WorldIndicators, bool bCompanionOnly, bool bSortByPriority);
	void GetMissionDebugData(const TArray<struct FSerializedMissionData>& OutMissionData);
	void GetMissionData_Vector(class FName MissionTag, class FName Key, const struct FVector& OutValue, bool ReturnValue);
	void GetMissionData_Struct(class FName MissionTag, class FName Key, const struct FPropertyThunkWrapper& DestStruct, bool ReturnValue);
	void GetMissionData_String(class FName MissionTag, class FName Key, const class FString& OutValue, bool ReturnValue);
	void GetMissionData_Rotator(class FName MissionTag, class FName Key, const struct FRotator& OutValue, bool ReturnValue);
	void GetMissionData_Int(class FName MissionTag, class FName Key, int32 OutValue, bool ReturnValue);
	void GetMissionData_Float(class FName MissionTag, class FName Key, float OutValue, bool ReturnValue);
	void GetMissionData_Double(class FName MissionTag, class FName Key, double OutValue, bool ReturnValue);
	void GetMissionData_Bool(class FName MissionTag, class FName Key, bool OutValue, bool ReturnValue);
	void GetBiomeMissionTag(const struct FVector& Location, class FName ReturnValue);
	void GetAllCurrentMissions(const TArray<class AMissionType*>& OutMissions);
	void GetActiveMission(class AMissionType* ReturnValue);
	void ClientUnloadMissionLevels(class FName MissionTag);
	void ClientSpawnEmitter(class UClass* EmitterType, const struct FTransform& EmitterTransform, float EmitterLifespan);
	void ClientSendMissionNotification(class AMissionType* FromMission, class FName NotificationTag, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* MessageSound);
	void ClientSendMissionAlert(enum class EMissionAlertType AlertType, const class FString& AlertTitle, const TArray<struct FMissionAlertEntry>& AlertEntries, float DisplayTime, class USoundBase* Sound, bool FlyoutFromTop);
	void ClientMissionEvent(class AMissionType* Mission, bool bMissionStarted, bool bMissionCompletedSuccessfully);
	void ClientMissionEligibilityResponse(const TArray<struct FMissionEligibilityData>& EligibilityData);
	void ClientLoadMissionLevels(class FName MissionTag);
	void AutoHideIndicatorParticles();
};

// 0x8 (0x4C0 - 0x4B8)
// Class ShooterGame.PrimalCableActor
class APrimalCableActor : public AActor
{
public:
	class UPrimalCableComponent*                 CableComponent;                                    // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalCableActor* GetDefaultObj();

};

// 0x88 (0x7D0 - 0x748)
// Class ShooterGame.PrimalCableComponent
class UPrimalCableComponent : public UArkProceduralMeshComponent
{
public:
	uint8                                        bEndPointIsInWorldSpace : 1;                       // Mask: 0x1, PropSize: 0x10x748(0x1)(None)
	uint8                                        BitPad_2AD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3572[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FComponentReference                   AttachEndTo;                                       // 0x750(0x28)(ZeroConstructor)
	struct FVector                               EndLocation;                                       // 0x778(0x18)(None)
	float                                        CableLength;                                       // 0x790(0x4)(None)
	int32                                        NumSegments;                                       // 0x794(0x4)(None)
	float                                        SubstepTime;                                       // 0x798(0x4)(None)
	int32                                        SolverIterations;                                  // 0x79C(0x4)(None)
	float                                        MaxParticleSpeed;                                  // 0x7A0(0x4)(None)
	float                                        CableWidth;                                        // 0x7A4(0x4)(None)
	int32                                        NumSides;                                          // 0x7A8(0x4)(None)
	float                                        TileMaterial;                                      // 0x7AC(0x4)(None)
	bool                                         bRenderFirstHalfOnly;                              // 0x7B0(0x1)(None)
	uint8                                        Pad_3573[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalCableComponent* GetDefaultObj();

	void SpreadOutParticles(const struct FVector& StartPosition, const struct FVector& EndPosition);
	void SetAttachEndOverrideComponent(class USceneComponent* Component);
	void MarkRenderDynamicDataDirtyBP();
	void GetEndPositions(const struct FVector& OutStartPosition, const struct FVector& OutEndPosition);
	void GetCableParticle(int32 Idx, const struct FCableParticle& ReturnValue);
	void GetCableMidPoint(const struct FVector& ReturnValue);
	void GetAttachEndOverrideComponent(class USceneComponent* ReturnValue);
};

// 0xE8 (0x110 - 0x28)
// Class ShooterGame.PrimalCameraConfig
class UPrimalCameraConfig : public UObject
{
public:
	class FName                                  DefaultCameraProfileName;                          // 0x28(0x8)(None)
	class FName                                  TightCameraProfileName;                            // 0x30(0x8)(None)
	class FName                                  MidCameraProfileName;                              // 0x38(0x8)(None)
	class FName                                  LooseCameraProfileName;                            // 0x40(0x8)(None)
	TMap<class FName, struct FPrimalCameraProfile> CameraProfiles;                                    // 0x48(0x50)(None)
	TMap<class FName, struct FPrimalCameraProfile> ExtraCameraProfiles;                               // 0x98(0x50)(None)
	struct FVector                               TPVWeaponCameraOffset;                             // 0xE8(0x18)(None)
	float                                        TransitionToTargetingCameraInterpSpeed;            // 0x100(0x4)(None)
	float                                        TransitionToASACameraInterpTime;                   // 0x104(0x4)(None)
	float                                        TransitionToOldCameraInterpTime;                   // 0x108(0x4)(None)
	uint8                                        Pad_3574[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalCameraConfig* GetDefaultObj();

};

// 0x50 (0x78 - 0x28)
// Class ShooterGame.PrimalCameraConfig_WeaponOverride
class UPrimalCameraConfig_WeaponOverride : public UObject
{
public:
	TMap<class FName, struct FPrimalCameraSettingsOverrideGroup> WeaponCameraSettingsOverrides;                     // 0x28(0x50)(None)

	static class UClass* StaticClass();
	static class UPrimalCameraConfig_WeaponOverride* GetDefaultObj();

};

// 0x10 (0xC70 - 0xC60)
// Class ShooterGame.PrimalCameraProbeActor
class APrimalCameraProbeActor : public ACameraActor
{
public:
	bool                                         bActive;                                           // 0xC60(0x1)(None)
	uint8                                        Pad_3575[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalCameraProbeActor* GetDefaultObj();

};

// 0x5C8 (0x1540 - 0xF78)
// Class ShooterGame.PrimalCharacterMovement
class UPrimalCharacterMovement : public UCharacterMovementComponent
{
public:
	uint8                                        bAccelerationFollowsRotation : 1;                  // Mask: 0x1, PropSize: 0x10xF78(0x1)(None)
	uint8                                        bPreventWaterSurfaceHopping : 1;                   // Mask: 0x2, PropSize: 0x10xF78(0x1)(None)
	uint8                                        bCheckFallingAITempIgnoreDinoRiderMesh : 1;        // Mask: 0x4, PropSize: 0x10xF78(0x1)(None)
	uint8                                        BitPad_2AE : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceAccelerationFollowsRotationInSwimming : 1;   // Mask: 0x10, PropSize: 0x10xF78(0x1)(None)
	uint8                                        bUseRotationAcceleration : 1;                      // Mask: 0x20, PropSize: 0x10xF78(0x1)(None)
	uint8                                        bIgnoreRotationAccelerationWhenSwimming : 1;       // Mask: 0x40, PropSize: 0x10xF78(0x1)(None)
	uint8                                        BitPad_2AF : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseAsyncWalking : 1;                              // Mask: 0x1, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bAllowSimulatedTickDistanceSkip : 1;               // Mask: 0x2, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bAllowImpactDeflection : 1;                        // Mask: 0x4, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bDisableSimulatedMovement : 1;                     // Mask: 0x8, PropSize: 0x10xF79(0x1)(None)
	uint8                                        BitPad_2B0 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanSlide : 1;                                     // Mask: 0x20, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bAssumeSymmetricalRotation : 1;                    // Mask: 0x40, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bWantsToDodge : 1;                                 // Mask: 0x80, PropSize: 0x10xF79(0x1)(None)
	uint8                                        bUseWeaponSpeedMultiplierByDirection : 1;          // Mask: 0x1, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        bWantsToProne : 1;                                 // Mask: 0x2, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        bUseCharacterInterpolationAndStops : 1;            // Mask: 0x4, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        bOnlyForwardsInputAcceleration : 1;                // Mask: 0x8, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        bOnlyForwardsInputAccelerationWalking : 1;         // Mask: 0x10, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        BitPad_2B1 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventExitingWater : 1;                          // Mask: 0x40, PropSize: 0x10xF7A(0x1)(None)
	uint8                                        BitPad_2B2 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseWaveLocking : 1;                               // Mask: 0x1, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bForcePreventExitingWater : 1;                     // Mask: 0x2, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bClippedToWaterSurface : 1;                        // Mask: 0x4, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bZeroPitchWhenNoAcceleration : 1;                  // Mask: 0x8, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bRequireAccelerationForUseControllerDesiredRotation : 1; // Mask: 0x10, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bForceDontAllowDesiredRotationWhenFalling : 1;     // Mask: 0x20, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bReduceBackwardsMovement : 1;                      // Mask: 0x40, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bPreventAddingImpulse : 1;                         // Mask: 0x80, PropSize: 0x10xF7B(0x1)(None)
	uint8                                        bPreventSlidingWhileFalling : 1;                   // Mask: 0x1, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bPreventZeroPitchAndRollWhileFalling : 1;          // Mask: 0x2, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bPreventEnteringWater : 1;                         // Mask: 0x4, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bServerCorrectForMovementModeChanges : 1;          // Mask: 0x8, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bFallVelocityRecursionGuard : 1;                   // Mask: 0x10, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bDeferredMoveEveryFrame : 1;                       // Mask: 0x20, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        bLastHasRequestedVelocity : 1;                     // Mask: 0x40, PropSize: 0x10xF7C(0x1)(None)
	uint8                                        BitPad_2B3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3581[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastForcedNetVelocity;                             // 0xF80(0x18)(None)
	uint8                                        Pad_3582[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ProneHalfHeight;                                   // 0xFA0(0x4)(None)
	float                                        MaxWalkSpeedProne;                                 // 0xFA4(0x4)(None)
	float                                        DinoClientPositionErrorToleranceStopped;           // 0xFA8(0x4)(None)
	float                                        DinoClientPositionErrorToleranceMovingFlying;      // 0xFAC(0x4)(None)
	float                                        ClientRunningPositionErrorTolerance;               // 0xFB0(0x4)(None)
	float                                        PlayerClientPositionErrorToleranceOverride;        // 0xFB4(0x4)(None)
	float                                        SimulatedTickSkipDistanceSQ;                       // 0xFB8(0x4)(None)
	uint8                                        Pad_3583[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               WantsToDodgeVelocity;                              // 0xFC0(0x18)(None)
	float                                        PreventWaterHoppingPlaneOffset;                    // 0xFD8(0x4)(None)
	uint8                                        Pad_3584[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       PreventWaterHopping_LastTimeAtSurface;             // 0xFE0(0x8)(None)
	float                                        AccelerationFollowsRotationMinDot;                 // 0xFE8(0x4)(None)
	float                                        AccelerationFollowsRotationStopDistance;           // 0xFEC(0x4)(None)
	float                                        RotationAcceleration;                              // 0xFF0(0x4)(None)
	float                                        RotationBraking;                                   // 0xFF4(0x4)(None)
	float                                        AngleToStartRotationBraking;                       // 0xFF8(0x4)(None)
	float                                        SwimmingAccelZMultiplier;                          // 0xFFC(0x4)(None)
	float                                        TamedSwimmingAccelZMultiplier;                     // 0x1000(0x4)(None)
	bool                                         bSlipOffLedges;                                    // 0x1004(0x1)(None)
	uint8                                        Pad_3585[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LedgeSlipCapsuleRadiusMultiplier;                  // 0x1008(0x4)(None)
	float                                        LedgeSlipPushVelocity;                             // 0x100C(0x4)(None)
	float                                        LedgeSlipVelocityBuildUpMultiplier;                // 0x1010(0x4)(None)
	float                                        BackwardsMaxSpeedMultiplier;                       // 0x1014(0x4)(None)
	float                                        BackwardsMovementDotThreshold;                     // 0x1018(0x4)(None)
	float                                        WaterDinoSurfacePitchClampCapsuleDistanceMultiplier; // 0x101C(0x4)(None)
	float                                        WaterDinoSurfacePitchClampMaxPitch;                // 0x1020(0x4)(None)
	float                                        LostDeltaTime;                                     // 0x1024(0x4)(None)
	float                                        LastLostDeltaTime;                                 // 0x1028(0x4)(None)
	float                                        WaveLockingMaxZOffset;                             // 0x102C(0x4)(None)
	uint8                                        Pad_3586[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastSwimTime;                                      // 0x1070(0x8)(None)
	float                                        TimeLeftToForceTickEveryFrame;                     // 0x1078(0x4)(None)
	float                                        LandedPreventRequestedMoveInterval;                // 0x107C(0x4)(None)
	float                                        LandedPreventRequestedMoveMinVelocityMagnitude;    // 0x1080(0x4)(None)
	uint8                                        Pad_3587[0x3C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       DisableMovementPhysicsUntilTime;                   // 0x10C0(0x8)(None)
	uint8                                        Pad_3588[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              CurrentRotationSpeed;                              // 0x1200(0x18)(None)
	uint8                                        Pad_3589[0x328];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalCharacterMovement* GetDefaultObj();

	void UnProne(bool bClientSimulation, bool bForce);
	void UnCrouch(bool bClientSimulation, bool bForce);
	void StopLoggingSavedMoves();
	void StartLoggingSavedMoves();
	void SetBase(class UPrimitiveComponent* NewBase, class FName BoneName, bool bNotifyActor);
	void ServerJumpOutOfWater(const struct FVector_NetQuantize100& WallNormal, uint8 JumpFlag);
	void Prone(bool bClientSimulation);
	void IsOnWalkableFloor(bool ReturnValue);
	void IsMovingBackwards(bool ReturnValue);
	void GetPrimalCharacter(class APrimalCharacter* ReturnValue);
	void ClearBase(bool bNotifyActor);
};

// 0xD8 (0x100 - 0x28)
// Class ShooterGame.PrimalCharacterSetting
class UPrimalCharacterSetting : public UObject
{
public:
	struct FCharacterPreset                      CharacterSetting;                                  // 0x28(0xD8)(None)

	static class UClass* StaticClass();
	static class UPrimalCharacterSetting* GetDefaultObj();

};

// 0x1030 (0x10E8 - 0xB8)
// Class ShooterGame.PrimalCharacterStatusComponent
class UPrimalCharacterStatusComponent : public UActorComponent
{
public:
	uint8                                        Pad_35C2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxStatusValues[0xC];                              // 0xC0(0x30)(None)
	float                                        BaseLevelMaxStatusValues[0xC];                     // 0xF0(0x30)(None)
	uint8                                        NumberOfLevelUpPointsApplied[0xC];                 // 0x120(0xC)(None)
	uint8                                        NumberOfLevelUpPointsAppliedTamed[0xC];            // 0x12C(0xC)(None)
	uint8                                        NumberOfMutationsAppliedTamed[0xC];                // 0x138(0xC)(None)
	float                                        TamedIneffectivenessModifier;                      // 0x144(0x4)(None)
	float                                        MovingStaminaRecoveryRateMultiplier;               // 0x148(0x4)(None)
	float                                        RecoveryRateStatusValue[0xC];                      // 0x14C(0x30)(None)
	float                                        TimeToRecoverAfterDepletionStatusValue[0xC];       // 0x17C(0x30)(None)
	float                                        TimeToRecoverAfterDecreaseStatusValue[0xC];        // 0x1AC(0x30)(None)
	float                                        AmountMaxGainedPerLevelUpValue[0xC];               // 0x1DC(0x30)(None)
	float                                        AmountMaxGainedPerLevelUpValueTamed[0xC];          // 0x20C(0x30)(None)
	uint8                                        MaxGainedPerLevelUpValueIsPercent[0xC];            // 0x23C(0xC)(None)
	uint8                                        RecoveryRateIsPercent[0xC];                        // 0x248(0xC)(None)
	float                                        TamingMaxStatMultipliers[0xC];                     // 0x254(0x30)(None)
	float                                        TamingMaxStatAdditions[0xC];                       // 0x284(0x30)(None)
	float                                        MaxLevelUpMultiplier[0xC];                         // 0x2B4(0x30)(None)
	float                                        MutationMultiplier[0xC];                           // 0x2E4(0x30)(None)
	float                                        TamedLandDinoSwimSpeedLevelUpEffectiveness;        // 0x314(0x4)(None)
	float                                        TamingIneffectivenessMultiplier;                   // 0x318(0x4)(None)
	float                                        DinoRiderWeightMultiplier;                         // 0x31C(0x4)(None)
	uint8                                        CanLevelUpValue[0xC];                              // 0x320(0xC)(None)
	uint8                                        DontUseValue[0xC];                                 // 0x32C(0xC)(None)
	uint8                                        SkipWildLevelUpValue[0xC];                         // 0x338(0xC)(None)
	uint8                                        Pad_35C3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPrimalCharacterStatusStateThresholds StatusStateThresholds[0xC];                        // 0x348(0x360)(None)
	float                                        ExperienceAutomaticConsciousIncreaseSpeed;         // 0x6A8(0x4)(None)
	float                                        CheatMaxWeight;                                    // 0x6AC(0x4)(None)
	int32                                        CharacterStatusComponentPriority;                  // 0x6B0(0x4)(None)
	float                                        SuffocationHealthPercentDecreaseSpeed;             // 0x6B4(0x4)(None)
	float                                        UnsubmergedOxygenIncreaseSpeed;                    // 0x6B8(0x4)(None)
	float                                        SubmergedOxygenDecreaseSpeed;                      // 0x6BC(0x4)(None)
	float                                        RunningStaminaConsumptionRate;                     // 0x6C0(0x4)(None)
	float                                        WalkingStaminaConsumptionRate;                     // 0x6C4(0x4)(None)
	float                                        SwimmingOrFlyingStaminaConsumptionRate;            // 0x6C8(0x4)(None)
	float                                        JumpStaminaConsumption;                            // 0x6CC(0x4)(None)
	float                                        WindedSpeedModifier;                               // 0x6D0(0x4)(None)
	float                                        WindedSpeedModifierSwimmingOrFlying;               // 0x6D4(0x4)(None)
	float                                        InjuredSpeedModifier;                              // 0x6D8(0x4)(None)
	float                                        HypothermicHealthDecreaseRateBase;                 // 0x6DC(0x4)(None)
	float                                        HypothermicHealthDecreaseRatePerDegree;            // 0x6E0(0x4)(None)
	float                                        HyperthermicHealthDecreaseRateBase;                // 0x6E4(0x4)(None)
	float                                        HyperthermicHealthDecreaseRatePerDegree;           // 0x6E8(0x4)(None)
	float                                        XPEarnedPerStaminaConsumed;                        // 0x6EC(0x4)(None)
	float                                        KillXPMultiplierPerCharacterLevel;                 // 0x6F0(0x4)(None)
	uint8                                        bCanSuffocate : 1;                                 // Mask: 0x1, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bCanSuffocateIfTamed : 1;                          // Mask: 0x2, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bCanGetHungry : 1;                                 // Mask: 0x4, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bUseStamina : 1;                                   // Mask: 0x8, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bWalkingConsumesStamina : 1;                       // Mask: 0x10, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bRunningConsumesStamina : 1;                       // Mask: 0x20, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bConsumeFoodAutomatically : 1;                     // Mask: 0x40, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bInfiniteFood : 1;                                 // Mask: 0x80, PropSize: 0x10x6F4(0x1)(None)
	uint8                                        bAddExperienceAutomatically : 1;                   // Mask: 0x1, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bConsumeWaterAutomatically : 1;                    // Mask: 0x2, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bAutomaticallyUpdateTemperature : 1;               // Mask: 0x4, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bReplicateGlobalStatusValues : 1;                  // Mask: 0x8, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bAllowLevelUps : 1;                                // Mask: 0x10, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bInfiniteStats : 1;                                // Mask: 0x20, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bAllowSharingXPWithTribe : 1;                      // Mask: 0x40, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bUseStatusSpeedModifiers : 1;                      // Mask: 0x80, PropSize: 0x10x6F5(0x1)(None)
	uint8                                        bStatusSpeedModifierOnlyFullOrNone : 1;            // Mask: 0x1, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bIgnoreStatusSpeedModifierIfSwimming : 1;          // Mask: 0x2, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bPreventJump : 1;                                  // Mask: 0x4, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bInitializedBaseLevelMaxStatusValues : 1;          // Mask: 0x8, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        BitPad_2B5 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bServerFirstInitialized : 1;                       // Mask: 0x20, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bRunningUseDefaultSpeed : 1;                       // Mask: 0x40, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bNeverAllowXP : 1;                                 // Mask: 0x80, PropSize: 0x10x6F6(0x1)(None)
	uint8                                        bPreventTamedStatReplication : 1;                  // Mask: 0x1, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bUseBPAdjustStatusValueModification : 1;           // Mask: 0x2, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bForceDefaultSpeed : 1;                            // Mask: 0x4, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bCheatStatus : 1;                                  // Mask: 0x8, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        BitPad_2B6 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHideFoodStatusFromHUD : 1;                        // Mask: 0x20, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bUseBPGetStatusNameString : 1;                     // Mask: 0x40, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bHideStaminaStatusFromHUD : 1;                     // Mask: 0x80, PropSize: 0x10x6F7(0x1)(None)
	uint8                                        bDontUseSpeedMultipleAsSpeed : 1;                  // Mask: 0x1, PropSize: 0x10x6F8(0x1)(None)
	uint8                                        BitPad_2B7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35C6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShareXPWithTribeRange;                             // 0x6FC(0x4)(None)
	int32                                        BaseCharacterLevel;                                // 0x700(0x4)(None)
	uint16                                       ExtraCharacterLevel;                               // 0x704(0x2)(None)
	uint8                                        Pad_35C7[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ExperiencePoints;                                  // 0x708(0x4)(None)
	float                                        ReplicatedExperiencePoints;                        // 0x70C(0x4)(None)
	enum class ELevelExperienceRampType          LevelExperienceRampType;                           // 0x710(0x1)(None)
	uint8                                        Pad_35C8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxExperiencePoints;                               // 0x714(0x4)(None)
	float                                        BaseFoodConsumptionRate;                           // 0x718(0x4)(None)
	float                                        BaseWaterConsumptionRate;                          // 0x71C(0x4)(None)
	float                                        FortitudeTorpidityDecreaseMultiplier;              // 0x720(0x4)(None)
	float                                        FortitudeTorpidityIncreaseResistance;              // 0x724(0x4)(None)
	float                                        SubmergedWaterIncreaseRate;                        // 0x728(0x4)(None)
	float                                        CrouchedWaterFoodConsumptionMultiplier;            // 0x72C(0x4)(None)
	float                                        ProneWaterFoodConsumptionMultiplier;               // 0x730(0x4)(None)
	float                                        StaminaRecoveryDecreaseFoodMultiplier;             // 0x734(0x4)(None)
	float                                        StaminaRecoveryDecreaseWaterMultiplier;            // 0x738(0x4)(None)
	float                                        HealthRecoveryDecreaseFoodMultiplier;              // 0x73C(0x4)(None)
	float                                        BabyDinoConsumingFoodRateMultiplier;               // 0x740(0x4)(None)
	float                                        DinoTamedAdultConsumingFoodRateMultiplier;         // 0x744(0x4)(None)
	float                                        BabyGestationConsumingFoodRateMultiplier;          // 0x748(0x4)(None)
	float                                        BabyDinoStarvationHealthDecreaseRateMultiplier;    // 0x74C(0x4)(None)
	float                                        BabyMaxHealthPercent;                              // 0x750(0x4)(None)
	float                                        CrouchedStaminaConsumptionMultiplier;              // 0x754(0x4)(None)
	float                                        ProneStaminaConsumptionMultiplier;                 // 0x758(0x4)(None)
	float                                        StarvationHealthConsumptionRate;                   // 0x75C(0x4)(None)
	float                                        DehyrdationHealthConsumptionRate;                  // 0x760(0x4)(None)
	float                                        StaminaConsumptionDecreaseWaterMultiplier;         // 0x764(0x4)(None)
	float                                        StaminaConsumptionDecreaseFoodMultiplier;          // 0x768(0x4)(None)
	float                                        HypothermiaDecreaseFoodMultiplierBase;             // 0x76C(0x4)(None)
	float                                        HypothermiaDecreaseFoodMultiplierPerDegree;        // 0x770(0x4)(None)
	float                                        HyperthermiaDecreaseWaterMultiplierBase;           // 0x774(0x4)(None)
	float                                        HyperthermiaDecreaseWaterMultiplierPerDegree;      // 0x778(0x4)(None)
	float                                        HyperthermiaTemperatureThreshold;                  // 0x77C(0x4)(None)
	float                                        HypothermiaTemperatureThreshold;                   // 0x780(0x4)(None)
	float                                        TorporExitPercentThreshold;                        // 0x784(0x4)(None)
	float                                        KnockedOutTorpidityRecoveryRateMultiplier;         // 0x788(0x4)(None)
	float                                        DehydrationTorpidityMultiplier;                    // 0x78C(0x4)(None)
	float                                        StarvationTorpidityMultuplier;                     // 0x790(0x4)(None)
	float                                        StarvationTorpidityIncreaseRate;                   // 0x794(0x4)(None)
	float                                        DehyrdationTorpidityIncreaseRate;                  // 0x798(0x4)(None)
	float                                        InjuredTorpidityIncreaseMultiplier;                // 0x79C(0x4)(None)
	float                                        WeightSpeedDecreasePower;                          // 0x7A0(0x4)(None)
	float                                        WeightJumpDecreasePower;                           // 0x7A4(0x4)(None)
	float                                        PoopItemMinFoodConsumptionInterval;                // 0x7A8(0x4)(None)
	float                                        PoopItemMaxFoodConsumptionInterval;                // 0x7AC(0x4)(None)
	float                                        TheMaxTorporIncreasePerBaseLevel;                  // 0x7B0(0x4)(None)
	float                                        CurrentStatusValuesReplicationInterval;            // 0x7B4(0x4)(None)
	float                                        InsulationHyperthermiaOffsetExponent;              // 0x7B8(0x4)(None)
	float                                        InsulationHyperthermiaOffsetScaler;                // 0x7BC(0x4)(None)
	float                                        InsulationHypothermiaOffsetExponent;               // 0x7C0(0x4)(None)
	float                                        InsulationHypothermiaOffsetScaler;                 // 0x7C4(0x4)(None)
	float                                        HypoCharacterInsulationValue;                      // 0x7C8(0x4)(None)
	float                                        HyperCharacterInsulationValue;                     // 0x7CC(0x4)(None)
	float                                        PoopItemFoodConsumptionCache;                      // 0x7D0(0x4)(None)
	float                                        LastHypothermalCharacterInsulationValue;           // 0x7D4(0x4)(None)
	float                                        LastHyperthermalCharacterInsulationValue;          // 0x7D8(0x4)(None)
	enum class EPrimalCharacterStatusValue       MaxStatusValueToAutoUpdate;                        // 0x7DC(0x1)(None)
	uint8                                        Pad_35C9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GenericXPMultiplier;                               // 0x7E0(0x4)(None)
	float                                        CraftEarnXPMultiplier;                             // 0x7E4(0x4)(None)
	float                                        MinInventoryWeight;                                // 0x7E8(0x4)(None)
	float                                        KillEarnXPMultiplier;                              // 0x7EC(0x4)(None)
	float                                        GenericEarnXPMultiplier;                           // 0x7F0(0x4)(None)
	float                                        SpecialEarnXPMultiplier;                           // 0x7F4(0x4)(None)
	float                                        ExplorerNoteEarnXPMultiplier;                      // 0x7F8(0x4)(None)
	float                                        HarvestEarnXPMultiplier;                           // 0x7FC(0x4)(None)
	float                                        DefaultHyperthermicInsulation;                     // 0x800(0x4)(None)
	float                                        DefaultHypothermicInsulation;                      // 0x804(0x4)(None)
	float                                        MaxTamingEffectivenessBaseLevelMultiplier;         // 0x808(0x4)(None)
	uint8                                        Pad_35CA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                FoodStatusNameOverride;                            // 0x810(0x10)(None)
	class UTexture2D*                            FoodStatusIconBackgroundOverride;                  // 0x820(0x8)(ZeroConstructor)
	class UTexture2D*                            FoodStatusIconForegroundOverride;                  // 0x828(0x8)(ZeroConstructor)
	TArray<struct FPrimalCharacterStatusValueModifier> StatusValueModifiers;                              // 0x830(0x10)(None)
	TArray<uint8>                                StatusValueModifierDescriptionIndices;             // 0x840(0x10)(None)
	float                                        CurrentStatusValues[0xC];                          // 0x850(0x30)(None)
	float                                        AdditionalStatusValues[0xC];                       // 0x880(0x30)(None)
	float                                        ReplicatedCurrentStatusValues[0xC];                // 0x8B0(0x30)(None)
	float                                        ReplicatedGlobalMaxStatusValues[0xC];              // 0x8E0(0x30)(None)
	float                                        ReplicatedBaseLevelMaxStatusValues[0xC];           // 0x910(0x30)(None)
	float                                        ReplicatedGlobalCurrentStatusValues[0xC];          // 0x940(0x30)(None)
	int8                                         CurrentStatusStates[0xC];                          // 0x970(0xC)(None)
	uint8                                        Pad_35CB[0x184];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StaminaRecoveryExtraResourceDecreaseMultiplier;    // 0xB00(0x4)(None)
	float                                        DehydrationStaminaRecoveryRate;                    // 0xB04(0x4)(None)
	float                                        WaterConsumptionMultiplier;                        // 0xB08(0x4)(None)
	float                                        FoodConsumptionMultiplier;                         // 0xB0C(0x4)(None)
	TArray<class USoundBase*>                    EnteredStatusStateSounds;                          // 0xB10(0x10)(ZeroConstructor)
	TArray<class USoundBase*>                    ExitStatusStateSounds;                             // 0xB20(0x10)(ZeroConstructor)
	float                                        ExtraOxygenSpeedStatMultiplier;                    // 0xB30(0x4)(None)
	float                                        ExtraTamedHealthMultiplier;                        // 0xB34(0x4)(None)
	float                                        WakingTameFoodConsumptionRateMultiplier;           // 0xB38(0x4)(None)
	float                                        SwimmingStaminaRecoveryRateMultiplier;             // 0xB3C(0x4)(None)
	uint8                                        Pad_35CC[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MountedDinoDinoWeightMultiplier;                   // 0xB5C(0x4)(None)
	float                                        ExtraWildDinoDamageMultiplier;                     // 0xB60(0x4)(None)
	float                                        ExtraTamedDinoDamageMultiplier;                    // 0xB64(0x4)(None)
	float                                        WeightMultiplierWhenCarriedOrBased;                // 0xB68(0x4)(None)
	float                                        WeightMultiplierForCarriedPassengers;              // 0xB6C(0x4)(None)
	float                                        WeightMultiplierForPlatformPassengersInventory;    // 0xB70(0x4)(None)
	float                                        DinoMaxStatAddMultiplierImprinting[0xC];           // 0xB74(0x30)(None)
	float                                        DinoImprintingQuality;                             // 0xBA4(0x4)(None)
	uint8                                        bForceGainOxygen : 1;                              // Mask: 0x1, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bFreezeStatusValues : 1;                           // Mask: 0x2, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        BitPad_2B8 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPModifyMaxLevel : 1;                          // Mask: 0x8, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bNoStaminaRecoveryWhenStarving : 1;                // Mask: 0x10, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bApplyingStatusValueModifiers : 1;                 // Mask: 0x20, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bDontScaleMeleeDamage : 1;                         // Mask: 0x40, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        BitPad_2B9 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35CD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TamedBaseHealthMultiplier;                         // 0xBAC(0x4)(None)
	float                                        ExtraBabyDinoConsumingFoodRateMultiplier;          // 0xBB0(0x4)(None)
	uint8                                        Pad_35CE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        StatusValueNameOverrides;                          // 0xBB8(0x10)(None)
	class UClass*                                RegainOxygenDamageType;                            // 0xBC8(0x8)(ZeroConstructor)
	bool                                         bForceAllowStatusModifierSortingWhenTamed;         // 0xBD0(0x1)(None)
	uint8                                        Pad_35CF[0x517];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalCharacterStatusComponent* GetDefaultObj();

	void UpdateWeightStat(bool bForceSetValue);
	void UpdatedCurrentStatusValue(enum class EPrimalCharacterStatusValue ValueType, float Amount, bool bManualModification, class UClass* DamageTypeClass, bool bDamageDontKill, bool bDontAdjustOtherStats);
	void TickStatus(float DeltaTime, bool bForceStatusUpdate);
	void SetTamed(float TameIneffectivenessModifier, bool bSkipAddingTamedLevels);
	void SetMutationPoints(enum class EPrimalCharacterStatusValue ValueType, int32 NewPoints);
	void SetMaxStatusValue(enum class EPrimalCharacterStatusValue StatType, float NewValue);
	void SetLevelUpStatWeightOverrides(const TArray<float>& Weights);
	void SetLevelUpPoints(enum class EPrimalCharacterStatusValue ValueType, bool bTamedPoints, int32 NewPoints);
	void SetExtraCharacterLevel(int32 NewExtraCharacterLevel);
	void SetCheatLevels(const TArray<int32>& LevelsToApply);
	void SetBaseLevelNoStatChange(int32 Level);
	void SetBaseLevelCustomized(int32 Level, const TArray<struct FStatValuePair>& CustomBaseStats, const TArray<enum class EPrimalCharacterStatusValue>& PrioritizeStats, bool bDontCurrentSetToMax);
	void SetBaseLevel(int32 Level, bool bDontCurrentSetToMax);
	void SetAllStatsToMaximumExcluding(enum class EPrimalCharacterStatusValue Exclude);
	void SetAllStatsToMaximum();
	void ServerSyncReplicatedValues();
	void ServerForceUpdateMaxStatValues();
	void RescaleMaxStat(enum class EPrimalCharacterStatusValue LevelUpValueType, float TargetValue, bool bIsPercentOfTrueValue);
	void RescaleAllStats();
	void RemoveStatusValueModifierByInstigator(class AActor* Instigator);
	void RemoveStatusValueModifierByIndex(int32 Index);
	void OnRep_ReplicatedExperiencePoints();
	void OnRep_GlobalMaxStatusValues();
	void OnRep_GlobalCurrentStatusValues();
	void OnRep_GlobalBaseLevelMaxStatusValues();
	void OnRep_CurrentStatusValues();
	void NetSyncMaxStatusValues(const TArray<float>& NetMaxStatusValues, const TArray<float>& NetBaseMaxStatusValues);
	void ModifyCurrentStatusValue(enum class EPrimalCharacterStatusValue ValueType, float Amount, bool bPercentOfMax, bool bPercentOfCurrent, bool bManualModification, bool bSetValue, class UClass* DamageTypeClass, bool bDamageDontKill, bool bForceSetValue, float ReturnValue);
	void IsInStatusState(enum class EPrimalCharacterStatusState StateType, bool ReturnValue);
	void IsAtMaxLevel(bool ReturnValue);
	void IsAtMaxExperience(bool ReturnValue);
	void HasExperienceForLevelUp(bool ReturnValue);
	void GetStatusValueString(enum class EPrimalCharacterStatusValue ValueType, bool bValueOnly, const class FString& ReturnValue);
	void GetStatusValueRecoveryRate(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void GetStatusNameString(enum class EPrimalCharacterStatusValue ValueType, const class FString& ReturnValue);
	void GetStatusMaxValueString(enum class EPrimalCharacterStatusValue ValueType, bool bValueOnly, const class FString& ReturnValue);
	void GetRawStatusValueRecoveryRate(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void GetMutationPoints(enum class EPrimalCharacterStatusValue ValueType, int32 ReturnValue);
	void GetMovementSpeedModifier(float ReturnValue);
	void GetMeleeDamageModifier(float ReturnValue);
	void GetMaxLevel(int32 ReturnValue);
	void GetLevelUpPoints(enum class EPrimalCharacterStatusValue ValueType, bool bTamedPoints, int32 ReturnValue);
	void GetExtraCharacterLevel(int32 ReturnValue);
	void GetExperienceRequiredForPreviousLevelUp(float ReturnValue);
	void GetExperienceRequiredForNextLevelUp(float ReturnValue);
	void GetDinoStatDistributionAgainstMax(enum class EPrimalCharacterStatusValue ValueType, bool bTamedPoints, bool bCheckLevel, bool bIncludeMaxTamingEffLevels, float ReturnValue);
	void GetDinoFoodConsumptionRateMultiplier(float Amount);
	void GetDebugString(const class FString& ReturnValue);
	void GetCraftingSpeedModifier(float ReturnValue);
	void GetCharacterLevel(int32 ReturnValue);
	void GetBaseLevelFromLevelUpPoints(bool bIncludePlayerAddedLevels, int32 ReturnValue);
	void CopyPrimalStatusComponentValues(class UPrimalCharacterStatusComponent* Src);
	void ConvertIntToCharacterStatusEnum(int32 InInteger, enum class EPrimalCharacterStatusValue ReturnValue);
	void ClientSyncMaxStatusValues(const TArray<float>& NetMaxStatusValues, const TArray<float>& NetBaseMaxStatusValues);
	void ClearAllMutationPoints();
	void ClearAllLevelUpPoints(bool bTamedPoints);
	void CanLevelUp(enum class EPrimalCharacterStatusValue LevelUpValueType, bool bCheckExperience, bool ReturnValue);
	void CanGainLevel(bool ReturnValue);
	void BPSetRecoveryRateStatusValue(enum class EPrimalCharacterStatusValue ValueType, float NewValue);
	void BPModifyMaxLevel(int32 InMaxLevel, int32 ReturnValue);
	void BPModifyMaxExperiencePoints(float InMaxExperiencePoints, float ReturnValue);
	void BPGetPercentStatusValue(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void BPGetMaxStatusValue(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void BPGetCurrentStatusValue(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void BPDirectSetMaxStatusValue(enum class EPrimalCharacterStatusValue ValueType, float NewValue);
	void BPDirectSetCurrentStatusValue(enum class EPrimalCharacterStatusValue ValueType, float NewValue);
	void BPAdjustStatusValueModification(enum class EPrimalCharacterStatusValue ValueType, float Amount, class UClass* DamageTypeClass, bool bManualModification, float ReturnValue);
	void AddStatusValueModifier(enum class EPrimalCharacterStatusValue ValueType, float Amount, float Speed, bool bContinueOnUnchangedValue, bool bSetValue, int32 StatusValueModifierDescriptionIndex, bool bResetExistingModifierDescriptionIndex, float LimitExistingModifierDescriptionToMaxAmount, bool bSetAdditionalValue, enum class EPrimalCharacterStatusValue StopAtValueNearMax, bool bMakeUntameable, class UClass* ScaleValueByCharacterDamageType, class AActor* Instigator);
	void AddExperience(float HowMuch, bool bShareWithTribe, enum class EXPType XPType);
};

// 0x80 (0x1CA0 - 0x1C20)
// Class ShooterGame.PrimalCinematicActor
class APrimalCinematicActor : public APostProcessVolume
{
public:
	class UTextureRenderTarget2D*                RenderTarget;                                      // 0x1C20(0x8)(ZeroConstructor)
	TArray<struct FCinematicMaterial>            CinematicMaterials;                                // 0x1C28(0x10)(ZeroConstructor)
	TSoftObjectPtr<class UBinkMediaPlayer>       Movie;                                             // 0x1C38(0x30)(ZeroConstructor)
	float                                        TimeOffsetSeconds;                                 // 0x1C68(0x4)(None)
	uint8                                        Pad_35D3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBinkMediaPlayer*                      MovieRef;                                          // 0x1C70(0x8)(ZeroConstructor)
	TWeakObjectPtr<class ALevelSequenceActor>    FetchedLevelSequence;                              // 0x1C78(0x8)(ZeroConstructor)
	uint8                                        Pad_35D4[0x11];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureRenderTargetFormat        RenderTargetFormat;                                // 0x1C91(0x1)(None)
	uint8                                        Pad_35D5[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalCinematicActor* GetDefaultObj();

	void TickInternal();
	void Stop();
	void Play();
};

// 0xFA0 (0xFC8 - 0x28)
// Class ShooterGame.PrimalClimbingSettings
class UPrimalClimbingSettings : public UObject
{
public:
	bool                                         bDebug;                                            // 0x28(0x1)(None)
	bool                                         bAllowInputClimbing;                               // 0x29(0x1)(None)
	bool                                         bAllowSliding;                                     // 0x2A(0x1)(None)
	uint8                                        Pad_35DB[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ArmSwitchAngle;                                    // 0x2C(0x4)(None)
	float                                        PreFlinchUnclimbableInterval;                      // 0x30(0x4)(None)
	float                                        PostFlinchUnclimbableInterval;                     // 0x34(0x4)(None)
	float                                        ClimbingWaitAfterQuakeFall;                        // 0x38(0x4)(None)
	bool                                         bUseExtendedLandTrace;                             // 0x3C(0x1)(None)
	uint8                                        Pad_35DC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RootLocationInterpSpeed;                           // 0x40(0x4)(None)
	float                                        JumpUpVelocity;                                    // 0x44(0x4)(None)
	float                                        JumpForwardVelocity;                               // 0x48(0x4)(None)
	float                                        JumpDirectionVelocity;                             // 0x4C(0x4)(None)
	float                                        JumpCameraTransitionDuration;                      // 0x50(0x4)(None)
	float                                        ClimbingWaitForJump;                               // 0x54(0x4)(None)
	float                                        ForceReleaseOnImpulseForce;                        // 0x58(0x4)(None)
	struct FClimbingTypeSettings                 TypeSettings[0x4];                                 // 0x5C(0x70)(None)
	float                                        AttachAnchoredTraceRadius;                         // 0xCC(0x4)(None)
	float                                        AttachEffectTraceDistanceForward;                  // 0xD0(0x4)(None)
	float                                        AttachEffectTraceDistanceBackward;                 // 0xD4(0x4)(None)
	float                                        MinAimDirectionDot;                                // 0xD8(0x4)(None)
	float                                        AimDirectionBias;                                  // 0xDC(0x4)(None)
	float                                        TracePlaneInterpolation;                           // 0xE0(0x4)(None)
	float                                        HangingTracePlaneInterpolation;                    // 0xE4(0x4)(None)
	float                                        MinFloorDirectionDot;                              // 0xE8(0x4)(None)
	float                                        FallingConsumeDurabilityMultiplier;                // 0xEC(0x4)(None)
	float                                        ImpactNormalOffsetAllowanceDot;                    // 0xF0(0x4)(None)
	float                                        MoveTraceDistance;                                 // 0xF4(0x4)(None)
	float                                        MoveTraceRadius;                                   // 0xF8(0x4)(None)
	float                                        HangingMinDotUp;                                   // 0xFC(0x4)(None)
	float                                        CeilingDistance;                                   // 0x100(0x4)(None)
	float                                        CeilingTraceRadius;                                // 0x104(0x4)(None)
	float                                        CeilingTraceDistance;                              // 0x108(0x4)(None)
	float                                        MinCeilingTraceTime;                               // 0x10C(0x4)(None)
	float                                        WallDistance;                                      // 0x110(0x4)(None)
	float                                        WallTraceRadius;                                   // 0x114(0x4)(None)
	float                                        WallTraceDistance;                                 // 0x118(0x4)(None)
	float                                        MinWallTraceTime;                                  // 0x11C(0x4)(None)
	float                                        GroundMaxDotUp;                                    // 0x120(0x4)(None)
	float                                        MinFloorDistance;                                  // 0x124(0x4)(None)
	float                                        FloorTraceRadius;                                  // 0x128(0x4)(None)
	float                                        LandMinFloorSpaceDistance;                         // 0x12C(0x4)(None)
	float                                        LandFloorSpaceTraceRadius;                         // 0x130(0x4)(None)
	float                                        FlipMaxNormalDot;                                  // 0x134(0x4)(None)
	float                                        TurnMaxNormalDot;                                  // 0x138(0x4)(None)
	uint8                                        Pad_35DD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FClimbingTransitionParams             Transitions[0x20];                                 // 0x140(0xE00)(None)
	float                                        ClimbAnimPlayRateDistanceScale;                    // 0xF40(0x4)(None)
	float                                        MinClimbAnimPlayRate;                              // 0xF44(0x4)(None)
	float                                        MaxClimbAnimPlayRate;                              // 0xF48(0x4)(None)
	float                                        CameraYawMin;                                      // 0xF4C(0x4)(None)
	float                                        CameraYawMax;                                      // 0xF50(0x4)(None)
	float                                        CameraPitchUp;                                     // 0xF54(0x4)(None)
	float                                        CameraPitchDown;                                   // 0xF58(0x4)(None)
	uint8                                        Pad_35DE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CameraOffsetScale;                                 // 0xF60(0x18)(None)
	float                                        HangingCameraPitchUp;                              // 0xF78(0x4)(None)
	float                                        HangingCameraPitchDown;                            // 0xF7C(0x4)(None)
	struct FVector                               HangingCameraOffsetScale;                          // 0xF80(0x18)(None)
	float                                        SwitchToFPVDistance;                               // 0xF98(0x4)(None)
	float                                        SwitchToFPVDownDot;                                // 0xF9C(0x4)(None)
	float                                        SwitchToFPVTransitionDuration;                     // 0xFA0(0x4)(None)
	float                                        SwitchFromFPVTransitionDuration;                   // 0xFA4(0x4)(None)
	float                                        UpAndOverExtendedUp;                               // 0xFA8(0x4)(None)
	float                                        UpAndOverExtendedForward;                          // 0xFAC(0x4)(None)
	float                                        HangingFailTraceExtraLength;                       // 0xFB0(0x4)(None)
	float                                        HangingFailMinDotUp;                               // 0xFB4(0x4)(None)
	float                                        HangingFailOppositeDirectTraceLength;              // 0xFB8(0x4)(None)
	float                                        HangingFailOppositeDirectTraceRadius;              // 0xFBC(0x4)(None)
	float                                        InvisibleWallTooCloseRadius;                       // 0xFC0(0x4)(None)
	uint8                                        Pad_35DF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalClimbingSettings* GetDefaultObj();

};

// 0x240 (0x268 - 0x28)
// Class ShooterGame.PrimalColorSet
class UPrimalColorSet : public UObject
{
public:
	struct FColorSetDefinition                   ColorSetDefinitions[0x6];                          // 0x28(0x240)(None)

	static class UClass* StaticClass();
	static class UPrimalColorSet* GetDefaultObj();

};

// 0x188 (0x540 - 0x3B8)
// Class ShooterGame.PrimalCryopodTooltipWidget
class UPrimalCryopodTooltipWidget : public UTooltipSmartLayoutWidget
{
public:
	class UTexture2D*                            FemaleIcon;                                        // 0x3B8(0x8)(ZeroConstructor)
	class UTexture2D*                            MaleIcon;                                          // 0x3C0(0x8)(ZeroConstructor)
	struct FLinearColor                          FemaleColor;                                       // 0x3C8(0x10)(None)
	struct FLinearColor                          MaleColor;                                         // 0x3D8(0x10)(None)
	uint8                                        Pad_35E5[0x158];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalCryopodTooltipWidget* GetDefaultObj();

};

// 0x0 (0x548 - 0x548)
// Class ShooterGame.PrimalDestroyedMeshActor
class APrimalDestroyedMeshActor : public AFadingDestructibleActor
{
public:

	static class UClass* StaticClass();
	static class APrimalDestroyedMeshActor* GetDefaultObj();

};

// 0x58 (0x80 - 0x28)
// Class ShooterGame.PrimalDinoEntry
class UPrimalDinoEntry : public UObject
{
public:
	uint8                                        Pad_35E6[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DinoNameTag;                                       // 0x50(0x8)(None)
	class FString                                DinoDescriptiveName;                               // 0x58(0x10)(None)
	class UTexture2D*                            DinoIcon;                                          // 0x68(0x8)(ZeroConstructor)
	class UMaterialInterface*                    DinoMaterial;                                      // 0x70(0x8)(None)
	bool                                         bRequiresKill;                                     // 0x78(0x1)(None)
	uint8                                        Pad_35E7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalDinoEntry* GetDefaultObj();

};

// 0x28 (0x1400 - 0x13D8)
// Class ShooterGame.PrimalDinoMeshComponent
class UPrimalDinoMeshComponent : public USkeletalMeshComponent
{
public:
	uint8                                        bUpdateBoundsWhenStationary;                       // 0x13D8(0x1)(None)
	uint8                                        Pad_35E8[0x27];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalDinoMeshComponent* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class ShooterGame.PrimalDinoSettings
class UPrimalDinoSettings : public UObject
{
public:
	TArray<struct FDinoFoodEffectivenessMultipliers> FoodEffectivenessMultipliers;                      // 0x28(0x10)(ZeroConstructor)
	TArray<struct FDinoFoodEffectivenessMultipliers> ExtraFoodEffectivenessMultipliers;                 // 0x38(0x10)(ZeroConstructor)
	float                                        TamingAffinityNoFoodDecreasePercentageSpeed;       // 0x48(0x4)(None)
	uint8                                        Pad_35EB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDamageTypeAdjuster>           BaseDamageTypeAdjusters;                           // 0x50(0x10)(ZeroConstructor)
	TArray<struct FDamageTypeAdjuster>           ExtraDamageTypeAdjusters;                          // 0x60(0x10)(ZeroConstructor)
	class UTexture2D*                            DinoFoodTypeImage;                                 // 0x70(0x8)(None)
	class FString                                DinoFoodTypeName;                                  // 0x78(0x10)(None)
	bool                                         bWakingTameDisplayItemName;                        // 0x88(0x1)(None)
	uint8                                        Pad_35EC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalDinoSettings* GetDefaultObj();

};

// 0x0 (0x10E8 - 0x10E8)
// Class ShooterGame.PrimalDinoStatusComponent
class UPrimalDinoStatusComponent : public UPrimalCharacterStatusComponent
{
public:

	static class UClass* StaticClass();
	static class UPrimalDinoStatusComponent* GetDefaultObj();

};

// 0x230 (0x5E8 - 0x3B8)
// Class ShooterGame.PrimalDinoToolTipWidget
class UPrimalDinoToolTipWidget : public UToolTipWidget
{
public:
	class FString                                DinoNameLabelName;                                 // 0x3B8(0x10)(None)
	class FString                                TamedLabelName;                                    // 0x3C8(0x10)(None)
	class FString                                GenderLabelName;                                   // 0x3D8(0x10)(None)
	class FString                                InfoLabelName;                                     // 0x3E8(0x10)(None)
	class FString                                InfoLabel2Name;                                    // 0x3F8(0x10)(None)
	class FString                                DinoIconImageName;                                 // 0x408(0x10)(None)
	class FName                                  DinoUnconsciousPanelName;                          // 0x418(0x8)(None)
	class FName                                  DinoTamingPanelName;                               // 0x420(0x8)(None)
	class FName                                  TorpidityProgressBarName;                          // 0x428(0x8)(None)
	class FName                                  CustomProgressBarName;                             // 0x430(0x8)(None)
	class FName                                  TamingProgressBarName;                             // 0x438(0x8)(None)
	class FName                                  HealthBarName;                                     // 0x440(0x8)(None)
	class FName                                  StaminaBarName;                                    // 0x448(0x8)(None)
	class FName                                  FoodBarName;                                       // 0x450(0x8)(None)
	class FName                                  WeightBarName;                                     // 0x458(0x8)(None)
	class FName                                  XPBarName;                                         // 0x460(0x8)(None)
	class FName                                  TorpidityBarName;                                  // 0x468(0x8)(None)
	class FName                                  OxygenBarName;                                     // 0x470(0x8)(None)
	class FName                                  DamageBarName;                                     // 0x478(0x8)(None)
	class FName                                  SpeedBarName;                                      // 0x480(0x8)(None)
	bool                                         bShowExtendedInfo;                                 // 0x488(0x1)(None)
	uint8                                        Pad_35EF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          FemaleColor;                                       // 0x48C(0x10)(None)
	struct FLinearColor                          MaleColor;                                         // 0x49C(0x10)(None)
	struct FLinearColor                          NoGenderColor;                                     // 0x4AC(0x10)(None)
	uint8                                        Pad_35F0[0x11C];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            FoodBarDefaultBackground;                          // 0x5D8(0x8)(ZeroConstructor)
	class UTexture2D*                            FoodBarDefaultForeground;                          // 0x5E0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalDinoToolTipWidget* GetDefaultObj();

};

// 0x268 (0x620 - 0x3B8)
// Class ShooterGame.PrimalEggToolTipWidget
class UPrimalEggToolTipWidget : public UToolTipWidget
{
public:
	struct FLinearColor                          TemperatureColor_Perfect;                          // 0x3B8(0x10)(None)
	struct FLinearColor                          TemperatureColor_Boosted;                          // 0x3C8(0x10)(None)
	struct FLinearColor                          TemperatureColor_Cool;                             // 0x3D8(0x10)(None)
	struct FLinearColor                          TemperatureColor_TooCold;                          // 0x3E8(0x10)(None)
	struct FLinearColor                          TemperatureColor_Warm;                             // 0x3F8(0x10)(None)
	struct FLinearColor                          TemperatureColor_TooHot;                           // 0x408(0x10)(None)
	struct FLinearColor                          GenderColor_Female;                                // 0x418(0x10)(None)
	struct FLinearColor                          GenderColor_Male;                                  // 0x428(0x10)(None)
	struct FLinearColor                          GenderColor_Unknown;                               // 0x438(0x10)(None)
	class UTexture2D*                            GenderIcon_Female;                                 // 0x448(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Male;                                   // 0x450(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Unknown;                                // 0x458(0x8)(ZeroConstructor)
	float                                        RightColumnWidth;                                  // 0x460(0x4)(None)
	float                                        TemperatureGaugeTotalDegreesToDisplay;             // 0x464(0x4)(None)
	float                                        TemperatureGaugeIndicatorHorizontalOffset;         // 0x468(0x4)(None)
	uint8                                        Pad_35F1[0x1B4];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalEggToolTipWidget* GetDefaultObj();

};

// 0x68 (0x90 - 0x28)
// Class ShooterGame.PrimalEngramEntry
class UPrimalEngramEntry : public UObject
{
public:
	uint8                                        Pad_35F2[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RequiredCharacterLevel;                            // 0x50(0x4)(None)
	int32                                        RequiredEngramPoints;                              // 0x54(0x4)(None)
	uint8                                        bGiveBlueprintToPlayerInventory : 1;               // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        bCanBeManuallyUnlocked : 1;                        // Mask: 0x2, PropSize: 0x10x58(0x1)(None)
	uint8                                        bForceIsTekEngram : 1;                             // Mask: 0x4, PropSize: 0x10x58(0x1)(None)
	uint8                                        BitPad_2BA : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35F3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                BluePrintEntry;                                    // 0x60(0x8)(ZeroConstructor)
	class FString                                ExtraEngramDescription;                            // 0x68(0x10)(None)
	TArray<struct FEngramEntries>                EngramRequirementSets;                             // 0x78(0x10)(None)
	int32                                        MyEngramIndex;                                     // 0x88(0x4)(None)
	enum class EEngramGroup                      EngramGroup;                                       // 0x8C(0x1)(None)
	enum class EEngramCategory                   EngramCategory;                                    // 0x8D(0x1)(None)
	uint8                                        Pad_35F4[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalEngramEntry* GetDefaultObj();

};

// 0x138 (0x5F0 - 0x4B8)
// Class ShooterGame.PrimalFallingTreeActor
class APrimalFallingTreeActor : public ADestructibleBaseActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x4B8(0x8)(ZeroConstructor)
	class UAudioComponent*                       AudioComponent;                                    // 0x4C0(0x8)(ZeroConstructor)
	uint8                                        Pad_35F5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            InitialTransform;                                  // 0x4D0(0x60)(None)
	uint8                                        bIsFalling : 1;                                    // Mask: 0x1, PropSize: 0x10x530(0x1)(None)
	uint8                                        bUseAudioComponentForImpactSound : 1;              // Mask: 0x2, PropSize: 0x10x530(0x1)(None)
	uint8                                        bHasPlayedImpactSound : 1;                         // Mask: 0x4, PropSize: 0x10x530(0x1)(None)
	uint8                                        BitPad_2BB : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35F6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FallingProgress;                                   // 0x534(0x4)(None)
	float                                        HarvestSpeed;                                      // 0x538(0x4)(None)
	uint8                                        Pad_35F7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               HarvestDirection;                                  // 0x540(0x18)(None)
	float                                        CurrentHarvestAngle;                               // 0x558(0x4)(None)
	float                                        HarvestAngleTarget;                                // 0x55C(0x4)(None)
	uint8                                        bFadeOutLocation : 1;                              // Mask: 0x1, PropSize: 0x10x560(0x1)(None)
	uint8                                        bFadeOutMaterial : 1;                              // Mask: 0x2, PropSize: 0x10x560(0x1)(None)
	uint8                                        BitPad_2BC : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_35F8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FadeOutDuration;                                   // 0x564(0x4)(None)
	struct FVector                               FadeOutLocationOffset;                             // 0x568(0x18)(None)
	class UCurveLinearColor*                     HarvestSwayCurve;                                  // 0x580(0x8)(ZeroConstructor)
	class USoundBase*                            HarvestSound;                                      // 0x588(0x8)(ZeroConstructor)
	class USoundBase*                            GroundImpactSound;                                 // 0x590(0x8)(ZeroConstructor)
	float                                        DistanceAlongTreeToSpawnImpactSound;               // 0x598(0x4)(None)
	uint8                                        Pad_35F9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInstanceDynamic*>      HarvestMIDs;                                       // 0x5A0(0x10)(ZeroConstructor)
	class UPrimalWindSourceComponent*            WindSourceComponent;                               // 0x5B0(0x8)(ZeroConstructor)
	float                                        WindSourceSize;                                    // 0x5B8(0x4)(None)
	uint8                                        Pad_35FA[0x34];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalFallingTreeActor* GetDefaultObj();

	void UpdateWindSource(float DeltaTime);
};

// 0x0 (0x4C0 - 0x4C0)
// Class ShooterGame.PrimalFieldSystemActor
class APrimalFieldSystemActor : public AFieldSystemActor
{
public:

	static class UClass* StaticClass();
	static class APrimalFieldSystemActor* GetDefaultObj();

	void SetActivationType(enum class EFieldActivationType_New NewActivationType);
	void CE_Trigger(const struct FVector& IncomingImpactVector, float DirectionalForceStrengthMultiplier, float RadialForceStrengthMultiplier, float IncomingVelocity);
};

// 0x80 (0x538 - 0x4B8)
// Class ShooterGame.PrimalFoliageSolver
class APrimalFoliageSolver : public AActor
{
public:
	TArray<class UPrimalWindSourceComponent*>    WindSourceComponents;                              // 0x4B8(0x10)(ZeroConstructor)
	float                                        FluidRadiusScale;                                  // 0x4C8(0x4)(None)
	float                                        FluidRadiusBias;                                   // 0x4CC(0x4)(None)
	bool                                         bUseVolumetricDispatcher;                          // 0x4D0(0x1)(None)
	uint8                                        Pad_3610[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinEvaluationsForOneTimeFoliageInteraction;        // 0x4D4(0x4)(None)
	bool                                         bEnabled;                                          // 0x4D8(0x1)(None)
	uint8                                        Pad_3611[0x5F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalFoliageSolver* GetDefaultObj();

	void UnRegisterWindSource(class UPrimalWindSourceComponent* WindSource);
	void RegisterWindSource(class UPrimalWindSourceComponent* WindSource);
	void GetValidSourceCount(enum class EInteractionType Type, int32 ReturnValue);
	void GetSourceDataId(enum class EInteractionType Type, const class FString& ReturnValue);
	void ApplySimParametersWithValues(const struct FTransform& SourceSpaceTransform, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float InnerSphereRadius, float OuterSphereRadius, float InteractionStrength, float FoliagePlasticity, float WaterBendAmount, const struct FVector3f& DirectionalRadial, enum class EInteractionType InteractionType, const struct FVector4f& ExtraCapsuleVelocity, const struct FVector& OwnerLocation, const struct FVector4f& Dir, const struct FVector4f& SrcScale);
	void ApplyParametersFromVolumetricDispatch(const struct FTransform& SourceSpaceTransform, const struct FVolumetricDispatch& Dispatch, enum class EInteractionType Type);
	void ApplyParametersFromSource(float DeltaTime, const struct FTransform& SourceSpaceTransform, class UPrimalWindSourceComponent* WindSource);
	void ApplyParameters(float DeltaTime);
};

// 0x2F00 (0x2F28 - 0x28)
// Class ShooterGame.PrimalGameData
class UPrimalGameData : public UObject
{
public:
	uint8                                        Pad_362F[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ModName;                                           // 0x58(0x10)(None)
	class FString                                ModDescription;                                    // 0x68(0x10)(None)
	struct FPrimalCharacterStatusValueDefinition StatusValueDefinitions[0xC];                       // 0x78(0x180)(ZeroConstructor)
	struct FPrimalCharacterStatusStateDefinition StatusStateDefinitions[0xE];                       // 0x1F8(0x4D0)(ZeroConstructor)
	struct FPrimalItemStatDefinition             ItemStatDefinitions[0x8];                          // 0x6C8(0xC0)(ZeroConstructor)
	struct FPrimalItemDefinition                 ItemTypeDefinitions[0x9];                          // 0x788(0x120)(ZeroConstructor)
	struct FPrimalEquipmentDefinition            EquipmentTypeDefinitions[0xC];                     // 0x8A8(0x120)(ZeroConstructor)
	TArray<class UClass*>                        MasterItemList;                                    // 0x9C8(0x10)(ZeroConstructor)
	TArray<struct FPrimalItemQuality>            ItemQualityDefinitions;                            // 0x9D8(0x10)(None)
	TArray<class UClass*>                        EngramBlueprintClasses;                            // 0x9E8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalEngramBlueprintClasses;                  // 0x9F8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        RemoveEngramBlueprintClasses;                      // 0xA08(0x10)(ZeroConstructor)
	TArray<struct FStatusValueModifierDescription> StatusValueModifierDescriptions;                   // 0xA18(0x10)(ZeroConstructor)
	TArray<class FString>                        PlayerSpawnRegions;                                // 0xA28(0x10)(None)
	class USoundBase*                            TutorialDisplaySound;                              // 0xA38(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_StartItemDrag;                               // 0xA40(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_StopItemDrag;                                // 0xA48(0x8)(ZeroConstructor)
	class UTexture2D*                            PreventGrindingIcon;                               // 0xA50(0x8)(ZeroConstructor)
	class USoundClass*                           ExplorerNoteAudioSoundClass;                       // 0xA58(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_CancelPlacingStructure;                      // 0xA60(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ChooseStructureRotation;                     // 0xA68(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_FailPlacingStructure;                        // 0xA70(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ConfirmPlacingStructure;                     // 0xA78(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_StartPlacingStructure;                       // 0xA80(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_CorpseDecompose;                             // 0xA88(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ApplyLevelUp;                                // 0xA90(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ApplyLevelPoint;                             // 0xA98(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_LearnedEngram;                               // 0xAA0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ReconnectToCharacter;                        // 0xAA8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_DropAllItems;                                // 0xAB0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransferAllItemsToRemote;                    // 0xAB8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransferAllItemsFromRemote;                  // 0xAC0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransferItemToRemote;                        // 0xAC8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TransferItemFromRemote;                      // 0xAD0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_AddItemToSlot;                               // 0xAD8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_RemoveItemFromSlot;                          // 0xAE0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ClearCraftQueue;                             // 0xAE8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_AddToCraftQueue;                             // 0xAF0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_AddToCraftQueueAlt;                          // 0xAF8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_SetRadioFrequency;                           // 0xB00(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_AddPinToMap;                                 // 0xB08(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_RemovePinFromMap;                            // 0xB10(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ApplyDye;                                    // 0xB18(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ApplyPaint;                                  // 0xB20(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_SetTextGeneric;                              // 0xB28(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_SplitItemStack;                              // 0xB30(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_MergeItemStack;                              // 0xB38(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_InputPinDigit;                               // 0xB40(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_PinValidated;                                // 0xB48(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_PinRejected;                                 // 0xB50(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TribeWarBegin;                               // 0xB58(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_TribeWarEnd;                                 // 0xB60(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_DropInventoryItem;                           // 0xB68(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_RefillWaterContainer;                        // 0xB70(0x8)(ZeroConstructor)
	TArray<struct FAppIDItem>                    CoreAppIDItems;                                    // 0xB78(0x10)(ZeroConstructor)
	TArray<struct FAppIDItem>                    AppIDItems;                                        // 0xB88(0x10)(ZeroConstructor)
	TArray<class UPrimalEngramEntry*>            EngramBlueprintEntries;                            // 0xB98(0x10)(ZeroConstructor)
	TArray<class UPrimalDinoEntry*>              DinoEntriesObjects;                                // 0xBA8(0x10)(ZeroConstructor)
	TArray<class UGenericDataListEntry*>         ExplorerNoteEntriesObjects;                        // 0xBB8(0x10)(ZeroConstructor)
	TArray<class UGenericDataListEntry*>         HeadHairStylesEntriesObjects;                      // 0xBC8(0x10)(ZeroConstructor)
	TArray<class UGenericDataListEntry*>         FacialHairStylesEntriesObjects;                    // 0xBD8(0x10)(ZeroConstructor)
	class UClass*                                DefaultMultiUseToolTipWidget;                      // 0xBE8(0x8)(ZeroConstructor)
	class UClass*                                DefaultToolTipWidget;                              // 0xBF0(0x8)(ZeroConstructor)
	class UClass*                                DefaultDinoMinimalTooltipWidget;                   // 0xBF8(0x8)(ZeroConstructor)
	class UClass*                                DefaultItemToolTipWidget;                          // 0xC00(0x8)(ZeroConstructor)
	class UClass*                                StarterNoteItem;                                   // 0xC08(0x8)(ZeroConstructor)
	TArray<class UClass*>                        PrimaryResources;                                  // 0xC10(0x10)(ZeroConstructor)
	class UClass*                                GenericDroppedItemTemplate;                        // 0xC20(0x8)(ZeroConstructor)
	class UMaterialInterface*                    PostProcess_KnockoutBlur;                          // 0xC28(0x8)(ZeroConstructor)
	class UMaterialInterface*                    AdditionalDeathPostProcessEffect;                  // 0xC30(0x8)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UMaterialInterface>> BuffPostProcessEffects;                            // 0xC38(0x10)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UMaterialInterface>> AdditionalBuffPostProcessEffects;                  // 0xC48(0x10)(ZeroConstructor)
	TArray<struct FRangedValues>                 EngramPointPurchaseRanges;                         // 0xC58(0x10)(None)
	class UClass*                                GenericDroppedItemTemplateLowQuality;              // 0xC68(0x8)(ZeroConstructor)
	uint8                                        Pad_3633[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            UnknownIcon;                                       // 0xC80(0x8)(ZeroConstructor)
	class UMaterialInterface*                    UnknownMaterial;                                   // 0xC88(0x8)(ZeroConstructor)
	class UTexture2D*                            MasterDyeListLUT;                                  // 0xC90(0x8)(ZeroConstructor)
	class UTexture2D*                            WhiteTexture;                                      // 0xC98(0x8)(ZeroConstructor)
	class UTexture2D*                            BlueprintBackground;                               // 0xCA0(0x8)(ZeroConstructor)
	class UTexture2D*                            BabyCuddleIcon;                                    // 0xCA8(0x8)(ZeroConstructor)
	class UTexture2D*                            ParentDinoIcon;                                    // 0xCB0(0x8)(ZeroConstructor)
	class UTexture2D*                            ImprintedRiderIcon;                                // 0xCB8(0x8)(ZeroConstructor)
	class UTexture2D*                            WeaponAccessoryActivatedIcon;                      // 0xCC0(0x8)(ZeroConstructor)
	class UTexture2D*                            EngramBackground;                                  // 0xCC8(0x8)(ZeroConstructor)
	class UTexture2D*                            VoiceChatIcon;                                     // 0xCD0(0x8)(ZeroConstructor)
	class UTexture2D*                            VoiceChatMutedIcon;                                // 0xCD8(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemButtonRecentlySelectedBackground;              // 0xCE0(0x8)(ZeroConstructor)
	TArray<class UClass*>                        DinoEntries;                                       // 0xCE8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalDinoEntries;                             // 0xCF8(0x10)(ZeroConstructor)
	float                                        GlobalGeneralArmorDegradationMultiplier;           // 0xD08(0x4)(None)
	float                                        GlobalSpecificArmorDegradationMultiplier;          // 0xD0C(0x4)(None)
	float                                        GlobalSpecificArmorRatingMultiplier;               // 0xD10(0x4)(None)
	float                                        GlobalGeneralArmorRatingMultiplier;                // 0xD14(0x4)(None)
	float                                        EnemyFoundationPreventionRadius;                   // 0xD18(0x4)(None)
	bool                                         bForceEnablePhysicsSimulation;                     // 0xD1C(0x1)(None)
	uint8                                        Pad_3634[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FColorDefinition>              ColorDefinitions;                                  // 0xD20(0x10)(None)
	TArray<class UObject*>                       ExtraResources;                                    // 0xD30(0x10)(ZeroConstructor)
	TArray<class UObject*>                       BaseExtraResources;                                // 0xD40(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         BaseExtraResourcesSoft;                            // 0xD50(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         BaseExtraResourcesContainersSoft;                  // 0xD60(0x10)(ZeroConstructor)
	class USoundBase*                            CombatMusicDay;                                    // 0xD70(0x8)(ZeroConstructor)
	class USoundBase*                            CombatMusicNight;                                  // 0xD78(0x8)(ZeroConstructor)
	class USoundBase*                            CombatMusicDay_Heavy;                              // 0xD80(0x8)(ZeroConstructor)
	class USoundBase*                            CombatMusicNight_Heavy;                            // 0xD88(0x8)(ZeroConstructor)
	class USoundBase*                            LevelUpStingerSound;                               // 0xD90(0x8)(ZeroConstructor)
	class USoundBase*                            TrackMissionSound;                                 // 0xD98(0x8)(ZeroConstructor)
	class USoundBase*                            UntrackMissionSound;                               // 0xDA0(0x8)(ZeroConstructor)
	struct FPlayerCharacterGenderDefinition      PlayerCharacterGenderDefinitions[0x2];             // 0xDA8(0x1470)(ZeroConstructor)
	class UClass*                                DefaultGameMode;                                   // 0x2218(0x8)(ZeroConstructor)
	struct FLevelExperienceRamp                  LevelExperienceRamps[0x4];                         // 0x2220(0x40)(None)
	struct FLevelExperienceRamp                  SinglePlayerLevelExperienceRamps[0x4];             // 0x2260(0x40)(None)
	TArray<struct FNamedTeamDefinition>          NamedTeamDefinitions;                              // 0x22A0(0x10)(None)
	TArray<int32>                                PlayerLevelEngramPoints;                           // 0x22B0(0x10)(None)
	TArray<int32>                                PlayerLevelEngramPointsSP;                         // 0x22C0(0x10)(None)
	TArray<class FString>                        PreventBuildStructureReasonStrings;                // 0x22D0(0x10)(None)
	TArray<struct FExplorerNoteAchievement>      ExplorerNoteAchievements;                          // 0x22E0(0x10)(None)
	TArray<struct FClassRemapping>               Remap_NPC;                                         // 0x22F0(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_SupplyCrates;                                // 0x2300(0x10)(ZeroConstructor)
	TArray<struct FActiveEventSupplyCrateWeight> Remap_ActiveEventSupplyCrates;                     // 0x2310(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_ResourceComponents;                          // 0x2320(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_NPCSpawnEntries;                             // 0x2330(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_Engrams;                                     // 0x2340(0x10)(ZeroConstructor)
	TArray<struct FClassRemapping>               Remap_Items;                                       // 0x2350(0x10)(ZeroConstructor)
	TArray<struct FClassAddition>                AdditionalStructureEngrams;                        // 0x2360(0x10)(ZeroConstructor)
	TArray<struct FBuffAddition>                 AdditionalDefaultBuffs;                            // 0x2370(0x10)(ZeroConstructor)
	TArray<struct FAvailableMission>             AvailableMissions;                                 // 0x2380(0x10)(ZeroConstructor)
	class UClass*                                ActorToSpawnUponEnemyCoreStructureDeath;           // 0x2390(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> AdditionalStructuresToPlace;                       // 0x2398(0x10)(ZeroConstructor)
	TArray<struct FStructureToBuildAddition>     AdditionalStructuresToBuild;                       // 0x23A8(0x10)(ZeroConstructor)
	TArray<struct FStructureVariantAddition>     AdditionalStructureVariants;                       // 0x23B8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        MasterDyeList;                                     // 0x23C8(0x10)(ZeroConstructor)
	uint8                                        Pad_3635[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EnemyCoreStructureDeathActorRadiusBuildCheck;      // 0x23E8(0x4)(None)
	uint8                                        Pad_3636[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DeathDestructionDepositInventoryClass;             // 0x23F0(0x8)(ZeroConstructor)
	class UTexture2D*                            MateBoostIcon;                                     // 0x23F8(0x8)(ZeroConstructor)
	class UTexture2D*                            EggBoostIcon;                                      // 0x2400(0x8)(ZeroConstructor)
	class UTexture2D*                            MatingIcon;                                        // 0x2408(0x8)(ZeroConstructor)
	class UTexture2D*                            NearFeedIcon;                                      // 0x2410(0x8)(ZeroConstructor)
	class UTexture2D*                            BuffedIcon;                                        // 0x2418(0x8)(ZeroConstructor)
	class UTexture2D*                            TethererdIcon;                                     // 0x2420(0x8)(ZeroConstructor)
	class UClass*                                FooterTemplate;                                    // 0x2428(0x8)(ZeroConstructor)
	float                                        TribeXPSharePercent;                               // 0x2430(0x4)(None)
	int32                                        OverrideServerPhysXSubsteps;                       // 0x2434(0x4)(None)
	float                                        OverrideServerPhysXSubstepsDeltaTime;              // 0x2438(0x4)(None)
	bool                                         bInitialized;                                      // 0x243C(0x1)(None)
	uint8                                        Pad_3637[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPlayerDynamicMaterialFloat>   DefaultDynamicMaterialByteFloats;                  // 0x2440(0x10)(None)
	TArray<struct FPlayerDynamicMaterialVector>  DefaultDynamicMaterialByteVectors;                 // 0x2450(0x10)(None)
	TArray<struct FPlayerDynamicMaterialColors>  DefaultDynamicMaterialByteColors;                  // 0x2460(0x10)(None)
	uint8                                        Pad_3638[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            Sound_TamedDinos[0x3];                             // 0x24C0(0x18)(ZeroConstructor)
	class USoundBase*                            Sound_ItemStartCrafting;                           // 0x24D8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ItemFinishCrafting;                          // 0x24E0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ItemStartRepairing;                          // 0x24E8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ItemFinishRepairing;                         // 0x24F0(0x8)(ZeroConstructor)
	class UClass*                                NotifClass;                                        // 0x24F8(0x8)(ZeroConstructor)
	class UClass*                                StructureDefaultOverlayToolTipWidget;              // 0x2500(0x8)(ZeroConstructor)
	class UClass*                                MeleeHitColorizeStructuresUI;                      // 0x2508(0x8)(ZeroConstructor)
	float                                        MinPaintDurationConsumption;                       // 0x2510(0x4)(None)
	float                                        MaxPaintDurationConsumption;                       // 0x2514(0x4)(None)
	float                                        MinDinoRadiusForPaintConsumption;                  // 0x2518(0x4)(None)
	float                                        MaxDinoRadiusForPaintConsumption;                  // 0x251C(0x4)(None)
	TArray<struct FDinoBabySetup>                DinoBabySetups;                                    // 0x2520(0x10)(None)
	TArray<struct FDinoBabySetup>                DinoGestationSetups;                               // 0x2530(0x10)(None)
	class UClass*                                SoapItemTemplate;                                  // 0x2540(0x8)(ZeroConstructor)
	class UTexture2D*                            NameTagWildcardAdmin;                              // 0x2548(0x8)(ZeroConstructor)
	class UTexture2D*                            NameTagServerAdmin;                                // 0x2550(0x8)(ZeroConstructor)
	class UTexture2D*                            NameTagTribeAdmin;                                 // 0x2558(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    BadgeGroupsNameTag;                                // 0x2560(0x10)(ZeroConstructor)
	class UTexture2D*                            CrossPlayGeneric;                                  // 0x2570(0x8)(ZeroConstructor)
	class UTexture2D*                            CrossPlaySteam;                                    // 0x2578(0x8)(ZeroConstructor)
	class UTexture2D*                            CrossPlayPS5;                                      // 0x2580(0x8)(ZeroConstructor)
	class UTexture2D*                            CrossPlayXSX;                                      // 0x2588(0x8)(ZeroConstructor)
	TArray<class FString>                        AchievementIDs;                                    // 0x2590(0x10)(None)
	uint8                                        Pad_363C[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                AdditionalEggWeightsToSpawn;                       // 0x25F0(0x10)(None)
	TArray<class UClass*>                        AdditionalEggItemsToSpawn;                         // 0x2600(0x10)(ZeroConstructor)
	TArray<float>                                FertilizedAdditionalEggWeightsToSpawn;             // 0x2610(0x10)(None)
	TArray<class UClass*>                        FertilizedAdditionalEggItemsToSpawn;               // 0x2620(0x10)(ZeroConstructor)
	class FString                                ItemAchievementsName;                              // 0x2630(0x10)(None)
	TArray<class UClass*>                        ItemAchievementsList;                              // 0x2640(0x10)(ZeroConstructor)
	TArray<class UClass*>                        GlobalCuddleFoodList;                              // 0x2650(0x10)(ZeroConstructor)
	TArray<struct FMultiAchievement>             MultiAchievements;                                 // 0x2660(0x10)(None)
	class USoundBase*                            DinoIncrementedImprintingSound;                    // 0x2670(0x8)(ZeroConstructor)
	class USoundBase*                            HitMarkerCharacterSound;                           // 0x2678(0x8)(ZeroConstructor)
	class USoundBase*                            HitMarkerStructureSound;                           // 0x2680(0x8)(ZeroConstructor)
	class UMaterialParameterCollection*          FOVScaleMaterialParamCollection;                   // 0x2688(0x8)(ZeroConstructor)
	TArray<struct FNPCSpawnEntriesContainerAdditions> CoreNPCSpawnEntriesContainerAdditions;             // 0x2690(0x10)(ZeroConstructor)
	TArray<struct FNPCSpawnEntriesContainerAdditions> TheNPCSpawnEntriesContainerAdditions;              // 0x26A0(0x10)(ZeroConstructor)
	class UMaterialInterface*                    PostProcess_ColorLUT;                              // 0x26B0(0x8)(ZeroConstructor)
	class UClass*                                DefaultStructureSettings;                          // 0x26B8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_DossierUnlocked;                             // 0x26C0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_ItemUseOnItem;                               // 0x26C8(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_RemoveItemSkin;                              // 0x26D0(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_RemoveClipAmmo;                              // 0x26D8(0x8)(ZeroConstructor)
	TArray<struct FExplorerNoteEntry>            ExplorerNoteEntries;                               // 0x26E0(0x10)(ZeroConstructor)
	float                                        ExplorerNoteXPGain;                                // 0x26F0(0x4)(None)
	uint8                                        Pad_363D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                ExplorerNoteIntroIDs;                              // 0x26F8(0x10)(None)
	class UTexture2D*                            BuffTypeBackgrounds[0x3];                          // 0x2708(0x18)(ZeroConstructor)
	class UTexture2D*                            BuffTypeForegrounds[0x3];                          // 0x2720(0x18)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             ExplorerNoteXPBuff;                                // 0x2738(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             SpecialExplorerNoteXPBuff;                         // 0x2768(0x30)(ZeroConstructor)
	class UTexture2D*                            PerMapExplorerNoteLockedIcon;                      // 0x2798(0x8)(ZeroConstructor)
	class UTexture2D*                            TamedDinoUnlockedIcon;                             // 0x27A0(0x8)(ZeroConstructor)
	class UTexture2D*                            TamedDinoLockedIcon;                               // 0x27A8(0x8)(ZeroConstructor)
	TArray<struct FUnlockableEmoteEntry>         UnlockableEmotes;                                  // 0x27B0(0x10)(ZeroConstructor)
	TArray<struct FEmoteGroup>                   EmoteGroups;                                       // 0x27C0(0x10)(ZeroConstructor)
	TArray<struct FClassRemappingWeight>         GlobalNPCRandomSpawnClassWeights;                  // 0x27D0(0x10)(ZeroConstructor)
	class UTexture2D*                            DinoOrderIcon;                                     // 0x27E0(0x8)(ZeroConstructor)
	class UTexture2D*                            DinoMinimalIcon;                                   // 0x27E8(0x8)(ZeroConstructor)
	class UTexture2D*                            PlayerMinimalIcon;                                 // 0x27F0(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalEmitterSpawnable> DinoOrderEffect_MoveTo;                            // 0x27F8(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalEmitterSpawnable> DinoOrderEffect_AttackTarget;                      // 0x2828(0x30)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanMaleAnimSequenceOverrides;          // 0x2858(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanFemaleAnimSequenceOverrides;        // 0x2868(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanMaleAnimMontagesOverrides;          // 0x2878(0x10)(ZeroConstructor)
	TArray<struct FObjectCorrelation>            AdditionalHumanFemaleAnimMontagesOverrides;        // 0x2888(0x10)(ZeroConstructor)
	TArray<struct FOverrideAnimBlueprintEntry>   AdditionalHumanMaleOverrideAnimBlueprints;         // 0x2898(0x10)(ZeroConstructor)
	TArray<struct FOverrideAnimBlueprintEntry>   AdditionalHumanFemaleOverrideAnimBlueprints;       // 0x28A8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        ServerExtraWorldSingletonActorClasses;             // 0x28B8(0x10)(ZeroConstructor)
	bool                                         bForceServerUseDinoList;                           // 0x28C8(0x1)(None)
	uint8                                        Pad_363F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ExtraStackedGameDataClasses;                       // 0x28D0(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          HeadHairStyleDefinitions;                          // 0x28E0(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          FacialHairStyleDefinitions;                        // 0x28F0(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          EyebrowsDefinitions;                               // 0x2900(0x10)(ZeroConstructor)
	uint32                                       PlayerMeshMaterialIndex;                           // 0x2910(0x4)(None)
	class FName                                  EyebrowMaskParamName;                              // 0x2914(0x8)(None)
	class FName                                  HairMaskParamName;                                 // 0x291C(0x8)(None)
	class FName                                  FacialHairMaskParamName;                           // 0x2924(0x8)(None)
	uint8                                        Pad_3640[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHairStyleDefinition                  EyelashesDefinitions;                              // 0x2930(0xB8)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          AdditionalHeadHairStyleDefinitions;                // 0x29E8(0x10)(ZeroConstructor)
	TArray<struct FHairStyleDefinition>          AdditionalFacialHairStyleDefinitions;              // 0x29F8(0x10)(ZeroConstructor)
	class USoundBase*                            GenericWaterPostprocessAmbientSound;               // 0x2A08(0x8)(ZeroConstructor)
	class UClass*                                OverridePlayerDataClass;                           // 0x2A10(0x8)(ZeroConstructor)
	TArray<class FName>                          AllDinosAchievementNameTags;                       // 0x2A18(0x10)(None)
	class USoundBase*                            GenericArrowPickedUpSound;                         // 0x2A28(0x8)(ZeroConstructor)
	class UTexture2D*                            AimMagnetismIcon;                                  // 0x2A30(0x8)(ZeroConstructor)
	class UTexture2D*                            UnlockIcon;                                        // 0x2A38(0x8)(ZeroConstructor)
	struct FColor                                WheelFolderColor;                                  // 0x2A40(0x4)(None)
	struct FColor                                WheelBackColor;                                    // 0x2A44(0x4)(None)
	class UParticleSystem*                       CorpseLocatorEffect;                               // 0x2A48(0x8)(ZeroConstructor)
	class UTexture2D*                            MaxInventoryIcon;                                  // 0x2A50(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemSkinIcon;                                      // 0x2A58(0x8)(ZeroConstructor)
	TArray<enum class ECollisionChannel>         SkeletalPhysCustomBodyAdditionalIgnores;           // 0x2A60(0x10)(None)
	class USoundBase*                            ActionWheelClickSound;                             // 0x2A70(0x8)(ZeroConstructor)
	class USoundBase*                            ActionWheelSelectSound;                            // 0x2A78(0x8)(ZeroConstructor)
	class USoundBase*                            ActionWheelProgressSound;                          // 0x2A80(0x8)(ZeroConstructor)
	class USoundBase*                            ActionWheelProgressCompleteSound;                  // 0x2A88(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_GenericBoardPassenger;                       // 0x2A90(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_GenericUnboardPassenger;                     // 0x2A98(0x8)(ZeroConstructor)
	class USoundBase*                            Sound_CraftingTabToggle;                           // 0x2AA0(0x8)(ZeroConstructor)
	class UParticleSystem*                       LockedToSeatingStructureParticle;                  // 0x2AA8(0x8)(ZeroConstructor)
	class UClass*                                GenericBatteryItemClass;                           // 0x2AB0(0x8)(ZeroConstructor)
	uint8                                        Pad_3643[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class UPrimalItem>>     GenesisSeasonPassItems;                            // 0x2B08(0x10)(ZeroConstructor)
	class UClass*                                DefaultStructureDestroyedMeshActorClass;           // 0x2B18(0x8)(ZeroConstructor)
	TArray<class UClass*>                        DefaultTradableOptions;                            // 0x2B20(0x10)(ZeroConstructor)
	TArray<class UClass*>                        CoreTradableOptions;                               // 0x2B30(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalTradableOptions;                         // 0x2B40(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalBuff>>     AlwaysAllowBuffClasses;                            // 0x2B50(0x10)(ZeroConstructor)
	TArray<struct FGrinderItemReplacer>          GrinderReplacements;                               // 0x2B60(0x10)(ZeroConstructor)
	TArray<struct FInvalidReferenceRedirector>   InvalidReferenceRedirects;                         // 0x2B70(0x10)(ZeroConstructor)
	TArray<struct FInvalidReferenceRedirector>   AdditionalInvalidReferenceRedirects;               // 0x2B80(0x10)(ZeroConstructor)
	bool                                         bWantsToRunMissions;                               // 0x2B90(0x1)(None)
	uint8                                        Pad_3645[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CoreWorldBuffDefinitions;                          // 0x2B98(0x8)(ZeroConstructor)
	TArray<class UClass*>                        AdditionalWorldBuffDefinitions;                    // 0x2BA0(0x10)(ZeroConstructor)
	class UPrimalWorldBuffData*                  WorldBuffData;                                     // 0x2BB0(0x8)(ZeroConstructor)
	struct FLinearColor                          PointOfInterest_IndicatorColor_Default;            // 0x2BB8(0x10)(None)
	struct FLinearColor                          PointOfInterest_IndicatorColor_ObjectiveComplete;  // 0x2BC8(0x10)(None)
	struct FLinearColor                          PointOfInterest_ProgressBarColor_TamingAffinity;   // 0x2BD8(0x10)(None)
	class UTexture2D*                            PointOfInterest_Icon_TamingInProgress;             // 0x2BE8(0x8)(ZeroConstructor)
	class UTexture2D*                            PointOfInterest_Icon_TamingComplete;               // 0x2BF0(0x8)(ZeroConstructor)
	class UTexture2D*                            PointOfInterest_Icon_Player;                       // 0x2BF8(0x8)(ZeroConstructor)
	class UClass*                                GlobalUIDataClass_PS5;                             // 0x2C00(0x8)(ZeroConstructor)
	class UClass*                                GlobalUIDataClass_XSX;                             // 0x2C08(0x8)(ZeroConstructor)
	class UClass*                                GlobalUIDataClass;                                 // 0x2C10(0x8)(ZeroConstructor)
	TArray<struct FWorldDefaultItemSet>          DefaultMapItemSets;                                // 0x2C18(0x10)(ZeroConstructor)
	TArray<struct FWorldDefaultItemSet>          AdditionalDefaultMapItemSets;                      // 0x2C28(0x10)(ZeroConstructor)
	TSoftClassPtr<class AActor>                  PhotoModeClass;                                    // 0x2C38(0x30)(ZeroConstructor)
	TSoftClassPtr<class AActor>                  OverridePhotoModeClass;                            // 0x2C68(0x30)(ZeroConstructor)
	TArray<struct FExtraEggItem>                 ExtraEggItems;                                     // 0x2C98(0x10)(ZeroConstructor)
	TArray<struct FExtraEggItem>                 AdditionalExtraEggItems;                           // 0x2CA8(0x10)(ZeroConstructor)
	class UStaticMesh*                           CopySettingsVisualIndicatorMesh;                   // 0x2CB8(0x8)(ZeroConstructor)
	class UMaterialInterface*                    CopySettingsVisualIndicatorMaterial;               // 0x2CC0(0x8)(ZeroConstructor)
	TArray<struct FSlateColor>                   SubtitleColors;                                    // 0x2CC8(0x10)(None)
	class UClass*                                HUDOverlayGestationTooltip;                        // 0x2CD8(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> ProfilingDinos;                                    // 0x2CE0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ProfilingStructures;                               // 0x2CF0(0x10)(ZeroConstructor)
	class UShooterHaptics*                       Haptics;                                           // 0x2D00(0x8)(ZeroConstructor)
	TArray<struct FCryopodPersistantBuffs>       CryopodPersistantBuffsMap;                         // 0x2D08(0x10)(None)
	TArray<struct FConfigSupplyCrateItemsOverride> CoreOverrideSupplyCrateItems;                      // 0x2D18(0x10)(ZeroConstructor)
	class USoundBase*                            PreRespawnUISound;                                 // 0x2D28(0x8)(ZeroConstructor)
	class USoundBase*                            PostRespawnUISound;                                // 0x2D30(0x8)(ZeroConstructor)
	uint8                                        Pad_3646[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSubtitleStringMap>            BookendSubtitles;                                  // 0x2D48(0x10)(None)
	TArray<TSoftObjectPtr<class UObject>>        DLCStructsAndEnums;                                // 0x2D58(0x10)(ZeroConstructor)
	TArray<struct FDinoAbilities>                AbilityDescriptions;                               // 0x2D68(0x10)(None)
	uint8                                        Pad_3647[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        DinoTrackFilterOptions;                            // 0x2DC8(0x10)(ZeroConstructor)
	TArray<class UClass*>                        CustomDinoTrackFilterOptions;                      // 0x2DD8(0x10)(ZeroConstructor)
	class UModDataAsset*                         AdditionalModDataAsset;                            // 0x2DE8(0x8)(ZeroConstructor)
	TArray<struct FPlayerConfigVoiceCollectionInfo> PlayerConfigVoiceCollectionOptions;                // 0x2DF0(0x10)(ZeroConstructor)
	TArray<struct FPlayerConfigVoiceCollectionInfo> CustomPlayerConfigVoiceCollectionOptions;          // 0x2E00(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         BodyBonePresetOptions;                             // 0x2E10(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         CustomBodyBonePresetOptions;                       // 0x2E20(0x10)(ZeroConstructor)
	class UTexture2D*                            ExperienceIcon;                                    // 0x2E30(0x8)(ZeroConstructor)
	TSoftClassPtr<class UObject>                 CDOLiveUpdatesDataClass;                           // 0x2E38(0x30)(ZeroConstructor)
	class UClass*                                VolumetricDispatcherClass;                         // 0x2E68(0x8)(ZeroConstructor)
	class UClass*                                DefaultDestructionInstanceActorWithGeoCollection;  // 0x2E70(0x8)(ZeroConstructor)
	TSoftClassPtr<class UDamageType>             CheatDestroyFoliageDamageType;                     // 0x2E78(0x30)(ZeroConstructor)
	class UClass*                                DefaultFieldSystemActorClass;                      // 0x2EA8(0x8)(ZeroConstructor)
	class UClass*                                DefaultWaterNavArea;                               // 0x2EB0(0x8)(ZeroConstructor)
	class UClass*                                DefaultStructureNavArea;                           // 0x2EB8(0x8)(ZeroConstructor)
	class UDataTable*                            ItemSpawnBlacklistDataTable;                       // 0x2EC0(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             CarriedNotifyBuff;                                 // 0x2EC8(0x30)(ZeroConstructor)
	TSoftObjectPtr<class UPrimalWordFilter>      MainNameWordList;                                  // 0x2EF8(0x30)(None)

	static class UClass* StaticClass();
	static class UPrimalGameData* GetDefaultObj();

	void TickedWorld(class UWorld* TheWorld, float DeltaTime);
	void LocalIsPerMapExplorerNoteUnlocked(int32 ExplorerNoteIndex, bool ReturnValue);
	void LocalIsGlobalExplorerNoteUnlocked(int32 ExplorerNoteIndex, bool ReturnValue);
	void LoadedWorld(class UWorld* TheWorld);
	void GetXPMax(enum class ELevelExperienceRampType LevelType, float ReturnValue);
	void GetStatusStateDefinitions(int32 Index, const struct FPrimalCharacterStatusStateDefinition& ReturnValue);
	void GetRedirectedClassFromRedirector(const struct FInvalidReferenceRedirector& Redirector, class UClass* ReturnValue);
	void GetRedirectedClass(const class FString& Key, class UObject* WorldContextObject, class UClass* ReturnValue);
	void GetNonBPDinoAncestorsFromBP(const TArray<struct FDinoAncestorsEntryBlueprint>& BPEntries, const TArray<struct FDinoAncestorsEntry>& ReturnValue);
	void GetLevelXP(enum class ELevelExperienceRampType LevelType, int32 ForLevel, float ReturnValue);
	void GetLevelMax(enum class ELevelExperienceRampType LevelType, int32 ReturnValue);
	void GetLevelExperienceRamp(enum class ELevelExperienceRampType LevelType, const struct FLevelExperienceRamp& ReturnValue);
	void GetIndexDynamicMatBytesByName(class FName Name, int32 ReturnValue);
	void GetGenericCombatMusic(class APrimalCharacter* ForCharacter, class APrimalCharacter* ForEnemy, class USoundBase* ReturnValue);
	void GetExplorerNoteDescription(int32 ExplorerNoteIndex, const class FString& ReturnValue);
	void GetDinoEntry(class UClass* DinoClass, class UClass* ReturnValue);
	void GetColorForDefinition(int32 DefinitionIndex, const struct FLinearColor& ReturnValue);
	void GetBuffsForBitmask(int32 Mask, const TArray<class UClass*>& ReturnValue);
	void GetBPDinoAncestorsFromNonBP(const TArray<struct FDinoAncestorsEntry>& NonBPEntries, const TArray<struct FDinoAncestorsEntryBlueprint>& ReturnValue);
	void GetBitmaskForBuffs(const TArray<class APrimalBuff*>& ActiveBuffs, int32 ReturnValue);
	void GetAllAbilitiesForDino(class FName DinoTag, const TArray<struct FDinoAbilityInfo>& AbilityInfos, bool ReturnValue);
	void GetAbilityForInputAction(class FName DinoTag, class FName InputAction, const struct FDinoAbilityInfo& AbilityInfo, bool ReturnValue);
	void BPMergeModGameData(class UPrimalGameData* AnotherGameData);
	void BPInitializeGameData();
	void BPGetItemQualityIndex(float ItemRating, int32 ReturnValue);
	void BPGetGlobalUIData(bool bIsPsOrXbUi, class UPrimalGlobalUIData* ReturnValue);
	void BPGetGameData(class UPrimalGameData* ReturnValue);
	void ArkChangeUIPlatform(const class FString& Platform);
};

// 0x360 (0x390 - 0x30)
// Class ShooterGame.PrimalGameSettingsData
class UPrimalGameSettingsData : public UPrimaryDataAsset
{
public:
	bool                                         IsBaseBP;                                          // 0x30(0x1)(None)
	uint8                                        Pad_3650[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DifficultyOffset;                                  // 0x34(0x4)(None)
	float                                        NewMaxStructuresInRange;                           // 0x38(0x4)(None)
	float                                        DayCycleSpeedScale;                                // 0x3C(0x4)(None)
	float                                        DayTimeSpeedScale;                                 // 0x40(0x4)(None)
	float                                        NightTimeSpeedScale;                               // 0x44(0x4)(None)
	bool                                         OverrideStartTime;                                 // 0x48(0x1)(None)
	uint8                                        Pad_3651[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StartTimeHour;                                     // 0x4C(0x4)(None)
	float                                        DinoDamageMultiplier;                              // 0x50(0x4)(None)
	float                                        PlayerDamageMultiplier;                            // 0x54(0x4)(None)
	float                                        StructureDamageMultiplier;                         // 0x58(0x4)(None)
	float                                        PlayerResistanceMultiplier;                        // 0x5C(0x4)(None)
	float                                        DinoResistanceMultiplier;                          // 0x60(0x4)(None)
	float                                        StructureResistanceMultiplier;                     // 0x64(0x4)(None)
	float                                        XPMultiplier;                                      // 0x68(0x4)(None)
	float                                        ListenServerTetherDistanceMultiplier;              // 0x6C(0x4)(None)
	float                                        HarvestAmountMultiplier;                           // 0x70(0x4)(None)
	float                                        TamingSpeedMultiplier;                             // 0x74(0x4)(None)
	float                                        PlayerCharacterWaterDrainMultiplier;               // 0x78(0x4)(None)
	float                                        PlayerCharacterFoodDrainMultiplier;                // 0x7C(0x4)(None)
	float                                        DinoCharacterFoodDrainMultiplier;                  // 0x80(0x4)(None)
	float                                        PlayerCharacterStaminaDrainMultiplier;             // 0x84(0x4)(None)
	float                                        DinoCharacterStaminaDrainMultiplier;               // 0x88(0x4)(None)
	float                                        PlayerCharacterHealthRecoveryMultiplier;           // 0x8C(0x4)(None)
	float                                        DinoCharacterHealthRecoveryMultiplier;             // 0x90(0x4)(None)
	float                                        DinoCountMultiplier;                               // 0x94(0x4)(None)
	float                                        HarvestHealthMultiplier;                           // 0x98(0x4)(None)
	float                                        PvEStructureDecayPeriodMultiplier;                 // 0x9C(0x4)(None)
	float                                        ResourcesRespawnPeriodMultiplier;                  // 0xA0(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Health;                     // 0xA4(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Stamina;                    // 0xA8(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Torpidity;                  // 0xAC(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Oxygen;                     // 0xB0(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Food;                       // 0xB4(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Water;                      // 0xB8(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Temperature;                // 0xBC(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Weight;                     // 0xC0(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Damage;                     // 0xC4(0x4)(None)
	float                                        PerLevelStatsDinoTamed_Speed;                      // 0xC8(0x4)(None)
	float                                        PerLevelStatsDinoTamed_TemperatureFortitude;       // 0xCC(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Health;                  // 0xD0(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Stamina;                 // 0xD4(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Torpidity;               // 0xD8(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Oxygen;                  // 0xDC(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Food;                    // 0xE0(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Water;                   // 0xE4(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Temperature;             // 0xE8(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Weight;                  // 0xEC(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Damage;                  // 0xF0(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_Speed;                   // 0xF4(0x4)(None)
	float                                        PerLevelStatsDinoTamedAdd_TemperatureFortitude;    // 0xF8(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Health;                  // 0xFC(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Stamina;                 // 0x100(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Torpidity;               // 0x104(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Oxygen;                  // 0x108(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Food;                    // 0x10C(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Water;                   // 0x110(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Temperature;             // 0x114(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Weight;                  // 0x118(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Damage;                  // 0x11C(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_Speed;                   // 0x120(0x4)(None)
	float                                        PerLevelStatsDinoTamedAff_TemperatureFortitude;    // 0x124(0x4)(None)
	float                                        PerLevelStatsDinoWild_Health;                      // 0x128(0x4)(None)
	float                                        PerLevelStatsDinoWild_Stamina;                     // 0x12C(0x4)(None)
	float                                        PerLevelStatsDinoWild_Torpidity;                   // 0x130(0x4)(None)
	float                                        PerLevelStatsDinoWild_Oxygen;                      // 0x134(0x4)(None)
	float                                        PerLevelStatsDinoWild_Food;                        // 0x138(0x4)(None)
	float                                        PerLevelStatsDinoWild_Water;                       // 0x13C(0x4)(None)
	float                                        PerLevelStatsDinoWild_Temperature;                 // 0x140(0x4)(None)
	float                                        PerLevelStatsDinoWild_Weight;                      // 0x144(0x4)(None)
	float                                        PerLevelStatsDinoWild_Damage;                      // 0x148(0x4)(None)
	float                                        PerLevelStatsDinoWild_Speed;                       // 0x14C(0x4)(None)
	float                                        PerLevelStatsDinoWild_TemperatureFortitude;        // 0x150(0x4)(None)
	float                                        PerLevelStatsPlayer_Health;                        // 0x154(0x4)(None)
	float                                        PerLevelStatsPlayer_Stamina;                       // 0x158(0x4)(None)
	float                                        PerLevelStatsPlayer_Torpidity;                     // 0x15C(0x4)(None)
	float                                        PerLevelStatsPlayer_Oxygen;                        // 0x160(0x4)(None)
	float                                        PerLevelStatsPlayer_Food;                          // 0x164(0x4)(None)
	float                                        PerLevelStatsPlayer_Water;                         // 0x168(0x4)(None)
	float                                        PerLevelStatsPlayer_Temperature;                   // 0x16C(0x4)(None)
	float                                        PerLevelStatsPlayer_Weight;                        // 0x170(0x4)(None)
	float                                        PerLevelStatsPlayer_Damage;                        // 0x174(0x4)(None)
	float                                        PerLevelStatsPlayer_Speed;                         // 0x178(0x4)(None)
	float                                        PerLevelStatsPlayer_TemperatureFortitude;          // 0x17C(0x4)(None)
	float                                        GlobalSpoilingTimeMultiplier;                      // 0x180(0x4)(None)
	float                                        GlobalItemDecompositionTimeMultiplier;             // 0x184(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeMultiplier;           // 0x188(0x4)(None)
	float                                        PvPZoneStructureDamageMultiplier;                  // 0x18C(0x4)(None)
	float                                        StructureDamageRepairCooldown;                     // 0x190(0x4)(None)
	float                                        IncreasePvPRespawnIntervalCheckPeriod;             // 0x194(0x4)(None)
	float                                        IncreasePvPRespawnIntervalMultiplier;              // 0x198(0x4)(None)
	float                                        IncreasePvPRespawnIntervalBaseAmount;              // 0x19C(0x4)(None)
	float                                        ResourceNoReplenishRadiusPlayers;                  // 0x1A0(0x4)(None)
	float                                        ResourceNoReplenishRadiusStructures;               // 0x1A4(0x4)(None)
	float                                        CropGrowthSpeedMultiplier;                         // 0x1A8(0x4)(None)
	float                                        LayEggIntervalMultiplier;                          // 0x1AC(0x4)(None)
	float                                        PoopIntervalMultiplier;                            // 0x1B0(0x4)(None)
	float                                        CropDecaySpeedMultiplier;                          // 0x1B4(0x4)(None)
	float                                        MatingIntervalMultiplier;                          // 0x1B8(0x4)(None)
	float                                        EggHatchSpeedMultiplier;                           // 0x1BC(0x4)(None)
	float                                        BabyMatureSpeedMultiplier;                         // 0x1C0(0x4)(None)
	float                                        BabyFoodConsumptionSpeedMultiplier;                // 0x1C4(0x4)(None)
	float                                        DinoTurretDamageMultiplier;                        // 0x1C8(0x4)(None)
	float                                        DinoHarvestingDamageMultiplier;                    // 0x1CC(0x4)(None)
	float                                        PlayerHarvestingDamageMultiplier;                  // 0x1D0(0x4)(None)
	float                                        CustomRecipeEffectivenessMultiplier;               // 0x1D4(0x4)(None)
	float                                        CustomRecipeSkillMultiplier;                       // 0x1D8(0x4)(None)
	float                                        AutoPvEStartTimeSeconds;                           // 0x1DC(0x4)(None)
	float                                        AutoPvEStopTimeSeconds;                            // 0x1E0(0x4)(None)
	float                                        PvEDinoDecayPeriodMultiplier;                      // 0x1E4(0x4)(None)
	float                                        StructurePreventResourceRadiusMultiplier;          // 0x1E8(0x4)(None)
	float                                        BabyImprintingStatScaleMultiplier;                 // 0x1EC(0x4)(None)
	float                                        BabyCuddleIntervalMultiplier;                      // 0x1F0(0x4)(None)
	float                                        BabyCuddleGracePeriodMultiplier;                   // 0x1F4(0x4)(None)
	float                                        BabyCuddleLoseImprintQualitySpeedMultiplier;       // 0x1F8(0x4)(None)
	float                                        KillXPMultiplier;                                  // 0x1FC(0x4)(None)
	float                                        HarvestXPMultiplier;                               // 0x200(0x4)(None)
	float                                        CraftXPMultiplier;                                 // 0x204(0x4)(None)
	float                                        GenericXPMultiplier;                               // 0x208(0x4)(None)
	float                                        SpecialXPMultiplier;                               // 0x20C(0x4)(None)
	float                                        ExplorerNoteXPMultiplier;                          // 0x210(0x4)(None)
	float                                        BossKillXPMultiplier;                              // 0x214(0x4)(None)
	float                                        AlphaKillXPMultiplier;                             // 0x218(0x4)(None)
	float                                        WildKillXPMultiplier;                              // 0x21C(0x4)(None)
	float                                        CaveKillXPMultiplier;                              // 0x220(0x4)(None)
	float                                        TamedKillXPMultiplier;                             // 0x224(0x4)(None)
	float                                        UnclaimedKillXPMultiplier;                         // 0x228(0x4)(None)
	float                                        RaidDinoCharacterFoodDrainMultiplier;              // 0x22C(0x4)(None)
	float                                        PhotoModeRangeLimit;                               // 0x230(0x4)(None)
	float                                        SupplyCrateLootQualityMultiplier;                  // 0x234(0x4)(None)
	float                                        CraftingSkillBonusMultiplier;                      // 0x238(0x4)(None)
	float                                        FishingLootQualityMultiplier;                      // 0x23C(0x4)(None)
	float                                        FuelConsumptionIntervalMultiplier;                 // 0x240(0x4)(None)
	float                                        PreventOfflinePvPInterval;                         // 0x244(0x4)(None)
	float                                        PerPlatformMaxStructuresMultiplier;                // 0x248(0x4)(None)
	float                                        WirelessCraftingRangeOverride;                     // 0x24C(0x4)(None)
	bool                                         GlobalVoiceChat;                                   // 0x250(0x1)(None)
	bool                                         ProximityChat;                                     // 0x251(0x1)(None)
	bool                                         NoTributeDownloads;                                // 0x252(0x1)(None)
	bool                                         AllowThirdPersonPlayer;                            // 0x253(0x1)(None)
	bool                                         AlwaysNotifyPlayerLeft;                            // 0x254(0x1)(None)
	bool                                         DontAlwaysNotifyPlayerJoined;                      // 0x255(0x1)(None)
	bool                                         ServerHardcore;                                    // 0x256(0x1)(None)
	bool                                         ServerPVE;                                         // 0x257(0x1)(None)
	bool                                         ServerCrosshair;                                   // 0x258(0x1)(None)
	bool                                         ServerForceNoHUD;                                  // 0x259(0x1)(None)
	bool                                         ShowMapPlayerLocation;                             // 0x25A(0x1)(None)
	bool                                         EnablePvPGamma;                                    // 0x25B(0x1)(None)
	bool                                         DisableStructureDecayPvE;                          // 0x25C(0x1)(None)
	bool                                         AllowFlyerCarryPvE;                                // 0x25D(0x1)(None)
	bool                                         bIncreasePvPRespawnInterval;                       // 0x25E(0x1)(None)
	bool                                         bAutoPvETimer;                                     // 0x25F(0x1)(None)
	bool                                         bAutoPvEUseSystemTime;                             // 0x260(0x1)(None)
	bool                                         bDisableFriendlyFire;                              // 0x261(0x1)(None)
	bool                                         bFlyerPlatformAllowUnalignedDinoBasing;            // 0x262(0x1)(None)
	bool                                         bDisableLootCrates;                                // 0x263(0x1)(None)
	bool                                         bAllowCustomRecipes;                               // 0x264(0x1)(None)
	bool                                         bPassiveDefensesDamageRiderlessDinos;              // 0x265(0x1)(None)
	bool                                         bPvEAllowTribeWar;                                 // 0x266(0x1)(None)
	bool                                         bPvEAllowTribeWarCancel;                           // 0x267(0x1)(None)
	bool                                         MaxDifficulty;                                     // 0x268(0x1)(None)
	bool                                         bUseSingleplayerSettings;                          // 0x269(0x1)(None)
	bool                                         bUseCorpseLocator;                                 // 0x26A(0x1)(None)
	bool                                         bDisableStructurePlacementCollision;               // 0x26B(0x1)(None)
	bool                                         bAllowPlatformSaddleMultiFloors;                   // 0x26C(0x1)(None)
	bool                                         bAllowUnlimitedRespecs;                            // 0x26D(0x1)(None)
	bool                                         bDisableDinoTaming;                                // 0x26E(0x1)(None)
	bool                                         bDisableDinoRiding;                                // 0x26F(0x1)(None)
	bool                                         bShowCreativeMode;                                 // 0x270(0x1)(None)
	bool                                         bAllowSpeedLeveling;                               // 0x271(0x1)(None)
	bool                                         bAllowFlyerSpeedLeveling;                          // 0x272(0x1)(None)
	bool                                         AllowHideDamageSourceFromLogs;                     // 0x273(0x1)(None)
	bool                                         RandomSupplyCratePoints;                           // 0x274(0x1)(None)
	bool                                         DisableWeatherFog;                                 // 0x275(0x1)(None)
	bool                                         bHardLimitTurretsInRange;                          // 0x276(0x1)(None)
	bool                                         OnlyAllowSpecifiedEngrams;                         // 0x277(0x1)(None)
	bool                                         PreventDownloadSurvivors;                          // 0x278(0x1)(None)
	bool                                         PreventDownloadItems;                              // 0x279(0x1)(None)
	bool                                         PreventDownloadDinos;                              // 0x27A(0x1)(None)
	bool                                         DisablePvEGamma;                                   // 0x27B(0x1)(None)
	bool                                         DisableDinoDecayPvE;                               // 0x27C(0x1)(None)
	bool                                         AdminLogging;                                      // 0x27D(0x1)(None)
	bool                                         AllowCaveBuildingPvE;                              // 0x27E(0x1)(None)
	bool                                         ForceAllowCaveFlyers;                              // 0x27F(0x1)(None)
	bool                                         PreventOfflinePvP;                                 // 0x280(0x1)(None)
	bool                                         PvPDinoDecay;                                      // 0x281(0x1)(None)
	bool                                         OverrideStructurePlatformPrevention;               // 0x282(0x1)(None)
	bool                                         AllowAnyoneBabyImprintCuddle;                      // 0x283(0x1)(None)
	bool                                         DisableImprintDinoBuff;                            // 0x284(0x1)(None)
	bool                                         ShowFloatingDamageText;                            // 0x285(0x1)(None)
	bool                                         PreventDiseases;                                   // 0x286(0x1)(None)
	bool                                         NonPermanentDiseases;                              // 0x287(0x1)(None)
	bool                                         EnableExtraStructurePreventionVolumes;             // 0x288(0x1)(None)
	bool                                         PreventTribeAlliances;                             // 0x289(0x1)(None)
	bool                                         AllowRaidDinoFeeding;                              // 0x28A(0x1)(None)
	bool                                         bDisableWirelessCrafting;                          // 0x28B(0x1)(None)
	bool                                         bDisableWirelessCraftingForDinos;                  // 0x28C(0x1)(None)
	bool                                         bDisableWirelessCraftingForPlayers;                // 0x28D(0x1)(None)
	bool                                         bDisableWirelessCraftingForStructures;             // 0x28E(0x1)(None)
	uint8                                        Pad_3653[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverrideMaxExperiencePointsPlayer;                 // 0x290(0x4)(None)
	int32                                        OverrideMaxExperiencePointsDino;                   // 0x294(0x4)(None)
	int32                                        MaxNumberOfPlayersInTribe;                         // 0x298(0x4)(None)
	bool                                         bDisablePhotoMode;                                 // 0x29C(0x1)(None)
	uint8                                        Pad_3654[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, float>                   DefaultFloatMap;                                   // 0x2A0(0x50)(None)
	TMap<class FString, int32>                   DefaultIntMap;                                     // 0x2F0(0x50)(None)
	TMap<class FString, bool>                    DefaultBoolMap;                                    // 0x340(0x50)(None)

	static class UClass* StaticClass();
	static class UPrimalGameSettingsData* GetDefaultObj();

};

// 0x380 (0x3A8 - 0x28)
// Class ShooterGame.PrimalGlobals
class UPrimalGlobals : public UObject
{
public:
	class UPrimalGameData*                       PrimalGameData;                                    // 0x28(0x8)(ZeroConstructor)
	class UPrimalGameData*                       PrimalGameDataOverride;                            // 0x30(0x8)(ZeroConstructor)
	class UClass*                                DefaultReplicationGraph;                           // 0x38(0x8)(ZeroConstructor)
	TSoftClassPtr<class UPrimalGameData>         PrimalGameDataAsset;                               // 0x40(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         PrimalGameDataAssetExtended;                       // 0x70(0x10)(ZeroConstructor)
	class UPrimalAssets*                         Assets;                                            // 0x80(0x8)(ZeroConstructor)
	class UClass*                                RagdollKinematicActorClass;                        // 0x88(0x8)(ZeroConstructor)
	class UClass*                                DefaultHarvestTreeClass;                           // 0x90(0x8)(ZeroConstructor)
	class UClass*                                DefaultHarvestBushClass;                           // 0x98(0x8)(ZeroConstructor)
	class UClass*                                GlobalGenericConfirmationDialog;                   // 0xA0(0x8)(ZeroConstructor)
	TArray<class UObject*>                       ExtraResources;                                    // 0xA8(0x10)(ZeroConstructor)
	bool                                         bAllowSingleplayer;                                // 0xB8(0x1)(None)
	bool                                         bAllowNonDedicatedHost;                            // 0xB9(0x1)(None)
	uint8                                        Pad_3665[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        UIOnlyShowMapFileNames;                            // 0xC0(0x10)(None)
	TArray<class FString>                        UIOnlyShowModIDs;                                  // 0xD0(0x10)(None)
	bool                                         bTotalConversionShowUnofficialServers;             // 0xE0(0x1)(None)
	uint8                                        Pad_3666[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CreditString;                                      // 0xE8(0x10)(None)
	struct FLinearColor                          AlphaMissionColor;                                 // 0xF8(0x10)(None)
	struct FLinearColor                          BetaMissionColor;                                  // 0x108(0x10)(None)
	struct FLinearColor                          GammaMissionColor;                                 // 0x118(0x10)(None)
	struct FLinearColor                          MissionCompleteMultiUseWheelTextColor;             // 0x128(0x10)(None)
	class UFont*                                 BigFont_Offline;                                   // 0x138(0x8)(ZeroConstructor)
	class UFont*                                 NormalFont_Offline;                                // 0x140(0x8)(ZeroConstructor)
	class UFont*                                 SmallFont_Offline;                                 // 0x148(0x8)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UFont>>          OfflineFontArray;                                  // 0x150(0x10)(ZeroConstructor)
	class UClass*                                SpawnMenuUITemplate;                               // 0x160(0x8)(ZeroConstructor)
	class UClass*                                CustomOverlayClass;                                // 0x168(0x8)(ZeroConstructor)
	TArray<class USoundClass*>                   CoreSoundClasses;                                  // 0x170(0x10)(ZeroConstructor)
	class USoundClass*                           PS5GamepadSoundClass;                              // 0x180(0x8)(ZeroConstructor)
	class USoundClass*                           PS5GamepadHandsSoundClass;                         // 0x188(0x8)(ZeroConstructor)
	class USoundSubmix*                          PS5GamepadSubmix;                                  // 0x190(0x8)(ZeroConstructor)
	class UMaterialInterface*                    DefaultRenderTargetMaterial;                       // 0x198(0x8)(ZeroConstructor)
	class UTriggerEffectLibrary*                 TriggerEffectLibrary;                              // 0x1A0(0x8)(ZeroConstructor)
	uint8                                        Pad_3669[0x110];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceConstant*             VertexViz;                                         // 0x2B8(0x8)(ZeroConstructor)
	struct FOpenColorIODisplayConfiguration      DefaultOpenColorIODisplayConfiguration;            // 0x2C0(0xA0)(ZeroConstructor)
	struct FCachedDBAccessor                     CachedDBs;                                         // 0x360(0x40)(None)
	uint8                                        Pad_366B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalGlobals* GetDefaultObj();

	void Subtract_DoubleDouble(double A, double B, double ReturnValue);
	void OnConfirmationDialogClosed(bool bAccept);
	void IsAudibleSimple(class UAudioComponent* AudioComponent, const struct FVector& Location, bool ReturnValue);
	void GetShooterPlayerCameraManager(class UWorld* World, class AShooterPlayerCameraManager* ReturnValue);
	void GetDayCycleManager(class UWorld* World, class ADayCycleManager* ReturnValue);
	void FlushLevelStreamingOnNextCameraUpdate(class UWorld* World);
	void FinishedLoadingGameMedia();
	void EqualEqual_DoubleDouble(double A, double B, bool ReturnValue);
	void Conv_FloatToDouble(float InFloat, double ReturnValue);
	void Conv_DoubleToFloat(double InDouble, float ReturnValue);
};

// 0x0 (0x80 - 0x80)
// Class ShooterGame.PrimalExportAssetRegistryCommandlet
class UPrimalExportAssetRegistryCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class UPrimalExportAssetRegistryCommandlet* GetDefaultObj();

};

// 0x100 (0x128 - 0x28)
// Class ShooterGame.PrimalGlobalUIData
class UPrimalGlobalUIData : public UObject
{
public:
	struct FLinearColor                          StatusColorGood;                                   // 0x28(0x10)(None)
	struct FLinearColor                          StatusColorWarning;                                // 0x38(0x10)(None)
	struct FLinearColor                          StatusColorBad;                                    // 0x48(0x10)(None)
	class UTexture2D*                            RightMouseButtonIcon;                              // 0x58(0x8)(ZeroConstructor)
	class UTexture2D*                            LeftMouseButtonIcon;                               // 0x60(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadLeftBumper;                                 // 0x68(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadRightBumper;                                // 0x70(0x8)(ZeroConstructor)
	class UTexture2D*                            LeftTriggerIcon;                                   // 0x78(0x8)(ZeroConstructor)
	class UTexture2D*                            RightTriggerIcon;                                  // 0x80(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadFaceButtonBottom;                           // 0x88(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadFaceButtonTop;                              // 0x90(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadFaceButtonLeft;                             // 0x98(0x8)(ZeroConstructor)
	class UTexture2D*                            GamepadFaceButtonRight;                            // 0xA0(0x8)(ZeroConstructor)
	class UTexture2D*                            DPadUpIcon;                                        // 0xA8(0x8)(ZeroConstructor)
	class UTexture2D*                            DPadGenericIcon;                                   // 0xB0(0x8)(ZeroConstructor)
	class UTexture2D*                            DPadDownIcon;                                      // 0xB8(0x8)(ZeroConstructor)
	class UTexture2D*                            DPadLeftIcon;                                      // 0xC0(0x8)(ZeroConstructor)
	class UTexture2D*                            DPadRightIcon;                                     // 0xC8(0x8)(ZeroConstructor)
	class UTexture2D*                            RightThumbstickIcon;                               // 0xD0(0x8)(ZeroConstructor)
	class UTexture2D*                            LeftThumbstickIcon;                                // 0xD8(0x8)(ZeroConstructor)
	class UTexture2D*                            SpecialLeftIcon;                                   // 0xE0(0x8)(ZeroConstructor)
	class UTexture2D*                            SpecialRightIcon;                                  // 0xE8(0x8)(ZeroConstructor)
	class UTexture2D*                            MutagenIcon;                                       // 0xF0(0x8)(ZeroConstructor)
	class UTexture2D*                            DinoDot;                                           // 0xF8(0x8)(None)
	float                                        MutagenGoodToGreatThreshold;                       // 0x100(0x4)(None)
	struct FLinearColor                          MutagenGoodColor;                                  // 0x104(0x10)(None)
	struct FLinearColor                          MutagenGreatColor;                                 // 0x114(0x10)(None)
	uint8                                        Pad_366E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalGlobalUIData* GetDefaultObj();

	void GetIconForKeyName(const class FString& ActionKeyName, bool bReInitializeMap, class UTexture2D* ReturnValue);
};

// 0x198 (0x250 - 0xB8)
// Class ShooterGame.PrimalHarvestingComponent
class UPrimalHarvestingComponent : public UActorComponent
{
public:
	uint8                                        Pad_3684[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FHarvestResourceEntry>         HarvestResourceEntries;                            // 0xD0(0x10)(ZeroConstructor)
	TArray<struct FHarvestResourceEntry>         BaseHarvestResourceEntries;                        // 0xE0(0x10)(ZeroConstructor)
	TArray<struct FDamageHarvestingEntry>        HarvestDamageTypeEntries;                          // 0xF0(0x10)(ZeroConstructor)
	float                                        MaxHarvestHealth;                                  // 0x100(0x4)(None)
	uint8                                        Pad_3687[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HarvestHealthGiveResourceInterval;                 // 0x108(0x4)(None)
	float                                        CurrentHarvestHealth;                              // 0x10C(0x4)(None)
	bool                                         bIsUnharvestable;                                  // 0x110(0x1)(None)
	uint8                                        Pad_3689[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bSetOwnerHealthToHarvestHealth : 1;                // Mask: 0x1, PropSize: 0x10x114(0x1)(None)
	uint8                                        bUsableHarvesting : 1;                             // Mask: 0x2, PropSize: 0x10x114(0x1)(None)
	uint8                                        bAllowForcedRepopulation : 1;                      // Mask: 0x4, PropSize: 0x10x114(0x1)(None)
	uint8                                        bAllowHarvestHealthScaling : 1;                    // Mask: 0x8, PropSize: 0x10x114(0x1)(None)
	uint8                                        bUsableAllowHarvestHealthScaling : 1;              // Mask: 0x10, PropSize: 0x10x114(0x1)(None)
	uint8                                        bNonBlockingUsableHarvesting : 1;                  // Mask: 0x20, PropSize: 0x10x114(0x1)(None)
	uint8                                        bClampResourceHarvestDamage : 1;                   // Mask: 0x40, PropSize: 0x10x114(0x1)(None)
	uint8                                        bIsDefaultHarvestingComponent : 1;                 // Mask: 0x80, PropSize: 0x10x114(0x1)(None)
	uint8                                        bIsSingleUnitHarvest : 1;                          // Mask: 0x1, PropSize: 0x10x115(0x1)(None)
	uint8                                        bAssignedToTribeHarvestOnly : 1;                   // Mask: 0x2, PropSize: 0x10x115(0x1)(None)
	uint8                                        bUseBPRecieveComponentDamage : 1;                  // Mask: 0x4, PropSize: 0x10x115(0x1)(None)
	uint8                                        bEnforceSingleInstantHarvest : 1;                  // Mask: 0x8, PropSize: 0x10x115(0x1)(None)
	uint8                                        BitPad_2D0 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_368A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AssignedToTribeID;                                 // 0x118(0x4)(None)
	uint8                                        Pad_368B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            HarvestDestructionSound;                           // 0x120(0x8)(ZeroConstructor)
	float                                        UseHarvestDamageAmount;                            // 0x128(0x4)(None)
	uint8                                        Pad_368C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                UseHarvestDamageType;                              // 0x130(0x8)(ZeroConstructor)
	class FString                                DescriptiveName;                                   // 0x138(0x10)(None)
	class FString                                UseHarvestString;                                  // 0x148(0x10)(None)
	class FString                                UnequipWeaponToUseHarvestString;                   // 0x158(0x10)(None)
	float                                        UsableHarvestSphereRadius;                         // 0x168(0x4)(None)
	bool                                         ShouldReplenish;                                   // 0x16C(0x1)(None)
	uint8                                        Pad_368D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinPlayerDistanceReplenishing;                     // 0x170(0x4)(None)
	float                                        MinStructureDistanceReplenishing;                  // 0x174(0x4)(None)
	float                                        MinNonCoreStructureDistanceReplenishing;           // 0x178(0x4)(None)
	float                                        BaseMinTimeAfterDepletionReplenishing;             // 0x17C(0x4)(None)
	float                                        BaseMaxTimeAfterDepletionReplenishing;             // 0x180(0x4)(None)
	float                                        ExhaustedDepletionTimeInterval;                    // 0x184(0x4)(None)
	float                                        ExhaustedDepletionPower;                           // 0x188(0x4)(None)
	float                                        ExhaustedDepletionEffectScale;                     // 0x18C(0x4)(None)
	float                                        ReduceExhaustedDepletionSpeed;                     // 0x190(0x4)(None)
	float                                        AutoReplenishInterval;                             // 0x194(0x4)(None)
	float                                        AutoReplenishPercent;                              // 0x198(0x4)(None)
	float                                        DamageInstigatorAmount;                            // 0x19C(0x4)(None)
	int32                                        GiveItemEntriesMin;                                // 0x1A0(0x4)(None)
	int32                                        GiveItemEntriesMax;                                // 0x1A4(0x4)(None)
	float                                        TamedDinoHarvestGiveHealthMultiplier;              // 0x1A8(0x4)(None)
	uint8                                        Pad_368E[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnItemHarvested;                                   // 0x1C0(0x10)(ZeroConstructor)
	class FString                                UIStringIMeleeHitToHarvest;                        // 0x1D0(0x10)(None)
	class FString                                UIStringHarvestRequiresTool;                       // 0x1E0(0x10)(None)
	class FString                                UIStringCantHarvestUnderwater;                     // 0x1F0(0x10)(None)
	float                                        DinoHarvestGiveHealthAmount;                       // 0x200(0x4)(None)
	float                                        DinoHarvestGiveHealthSpeed;                        // 0x204(0x4)(None)
	int32                                        DinoHarvestGiveHealthDescriptionIndex;             // 0x208(0x4)(None)
	int32                                        NumOfPerInstanceCustomDataValues;                  // 0x20C(0x4)(None)
	uint8                                        Pad_368F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ForceAllowMeleeHarvestingOverrides;                // 0x218(0x10)(ZeroConstructor)
	float                                        HarvestingPriority;                                // 0x228(0x4)(None)
	uint8                                        Pad_3690[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FComponentAttachmentEntry>     AdditionalComponentAttachments;                    // 0x230(0x10)(ZeroConstructor)
	TArray<struct FComponentAttachmentEntry>     AdditionalComponentAttachmentsDedicated;           // 0x240(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalHarvestingComponent* GetDefaultObj();

	void BPRecieveComponentDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void BPCustomHarvestResource(class UPrimalInventoryComponent* InvComp, int32 NumToGive, class UClass* DamageTypeClass, class AActor* ToActor, int32 ReturnValue);
};

// 0x5A8 (0x660 - 0xB8)
// Class ShooterGame.PrimalInventoryComponent
class UPrimalInventoryComponent : public UActorComponent
{
public:
	uint8                                        Pad_381C[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AShooterPlayerController*>      RemoteViewingInventoryPlayerControllers;           // 0xF8(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   InventoryItems;                                    // 0x108(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   EquippedItems;                                     // 0x118(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   ItemSlots;                                         // 0x128(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   ArkTributeItems;                                   // 0x138(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   AllDyeColorItems;                                  // 0x148(0x10)(ZeroConstructor)
	TArray<struct FItemCraftQueueEntry>          ItemCraftQueueEntries;                             // 0x158(0x10)(None)
	int32                                        OverrideInventoryDefaultTab;                       // 0x168(0x4)(None)
	uint8                                        bInitializedMe : 1;                                // Mask: 0x1, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bReceivingEquippedItems : 1;                       // Mask: 0x2, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bReceivingInventoryItems : 1;                      // Mask: 0x4, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bReceivingArkInventoryItems : 1;                   // Mask: 0x8, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bFreeCraftingMode : 1;                             // Mask: 0x10, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bCanEquipItems : 1;                                // Mask: 0x20, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bCanUseWeaponAsEquipment : 1;                      // Mask: 0x40, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bCanInventoryItems : 1;                            // Mask: 0x80, PropSize: 0x10x16C(0x1)(None)
	uint8                                        bConsumeCraftingRepairingRequirementsOnStart : 1;  // Mask: 0x1, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bAllowRemoteCrafting : 1;                          // Mask: 0x2, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bAllowDeactivatedCrafting : 1;                     // Mask: 0x4, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bPreventAutoDecreaseDurability : 1;                // Mask: 0x8, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bAllowRemoteRepairing : 1;                         // Mask: 0x10, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bAllowItemStacking : 1;                            // Mask: 0x20, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bUseCraftQueue : 1;                                // Mask: 0x40, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bShowHiddenRemoteInventoryItems : 1;               // Mask: 0x80, PropSize: 0x10x16D(0x1)(None)
	uint8                                        bForceInventoryBlueprints : 1;                     // Mask: 0x1, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bForceInventoryNonRemovable : 1;                   // Mask: 0x2, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bHideDefaultInventoryItemsFromDisplay : 1;         // Mask: 0x4, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bDataListPadMaxInventoryItems : 1;                 // Mask: 0x8, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bAddMaxInventoryItemsToDefaultItems : 1;           // Mask: 0x10, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bCheckForAutoCraftBlueprints : 1;                  // Mask: 0x20, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bIsTributeInventory : 1;                           // Mask: 0x40, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bEquipmentMustRequireExplicitOwnerClass : 1;       // Mask: 0x80, PropSize: 0x10x16E(0x1)(None)
	uint8                                        bEquipmentPlayerForceRequireExplicitOwnerClass : 1; // Mask: 0x1, PropSize: 0x10x16F(0x1)(None)
	uint8                                        bEquipmentForceIgnoreExplicitOwnerClass : 1;       // Mask: 0x2, PropSize: 0x10x16F(0x1)(None)
	uint8                                        bUseBPInventoryRefresh : 1;                        // Mask: 0x4, PropSize: 0x10x16F(0x1)(None)
	uint8                                        bUseBPInitializeInventory : 1;                     // Mask: 0x8, PropSize: 0x10x16F(0x1)(None)
	uint8                                        bUseBPAllowAddInventoryItem : 1;                   // Mask: 0x10, PropSize: 0x10x16F(0x1)(None)
	uint8                                        BitPad_2F5 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	TArray<enum class EPrimalEquipmentType>      EquippableItemTypes;                               // 0x170(0x10)(None)
	uint8                                        bHideSaddleFromInventoryDisplay : 1;               // Mask: 0x1, PropSize: 0x10x180(0x1)(None)
	uint8                                        bCraftingEnabled : 1;                              // Mask: 0x2, PropSize: 0x10x180(0x1)(None)
	uint8                                        bRepairingEnabled : 1;                             // Mask: 0x4, PropSize: 0x10x180(0x1)(None)
	uint8                                        bReplicateComponent : 1;                           // Mask: 0x8, PropSize: 0x10x180(0x1)(None)
	uint8                                        bOnlyOneCraftQueueItem : 1;                        // Mask: 0x10, PropSize: 0x10x180(0x1)(None)
	uint8                                        bRemoteInventoryOnlyAllowTribe : 1;                // Mask: 0x20, PropSize: 0x10x180(0x1)(None)
	uint8                                        bOverrideCraftingMinDurabilityRequirement : 1;     // Mask: 0x40, PropSize: 0x10x180(0x1)(None)
	uint8                                        bRemoteInventoryAllowRemoveItems : 1;              // Mask: 0x80, PropSize: 0x10x180(0x1)(None)
	uint8                                        bRemoteInventoryAllowAddItems : 1;                 // Mask: 0x1, PropSize: 0x10x181(0x1)(None)
	uint8                                        bAllowRemoteInventory : 1;                         // Mask: 0x2, PropSize: 0x10x181(0x1)(None)
	uint8                                        bUseCheatInventory : 1;                            // Mask: 0x4, PropSize: 0x10x181(0x1)(None)
	uint8                                        bAllowAddingToArkTribute : 1;                      // Mask: 0x8, PropSize: 0x10x181(0x1)(None)
	uint8                                        bRemoteInventoryOnlyAllowSelf : 1;                 // Mask: 0x10, PropSize: 0x10x181(0x1)(None)
	uint8                                        bMaxInventoryWeightUseCharacterStatus : 1;         // Mask: 0x20, PropSize: 0x10x181(0x1)(None)
	uint8                                        bPreventDropInventoryDeposit : 1;                  // Mask: 0x40, PropSize: 0x10x181(0x1)(None)
	uint8                                        bShowItemDefaultFolders : 1;                       // Mask: 0x80, PropSize: 0x10x181(0x1)(None)
	uint8                                        bDisableDropAllItems : 1;                          // Mask: 0x1, PropSize: 0x10x182(0x1)(None)
	uint8                                        bIgnoreMaxInventoryItems : 1;                      // Mask: 0x2, PropSize: 0x10x182(0x1)(None)
	uint8                                        BitPad_2F6 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3822[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CraftingItemSpeed;                                 // 0x184(0x4)(None)
	TArray<struct FItemMultiplier>               ItemSpoilingTimeMultipliers;                       // 0x188(0x10)(ZeroConstructor)
	uint8                                        bIsSecondaryInventory : 1;                         // Mask: 0x1, PropSize: 0x10x198(0x1)(None)
	uint8                                        bRemoteOnlyAllowBlueprintsOrItemClasses : 1;       // Mask: 0x2, PropSize: 0x10x198(0x1)(None)
	uint8                                        BitPad_2F7 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPreventInventoryViewTrace : 1;                    // Mask: 0x10, PropSize: 0x10x198(0x1)(None)
	uint8                                        bSpawnActorOnTopOfStructure : 1;                   // Mask: 0x20, PropSize: 0x10x198(0x1)(None)
	uint8                                        bDropPhysicalInventoryDeposit : 1;                 // Mask: 0x40, PropSize: 0x10x198(0x1)(None)
	uint8                                        bUseExtendedCharacterCraftingFunctionality : 1;    // Mask: 0x80, PropSize: 0x10x198(0x1)(None)
	uint8                                        bForceGenerateItemSets : 1;                        // Mask: 0x1, PropSize: 0x10x199(0x1)(None)
	uint8                                        bBPHandleAccessInventory : 1;                      // Mask: 0x2, PropSize: 0x10x199(0x1)(None)
	uint8                                        bGivesAchievementItems : 1;                        // Mask: 0x4, PropSize: 0x10x199(0x1)(None)
	uint8                                        bBPAllowUseInInventory : 1;                        // Mask: 0x8, PropSize: 0x10x199(0x1)(None)
	uint8                                        bBPRemoteInventoryAllowRemoveItems : 1;            // Mask: 0x10, PropSize: 0x10x199(0x1)(None)
	uint8                                        bUseBPRemoteInventoryGetMaxVisibleSlots : 1;       // Mask: 0x20, PropSize: 0x10x199(0x1)(None)
	uint8                                        bUseBPGetExtraItemDisplay : 1;                     // Mask: 0x40, PropSize: 0x10x199(0x1)(None)
	uint8                                        bBPNotifyItemAdded : 1;                            // Mask: 0x80, PropSize: 0x10x199(0x1)(None)
	uint8                                        bBPNotifyItemRemoved : 1;                          // Mask: 0x1, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bBPNotifyItemQuantityUpdated : 1;                  // Mask: 0x2, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bBPOverrideItemMinimumUseInterval : 1;             // Mask: 0x4, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bBPForceCustomRemoteInventoryAllowAddItems : 1;    // Mask: 0x8, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bBPForceCustomRemoteInventoryAllowRemoveItems : 1; // Mask: 0x10, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bForceInventoryNotifyCraftingFinished : 1;         // Mask: 0x20, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bAllowWorldSettingsInventoryComponentAppends : 1;  // Mask: 0x40, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bPreventCraftingResourceConsumption : 1;           // Mask: 0x80, PropSize: 0x10x19A(0x1)(None)
	uint8                                        bOverrideInventoryDepositClassDontForceDrop : 1;   // Mask: 0x1, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bUseBPIsCraftingAllowed : 1;                       // Mask: 0x2, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bUseBPRemoteInventoryAllowCrafting : 1;            // Mask: 0x4, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bNotifyAddedOnClientReceive : 1;                   // Mask: 0x8, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bIsTaxidermyBase : 1;                              // Mask: 0x10, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bDeferCheckForAutoCraftBlueprintsOnInventoryChange : 1; // Mask: 0x20, PropSize: 0x10x19B(0x1)(None)
	uint8                                        bShowQuickSlotPanel : 1;                           // Mask: 0x40, PropSize: 0x10x19B(0x1)(None)
	uint8                                        BitPad_2F8 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3824[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGenericDataListEntry*                 ExtraItemDisplay;                                  // 0x1A0(0x8)(ZeroConstructor)
	int32                                        MaxInventoryItems;                                 // 0x1A8(0x4)(None)
	float                                        MaxInventoryWeight;                                // 0x1AC(0x4)(None)
	int32                                        AbsoluteMaxVanityItems;                            // 0x1B0(0x4)(None)
	int32                                        NumVanityItems;                                    // 0x1B4(0x4)(None)
	uint8                                        TribeGroupInventoryRank;                           // 0x1B8(0x1)(None)
	uint8                                        Pad_3825[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumSlots;                                          // 0x1BC(0x4)(None)
	int32                                        MaxItemCraftQueueEntries;                          // 0x1C0(0x4)(None)
	uint8                                        Pad_3826[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                RemoteInventoryDescriptionString;                  // 0x1C8(0x10)(None)
	class UClass*                                EngramRequirementClassOverride;                    // 0x1D8(0x8)(ZeroConstructor)
	TArray<class UClass*>                        RemoteAddItemOnlyAllowItemClasses;                 // 0x1E0(0x10)(ZeroConstructor)
	TArray<class UClass*>                        RemoteAddItemPreventItemClasses;                   // 0x1F0(0x10)(ZeroConstructor)
	TArray<struct FEventItem>                    EventItems;                                        // 0x200(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultInventoryItems;                             // 0x210(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultInventoryItems2;                            // 0x220(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultInventoryItems3;                            // 0x230(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultInventoryItems4;                            // 0x240(0x10)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UObject>>        DefaultInventoryItemsClasses;                      // 0x250(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         DefaultInventoryItemsClassesNew;                   // 0x260(0x10)(ZeroConstructor)
	TArray<class FString>                        DefaultInventoryItemsRandomCustomStrings;          // 0x270(0x10)(None)
	TArray<float>                                DefaultInventoryItemsRandomCustomStringsWeights;   // 0x280(0x10)(None)
	TArray<class UClass*>                        CheatInventoryItems;                               // 0x290(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultEquippedItems;                              // 0x2A0(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultEquippedItemSkins;                          // 0x2B0(0x10)(ZeroConstructor)
	TArray<class UClass*>                        DefaultSlotItems;                                  // 0x2C0(0x10)(ZeroConstructor)
	TArray<struct FItemSpawnActorClassOverride>  ItemSpawnActorClassOverrides;                      // 0x2D0(0x10)(ZeroConstructor)
	TArray<class UClass*>                        OnlyAllowCraftingItemClasses;                      // 0x2E0(0x10)(ZeroConstructor)
	TArray<uint8>                                DefaultEngrams;                                    // 0x2F0(0x10)(None)
	TArray<uint8>                                DefaultEngrams2;                                   // 0x300(0x10)(None)
	TArray<uint8>                                DefaultEngrams3;                                   // 0x310(0x10)(None)
	TArray<uint8>                                DefaultEngrams4;                                   // 0x320(0x10)(None)
	TArray<float>                                DefaultInventoryQualities;                         // 0x330(0x10)(None)
	class FString                                InventoryNameOverride;                             // 0x340(0x10)(None)
	float                                        MaxRemoteInventoryViewingDistance;                 // 0x350(0x4)(None)
	float                                        ActiveInventoryRefreshInterval;                    // 0x354(0x4)(None)
	int32                                        StartingAbsoluteMaxInventoryItems;                 // 0x358(0x4)(None)
	int32                                        AbsoluteMaxInventoryItems;                         // 0x35C(0x4)(None)
	int32                                        SlotMaxMagicNumber;                                // 0x360(0x4)(None)
	int32                                        CurrentSlotMaxMagicNumber;                         // 0x364(0x4)(None)
	double                                       LastInventoryRefreshTime;                          // 0x368(0x8)(None)
	class UClass*                                DroppedItemTemplateOverride;                       // 0x370(0x8)(ZeroConstructor)
	TArray<class UClass*>                        ForceAllowItemStackings;                           // 0x378(0x10)(ZeroConstructor)
	struct FRotator                              DropItemRotationOffset;                            // 0x388(0x18)(None)
	TArray<struct FItemCraftingConsumptionReplenishment> ItemCraftingConsumptionReplenishments;             // 0x3A0(0x10)(ZeroConstructor)
	float                                        MaxItemCooldownTimeClear;                          // 0x3B0(0x4)(None)
	uint8                                        Pad_3855[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemMultiplier>               MaxItemTemplateQuantities;                         // 0x3B8(0x10)(ZeroConstructor)
	class USoundBase*                            ItemCraftingSoundOverride;                         // 0x3C8(0x8)(ZeroConstructor)
	TArray<struct FActorClassAttachmentInfo>     WeaponAsEquipmentAttachmentInfos;                  // 0x3D0(0x10)(ZeroConstructor)
	TArray<class UPrimalItem*>                   CraftingItems;                                     // 0x3E0(0x10)(ZeroConstructor)
	int32                                        DisplayDefaultItemInventoryCount;                  // 0x3F0(0x4)(None)
	uint8                                        Pad_3856[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastRefreshCheckItemTime;                          // 0x420(0x8)(None)
	uint8                                        Pad_3857[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinItemSets;                                       // 0x43C(0x4)(None)
	float                                        MaxItemSets;                                       // 0x440(0x4)(None)
	float                                        NumItemSetsPower;                                  // 0x444(0x4)(None)
	uint8                                        bSetsRandomWithoutReplacement : 1;                 // Mask: 0x1, PropSize: 0x10x448(0x1)(None)
	uint8                                        bForceAllowAllUseInInventory : 1;                  // Mask: 0x2, PropSize: 0x10x448(0x1)(None)
	uint8                                        bUseBPIsValidCraftingResource : 1;                 // Mask: 0x4, PropSize: 0x10x448(0x1)(None)
	uint8                                        bUseParentStructureIsValidCraftingResource : 1;    // Mask: 0x8, PropSize: 0x10x448(0x1)(None)
	uint8                                        bSetCraftingEnabledCheckForAutoCraftBlueprints : 1; // Mask: 0x10, PropSize: 0x10x448(0x1)(None)
	uint8                                        bUseBPRemoteInventoryAllowViewing : 1;             // Mask: 0x20, PropSize: 0x10x448(0x1)(None)
	uint8                                        bAllDefaultInventoryIsEngrams : 1;                 // Mask: 0x40, PropSize: 0x10x448(0x1)(None)
	uint8                                        bUseBPCanGrindItems : 1;                           // Mask: 0x80, PropSize: 0x10x448(0x1)(None)
	uint8                                        bGrinderCanGrindAll : 1;                           // Mask: 0x1, PropSize: 0x10x449(0x1)(None)
	uint8                                        BitPad_2FF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3858[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSupplyCrateItemSet>           ItemSets;                                          // 0x450(0x10)(ZeroConstructor)
	TArray<struct FSupplyCrateItemSet>           AdditionalItemSets;                                // 0x460(0x10)(ZeroConstructor)
	class UClass*                                ItemSetsOverride;                                  // 0x470(0x8)(ZeroConstructor)
	TArray<float>                                SetQuantityWeights;                                // 0x478(0x10)(None)
	TArray<float>                                SetQuantityValues;                                 // 0x488(0x10)(None)
	class USoundBase*                            ItemRemovedBySound;                                // 0x498(0x8)(ZeroConstructor)
	class USoundBase*                            OpenInventorySound;                                // 0x4A0(0x8)(ZeroConstructor)
	class USoundBase*                            CloseInventorySound;                               // 0x4A8(0x8)(ZeroConstructor)
	float                                        MaxInventoryAccessDistance;                        // 0x4B0(0x4)(None)
	uint8                                        Pad_3859[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FServerCustomFolder>           CustomFolderItems;                                 // 0x4B8(0x10)(None)
	uint8                                        Pad_385A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class UPrimalInventoryComponent>> ForceAllowCraftingForInventoryComponents;          // 0x4D8(0x10)(ZeroConstructor)
	TArray<struct FItemMultiplier>               ItemClassWeightMultipliers;                        // 0x4E8(0x10)(ZeroConstructor)
	float                                        GenerateItemSetsQualityMultiplierMin;              // 0x4F8(0x4)(None)
	float                                        GenerateItemSetsQualityMultiplierMax;              // 0x4FC(0x4)(None)
	float                                        DefaultCraftingRequirementsMultiplier;             // 0x500(0x4)(None)
	int32                                        DefaultCraftingQuantityMultiplier;                 // 0x504(0x4)(None)
	int32                                        ActionWheelAccessInventoryPriority;                // 0x508(0x4)(None)
	int32                                        SavedForceDefaultInventoryRefreshVersion;          // 0x50C(0x4)(None)
	int32                                        ForceDefaultInventoryRefreshVersion;               // 0x510(0x4)(None)
	uint8                                        Pad_385B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        TamedDinoForceConsiderFoodTypes;                   // 0x518(0x10)(ZeroConstructor)
	uint8                                        Pad_385C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            OverrideCraftingFinishedSound;                     // 0x538(0x8)(ZeroConstructor)
	uint8                                        Pad_385D[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               GroundDropTraceLocationOffset;                     // 0x558(0x18)(None)
	FMulticastInlineDelegateProperty_            OnInventoryItemAdded;                              // 0x570(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnInventoryItemRemoved;                            // 0x580(0x10)(ZeroConstructor)
	uint8                                        bHideTributeUploadDinosPanel : 1;                  // Mask: 0x1, PropSize: 0x10x590(0x1)(None)
	uint8                                        bIgnoreDLCEquipRestrictions : 1;                   // Mask: 0x2, PropSize: 0x10x590(0x1)(None)
	uint8                                        bIgnoreEngramEquipRestrictions : 1;                // Mask: 0x4, PropSize: 0x10x590(0x1)(None)
	uint8                                        bUseBPOnTransferAll : 1;                           // Mask: 0x8, PropSize: 0x10x590(0x1)(None)
	uint8                                        bDisableTransferEquipmentOnTransferAll : 1;        // Mask: 0x10, PropSize: 0x10x590(0x1)(None)
	uint8                                        BitPad_300 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_385E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FOverrideMultiuseButtonStyle>  MultiUseButtonStyleOverrides;                      // 0x598(0x10)(ZeroConstructor)
	bool                                         bUseCustomSorting;                                 // 0x5A8(0x1)(None)
	bool                                         bForceAllowCustomFolders;                          // 0x5A9(0x1)(None)
	uint8                                        Pad_385F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastCraftRequestTime;                              // 0x5B0(0x8)(None)
	int32                                        FreeCraftingModeQuantityValue;                     // 0x5B8(0x4)(None)
	uint8                                        bShowHiddenDefaultInventoryItemsDuringCrafting : 1; // Mask: 0x1, PropSize: 0x10x5BC(0x1)(None)
	uint8                                        bUseItemCountInsteadOfInventory : 1;               // Mask: 0x2, PropSize: 0x10x5BC(0x1)(None)
	uint8                                        bHideSlotCountFromHud : 1;                         // Mask: 0x4, PropSize: 0x10x5BC(0x1)(None)
	uint8                                        bNotNearWirelessCrafting : 1;                      // Mask: 0x8, PropSize: 0x10x5BC(0x1)(None)
	uint8                                        BitPad_301 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3860[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastWirelessCraftingCheckLoc;                      // 0x5C0(0x18)(None)
	TArray<class UPrimalWirelessExchangeData*>   WirelessExchanges;                                 // 0x5D8(0x10)(ZeroConstructor)
	uint8                                        Pad_3861[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            AccessInventoryIcon;                               // 0x648(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    TribeInventoryAccessRankSelectionIcons;            // 0x650(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalInventoryComponent* GetDefaultObj();

	void UpdateTribeGroupInventoryRank(uint8 NewRank);
	void UpdateSlotMagicNumber();
	void UpdateNetWeaponClipAmmo(class UPrimalItem* AnItem, int32 Ammo);
	void TransferItemToInventory(class UPrimalInventoryComponent* ToInventory, int32 ItemIndex);
	void TransferAllItemsToInventoryWithFilter(class UPrimalInventoryComponent* ToInventory, const TArray<class UClass*>& OfItemClasses, const TArray<class UClass*>& IgnoreItemClasses, bool bAllowSubclasses);
	void TransferAllItemsToInventory(class UPrimalInventoryComponent* ToInventory);
	void TransferAllItemsOfClassToInventory(class UPrimalInventoryComponent* ToInventory, class UClass* OfItemClass, bool bAllowSubclasses);
	void TransferAllItemsOfClassesToInventory(class UPrimalInventoryComponent* ToInventory, const TArray<class UClass*>& OfItemClasses, bool bAllowSubclasses);
	void StopAllCraftingRepairing();
	void StaticDropNewItemWithInfo(class AActor* ForActor, const struct FItemNetInfo& ItemInfo, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride, class ADroppedItem* ReturnValue);
	void StaticDropNewItem(class AActor* ForActor, class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int32 QuantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride, class ADroppedItem* ReturnValue);
	void SetNextItemSpoilingID(const struct FItemNetID& NextItemID);
	void SetNextItemConsumptionID(const struct FItemNetID& NextItemID);
	void SetFreeCraftingMode(bool bNewVal);
	void SetCraftingEnabled(bool bEnable);
	void ServerSplitItemStack(const struct FItemNetID& ItemID, int32 AmountToSplit);
	void ServerSelectedCustomItemAction(const struct FItemNetID& ItemID, class FName SelectedOption, class AShooterPlayerController* ForPC);
	void ServerRequestItems(class AShooterPlayerController* ForPC, bool bEquippedItems, bool bIsFirstSpawn);
	void ServerRepairItem(const struct FItemNetID& ItemID, class AShooterPlayerController* ByPC, bool bRepairIgnoreInventoryRequirement, float RepairPercentage, float RepairSpeedMultiplier);
	void ServerRemoveItemFromSlot(const struct FItemNetID& ItemID);
	void ServerMergeItemStack(const struct FItemNetID& ItemID);
	void ServerMakeRecipeItem(class APrimalStructureItemContainer* Container, const struct FItemNetID& NoteToConsume, class UClass* RecipeItemTemplate, const class FString& CustomName, const class FString& CustomDescription, const TArray<struct FColor>& CustomColors, const TArray<struct FCraftingResourceRequirement>& CustomRequirements);
	void ServerForceMergeItemStack(const struct FItemNetID& Item1ID, const struct FItemNetID& Item2ID);
	void ServerCraftItem(const struct FItemNetID& ItemID, class AShooterPlayerController* ByPC);
	void ServerAddItemToSlot(const struct FItemNetID& ItemID, int32 SlotIndex, bool bSuppressSound);
	void RemoveItem(const struct FItemNetID& ItemID, bool bDoDrop, bool bSecondryAction, bool bForceRemoval, bool ShowHUDMessage, bool ReturnValue);
	void RemoteInventoryAllowViewing(class AShooterPlayerController* PC, float MaxAllowedDistanceOffset, bool ReturnValue);
	void RemoteInventoryAllowRepairingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled, bool ReturnValue);
	void RemoteInventoryAllowCraftingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled, bool ReturnValue);
	void OverrideUseItem(class UPrimalItem* TheItem, bool ReturnValue);
	void NotifyClientsDurabilityChange(class UPrimalItem* AnItem);
	void MulticastUpdateNearbyWirelessCrafting();
	void MulticastForceUpdateWirelessResources();
	void IsRepairingAllowed(bool ReturnValue);
	void IsOnCraftRequestCooldown(bool ReturnValue);
	void IsLocalToPlayer(class AShooterPlayerController* ForPC, bool ReturnValue);
	void IsLocal(bool ReturnValue);
	void IsCraftingAllowed(class UPrimalItem* AnItem, bool ReturnValue);
	void IsAtMaxInventoryItems(bool ReturnValue);
	void IsAllowedInventoryAccess(class APlayerController* ForPC, bool ReturnValue);
	void InventoryViewersStopLocalSound(class USoundBase* ASound);
	void InventoryViewersPlayLocalSound(class USoundBase* ASound, bool bAttach);
	void InventoryRefresh();
	void InventoryCustomSortPredicate(class UPrimalItem* LeftItem, class UPrimalItem* RightItem, bool ReturnValue);
	void InventoryCustomFilter(const TArray<class UPrimalItem*>& UnfilteredItemsList, const TArray<class UPrimalItem*>& FilteredItemsList);
	void InitializeInventory();
	void HasResources(const TArray<struct FCraftingResourceRequirement>& RequiredResources, bool ReturnValue);
	void HasItemsEquipped(const TArray<class UClass*>& ItemTemplates, bool bRequiresExactClassMatch, bool bOnlyArkItems, bool bEnsureAllItems, bool ReturnValue);
	void GetTotalEquippedItemStat(enum class EPrimalItemStat StatType, float ReturnValue);
	void GetNumVanityItems(int32 ReturnValue);
	void GetNumNonVanityItems(int32 ReturnValue);
	void GetNumItems(bool bIncludeVanityItems, bool bOnlyCountVanityItems, int32 ReturnValue);
	void GetMaxInventoryItems(bool bIgnoreHiddenDefaultInventory, int32 ReturnValue);
	void GetLastItemSlotIndex(int32 ReturnValue);
	void GetItemTemplateQuantity(class UClass* ItemTemplate, class UPrimalItem* IgnoreItem, bool bIgnoreBlueprints, bool bCheckValidForCrafting, bool bRequireExactClassMatch, bool bForceCheckForDupes, int32 ReturnValue);
	void GetInventoryUpdatedFrame(int32 ReturnValue);
	void GetGrinderSettings(int32 MaxQuantityToGrind, float GrindGiveItemsPercent, int32 MaxItemsToGivePerGrind);
	void GetForceShowCraftablesInventoryTab(bool ReturnValue);
	void GetEquippedItemOfType(enum class EPrimalEquipmentType AType, class UPrimalItem* ReturnValue);
	void GetEquippedItemOfClass(class UClass* ItemClass, class UPrimalItem* ReturnValue);
	void GetEquippedArmorRating(enum class EPrimalEquipmentType EquipmentType, float ReturnValue);
	void GetEmptySlotCount(bool bIsVanityItem, int32 ReturnValue);
	void GetCapacityForItem(class UClass* ItemClass, bool bCheckWeight, int32 ReturnValue);
	void GetAbsoluteMaxInventoryItems(bool bIsSkin, int32 ReturnValue);
	void GenerateCustomCrateItems(class UClass* SourceClass, const TArray<struct FSupplyCrateItemSet>& CustomItemSets, float CustomMinItemSets, float CustomMaxItemSets, float CustomNumItemSetsPower, bool bCustomSetsRandomWithoutReplacement, const TArray<class UPrimalItem*>& GeneratedItems, float MinQualityMultiplier, float MaxQualityMultiplier, int32 NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp, bool bIsMissionReward, bool ReturnValue);
	void GenerateCrateItems(float MinQualityMultiplier, float MaxQualityMultiplier, int32 NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp, bool ReturnValue);
	void FindAllItemsOfType(class UClass* ItemTemplate, bool bRequiresExactClassMatch, bool bIncludeInventoryItems, bool bIncludeEquippedItems, bool bIncludeArkTributeItems, bool bIncludeSlotItems, bool bIncludeBlueprints, bool bIncludeEngrams, const TArray<class UPrimalItem*>& ReturnValue);
	void EjectItem(const struct FItemNetID& ItemID, bool bPreventImpule, bool bForceEject, bool bSetItemLocation, const struct FVector& LocationOverride, bool ShowHUDMessage, class UClass* TheDroppedTemplateOverride, bool bAssignToTribeForPickup, int32 AssignedTribeID, class ADroppedItem* ReturnValue);
	void ConsumeResources(const TArray<struct FCraftingResourceRequirement>& Resources, bool ReturnValue);
	void ConsumeArmorDurability(float ConsumptionAmount, bool bAllArmorTypes, enum class EPrimalEquipmentType SpecificArmorType, float FromDamageBlocked);
	void ClientUpdateFreeCraftingMode(bool bNewFreeCraftingModeValue);
	void ClientOnArkTributeItemsAdded();
	void ClientItemMessageNotification(const struct FItemNetID& ItemID, enum class EPrimalItemMessage ItemMessageType);
	void ClearCraftQueue(bool bForceClearActiveCraftRepair);
	void CheckFullInventoryConditionForItem(class UPrimalItem* AnItem, bool ReturnValue);
	void CheckForAutoCraftBlueprints();
	void CanGrindItems(class AShooterPlayerController* PC, bool ReturnValue);
	void CanGrindItem(class UPrimalItem* Item, bool ReturnValue);
	void CanEquipItem(class UPrimalItem* AnItem, bool ReturnValue);
	void BPRequestedInventoryItems(class AShooterPlayerController* ForPC);
	void BPRemoteInventoryGetMaxVisibleSlots(int32 NumItems, class AShooterPlayerController* PC, bool bIsLocal, int32 ReturnValue);
	void BPRemoteInventoryAllowViewing(class AShooterPlayerController* PC, bool ReturnValue);
	void BPRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* AnItemToTransfer, bool ReturnValue);
	void BPRemoteInventoryAllowCrafting(class AShooterPlayerController* PC, bool ReturnValue);
	void BPRemoteInventoryAllowAddItems(class AShooterPlayerController* PC, bool ReturnValue);
	void BPRemoteInventoryAllowAddItem_SpecificQuantity(class AShooterPlayerController* PC, class UPrimalItem* AnItem, int32 SpecificQuantityIn, int32 SpecificQuantityOut, bool ReturnValue);
	void BPRemoteInventoryAllowAddItem(class AShooterPlayerController* PC, class UPrimalItem* AnItem, bool ReturnValue);
	void BPPreventEquipItemType(enum class EPrimalEquipmentType EquipmentType, bool ReturnValue);
	void BPPreventEquipItem(class UPrimalItem* TheItem, bool ReturnValue);
	void BPPreInitDefaultInventory();
	void BPPostInitDefaultInventory();
	void BPOverrideItemMinimumUseInterval(class UPrimalItem* TheItem, float ReturnValue);
	void BPOnTransferAll(class UPrimalInventoryComponent* ToInventory);
	void BPNotifyItemRemoved(class UPrimalItem* AnItem);
	void BPNotifyItemQuantityUpdated(class UPrimalItem* AnItem, int32 Amount);
	void BPNotifyItemAdded(class UPrimalItem* AnItem, bool bEquipItem);
	void BPIsValidCraftingResource(class UPrimalItem* TheItem, bool ReturnValue);
	void BPIsCraftingAllowed(class UPrimalItem* AnItem, bool ReturnValue);
	void BPInventoryRefresh();
	void BPInitializeInventory();
	void BPIncrementItemTemplateQuantity(class UClass* ItemTemplate, int32 Amount, bool bReplicateToClient, bool bIsBlueprint, bool bRequireExactClassMatch, bool bIsCraftingResourceConsumption, bool bIsFromUseConsumption, bool bIsArkTributeItem, class UPrimalItem* UseSpecificItem, bool bDontExceedMaxItems, int32 ReturnValue);
	void BPGetItemOfTemplate(class UClass* ItemTemplate, bool bOnlyInventoryItems, bool bOnlyEquippedItems, bool IgnoreItemsWithFullQuantity, bool bFavorSlotItems, bool bIsBlueprint, bool bRequiresExactClassMatch, bool bIgnoreSlotItems, bool bOnlyArkItems, bool bPreferEngram, bool bIsForCraftingConsumption, class UPrimalItem* ReturnValue);
	void BPGetExtraItemDisplay(bool bShowExtraItem, const class FString& Description, const class FString& CustomString, class UTexture2D* EntryIcon, class UMaterialInterface* EntryMaterial);
	void BPFindItemWithID(int32 ItemID1, int32 ItemID2, class UPrimalItem* ReturnValue);
	void BPDropInventoryDeposit(double DestroyAtTime, int32 OverrideMaxItemsDropped, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride);
	void BPDropForceLocationInventoryDeposit(double DestroyAtTime, int32 OverrideMaxItemsDropped, const struct FVector& DepositLocationOverride, int32 DeadPlayerID, class APrimalStructureItemContainer* ReturnValue);
	void BPCustomRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* AnItemToTransfer, int32 RequestedQuantity, bool bRequestedByPlayer, bool bRequestDropping, bool ReturnValue);
	void BPCustomRemoteInventoryAllowAddItems(class AShooterPlayerController* PC, class UPrimalItem* AnItem, int32 AnItemQuantityOverride, bool bRequestedByPlayer, bool ReturnValue);
	void BPCreateDropItemInventoryEmpty(double DestroyAtTime, class UClass* OverrideInventoryDepositClass, class APrimalStructureItemContainer* CopyStructureValues, class AActor* GroundIgnoreActor, int32 DeadPlayerID, float DropInventoryOnGroundTraceDistance, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride, class APrimalStructureItemContainer* ReturnValue);
	void BPCraftingFinishedNotification(class UPrimalItem* ItemToBeCrafted);
	void BPAllowUseInInventory(class UPrimalItem* TheItem, bool bIsRemoteInventory, class AShooterPlayerController* ByPC, bool ReturnValue);
	void BPAllowAddInventoryItem(class UPrimalItem* Item, int32 RequestedQuantity, bool bOnlyAddAll, bool ReturnValue);
	void BPAccessedInventory(class AShooterPlayerController* ForPC);
	void AllowAddInventoryItem_OnlyAddAll(class UPrimalItem* AnItem, bool ReturnValue);
	void AllowAddInventoryItem_MaxQuantity(class UPrimalItem* AnItem, int32 RequestedQuantityIn, int32 RequestedQuantityOut, bool ReturnValue);
	void AllowAddInventoryItem_AnyQuantity(class UPrimalItem* AnItem, bool ReturnValue);
	void AddItemObjectEx(class UPrimalItem* AnItem, bool bEquipItem, bool bAddToSlot, bool bDontStack, bool bShowHUDNotification, bool bDontRecalcSpoilingTime, bool bForceIncompleteStacking, class AShooterCharacter* OwnerPlayer, bool bClampStats, class UPrimalItem* InsertAfterItem, bool bInsertAtItemInstead, class UPrimalItem* ReturnValue);
	void AddItemObject(class UPrimalItem* AnItem, class UPrimalItem* ReturnValue);
};

// 0x0 (0x660 - 0x660)
// Class ShooterGame.PrimalInventoryComponent_Static
class UPrimalInventoryComponent_Static : public UPrimalInventoryComponent
{
public:

	static class UClass* StaticClass();
	static class UPrimalInventoryComponent_Static* GetDefaultObj();

};

// 0x68 (0x1440 - 0x13D8)
// Class ShooterGame.SkeletalMeshComponentWithSoftRef
class USkeletalMeshComponentWithSoftRef : public USkeletalMeshComponent
{
public:
	TSoftObjectPtr<class USkeletalMesh>          MeshRef;                                           // 0x13D8(0x30)(ZeroConstructor)
	TSoftClassPtr<class UAnimInstance>           AnimClassRef;                                      // 0x1408(0x30)(ZeroConstructor)
	uint8                                        Pad_38BD[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USkeletalMeshComponentWithSoftRef* GetDefaultObj();

};

// 0x30 (0x780 - 0x750)
// Class ShooterGame.StaticMeshComponentWithSoftRef
class UStaticMeshComponentWithSoftRef : public UStaticMeshComponent
{
public:
	TSoftObjectPtr<class UStaticMesh>            MeshRef;                                           // 0x750(0x30)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UStaticMeshComponentWithSoftRef* GetDefaultObj();

};

// 0x38 (0xA00 - 0x9C8)
// Class ShooterGame.ParticleSystemComponentWithSoftRef
class UParticleSystemComponentWithSoftRef : public UParticleSystemComponent
{
public:
	TSoftObjectPtr<class UParticleSystem>        TemplateRef;                                       // 0x9C8(0x30)(ZeroConstructor)
	uint8                                        Pad_38BF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UParticleSystemComponentWithSoftRef* GetDefaultObj();

};

// 0xE88 (0xEB0 - 0x28)
// Class ShooterGame.PrimalItem
class UPrimalItem : public UObject
{
public:
	uint8                                        Pad_3955[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCanBuildStructures : 1;                           // Mask: 0x1, PropSize: 0x10x58(0x1)(None)
	uint8                                        bAllowEquppingItem : 1;                            // Mask: 0x2, PropSize: 0x10x58(0x1)(None)
	uint8                                        bPreventEquipOnTaxidermyBase : 1;                  // Mask: 0x4, PropSize: 0x10x58(0x1)(None)
	uint8                                        bAllowInventoryItem : 1;                           // Mask: 0x8, PropSize: 0x10x58(0x1)(None)
	uint8                                        bIsRepairing : 1;                                  // Mask: 0x10, PropSize: 0x10x58(0x1)(None)
	uint8                                        bEquippedItem : 1;                                 // Mask: 0x20, PropSize: 0x10x58(0x1)(None)
	uint8                                        bCanSlot : 1;                                      // Mask: 0x40, PropSize: 0x10x58(0x1)(None)
	uint8                                        bUseItemColors : 1;                                // Mask: 0x80, PropSize: 0x10x58(0x1)(None)
	uint8                                        bShowTooltipColors : 1;                            // Mask: 0x1, PropSize: 0x10x59(0x1)(None)
	uint8                                        bUseBPInitItemColors : 1;                          // Mask: 0x2, PropSize: 0x10x59(0x1)(None)
	uint8                                        bRefreshOnDyeUsed : 1;                             // Mask: 0x4, PropSize: 0x10x59(0x1)(None)
	uint8                                        bUseBPPostAddBuffToGiveOwnerCharacter : 1;         // Mask: 0x8, PropSize: 0x10x59(0x1)(None)
	uint8                                        bForceDediAttachments : 1;                         // Mask: 0x10, PropSize: 0x10x59(0x1)(None)
	uint8                                        bAllowCustomColors : 1;                            // Mask: 0x20, PropSize: 0x10x59(0x1)(None)
	uint8                                        bForceAllowRemovalWhenDead : 1;                    // Mask: 0x40, PropSize: 0x10x59(0x1)(None)
	uint8                                        bAutoCraftBlueprint : 1;                           // Mask: 0x80, PropSize: 0x10x59(0x1)(None)
	uint8                                        bHideFromInventoryDisplay : 1;                     // Mask: 0x1, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bUseItemStats : 1;                                 // Mask: 0x2, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bUseSpawnActorWhenRiding : 1;                      // Mask: 0x4, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bUseSpawnActor : 1;                                // Mask: 0x8, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bAllowDefaultCharacterAttachment : 1;              // Mask: 0x10, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bUseItemDurability : 1;                            // Mask: 0x20, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bNewWeaponAutoFillClipAmmo : 1;                    // Mask: 0x40, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bDestroyBrokenItem : 1;                            // Mask: 0x80, PropSize: 0x10x5A(0x1)(None)
	uint8                                        bIsMisssionItem : 1;                               // Mask: 0x1, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bThrowOnHotKeyUse : 1;                             // Mask: 0x2, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bIsBlueprint : 1;                                  // Mask: 0x4, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bCanBeBlueprint : 1;                               // Mask: 0x8, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bPreventUpload : 1;                                // Mask: 0x10, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bIsEngram : 1;                                     // Mask: 0x20, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bIsCustomRecipe : 1;                               // Mask: 0x40, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bIsFoodRecipe : 1;                                 // Mask: 0x80, PropSize: 0x10x5B(0x1)(None)
	uint8                                        bTekItem : 1;                                      // Mask: 0x1, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bAllowUseInInventory : 1;                          // Mask: 0x2, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bAllowRemoteUseInInventory : 1;                    // Mask: 0x4, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bUseBlueprintEquippedNotifications : 1;            // Mask: 0x8, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bUseInWaterRestoreDurability : 1;                  // Mask: 0x10, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bValidCraftingResource : 1;                        // Mask: 0x20, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bUseBPSetupHUDIconMaterial : 1;                    // Mask: 0x40, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bEquipRequiresDLC_ScorchedEarth : 1;               // Mask: 0x80, PropSize: 0x10x5C(0x1)(None)
	uint8                                        bEquipRequiresDLC_Aberration : 1;                  // Mask: 0x1, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bEquipRequiresDLC_Extinction : 1;                  // Mask: 0x2, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bEquipRequiresDLC_Genesis : 1;                     // Mask: 0x4, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bDurabilityRequirementIgnoredInWater : 1;          // Mask: 0x8, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bAllowRepair : 1;                                  // Mask: 0x10, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bCustomBrokenIcon : 1;                             // Mask: 0x20, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bAllowRemovalFromInventory : 1;                    // Mask: 0x40, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bFromSteamInventory : 1;                           // Mask: 0x80, PropSize: 0x10x5D(0x1)(None)
	uint8                                        bIsFromAllClustersInventory : 1;                   // Mask: 0x1, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bConsumeItemOnUse : 1;                             // Mask: 0x2, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bUseBPOnItemConsumed : 1;                          // Mask: 0x4, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bConfirmBeforeUsing : 1;                           // Mask: 0x8, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bOnlyCanUseInWater : 1;                            // Mask: 0x10, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bCanUseSwimming : 1;                               // Mask: 0x20, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bIsDescriptionOnlyItem : 1;                        // Mask: 0x40, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bRestoreDurabilityWhenColorized : 1;               // Mask: 0x80, PropSize: 0x10x5E(0x1)(None)
	uint8                                        bAppendPrimaryColorToName : 1;                     // Mask: 0x1, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bUseScaleStatEffectivenessByDurability : 1;        // Mask: 0x2, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bUsesCreationTime : 1;                             // Mask: 0x4, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bAllowUseWhileRiding : 1;                          // Mask: 0x8, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bPreventCraftingResourceAtFullDurability : 1;      // Mask: 0x10, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bGiveItemWhenUsedCopyItemStats : 1;                // Mask: 0x20, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bHideFromRemoteInventoryDisplay : 1;               // Mask: 0x40, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bAutoDecreaseDurabilityOverTime : 1;               // Mask: 0x80, PropSize: 0x10x5F(0x1)(None)
	uint8                                        bPreventDragOntoOtherItemIfSameCustomData : 1;     // Mask: 0x1, PropSize: 0x10x60(0x1)(None)
	uint8                                        bUseOnItemWeaponRemoveClipAmmo : 1;                // Mask: 0x2, PropSize: 0x10x60(0x1)(None)
	uint8                                        bUseOnItemSetIndexAsDestinationItemCustomData : 1; // Mask: 0x4, PropSize: 0x10x60(0x1)(None)
	uint8                                        bSupportDragOntoOtherItem : 1;                     // Mask: 0x8, PropSize: 0x10x60(0x1)(None)
	uint8                                        bIsItemSkin : 1;                                   // Mask: 0x10, PropSize: 0x10x60(0x1)(None)
	uint8                                        bPreventOnSkinTab : 1;                             // Mask: 0x20, PropSize: 0x10x60(0x1)(None)
	uint8                                        bDontResetAttachmentIfNotUpdatingItem : 1;         // Mask: 0x40, PropSize: 0x10x60(0x1)(None)
	uint8                                        bItemSkinIgnoreSkinIcon : 1;                       // Mask: 0x80, PropSize: 0x10x60(0x1)(None)
	uint8                                        bPickupEggAlertsDinos : 1;                         // Mask: 0x1, PropSize: 0x10x61(0x1)(None)
	uint8                                        bEggSpoilsWhenFertilized : 1;                      // Mask: 0x2, PropSize: 0x10x61(0x1)(None)
	uint8                                        bHideCustomDescription : 1;                        // Mask: 0x4, PropSize: 0x10x61(0x1)(None)
	uint8                                        bCopyCustomDescriptionIntoSpoiledItem : 1;         // Mask: 0x8, PropSize: 0x10x61(0x1)(None)
	uint8                                        bCopyDurabilityIntoSpoiledItem : 1;                // Mask: 0x10, PropSize: 0x10x61(0x1)(None)
	uint8                                        bCraftedRequestCustomItemDescription : 1;          // Mask: 0x20, PropSize: 0x10x61(0x1)(None)
	uint8                                        bForceAllowCustomItemDescription : 1;              // Mask: 0x40, PropSize: 0x10x61(0x1)(None)
	uint8                                        BitPad_30F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_310 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPPreventUseOntoItem : 1;                      // Mask: 0x8, PropSize: 0x10x62(0x1)(None)
	uint8                                        bSkinDisableWhenSubmerged : 1;                     // Mask: 0x10, PropSize: 0x10x62(0x1)(None)
	uint8                                        bIsAbstractItem : 1;                               // Mask: 0x20, PropSize: 0x10x62(0x1)(None)
	uint8                                        bPreventItemSkins : 1;                             // Mask: 0x40, PropSize: 0x10x62(0x1)(None)
	uint8                                        bOnlyCanUseInFalling : 1;                          // Mask: 0x80, PropSize: 0x10x62(0x1)(None)
	uint8                                        bForceDropDestruction : 1;                         // Mask: 0x1, PropSize: 0x10x63(0x1)(None)
	uint8                                        bCanBeArkTributeItem : 1;                          // Mask: 0x2, PropSize: 0x10x63(0x1)(None)
	uint8                                        bAllowInvalidItemVersion : 1;                      // Mask: 0x4, PropSize: 0x10x63(0x1)(None)
	uint8                                        bUseSpawnActorRelativeLoc : 1;                     // Mask: 0x8, PropSize: 0x10x63(0x1)(None)
	uint8                                        bUseSpawnActorTakeOwnerRotation : 1;               // Mask: 0x10, PropSize: 0x10x63(0x1)(None)
	uint8                                        bUseEquippedItemBlueprintTick : 1;                 // Mask: 0x20, PropSize: 0x10x63(0x1)(None)
	uint8                                        bUseEquippedItemNativeTick : 1;                    // Mask: 0x40, PropSize: 0x10x63(0x1)(None)
	uint8                                        bSpawnActorOnWaterOnly : 1;                        // Mask: 0x80, PropSize: 0x10x63(0x1)(None)
	uint8                                        bAutoTameSpawnedActor : 1;                         // Mask: 0x1, PropSize: 0x10x64(0x1)(None)
	uint8                                        bShowItemRatingAsPercent : 1;                      // Mask: 0x2, PropSize: 0x10x64(0x1)(None)
	uint8                                        bPreventArmorDurabiltyConsumption : 1;             // Mask: 0x4, PropSize: 0x10x64(0x1)(None)
	uint8                                        bIsEgg : 1;                                        // Mask: 0x8, PropSize: 0x10x64(0x1)(None)
	uint8                                        bIsCookingIngredient : 1;                          // Mask: 0x10, PropSize: 0x10x64(0x1)(None)
	uint8                                        bDragClearDyedItem : 1;                            // Mask: 0x20, PropSize: 0x10x64(0x1)(None)
	uint8                                        bDeprecateItem : 1;                                // Mask: 0x40, PropSize: 0x10x64(0x1)(None)
	uint8                                        BitPad_311 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bItemSkinKeepOriginalWeaponTemplate : 1;           // Mask: 0x1, PropSize: 0x10x65(0x1)(None)
	uint8                                        bItemSkinKeepOriginalIcon : 1;                     // Mask: 0x2, PropSize: 0x10x65(0x1)(None)
	uint8                                        bItemSkinReceiveOwnerEquippedBlueprintEvents : 1;  // Mask: 0x4, PropSize: 0x10x65(0x1)(None)
	uint8                                        bItemSkinReceiveOwnerEquippedBlueprintTick : 1;    // Mask: 0x8, PropSize: 0x10x65(0x1)(None)
	uint8                                        bItemSkinAllowEquipping : 1;                       // Mask: 0x10, PropSize: 0x10x65(0x1)(None)
	uint8                                        bForceDisplayInInventory : 1;                      // Mask: 0x20, PropSize: 0x10x65(0x1)(None)
	uint8                                        bDroppedItemAllowDinoPickup : 1;                   // Mask: 0x40, PropSize: 0x10x65(0x1)(None)
	uint8                                        bCraftDontActuallyGiveItem : 1;                    // Mask: 0x80, PropSize: 0x10x65(0x1)(None)
	uint8                                        bPreventUseWhenSleeping : 1;                       // Mask: 0x1, PropSize: 0x10x66(0x1)(None)
	uint8                                        bOverrideRepairingRequirements : 1;                // Mask: 0x2, PropSize: 0x10x66(0x1)(None)
	uint8                                        bScaleOverridenRepairingRequirements : 1;          // Mask: 0x4, PropSize: 0x10x66(0x1)(None)
	uint8                                        bForceUseItemAddCharacterStatsOnDinos : 1;         // Mask: 0x8, PropSize: 0x10x66(0x1)(None)
	uint8                                        bOnlyEquipWhenUnconscious : 1;                     // Mask: 0x10, PropSize: 0x10x66(0x1)(None)
	uint8                                        bForcePreventConsumableWhileHandcuffed : 1;        // Mask: 0x20, PropSize: 0x10x66(0x1)(None)
	uint8                                        bOverrideExactClassCraftingRequirement : 1;        // Mask: 0x40, PropSize: 0x10x66(0x1)(None)
	uint8                                        bPreventConsumeItemOnDrag : 1;                     // Mask: 0x80, PropSize: 0x10x66(0x1)(None)
	uint8                                        bForceAllowGrinding : 1;                           // Mask: 0x1, PropSize: 0x10x67(0x1)(None)
	uint8                                        bForcePreventGrinding : 1;                         // Mask: 0x2, PropSize: 0x10x67(0x1)(None)
	uint8                                        bDeprecateBlueprint : 1;                           // Mask: 0x4, PropSize: 0x10x67(0x1)(None)
	uint8                                        bPreventDinoAutoConsume : 1;                       // Mask: 0x8, PropSize: 0x10x67(0x1)(None)
	uint8                                        bIsDinoAutoHealingItem : 1;                        // Mask: 0x10, PropSize: 0x10x67(0x1)(None)
	uint8                                        bBPAllowRemoteAddToInventory : 1;                  // Mask: 0x20, PropSize: 0x10x67(0x1)(None)
	uint8                                        bBPAllowRemoteRemoveFromInventory : 1;             // Mask: 0x40, PropSize: 0x10x67(0x1)(None)
	uint8                                        bEquipmentHatHideItemHeadHair : 1;                 // Mask: 0x80, PropSize: 0x10x67(0x1)(None)
	uint8                                        bEquipmentHatHideItemFacialHair : 1;               // Mask: 0x1, PropSize: 0x10x68(0x1)(None)
	uint8                                        bEquipmentForceHairHiding : 1;                     // Mask: 0x2, PropSize: 0x10x68(0x1)(None)
	uint8                                        bAllowRemoveFromSteamInventory : 1;                // Mask: 0x4, PropSize: 0x10x68(0x1)(None)
	uint8                                        bBPInventoryNotifyCraftingFinished : 1;            // Mask: 0x8, PropSize: 0x10x68(0x1)(None)
	uint8                                        bCheckBPAllowCrafting : 1;                         // Mask: 0x10, PropSize: 0x10x68(0x1)(None)
	uint8                                        bUseBPAllowAddToInventory : 1;                     // Mask: 0x20, PropSize: 0x10x68(0x1)(None)
	uint8                                        bPreventItemBlueprint : 1;                         // Mask: 0x40, PropSize: 0x10x68(0x1)(None)
	uint8                                        bPreventUseByDinos : 1;                            // Mask: 0x80, PropSize: 0x10x68(0x1)(None)
	uint8                                        bPreventUseByHumans : 1;                           // Mask: 0x1, PropSize: 0x10x69(0x1)(None)
	uint8                                        bBPCanUse : 1;                                     // Mask: 0x2, PropSize: 0x10x69(0x1)(None)
	uint8                                        bAllowOverrideItemAutoDecreaseDurability : 1;      // Mask: 0x4, PropSize: 0x10x69(0x1)(None)
	uint8                                        bCopyItemDurabilityFromCraftingResource : 1;       // Mask: 0x8, PropSize: 0x10x69(0x1)(None)
	uint8                                        bIsInitialItem : 1;                                // Mask: 0x10, PropSize: 0x10x69(0x1)(None)
	uint8                                        bPickupEggForceAggro : 1;                          // Mask: 0x20, PropSize: 0x10x69(0x1)(None)
	uint8                                        bClearSkinOnInventoryRemoval : 1;                  // Mask: 0x40, PropSize: 0x10x69(0x1)(None)
	uint8                                        bUseBPCustomAutoDecreaseDurabilityPerInterval : 1; // Mask: 0x80, PropSize: 0x10x69(0x1)(None)
	uint8                                        bUseBPCustomInventoryWidgetText : 1;               // Mask: 0x1, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPCustomInventoryWidgetTextColor : 1;          // Mask: 0x2, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPCustomInventoryWidgetTextForBlueprint : 1;   // Mask: 0x4, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseSkinnedBPCustomInventoryWidgetText : 1;        // Mask: 0x8, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPCustomDurabilityText : 1;                    // Mask: 0x10, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPCustomDurabilityTextColor : 1;               // Mask: 0x20, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPInitFromItemNetInfo : 1;                     // Mask: 0x40, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPInitializeItem : 1;                          // Mask: 0x80, PropSize: 0x10x6A(0x1)(None)
	uint8                                        bUseBPGetItemNetInfo : 1;                          // Mask: 0x1, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bItemSkinKeepOriginalItemName : 1;                 // Mask: 0x2, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bPreventUploadingWeaponClipAmmo : 1;               // Mask: 0x4, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bPreventNativeItemBroken : 1;                      // Mask: 0x8, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bResourcePreventGivingFromDemolition : 1;          // Mask: 0x10, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bNameForceNoStatQualityRank : 1;                   // Mask: 0x20, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bAlwaysLearnedEngram : 1;                          // Mask: 0x40, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bIgnoreMinimumUseIntervalForDinoAutoEatingFood : 1; // Mask: 0x80, PropSize: 0x10x6B(0x1)(None)
	uint8                                        bUnappliedItemSkinIgnoreItemAttachments : 1;       // Mask: 0x1, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bHideMoreOptionsIfNonRemovable : 1;                // Mask: 0x2, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUseBPGetItemDescription : 1;                      // Mask: 0x4, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUseBPCrafted : 1;                                 // Mask: 0x8, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUseBPGetItemName : 1;                             // Mask: 0x10, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bPreventUseAtTameLimit : 1;                        // Mask: 0x20, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bDivideTimeToCraftByGlobalCropGrowthSpeed : 1;     // Mask: 0x40, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bPreventCheatGive : 1;                             // Mask: 0x80, PropSize: 0x10x6C(0x1)(None)
	uint8                                        bUsingRequiresStandingOnSolidGround : 1;           // Mask: 0x1, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPAddedAttachments : 1;                        // Mask: 0x2, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPConsumeProjectileImpact : 1;                 // Mask: 0x4, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPOverrideProjectileType : 1;                  // Mask: 0x8, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPOnUpdatedItemContextMenu : 1;                // Mask: 0x10, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUsableWithTekGrenadeLauncher : 1;                 // Mask: 0x20, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPNotifyDropped : 1;                           // Mask: 0x40, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bThrowUsesSecondaryActionDrop : 1;                 // Mask: 0x80, PropSize: 0x10x6D(0x1)(None)
	uint8                                        bUseBPGetItemIcon : 1;                             // Mask: 0x1, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bUseSlottedTick : 1;                               // Mask: 0x2, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bUseBPDrawItemIcon : 1;                            // Mask: 0x4, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bUseBPForceAllowRemoteAddToInventory : 1;          // Mask: 0x8, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bSkinAddWeightToSkinnedItem : 1;                   // Mask: 0x10, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bUseBPIsValidForCrafting : 1;                      // Mask: 0x20, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bUseBPOverrideCraftingConsumption : 1;             // Mask: 0x40, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bMergeCustomDataFromCraftingResources : 1;         // Mask: 0x80, PropSize: 0x10x6E(0x1)(None)
	uint8                                        bIgnoreDrawingItemButtonIcon : 1;                  // Mask: 0x1, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bCensoredItemSkin : 1;                             // Mask: 0x2, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bUseBPGetItemDurabilityPercentage : 1;             // Mask: 0x4, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bUseBPEquippedItemOnXPEarning : 1;                 // Mask: 0x8, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bAlwaysTriggerTributeDownloaded : 1;               // Mask: 0x10, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bDeferWeaponBeginPlayToAssociatedItemSetTime : 1;  // Mask: 0x20, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bPreventRemovingClipAmmo : 1;                      // Mask: 0x40, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bCustomBrokenOverlayIcon : 1;                      // Mask: 0x80, PropSize: 0x10x6F(0x1)(None)
	uint8                                        bUseBPGetMaxAmmo : 1;                              // Mask: 0x1, PropSize: 0x10x70(0x1)(None)
	uint8                                        bUseBPNotifyItemRefreshed : 1;                     // Mask: 0x2, PropSize: 0x10x70(0x1)(None)
	uint8                                        bForceNoLearnedEngramRequirement : 1;              // Mask: 0x4, PropSize: 0x10x70(0x1)(None)
	uint8                                        bAllowUseIgnoreMovementMode : 1;                   // Mask: 0x8, PropSize: 0x10x70(0x1)(None)
	uint8                                        BitPad_312 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3956[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class USkeletalMesh>          CostumeDinoSaddleOverrideMesh;                     // 0x78(0x30)(ZeroConstructor)
	TSoftObjectPtr<class USkeletalMesh>          CostumeDinoSaddleOverrideTorchMesh;                // 0xA8(0x30)(ZeroConstructor)
	float                                        DinoAutoHealingThresholdPercent;                   // 0xD8(0x4)(None)
	float                                        DinoAutoHealingUseTimeInterval;                    // 0xDC(0x4)(None)
	int32                                        ArkTributeVersion;                                 // 0xE0(0x4)(None)
	uint8                                        Pad_3957[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class AActor>>          EquipRequiresExplicitOwnerClasses;                 // 0xE8(0x10)(ZeroConstructor)
	TArray<class FName>                          EquipRequiresExplicitOwnerTags;                    // 0xF8(0x10)(None)
	TSoftClassPtr<class APrimalBuff>             BuffToGiveOwnerWhenEquipped;                       // 0x108(0x30)(ZeroConstructor)
	class FString                                BuffToGiveOwnerWhenEquipped_BlueprintPath;         // 0x138(0x10)(None)
	uint8                                        Pad_3958[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ExpirationTimeUTC;                                 // 0x14C(0x4)(None)
	int32                                        BlueprintAllowMaxCraftings;                        // 0x150(0x4)(None)
	uint8                                        Pad_3959[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                AbstractItemCraftingDescription;                   // 0x158(0x10)(None)
	TArray<class UClass*>                        ItemSkinUseOnItemClasses;                          // 0x168(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AllowClassesToBeUsedAsParentSkin;                  // 0x178(0x10)(ZeroConstructor)
	TArray<class UClass*>                        ItemSkinPreventOnItemClasses;                      // 0x188(0x10)(ZeroConstructor)
	class USoundBase*                            ItemBrokenSound;                                   // 0x198(0x8)(ZeroConstructor)
	class USoundCue*                             UseItemSound;                                      // 0x1A0(0x8)(ZeroConstructor)
	class USoundBase*                            EquipSound;                                        // 0x1A8(0x8)(ZeroConstructor)
	class USoundBase*                            UnEquipSound;                                      // 0x1B0(0x8)(ZeroConstructor)
	class USoundBase*                            UsedOnOtherItemSound;                              // 0x1B8(0x8)(ZeroConstructor)
	class USoundBase*                            RemovedFromOtherItemSound;                         // 0x1C0(0x8)(ZeroConstructor)
	float                                        RandomChanceToBeBlueprint;                         // 0x1C8(0x4)(None)
	uint8                                        Pad_395A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FActorClassAttachmentInfo>     ActorClassAttachmentInfos;                         // 0x1D0(0x10)(ZeroConstructor)
	uint8                                        Pad_395B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemAttachmentInfo>           ItemSkinAddItemAttachments;                        // 0x1F8(0x10)(ZeroConstructor)
	enum class EPrimalItemType                   MyItemType;                                        // 0x208(0x1)(None)
	enum class EPrimalConsumableType             MyConsumableType;                                  // 0x209(0x1)(None)
	enum class EPrimalEquipmentType              MyEquipmentType;                                   // 0x20A(0x1)(None)
	uint8                                        Pad_395C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ExtraItemCategoryFlags;                            // 0x20C(0x4)(None)
	float                                        ItemIconScale;                                     // 0x210(0x4)(None)
	uint8                                        Pad_395D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BlockingShieldFPVTranslation;                      // 0x218(0x18)(None)
	struct FRotator                              BlockingShieldFPVRotation;                         // 0x230(0x18)(None)
	float                                        ShieldBlockDamagePercentage;                       // 0x248(0x4)(None)
	float                                        ShieldDamageToDurabilityRatio;                     // 0x24C(0x4)(None)
	class UAnimMontage*                          PlayAnimationOnUse;                                // 0x250(0x8)(ZeroConstructor)
	bool                                         bHideDuringEquipAnimation;                         // 0x258(0x1)(None)
	uint8                                        Pad_395E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          ShowAnimationMale;                                 // 0x260(0x8)(ZeroConstructor)
	class UAnimMontage*                          ShowAnimationFemale;                               // 0x268(0x8)(ZeroConstructor)
	class UAnimMontage*                          HideAnimationMale;                                 // 0x270(0x8)(ZeroConstructor)
	class UAnimMontage*                          HideAnimationFemale;                               // 0x278(0x8)(ZeroConstructor)
	int32                                        CraftingMinLevelRequirement;                       // 0x280(0x4)(None)
	float                                        CraftingCooldownInterval;                          // 0x284(0x4)(None)
	TSoftClassPtr<class AActor>                  CraftingActorToSpawn;                              // 0x288(0x30)(ZeroConstructor)
	class UTexture2D*                            BlueprintBackgroundOverrideTexture;                // 0x2B8(0x8)(ZeroConstructor)
	class FString                                CraftItemButtonStringOverride;                     // 0x2C0(0x10)(None)
	TSoftClassPtr<class AActor>                  UseSpawnActorClass;                                // 0x2D0(0x30)(ZeroConstructor)
	struct FVector                               UseSpawnActorLocOffset;                            // 0x300(0x18)(None)
	int32                                        SlotIndex;                                         // 0x318(0x4)(None)
	struct FItemNetID                            ItemID;                                            // 0x31C(0x8)(None)
	int32                                        ItemCustomData;                                    // 0x324(0x4)(None)
	class UClass*                                ItemCustomClass;                                   // 0x328(0x8)(ZeroConstructor)
	int32                                        ItemSkinTemplateIndex;                             // 0x330(0x4)(None)
	uint8                                        Pad_395F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ItemSkinTemplate;                                  // 0x338(0x8)(ZeroConstructor)
	float                                        ItemRating;                                        // 0x340(0x4)(None)
	uint16                                       CraftQueue;                                        // 0x344(0x2)(None)
	uint8                                        Pad_3960[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CraftingSkill;                                     // 0x348(0x4)(None)
	uint8                                        Pad_3961[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CustomItemName;                                    // 0x350(0x10)(None)
	class FString                                CustomItemDescription;                             // 0x360(0x10)(None)
	TArray<struct FColor>                        CustomColors;                                      // 0x370(0x10)(None)
	TArray<struct FCraftingResourceRequirement>  CustomResourceRequirements;                        // 0x380(0x10)(ZeroConstructor)
	double                                       NextCraftCompletionTime;                           // 0x390(0x8)(None)
	TWeakObjectPtr<class UPrimalInventoryComponent> OwnerInventory;                                    // 0x398(0x8)(ZeroConstructor)
	uint8                                        ItemQualityIndex;                                  // 0x3A0(0x1)(None)
	uint8                                        Pad_3962[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SupportDragOntoItemClass;                          // 0x3A8(0x8)(ZeroConstructor)
	TArray<class UClass*>                        SupportDragOntoItemClasses;                        // 0x3B0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class AShooterWeapon>>  SkinWeaponTemplates;                               // 0x3C0(0x10)(ZeroConstructor)
	TArray<class UClass*>                        SupportAmmoItemForWeaponSkin;                      // 0x3D0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class AShooterWeapon>>  SkinWeaponTemplatesForAmmo;                        // 0x3E0(0x10)(ZeroConstructor)
	TSoftClassPtr<class AShooterWeapon>          AmmoSupportDragOntoWeaponItemWeaponTemplate;       // 0x3F0(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class AShooterWeapon>>  AmmoSupportDragOntoWeaponItemWeaponTemplates;      // 0x420(0x10)(ZeroConstructor)
	TArray<struct FUseItemAddCharacterStatusValue> UseItemAddCharacterStatusValues;                   // 0x430(0x10)(ZeroConstructor)
	float                                        Ingredient_WeightIncreasePerQuantity;              // 0x440(0x4)(None)
	float                                        Ingredient_FoodIncreasePerQuantity;                // 0x444(0x4)(None)
	float                                        Ingredient_HealthIncreasePerQuantity;              // 0x448(0x4)(None)
	float                                        Ingredient_WaterIncreasePerQuantity;               // 0x44C(0x4)(None)
	float                                        Ingredient_StaminaIncreasePerQuantity;             // 0x450(0x4)(None)
	uint8                                        bPreventOnFullEquippedSuitHUD : 1;                 // Mask: 0x1, PropSize: 0x10x454(0x1)(None)
	uint8                                        BitPad_313 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3963[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DescriptiveNameBase;                               // 0x458(0x10)(None)
	class FString                                ItemDescription;                                   // 0x468(0x10)(None)
	class FString                                DurabilityStringShort;                             // 0x478(0x10)(None)
	class FString                                DurabilityString;                                  // 0x488(0x10)(None)
	class FString                                CustomRepairText;                                  // 0x498(0x10)(None)
	float                                        DroppedItemLifeSpanOverride;                       // 0x4A8(0x4)(None)
	uint8                                        Pad_3964[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DroppedItemCenterLocationOffsetOverride;           // 0x4B0(0x18)(None)
	TSoftObjectPtr<class UStaticMesh>            DroppedMeshOverride;                               // 0x4C8(0x30)(ZeroConstructor)
	class UMaterialInterface*                    DroppedMeshMaterialOverride;                       // 0x4F8(0x8)(ZeroConstructor)
	struct FVector                               DroppedMeshOverrideScale3D;                        // 0x500(0x18)(None)
	class UClass*                                SpoilingItem;                                      // 0x518(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class AActor>>          UseRequiresOwnerActorClasses;                      // 0x520(0x10)(ZeroConstructor)
	class UClass*                                PreservingItemClass;                               // 0x530(0x8)(ZeroConstructor)
	float                                        PreservingItemSpoilingTimeMultiplier;              // 0x538(0x4)(None)
	float                                        SpoilingTime;                                      // 0x53C(0x4)(None)
	int32                                        CraftingConsumesDurability;                        // 0x540(0x4)(None)
	float                                        RepairResourceRequirementMultiplier;               // 0x544(0x4)(None)
	float                                        BaseItemWeight;                                    // 0x548(0x4)(None)
	float                                        DurabilityIncreaseMultiplier;                      // 0x54C(0x4)(None)
	float                                        NewItemDurabilityOverride;                         // 0x550(0x4)(None)
	float                                        DurabilityDecreaseMultiplier;                      // 0x554(0x4)(None)
	float                                        UseDecreaseDurability;                             // 0x558(0x4)(None)
	float                                        AutoDurabilityDecreaseInterval;                    // 0x55C(0x4)(None)
	float                                        AutoDecreaseMinDurability;                         // 0x560(0x4)(None)
	float                                        AutoDecreaseDurabilityAmountPerInterval;           // 0x564(0x4)(None)
	float                                        UseDecreaseDurabilityMin;                          // 0x568(0x4)(None)
	float                                        UseMinDurabilityRequirement;                       // 0x56C(0x4)(None)
	float                                        ResourceRarity;                                    // 0x570(0x4)(None)
	float                                        BlueprintTimeToCraft;                              // 0x574(0x4)(None)
	float                                        MinBlueprintTimeToCraft;                           // 0x578(0x4)(None)
	float                                        BlueprintWeight;                                   // 0x57C(0x4)(None)
	float                                        MinimumUseInterval;                                // 0x580(0x4)(None)
	float                                        TimeForFullRepair;                                 // 0x584(0x4)(None)
	float                                        BaseCraftingXP;                                    // 0x588(0x4)(None)
	float                                        BaseRepairingXP;                                   // 0x58C(0x4)(None)
	TArray<struct FCraftingResourceRequirement>  BaseCraftingResourceRequirements;                  // 0x590(0x10)(ZeroConstructor)
	TArray<struct FCraftingResourceRequirement>  OverrideRepairingRequirements;                     // 0x5A0(0x10)(ZeroConstructor)
	struct FItemStatInfo                         ItemStatInfos[0x8];                                // 0x5B0(0x120)(None)
	uint16                                       ItemStatValues[0x8];                               // 0x6D0(0x10)(None)
	int32                                        WeaponClipAmmo;                                    // 0x6E0(0x4)(None)
	float                                        WeaponFrequency;                                   // 0x6E4(0x4)(None)
	double                                       LastTimeToShowInfo;                                // 0x6E8(0x8)(None)
	uint8                                        ItemVersion;                                       // 0x6F0(0x1)(None)
	uint8                                        Pad_3965[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ItemDurability;                                    // 0x6F4(0x4)(None)
	float                                        MinItemDurability;                                 // 0x6F8(0x4)(None)
	float                                        SavedDurability;                                   // 0x6FC(0x4)(None)
	TSoftClassPtr<class AShooterWeapon>          WeaponTemplate;                                    // 0x700(0x30)(ZeroConstructor)
	class UTexture2D*                            BrokenIcon;                                        // 0x730(0x8)(ZeroConstructor)
	class UTexture2D*                            CustomBrokenOverlayIcon;                           // 0x738(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemIcon;                                          // 0x740(0x8)(ZeroConstructor)
	class UTexture2D*                            AlternateItemIconBelowDurability;                  // 0x748(0x8)(ZeroConstructor)
	float                                        AlternateItemIconBelowDurabilityValue;             // 0x750(0x4)(None)
	float                                        DurabilityNotifyThresholdValue;                    // 0x754(0x4)(None)
	class UMaterialInterface*                    ItemIconMaterialParent;                            // 0x758(0x8)(ZeroConstructor)
	int16                                        ItemColorID[0x6];                                  // 0x760(0xC)(None)
	int16                                        PreSkinItemColorID[0x6];                           // 0x76C(0xC)(None)
	uint8                                        bUseItemColor[0x6];                                // 0x778(0x6)(None)
	uint8                                        Pad_3966[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                RandomColorSet;                                    // 0x780(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ItemIconMaterial;                                  // 0x788(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              HUDIconMaterial;                                   // 0x790(0x8)(ZeroConstructor)
	int32                                        ItemQuantity;                                      // 0x798(0x4)(None)
	int32                                        MaxItemQuantity;                                   // 0x79C(0x4)(None)
	TArray<enum class EPrimalEquipmentType>      EquippedHideOtherEquipmentAttachTypes;             // 0x7A0(0x10)(None)
	TArray<uint64>                               SteamItemUserIDs;                                  // 0x7B0(0x10)(None)
	TSoftClassPtr<class APrimalStructure>        StructureToBuild;                                  // 0x7C0(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> StructuresToBuild;                                 // 0x7F0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> CachedStructuresToBuild;                           // 0x800(0x10)(ZeroConstructor)
	int32                                        StructureToBuildIndex;                             // 0x810(0x4)(None)
	uint8                                        Pad_3967[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                GiveItemWhenUsed;                                  // 0x818(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalInventoryComponent>> CraftingRequiresInventoryComponent;                // 0x820(0x10)(ZeroConstructor)
	TSoftClassPtr<class ADroppedItem>            DroppedItemTemplateOverride;                       // 0x830(0x30)(ZeroConstructor)
	TSoftClassPtr<class ADroppedItem>            DroppedItemTemplateForSecondryAction;              // 0x860(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             BuffToGiveOwnerCharacter;                          // 0x890(0x30)(ZeroConstructor)
	struct FRotator                              PreviewCameraRotation;                             // 0x8C0(0x18)(None)
	struct FVector                               PreviewCameraPivotOffset;                          // 0x8D8(0x18)(None)
	float                                        PreviewCameraDistanceScaleFactor;                  // 0x8F0(0x4)(None)
	float                                        PreviewCameraDefaultZoomMultiplier;                // 0x8F4(0x4)(None)
	float                                        PreviewCameraMaxZoomMultiplier;                    // 0x8F8(0x4)(None)
	bool                                         bItemIsUsable;                                     // 0x8FC(0x1)(None)
	uint8                                        Pad_3968[0x43];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       CreationTime;                                      // 0x940(0x8)(None)
	double                                       LastAutoDurabilityDecreaseTime;                    // 0x948(0x8)(None)
	double                                       LastUseTime;                                       // 0x950(0x8)(None)
	uint8                                        Pad_3969[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxCustomItemDescriptionLength;                    // 0x960(0x4)(None)
	int32                                        TempSlotIndex;                                     // 0x964(0x4)(None)
	int32                                        LastSlotIndex;                                     // 0x968(0x4)(None)
	TWeakObjectPtr<class AShooterWeapon>         AssociatedWeapon;                                  // 0x96C(0x8)(ZeroConstructor)
	uint8                                        Pad_396A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalItem*                           MyItemSkin;                                        // 0x978(0x8)(ZeroConstructor)
	class UPrimalItem*                           SkinnedOntoItem;                                   // 0x980(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     WheelItemsAmmo;                                    // 0x988(0x10)(ZeroConstructor)
	TWeakObjectPtr<class AShooterCharacter>      LastOwnerPlayer;                                   // 0x998(0x8)(ZeroConstructor)
	TArray<struct FCropItemPhaseData>            CropPhasesData;                                    // 0x9A0(0x10)(ZeroConstructor)
	float                                        CropGrowingFertilizerConsumptionRate;              // 0x9B0(0x4)(None)
	float                                        CropMaxFruitFertilizerConsumptionRate;             // 0x9B4(0x4)(None)
	float                                        CropGrowingWaterConsumptionRate;                   // 0x9B8(0x4)(None)
	float                                        CropMaxFruitWaterConsumptionRate;                  // 0x9BC(0x4)(None)
	int32                                        CropMaxFruits;                                     // 0x9C0(0x4)(None)
	float                                        CropNoFertilizerOrWaterCacheReductionRate;         // 0x9C4(0x4)(None)
	float                                        FertilizerEffectivenessMultiplier;                 // 0x9C8(0x4)(None)
	float                                        EggAlertDinosAggroAmount;                          // 0x9CC(0x4)(None)
	float                                        EggAlertDinosAggroRadius;                          // 0x9D0(0x4)(None)
	uint8                                        Pad_396B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          EggAlertDinosAggroTags;                            // 0x9D8(0x10)(None)
	float                                        EggAlertDinosForcedAggroTime;                      // 0x9E8(0x4)(None)
	float                                        EggMaximumDistanceFromOriginalDropToAlertDinos;    // 0x9EC(0x4)(None)
	class UClass*                                BrokenGiveItemClass;                               // 0x9F0(0x8)(ZeroConstructor)
	float                                        ClearColorDurabilityThreshold;                     // 0x9F8(0x4)(None)
	uint8                                        Pad_396C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ItemClassToUseAsInitialCustomData;                 // 0xA00(0x8)(ZeroConstructor)
	struct FVector                               OriginalItemDropLocation;                          // 0xA08(0x18)(None)
	struct FLinearColor                          DurabilityBarColorForeground;                      // 0xA20(0x10)(None)
	struct FLinearColor                          DurabilityBarColorBackground;                      // 0xA30(0x10)(None)
	class UClass*                                OverrideCooldownTimeItemClass;                     // 0xA40(0x8)(ZeroConstructor)
	float                                        MinDurabilityForCraftingResource;                  // 0xA48(0x4)(None)
	float                                        ResourceRequirementIncreaseRatingPower;            // 0xA4C(0x4)(None)
	float                                        ResourceRequirementRatingScale;                    // 0xA50(0x4)(None)
	float                                        ResourceRequirementRatingIncreasePercentage;       // 0xA54(0x4)(None)
	double                                       NextSpoilingTime;                                  // 0xA58(0x8)(None)
	double                                       LastSpoilingTime;                                  // 0xA60(0x8)(None)
	TArray<class FString>                        DefaultFolderPaths;                                // 0xA68(0x10)(None)
	class FString                                ItemRatingString;                                  // 0xA78(0x10)(None)
	class FName                                  DefaultWeaponMeshName;                             // 0xA88(0x8)(None)
	uint8                                        Pad_396D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                EngramRequirementItemClassOverride;                // 0xA98(0x8)(ZeroConstructor)
	uint8                                        Pad_396E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            ExtraThrowItemSound;                               // 0xAB0(0x8)(ZeroConstructor)
	bool                                         bPreventNotificationItemCombatMode;                // 0xAB8(0x1)(None)
	bool                                         bForceNotificationItemCombatMode;                  // 0xAB9(0x1)(None)
	uint8                                        Pad_396F[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnOnWaterEncroachmentBoxExtent;                 // 0xAC0(0x18)(None)
	TArray<TSoftClassPtr<class AActor>>          OnlyUsableOnSpecificClasses;                       // 0xAD8(0x10)(ZeroConstructor)
	TArray<struct FSaddlePassengerSeatDefinition> SaddlePassengerSeats;                              // 0xAE8(0x10)(ZeroConstructor)
	class FName                                  SaddleOverrideRiderSocketName;                     // 0xAF8(0x8)(None)
	TSoftClassPtr<class APrimalDinoCharacter>    EggDinoClassToSpawn;                               // 0xB00(0x30)(ZeroConstructor)
	uint8                                        EggNumberOfLevelUpPointsApplied[0xC];              // 0xB30(0xC)(None)
	uint8                                        EggNumberMutationsApplied[0xC];                    // 0xB3C(0xC)(None)
	float                                        EggTamedIneffectivenessModifier;                   // 0xB48(0x4)(None)
	uint8                                        EggColorSetIndices[0x6];                           // 0xB4C(0x6)(None)
	uint8                                        Pad_3970[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EggGenderOverride;                                 // 0xB54(0x4)(None)
	float                                        EggLoseDurabilityPerSecond;                        // 0xB58(0x4)(None)
	float                                        ExtraEggLoseDurabilityPerSecondMultiplier;         // 0xB5C(0x4)(None)
	float                                        EggMinTemperature;                                 // 0xB60(0x4)(None)
	float                                        EggMaxTemperature;                                 // 0xB64(0x4)(None)
	float                                        EggDroppedInvalidTempLoseItemRatingSpeed;          // 0xB68(0x4)(None)
	uint8                                        Pad_3971[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            ShieldHitSound;                                    // 0xB70(0x8)(ZeroConstructor)
	float                                        RecipeCraftingSkillScale;                          // 0xB78(0x4)(None)
	int32                                        CustomItemID;                                      // 0xB7C(0x4)(None)
	float                                        AddDinoTargetingRange;                             // 0xB80(0x4)(None)
	float                                        DamageTorpidityArmorRating;                        // 0xB84(0x4)(None)
	float                                        IndirectTorpidityArmorRating;                      // 0xB88(0x4)(None)
	uint8                                        Pad_3972[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalEmitterSpawnable> UseParticleEffect;                                 // 0xB90(0x30)(ZeroConstructor)
	class FName                                  UseParticleEffectSocketName;                       // 0xBC0(0x8)(None)
	float                                        UseGiveDinoTameAffinityPercent;                    // 0xBC8(0x4)(None)
	uint8                                        Pad_3973[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        CraftingAdditionalItemsToGive;                     // 0xBD0(0x10)(ZeroConstructor)
	int32                                        LastValidItemVersion;                              // 0xBE0(0x4)(None)
	float                                        GlobalTameAffinityMultiplier;                      // 0xBE4(0x4)(None)
	int32                                        CraftingGiveItemCount;                             // 0xBE8(0x4)(None)
	int32                                        CraftingGivesItemQuantityOverride;                 // 0xBEC(0x4)(None)
	class USoundBase*                            UseItemOnItemSound;                                // 0xBF0(0x8)(ZeroConstructor)
	class FName                                  UseUnlocksEmoteName;                               // 0xBF8(0x8)(None)
	uint8                                        Pad_3974[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoAncestorsEntry>           EggDinoAncestors;                                  // 0xC08(0x10)(None)
	TArray<struct FDinoAncestorsEntry>           EggDinoAncestorsMale;                              // 0xC18(0x10)(None)
	int32                                        EggRandomMutationsFemale;                          // 0xC28(0x4)(None)
	int32                                        EggRandomMutationsMale;                            // 0xC2C(0x4)(None)
	TArray<class UClass*>                        EquippingRequiresEngrams;                          // 0xC30(0x10)(ZeroConstructor)
	TArray<struct FCustomItemData>               CustomItemDatas;                                   // 0xC40(0x10)(ZeroConstructor)
	class FString                                OverrideUseString;                                 // 0xC50(0x10)(None)
	class UClass*                                SendToClientClassOverride;                         // 0xC60(0x8)(ZeroConstructor)
	class FString                                CrafterCharacterName;                              // 0xC68(0x10)(None)
	class FString                                CrafterTribeName;                                  // 0xC78(0x10)(None)
	float                                        CraftedSkillBonus;                                 // 0xC88(0x4)(None)
	float                                        CraftingSkillQualityMultiplierMin;                 // 0xC8C(0x4)(None)
	float                                        CraftingSkillQualityMultiplierMax;                 // 0xC90(0x4)(None)
	float                                        SinglePlayerCraftingSpeedMultiplier;               // 0xC94(0x4)(None)
	int32                                        NoLevelEngramSortingPriority;                      // 0xC98(0x4)(None)
	int32                                        CustomFlags;                                       // 0xC9C(0x4)(None)
	class FName                                  CustomTag;                                         // 0xCA0(0x8)(None)
	float                                        EquippedReduceDurabilityInterval;                  // 0xCA8(0x4)(None)
	uint8                                        Pad_3975[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastEquippedReduceDurabilityTime;                  // 0xCB0(0x8)(None)
	float                                        EquippedReduceDurabilityPerInterval;               // 0xCB8(0x4)(None)
	float                                        ItemStatClampsMultiplier;                          // 0xCBC(0x4)(None)
	float                                        MaxDurabiltiyOverride;                             // 0xCC0(0x4)(None)
	uint8                                        Pad_3976[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NextRepairPercentage;                              // 0xCD8(0x4)(None)
	uint8                                        Pad_3977[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           NetDroppedMeshOverride;                            // 0xCE0(0x8)(ZeroConstructor)
	class UMaterialInterface*                    NetDroppedMeshMaterialOverride;                    // 0xCE8(0x8)(ZeroConstructor)
	struct FVector                               NetDroppedMeshOverrideScale3D;                     // 0xCF0(0x18)(None)
	uint8                                        bNonBlockingShield : 1;                            // Mask: 0x1, PropSize: 0x10xD08(0x1)(None)
	uint8                                        bNetInfoFromClient : 1;                            // Mask: 0x2, PropSize: 0x10xD08(0x1)(None)
	uint8                                        BitPad_314 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDisableItemUITooltip : 1;                         // Mask: 0x8, PropSize: 0x10xD08(0x1)(None)
	uint8                                        bPreventDepositDropping : 1;                       // Mask: 0x10, PropSize: 0x10xD08(0x1)(None)
	uint8                                        bForceAllowSkinColorization : 1;                   // Mask: 0x20, PropSize: 0x10xD08(0x1)(None)
	uint8                                        bEquipAddTekExtendedInfo : 1;                      // Mask: 0x40, PropSize: 0x10xD08(0x1)(None)
	uint8                                        bAllowCraftingWithStarterAmmo : 1;                 // Mask: 0x80, PropSize: 0x10xD08(0x1)(None)
	uint8                                        Pad_3978[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           WidgetCustomBrokenOverlayStyleBrush;               // 0xD10(0xD0)(ZeroConstructor)
	struct FColor                                CustomBrokenBorderColor;                           // 0xDE0(0x4)(None)
	uint8                                        Pad_3979[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class USkeletalMesh>          DyePreviewMeshOverrideSK;                          // 0xDE8(0x30)(ZeroConstructor)
	TSoftObjectPtr<class UStaticMesh>            DyePreviewMeshOverrideSM;                          // 0xE18(0x30)(ZeroConstructor)
	class UTexture2D*                            AccessoryActivatedIconOverride;                    // 0xE48(0x8)(ZeroConstructor)
	class UClass*                                CustomItemTooltipOverride;                         // 0xE50(0x8)(None)
	bool                                         bUseBlueprintAnimNotifications;                    // 0xE58(0x1)(None)
	bool                                         bUseBPPreventUpload;                               // 0xE59(0x1)(None)
	uint8                                        Pad_397A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  EquippingCosmeticRequiresUnlockedEmoteName;        // 0xE5C(0x8)(None)
	float                                        CustomInventoryWidgetTextVerticalOffset;           // 0xE64(0x4)(None)
	bool                                         bUseCustomContextMenuOptions;                      // 0xE68(0x1)(None)
	uint8                                        Pad_397B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TopLevelCustomContextMenuOptions;                  // 0xE70(0x10)(None)
	TArray<struct FCustomContextSubmenu>         CustomContextSubMenus;                             // 0xE80(0x10)(None)
	TArray<struct FCustomContextMenuData>        CustomContextOptionData;                           // 0xE90(0x10)(None)
	bool                                         bPreventModifyArmorValue;                          // 0xEA0(0x1)(None)
	bool                                         bUseBPOnLocalUse;                                  // 0xEA1(0x1)(None)
	uint8                                        Pad_397C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       AssociatedDinoID1;                                 // 0xEA4(0x4)(None)
	uint32                                       AssociatedDinoID2;                                 // 0xEA8(0x4)(None)
	uint8                                        bUseBPOverrideInheritedStatWeight : 1;             // Mask: 0x1, PropSize: 0x10xEAC(0x1)(None)
	uint8                                        bUseSkinDroppedItemTemplateForSecondryAction : 1;  // Mask: 0x2, PropSize: 0x10xEAC(0x1)(None)
	uint8                                        Pad_397D[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalItem* GetDefaultObj();

	void UseItemOntoItem(class UPrimalItem* DestinationItem, int32 AdditionalData, bool ReturnValue);
	void Use(bool bOverridePlayerInput);
	void UpdatedItem(bool ResetUploadTime);
	void UnequipWeapon(bool bDelayedUnequip);
	void StaticGetItemNameAndIcon(class UClass* ItemType, const class FString& OutItemName, class UTexture2D* OutItemIcon, bool bShortName, class AShooterPlayerController* ForPC, bool ReturnValue);
	void StaticGetDinoColorSetIndexForItemColorIDFromDyeList(int32 ID, int32 ReturnValue);
	void StaticGetDinoColorSetIndexForItemColorID(int32 ID, int32 ReturnValue);
	void StaticGetColorForItemColorIDFromDyeList(int32 ID, const struct FLinearColor& ReturnValue);
	void StaticGetColorForItemColorID(int32 ID, const struct FLinearColor& ReturnValue);
	void SlottedTick(float DeltaSeconds);
	void SkinEquippedBlueprintTick(class UPrimalItem* OwnerItem, float DeltaSeconds);
	void SetUnreplicatedEggData(const struct FUnreplicatedEggData& EggData);
	void SetQuantity(int32 NewQuantity, bool ShowHUDNotification);
	void SetItemStatValues(int32 Idx, int32 Val);
	void SetItemStatInfo(int32 Idx, const struct FItemStatInfo& Val);
	void SetItemColors(const TArray<int32>& ColorIDs);
	void SetCustomItemData(const struct FCustomItemData& InData);
	void SetCustomColorParams(class UPrimalItem* ThePrimalItem, class UMaterialInstanceDynamic* TheMIC, const struct FLinearColor& TheColor, int32 TheIndex);
	void SetAssociatedDinoID(class APrimalDinoCharacter* AssociatedDino);
	void ServerUpdatedWeaponClipAmmo();
	void ServerSendItemExecCommandToPlayer(class AShooterPlayerController* ToPC, class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerSendItemExecCommandToEveryone(class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
	void ServerRemoveWeaponAccessoryOnly();
	void ServerRemoveItemSkinOnly();
	void ServerRemoveItemSkin();
	void SelectedCustomContextMenuItem(class FName ContextItem, class AShooterPlayerController* ForPC);
	void RepairItem(bool bIgnoreInventoryRequirement, float UseNextRepairPercentage, float RepairSpeedMultiplier);
	void RemoveWeaponAccessory();
	void RemoveFromSlot(bool bForce, bool bFastInventory);
	void RemovedSkinFromItem(class UPrimalItem* FromOwnerItem, bool bIsFirstTime);
	void RemoveCustomItemData(class FName CustomDataName);
	void RemoveClipAmmo(bool bDontUpdateItem);
	void RefreshAttachments(bool bRefreshDefaultAttachments, bool IsShieldSpecificRefresh, bool bIsFromUpdateItem);
	void RecalcSpoilingTime(double TimeSeconds, float SpoilPercent, class UPrimalInventoryComponent* ForComp);
	void OverrideItemRating(float Rating);
	void OverrideCrouchingSound(class USoundBase* InSound, bool bIsProne, int32 SoundState, class USoundBase* ReturnValue);
	void NotifyEditText(class AShooterPlayerController* PC);
	void MergeCustomItemDatas(const TArray<struct FCustomItemData>& DataSet1, const TArray<struct FCustomItemData>& DataSet2, const TArray<struct FCustomItemData>& ReturnValue);
	void MeetRepairingRequirements(class UPrimalInventoryComponent* CompareInventoryComp, bool bIsForCraftQueueAddition, bool bForceUpdateWirelessResources, bool ReturnValue);
	void MakeRepairingRequirementsString(class UPrimalInventoryComponent* CompareInventoryComp, const TArray<struct FCraftingResourceRequirement>& InRepairingRequirements, const class FString& ReturnValue);
	void LocalUseStartHoldBP(class AShooterPlayerController* ForPC);
	void LocalUseStartHold(class AShooterPlayerController* ForPC);
	void LocalUseItemReleaseBP(class AShooterPlayerController* ForPC);
	void LocalUseItemRelease(class AShooterPlayerController* ForPC);
	void LocalUseAfterHoldBP(class AShooterPlayerController* ForPC);
	void LocalUseAfterHold(class AShooterPlayerController* ForPC);
	void LocalUse(class AShooterPlayerController* ForPC);
	void IsValidForCrafting(bool ReturnValue);
	void IsUsableConsumable(bool ReturnValue);
	void IsOwnerInWater(bool ReturnValue);
	void IsOwnerInNoPainWater(bool ReturnValue);
	void IsCustomContextMenuItemEnabled(class FName ContextItem, bool ReturnValue);
	void IsCooldownReadyForUse(bool ReturnValue);
	void IsBroken(bool ReturnValue);
	void InitNewItem(float ItemQuality, class UPrimalInventoryComponent* ToInventory, float MaxItemDifficultyClamp, float MinRandomQuality);
	void InitializeItem(bool bForceReInit, class UWorld* OptionalInitWorld);
	void IncrementItemQuantity(int32 Amount, bool bRepicateToClient, bool bDontUpdateWeight, bool bIsFromUseConsumption, bool bIsArkTributeItem, bool bIsFromCraftingConsumption, int32 ReturnValue);
	void HasCustomItemData(class FName CustomDataName, bool ReturnValue);
	void HasBuffToGiveOwnerWhenEquipped(bool ReturnValue);
	void HandleShieldDamageBlocking(class AShooterCharacter* ForShooterCharacter, float DamageIn, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, const struct FVector& HitPoint, float ReturnValue);
	void GetWeaponTemplateMeleeDamageType(class UClass* ReturnValue);
	void GetWeaponTemplateMeleeDamageAmount(float ReturnValue);
	void GetWeaponTemplateHarvestDamageType(class UClass* ReturnValue);
	void GetWeaponTemplateHarvestDamageMultiplier(float ReturnValue);
	void GetWeaponTemplateDurabilityToConsumePerMeleeHit(float ReturnValue);
	void GetWeaponClipAmmo(int32 ReturnValue);
	void GetUseItemAddCharacterStatusValue(enum class EPrimalCharacterStatusValue ValueType, float ReturnValue);
	void GetUnreplicatedEggData(const struct FUnreplicatedEggData& EggData);
	void GetSpoilingTime(float ReturnValue);
	void GetRepairingRequirementsString(class UPrimalInventoryComponent* CompareInventoryComp, bool bUseBaseRequirements, float OverrideRepairPercent, class APlayerController* OwningPlayer, const class FString& ReturnValue);
	void GetRemainingCooldownTime(float ReturnValue);
	void GetProjectileType(class UClass* ItemType, class UClass* ReturnValue);
	void GetOwnerPlayer(class AShooterCharacter* ReturnValue);
	void GetOwnerActor(class AActor* ReturnValue);
	void GetMaxItemQuantity(class UObject* WorldContextObject, int32 ReturnValue);
	void GetMaximumAdditionalCrafting(class UPrimalInventoryComponent* ForComp, class AShooterPlayerController* PC, int32 ReturnValue);
	void GetMaxDurability(float ReturnValue);
	void GetItemWeight(bool bJustOneQuantity, bool bForceNotBlueprintWeight, float ReturnValue);
	void GetItemStatValues(int32 Idx, int32 ReturnValue);
	void GetItemStatString(enum class EPrimalItemStat StatType, const class FString& ReturnValue);
	void GetItemStatModifier(enum class EPrimalItemStat StatType, float ReturnValue);
	void GetItemStatInfo(int32 Idx, const struct FItemStatInfo& ReturnValue);
	void GetItemShortName(const class FString& ReturnValue);
	void GetItemNetInfo(bool bIsForSendingToClient, const struct FItemNetInfo& ReturnValue);
	void GetItemDyeColors(const TArray<struct FLinearColor>& ReturnValue);
	void GetItemCustomColor(int32 ColorRegion, const struct FLinearColor& OutColor, bool ReturnValue);
	void GetItemColorIDFromDyeItemIDFromDyeList(int32 DyeItemListIndex, int32 ReturnValue);
	void GetItemColorIDFromDyeItemID(int32 MasterItemListIndex, int32 ReturnValue);
	void GetItemColorID(int32 TheRegion, int32 ReturnValue);
	void GetItemBytes(const TArray<uint8>& Bytes);
	void GetInventoryIconDisplayText(const class FString& ReturnValue);
	void GetInitializeItemOwnerInventory(class UPrimalInventoryComponent* ReturnValue);
	void GetHUDIconMaterial(class UMaterialInterface* ReturnValue);
	void GetEngramRequirementLevel(int32 ReturnValue);
	void GetEggHatchTimeRemaining(class UWorld* TheWorld, float AdditionalMultiplier, float ReturnValue);
	void GetDurabilityPercentage(float ReturnValue);
	void GetCustomItemData(class FName CustomDataName, const struct FCustomItemData& OutData, bool ReturnValue);
	void GetCraftingResourceRequirement(int32 CraftingResourceIndex, int32 ReturnValue);
	void GetCraftingRequirements(const TArray<struct FCraftingResourceRequirement>& CombinedRequirements, float Percent, const TArray<struct FCraftingResourceRequirement>& ReturnValue);
	void GetComponentToAttach(int32 AttachmentIndex, class AActor* UseOtherActor, class UActorComponent* ReturnValue);
	void GetBuffToGiveOwnerWhenEquipped(bool bForceResolveSoftRef, class UClass* ReturnValue);
	void GetAttachedComponentsNum(int32 ReturnValue);
	void GetAttachedComponent(int32 AttachmentIndex, class AActor* UseOtherActor, class UActorComponent* ReturnValue);
	void GetAssociatedDinoID(int32 OutDinoID1, int32 OutDinoID2);
	void GetAllStructuresToBuild(const TArray<TSoftClassPtr<class APrimalStructure>>& ReturnValue);
	void GetActualEquipmentType(bool bGetBaseValue, enum class EPrimalEquipmentType ReturnValue);
	void FinishRepairing();
	void EquippedBlueprintTick(float DeltaSeconds);
	void DoesItemUseColorRegion(int32 RegionIndex, bool ReturnValue);
	void CreateItemFromNetInfo(const struct FItemNetInfo& NewItemInfo, class UPrimalItem* ReturnValue);
	void CreateFromBytes(const TArray<uint8>& Bytes, class UPrimalItem* ReturnValue);
	void Crafted(bool bWasCraftedFromEngram);
	void CraftBlueprint(bool bConsumeResources);
	void ClientUpdatedWeaponClipAmmo();
	void ClearAssociatedDinoID();
	void ClampStats(class UPrimalInventoryComponent* Inventory);
	void CheckForInventoryDupes(bool ReturnValue);
	void CanUseWithItemSource(class UPrimalItem* DestinationItem, bool ReturnValue);
	void CanUseWithItemDestination(class UPrimalItem* SourceItem, bool ReturnValue);
	void CanUse(bool bIgnoreCooldown, bool ReturnValue);
	void CanSpoil(bool ReturnValue);
	void CanShowNotificationItem(bool ReturnValue);
	void CanRepair(bool bIgnoreInventoryRequirement, bool ReturnValue);
	void CanFullyCraft(bool bForceUpdateWirelessResources, bool ReturnValue);
	void CanEquipWeapon(bool ReturnValue);
	void CanDrop(bool ReturnValue);
	void CanCraft(bool ReturnValue);
	void BPUsedOntoItem(class UPrimalItem* DestinationItem, int32 AdditionalData);
	void BPTributeItemUploaded(class UObject* ContextObject);
	void BPTributeItemDownloaded(class UObject* ContextObject);
	void BPSupportUseOntoItem(class UPrimalItem* DestinationItem, bool ReturnValue);
	void BPShouldHideTopLevelCustomContextMenuOption(class FName ContextItem, bool ReturnValue);
	void BPSetWeaponClipAmmo(int32 NewClipAmmo);
	void BPSetupHUDIconMaterial(class UMaterialInstanceDynamic* TheMID);
	void BPServerVerifyStructurePlacementData();
	void BPServerHandleItemNetExecCommand(class AShooterPlayerController* ForPC, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void BPProcessEditText(class AShooterPlayerController* ForPC, const class FString& TextToUse, bool ReturnValue);
	void BPPreventWeaponEquip(bool ReturnValue);
	void BPPreventUseOntoItem(class UPrimalItem* DestinationItem, bool ReturnValue);
	void BPPreventUpload(bool ReturnValue);
	void BPPreventNewColorization(bool ReturnValue);
	void BPPreventEquip(class UPrimalInventoryComponent* ToInventory, bool ReturnValue);
	void BPPreUseItem();
	void BPPreInitializeItem(class UWorld* OptionalInitWorld);
	void BPPostInitializeItem(class UWorld* OptionalInitWorld);
	void BPPostAddBuffToGiveOwnerCharacter(class APrimalCharacter* OwnerCharacter, class APrimalBuff* Buff);
	void BPOverrideProjectileType(class UClass* ReturnValue);
	void BPOverrideInheritedStatWeight(int32 StatType, float Weight);
	void BPOverrideEquippedDurabilityPercentage(float OutDurabilityPercentageValue);
	void BPOverrideCraftingConsumption(int32 AmountToConsume);
	void BPOnUpdatedItemContextMenu();
	void BPOnLocalUse(class AShooterCharacter* ForCharacter);
	void BPOnItemConsumed(class UPrimalInventoryComponent* Inventory, int32 RemainingQuantity);
	void BPNotifyItemRefreshed();
	void BPNotifyDropped(class APrimalCharacter* FromCharacter, bool bWasThrown);
	void BPMatchesItemID(int32 ItemID1, int32 ItemID2, bool ReturnValue);
	void BPMakeItemID(int32 TheItemID1, int32 TheItemID2, const struct FItemNetID& ReturnValue);
	void BPItemBroken();
	void BPItemBelowDurabilityThreshold();
	void BPIsValidForCrafting(bool ReturnValue);
	void BPInitItemColors(const TArray<int32>& ColorIDs);
	void BPInitIconMaterial();
	void BPInitFromItemNetInfo();
	void BPGetSkinnedCustomInventoryWidgetText(const class FString& ReturnValue);
	void BPGetMaxAmmo(int32 ReturnValue);
	void BPGetItemStatRandomValue(float QualityLevel, int32 Idx, int32 ReturnValue);
	void BPGetItemStatModifier(int32 Idx, int32 ItemStatValue, float ReturnValue);
	void BPGetItemNetInfo();
	void BPGetItemName(const class FString& ItemNameIn, class AShooterPlayerController* ForPC, const class FString& ReturnValue);
	void BPGetItemID(int32 ItemID1, int32 ItemID2);
	void BPGetItemIcon(class AShooterPlayerController* ForPC, class UTexture2D* ReturnValue);
	void BPGetItemDurabilityPercentage(float ReturnValue);
	void BPGetItemDescription(const class FString& InDescription, bool bGetLongDescription, class AShooterPlayerController* ForPC, const class FString& ReturnValue);
	void BPGetFuelParticleSystemOverride(class APrimalStructure* ForStructure, class UParticleSystem* ReturnValue);
	void BPGetFuelAudioOverride(class APrimalStructure* ForStructure, class USoundBase* ReturnValue);
	void BPGetCustomInventoryWidgetTextColor(const struct FColor& ReturnValue);
	void BPGetCustomInventoryWidgetText(const class FString& ReturnValue);
	void BPGetCustomIconMaterialParent(class UMaterialInterface* ReturnValue);
	void BPGetCustomDurabilityTextColor(const struct FColor& ReturnValue);
	void BPGetCustomDurabilityText(const class FString& ReturnValue);
	void BPGetCustomAutoDecreaseDurabilityPerInterval(float ReturnValue);
	void BPForceAllowRemoteAddToInventory(class UPrimalInventoryComponent* ToInventory, bool ReturnValue);
	void BPEquippedItemOnXPEarning(class APrimalCharacter* ForChar, float HowMuchXP, enum class EXPType TheXPType);
	void BPDrawItemIcon(class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize, const struct FVector2D& ItemCanvasScale, bool bItemEnabled, const struct FLinearColor& TheTintColor);
	void BPCrafted();
	void BPConsumeProjectileImpact(class AShooterProjectile* TheProjectile, const struct FHitResult& HitResult, bool ReturnValue);
	void BPClientHandleItemNetExecCommand(class FName CommandName, const struct FBPNetExecParams& ExecParams, class AShooterPlayerController* ForPC);
	void BPCanUse(bool bIgnoreCooldown, bool ReturnValue);
	void BPCanAddToInventory(class UPrimalInventoryComponent* ToInventory, bool ReturnValue);
	void BPBreakItemID(const struct FItemNetID& ItemNetID, int32 TheItemID1, int32 TheItemID2);
	void BPAnimNotifyCustomState_End(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void BPAllowRemoteRemoveFromInventory(class UPrimalInventoryComponent* InvComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer, bool ReturnValue);
	void BPAllowRemoteAddToInventory(class UPrimalInventoryComponent* InvComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer, bool ReturnValue);
	void BPAllowCrafting(class AShooterPlayerController* ForPC, const class FString& ReturnValue);
	void BPAddedAttachments();
	void BlueprintUsed();
	void BlueprintUnequipped();
	void BlueprintOwnerPosssessed(class AController* PossessedByController);
	void BlueprintEquipped(bool bIsFromSaveGame);
	void ApplyingSkinOntoItem(class UPrimalItem* ToOwnerItem, bool bIsFirstTime);
	void ApplyColorsToMesh(class UMeshComponent* MComp);
	void ApplyColorsFromStructure(class APrimalStructure* TheStructure);
	void AllowRemoteAddToInventory(class UPrimalInventoryComponent* InvComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer, bool ReturnValue);
	void AllowEquipItem(class UPrimalInventoryComponent* ToInventory, bool ReturnValue);
	void AddToSlot(int32 TheSlotIndex, bool bForce, bool bFastInventory);
	void AddNewItem(class UClass* ItemArchetype, class UPrimalInventoryComponent* GiveToInventory, bool bEquipItem, bool bDontStack, float ItemQuality, bool bForceNoBlueprint, int32 QuantityOverride, bool bForceBlueprint, float MaxItemDifficultyClamp, bool CreateOnClient, class UClass* ApplyItemSkin, float MinRandomQuality, bool ClampStats, bool bIgnoreAbsoluteMaxInventory, bool bSkipDenySpawningInThisMap, class UPrimalItem* ReturnValue);
	void AddItemDurability(float DurabilityToAdd);
};

// 0x220 (0x5D8 - 0x3B8)
// Class ShooterGame.PrimalItemInventoryToolTipWidget
class UPrimalItemInventoryToolTipWidget : public UTooltipSmartLayoutWidget
{
public:
	class FName                                  FnameMainInfo_Switcher;                            // 0x3B8(0x8)(None)
	class FName                                  FnameMainInfo_Full_Icon;                           // 0x3C0(0x8)(None)
	class FName                                  FnameMainInfo_Full_DescriptionLabel;               // 0x3C8(0x8)(None)
	class FName                                  FnameMainInfo_DescOnly_DescriptionLabel;           // 0x3D0(0x8)(None)
	TArray<class FName>                          FnameGeneral_LabelNames;                           // 0x3D8(0x10)(None)
	TArray<class FName>                          FnameGeneral_GroupNames;                           // 0x3E8(0x10)(None)
	float                                        General_GroupFreq;                                 // 0x3F8(0x4)(None)
	uint8                                        Pad_39E9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          FnameStat_LabelNames;                              // 0x400(0x10)(None)
	TArray<class FName>                          FnameStat_GroupNames;                              // 0x410(0x10)(None)
	float                                        Stat_GroupFreq;                                    // 0x420(0x4)(None)
	class FName                                  FnameCraftPanel;                                   // 0x424(0x8)(None)
	class FName                                  FnameCraftTitleLabel;                              // 0x42C(0x8)(None)
	uint8                                        Pad_39EA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          FnameCraft_RequirementLabels;                      // 0x438(0x10)(None)
	TArray<class FName>                          FnameCraft_RequirementIcons;                       // 0x448(0x10)(None)
	TArray<class FName>                          FnameCraft_GroupNames;                             // 0x458(0x10)(None)
	float                                        Craft_GroupFreq;                                   // 0x468(0x4)(None)
	struct FSlateColor                           Craft_RequirementsMet;                             // 0x46C(0x14)(None)
	struct FSlateColor                           Craft_RequirementsUnmet;                           // 0x480(0x14)(None)
	struct FSlateColor                           NormalTextColor;                                   // 0x494(0x14)(None)
	struct FSlateColor                           NormalSecondTextColor;                             // 0x4A8(0x14)(None)
	struct FSlateColor                           NormalGeneralTextColor;                            // 0x4BC(0x14)(None)
	class UTexture2D*                            EngramBg;                                          // 0x4D0(0x8)(ZeroConstructor)
	class UTexture2D*                            BlueprintBg;                                       // 0x4D8(0x8)(ZeroConstructor)
	class UTexture2D*                            TekgramBg;                                         // 0x4E0(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemQualityOverlay;                                // 0x4E8(0x8)(ZeroConstructor)
	uint8                                        Pad_39EE[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalItemInventoryToolTipWidget* GetDefaultObj();

};

// 0x270 (0x628 - 0x3B8)
// Class ShooterGame.PrimalItemToolTipWidget
class UPrimalItemToolTipWidget : public UToolTipWidget
{
public:
	class FString                                ItemNameLabelName;                                 // 0x3B8(0x10)(None)
	class FString                                ItemQuantityLabelName;                             // 0x3C8(0x10)(None)
	class FString                                ItemDescriptionLabelName;                          // 0x3D8(0x10)(None)
	class FString                                ItemTypeLabelName;                                 // 0x3E8(0x10)(None)
	class FString                                ItemSubTypeLabelName;                              // 0x3F8(0x10)(None)
	class FString                                ItemIconImageName;                                 // 0x408(0x10)(None)
	class FString                                ItemWeightLabelName;                               // 0x418(0x10)(None)
	class FString                                ItemStatsLabelName;                                // 0x428(0x10)(None)
	class FString                                ItemDurabilityLabelName;                           // 0x438(0x10)(None)
	class FString                                ItemQualityImageName;                              // 0x448(0x10)(None)
	class FString                                ItemSubtypePanelName;                              // 0x458(0x10)(None)
	class FName                                  ItemStatsPanelName;                                // 0x468(0x8)(None)
	class FName                                  ItemCraftingPanelName;                             // 0x470(0x8)(None)
	class FName                                  ItemCraftingRequirementsLabelName;                 // 0x478(0x8)(None)
	class FName                                  ItemCraftingTitleLabelName;                        // 0x480(0x8)(None)
	class FName                                  ItemCraftingQueueLabelName;                        // 0x488(0x8)(None)
	class FName                                  ItemCraftingProgressBarName;                       // 0x490(0x8)(None)
	class FName                                  ItemCraftRepairInvReqLabelName;                    // 0x498(0x8)(None)
	class FName                                  SpoilIntoItemPanelName;                            // 0x4A0(0x8)(None)
	class FName                                  SpoilIntoItemNameLabelName;                        // 0x4A8(0x8)(None)
	class FName                                  SpoilIntoItemTimeLabelName;                        // 0x4B0(0x8)(None)
	class FName                                  SpoilIntoItemIconName;                             // 0x4B8(0x8)(None)
	class UTexture2D*                            EngramBg;                                          // 0x4C0(0x8)(ZeroConstructor)
	class UTexture2D*                            BlueprintBg;                                       // 0x4C8(0x8)(ZeroConstructor)
	class UTexture2D*                            TekgramBg;                                         // 0x4D0(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemQualityOverlay;                                // 0x4D8(0x8)(ZeroConstructor)
	uint8                                        Pad_39EF[0x148];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalItemToolTipWidget* GetDefaultObj();

};

// 0x0 (0xEB0 - 0xEB0)
// Class ShooterGame.PrimalItem_CruiseMissile
class UPrimalItem_CruiseMissile : public UPrimalItem
{
public:

	static class UClass* StaticClass();
	static class UPrimalItem_CruiseMissile* GetDefaultObj();

};

// 0x20 (0xED0 - 0xEB0)
// Class ShooterGame.PrimalItem_Dye
class UPrimalItem_Dye : public UPrimalItem
{
public:
	struct FLinearColor                          DyeColor;                                          // 0xEB0(0x10)(None)
	class UClass*                                DyeUISceneTemplate;                                // 0xEC0(0x8)(ZeroConstructor)
	uint8                                        Pad_39F0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalItem_Dye* GetDefaultObj();

};

// 0x10 (0xEC0 - 0xEB0)
// Class ShooterGame.PrimalItem_Radio
class UPrimalItem_Radio : public UPrimalItem
{
public:
	uint8                                        bAllowVoice : 1;                                   // Mask: 0x1, PropSize: 0x10xEB0(0x1)(None)
	uint8                                        BitPad_31E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_39F1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            SetFrequencySound;                                 // 0xEB8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UPrimalItem_Radio* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.LandscapeUtils
class ULandscapeUtils : public UObject
{
public:

	static class UClass* StaticClass();
	static class ULandscapeUtils* GetDefaultObj();

};

// 0x278 (0x2A0 - 0x28)
// Class ShooterGame.PrimalLocalProfile
class UPrimalLocalProfile : public UObject
{
public:
	uint8                                        Pad_39F5[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FEngramCustomFolder>           CustomFolders;                                     // 0x48(0x10)(ZeroConstructor)
	TArray<class UClass*>                        UnlockedDinoEntries;                               // 0x58(0x10)(ZeroConstructor)
	TArray<struct FPrimalMapMarkerEntryData>     MapMarkers;                                        // 0x68(0x10)(None)
	TArray<int32>                                DisplayedTutorials;                                // 0x78(0x10)(None)
	struct FArkInventoryData                     MyArkData;                                         // 0x88(0x30)(ZeroConstructor)
	TArray<uint64>                               SpectatorSavedIds;                                 // 0xB8(0x10)(None)
	TArray<struct FVector>                       SpectatorPositions;                                // 0xC8(0x10)(None)
	TArray<struct FRotator>                      SpectatorRotations;                                // 0xD8(0x10)(None)
	TArray<class FString>                        FavoriteServersNames;                              // 0xE8(0x10)(None)
	TArray<class FString>                        RecentlyJoinedServersNames;                        // 0xF8(0x10)(None)
	TArray<class FString>                        UnlockedAchievements;                              // 0x108(0x10)(None)
	TArray<class UClass*>                        AchievementItemsCollectedList;                     // 0x118(0x10)(None)
	TArray<class FString>                        UnlockedAchievementsList;                          // 0x128(0x10)(None)
	TArray<uint32>                               GlobalExplorerNoteUnlocks;                         // 0x138(0x10)(None)
	TArray<class FName>                          TamedDinoTags;                                     // 0x148(0x10)(None)
	TArray<struct FFogOfWarInfoStruct>           PerMapFogOfWars;                                   // 0x158(0x10)(None)
	TArray<struct FMapMarkerPerMapInfo>          MapMarkersPerMaps;                                 // 0x168(0x10)(None)
	TMap<class FName, struct FPhotoModeMotionControlTrackInfo> PhotoModeMotionControlTracks;                      // 0x178(0x50)(None)
	float                                        MapMarkersColorSliderPercent;                      // 0x1C8(0x4)(None)
	bool                                         CompanionHasReactedToFirstThatchCraft;             // 0x1CC(0x1)(None)
	bool                                         CompanionHasReactedToFirstJumpPadCraft;            // 0x1CD(0x1)(None)
	bool                                         CompanionHasReactedToFirstOceanPlatformCraft;      // 0x1CE(0x1)(None)
	bool                                         CompanionHasReactedToFirstPressurePlateCraft;      // 0x1CF(0x1)(None)
	bool                                         CompanionHasReactedToFirstFishingNetCraft;         // 0x1D0(0x1)(None)
	bool                                         CompanionHasReactedToFirstMiningDrillCraft;        // 0x1D1(0x1)(None)
	bool                                         CompanionHasReactedToFirstShoulderCannonCraft;     // 0x1D2(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekGrenadeLauncherCraft; // 0x1D3(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekCruiseMissileCraft;   // 0x1D4(0x1)(None)
	bool                                         CompanionHasReactedToFirstLaserTripWireCraft;      // 0x1D5(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekClawsCraft;           // 0x1D6(0x1)(None)
	bool                                         CompanionHasReactedToFirstHoverSkiffCraft;         // 0x1D7(0x1)(None)
	bool                                         CompanionHasReactedToFirstShapeshifterTransform;   // 0x1D8(0x1)(None)
	bool                                         CompanionHasReactedToFirstShapeshifterRevert;      // 0x1D9(0x1)(None)
	bool                                         CompanionHasReactedToFirstShapeshifterBloodlust;   // 0x1DA(0x1)(None)
	bool                                         CompanionHasReactedToFirstExoSuit;                 // 0x1DB(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekBow;                  // 0x1DC(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekPistol;               // 0x1DD(0x1)(None)
	bool                                         CompanionHasReactedToFirstTekCropPlot;             // 0x1DE(0x1)(None)
	bool                                         CompanionHasReactedToFirstHoversail;               // 0x1DF(0x1)(None)
	bool                                         CompanionHasReactedToFirstPlantSpeciesR;           // 0x1E0(0x1)(None)
	bool                                         CompanionHasReactedToGen2BossBattleAvailable;      // 0x1E1(0x1)(None)
	bool                                         CompanionHasReactedToFirstGen2ExplorerNoteFound;   // 0x1E2(0x1)(None)
	bool                                         CompanionHasReactedToFirstGen2DispatcherEncountered; // 0x1E3(0x1)(None)
	int32                                        NumRespawns;                                       // 0x1E4(0x4)(None)
	uint8                                        Pad_3A00[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalLocalProfile* GetDefaultObj();

	void SaveProfile(bool bAllowForcedItemDownload);
	void OnFinishedLoadingAllClustersItems(bool Success, const class FString& UserId, const TArray<struct FItemNetInfo>& ArkItems);
	void OnAllClustersItemsRemoved(bool Success, const class FString& UserId, const TArray<struct FItemNetID>& ItemsIds);
};

// 0x68 (0x130 - 0xC8)
// Class ShooterGame.PrimalNavigationInvokerComponent
class UPrimalNavigationInvokerComponent : public UNavigationInvokerComponent
{
public:
	TMap<class FName, struct FVector2D>          AlternateGenerationAndRemovalRadii;                // 0xC8(0x50)(None)
	float                                        DeactivationDelay;                                 // 0x118(0x4)(None)
	uint8                                        Pad_3A01[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalNavigationInvokerComponent* GetDefaultObj();

};

// 0x0 (0x1538 - 0x1538)
// Class ShooterGame.PrimalNavigationSystem
class UPrimalNavigationSystem : public UNavigationSystemV1
{
public:

	static class UClass* StaticClass();
	static class UPrimalNavigationSystem* GetDefaultObj();

	void GetNavAreaAtLocation(const struct FVector& Location, const struct FVector& Extent, class AActor* ForActor, class UClass* ReturnValue);
};

// 0x0 (0x60 - 0x60)
// Class ShooterGame.PrimalNavigationSystemConfig
class UPrimalNavigationSystemConfig : public UNavigationSystemModuleConfig
{
public:

	static class UClass* StaticClass();
	static class UPrimalNavigationSystemConfig* GetDefaultObj();

};

// 0x20 (0x1E0 - 0x1C0)
// Class ShooterGame.PrimalNavModifierComponent
class UPrimalNavModifierComponent : public UNavModifierComponent
{
public:
	struct FVector                               FailsafeLocation;                                  // 0x1C0(0x18)(None)
	enum class ENavigationDataResolution         NavMeshResolution;                                 // 0x1D8(0x1)(None)
	uint8                                        Pad_3A03[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalNavModifierComponent* GetDefaultObj();

	void SetFailsafeExtentAndLocation(const struct FVector& InExtent, const struct FVector& InLocation);
	void GetFailsafeExtentAndLocation(const struct FVector& OutExtent, const struct FVector& OutLocation);
};

// 0x0 (0x508 - 0x508)
// Class ShooterGame.PrimalNoClimbingVolume
class APrimalNoClimbingVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class APrimalNoClimbingVolume* GetDefaultObj();

};

// 0x78 (0x358 - 0x2E0)
// Class ShooterGame.PrimalPathFollowingComponent
class UPrimalPathFollowingComponent : public UPathFollowingComponent
{
public:
	struct FVector                               MoveTowardTargetOffset;                            // 0x2E0(0x18)(None)
	struct FVector                               TargetFocalPositionOffset;                         // 0x2F8(0x18)(None)
	float                                        ReachedDestinationThresholdOffset;                 // 0x310(0x4)(None)
	float                                        MovementGoalHeight;                                // 0x314(0x4)(None)
	uint8                                        bUse3DGoalRadius : 1;                              // Mask: 0x1, PropSize: 0x10x318(0x1)(None)
	uint8                                        bForceInputAcceptanceRadius : 1;                   // Mask: 0x2, PropSize: 0x10x318(0x1)(None)
	uint8                                        bDebugPathFollowing : 1;                           // Mask: 0x4, PropSize: 0x10x318(0x1)(None)
	uint8                                        bIsDeceleratingForTurn : 1;                        // Mask: 0x8, PropSize: 0x10x318(0x1)(None)
	uint8                                        BitPad_321 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A04[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastMoveBlockedTime;                               // 0x320(0x8)(None)
	struct FVector                               LastMoveBlockedLocation;                           // 0x328(0x18)(None)
	float                                        DecelerationDistance;                              // 0x340(0x4)(None)
	float                                        StartAngle;                                        // 0x344(0x4)(None)
	float                                        DecelerationRate;                                  // 0x348(0x4)(None)
	float                                        AccelerationRate;                                  // 0x34C(0x4)(None)
	float                                        AngleToSpeedConst;                                 // 0x350(0x4)(None)
	uint8                                        Pad_3A05[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalPathFollowingComponent* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.SaveGameActor
class ASaveGameActor : public AActor
{
public:

	static class UClass* StaticClass();
	static class ASaveGameActor* GetDefaultObj();

};

// 0x10 (0x4C8 - 0x4B8)
// Class ShooterGame.PrimalPersistentWorldData
class APrimalPersistentWorldData : public ASaveGameActor
{
public:
	TArray<struct FPlayerDeathReason>            PlayerDeathReasons;                                // 0x4B8(0x10)(None)

	static class UClass* StaticClass();
	static class APrimalPersistentWorldData* GetDefaultObj();

};

// 0x5A0 (0x5C8 - 0x28)
// Class ShooterGame.PrimalPlayerData
class UPrimalPlayerData : public UObject
{
public:
	struct FPrimalPlayerDataStruct               MyData;                                            // 0x28(0x4F8)(ZeroConstructor)
	TArray<class UPrimalBuffPersistentData*>     MyPersistentBuffDatas;                             // 0x520(0x10)(None)
	uint8                                        Pad_3A2E[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBossEngramsSoftReferenceMapping> BossEngramReferenceMap;                            // 0x590(0x10)(None)
	TArray<class FName>                          RedeemedWorldItemSets;                             // 0x5A0(0x10)(None)
	TArray<class FName>                          RedeemedWorldEquipSets;                            // 0x5B0(0x10)(None)
	bool                                         bAllowArkSeasonPassItems;                          // 0x5C0(0x1)(None)
	uint8                                        Pad_3A2F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalPlayerData* GetDefaultObj();

	void SetPlayerHexagonCount(int32 NewHexagonCount, bool ReturnValue);
	void SetChibiLevels(int32 NewLevels, class AShooterPlayerController* ForPC);
	void SavePlayerData(class UWorld* ForWorld);
	void LinkedPlayerIDString(const class FString& ReturnValue);
	void HasUnlockedAllExplorerNotes(bool ReturnValue);
	void HasGeneralizedAchievementTag(class FName Tag, bool ReturnValue);
	void GrantGeneralizedAchievementTag(class FName ObtainedAchievementTag, class AShooterPlayerController* ForPC);
	void GetUniqueNetIdAsString(const class FString& ReturnValue);
	void GetUniqueIdString(const class FString& ReturnValue);
	void GetPlayerState(class AShooterPlayerState* IgnorePlayerState, bool bOnlyCheckExistingPlayers, int32 LocalPlayerIndex, class AShooterPlayerState* ReturnValue);
	void GetPlayerHexagonCount(int32 ReturnValue);
	void FindCharacterForPlayer(class UWorld* InWorld, class AShooterCharacter* ReturnValue);
	void BPForceDefeatedBoss(int32 DifficultyIndex, class FName BossName, class AShooterPlayerController* PlayerController);
	void BPCreatedNewPlayerData();
	void BPApplyToPlayerCharacter(class AShooterPlayerState* ForPlayerState, class AShooterCharacter* NewPlayerCharacter);
	void BPAppliedToPlayerState(class AShooterPlayerState* ForPlayerState);
};

// 0x0 (0x10E8 - 0x10E8)
// Class ShooterGame.PrimalPlayerStatusComponent
class UPrimalPlayerStatusComponent : public UPrimalCharacterStatusComponent
{
public:

	static class UClass* StaticClass();
	static class UPrimalPlayerStatusComponent* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.PrimalPreviewSceneSetup
class APrimalPreviewSceneSetup : public AActor
{
public:

	static class UClass* StaticClass();
	static class APrimalPreviewSceneSetup* GetDefaultObj();

	void NotifySetupPreviewScene(class UMeshComponent* ForMeshComp, const TArray<class USceneComponent*>& ForChildComps, class AShooterPlayerController* ForPC);
	void NotifyPreviewSceneUpdated(float DeltaTime);
};

// 0x2D0 (0x788 - 0x4B8)
// Class ShooterGame.ShooterProjectile
class AShooterProjectile : public AActor
{
public:
	class UShooterProjectileMovement*            MovementComp;                                      // 0x4B8(0x8)(ZeroConstructor)
	bool                                         bFragmentate;                                      // 0x4C0(0x1)(None)
	uint8                                        Pad_3A6E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FragmentOriginOffset;                              // 0x4C4(0x4)(None)
	float                                        FragmentConeHalfAngle;                             // 0x4C8(0x4)(None)
	int32                                        NumberOfFragmentProjectiles;                       // 0x4CC(0x4)(None)
	class UClass*                                FragmentProjectileTemplate;                        // 0x4D0(0x8)(ZeroConstructor)
	bool                                         bUseOwnerProjectileLife;                           // 0x4D8(0x1)(None)
	uint8                                        Pad_3A6F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USphereComponent*                      CollisionComp;                                     // 0x4E0(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              ParticleComp;                                      // 0x4E8(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  StaticMeshComp;                                    // 0x4F0(0x8)(ZeroConstructor)
	class UClass*                                ExplosionEmitter;                                  // 0x4F8(0x8)(ZeroConstructor)
	class UClass*                                ImpactEmitter;                                     // 0x500(0x8)(ZeroConstructor)
	uint8                                        Pad_3A71[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bExploded : 1;                                     // Mask: 0x1, PropSize: 0x10x510(0x1)(None)
	uint8                                        bSpawnExplosionTemplateOnClient : 1;               // Mask: 0x2, PropSize: 0x10x510(0x1)(None)
	uint8                                        bExplodeOnClient : 1;                              // Mask: 0x4, PropSize: 0x10x510(0x1)(None)
	uint8                                        bExplodeOnImpact : 1;                              // Mask: 0x8, PropSize: 0x10x510(0x1)(None)
	uint8                                        bExplodeOnLifeTimeEnd : 1;                         // Mask: 0x10, PropSize: 0x10x510(0x1)(None)
	uint8                                        bDestroyOnExplode : 1;                             // Mask: 0x20, PropSize: 0x10x510(0x1)(None)
	uint8                                        bForceUseTickFunction : 1;                         // Mask: 0x40, PropSize: 0x10x510(0x1)(None)
	uint8                                        bForceIgnoreFriendlyFire : 1;                      // Mask: 0x80, PropSize: 0x10x510(0x1)(None)
	uint8                                        bAttachOnImpact : 1;                               // Mask: 0x1, PropSize: 0x10x511(0x1)(None)
	uint8                                        bSpawnImpactEffectOnHit : 1;                       // Mask: 0x2, PropSize: 0x10x511(0x1)(None)
	uint8                                        bReplicateImpact : 1;                              // Mask: 0x4, PropSize: 0x10x511(0x1)(None)
	uint8                                        bImpactSetRotationToNormal : 1;                    // Mask: 0x8, PropSize: 0x10x511(0x1)(None)
	uint8                                        bNoImpactEmitterOnCharacterHit : 1;                // Mask: 0x10, PropSize: 0x10x511(0x1)(None)
	uint8                                        bRotateMeshWhileMoving : 1;                        // Mask: 0x20, PropSize: 0x10x511(0x1)(None)
	uint8                                        bCheckForNonBlockingHitImpactFX : 1;               // Mask: 0x40, PropSize: 0x10x511(0x1)(None)
	uint8                                        bClientTickWhenInAirAndCheckForNonBlockingHitImpactFX : 1; // Mask: 0x80, PropSize: 0x10x511(0x1)(None)
	uint8                                        bTickedNonBlockingHitImpactFX : 1;                 // Mask: 0x1, PropSize: 0x10x512(0x1)(None)
	uint8                                        bUseTraceForBlocking : 1;                          // Mask: 0x2, PropSize: 0x10x512(0x1)(None)
	uint8                                        bHadAttachParent : 1;                              // Mask: 0x4, PropSize: 0x10x512(0x1)(None)
	uint8                                        BitPad_340 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bStopOnExplode : 1;                                // Mask: 0x10, PropSize: 0x10x512(0x1)(None)
	uint8                                        bUseTraceForBlockingStopOnExplode : 1;             // Mask: 0x20, PropSize: 0x10x512(0x1)(None)
	uint8                                        bUseMultiTraceForBlocking : 1;                     // Mask: 0x40, PropSize: 0x10x512(0x1)(None)
	uint8                                        BitPad_341 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bExplodeEffectOnDestroy : 1;                       // Mask: 0x1, PropSize: 0x10x513(0x1)(None)
	uint8                                        bImpactRequiresDinoLineOfSight : 1;                // Mask: 0x2, PropSize: 0x10x513(0x1)(None)
	uint8                                        bImpactPvEOnlyAlly : 1;                            // Mask: 0x4, PropSize: 0x10x513(0x1)(None)
	uint8                                        bUseBPProjectileBounced : 1;                       // Mask: 0x8, PropSize: 0x10x513(0x1)(None)
	uint8                                        bAttachOnProjectileBounced : 1;                    // Mask: 0x10, PropSize: 0x10x513(0x1)(None)
	uint8                                        bUseBPIgnoreProjectileImpact : 1;                  // Mask: 0x20, PropSize: 0x10x513(0x1)(None)
	uint8                                        bIgnoredByTurrets : 1;                             // Mask: 0x40, PropSize: 0x10x513(0x1)(None)
	uint8                                        bResetHasImpactedOnMultiTraceForBlocking : 1;      // Mask: 0x80, PropSize: 0x10x513(0x1)(None)
	uint8                                        bNonBlockingVolumeMustBeWater : 1;                 // Mask: 0x1, PropSize: 0x10x514(0x1)(None)
	uint8                                        BitPad_342 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A74[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClientSideCollisionRadius;                         // 0x518(0x4)(None)
	float                                        TraceForBlockingRadius;                            // 0x51C(0x4)(None)
	float                                        CustomColorDesaturation;                           // 0x520(0x4)(None)
	uint8                                        Pad_3A75[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              RotateMeshFactor;                                  // 0x538(0x18)(None)
	class UClass*                                ImpactTemplate;                                    // 0x550(0x8)(ZeroConstructor)
	float                                        TornOffLifeSpan;                                   // 0x558(0x4)(None)
	float                                        PostExplosionKeepAliveLifeSpan;                    // 0x55C(0x4)(None)
	double                                       ExplosionNetworkTime;                              // 0x560(0x8)(None)
	float                                        NudgedImpactDistance;                              // 0x568(0x4)(None)
	bool                                         bIgnoreDirectImpactRadialDamage;                   // 0x56C(0x1)(None)
	bool                                         bForceNetUpdate;                                   // 0x56D(0x1)(None)
	uint8                                        Pad_3A76[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceNetUpdateTimeInterval;                        // 0x570(0x4)(None)
	TWeakObjectPtr<class AShooterWeapon_Projectile> Weapon;                                            // 0x574(0x8)(ZeroConstructor)
	float                                        ParticleColorIntensity;                            // 0x57C(0x4)(None)
	float                                        ClientFailsafeLifespan;                            // 0x580(0x4)(None)
	uint8                                        bUseWeaponColorization : 1;                        // Mask: 0x1, PropSize: 0x10x584(0x1)(None)
	uint8                                        bUseCustomColor : 1;                               // Mask: 0x2, PropSize: 0x10x584(0x1)(None)
	uint8                                        bDoFullRadialDamage : 1;                           // Mask: 0x4, PropSize: 0x10x584(0x1)(None)
	uint8                                        bExplodeOnNonBlockingImpact : 1;                   // Mask: 0x8, PropSize: 0x10x584(0x1)(None)
	uint8                                        bRadialDamageIgnoreDamageCauser : 1;               // Mask: 0x10, PropSize: 0x10x584(0x1)(None)
	uint8                                        bMultiTraceCollideAgainstPawns : 1;                // Mask: 0x20, PropSize: 0x10x584(0x1)(None)
	uint8                                        BitPad_343 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A77[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FProjectileWeaponData                 WeaponConfig;                                      // 0x588(0x28)(ZeroConstructor)
	uint8                                        bTraceForBlockingDoImpactBackTrace : 1;            // Mask: 0x1, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bExplosionOrientUpwards : 1;                       // Mask: 0x2, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bColorizeStructureOnImpact : 1;                    // Mask: 0x4, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bClearStructureColorsOnImpact : 1;                 // Mask: 0x8, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bNonBlockingImpactNoExplosionEmitter : 1;          // Mask: 0x10, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bDestroyOnExplodeNonBlockingImpact : 1;            // Mask: 0x20, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bDontFragmentOnDamage : 1;                         // Mask: 0x40, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bPreventReflecting : 1;                            // Mask: 0x80, PropSize: 0x10x5B0(0x1)(None)
	uint8                                        bUseBPIgnoreRadialDamageVictim : 1;                // Mask: 0x1, PropSize: 0x10x5B1(0x1)(None)
	uint8                                        bDoFinalTraceCheckToDirectDamageVictim : 1;        // Mask: 0x2, PropSize: 0x10x5B1(0x1)(None)
	uint8                                        bDoFinalTraceCheckFromInstigatorToDirectDamageVictim : 1; // Mask: 0x4, PropSize: 0x10x5B1(0x1)(None)
	uint8                                        BitPad_344 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A78[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          CustomColor;                                       // 0x5B4(0x10)(None)
	TWeakObjectPtr<class AActor>                 DamageCauser;                                      // 0x5C4(0x8)(ZeroConstructor)
	bool                                         bHasImpacted;                                      // 0x5CC(0x1)(None)
	uint8                                        Pad_3A79[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FHitResult                            ReplicatedHitInfo;                                 // 0x5D0(0xF0)(ZeroConstructor)
	class USoundCue*                             ProjectileBounceSound;                             // 0x6C0(0x8)(ZeroConstructor)
	uint8                                        Pad_3A7A[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        ImpactedActors;                                    // 0x700(0x10)(ZeroConstructor)
	struct FVector                               LastVelocity;                                      // 0x710(0x18)(None)
	uint8                                        Pad_3A7B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        IgnoreNonBlockingHitClasses;                       // 0x730(0x10)(ZeroConstructor)
	bool                                         bForceIgnoreBlockingHitClasses;                    // 0x740(0x1)(None)
	uint8                                        bUseProjectileTraceChannel : 1;                    // Mask: 0x1, PropSize: 0x10x741(0x1)(None)
	uint8                                        bIsGlowStick : 1;                                  // Mask: 0x2, PropSize: 0x10x741(0x1)(None)
	uint8                                        bIsGlowStickSelf : 1;                              // Mask: 0x4, PropSize: 0x10x741(0x1)(None)
	uint8                                        bUseClientHitDetermination : 1;                    // Mask: 0x8, PropSize: 0x10x741(0x1)(None)
	uint8                                        BitPad_345 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A7C[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FluidSimSplashStrength;                            // 0x748(0x4)(None)
	uint8                                        Pad_3A7D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        FluidSimSplashTemplateOverride;                    // 0x750(0x8)(ZeroConstructor)
	struct FVector                               LastFoliageTraceCheckLocation;                     // 0x758(0x18)(None)
	double                                       LastFoliageTraceCheckTime;                         // 0x770(0x8)(None)
	uint8                                        HasPerformedAnEnvirnonmentalImpact : 1;            // Mask: 0x1, PropSize: 0x10x778(0x1)(None)
	uint8                                        BitPad_346 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3A7E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DistanceCutoffForMidairProjectileFoliageTracing;   // 0x77C(0x4)(None)
	float                                        TimeBetweenMidairProjectileFoliageTraces;          // 0x780(0x4)(None)
	uint8                                        Pad_3A7F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterProjectile* GetDefaultObj();

	void UpdateTargetPhysics();
	void StopProjectileMovement();
	void SpawnImpactEffect(const struct FHitResult& Impact);
	void ShouldNotifyServerOfClientImpact(class AActor* ImpactedActor, bool ReturnValue);
	void RestartProjectileMovement();
	void Reset();
	void ProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void PreventExplosionEmitter(const struct FHitResult& Impact, bool ReturnValue);
	void OnTouch(class AActor* OverlappedActor, class AActor* Actor);
	void OnProjectileStop(const struct FHitResult& HitResult);
	void OnImpact(const struct FHitResult& HitResult, bool bFromReplication);
	void OnExplode(const struct FHitResult& Result);
	void NetUpdateTimer();
	void NetResetTransformAndVelocity(const struct FVector& NewLocation, const struct FRotator& NewRotation, const struct FVector& NewVelocity, const TArray<class AActor*>& NewMoveIgnoreActors);
	void NetAttachRootComponentTo(class USceneComponent* InParent, class FName InSocketName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation);
	void GetSocketForFinalTraceCheckFromInstigatorToDirectDamageVictim(class FName ReturnValue);
	void GetProjectileID(int32 ReturnValue);
	void ExplodeAtLocation(const struct FVector& AtLocation, const struct FVector& AtNormal);
	void Explode(const struct FHitResult& Impact);
	void DisableAndDestroy(bool ForceOnClient);
	void DeactivateProjectileEffects();
	void Colorize();
	void ClientOnImpact(const struct FVector& ProjectileLocation, const struct FRotator& ProjectileRotation, const struct FHitResult& HitResult);
	void ClientNetImpactFX(const struct FHitResult& HitResult);
	void ClientNetExplode(const struct FHitResult& HitResult);
	void ClientNetDestroy();
	void ClearHomingTarget();
	void BPSpawnedFragments(const TArray<class AShooterProjectile*>& FragmentArray);
	void BPProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void BPInitVelocity(const struct FVector& ShootDirection);
	void BPInitializedVelocity(const struct FVector& InVelocity, float CustomSpeed);
	void BPIgnoreRadialDamageVictim(class AActor* Victim, bool ReturnValue);
	void BPDestroyLikeDamage();
	void BPDamageScalarApplied(float Scalar);
	void BPApplyExplosionDamageAndVFX(const struct FHitResult& Impact, bool bForceSpawnExplosionEmitter);
	void BP_IgnoreProjectileImpact(const struct FHitResult& ImpactHit, bool ReturnValue);
	void ApplyDamageScalar(float Scalar);
	void AddMoveIgnoreActor(class AActor* IgnoreActor);
};

// 0x28 (0x7B0 - 0x788)
// Class ShooterGame.PrimalProjectileArrow
class APrimalProjectileArrow : public AShooterProjectile
{
public:
	float                                        PickUpRadius;                                      // 0x788(0x4)(None)
	uint8                                        Pad_3A89[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PickupItemClass;                                   // 0x790(0x8)(ZeroConstructor)
	int32                                        PickUpQuantity;                                    // 0x798(0x4)(None)
	float                                        PercentChanceToBreakOnImpact;                      // 0x79C(0x4)(None)
	class UClass*                                PickItemClassApplySkin;                            // 0x7A0(0x8)(ZeroConstructor)
	class USoundBase*                            ArrowPickedUpSound;                                // 0x7A8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalProjectileArrow* GetDefaultObj();

	void PickUpCheck();
	void PickedUp(class AShooterCharacter* ByCharacter);
};

// 0xD0 (0x880 - 0x7B0)
// Class ShooterGame.PrimalProjectileBoomerang
class APrimalProjectileBoomerang : public APrimalProjectileArrow
{
public:
	uint8                                        Pad_3A8B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxDistanceToTravel;                               // 0x7B8(0x4)(None)
	uint8                                        Pad_3A8C[0xBC];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReturnFirstPointTravelDistanceMultiplier;          // 0x878(0x4)(None)
	float                                        ReturnSecondPointTravelDistanceMultiplier;         // 0x87C(0x4)(None)

	static class UClass* StaticClass();
	static class APrimalProjectileBoomerang* GetDefaultObj();

};

// 0x0 (0x788 - 0x788)
// Class ShooterGame.PrimalProjectileDilo
class APrimalProjectileDilo : public AShooterProjectile
{
public:

	static class UClass* StaticClass();
	static class APrimalProjectileDilo* GetDefaultObj();

};

// 0x28 (0x7B0 - 0x788)
// Class ShooterGame.PrimalProjectileFlare
class APrimalProjectileFlare : public AShooterProjectile
{
public:
	class UParticleSystemComponent*              SecondParticleComp;                                // 0x788(0x8)(ZeroConstructor)
	float                                        TimeToActivateSecondParticleComp;                  // 0x790(0x4)(None)
	float                                        RandomFallingMovementInterval;                     // 0x794(0x4)(None)
	float                                        RandomFallingMovementStrength;                     // 0x798(0x4)(None)
	uint8                                        Pad_3A93[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            SecondParticleSound;                               // 0x7A0(0x8)(ZeroConstructor)
	float                                        LightColorIntensity;                               // 0x7A8(0x4)(None)
	uint8                                        Pad_3A94[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalProjectileFlare* GetDefaultObj();

};

// 0x58 (0x7E0 - 0x788)
// Class ShooterGame.PrimalProjectileGrapplingHook
class APrimalProjectileGrapplingHook : public AShooterProjectile
{
public:
	struct FVector                               GrapHookEndPointOffset;                            // 0x788(0x18)(None)
	float                                        MaximumRopeDistance;                               // 0x7A0(0x4)(None)
	float                                        PullingStrength;                                   // 0x7A4(0x4)(None)
	float                                        ReleaseRopeSpeed;                                  // 0x7A8(0x4)(None)
	float                                        MaxPullMassOverride;                               // 0x7AC(0x4)(None)
	float                                        DetachGrapHookLifespan;                            // 0x7B0(0x4)(None)
	uint8                                        Pad_3A96[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               GrapHookDefaultOffset;                             // 0x7B8(0x18)(None)
	class UMaterialInterface*                    GrapHookMaterial;                                  // 0x7D0(0x8)(ZeroConstructor)
	float                                        GrapHookCableWidthOverride;                        // 0x7D8(0x4)(None)
	bool                                         bAllowPullSleeping;                                // 0x7DC(0x1)(None)
	bool                                         bAllowPullFleeing;                                 // 0x7DD(0x1)(None)
	uint8                                        Pad_3A97[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalProjectileGrapplingHook* GetDefaultObj();

};

// 0xF0 (0x8A0 - 0x7B0)
// Class ShooterGame.PrimalProjectileNetGun
class APrimalProjectileNetGun : public APrimalProjectileArrow
{
public:
	class USkeletalMeshComponent*                SkeletalMeshComp;                                  // 0x7B0(0x8)(ZeroConstructor)
	class UClass*                                BuffToApplyToLightCharacters;                      // 0x7B8(0x8)(ZeroConstructor)
	class UClass*                                BuffToApplyToHeavyCharacters;                      // 0x7C0(0x8)(ZeroConstructor)
	float                                        MaxDinoMassToInmovilize;                           // 0x7C8(0x4)(None)
	uint8                                        Pad_3A9C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FManagedBoneSetup>             ManagedBones;                                      // 0x7D0(0x10)(None)
	float                                        OnInpactMaxTraceDistance;                          // 0x7E0(0x4)(None)
	float                                        DissolveTime;                                      // 0x7E4(0x4)(None)
	uint8                                        Pad_3A9D[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalProjectileNetGun* GetDefaultObj();

	void GetManagedBoneRotation(class FName InBoneName, const struct FRotator& ReturnValue);
	void GetManagedBoneLocationsAndRotations(const TArray<struct FVector>& Locations, const TArray<struct FRotator>& Rotations);
	void GetManagedBoneLocation(class FName InBoneName, const struct FVector& ReturnValue);
	void CalculateBonePositions();
};

// 0x0 (0x788 - 0x788)
// Class ShooterGame.PrimalProjectileSpiderAcid
class APrimalProjectileSpiderAcid : public AShooterProjectile
{
public:

	static class UClass* StaticClass();
	static class APrimalProjectileSpiderAcid* GetDefaultObj();

};

// 0x48 (0x3260 - 0x3218)
// Class ShooterGame.PrimalRaft
class APrimalRaft : public APrimalDinoCharacter
{
public:
	class UTexture2D*                            Icon;                                              // 0x3218(0x8)(ZeroConstructor)
	class UAudioComponent*                       MovingSoundComponent;                              // 0x3220(0x8)(ZeroConstructor)
	class USoundBase*                            MovingSoundCue;                                    // 0x3228(0x8)(ZeroConstructor)
	class UClass*                                RaftSpawnEffect;                                   // 0x3230(0x8)(ZeroConstructor)
	double                                       NetworkCreationTime;                               // 0x3238(0x8)(None)
	uint8                                        bRaftAllowCrafting : 1;                            // Mask: 0x1, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bBPOverrideSwimmingVelocity : 1;                   // Mask: 0x2, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bBPOverrideSwimmingAcceleration : 1;               // Mask: 0x4, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bAllowOverrideUpdatesWhenNoRaftRider : 1;          // Mask: 0x8, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bDisableGravityAdjustement : 1;                    // Mask: 0x10, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bUseTracedSurfaceAdjustment : 1;                   // Mask: 0x20, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bRaftAllowWalkingState : 1;                        // Mask: 0x40, PropSize: 0x10x3240(0x1)(None)
	uint8                                        bAllowTargetingBasedCharacters : 1;                // Mask: 0x80, PropSize: 0x10x3240(0x1)(None)
	uint8                                        Pad_3AA6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SurfaceAdjustmentZInterpSpeed;                     // 0x3244(0x4)(None)
	uint8                                        Pad_3AA7[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalRaft* GetDefaultObj();

	void TempDisableForcedVelcoityDirection();
	void BPOverrideSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime, const struct FVector& ReturnValue);
	void BPAllowMovementSound(bool ReturnValue);
	void BP_OverrideSwimmingAcceleration(const struct FVector& ModifyAcceleration, float DeltaTime);
};

// 0x0 (0x7E0 - 0x7E0)
// Class ShooterGame.PrimalRecastNavMesh
class APrimalRecastNavMesh : public ARecastNavMesh
{
public:

	static class UClass* StaticClass();
	static class APrimalRecastNavMesh* GetDefaultObj();

};

// 0x3D0 (0x5C0 - 0x1F0)
// Class ShooterGame.PrimalRichTextBlock
class UPrimalRichTextBlock : public UWidget
{
public:
	class FText                                  Text;                                              // 0x1F0(0x18)(None)
	FDelegateProperty_                           TextDelegate;                                      // 0x208(0x10)(ZeroConstructor)
	enum class ETextJustify                      Justification;                                     // 0x218(0x1)(None)
	bool                                         AutoWrapText;                                      // 0x219(0x1)(None)
	uint8                                        Pad_3AAA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WrapTextAt;                                        // 0x21C(0x4)(None)
	bool                                         CenterVertically;                                  // 0x220(0x1)(None)
	uint8                                        Pad_3AAB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMargin                               Margin;                                            // 0x224(0x10)(None)
	float                                        LineHeightPercentage;                              // 0x234(0x4)(None)
	uint8                                        Pad_3AAC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTextBlockStyle                       WidgetStyle;                                       // 0x240(0x340)(ZeroConstructor)
	TArray<struct FPrimalTextStyle>              TextStyles;                                        // 0x580(0x10)(ZeroConstructor)
	TArray<struct FPrimalImageStyle>             ImageStyles;                                       // 0x590(0x10)(ZeroConstructor)
	uint8                                        Pad_3AAD[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalRichTextBlock* GetDefaultObj();

	void SetText(class FText InText, bool bDoParse);
	void SetString(const class FString& InString);
	void GetText(class FText ReturnValue);
};

// 0x8 (0xDA0 - 0xD98)
// Class ShooterGame.PrimalScrollBox
class UPrimalScrollBox : public UScrollBox
{
public:
	uint8                                        Pad_3AAE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalScrollBox* GetDefaultObj();

	void GetFirstWidgetWithinVisibleScrollboxFrame(class UWidget* ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PrimalStaticData
class UPrimalStaticData : public UObject
{
public:

	static class UClass* StaticClass();
	static class UPrimalStaticData* GetDefaultObj();

	void GetPrimalStaticData(class UClass* DataType, class UPrimalStaticData* ReturnValue);
};

// 0x4E8 (0x510 - 0x28)
// Class ShooterGame.PrimalStaticData_MissionCompanionData
class UPrimalStaticData_MissionCompanionData : public UPrimalStaticData
{
public:
	uint8                                        Pad_3AAF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPointOfInterestData_ForCompanion     MissionPointOfInterestData;                        // 0x30(0x4E0)(None)

	static class UClass* StaticClass();
	static class UPrimalStaticData_MissionCompanionData* GetDefaultObj();

};

// 0x210 (0x238 - 0x28)
// Class ShooterGame.PrimalStaticData_MissionCompanionReactionData
class UPrimalStaticData_MissionCompanionReactionData : public UPrimalStaticData
{
public:
	struct FCompanionReactionData                ReactionData_MissionStart;                         // 0x28(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                ReactionData_MissionEnd_Success;                   // 0xD8(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                ReactionData_MissionEnd_Failure;                   // 0x188(0xB0)(None)

	static class UClass* StaticClass();
	static class UPrimalStaticData_MissionCompanionReactionData* GetDefaultObj();

};

// 0xB8 (0x10B8 - 0x1000)
// Class ShooterGame.PrimalStructureBearTrap
class APrimalStructureBearTrap : public APrimalStructure
{
public:
	class USkeletalMeshComponent*                TrapSK;                                            // 0x1000(0x8)(ZeroConstructor)
	class USphereComponent*                      TriggerComponent;                                  // 0x1008(0x8)(ZeroConstructor)
	class USoundCue*                             TrapTriggerSound;                                  // 0x1010(0x8)(ZeroConstructor)
	class UClass*                                TrapDamageType;                                    // 0x1018(0x8)(ZeroConstructor)
	float                                        TrapMinPawnMass;                                   // 0x1020(0x4)(None)
	float                                        TrapMaxPawnMass;                                   // 0x1024(0x4)(None)
	float                                        TrapDamageAmount;                                  // 0x1028(0x4)(None)
	float                                        PeriodicalTrapDamageTime;                          // 0x102C(0x4)(None)
	float                                        PeriodicalTrapDamageAmount;                        // 0x1030(0x4)(None)
	float                                        IgnoreTriggerAfterSpawnTime;                       // 0x1034(0x4)(None)
	TArray<class FName>                          IgnoreDinosWithCustomTag;                          // 0x1038(0x10)(None)
	TArray<class FName>                          ForceImmobilizeDinosWithCustomTag;                 // 0x1048(0x10)(None)
	float                                        HealthDecreasePerSecPlayers;                       // 0x1058(0x4)(None)
	float                                        HealthDecreasePerSecWild;                          // 0x105C(0x4)(None)
	bool                                         bImmuneToNormalDamage;                             // 0x1060(0x1)(None)
	uint8                                        Pad_3AB6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalCharacter*                      ImmobilizedCharacter;                              // 0x1068(0x8)(ZeroConstructor)
	int8                                         CurrentTrapState;                                  // 0x1070(0x1)(None)
	int8                                         ClientPrevTrapState;                               // 0x1071(0x1)(None)
	bool                                         bClosedTrap;                                       // 0x1072(0x1)(None)
	uint8                                        Pad_3AB7[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HealthDecreasePerSec;                              // 0x1074(0x4)(None)
	double                                       DestroyTime;                                       // 0x1078(0x8)(None)
	float                                        DestroyAfterTime;                                  // 0x1080(0x4)(None)
	bool                                         bUseOnlyOnNonAllied;                               // 0x1084(0x1)(None)
	uint8                                        Pad_3AB8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        DamagedOnlyBy;                                     // 0x1088(0x10)(ZeroConstructor)
	double                                       NetworkPlacementTime;                              // 0x1098(0x8)(None)
	class UParticleSystem*                       OnDestroyFX;                                       // 0x10A0(0x8)(ZeroConstructor)
	uint8                                        bBPUseNotifyImmobilizedCharacterIsDeadOrInConscious : 1; // Mask: 0x1, PropSize: 0x10x10A8(0x1)(None)
	uint8                                        Pad_3AB9[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureBearTrap* GetDefaultObj();

	void TriggerTouched(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void PeriodicalTrapDamageTimer();
	void OnRep_CurrentTrapState();
	void NetGotoTrapState(int8 TrapState);
	void IsTrapPrepared(float AnimSetupTime, bool ReturnValue);
	void HideAnimatedSK();
	void DecreaseDamageTimer();
	void BPNotifyImmobilizedCharacterIsDeadOrInConscious(bool IsDead, bool IsConscious);
	void BPDie();
};

// 0x118 (0x1578 - 0x1460)
// Class ShooterGame.PrimalStructureSeating
class APrimalStructureSeating : public APrimalStructureItemContainer
{
public:
	TWeakObjectPtr<class AShooterCharacter>      SeatedCharacter;                                   // 0x1460(0x8)(ZeroConstructor)
	uint8                                        Pad_3B6D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AShooterPlayerController> SeatedController;                                  // 0x1470(0x8)(ZeroConstructor)
	TArray<TWeakObjectPtr<class AShooterCharacter>> CharacterPerSeat;                                  // 0x1478(0x10)(ZeroConstructor)
	uint8                                        Pad_3B6F[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumSeats;                                          // 0x1498(0x4)(None)
	uint8                                        Pad_3B70[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SeatedCharacterLocationOffset;                     // 0x14A0(0x18)(None)
	struct FRotator                              SeatedCharacterRotationOffset;                     // 0x14B8(0x18)(None)
	TArray<struct FSeatingSpot>                  OtherSeatingSpots;                                 // 0x14D0(0x10)(None)
	uint8                                        bAdjustForLegLength : 1;                           // Mask: 0x1, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bRestrictTPVCameraYaw : 1;                         // Mask: 0x2, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bUsesPrimaryFire : 1;                              // Mask: 0x4, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bUsesAltFire : 1;                                  // Mask: 0x8, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bUsesItemSlotKeys : 1;                             // Mask: 0x10, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bPreventSeatingWhenHandcuffed : 1;                 // Mask: 0x20, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bAllowSleepingPlayers : 1;                         // Mask: 0x40, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bReleaseFindsGroundPlacement : 1;                  // Mask: 0x80, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bAllowCrouchProneToSit : 1;                        // Mask: 0x1, PropSize: 0x10x14E1(0x1)(None)
	uint8                                        bUsesTargeting : 1;                                // Mask: 0x2, PropSize: 0x10x14E1(0x1)(None)
	uint8                                        bHideLegacyStructureAmmoHUD : 1;                   // Mask: 0x4, PropSize: 0x10x14E1(0x1)(None)
	uint8                                        bTraceToUnboardLocation : 1;                       // Mask: 0x8, PropSize: 0x10x14E1(0x1)(None)
	uint8                                        BitPad_35B : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3B7B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TPVCameraYawRange;                                 // 0x14E4(0x4)(None)
	struct FVector                               TPVCameraOffset;                                   // 0x14E8(0x18)(None)
	struct FVector                               TPVCameraOffsetMultiplier;                         // 0x1500(0x18)(None)
	float                                        UnboardDistance;                                   // 0x1518(0x4)(None)
	uint8                                        Pad_3B7C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SeatingActionText;                                 // 0x1520(0x10)(None)
	class UTexture2D*                            SeatingActionIcon;                                 // 0x1530(0x8)(ZeroConstructor)
	class USoundCue*                             RideSound;                                         // 0x1538(0x8)(ZeroConstructor)
	class USoundCue*                             UnrideSound;                                       // 0x1540(0x8)(ZeroConstructor)
	class UAnimSequence*                         SeatingAnimOverride;                               // 0x1548(0x8)(ZeroConstructor)
	uint8                                        bAllowAnyTeamToSit : 1;                            // Mask: 0x1, PropSize: 0x10x1550(0x1)(None)
	uint8                                        bAllowOrbitCam : 1;                                // Mask: 0x2, PropSize: 0x10x1550(0x1)(None)
	uint8                                        bPreventHandcuffLockedSeating : 1;                 // Mask: 0x4, PropSize: 0x10x1550(0x1)(None)
	uint8                                        bJumpOnDetach : 1;                                 // Mask: 0x8, PropSize: 0x10x1550(0x1)(None)
	uint8                                        BitPad_35C : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3B7D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SeatingActionPriority;                             // 0x1554(0x4)(None)
	double                                       LastServerUpdateSent;                              // 0x1558(0x8)(None)
	uint8                                        Pad_3B7E[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureSeating* GetDefaultObj();

	void Release(class AShooterCharacter* ShooterCharacter);
	void OnRep_SeatedCharacter();
	void OnRep_CharacterPerSeat();
	void GetNearestFreeSpot(class AShooterPlayerController* ForPC, const struct FVector& CharacterLocation, int32 ReturnValue);
	void Control(class AShooterCharacter* ShooterCharacter, int32 SeatNumber, bool bLockedToSeat);
	void ClearSeats();
	void CanSeat(class AShooterPlayerController* ForPC, class AShooterCharacter* ForCharacter, bool bForce, bool ReturnValue);
	void BPSeatedPlayer(class AShooterCharacter* SeatedChar, int32 AtSeatNumber);
	void BPReleasedPlayer(class AShooterCharacter* ReleasedChar, int32 AtSeatNumber);
	void BPPreventReleaseSeatingStructure(class AShooterCharacter* ForSitter, bool ReturnValue);
	void BPOnStopTargeting();
	void BPOnStartTargeting();
	void BPHandleSitterPoop(class AShooterCharacter* ForSitter, bool ReturnValue);
	void BPGetBestSeatNumber(class AShooterPlayerController* ForPC, int32 InBestSeatNumber, int32 ReturnValue);
	void BPAllowSeating(class AShooterPlayerController* ForPC, bool ReturnValue);
};

// 0x88 (0x1600 - 0x1578)
// Class ShooterGame.PrimalStructureBed
class APrimalStructureBed : public APrimalStructureSeating
{
public:
	uint8                                        bDestroyAfterRespawnUse : 1;                       // Mask: 0x1, PropSize: 0x10x1578(0x1)(None)
	uint8                                        BitPad_35D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3B94[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PlayerSpawnLocOffset;                              // 0x1580(0x18)(None)
	struct FRotator                              PlayerSpawnRotOffset;                              // 0x1598(0x18)(None)
	uint32                                       LinkedPlayerID;                                    // 0x15B0(0x4)(None)
	uint8                                        Pad_3B96[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LinkedPlayerName;                                  // 0x15B8(0x10)(None)
	class FString                                BedName;                                           // 0x15C8(0x10)(None)
	float                                        UseCooldownTime;                                   // 0x15D8(0x4)(None)
	float                                        UseCooldownRadius;                                 // 0x15DC(0x4)(None)
	float                                        AttachedToPlatformStructureEnemySpawnPreventionRadius; // 0x15E0(0x4)(None)
	uint8                                        Pad_3B9A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            FastTravelIcon;                                    // 0x15E8(0x8)(ZeroConstructor)
	double                                       NextAllowedUseTime;                                // 0x15F0(0x8)(None)
	uint8                                        Pad_3B9B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureBed* GetDefaultObj();

	void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
};

// 0xD0 (0x10D0 - 0x1000)
// Class ShooterGame.PrimalStructureDoor
class APrimalStructureDoor : public APrimalStructure
{
public:
	class USceneComponent*                       MyDoorTransform;                                   // 0x1000(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  SecondDoorCosmeticVariantStaticMesh;               // 0x1008(0x8)(ZeroConstructor)
	float                                        RotationSpeed;                                     // 0x1010(0x4)(None)
	uint8                                        Pad_3C6E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             DoorOpenSound;                                     // 0x1018(0x8)(ZeroConstructor)
	class USoundCue*                             DoorCloseSound;                                    // 0x1020(0x8)(ZeroConstructor)
	uint32                                       CurrentPinCode;                                    // 0x1028(0x4)(None)
	uint8                                        bInvertOpenCloseDirection : 1;                     // Mask: 0x1, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bSupportsLocking : 1;                              // Mask: 0x2, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bUseSecondDoor : 1;                                // Mask: 0x4, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bSupportsPinLocking : 1;                           // Mask: 0x8, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bIsLocked : 1;                                     // Mask: 0x10, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bIsPinLocked : 1;                                  // Mask: 0x20, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bAdminOnlyAccess : 1;                              // Mask: 0x40, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bCanBeForcedOpenByDino : 1;                        // Mask: 0x80, PropSize: 0x10x102C(0x1)(None)
	uint8                                        bPreventBasingWhileMoving : 1;                     // Mask: 0x1, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bForceDoorOpenIn : 1;                              // Mask: 0x2, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bForceDoorOpenOut : 1;                             // Mask: 0x4, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bIsDoorMoving : 1;                                 // Mask: 0x8, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bForceStaticMobility : 1;                          // Mask: 0x10, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bRotatePitch : 1;                                  // Mask: 0x20, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bRotateRoll : 1;                                   // Mask: 0x40, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bRotateYaw : 1;                                    // Mask: 0x80, PropSize: 0x10x102D(0x1)(None)
	uint8                                        bInitializedRotation : 1;                          // Mask: 0x1, PropSize: 0x10x102E(0x1)(None)
	uint8                                        bPreventDoorInterpolation : 1;                     // Mask: 0x2, PropSize: 0x10x102E(0x1)(None)
	uint8                                        bUseBPGotoDoorState : 1;                           // Mask: 0x4, PropSize: 0x10x102E(0x1)(None)
	uint8                                        bUseBPOverrideChangeDoorState : 1;                 // Mask: 0x8, PropSize: 0x10x102E(0x1)(None)
	uint8                                        BitPad_36E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3C7A[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceNoPinLocking : 1;                            // Mask: 0x1, PropSize: 0x10x1030(0x1)(None)
	uint8                                        bDoesntAffectDinoNavigationWhileOpen : 1;          // Mask: 0x2, PropSize: 0x10x1030(0x1)(None)
	uint8                                        bDoesntUseOpenMode : 1;                            // Mask: 0x4, PropSize: 0x10x1030(0x1)(None)
	uint8                                        BitPad_36F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3C7B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentOpenMode;                                   // 0x1034(0x4)(None)
	float                                        MaxOpenRotDeg;                                     // 0x1038(0x4)(None)
	float                                        DoorStateChangeIgnoreEncroachmentInterval;         // 0x103C(0x4)(None)
	int8                                         DoorOpenState;                                     // 0x1040(0x1)(None)
	uint8                                        Pad_3C7C[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              SecondDoorDefaultRot;                              // 0x1058(0x18)(None)
	float                                        CurrentDoorAngle;                                  // 0x1070(0x4)(None)
	uint8                                        Pad_3C7D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            UnlockDoorSound;                                   // 0x1078(0x8)(ZeroConstructor)
	class USoundBase*                            LockDoorSound;                                     // 0x1080(0x8)(ZeroConstructor)
	class USoundBase*                            LockedSound;                                       // 0x1088(0x8)(ZeroConstructor)
	double                                       LastPinOpenSuccessTime;                            // 0x1090(0x8)(None)
	uint8                                        Pad_3C7E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            OpenIcon;                                          // 0x10A0(0x8)(ZeroConstructor)
	class UTexture2D*                            CloseIcon;                                         // 0x10A8(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenModeInAndOutIcon;                              // 0x10B0(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenModeAlwaysInIcon;                              // 0x10B8(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenModeAlwaysOutIcon;                             // 0x10C0(0x8)(ZeroConstructor)
	uint8                                        Pad_3C80[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureDoor* GetDefaultObj();

	void OnRep_DoorOpenState(int8 PrevDoorOpenState);
	void NetGotoDoorState(int8 DoorState);
	void HasSamePinCode(class APrimalStructureItemContainer* OtherContainer, bool ReturnValue);
	void GetDoorState(int32 ReturnValue);
	void DelayedGotoDoorStateTimer();
	void CanOpen(class APlayerController* ForPC, bool ReturnValue);
	void BPSetDoorState(int32 DoorState);
	void BPOverrideChangeDoorState(class APlayerController* PC);
	void BPGotoDoorState(int32 NewDoorState);
};

// 0xD0 (0x10D0 - 0x1000)
// Class ShooterGame.PrimalStructureElevatorPlatform
class APrimalStructureElevatorPlatform : public APrimalStructure
{
public:
	float                                        MaxCarryWeight;                                    // 0x1000(0x4)(None)
	float                                        Speed;                                             // 0x1004(0x4)(None)
	float                                        DownSpeed;                                         // 0x1008(0x4)(None)
	float                                        ClientLocationInterpSpeed;                         // 0x100C(0x4)(None)
	float                                        ClientLocationInterpSpeedDown;                     // 0x1010(0x4)(None)
	float                                        UpObstructionTraceLength;                          // 0x1014(0x4)(None)
	float                                        DownObstructionTraceLength;                        // 0x1018(0x4)(None)
	float                                        TrackTraceLength;                                  // 0x101C(0x4)(None)
	class USoundBase*                            StartMovingSound;                                  // 0x1020(0x8)(ZeroConstructor)
	class USoundBase*                            StopMovingSound;                                   // 0x1028(0x8)(ZeroConstructor)
	float                                        DistanceToTravel;                                  // 0x1030(0x4)(None)
	uint8                                        Pad_3CCC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               StartLocation;                                     // 0x1038(0x18)(None)
	uint8                                        bIsActivated : 1;                                  // Mask: 0x1, PropSize: 0x10x1050(0x1)(None)
	uint8                                        BitPad_373 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUpdateLocation : 1;                               // Mask: 0x4, PropSize: 0x10x1050(0x1)(None)
	uint8                                        BitPad_374 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CCD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class APrimalCharacter>> CarriedActors;                                     // 0x1058(0x10)(ZeroConstructor)
	enum class EPrimalStructureElevatorState     CurrentState;                                      // 0x1068(0x1)(None)
	uint8                                        Pad_3CCE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TraveledDistance;                                  // 0x106C(0x4)(None)
	float                                        CurrentLiftedWeight;                               // 0x1070(0x4)(None)
	bool                                         bUseBPElevatorStopped;                             // 0x1074(0x1)(None)
	uint8                                        Pad_3CCF[0x1B];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinHeight;                                         // 0x1090(0x4)(None)
	float                                        MaxHeight;                                         // 0x1094(0x4)(None)
	float                                        Height;                                            // 0x1098(0x4)(None)
	float                                        ReplicatedZ;                                       // 0x109C(0x4)(None)
	uint8                                        bAddElevatorMultiUseEntries : 1;                   // Mask: 0x1, PropSize: 0x10x10A0(0x1)(None)
	uint8                                        bIsLocked : 1;                                     // Mask: 0x2, PropSize: 0x10x10A0(0x1)(None)
	uint8                                        bIsPinLocked : 1;                                  // Mask: 0x4, PropSize: 0x10x10A0(0x1)(None)
	uint8                                        bAdminOnlyAccess : 1;                              // Mask: 0x8, PropSize: 0x10x10A0(0x1)(None)
	uint8                                        BitPad_375 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CD0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       CurrentPinCode;                                    // 0x10A4(0x4)(None)
	uint8                                        Pad_3CD1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ElevateIcon;                                       // 0x10B0(0x8)(ZeroConstructor)
	class UTexture2D*                            DelevateIcon;                                      // 0x10B8(0x8)(ZeroConstructor)
	class UTexture2D*                            StopIcon;                                          // 0x10C0(0x8)(ZeroConstructor)
	class UTexture2D*                            CallToMeIcon;                                      // 0x10C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureElevatorPlatform* GetDefaultObj();

	void ServerActivate(class APlayerController* ForPC, bool bForceDirection, enum class EPrimalStructureElevatorState Dir, float DistanceToTravelOverride);
	void PlatformIsActive(enum class EPrimalStructureElevatorState Direction, bool ReturnValue);
	void OnRep_bIsActivated();
	void HasSamePinCode(class APrimalStructureItemContainer* OtherContainer, bool ReturnValue);
	void HasReachedMaxWeight(bool ReturnValue);
	void GetTrackHeight(float ReturnValue);
	void GetCurrentLiftedWeight(float ReturnValue);
	void GetAllTrackStructures(const TArray<class AActor*>& Tracks);
	void Deactivate(bool bSwitchDirection);
	void BPElevatorStopped(bool bSwitchedDirection, enum class EPrimalStructureElevatorState NewDirection);
	void Activate(class APlayerController* ForPC, bool bForceDirection, enum class EPrimalStructureElevatorState Dir, float DistanceToTravelOverride);
};

// 0x18 (0x1478 - 0x1460)
// Class ShooterGame.PrimalStructureElevatorTrack
class APrimalStructureElevatorTrack : public APrimalStructureItemContainer
{
public:
	bool                                         bHasBase;                                          // 0x1460(0x1)(None)
	uint8                                        Pad_3CD2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalStructureElevatorPlatform> ElevatorBase;                                      // 0x1464(0x8)(ZeroConstructor)
	uint8                                        bAddElevatorMultiUseEntries : 1;                   // Mask: 0x1, PropSize: 0x10x146C(0x1)(None)
	uint8                                        bRequiresPower : 1;                                // Mask: 0x2, PropSize: 0x10x146C(0x1)(None)
	uint8                                        BitPad_376 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CD3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TrackTopPoint;                                     // 0x1470(0x4)(None)
	float                                        TrackBottomPoint;                                  // 0x1474(0x4)(None)

	static class UClass* StaticClass();
	static class APrimalStructureElevatorTrack* GetDefaultObj();

	void SetElevatorBase(class APrimalStructureElevatorPlatform* NewBase);
	void MulticastSetElevatorBase(class APrimalStructureElevatorPlatform* NewBase);
	void HasPlatformAttachedToTheTrack(bool ReturnValue);
	void ClientHasPlatform();
	void BPGetElevatorPlatform(class APrimalStructureElevatorPlatform* ReturnValue);
};

// 0xE0 (0x10E0 - 0x1000)
// Class ShooterGame.PrimalStructureExplosive
class APrimalStructureExplosive : public APrimalStructure
{
public:
	uint32                                       ConstructorPlayerDataID;                           // 0x1000(0x4)(None)
	uint8                                        Pad_3CD4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     ConstructorPawn;                                   // 0x1008(0x8)(ZeroConstructor)
	int32                                        ConstructorTargetingTeam;                          // 0x1010(0x4)(None)
	uint8                                        BitPad_377 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAnimatePlacement : 1;                             // Mask: 0x2, PropSize: 0x10x1014(0x1)(None)
	uint8                                        BitPad_378 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CD5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ExplosiveLocOffset;                                // 0x1018(0x18)(None)
	struct FRotator                              ExplosiveRotOffset;                                // 0x1030(0x18)(None)
	float                                        PlacementInitialSpeed;                             // 0x1048(0x4)(None)
	float                                        PlacementMaxSpeed;                                 // 0x104C(0x4)(None)
	float                                        PlacementAccel;                                    // 0x1050(0x4)(None)
	float                                        ExplosionDamage;                                   // 0x1054(0x4)(None)
	float                                        ExplosionRadius;                                   // 0x1058(0x4)(None)
	float                                        ExplosionImpulse;                                  // 0x105C(0x4)(None)
	class UClass*                                ExplosionDamageType;                               // 0x1060(0x8)(ZeroConstructor)
	class UClass*                                ExplosiveAmmoItemTemplate;                         // 0x1068(0x8)(ZeroConstructor)
	uint8                                        bAlertDinos : 1;                                   // Mask: 0x1, PropSize: 0x10x1070(0x1)(None)
	uint8                                        BitPad_379 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CD6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlertDinosRange;                                   // 0x1074(0x4)(None)
	class UClass*                                PickupItemClass;                                   // 0x1078(0x8)(ZeroConstructor)
	int32                                        PickUpQuantity;                                    // 0x1080(0x4)(None)
	uint8                                        Pad_3CD7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  AnimatedComponent;                                 // 0x1088(0x8)(ZeroConstructor)
	float                                        FluidSimSplashStrength;                            // 0x1090(0x4)(None)
	uint8                                        Pad_3CD8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        FluidSimSplashTemplateOverride;                    // 0x1098(0x8)(ZeroConstructor)
	uint8                                        Pad_3CD9[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureExplosive* GetDefaultObj();

	void NetIgnoreDestructionEvents();
	void ApplyPlacementPreview();
};

// 0x120 (0x1580 - 0x1460)
// Class ShooterGame.PrimalStructureItemContainer_CropPlot
class APrimalStructureItemContainer_CropPlot : public APrimalStructureItemContainer
{
public:
	class UClass*                                SeedBaseItemTemplate;                              // 0x1460(0x8)(ZeroConstructor)
	class UClass*                                FertilizerBaseItemTemplate;                        // 0x1468(0x8)(ZeroConstructor)
	class UClass*                                WaterNearbyStructureTemplate;                      // 0x1470(0x8)(ZeroConstructor)
	float                                        CropRefreshIntervalMin;                            // 0x1478(0x4)(None)
	float                                        CropRefreshIntervalMax;                            // 0x147C(0x4)(None)
	float                                        WaterNearbyStructureRange;                         // 0x1480(0x4)(None)
	float                                        MaxWaterAmount;                                    // 0x1484(0x4)(None)
	float                                        ActiveRainWaterIncreaseSpeed;                      // 0x1488(0x4)(None)
	float                                        AverageRainWaterIncreaseMultiplier;                // 0x148C(0x4)(None)
	float                                        WaterItemAmountMultiplier;                         // 0x1490(0x4)(None)
	uint8                                        Pad_3CDB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ExtraCropMeshScale;                                // 0x1498(0x18)(None)
	float                                        CropRefreshInterval;                               // 0x14B0(0x4)(None)
	float                                        CropPhaseFertilizerCache;                          // 0x14B4(0x4)(None)
	float                                        CropFruitFertilizerCache;                          // 0x14B8(0x4)(None)
	uint8                                        bUsesCrop : 1;                                     // Mask: 0x1, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bIsWaterTank : 1;                                  // Mask: 0x2, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bGainWaterOverTime : 1;                            // Mask: 0x4, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bAutoFill : 1;                                     // Mask: 0x8, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bDontAddWaterOnInventoryItemUsed : 1;              // Mask: 0x10, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bAllowOpenToSky : 1;                               // Mask: 0x20, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bUseBPGetAdditionalGrowthMultiplier : 1;           // Mask: 0x40, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bIsFertilized : 1;                                 // Mask: 0x80, PropSize: 0x10x14BC(0x1)(None)
	uint8                                        bIsWatered : 1;                                    // Mask: 0x1, PropSize: 0x10x14BD(0x1)(None)
	uint8                                        bIsSeeded : 1;                                     // Mask: 0x2, PropSize: 0x10x14BD(0x1)(None)
	uint8                                        bHasFruitItems : 1;                                // Mask: 0x4, PropSize: 0x10x14BD(0x1)(None)
	uint8                                        bCropUsesGreenhouse : 1;                           // Mask: 0x8, PropSize: 0x10x14BD(0x1)(None)
	uint8                                        bShowWaterAmount : 1;                              // Mask: 0x10, PropSize: 0x10x14BD(0x1)(None)
	uint8                                        BitPad_37A : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESeedCropPhase                    CurrentCropPhase;                                  // 0x14BE(0x1)(None)
	uint8                                        Pad_3CDC[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PlantedCrop;                                       // 0x14C0(0x8)(ZeroConstructor)
	TWeakObjectPtr<class APrimalStructureItemContainer> IrrigationWaterTap;                                // 0x14C8(0x8)(ZeroConstructor)
	double                                       LastCropRefreshTime;                               // 0x14D0(0x8)(None)
	uint8                                        Pad_3CDD[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshComponent*>          MyCropMeshes;                                      // 0x14E8(0x10)(ZeroConstructor)
	class APrimalStructure*                      MyCropStructure;                                   // 0x14F8(0x8)(ZeroConstructor)
	double                                       CropRefreshTimeCache;                              // 0x1500(0x8)(None)
	int32                                        FertilizerAmount;                                  // 0x1508(0x4)(None)
	float                                        WaterAmount;                                       // 0x150C(0x4)(None)
	uint8                                        NumGreenHouseStructures;                           // 0x1510(0x1)(None)
	uint8                                        Pad_3CDE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        WateringItemTemplates;                             // 0x1518(0x10)(ZeroConstructor)
	float                                        FertilizerConsumptionRateMultiplier;               // 0x1528(0x4)(None)
	uint8                                        Pad_3CDF[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                WateredOverridesCraftingItemTemplate;              // 0x1538(0x8)(ZeroConstructor)
	float                                        MinWateredOverridesCrafting;                       // 0x1540(0x4)(None)
	int32                                        MaxGreenHouseStructures;                           // 0x1544(0x4)(None)
	float                                        MaxGreenHouseCropGrowthMultiplier;                 // 0x1548(0x4)(None)
	float                                        GainWaterRate;                                     // 0x154C(0x4)(None)
	uint8                                        Pad_3CE0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CropMaxFruitsMultiplier;                           // 0x1558(0x4)(None)
	uint8                                        Pad_3CE1[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            FertilizerOnIcon;                                  // 0x1568(0x8)(ZeroConstructor)
	class UTexture2D*                            FertilizerOffIcon;                                 // 0x1570(0x8)(ZeroConstructor)
	class UTexture2D*                            DestroyPlantedCropIcon;                            // 0x1578(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer_CropPlot* GetDefaultObj();

	void RemovePlantedCrop();
	void OnRep_WaterAmount();
	void OnRep_PlantedCrop(class UClass* PrevPlantedCrop);
	void OnRep_HasFruitItems(bool bPreviousHasFruitItems);
	void OnRep_CurrentCropPhase(enum class ESeedCropPhase PrevCropPhase);
	void BPGetAdditionalGrowthMultiplier(float ReturnValue);
	void BPClientUpdateWaterAmount();
	void AddWater(float Amount, bool bAllowNetworking, float ReturnValue);
};

// 0x30 (0x15B0 - 0x1580)
// Class ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems
class APrimalStructureItemContainer_CropPlot_VisualItems : public APrimalStructureItemContainer_CropPlot
{
public:
	class UStaticMeshComponent*                  MyExtraStaticMesh;                                 // 0x1580(0x8)(ZeroConstructor)
	class UStaticMesh*                           ExtraStaticMesh_NoItems;                           // 0x1588(0x8)(ZeroConstructor)
	class UStaticMesh*                           ExtraStaticMesh_HasItems;                          // 0x1590(0x8)(ZeroConstructor)
	TArray<class UClass*>                        ItemClassesToCheck;                                // 0x1598(0x10)(ZeroConstructor)
	uint8                                        bHasItems : 1;                                     // Mask: 0x1, PropSize: 0x10x15A8(0x1)(None)
	uint8                                        bDoItemVisuals : 1;                                // Mask: 0x2, PropSize: 0x10x15A8(0x1)(None)
	uint8                                        Pad_3CE2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer_CropPlot_VisualItems* GetDefaultObj();

	void OnRep_HasItems();
	void BPUpdateItemVisuals();
};

// 0x218 (0x1678 - 0x1460)
// Class ShooterGame.PrimalStructureItemContainer_SupplyCrate
class APrimalStructureItemContainer_SupplyCrate : public APrimalStructureItemContainer
{
public:
	float                                        MinItemSets;                                       // 0x1460(0x4)(None)
	float                                        MaxItemSets;                                       // 0x1464(0x4)(None)
	float                                        NumItemSetsPower;                                  // 0x1468(0x4)(None)
	bool                                         bSetsRandomWithoutReplacement;                     // 0x146C(0x1)(None)
	uint8                                        Pad_3CE3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinQualityMultiplier;                              // 0x1470(0x4)(None)
	float                                        MaxQualityMultiplier;                              // 0x1474(0x4)(None)
	float                                        AboveOneExtraQualityMultiplier;                    // 0x1478(0x4)(None)
	uint8                                        Pad_3CE4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSupplyCrateItemSet>           ItemSets;                                          // 0x1480(0x10)(ZeroConstructor)
	class UClass*                                ItemSetsOverride;                                  // 0x1490(0x8)(ZeroConstructor)
	TArray<struct FSupplyCrateItemSet>           AdditionalItemSets;                                // 0x1498(0x10)(ZeroConstructor)
	class UClass*                                AdditionalItemSetsOverride;                        // 0x14A8(0x8)(ZeroConstructor)
	int32                                        RequiredLevelToAccess;                             // 0x14B0(0x4)(None)
	int32                                        MaxLevelToAccess;                                  // 0x14B4(0x4)(None)
	float                                        InitialTimeToLoseHealth;                           // 0x14B8(0x4)(None)
	float                                        IntervalTimeToLoseHealth;                          // 0x14BC(0x4)(None)
	float                                        IntervalPercentHealthToLose;                       // 0x14C0(0x4)(None)
	uint8                                        Pad_3CE5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               HUDWorldOffset;                                    // 0x14C8(0x18)(None)
	uint8                                        bGeneratedCrateItems : 1;                          // Mask: 0x1, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bIsBonusCrate : 1;                                 // Mask: 0x2, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bIsQuestCrate : 1;                                 // Mask: 0x4, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bSpawnCrateOnTopOfStructures : 1;                  // Mask: 0x8, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        bAppliedBuff : 1;                                  // Mask: 0x10, PropSize: 0x10x14E0(0x1)(None)
	uint8                                        BitPad_37B : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CE6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class ASupplyCrateSpawningVolume> LinkedToCrateSpawnVolume;                          // 0x14E4(0x8)(ZeroConstructor)
	uint8                                        Pad_3CE7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class APrimalDinoCharacter>> LinkedNPCs;                                        // 0x14F0(0x10)(ZeroConstructor)
	uint8                                        Pad_3CE8[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnInInDamageCollisionBoxExtent;                 // 0x1518(0x18)(None)
	bool                                         bIsUnderWaterCrate;                                // 0x1530(0x1)(None)
	uint8                                        Pad_3CE9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrateMovementDuration;                             // 0x1534(0x4)(None)
	class UCurveVector*                          CrateLocationCurve;                                // 0x1538(0x8)(ZeroConstructor)
	class UCurveVector*                          CrateRotationCurve;                                // 0x1540(0x8)(ZeroConstructor)
	enum class ECrateMovementMode                CrateMovementMode;                                 // 0x1548(0x1)(None)
	uint8                                        Pad_3CEA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ServerCrateMovementUpdateRateMinMax;               // 0x1550(0x10)(None)
	struct FVector2D                             ClientCrateMovementUpdateRateMinMax;               // 0x1560(0x10)(None)
	class UMaterialInterface*                    InvisibleMaterial;                                 // 0x1570(0x8)(ZeroConstructor)
	uint8                                        bEnableHideSupplyCratesCheck : 1;                  // Mask: 0x1, PropSize: 0x10x1578(0x1)(None)
	uint8                                        BitPad_37C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CEB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          CrateColorParameter;                               // 0x157C(0x10)(None)
	uint8                                        Pad_3CEC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           CrateDissolveCurve;                                // 0x1590(0x8)(ZeroConstructor)
	class UClass*                                CrateSpawnInLocationEffect;                        // 0x1598(0x8)(ZeroConstructor)
	class APrimalEmitterSpawnable*               CrateSpawnInLocationEffectRef;                     // 0x15A0(0x8)(ZeroConstructor)
	class UMeshComponent*                        RenderedCrateMeshComponent;                        // 0x15A8(0x8)(ZeroConstructor)
	struct FVector                               FinalCrateLocation;                                // 0x15B0(0x18)(None)
	struct FRotator                              FinalCrateRotation;                                // 0x15C8(0x18)(None)
	struct FVector                               CurrentCrateLocation;                              // 0x15E0(0x18)(None)
	struct FRotator                              CurrentCrateRotation;                              // 0x15F8(0x18)(None)
	struct FVector                               CurrentCrateRelLocation;                           // 0x1610(0x18)(None)
	double                                       StartedCrateMovementTime;                          // 0x1628(0x8)(None)
	double                                       NextCrateMovementUpdateTime;                       // 0x1630(0x8)(None)
	float                                        CurrentCrateCurveTime;                             // 0x1638(0x4)(None)
	float                                        CrateStartHeight;                                  // 0x163C(0x4)(None)
	uint8                                        bFinishedCrateMovement : 1;                        // Mask: 0x1, PropSize: 0x10x1640(0x1)(None)
	uint8                                        bWantsOriginalMats : 1;                            // Mask: 0x2, PropSize: 0x10x1640(0x1)(None)
	uint8                                        bIsCrateRendered : 1;                              // Mask: 0x4, PropSize: 0x10x1640(0x1)(None)
	uint8                                        bSupplyCrateHidden : 1;                            // Mask: 0x8, PropSize: 0x10x1640(0x1)(None)
	uint8                                        BitPad_37D : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CED[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            OriginalMaterials;                                 // 0x1648(0x10)(ZeroConstructor)
	double                                       NextCheckHideSupplyCratesTime;                     // 0x1658(0x8)(None)
	class UPrimalWindSourceComponent*            WindSourceComponentRef;                            // 0x1660(0x8)(ZeroConstructor)
	float                                        CurrentFadeOutTime;                                // 0x1668(0x4)(None)
	uint8                                        bDestroyWindSourceComponentOnLand : 1;             // Mask: 0x1, PropSize: 0x10x166C(0x1)(None)
	uint8                                        BitPad_37E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CEE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            SurvivorLevelUpIcon;                               // 0x1670(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer_SupplyCrate* GetDefaultObj();

	void TickFadeOut();
	void StartLosingHealth();
	void SetAppliedBuff(bool bSet);
	void OnRep_FinishedCrateMovement();
	void LoseHealth();
};

// 0x28 (0x16A0 - 0x1678)
// Class ShooterGame.PrimalStructureItemContainer_HordeCrate
class APrimalStructureItemContainer_HordeCrate : public APrimalStructureItemContainer_SupplyCrate
{
public:
	class UMaterialInterface*                    ElementPostProcessMaterial;                        // 0x1678(0x8)(ZeroConstructor)
	struct FVector                               CrateLoc;                                          // 0x1680(0x18)(None)
	double                                       LastGameplayRelevantTime;                          // 0x1698(0x8)(None)

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer_HordeCrate* GetDefaultObj();

	void SpawnElementNodePostProcess();
};

// 0x30 (0x1490 - 0x1460)
// Class ShooterGame.PrimalStructureItemContainer_VisualItems
class APrimalStructureItemContainer_VisualItems : public APrimalStructureItemContainer
{
public:
	class UStaticMeshComponent*                  MyExtraStaticMesh;                                 // 0x1460(0x8)(ZeroConstructor)
	class UStaticMesh*                           ExtraStaticMesh_NoItems;                           // 0x1468(0x8)(ZeroConstructor)
	class UStaticMesh*                           ExtraStaticMesh_HasItems;                          // 0x1470(0x8)(ZeroConstructor)
	TArray<class UClass*>                        ItemClassesToCheck;                                // 0x1478(0x10)(ZeroConstructor)
	bool                                         bIgnoreBlueprints;                                 // 0x1488(0x1)(None)
	bool                                         bIgnoreEngrams;                                    // 0x1489(0x1)(None)
	uint8                                        bHasItems : 1;                                     // Mask: 0x1, PropSize: 0x10x148A(0x1)(None)
	uint8                                        bDoItemVisuals : 1;                                // Mask: 0x2, PropSize: 0x10x148A(0x1)(None)
	uint8                                        bPreviousHasItems : 1;                             // Mask: 0x4, PropSize: 0x10x148A(0x1)(None)
	uint8                                        Pad_3CEF[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureItemContainer_VisualItems* GetDefaultObj();

	void UpdateVisuals();
	void OnRep_HasItems();
	void BPUpdateItemVisuals();
};

// 0x10 (0x1470 - 0x1460)
// Class ShooterGame.PrimalStructureKeypad
class APrimalStructureKeypad : public APrimalStructureItemContainer
{
public:
	float                                        DoorActivationRange;                               // 0x1460(0x4)(None)
	uint8                                        Pad_3CF1[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureKeypad* GetDefaultObj();

	void ActivateKeypad(class AShooterPlayerController* ForPC, int32 PinCode, bool bEnable, bool ReturnValue);
};

// 0x70 (0x1070 - 0x1000)
// Class ShooterGame.PrimalStructureLadder
class APrimalStructureLadder : public APrimalStructure
{
public:
	float                                        LadderTopPoint;                                    // 0x1000(0x4)(None)
	float                                        LadderBottomPoint;                                 // 0x1004(0x4)(None)
	struct FRotator                              LadderClimbRotationOffset;                         // 0x1008(0x18)(None)
	uint8                                        BitPad_37F : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanRetract : 1;                                   // Mask: 0x8, PropSize: 0x10x1020(0x1)(None)
	uint8                                        bCanRetractFromBottom : 1;                         // Mask: 0x10, PropSize: 0x10x1020(0x1)(None)
	uint8                                        bIsRetracted : 1;                                  // Mask: 0x20, PropSize: 0x10x1020(0x1)(None)
	uint8                                        bHasLowerLaddersRetracted : 1;                     // Mask: 0x40, PropSize: 0x10x1020(0x1)(None)
	uint8                                        bAllowPublicRetraction : 1;                        // Mask: 0x80, PropSize: 0x10x1020(0x1)(None)
	uint8                                        Pad_3CF4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            LadderRetractionSound;                             // 0x1028(0x8)(ZeroConstructor)
	class USoundBase*                            LadderUnretractionSound;                           // 0x1030(0x8)(ZeroConstructor)
	class UTexture2D*                            ClimbUpIcon;                                       // 0x1038(0x8)(ZeroConstructor)
	class UTexture2D*                            ClimbDownIcon;                                     // 0x1040(0x8)(ZeroConstructor)
	class UTexture2D*                            JumpIcon;                                          // 0x1048(0x8)(ZeroConstructor)
	class UTexture2D*                            ExtendLadderIcon;                                  // 0x1050(0x8)(ZeroConstructor)
	class UTexture2D*                            RetractLadderIcon;                                 // 0x1058(0x8)(ZeroConstructor)
	class UTexture2D*                            EnablePublicRetractionIcon;                        // 0x1060(0x8)(ZeroConstructor)
	class UTexture2D*                            DisablePublicRetractionIcon;                       // 0x1068(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureLadder* GetDefaultObj();

	void UpdateRetraction();
	void EndClimbingLadder(class AShooterCharacter* TheCharacter, bool bServerClimbOver, const struct FVector& ServerClimbOverLoc, bool bIsFromJump);
	void BP_SetLaddersRetracted(bool bRetract);
};

// 0x40 (0x14A0 - 0x1460)
// Class ShooterGame.PrimalStructureMovingContainer
class APrimalStructureMovingContainer : public APrimalStructureItemContainer
{
public:
	struct FVector                               FinalLocation;                                     // 0x1460(0x18)(None)
	struct FVector                               ItemBalloonLocation;                               // 0x1478(0x18)(None)
	uint16                                       ItemLatitude;                                      // 0x1490(0x2)(None)
	uint16                                       ItemLongitude;                                     // 0x1492(0x2)(None)
	float                                        LocationName;                                      // 0x1494(0x4)(None)
	uint8                                        bHasSetLocation;                                   // 0x1498(0x1)(None)
	uint8                                        Pad_3CF5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureMovingContainer* GetDefaultObj();

};

// 0x1C0 (0x678 - 0x4B8)
// Class ShooterGame.PrimalStructurePlacer
class APrimalStructurePlacer : public AInfo
{
public:
	uint8                                        Pad_3CF6[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPrimalStructurePlacerState       CurrentState;                                      // 0x518(0x1)(None)
	uint8                                        Pad_3CF7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentPlacingStructureIndex;                      // 0x51C(0x4)(None)
	class APrimalStructure*                      CurrentPlacingStructure;                           // 0x520(0x8)(ZeroConstructor)
	class APrimalStructure*                      CurrentSnapTarget;                                 // 0x528(0x8)(ZeroConstructor)
	uint8                                        bDebugStructures : 1;                              // Mask: 0x1, PropSize: 0x10x530(0x1)(None)
	uint8                                        bForceDisplayMissionAreaStructureNoBuildZones : 1; // Mask: 0x2, PropSize: 0x10x530(0x1)(None)
	uint8                                        BitPad_380 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3CF8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalStructure>> PlaceableStructures;                               // 0x538(0x10)(ZeroConstructor)
	int32                                        PlacingAlignmentMode;                              // 0x548(0x4)(None)
	int32                                        PlacingRotationMode;                               // 0x54C(0x4)(None)
	class FName                                  RotationAxisName;                                  // 0x550(0x8)(None)
	float                                        RotationSpeed;                                     // 0x558(0x4)(None)
	class FName                                  AltRotationAxisName;                               // 0x55C(0x8)(None)
	float                                        AltRotationSpeed;                                  // 0x564(0x4)(None)
	struct FCanvasIcon                           RotationIcon;                                      // 0x568(0x18)(ZeroConstructor)
	float                                        RotationIconSize;                                  // 0x580(0x4)(None)
	float                                        RotationIconScale;                                 // 0x584(0x4)(None)
	class FName                                  PitchAxisName;                                     // 0x588(0x8)(None)
	float                                        PitchSpeed;                                        // 0x590(0x4)(None)
	class FName                                  AltPitchAxisName;                                  // 0x594(0x8)(None)
	float                                        AltPitchSpeed;                                     // 0x59C(0x4)(None)
	float                                        YawOffset;                                         // 0x5A0(0x4)(None)
	float                                        YawOffsetIncrement;                                // 0x5A4(0x4)(None)
	class UCurveFloat*                           PreviewMaterialLuminanceCurve;                     // 0x5A8(0x8)(ZeroConstructor)
	class FString                                PressUseString;                                    // 0x5B0(0x10)(None)
	class FString                                HoldUseString;                                     // 0x5C0(0x10)(None)
	class FString                                KeyUseString;                                      // 0x5D0(0x10)(None)
	class UTexture2D*                            GamepadButtonUse;                                  // 0x5E0(0x8)(ZeroConstructor)
	class FString                                PressGiveDefaultWeaponString;                      // 0x5E8(0x10)(None)
	class FString                                HoldGiveDefaultWeaponString;                       // 0x5F8(0x10)(None)
	class FString                                KeyGiveDefaultWeaponString;                        // 0x608(0x10)(None)
	class UTexture2D*                            GamepadButtonGiveDefaultWeapon;                    // 0x618(0x8)(ZeroConstructor)
	class FString                                KeyReloadString;                                   // 0x620(0x10)(None)
	class UTexture2D*                            GamepadReload;                                     // 0x630(0x8)(ZeroConstructor)
	class FString                                NumVariantsString;                                 // 0x638(0x10)(None)
	uint8                                        Pad_3CF9[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class UPrimalItem>            CurrentlyPlacingWithItem;                          // 0x670(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructurePlacer* GetDefaultObj();

	void SetForceDisplayMissionAreaStructureNoBuildZones(bool bForceDisplay);
	void SetChoosingRotation(bool bNewChoosingRotation);
	void IsPlacingActive(bool ReturnValue);
	void HandleSnapCycleActionTimer();
	void HandleOnUseActionTimer();
	void GetLastPlacementProperties(const struct FVector& OutLastHitLoc, const struct FRotator& OutLastHitRot, const struct FRotator& OutLastViewRot);
	void DrawStructurePreviewHUD(class AShooterHUD* HUD, class APrimalStructure* PlacingStructure);
};

// 0xB0 (0x1120 - 0x1070)
// Class ShooterGame.PrimalStructurePortableLadder
class APrimalStructurePortableLadder : public APrimalStructureLadder
{
public:
	float                                        MaximumHeightAllowedForLadder;                     // 0x1070(0x4)(None)
	uint8                                        Pad_3CFA[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                BottomAnimBlueprint;                               // 0x1088(0x8)(ZeroConstructor)
	class UClass*                                MidAnimBlueprint;                                  // 0x1090(0x8)(ZeroConstructor)
	class UAnimMontage*                          MidRetractedAnimMontageBlueprint;                  // 0x1098(0x8)(ZeroConstructor)
	class UAnimMontage*                          BottomRetractedAnimMontageBlueprint;               // 0x10A0(0x8)(ZeroConstructor)
	class UAnimMontage*                          MidAnimMontageBlueprint;                           // 0x10A8(0x8)(ZeroConstructor)
	class UAnimMontage*                          BottomAnimMontageBlueprint;                        // 0x10B0(0x8)(ZeroConstructor)
	class UAnimMontage*                          MidAnimMontageExtendedBlueprint;                   // 0x10B8(0x8)(ZeroConstructor)
	class UAnimMontage*                          BottomAnimMontageExtendedBlueprint;                // 0x10C0(0x8)(ZeroConstructor)
	class USkeletalMesh*                         MidSkeletalMesh;                                   // 0x10C8(0x8)(ZeroConstructor)
	class USkeletalMesh*                         MyBottomSkeletalMesh;                              // 0x10D0(0x8)(ZeroConstructor)
	TArray<class USkeletalMeshComponent*>        MidLadderSkeletalMeshs;                            // 0x10D8(0x10)(ZeroConstructor)
	class USkeletalMeshComponent*                BottomLadderSkeletalMesh;                          // 0x10E8(0x8)(ZeroConstructor)
	TArray<class USkeletalMeshComponent*>        SkeletalMeshsForAnimation;                         // 0x10F0(0x10)(ZeroConstructor)
	uint8                                        Pad_3CFB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bisDonePlacing : 1;                                // Mask: 0x1, PropSize: 0x10x1110(0x1)(None)
	uint8                                        Pad_3CFC[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructurePortableLadder* GetDefaultObj();

	void UpdateLadder();
	void UpdateBoxCollisionForRetraction(bool bRetracted);
	void PlaySetupAnimation();
	void BuildLadder();
};

// 0xA8 (0x10A8 - 0x1000)
// Class ShooterGame.PrimalStructureSeaMine
class APrimalStructureSeaMine : public APrimalStructure
{
public:
	class USphereComponent*                      TriggerComponent;                                  // 0x1000(0x8)(ZeroConstructor)
	class USphereComponent*                      ExplodingTriggerComponent;                         // 0x1008(0x8)(ZeroConstructor)
	class UParticleSystem*                       ActivatedMineParticleSystem;                       // 0x1010(0x8)(ZeroConstructor)
	struct FVector                               ActivatedMineParticleSystemOffset;                 // 0x1018(0x18)(None)
	TArray<class UMaterialInterface*>            ActivateMaterials;                                 // 0x1030(0x10)(ZeroConstructor)
	class USoundBase*                            ActivatedSound;                                    // 0x1040(0x8)(ZeroConstructor)
	float                                        SeaMineSpeed;                                      // 0x1048(0x4)(None)
	float                                        SeaMineExplodeTime;                                // 0x104C(0x4)(None)
	float                                        ExplosionDamage;                                   // 0x1050(0x4)(None)
	float                                        ExplosionRadius;                                   // 0x1054(0x4)(None)
	float                                        ExplosionImpulse;                                  // 0x1058(0x4)(None)
	uint8                                        Pad_3D00[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ExplosionDamageType;                               // 0x1060(0x8)(ZeroConstructor)
	int32                                        OwnerTargetingTeam;                                // 0x1068(0x4)(None)
	uint8                                        Pad_3D01[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APrimalCharacter*>              TriggerOverlappingCharacters;                      // 0x1070(0x10)(ZeroConstructor)
	uint8                                        bActivatedSeaMine : 1;                             // Mask: 0x1, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bDisableExplosion : 1;                             // Mask: 0x2, PropSize: 0x10x1080(0x1)(None)
	uint8                                        BitPad_381 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D02[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastKnownTargetLocation;                           // 0x1088(0x18)(None)
	class APrimalCharacter*                      SeaMineTarget;                                     // 0x10A0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureSeaMine* GetDefaultObj();

	void RefreshSeaMineTarget();
	void OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_SeaMineTarget();
	void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnExplodingTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Explode();
};

// 0x58 (0x15D0 - 0x1578)
// Class ShooterGame.PrimalStructureSeatingMusic
class APrimalStructureSeatingMusic : public APrimalStructureSeating
{
public:
	class UStaticMeshComponent*                  StickMesh1;                                        // 0x1578(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  StickMesh2;                                        // 0x1580(0x8)(ZeroConstructor)
	class FName                                  StickMeshAttachPoint1;                             // 0x1588(0x8)(None)
	class FName                                  StickMeshAttachPoint2;                             // 0x1590(0x8)(None)
	TArray<class USoundBase*>                    InstrumentSounds;                                  // 0x1598(0x10)(ZeroConstructor)
	TArray<class UAnimMontage*>                  InstrumentPawnAnimations;                          // 0x15A8(0x10)(ZeroConstructor)
	float                                        MinimumTimeBetweenPlays;                           // 0x15B8(0x4)(None)
	uint8                                        Pad_3D05[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<double>                               LastPlayInstrumentTime;                            // 0x15C0(0x10)(None)

	static class UClass* StaticClass();
	static class APrimalStructureSeatingMusic* GetDefaultObj();

};

// 0x30 (0x58 - 0x28)
// Class ShooterGame.PrimalStructureSettings
class UPrimalStructureSettings : public UObject
{
public:
	class FName                                  TierTag;                                           // 0x28(0x8)(None)
	TArray<struct FDamageTypeAdjuster>           BaseDamageTypeAdjusters;                           // 0x30(0x10)(ZeroConstructor)
	TArray<struct FDamageTypeAdjuster>           ExtraDamageTypeAdjusters;                          // 0x40(0x10)(None)
	float                                        DecayDestructionPeriodMultiplier;                  // 0x50(0x4)(None)
	uint8                                        Pad_3D06[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalStructureSettings* GetDefaultObj();

};

// 0x38 (0x1038 - 0x1000)
// Class ShooterGame.PrimalStructureSign
class APrimalStructureSign : public APrimalStructure
{
public:
	class FString                                SignText;                                          // 0x1000(0x10)(None)
	float                                        SignWidth;                                         // 0x1010(0x4)(None)
	int32                                        MaxNumberofCharacters;                             // 0x1014(0x4)(None)
	float                                        MinFontSize;                                       // 0x1018(0x4)(None)
	float                                        DefaultScale;                                      // 0x101C(0x4)(None)
	class UTextRenderComponent*                  TextRender;                                        // 0x1020(0x8)(ZeroConstructor)
	class UTexture2D*                            SetSignTextIcon;                                   // 0x1028(0x8)(ZeroConstructor)
	uint8                                        Pad_3D07[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureSign* GetDefaultObj();

	void OnRep_SignText(const class FString& PreviousSignText);
};

// 0x20 (0x10F0 - 0x10D0)
// Class ShooterGame.PrimalStructureSkeletalDoor
class APrimalStructureSkeletalDoor : public APrimalStructureDoor
{
public:
	class USkeletalMeshComponent*                SkeletalDoorComponent;                             // 0x10D0(0x8)(ZeroConstructor)
	class UShapeComponent*                       DoorCollisionComponent;                            // 0x10D8(0x8)(ZeroConstructor)
	class UShapeComponent*                       TriggerComponent;                                  // 0x10E0(0x8)(ZeroConstructor)
	class UClass*                                BuffToApplyWhenInsideStructure;                    // 0x10E8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureSkeletalDoor* GetDefaultObj();

	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void GetDoorOpenState(int32 ReturnValue);
};

// 0x98 (0x450 - 0x3B8)
// Class ShooterGame.PrimalStructureToolTipWidget
class UPrimalStructureToolTipWidget : public UToolTipWidget
{
public:
	class UClass*                                ItemsToDisplayModuleTemplate;                      // 0x3B8(0x8)(ZeroConstructor)
	uint8                                        Pad_3D0C[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalStructureToolTipWidget* GetDefaultObj();

};

// 0x8 (0x1008 - 0x1000)
// Class ShooterGame.PrimalStructureTribeFlag
class APrimalStructureTribeFlag : public APrimalStructure
{
public:
	uint32                                       TribeID;                                           // 0x1000(0x4)(None)
	uint8                                        Pad_3D0D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureTribeFlag* GetDefaultObj();

};

// 0xB0 (0x1190 - 0x10E0)
// Class ShooterGame.PrimalStructureTripwire
class APrimalStructureTripwire : public APrimalStructureExplosive
{
public:
	class UParticleSystemComponent*              WireComponent;                                     // 0x10E0(0x8)(ZeroConstructor)
	class UBoxComponent*                         TriggerComponent;                                  // 0x10E8(0x8)(ZeroConstructor)
	struct FRotator                              CableRotOffset;                                    // 0x10F0(0x18)(None)
	float                                        MaximumCableLength;                                // 0x1108(0x4)(None)
	uint8                                        bOnlyPrimalCharacters : 1;                         // Mask: 0x1, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bIgnoreAllies : 1;                                 // Mask: 0x2, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bNotifyTripChat : 1;                               // Mask: 0x4, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bShowingWireComponent : 1;                         // Mask: 0x8, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bForceIgnoreAllies : 1;                            // Mask: 0x10, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bForceIgnoreWildDinos : 1;                         // Mask: 0x20, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bDoingWireCheck : 1;                               // Mask: 0x40, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bUnwiredTrap : 1;                                  // Mask: 0x80, PropSize: 0x10x110C(0x1)(None)
	uint8                                        bAllowToggleForceIgnoreAllies : 1;                 // Mask: 0x1, PropSize: 0x10x110D(0x1)(None)
	uint8                                        bAllowToggleForceIgnoreWildDinos : 1;              // Mask: 0x2, PropSize: 0x10x110D(0x1)(None)
	uint8                                        BitPad_382 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D0F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            NotifyTripChatSound;                               // 0x1110(0x8)(ZeroConstructor)
	class FString                                BoxName;                                           // 0x1118(0x10)(None)
	class APrimalStructureTripwire*              ConnectedTo;                                       // 0x1128(0x8)(ZeroConstructor)
	int32                                        OwnerTargetingTeam;                                // 0x1130(0x4)(None)
	uint8                                        Pad_3D10[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            RewireIcon;                                        // 0x1160(0x8)(ZeroConstructor)
	class UTexture2D*                            UnwireIcon;                                        // 0x1168(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableTripAlliesIcon;                              // 0x1170(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableTripAlliesIcon;                             // 0x1178(0x8)(ZeroConstructor)
	class UTexture2D*                            EnableTripWildDinosIcon;                           // 0x1180(0x8)(ZeroConstructor)
	class UTexture2D*                            DisableTripWildDinosIcon;                          // 0x1188(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureTripwire* GetDefaultObj();

	void WireCheck();
	void TriggerTouched(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SetConnectedTo(class APrimalStructureTripwire* InTripwire);
	void OnRep_UnwiredTrap();
	void OnRep_ConnectedTo();
	void NetUpdateBoxName(const class FString& NewName);
	void Multicast_ConnectedTo(class APrimalStructureTripwire* InTripwire);
	void DisconnectMe();
};

// 0x268 (0x16C8 - 0x1460)
// Class ShooterGame.PrimalStructureTurret
class APrimalStructureTurret : public APrimalStructureItemContainer
{
public:
	TWeakObjectPtr<class AActor>                 WeakTarget;                                        // 0x1460(0x8)(ZeroConstructor)
	class UClass*                                AmmoItemTemplate;                                  // 0x1468(0x8)(ZeroConstructor)
	class UClass*                                MuzzleFlashEmitter;                                // 0x1470(0x8)(ZeroConstructor)
	float                                        FireInterval;                                      // 0x1478(0x4)(None)
	uint8                                        Pad_3D13[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastFireTime;                                      // 0x1480(0x8)(None)
	double                                       LastLongReloadStartTime;                           // 0x1488(0x8)(None)
	float                                        MaxFireYawDelta;                                   // 0x1490(0x4)(None)
	float                                        MaxFirePitchDelta;                                 // 0x1494(0x4)(None)
	struct FVector                               TargetingLocOffset;                                // 0x1498(0x18)(None)
	float                                        TargetingRotationInterpSpeed;                      // 0x14B0(0x4)(None)
	float                                        NonTargetingRotationInterpSpeed;                   // 0x14B4(0x4)(None)
	float                                        TargetingRanges[0x3];                              // 0x14B8(0xC)(None)
	uint8                                        Pad_3D14[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TargetingTraceOffset;                              // 0x14C8(0x18)(None)
	class UClass*                                FireDamageType;                                    // 0x14E0(0x8)(ZeroConstructor)
	float                                        FireDamageAmount;                                  // 0x14E8(0x4)(None)
	float                                        FireDamageImpulse;                                 // 0x14EC(0x4)(None)
	class UParticleSystem*                       TrailFX;                                           // 0x14F0(0x8)(ZeroConstructor)
	struct FRotator                              TurretAimRotOffset;                                // 0x14F8(0x18)(None)
	struct FVector                               AimTargetLocOffset;                                // 0x1510(0x18)(None)
	struct FVector                               PlayerProneTargetOffset;                           // 0x1528(0x18)(None)
	float                                        AimSpread;                                         // 0x1540(0x4)(None)
	uint8                                        bUseNoWarning : 1;                                 // Mask: 0x1, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bUseLevelLimitsForTargeting : 1;                   // Mask: 0x2, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bUseInclusionListTargeting : 1;                    // Mask: 0x4, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bUseNoAmmo : 1;                                    // Mask: 0x8, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bOnlyUseAmmoOnDamage : 1;                          // Mask: 0x10, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bHasOmniDirectionalFire : 1;                       // Mask: 0x20, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bFireProjectiles : 1;                              // Mask: 0x40, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bClientFireProjectile : 1;                         // Mask: 0x80, PropSize: 0x10x1544(0x1)(None)
	uint8                                        bIsTargeting : 1;                                  // Mask: 0x1, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bInWaterOnlyTargetWater : 1;                       // Mask: 0x2, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bTurretIgnoreProjectiles : 1;                      // Mask: 0x4, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bUseBPTurretPreventsTargeting : 1;                 // Mask: 0x8, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bAimIgnoreSockets : 1;                             // Mask: 0x10, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bTurretIsDisabledTooManyNearbyTurrets : 1;         // Mask: 0x20, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bUseAmmoFromNearbyContainer : 1;                   // Mask: 0x40, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bUseMaxInventoryForAmmoContainerReload : 1;        // Mask: 0x80, PropSize: 0x10x1545(0x1)(None)
	uint8                                        bIsTargetListInclusion : 1;                        // Mask: 0x1, PropSize: 0x10x1546(0x1)(None)
	uint8                                        BitPad_383 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        RangeSetting;                                      // 0x1547(0x1)(None)
	uint8                                        AISetting;                                         // 0x1548(0x1)(None)
	uint8                                        WarningSetting;                                    // 0x1549(0x1)(None)
	uint8                                        Pad_3D15[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinTargetLevel;                                    // 0x154C(0x4)(None)
	int32                                        MaxTargetLevel;                                    // 0x1550(0x4)(None)
	uint8                                        Pad_3D16[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        DinoTargetList;                                    // 0x1558(0x10)(ZeroConstructor)
	int32                                        NumBullets;                                        // 0x1568(0x4)(None)
	int32                                        NumBulletsPerShot;                                 // 0x156C(0x4)(None)
	int32                                        LongAmmoReloadCD;                                  // 0x1570(0x4)(None)
	float                                        MaxAmmoContainerReloadPercent;                     // 0x1574(0x4)(None)
	float                                        AlwaysEnableFastTurretTargetingOverVelocity;       // 0x1578(0x4)(None)
	uint8                                        Pad_3D17[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ProjectileClass;                                   // 0x1580(0x8)(ZeroConstructor)
	float                                        WarningExpirationTime;                             // 0x1588(0x4)(None)
	uint8                                        Pad_3D18[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                WarningEmitterShort;                               // 0x1590(0x8)(ZeroConstructor)
	class UClass*                                WarningEmitterLong;                                // 0x1598(0x8)(ZeroConstructor)
	float                                        BatteryIntervalFromActivationBeforeFiring;         // 0x15A0(0x4)(None)
	uint8                                        Pad_3D19[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UChildActorComponent*                  MyChildEmitterTargetingEffect;                     // 0x15C0(0x8)(ZeroConstructor)
	struct FRotator                              DefaultTurretAimRotOffset;                         // 0x15C8(0x18)(None)
	struct FVector                               MuzzleLocOffset;                                   // 0x15E0(0x18)(None)
	uint8                                        Pad_3D1A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MagazineSize;                                      // 0x1600(0x4)(None)
	float                                        RangeToCheckForAmmo;                               // 0x1604(0x4)(None)
	float                                        AmmoBoxReloadCooldown;                             // 0x1608(0x4)(None)
	uint8                                        Pad_3D1B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  CopySettingsRangeMesh;                             // 0x1610(0x8)(ZeroConstructor)
	uint8                                        Pad_3D1C[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ShowCopySettingsVisualIcon;                        // 0x1628(0x8)(ZeroConstructor)
	class UTexture2D*                            HideCopySettingsVisualIcon;                        // 0x1630(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsIcon;                                  // 0x1638(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsInRangeIcon;                           // 0x1640(0x8)(ZeroConstructor)
	class UTexture2D*                            CopySettingsInRangeWithPinCodeIcon;                // 0x1648(0x8)(ZeroConstructor)
	class UTexture2D*                            TargetingOptionsIcon;                              // 0x1650(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    RangeSettingIcons;                                 // 0x1658(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    AISettingIcons;                                    // 0x1668(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    WarningSettingIcons;                               // 0x1678(0x10)(ZeroConstructor)
	class UTexture2D*                            InclusionListIcon;                                 // 0x1688(0x8)(ZeroConstructor)
	class UTexture2D*                            ExclusionListIcon;                                 // 0x1690(0x8)(ZeroConstructor)
	class UTexture2D*                            AddCreatureToInclusionListIcon;                    // 0x1698(0x8)(ZeroConstructor)
	class UTexture2D*                            RemoveCreatureFromInclusionListIcon;               // 0x16A0(0x8)(ZeroConstructor)
	class UTexture2D*                            AddCreatureToExclusionListIcon;                    // 0x16A8(0x8)(ZeroConstructor)
	class UTexture2D*                            RemoveCreatureFromExclusionListIcon;               // 0x16B0(0x8)(ZeroConstructor)
	float                                        FluidSimSplashStrength;                            // 0x16B8(0x4)(None)
	uint8                                        Pad_3D20[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        FluidSimSplashTemplateOverride;                    // 0x16C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureTurret* GetDefaultObj();

	void UpdatedTargeting();
	void StartWarning();
	void NetMultiUpdateTarget(class AActor* PNewTarget, double NewLastFireTime);
	void GetTargetAltAimSocket(class APrimalCharacter* ForTarget, class FName ReturnValue);
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void BPTurretPreventsTargeting(class APrimalCharacter* PotentialTarget, bool ReturnValue);
	void BPCopyCustomSettingsFromTurret(class APrimalStructureTurret* FromTurret, bool ReturnValue);
};

// 0x208 (0x1780 - 0x1578)
// Class ShooterGame.PrimalStructureTurretBallista
class APrimalStructureTurretBallista : public APrimalStructureSeating
{
public:
	class FName                                  TurretTipBone;                                     // 0x1578(0x8)(None)
	class FName                                  RiderOverrideSocketName;                           // 0x1580(0x8)(None)
	class UClass*                                AmmoItemTemplate;                                  // 0x1588(0x8)(ZeroConstructor)
	TArray<class UClass*>                        AlternateAmmoItemTemplates;                        // 0x1590(0x10)(ZeroConstructor)
	class UClass*                                ProjectileClass;                                   // 0x15A0(0x8)(ZeroConstructor)
	class UClass*                                ShootingDamageType;                                // 0x15A8(0x8)(ZeroConstructor)
	float                                        ShootingDamageAmount;                              // 0x15B0(0x4)(None)
	float                                        ShootingDamageImpulse;                             // 0x15B4(0x4)(None)
	class UParticleSystem*                       ShootingTrailFX;                                   // 0x15B8(0x8)(ZeroConstructor)
	float                                        ShootingAimSpread;                                 // 0x15C0(0x4)(None)
	uint8                                        Pad_3D24[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MuzzleFlashEmitter;                                // 0x15C8(0x8)(ZeroConstructor)
	float                                        ShootingFireInterval;                              // 0x15D0(0x4)(None)
	uint8                                        Pad_3D25[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastShootingFireTime;                              // 0x15D8(0x8)(None)
	bool                                         bIsTryingToShoot;                                  // 0x15E0(0x1)(None)
	bool                                         bIsShooting;                                       // 0x15E1(0x1)(None)
	bool                                         bIsTargeting;                                      // 0x15E2(0x1)(None)
	uint8                                        Pad_3D26[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        YawViewRotation;                                   // 0x15E4(0x4)(None)
	float                                        OldYawViewRotation;                                // 0x15E8(0x4)(None)
	float                                        PitctViewRotation;                                 // 0x15EC(0x4)(None)
	struct FRotator                              RotationInput;                                     // 0x15F0(0x18)(None)
	class USoundCue*                             FireSound;                                         // 0x1608(0x8)(ZeroConstructor)
	class USoundCue*                             EmptyFireSound;                                    // 0x1610(0x8)(ZeroConstructor)
	class USoundCue*                             RotateSoundCue;                                    // 0x1618(0x8)(ZeroConstructor)
	float                                        RotateSpeedThreshold;                              // 0x1620(0x4)(None)
	float                                        RotateSoundFadeInSpeed;                            // 0x1624(0x4)(None)
	float                                        RotateSoundFadeOutSpeed;                           // 0x1628(0x4)(None)
	float                                        RotateSoundMinVolume;                              // 0x162C(0x4)(None)
	float                                        RotateSoundMaxVolume;                              // 0x1630(0x4)(None)
	float                                        TPVCameraPitchMin;                                 // 0x1634(0x4)(None)
	float                                        TPVCameraPitchMax;                                 // 0x1638(0x4)(None)
	float                                        TPVCameraYawMin;                                   // 0x163C(0x4)(None)
	float                                        TPVCameraYawMax;                                   // 0x1640(0x4)(None)
	uint8                                        Pad_3D27[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          FireBallistaAnimation;                             // 0x1648(0x8)(ZeroConstructor)
	class UAnimMontage*                          EmptyBallistaAnimation;                            // 0x1650(0x8)(ZeroConstructor)
	class UAnimMontage*                          ReloadBallistaAnimation;                           // 0x1658(0x8)(ZeroConstructor)
	bool                                         bIsLoaded;                                         // 0x1660(0x1)(None)
	uint8                                        Pad_3D28[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ControllerRiddingYaw;                              // 0x1664(0x4)(None)
	class FName                                  TurretSkeletalMeshComponentName;                   // 0x1668(0x8)(None)
	class USkeletalMeshComponent*                MySkeletalMeshComp;                                // 0x1670(0x8)(ZeroConstructor)
	class FName                                  AttachedModuleComponentName;                       // 0x1678(0x8)(None)
	class USkeletalMeshComponent*                AttachedModuleSkeletalMeshComp;                    // 0x1680(0x8)(ZeroConstructor)
	class UAnimMontage*                          AttachedModuleFireAnimation;                       // 0x1688(0x8)(ZeroConstructor)
	class UAnimMontage*                          AttachedModuleReloadAnimation;                     // 0x1690(0x8)(ZeroConstructor)
	class FName                                  ProjectileMeshAttachPoint;                         // 0x1698(0x8)(None)
	class FName                                  ProjectileMeshAttachPointForMeshOnly;              // 0x16A0(0x8)(None)
	class FName                                  ProjectileBoneName;                                // 0x16A8(0x8)(None)
	uint8                                        bClientFireProjectile : 1;                         // Mask: 0x1, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        bUseInstantDamageShooting : 1;                     // Mask: 0x2, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        bDisableInElectricalStorm : 1;                     // Mask: 0x4, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        bUseBallistaAimOffsetOnCharacter : 1;              // Mask: 0x8, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        bIsReloading : 1;                                  // Mask: 0x10, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        bIsFiring : 1;                                     // Mask: 0x20, PropSize: 0x10x16B0(0x1)(None)
	uint8                                        BitPad_384 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bQueueReloadingAnimation;                          // 0x16B1(0x1)(None)
	uint8                                        bFireProjectileInvertX : 1;                        // Mask: 0x1, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bShowProjectileOnlyBasedOnAmmo : 1;                // Mask: 0x2, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bHideProjectileBone : 1;                           // Mask: 0x4, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bUseBPCanFire : 1;                                 // Mask: 0x8, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bUseBPFiredWeapon : 1;                             // Mask: 0x10, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bHideProjectileBoneOnAttachedModule : 1;           // Mask: 0x20, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bUseAmmoFromNearbyContainer : 1;                   // Mask: 0x40, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        bUseBPGetDamageMultiplier : 1;                     // Mask: 0x80, PropSize: 0x10x16B2(0x1)(None)
	uint8                                        Pad_3D29[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  ProjectileMesh;                                    // 0x16B8(0x8)(ZeroConstructor)
	class UAudioComponent*                       RotateSoundComponent;                              // 0x16C0(0x8)(ZeroConstructor)
	class UTexture2D*                            ProgressBarBackground;                             // 0x16C8(0x8)(ZeroConstructor)
	class UTexture2D*                            ProgressBarForeground;                             // 0x16D0(0x8)(ZeroConstructor)
	int32                                        AmmoCount;                                         // 0x16D8(0x4)(None)
	uint8                                        Pad_3D2A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CurrentAmmoItemTemplate;                           // 0x16E0(0x8)(ZeroConstructor)
	int32                                        MagazineSize;                                      // 0x16E8(0x4)(None)
	float                                        RangeToCheckForAmmo;                               // 0x16EC(0x4)(None)
	uint8                                        Pad_3D2B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMesh*                           AmmoItemTemplateMesh;                              // 0x1708(0x8)(ZeroConstructor)
	TArray<class UStaticMesh*>                   AlternateAmmoItemTemplateMeshes;                   // 0x1710(0x10)(ZeroConstructor)
	TArray<class UClass*>                        AlternateAmmoProjectileClasses;                    // 0x1720(0x10)(ZeroConstructor)
	TArray<class UClass*>                        BuffsWhileSeated;                                  // 0x1730(0x10)(ZeroConstructor)
	float                                        DefaultAmmoReloadAnimSpeed;                        // 0x1740(0x4)(None)
	uint8                                        Pad_3D2C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                AlternateAmmoReloadAnimSpeeds;                     // 0x1748(0x10)(None)
	float                                        HealthCostPerShot;                                 // 0x1758(0x4)(None)
	float                                        MinimumHealthPercentToShoot;                       // 0x175C(0x4)(None)
	float                                        InstantFireTraceRange;                             // 0x1760(0x4)(None)
	bool                                         AimFromPlayerView;                                 // 0x1764(0x1)(None)
	uint8                                        Pad_3D2D[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FluidSimSplashStrength;                            // 0x1770(0x4)(None)
	uint8                                        Pad_3D2E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNiagaraSystem*                        FluidSimSplashTemplateOverride;                    // 0x1778(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureTurretBallista* GetDefaultObj();

	void TryFiring(bool ShouldFire);
	void ServerSwitchAmmoType();
	void ServerSetTargeting(bool bTargeting);
	void GetCurrentAmmoType(class UClass* ReturnValue);
	void ClientsPlayFireAnim();
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void BPGetDamageMultiplier(float ReturnValue);
	void BPFiredWeapon();
	void BPCanFire(bool ReturnValue);
};

// 0x80 (0x1748 - 0x16C8)
// Class ShooterGame.PrimalStructureTurretPlant
class APrimalStructureTurretPlant : public APrimalStructureTurret
{
public:
	TArray<class FName>                          PlantMuzzleSockets;                                // 0x16C8(0x10)(None)
	TArray<class UAnimMontage*>                  PlantAttackAnims;                                  // 0x16D8(0x10)(ZeroConstructor)
	float                                        PlantHealthRecoverPerSec;                          // 0x16E8(0x4)(None)
	float                                        AmountOfFertilizerToUsePerShot;                    // 0x16EC(0x4)(None)
	float                                        HealthRecoverPerSec;                               // 0x16F0(0x4)(None)
	uint8                                        Pad_3D2F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalStructureItemContainer_CropPlot* OwnerCropPlot;                                     // 0x16F8(0x8)(ZeroConstructor)
	uint8                                        Pad_3D30[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureTurretPlant* GetDefaultObj();

	void RecoverHealthTimer();
};

// 0x160 (0x15C0 - 0x1460)
// Class ShooterGame.PrimalStructureUnderwaterBase
class APrimalStructureUnderwaterBase : public APrimalStructureItemContainer
{
public:
	uint8                                        bIsFlooded : 1;                                    // Mask: 0x1, PropSize: 0x10x1460(0x1)(None)
	uint8                                        bIsFrameHidden : 1;                                // Mask: 0x2, PropSize: 0x10x1460(0x1)(None)
	uint8                                        BitPad_385 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D35[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPorthole>                     Portholes;                                         // 0x1468(0x10)(ZeroConstructor)
	TArray<int32>                                PortholeState;                                     // 0x1478(0x10)(None)
	TArray<int32>                                PortholeSaveState;                                 // 0x1488(0x10)(None)
	TArray<class APrimalStructureUnderwaterBase*> PortholeLinks;                                     // 0x1498(0x10)(ZeroConstructor)
	class UClass*                                FloodedEmitter;                                    // 0x14A8(0x8)(ZeroConstructor)
	class UClass*                                UnfloodedEmitter;                                  // 0x14B0(0x8)(ZeroConstructor)
	class USoundBase*                            OpenPortholeSound;                                 // 0x14B8(0x8)(ZeroConstructor)
	class USoundBase*                            ClosePortholeSound;                                // 0x14C0(0x8)(ZeroConstructor)
	class USoundBase*                            FreezePortholeSound;                               // 0x14C8(0x8)(ZeroConstructor)
	class USoundBase*                            UnfreezePortholeSound;                             // 0x14D0(0x8)(ZeroConstructor)
	TArray<uint32>                               CurrentPinCodes;                                   // 0x14D8(0x10)(None)
	TArray<class FString>                        PortholeNameOverrides;                             // 0x14E8(0x10)(None)
	TArray<struct FColor>                        PortholeNameIconColorOverrides;                    // 0x14F8(0x10)(None)
	TMap<class APlayerController*, class UPrimitiveComponent*> ClientsViewingPortholes;                           // 0x1508(0x50)(ZeroConstructor)
	uint8                                        Pad_3D36[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            DrainCompartmentIcon;                              // 0x1568(0x8)(ZeroConstructor)
	class UTexture2D*                            FloodCompartmentIcon;                              // 0x1570(0x8)(ZeroConstructor)
	class UTexture2D*                            DrainAllConnectedIcon;                             // 0x1578(0x8)(ZeroConstructor)
	class UTexture2D*                            FloodAllConnectedIcon;                             // 0x1580(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenIcon;                                          // 0x1588(0x8)(ZeroConstructor)
	class UTexture2D*                            OpenWindowIcon;                                    // 0x1590(0x8)(ZeroConstructor)
	class UTexture2D*                            CloseIcon;                                         // 0x1598(0x8)(ZeroConstructor)
	class UTexture2D*                            ShowFrameIcon;                                     // 0x15A0(0x8)(ZeroConstructor)
	class UTexture2D*                            HideFrameIcon;                                     // 0x15A8(0x8)(ZeroConstructor)
	class UTexture2D*                            ShowConnectedFramesIcon;                           // 0x15B0(0x8)(ZeroConstructor)
	class UTexture2D*                            HideConnectedFramesIcon;                           // 0x15B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalStructureUnderwaterBase* GetDefaultObj();

	void UpdateLockState(class APlayerController* PC, bool DoLock, bool bDontIncrementTagger);
	void UpdateFrameState(class APlayerController* PC, bool HideFrame, bool bDontIncrementTagger);
	void UpdateFloodState(class APlayerController* PC, bool DoFlood, bool bDontIncrementTagger);
	void SetPortholeState(int32 Index, int32 NewState);
	void OnRep_IsFrameHidden();
	void OnRep_IsFlooded();
	void GetLinkedBaseByPortholeIndex(int32 PortholeIndex, int32 LinkedPortholeIndex, class APrimalStructureUnderwaterBase* ReturnValue);
	void ChangedCompartmentFloodState();
	void BPSetPortholeState(int32 PortholeIndex, int32 NewState);
	void AreBasesOpenToEachOther(class APrimalStructureUnderwaterBase* OtherBase, int32 MyPortholeIndex, int32 OtherPortholeIndex, bool ReturnValue);
};

// 0x20 (0x1020 - 0x1000)
// Class ShooterGame.PrimalStructureWaterPipe
class APrimalStructureWaterPipe : public APrimalStructure
{
public:
	uint8                                        bAlwaysHasWater : 1;                               // Mask: 0x1, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bHasWater : 1;                                     // Mask: 0x2, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bIsMeshHidden : 1;                                 // Mask: 0x4, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bIsWaterPipe : 1;                                  // Mask: 0x8, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bConnectedToNonPipe : 1;                           // Mask: 0x10, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bUseBPOnRefreshPipeMaterials : 1;                  // Mask: 0x20, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bUseBPOnWaterStateChange : 1;                      // Mask: 0x40, PropSize: 0x10x1000(0x1)(None)
	uint8                                        bCanHideMesh : 1;                                  // Mask: 0x80, PropSize: 0x10x1000(0x1)(None)
	uint8                                        Pad_3D38[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AutoDestroyPeriodWhenUnconnectedToNonPipe;         // 0x1004(0x4)(None)
	class UMaterialInterface*                    HasWaterMaterial;                                  // 0x1008(0x8)(ZeroConstructor)
	class UMaterialInterface*                    NoWaterMaterial;                                   // 0x1010(0x8)(ZeroConstructor)
	int32                                        WaterMaterialIndex;                                // 0x1018(0x4)(None)
	uint8                                        Pad_3D39[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalStructureWaterPipe* GetDefaultObj();

	void SetHasWater(bool bNewHasWater);
	void RefreshWaterState();
	void RefreshHasSourceMaterials();
	void OnRep_IsMeshHidden();
	void OnRep_HasWater(bool bPreviousHasWater);
	void BPOnWaterStateChange(bool bPipeHasWaterOrPower);
	void BPOnRefreshPipeMaterials(bool bPipeHasWaterOrPower, class UMaterialInterface* NewMaterial);
};

// 0x40 (0x68 - 0x28)
// Class ShooterGame.PrimalSupplyCrateItemSet
class UPrimalSupplyCrateItemSet : public UObject
{
public:
	struct FSupplyCrateItemSet                   ItemSet;                                           // 0x28(0x40)(None)

	static class UClass* StaticClass();
	static class UPrimalSupplyCrateItemSet* GetDefaultObj();

};

// 0x10 (0x38 - 0x28)
// Class ShooterGame.PrimalSupplyCrateItemSets
class UPrimalSupplyCrateItemSets : public UObject
{
public:
	TArray<struct FSupplyCrateItemSet>           ItemSets;                                          // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UPrimalSupplyCrateItemSets* GetDefaultObj();

};

// 0x1A8 (0x1D0 - 0x28)
// Class ShooterGame.PrimalTribeData
class UPrimalTribeData : public UObject
{
public:
	struct FTribeData                            TribeData;                                         // 0x28(0x1A8)(None)

	static class UClass* StaticClass();
	static class UPrimalTribeData* GetDefaultObj();

};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.PrimalUI_Toast
class UPrimalUI_Toast : public UPrimalUI
{
public:
	int32                                        Counter;                                           // 0x758(0x4)(None)
	int32                                        CounterMax;                                        // 0x75C(0x4)(None)
	int32                                        ProgressCounter;                                   // 0x760(0x4)(None)
	bool                                         bWillSetCounter;                                   // 0x764(0x1)(None)
	uint8                                        Pad_3D3D[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalUI_Toast* GetDefaultObj();

	void SetCounter(int32 NewCounter);
	void OverrideTextValueWithString(const class FString& NewText, bool HideProgressBar);
	void OverrideTextValue(class FText NewText, bool HideProgressBar);
	void OverrideCounterStart(int32 Num);
	void IsAtCounterMax(bool ReturnValue);
	void InitCounter(int32 NewCounterMax, bool bInWillSetCounter);
	void IncrementCounter();
};

// 0xB80 (0x1038 - 0x4B8)
// Class ShooterGame.ShooterWeapon
class AShooterWeapon : public AActor
{
public:
	uint8                                        Pad_3D69[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EquipTime;                                         // 0x4C0(0x4)(None)
	uint8                                        Pad_3D6A[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                OverridePawnTPVAnimBlueprint;                      // 0x4E0(0x8)(ZeroConstructor)
	class UAnimMontage*                          OverrideProneInAnim;                               // 0x4E8(0x8)(ZeroConstructor)
	class UAnimMontage*                          OverrideProneOutAnim;                              // 0x4F0(0x8)(ZeroConstructor)
	class UAnimMontage*                          OverrideJumpAnim;                                  // 0x4F8(0x8)(ZeroConstructor)
	class UAnimMontage*                          OverrideLandedAnim;                                // 0x500(0x8)(ZeroConstructor)
	TArray<class UAnimSequence*>                 OverrideRiderAnimSequenceFrom;                     // 0x508(0x10)(ZeroConstructor)
	TArray<class UAnimSequence*>                 OverrideRiderAnimSequenceTo;                       // 0x518(0x10)(ZeroConstructor)
	struct FCanvasIcon                           PrimaryIcon;                                       // 0x528(0x18)(ZeroConstructor)
	struct FCanvasIcon                           SecondaryIcon;                                     // 0x540(0x18)(ZeroConstructor)
	struct FCanvasIcon                           PrimaryClipIcon;                                   // 0x558(0x18)(ZeroConstructor)
	struct FCanvasIcon                           SecondaryClipIcon;                                 // 0x570(0x18)(ZeroConstructor)
	float                                        ItemDurabilityToConsumePerMeleeHit;                // 0x588(0x4)(None)
	float                                        AmmoIconsCount;                                    // 0x58C(0x4)(None)
	float                                        TargetingTooltipCheckRange;                        // 0x590(0x4)(None)
	uint8                                        bUseDinoRangeForTooltip : 1;                       // Mask: 0x1, PropSize: 0x10x594(0x1)(None)
	uint8                                        BitPad_386 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D6B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PrimaryClipIconOffset;                             // 0x598(0x4)(None)
	int32                                        SecondaryClipIconOffset;                           // 0x59C(0x4)(None)
	class UClass*                                TargetingInfoToolTipWidget;                        // 0x5A0(0x8)(ZeroConstructor)
	struct FVector2D                             TargetingInfoTooltipPadding;                       // 0x5A8(0x10)(None)
	struct FVector2D                             TargetingInfoTooltipScale;                         // 0x5B8(0x10)(None)
	bool                                         bOnlyPassiveDurabilityWhenAccessoryActive;         // 0x5C8(0x1)(None)
	bool                                         bDisableShooterOnElectricStorm;                    // 0x5C9(0x1)(None)
	uint8                                        Pad_3D6C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  OverrideAttachPoint;                               // 0x5CC(0x8)(None)
	uint8                                        Pad_3D6D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FPVRelativeLocation;                               // 0x5D8(0x18)(None)
	struct FRotator                              FPVRelativeRotation;                               // 0x5F0(0x18)(None)
	struct FVector                               FPVRelativeLocation_Targeting;                     // 0x608(0x18)(None)
	struct FRotator                              FPVRelativeRotation_Targeting;                     // 0x620(0x18)(None)
	float                                        FPVEnterTargetingInterpSpeed;                      // 0x638(0x4)(None)
	float                                        FPVExitTargetingInterpSpeed;                       // 0x63C(0x4)(None)
	float                                        EndDoMeleeSwingTime;                               // 0x640(0x4)(None)
	uint8                                        Pad_3D6E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              FPVLookAtMaximumOffset;                            // 0x648(0x18)(None)
	struct FRotator                              FPVLookAtSpeedBase;                                // 0x660(0x18)(None)
	struct FRotator                              FPVLookAtInterpSpeed;                              // 0x678(0x18)(None)
	struct FRotator                              FPVLookAtMaximumOffset_Targeting;                  // 0x690(0x18)(None)
	struct FRotator                              FPVLookAtSpeedBase_Targeting;                      // 0x6A8(0x18)(None)
	struct FRotator                              FPVLookAtInterpSpeed_Targeting;                    // 0x6C0(0x18)(None)
	struct FVector                               FPVImmobilizedLocationOffset;                      // 0x6D8(0x18)(None)
	struct FRotator                              FPVImmobilizedRotationOffset;                      // 0x6F0(0x18)(None)
	float                                        FPVImmobilizedInterpSpeed;                         // 0x708(0x4)(None)
	bool                                         bIsWeaponPing;                                     // 0x70C(0x1)(None)
	bool                                         bIsWeaponTracker;                                  // 0x70D(0x1)(None)
	bool                                         bPreventLeftShoulder;                              // 0x70E(0x1)(None)
	bool                                         bPreventRightShoulder;                             // 0x70F(0x1)(None)
	uint8                                        Pad_3D6F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseBlueprintAnimNotifications;                    // 0x714(0x1)(None)
	uint8                                        Pad_3D70[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          MeleeSwingSockets;                                 // 0x720(0x10)(None)
	float                                        AllowMeleeTimeBeforeAnimationEnd;                  // 0x730(0x4)(None)
	uint8                                        Pad_3D71[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalItem*                           AssociatedPrimalItem;                              // 0x738(0x8)(ZeroConstructor)
	class AMissionType*                          AssociatedMission;                                 // 0x740(0x8)(ZeroConstructor)
	bool                                         bCanBeUsedAsEquipment;                             // 0x748(0x1)(None)
	uint8                                        Pad_3D72[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemNetInfo                          AssociatedItemNetInfo;                             // 0x750(0x1C8)(ZeroConstructor)
	struct FWeaponData                           WeaponConfig;                                      // 0x918(0x2C)(None)
	uint8                                        Pad_3D73[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                Mesh3P;                                            // 0x948(0x8)(ZeroConstructor)
	class UClass*                                WeaponAmmoItemTemplate;                            // 0x950(0x8)(ZeroConstructor)
	class ACameraActor*                          AnimatedCamera;                                    // 0x958(0x8)(ZeroConstructor)
	uint8                                        Pad_3D74[0xC0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     MyPawn;                                            // 0xA20(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                Mesh1P;                                            // 0xA28(0x8)(ZeroConstructor)
	class UAudioComponent*                       FireAC;                                            // 0xA30(0x8)(ZeroConstructor)
	class FName                                  MuzzleAttachPoint;                                 // 0xA38(0x8)(None)
	class UParticleSystem*                       MuzzleFX;                                          // 0xA40(0x8)(ZeroConstructor)
	class UParticleSystem*                       MuzzleFX_FPV;                                      // 0xA48(0x8)(ZeroConstructor)
	class UParticleSystem*                       AltMuzzleFX;                                       // 0xA50(0x8)(ZeroConstructor)
	class UParticleSystem*                       AltMuzzleFX_FPV;                                   // 0xA58(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              MuzzlePSC;                                         // 0xA60(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              MuzzlePSCSecondary;                                // 0xA68(0x8)(ZeroConstructor)
	class UClass*                                FireCameraShake;                                   // 0xA70(0x8)(ZeroConstructor)
	class UClass*                                ReloadCameraShake;                                 // 0xA78(0x8)(ZeroConstructor)
	class UClass*                                MeleeCameraShake;                                  // 0xA80(0x8)(ZeroConstructor)
	class UForceFeedbackEffect*                  FireForceFeedback;                                 // 0xA88(0x8)(ZeroConstructor)
	class USoundCue*                             FireSound;                                         // 0xA90(0x8)(ZeroConstructor)
	class USoundCue*                             AltFireSound;                                      // 0xA98(0x8)(ZeroConstructor)
	class USoundCue*                             FireFinishSound;                                   // 0xAA0(0x8)(ZeroConstructor)
	class USoundCue*                             OutOfAmmoSound;                                    // 0xAA8(0x8)(ZeroConstructor)
	int32                                        MeleeDamageAmount;                                 // 0xAB0(0x4)(None)
	float                                        TheMeleeSwingRadius;                               // 0xAB4(0x4)(None)
	float                                        MeleeDamageImpulse;                                // 0xAB8(0x4)(None)
	uint8                                        Pad_3D75[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWeaponAnim                           ReloadAnim;                                        // 0xAC0(0x10)(ZeroConstructor)
	class UAnimMontage*                          ProneTPVReloadAnim;                                // 0xAD0(0x8)(ZeroConstructor)
	struct FWeaponAnim                           PartialReloadAnim;                                 // 0xAD8(0x10)(ZeroConstructor)
	class UAnimMontage*                          ProneTPVPartialReloadAnim;                         // 0xAE8(0x8)(ZeroConstructor)
	class UAnimMontage*                          WeaponMesh3PReloadAnim;                            // 0xAF0(0x8)(ZeroConstructor)
	struct FWeaponAnim                           HarvestAnim;                                       // 0xAF8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           WeaponBreakAnim;                                   // 0xB08(0x10)(ZeroConstructor)
	class USoundCue*                             EquipSound;                                        // 0xB18(0x8)(ZeroConstructor)
	struct FWeaponAnim                           EquipAnim;                                         // 0xB20(0x10)(ZeroConstructor)
	struct FWeaponAnim                           EquipNoAmmoClipAnim;                               // 0xB30(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipAnim;                                       // 0xB40(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipNoAmmoClipAnim;                             // 0xB50(0x10)(ZeroConstructor)
	class UAnimMontage*                          WeaponMesh3PFireAnim;                              // 0xB60(0x8)(ZeroConstructor)
	struct FWeaponAnim                           FireAnim;                                          // 0xB68(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeAnim;                                         // 0xB78(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeNoAmmoClipAnim;                               // 0xB88(0x10)(ZeroConstructor)
	TArray<struct FWeaponAnim>                   MeleeAnimList;                                     // 0xB98(0x10)(ZeroConstructor)
	uint8                                        bOnlyUseFirstMeleeAnimWithShield : 1;              // Mask: 0x1, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        bForceShowCrosshairWhileFiring : 1;                // Mask: 0x2, PropSize: 0x10xBA8(0x1)(None)
	uint8                                        BitPad_387 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D76[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FWeaponAnim>                   MeleeWithHitAnimList;                              // 0xBB0(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ShieldHitAnim;                                     // 0xBC0(0x10)(ZeroConstructor)
	float                                        FPVMoveOffscreenWhenTurningMaxMoveWeaponSpeed;     // 0xBD0(0x4)(None)
	float                                        FPVMoveOffscreenWhenTurningMinMoveWeaponSpeed;     // 0xBD4(0x4)(None)
	float                                        FPVMoveOffscreenWhenTurningMinViewRotSpeed;        // 0xBD8(0x4)(None)
	float                                        FPVMoveOffscreenWhenTurningMaxViewRotSpeed;        // 0xBDC(0x4)(None)
	float                                        FPVMoveOffscreenIdleRestoreInterval;               // 0xBE0(0x4)(None)
	float                                        FPVMoveOffscreenIdleRestoreSpeed;                  // 0xBE4(0x4)(None)
	float                                        FPVMoveOffscreenWhenTurningMaxOffset;              // 0xBE8(0x4)(None)
	uint8                                        Pad_3D77[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWeaponAnim                           TargetingFireAnim;                                 // 0xBF8(0x10)(ZeroConstructor)
	uint8                                        bAllowSubmergedFiring : 1;                         // Mask: 0x1, PropSize: 0x10xC08(0x1)(None)
	uint8                                        BitPad_388 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHideFPVMesh : 1;                                  // Mask: 0x40, PropSize: 0x10xC08(0x1)(None)
	uint8                                        bForceTargeting : 1;                               // Mask: 0x80, PropSize: 0x10xC08(0x1)(None)
	uint8                                        bCanAltFire : 1;                                   // Mask: 0x1, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bAltFireDoesMeleeAttack : 1;                       // Mask: 0x2, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bAltFireDoesNotStopFire : 1;                       // Mask: 0x4, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bHideDamageSourceFromLogs : 1;                     // Mask: 0x8, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bUseTargetingFireAnim : 1;                         // Mask: 0x10, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bUseTargetingReloadAnim : 1;                       // Mask: 0x20, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bUsePartialReloadAnim : 1;                         // Mask: 0x40, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bUseEquipNoAmmoClipAnim : 1;                       // Mask: 0x80, PropSize: 0x10xC09(0x1)(None)
	uint8                                        bUseUnequipNoAmmoClipAnim : 1;                     // Mask: 0x1, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bUseMeleeNoAmmoClipAnim : 1;                       // Mask: 0x2, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bHideLeftArmFPV : 1;                               // Mask: 0x4, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bLoopedMuzzleFX : 1;                               // Mask: 0x8, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bMeleeHitUseMuzzleFX : 1;                          // Mask: 0x10, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bUsePostUpdateTickForFPVParticles : 1;             // Mask: 0x20, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bFPVMoveOffscreenWhenTurning : 1;                  // Mask: 0x40, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bReloadAnimForceTickPoseOnServer : 1;              // Mask: 0x80, PropSize: 0x10xC0A(0x1)(None)
	uint8                                        bLoopedFireSound : 1;                              // Mask: 0x1, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        bAllowTargetingWhileReloading : 1;                 // Mask: 0x2, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        bMeleeHitColorizesStructures : 1;                  // Mask: 0x4, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        bLoopedFireAnim : 1;                               // Mask: 0x8, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        BitPad_389 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAutoRefire : 1;                                   // Mask: 0x40, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        bConsumeAmmoOnUseAmmo : 1;                         // Mask: 0x80, PropSize: 0x10xC0B(0x1)(None)
	uint8                                        bTargetUnTargetWithClick : 1;                      // Mask: 0x1, PropSize: 0x10xC0C(0x1)(None)
	uint8                                        bDontActuallyConsumeItemAmmo : 1;                  // Mask: 0x2, PropSize: 0x10xC0C(0x1)(None)
	uint8                                        bBPUseWeaponCanFire : 1;                           // Mask: 0x4, PropSize: 0x10xC0C(0x1)(None)
	uint8                                        bBPUseTargetingEvents : 1;                         // Mask: 0x8, PropSize: 0x10xC0C(0x1)(None)
	uint8                                        BitPad_38A : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D78[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_38B : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWantsToFire : 1;                                  // Mask: 0x2, PropSize: 0x10xC14(0x1)(None)
	uint8                                        bWantsToAltFire : 1;                               // Mask: 0x4, PropSize: 0x10xC14(0x1)(None)
	uint8                                        BitPad_38C : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseAmmoOnFiring : 1;                              // Mask: 0x1, PropSize: 0x10xC15(0x1)(None)
	uint8                                        bUseAmmoServerOnly : 1;                            // Mask: 0x2, PropSize: 0x10xC15(0x1)(None)
	uint8                                        bListenToAppliedForeces : 1;                       // Mask: 0x4, PropSize: 0x10xC15(0x1)(None)
	uint8                                        BitPad_38D : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D79[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideAimOffsets : 1;                           // Mask: 0x1, PropSize: 0x10xC18(0x1)(None)
	uint8                                        bIsSpyglass : 1;                                   // Mask: 0x2, PropSize: 0x10xC18(0x1)(None)
	uint8                                        BitPad_38E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D7A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ItemDestructionUnequipWeaponDelay;                 // 0xC1C(0x4)(None)
	float                                        WeaponUnequipDelay;                                // 0xC20(0x4)(None)
	uint8                                        Pad_3D7B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWeaponAnim                           TargetingReloadAnim;                               // 0xC28(0x10)(ZeroConstructor)
	class UAnimMontage*                          ProneTPVTargetingReloadAnim;                       // 0xC38(0x8)(ZeroConstructor)
	uint8                                        Pad_3D7C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastFireTime;                                      // 0xC48(0x8)(None)
	int32                                        CurrentAmmo;                                       // 0xC50(0x4)(None)
	int32                                        CurrentAmmoInClip;                                 // 0xC54(0x4)(None)
	bool                                         bReplicateCurrentAmmoInClipToNonOwners;            // 0xC58(0x1)(None)
	bool                                         bUseBPAdjustAmmoPerShot;                           // 0xC59(0x1)(None)
	uint8                                        bHasToggleableAccessory : 1;                       // Mask: 0x1, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bToggleAccessoryUseAltMuzzleFX : 1;                // Mask: 0x2, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bToggleAccessoryUseAltFireSound : 1;               // Mask: 0x4, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bUseBPCanToggleAccessory : 1;                      // Mask: 0x8, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bUseBPOnScoped : 1;                                // Mask: 0x10, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bIsDefaultWeapon : 1;                              // Mask: 0x20, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bForceKeepEquippedWhileInInventory : 1;            // Mask: 0x40, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bOnlyAllowUseWhenRidingDino : 1;                   // Mask: 0x80, PropSize: 0x10xC5A(0x1)(None)
	uint8                                        bPrimaryFireDoesMeleeAttack : 1;                   // Mask: 0x1, PropSize: 0x10xC5B(0x1)(None)
	uint8                                        bMeleeHitCaptureDermis : 1;                        // Mask: 0x2, PropSize: 0x10xC5B(0x1)(None)
	uint8                                        BitPad_38F : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	class FName                                  FPVAccessoryToggleComponent;                       // 0xC5C(0x8)(None)
	class FName                                  TPVAccessoryToggleComponent;                       // 0xC64(0x8)(None)
	uint8                                        bIsAccessoryActive : 1;                            // Mask: 0x1, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bCanAccessoryBeSetOn : 1;                          // Mask: 0x2, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bConsumeAmmoItemOnReload : 1;                      // Mask: 0x4, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bUseAutoReload : 1;                                // Mask: 0x8, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bWantsToAutoReload : 1;                            // Mask: 0x10, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bHasPlayedReload : 1;                              // Mask: 0x20, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        bNetLoopedSimulatingWeaponFire : 1;                // Mask: 0x40, PropSize: 0x10xC6C(0x1)(None)
	uint8                                        BitPad_390 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBPHandleMeleeAttack : 1;                          // Mask: 0x1, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        bUseBPShouldDealDamage : 1;                        // Mask: 0x2, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        bDoesntUsePrimalItem : 1;                          // Mask: 0x4, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        bUseCanAccessoryBeSetOn : 1;                       // Mask: 0x8, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        bUseBPGetActorForTargetingTooltip : 1;             // Mask: 0x10, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        bUseBPOverrideAimDirection : 1;                    // Mask: 0x20, PropSize: 0x10xC6D(0x1)(None)
	uint8                                        BitPad_391 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D83[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPIsValidUnstasisActor : 1;                    // Mask: 0x1, PropSize: 0x10xC70(0x1)(None)
	uint8                                        BitPad_392 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D84[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeToAutoReload;                                  // 0xC74(0x4)(None)
	class USoundBase*                            ToggleAccessorySound;                              // 0xC78(0x8)(ZeroConstructor)
	int32                                        FiredLastNoAmmoShot;                               // 0xC80(0x4)(None)
	uint8                                        Pad_3D85[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastNotifyShotTime;                                // 0xC88(0x8)(None)
	uint8                                        bLoopingSimulateWeaponFire : 1;                    // Mask: 0x1, PropSize: 0x10xC90(0x1)(None)
	uint8                                        BitPad_393 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPCanMeleeAttack : 1;                          // Mask: 0x4, PropSize: 0x10xC90(0x1)(None)
	uint8                                        BitPad_394 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D86[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MeleeDamageType;                                   // 0xCA0(0x8)(ZeroConstructor)
	uint8                                        bClientTriggersHandleFiring : 1;                   // Mask: 0x1, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bAllowUseHarvesting : 1;                           // Mask: 0x2, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bPreventItemColors : 1;                            // Mask: 0x4, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bUseBPGetSelectedMeleeAttackAnim : 1;              // Mask: 0x8, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bUseBPWeaponDealDamage : 1;                        // Mask: 0x10, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        BitPad_395 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D87[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPOnWeaponAnimPlayedNotify : 1;                // Mask: 0x1, PropSize: 0x10xCAC(0x1)(None)
	uint8                                        BitPad_396 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D88[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               VRTargetingModelOffset;                            // 0xCB0(0x18)(None)
	struct FVector                               VRTargetingAimOriginOffset;                        // 0xCC8(0x18)(None)
	class UMaterialInterface*                    ScopeOverlayMI;                                    // 0xCE0(0x8)(ZeroConstructor)
	class UMaterialInterface*                    ScopeCrosshairMI;                                  // 0xCE8(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ScopeCrosshairMID;                                 // 0xCF0(0x8)(ZeroConstructor)
	float                                        ScopeCrosshairSize;                                // 0xCF8(0x4)(None)
	class FName                                  ScopeCrosshairColorParameter;                      // 0xCFC(0x8)(None)
	uint8                                        bColorCrosshairBasedOnTarget : 1;                  // Mask: 0x1, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bAllowTargeting : 1;                               // Mask: 0x2, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bIgnoreTargetingFOV : 1;                           // Mask: 0x4, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bAllowDropAndPickup : 1;                           // Mask: 0x8, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bAllowDropAndPickupOnReload : 1;                   // Mask: 0x10, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bApplyAimDriftWhenTargeting : 1;                   // Mask: 0x20, PropSize: 0x10xD04(0x1)(None)
	uint8                                        bUseScopeOverlay : 1;                              // Mask: 0x40, PropSize: 0x10xD04(0x1)(None)
	uint8                                        BitPad_397 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D89[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHideFPVMeshWhileTargeting : 1;                    // Mask: 0x1, PropSize: 0x10xD08(0x1)(None)
	uint8                                        BitPad_398 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D8A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bGamepadRightIsSecondaryAction : 1;                // Mask: 0x1, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bGamepadLeftIsPrimaryFire : 1;                     // Mask: 0x2, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bDirectPrimaryFireToAltFire : 1;                   // Mask: 0x4, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bCanFire : 1;                                      // Mask: 0x8, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bForceTargetingOnDino : 1;                         // Mask: 0x10, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bDirectTargetingToPrimaryFire : 1;                 // Mask: 0x20, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bDirectTargetingToAltFire : 1;                     // Mask: 0x40, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bDirectTargetingToSecondaryAction : 1;             // Mask: 0x80, PropSize: 0x10xD0C(0x1)(None)
	uint8                                        bDirectAltFireToSeconaryAction : 1;                // Mask: 0x1, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bPreventEquippingUnderwater : 1;                   // Mask: 0x2, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bUseTPVWeaponMeshMeleeSockets : 1;                 // Mask: 0x4, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bTargetingForceTraceFloatingHUD : 1;               // Mask: 0x8, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bAllowRunning : 1;                                 // Mask: 0x10, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bAllowUseWhileRidingDino : 1;                      // Mask: 0x20, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bSupportsOffhandShield : 1;                        // Mask: 0x40, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bMeleeAttackHarvetUsableComponents : 1;            // Mask: 0x80, PropSize: 0x10xD0D(0x1)(None)
	uint8                                        bAllowSettingColorizeRegions : 1;                  // Mask: 0x1, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bAttemptToDyeWithMeleeAttack : 1;                  // Mask: 0x2, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bOnlyDamagePawns : 1;                              // Mask: 0x4, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bUseCharacterMeleeDamageModifier : 1;              // Mask: 0x8, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bConsumeZoomInOut : 1;                             // Mask: 0x10, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bClipScopeInY : 1;                                 // Mask: 0x20, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bScopeFullscreen : 1;                              // Mask: 0x40, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bAllowRunningWhileFiring : 1;                      // Mask: 0x80, PropSize: 0x10xD0E(0x1)(None)
	uint8                                        bAllowRunningWhileReloading : 1;                   // Mask: 0x1, PropSize: 0x10xD0F(0x1)(None)
	uint8                                        bAllowRunningWhileMeleeAttacking : 1;              // Mask: 0x2, PropSize: 0x10xD0F(0x1)(None)
	uint8                                        BitPad_399 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        MinItemDurabilityPercentageForShot;                // 0xD10(0x4)(None)
	uint8                                        bColorizeMuzzleFX : 1;                             // Mask: 0x1, PropSize: 0x10xD14(0x1)(None)
	uint8                                        BitPad_39A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D8B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideMuzzleFXAlpha;                             // 0xD18(0x4)(None)
	uint8                                        bForceFirstPersonWhileTargeting : 1;               // Mask: 0x1, PropSize: 0x10xD1C(0x1)(None)
	uint8                                        bUseBPStartEquippedNotify : 1;                     // Mask: 0x2, PropSize: 0x10xD1C(0x1)(None)
	uint8                                        bDirectPrimaryFireToSecondaryAction : 1;           // Mask: 0x4, PropSize: 0x10xD1C(0x1)(None)
	uint8                                        bUseAlternateAimOffset : 1;                        // Mask: 0x8, PropSize: 0x10xD1C(0x1)(None)
	uint8                                        BitPad_39B : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D8C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideTargetingFOV;                              // 0xD20(0x4)(None)
	float                                        TargetingDelayTime;                                // 0xD24(0x4)(None)
	float                                        TargetingFOVInterpSpeed;                           // 0xD28(0x4)(None)
	float                                        AimDriftYawAngle;                                  // 0xD2C(0x4)(None)
	float                                        AimDriftPitchAngle;                                // 0xD30(0x4)(None)
	float                                        AimDriftYawFrequency;                              // 0xD34(0x4)(None)
	float                                        AimDriftPitchFrequency;                            // 0xD38(0x4)(None)
	uint8                                        Pad_3D8D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          AlternateInventoryEquipAnim;                       // 0xD40(0x8)(ZeroConstructor)
	struct FWeaponAnim                           OpenInventoryAnim;                                 // 0xD48(0x10)(ZeroConstructor)
	float                                        MeleeHitRandomChanceToDestroyItem;                 // 0xD58(0x4)(None)
	float                                        GlobalFireCameraShakeScale;                        // 0xD5C(0x4)(None)
	float                                        DurabilityCostToEquip;                             // 0xD60(0x4)(None)
	float                                        PassiveDurabilityCostPerInterval;                  // 0xD64(0x4)(None)
	float                                        PassiveDurabilityCostInterval;                     // 0xD68(0x4)(None)
	float                                        GlobalFireCameraShakeScaleTargeting;               // 0xD6C(0x4)(None)
	float                                        MeleeCameraShakeSpeedScale;                        // 0xD70(0x4)(None)
	float                                        ReloadCameraShakeSpeedScale;                       // 0xD74(0x4)(None)
	float                                        MeleeConsumesStamina;                              // 0xD78(0x4)(None)
	uint8                                        Pad_3D8E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MeleeHitTargetCameraShake;                         // 0xD80(0x8)(ZeroConstructor)
	class UClass*                                MeleeHitTargetCameraShakeMobile;                   // 0xD88(0x8)(ZeroConstructor)
	class UClass*                                MeleeHitColorizeStructuresUI;                      // 0xD90(0x8)(ZeroConstructor)
	float                                        HypoThermiaInsulation;                             // 0xD98(0x4)(None)
	float                                        HyperThermiaInsulation;                            // 0xD9C(0x4)(None)
	float                                        InsulationRange;                                   // 0xDA0(0x4)(None)
	uint8                                        Pad_3D8F[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             TargetingSound;                                    // 0xDC8(0x8)(ZeroConstructor)
	class USoundCue*                             UntargetingSound;                                  // 0xDD0(0x8)(ZeroConstructor)
	float                                        FPVMeleeTraceFXRange;                              // 0xDD8(0x4)(None)
	uint8                                        Pad_3D90[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MeleeAttackUsableHarvestDamageType;                // 0xDE0(0x8)(ZeroConstructor)
	float                                        MeleeAttackHarvetUsableComponentsRadius;           // 0xDE8(0x4)(None)
	float                                        MeleeAttackUsableHarvestDamageMultiplier;          // 0xDEC(0x4)(None)
	uint8                                        Pad_3D91[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          TPVForcePlayAnim;                                  // 0xE48(0x8)(ZeroConstructor)
	bool                                         bPreventOpeningInventory;                          // 0xE50(0x1)(None)
	bool                                         bAllowUseOnSeatingStructure;                       // 0xE51(0x1)(None)
	bool                                         bOnlyUseOnSeatingStructure;                        // 0xE52(0x1)(None)
	uint8                                        bDurabilityUseWeaponMaterial : 1;                  // Mask: 0x1, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bOverrideStandingAnim : 1;                         // Mask: 0x2, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bUseCustomSeatedAnim : 1;                          // Mask: 0x4, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bUseBPForceTPVTargetingAnimation : 1;              // Mask: 0x8, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bForcePreventUseWhileRidingDino : 1;               // Mask: 0x10, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bUseBPPreventSwitchingWeapon : 1;                  // Mask: 0x20, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bUseBPCanEquip : 1;                                // Mask: 0x40, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bUseBPRemainEquipped : 1;                          // Mask: 0x80, PropSize: 0x10xE53(0x1)(None)
	uint8                                        bIsInDestruction : 1;                              // Mask: 0x1, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bForceReloadOnDestruction : 1;                     // Mask: 0x2, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bUseBPModifyFOV : 1;                               // Mask: 0x4, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bServerIgnoreCheckCanFire : 1;                     // Mask: 0x8, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bUseBPGetTPVCameraOffset : 1;                      // Mask: 0x10, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bUseBPOverrideRootRotationOffset : 1;              // Mask: 0x20, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bSpawnedByMission : 1;                             // Mask: 0x40, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bAllowFullClipReload : 1;                          // Mask: 0x80, PropSize: 0x10xE54(0x1)(None)
	uint8                                        bForceAllowPassengerTPV : 1;                       // Mask: 0x1, PropSize: 0x10xE55(0x1)(None)
	uint8                                        bPreventCarriedZoomInOut : 1;                      // Mask: 0x2, PropSize: 0x10xE55(0x1)(None)
	uint8                                        bInstantAccuracyReset : 1;                         // Mask: 0x4, PropSize: 0x10xE55(0x1)(None)
	uint8                                        bForceAlwaysPlayEquipAnim : 1;                     // Mask: 0x8, PropSize: 0x10xE55(0x1)(None)
	uint8                                        BitPad_39C : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D92[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIgnoreReloadState : 1;                            // Mask: 0x1, PropSize: 0x10xE58(0x1)(None)
	uint8                                        bUseBPPostSpawnMuzzleEffect : 1;                   // Mask: 0x2, PropSize: 0x10xE58(0x1)(None)
	uint8                                        BitPad_39D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D93[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBPGetCrosshairColor : 1;                       // Mask: 0x1, PropSize: 0x10xE5C(0x1)(None)
	uint8                                        bIgnorePlayerReload : 1;                           // Mask: 0x2, PropSize: 0x10xE5C(0x1)(None)
	uint8                                        bUseAmmoReloadState : 1;                           // Mask: 0x4, PropSize: 0x10xE5C(0x1)(None)
	uint8                                        BitPad_39E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D94[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_39F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseBPOnBurstStarted : 1;                          // Mask: 0x2, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bUseBPOnBurstFinished : 1;                         // Mask: 0x4, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bUseBurstStartAnim : 1;                            // Mask: 0x8, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bUseBurstFinishAnim : 1;                           // Mask: 0x10, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bSecondaryActionStopsFire : 1;                     // Mask: 0x20, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bUseAmmoSupportsAdjustedAmmoPerShot : 1;           // Mask: 0x40, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bIsMeleeWeapon : 1;                                // Mask: 0x80, PropSize: 0x10xE60(0x1)(None)
	uint8                                        bUseTargetingAimDownSightsExposureAdjustment : 1;  // Mask: 0x1, PropSize: 0x10xE61(0x1)(None)
	uint8                                        bAutoDestroyPlayerWeaponWhenSleeping : 1;          // Mask: 0x2, PropSize: 0x10xE61(0x1)(None)
	uint8                                        bForceOwnerControllerHighQualityViewerReplication : 1; // Mask: 0x4, PropSize: 0x10xE61(0x1)(None)
	uint8                                        bTargetingForceOwnerControllerHighQualityViewerReplication : 1; // Mask: 0x8, PropSize: 0x10xE61(0x1)(None)
	uint8                                        BitPad_3A0 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3D95[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bBPDoClientCheckCanFire;                           // 0xE64(0x1)(None)
	bool                                         bRestrictTPVCameraYaw;                             // 0xE65(0x1)(None)
	uint8                                        Pad_3D96[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TPVCameraYawRange;                                 // 0xE68(0x4)(None)
	bool                                         bFoceSimulatedTick;                                // 0xE6C(0x1)(None)
	bool                                         bWasLastFireFromGamePad;                           // 0xE6D(0x1)(None)
	bool                                         bDisableWeaponCrosshair;                           // 0xE6E(0x1)(None)
	uint8                                        Pad_3D97[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         DyePreviewMeshOverrideSK;                          // 0xE70(0x8)(ZeroConstructor)
	class UStaticMesh*                           DyePreviewMeshOverrideSM;                          // 0xE78(0x8)(ZeroConstructor)
	bool                                         bBPOverrideAspectRatio;                            // 0xE80(0x1)(None)
	bool                                         bBPOverrideFPVMasterPoseComponent;                 // 0xE81(0x1)(None)
	bool                                         bForceAllowMountedWeaponry;                        // 0xE82(0x1)(None)
	uint8                                        Pad_3D98[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FireCameraShakeSpreadScaleExponent;                // 0xE84(0x4)(None)
	float                                        FireCameraShakeSpreadScaleExponentLessThan;        // 0xE88(0x4)(None)
	float                                        FireCameraShakeSpreadScaleMultiplierLessThan;      // 0xE8C(0x4)(None)
	float                                        FireCameraShakeSpreadScaleMultiplier;              // 0xE90(0x4)(None)
	bool                                         bUseFireCameraShakeScale;                          // 0xE94(0x1)(None)
	bool                                         bForceTickWithNoController;                        // 0xE95(0x1)(None)
	uint8                                        Pad_3D99[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInstantWeaponData                    InstantConfig;                                     // 0xE98(0x30)(ZeroConstructor)
	float                                        CurrentFiringSpread;                               // 0xEC8(0x4)(None)
	uint8                                        Pad_3D9A[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             ScopedBuff;                                        // 0xED8(0x30)(ZeroConstructor)
	uint8                                        Pad_3D9B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         OverrideTPVShieldAnimation;                        // 0xF10(0x8)(ZeroConstructor)
	bool                                         bAllowTargetingDuringMeleeSwing;                   // 0xF18(0x1)(None)
	uint8                                        Pad_3D9C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FPVMuzzleLocationOffset;                           // 0xF20(0x18)(None)
	struct FVector                               TPVMuzzleLocationOffset;                           // 0xF38(0x18)(None)
	bool                                         bForceTPV_EquippedWhileRiding;                     // 0xF50(0x1)(None)
	bool                                         bCutsEnemyGrapplingCable;                          // 0xF51(0x1)(None)
	uint8                                        Pad_3D9D[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FPVInventoryReequipOffset;                         // 0xF58(0x18)(None)
	bool                                         bDisableGamepadAimAssist;                          // 0xF70(0x1)(None)
	uint8                                        Pad_3D9E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimAssistStrengthWeapon;                           // 0xF74(0x4)(None)
	uint8                                        Pad_3D9F[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bForceTPVCameraOffset;                             // 0xF84(0x1)(None)
	bool                                         bUseBPSpawnMeleeEffects;                           // 0xF85(0x1)(None)
	uint8                                        Pad_3DA0[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWeaponAnim                           StartBurstAnim;                                    // 0xF88(0x10)(ZeroConstructor)
	struct FWeaponAnim                           FinishBurstAnim;                                   // 0xF98(0x10)(ZeroConstructor)
	uint8                                        Pad_3DA1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AmmoInClipOnReload;                                // 0xFAC(0x4)(None)
	enum class EWeaponAmmoReloadState            AmmoReloadState;                                   // 0xFB0(0x1)(None)
	uint8                                        Pad_3DA2[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                WeaponCameraSettingsOverrideClass;                 // 0xFC0(0x8)(ZeroConstructor)
	bool                                         bFPVScopedTargetingHidesNonWeaponHUD;              // 0xFC8(0x1)(None)
	uint8                                        Pad_3DA3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastSelectedMeleeAnim;                             // 0xFCC(0x4)(None)
	uint8                                        bImpactAttachFXUsesPawnMesh : 1;                   // Mask: 0x1, PropSize: 0x10xFD0(0x1)(None)
	uint8                                        BitPad_3A1 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DA4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          MeleeAnimListImpactFXAttachSockets1P;              // 0xFD8(0x10)(None)
	TArray<class FName>                          MeleeAnimListImpactFXAttachSockets3P;              // 0xFE8(0x10)(None)
	uint8                                        bUseBPOverrideMeleeSwingSockets : 1;               // Mask: 0x1, PropSize: 0x10xFF8(0x1)(None)
	uint8                                        BitPad_3A2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DA5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            RemoveIcon;                                        // 0x1000(0x8)(ZeroConstructor)
	class UTexture2D*                            RemovalOptionsIcon;                                // 0x1008(0x8)(ZeroConstructor)
	class UTexture2D*                            LockToIcon;                                        // 0x1010(0x8)(ZeroConstructor)
	class UTexture2D*                            UnlockFromIcon;                                    // 0x1018(0x8)(ZeroConstructor)
	float                                        WeaponDurabilityPercent;                           // 0x1020(0x4)(None)
	float                                        WeaponDurabilityPercentUpdateInterval;             // 0x1024(0x4)(None)
	uint8                                        bUseBPOnMaxDurability : 1;                         // Mask: 0x1, PropSize: 0x10x1028(0x1)(None)
	uint8                                        BitPad_3A3 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DA6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FluidSimSplashStrength;                            // 0x102C(0x4)(None)
	class UNiagaraSystem*                        FluidSimSplashTemplateOverride;                    // 0x1030(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AShooterWeapon* GetDefaultObj();

	void UsesAmmo(bool ReturnValue);
	void UseAmmo(int32 UseAmmoAmountOverride);
	void UpdateDurabilityMaterialParams();
	void UpdateAmmoReloadState();
	void ToggleAccessory();
	void StopWeaponAnimation(const struct FWeaponAnim& Animation, bool bReplicate, bool bReplicateToInstigator);
	void StopSecondaryActionEvent();
	void StopFire();
	void StopAltFire();
	void StartUnequipEvent();
	void StartUnequip();
	void StartSecondaryActionEvent();
	void StartFire(bool bFromGamepad);
	void StartAltFire();
	void SetAmmoReloadState(enum class EWeaponAmmoReloadState NewState);
	void SetAmmoInClip(int32 NewAmmo);
	void SetAccessoryEnabled(bool bEnabled);
	void ServerToggleAccessory();
	void ServerStopSecondaryAction();
	void ServerStopFire();
	void ServerStopAltFire();
	void ServerStartSecondaryAction();
	void ServerStartReload();
	void ServerStartFire();
	void ServerStartAltFire();
	void ServerSetMeleeAnimIndex(int32 SelectedMeleeAnim);
	void ServerSetColorizeRegion(int32 TheRegion, bool bValToUse);
	void SelectMeleeAttackAnim(int32 ForceSelectedAnim, const struct FWeaponAnim& ReturnValue);
	void ReloadWeapon();
	void PlayWeaponSound(class USoundCue* Sound, class UAudioComponent* ReturnValue);
	void PlayWeaponBreakAnimation();
	void PlayWeaponAnimationEx(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float ReturnValue);
	void PlayWeaponAnimation(const struct FWeaponAnim& Animation, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float ReturnValue);
	void PlayUseHarvestAnimation();
	void OnRep_WeaponDurabilityPercent();
	void OnRep_NetLoopedWeaponFire();
	void OnRep_MyPawn();
	void OnRep_CurrentAmmoInClip();
	void OnRep_AccessoryToggle();
	void OnInstigatorSleepingStateChanged();
	void OnInstigatorPlayDyingEvent();
	void OnDurabilityChanged(float NewDurabilityPercent, bool bForceUpdate);
	void OnAttachedToPawn();
	void NetSetLastAttackMontage(int32 Index);
	void LoadPrimalCameraWeaponOverride(class UClass* WeaponCameraOverrideClass);
	void IsPlayingWeaponAnimMontage(const struct FWeaponAnim& WeaponAnimMontage, float TimeFromEndToConsiderFinished, bool ReturnValue);
	void IsOwningClient(bool ReturnValue);
	void IsLocallyOwned(bool ReturnValue);
	void IsInMeleeAttack(bool ReturnValue);
	void IsFiring(bool ReturnValue);
	void IsClimbing(bool ReturnValue);
	void HasInfiniteAmmo(bool ReturnValue);
	void GetWeaponMesh(class USkeletalMeshComponent* ReturnValue);
	void GetWeaponDamageMultiplier(float ReturnValue);
	void GetWeaponCameraSettingsOverride(class UPrimalCameraConfig_WeaponOverride* ReturnValue);
	void GetWeaponAttackPlayRate(float ReturnValue);
	void GetStandingAnimation(float OutBlendInTime, float OutBlendOutTime, class UAnimSequence* ReturnValue);
	void GetReloadAnim(bool bOnlyCheckRegularReload, const struct FWeaponAnim& ReturnValue);
	void GetPawnOwner(class AShooterCharacter* ReturnValue);
	void GetMuzzleLocation(const struct FVector& ReturnValue);
	void GetMuzzleDirection(const struct FVector& ReturnValue);
	void GetDebugInfoString(const class FString& ReturnValue);
	void GetCurrentAmmoInClip(int32 ReturnValue);
	void GetCurrentAmmo(int32 ReturnValue);
	void GetColorizeRegionActivated(int32 Index, bool ReturnValue);
	void GetAmmoReloadState(enum class EWeaponAmmoReloadState ReturnValue);
	void GetAdjustedAim(const struct FVector& ReturnValue);
	void ForceUpdateClientAmmo();
	void ForceTPVTargetingAnimation(bool ReturnValue);
	void ForcesTPVCameraOffset(bool ReturnValue);
	void ForceMeshUpdate(bool bIsFirstPerson);
	void FindComponentByName(class FName ComponentName, class USceneComponent* ReturnValue);
	void DoMeleeAttack();
	void DoHandleFiring();
	void ConsumeAmmoItem(int32 Quantity);
	void ClientStopSimulatingWeaponFire();
	void ClientStartReload();
	void ClientStartMuzzleFX();
	void ClientSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
	void ClientSimulateWeaponFire();
	void ClientSetClipAmmo(int32 NewClipAmmo, bool bOnlyUpdateItem);
	void ClientPlayShieldHitAnim();
	void ClearClientReload();
	void CheckItemAssocation();
	void CanReload(bool ReturnValue);
	void CanMeleeAttack(bool ReturnValue);
	void CanFire(bool bForceAllowSubmergedFiring, bool ReturnValue);
	void BPWeaponZoom(bool bZoomingIn);
	void BPWeaponDealDamage(const struct FHitResult& Impact, const struct FVector& ShootDir, int32 DamageAmount, class UClass* DamageType, float Impulse, int32 ReturnValue);
	void BPWeaponCanFire(bool ReturnValue);
	void BPTryFireWeapon(bool ReturnValue);
	void BPToggleAccessoryFailed();
	void BPToggleAccessory();
	void BPStopMeleeAttack();
	void BPStartEquippedNotify();
	void BPSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
	void BPShouldDealDamage(class AActor* TestActor, bool ReturnValue);
	void BPRequestReload();
	void BPRemainEquipped(bool ReturnValue);
	void BPPreventSwitchingWeapon(bool ReturnValue);
	void BPPostSpawnMuzzleEffect(class UParticleSystemComponent* NewMuzzlePSC);
	void BPOverrideRootRotationOffset(const struct FRotator& InRootRotation, const struct FRotator& ReturnValue);
	void BPOverrideMeleeSwingSocket(class FName FromSocket, class FName ReturnValue);
	void BPOverrideFPVMasterPoseComponent(class USkeletalMeshComponent* ReturnValue);
	void BPOverrideAimDirection(const struct FVector& DesiredAimDirection, const struct FVector& ReturnValue);
	void BPOnWeaponAnimPlayedNotify(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
	void BPOnStopTargeting(bool bFromGamepadLeft);
	void BPOnStartTargeting(bool bFromGamepadLeft);
	void BPOnScoped();
	void BPOnMaxDurability();
	void BPOnBurstStarted();
	void BPOnBurstFinished();
	void BPModifyFOV(float InFOV, float ReturnValue);
	void BPMeleeAttackStarted();
	void BPLostController();
	void BPIsValidUnStasisCaster(bool ReturnValue);
	void BPHandleMeleeAttack();
	void BPGlobalFireWeapon();
	void BPGetTPVCameraOffset(const struct FVector& ReturnValue);
	void BPGetTargetingTooltipInfoLabel(class FText ReturnValue);
	void BPGetSelectedMeleeAttackAnim(const struct FWeaponAnim& ReturnValue);
	void BPGetSeatingAnimation(class UAnimSequence* ReturnValue);
	void BPGetDebugInfoString(const class FString& ReturnValue);
	void BPGetCurrentState(enum class EWeaponState ReturnValue);
	void BPGetCrosshairColor(const struct FColor& ReturnValue);
	void BPGetActorForTargetingTooltip(class AActor* ReturnValue);
	void BPForceTPVTargetingAnimation(bool ReturnValue);
	void BPFireWeapon();
	void BPFiredWeapon();
	void BPEndPlay();
	void BPDrawHud(class AShooterHUD* HUD);
	void BPConstrainAspectRatio(float OutAspectRatio, bool ReturnValue);
	void BPCanToggleAccessory(bool ReturnValue);
	void BPCanMeleeAttack(bool ReturnValue);
	void BPCanEquip(class AShooterCharacter* ByCharacter, bool ReturnValue);
	void BPAppliedPrimalItemToWeapon();
	void BPAnimNotifyCustomState_End(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomState_Begin(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
	void BPAnimNotifyCustomEvent(class FName CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
	void BPAllowNativeFireWeapon(bool ReturnValue);
	void BPAdjustAmmoPerShot(int32 ReturnValue);
	void BP_OnReloadNotify();
	void AllowUnequip(bool ReturnValue);
	void AllowTargeting(bool ReturnValue);
	void AllowedToFire(bool bForceAllowSubmergedFiring, bool ReturnValue);
};

// 0xD8 (0x1110 - 0x1038)
// Class ShooterGame.ShooterWeapon_Projectile
class AShooterWeapon_Projectile : public AShooterWeapon
{
public:
	bool                                         bUseAmmoOnFireProjectile;                          // 0x1038(0x1)(None)
	uint8                                        Pad_3DB2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ProjectileClass;                                   // 0x1040(0x8)(ZeroConstructor)
	class USoundCue*                             FireProjectileSound;                               // 0x1048(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  ProjectileMesh3P;                                  // 0x1050(0x8)(ZeroConstructor)
	class FName                                  ProjectileAttachPoint3P;                           // 0x1058(0x8)(None)
	uint8                                        Pad_3DB3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSpawnProjectileOnClient;                          // 0x1064(0x1)(None)
	bool                                         bUseBPSelectProjectileToFire;                      // 0x1065(0x1)(None)
	uint8                                        Pad_3DB4[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ProjectileSpreadYaw;                               // 0x1068(0x4)(None)
	float                                        ProjectileSpreadPitch;                             // 0x106C(0x4)(None)
	float                                        ServerMaxProjectileAngleError;                     // 0x1070(0x4)(None)
	float                                        ServerMaxProjectileOriginError;                    // 0x1074(0x4)(None)
	uint8                                        bServerFireProjectileForceUpdateAimActors : 1;     // Mask: 0x1, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bUseHideProjectileAnimEvents : 1;                  // Mask: 0x2, PropSize: 0x10x1078(0x1)(None)
	uint8                                        BitPad_3A4 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DB5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  Mesh1PProjectileBoneName;                          // 0x107C(0x8)(None)
	float                                        LockOnYScreenPercentage;                           // 0x1084(0x4)(None)
	bool                                         bUseLockOn;                                        // 0x1088(0x1)(None)
	uint8                                        Pad_3DB6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockOnTime;                                        // 0x108C(0x4)(None)
	float                                        CurrentLockOnTime;                                 // 0x1090(0x4)(None)
	float                                        LockOnMaxTraceDistance;                            // 0x1094(0x4)(None)
	struct FVector                               LockOnTraceBoxExtent;                              // 0x1098(0x18)(None)
	class UMaterialInterface*                    ActorLockedMI;                                     // 0x10B0(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ActorLockedMID;                                    // 0x10B8(0x8)(ZeroConstructor)
	class UMaterialInterface*                    ActorInLockedAreaMI;                               // 0x10C0(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ActorInLockedAreaMID;                              // 0x10C8(0x8)(ZeroConstructor)
	bool                                         bHasLockedTarget;                                  // 0x10D0(0x1)(None)
	uint8                                        Pad_3DB7[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Projectile* GetDefaultObj();

	void SetLockedTarget(class AActor* Actor, bool bIsLocked);
	void ServerFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int32 RandomSeed, int32 ProjectileID);
	void ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, int32 ProjectileID);
	void OnUnHideProjectile();
	void OnHideProjectile();
	void Listener_LockOn_Update(bool Reset);
	void Listener_LockOn_Stop();
	void GetTrajectoryTarget(int32 SubSteps, float TotalTime, const struct FHitResult& ReturnValue);
	void ClientsFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int32 RandomSeed, int32 ProjectileID);
	void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, int32 ProjectileID);
	void CheckRefireTimer();
	void BPSelectProjectileToFire(class UClass* ProjectileClassOverride, class USoundCue* FireSoundOverride, bool bSpawnOnClient, float OverrideMaxSpeed);
	void BPOnSpawnedProjectile(class AShooterProjectile* Projectile);
};

// 0x88 (0x1198 - 0x1110)
// Class ShooterGame.PrimalWeaponBow
class APrimalWeaponBow : public AShooterWeapon_Projectile
{
public:
	float                                        MinimumInitialSpeed;                               // 0x1110(0x4)(None)
	float                                        MaximumInitialSpeed;                               // 0x1114(0x4)(None)
	float                                        PullingTimeForMaximumSpeed;                        // 0x1118(0x4)(None)
	float                                        DamageFactorForSlowArrows;                         // 0x111C(0x4)(None)
	float                                        DamageFactorForFastArrows;                         // 0x1120(0x4)(None)
	float                                        MinimumPullingTimeToFire;                          // 0x1124(0x4)(None)
	uint8                                        bDisablePullingOnCrouch : 1;                       // Mask: 0x1, PropSize: 0x10x1128(0x1)(None)
	uint8                                        bDisablePullingOnProne : 1;                        // Mask: 0x2, PropSize: 0x10x1128(0x1)(None)
	uint8                                        bAlwaysPlayTPVPullStringAnim : 1;                  // Mask: 0x4, PropSize: 0x10x1128(0x1)(None)
	uint8                                        BitPad_3A5 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DB8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                MaxPullCameraShake;                                // 0x1130(0x8)(ZeroConstructor)
	class FName                                  ArrowBoneName;                                     // 0x1138(0x8)(None)
	struct FWeaponAnim                           PullStringAnim;                                    // 0x1140(0x10)(ZeroConstructor)
	uint8                                        bHideWeaponOnLaunch : 1;                           // Mask: 0x1, PropSize: 0x10x1150(0x1)(None)
	uint8                                        bUseArrowMesh1P : 1;                               // Mask: 0x2, PropSize: 0x10x1150(0x1)(None)
	uint8                                        bHideOriginalArrowBone1P : 1;                      // Mask: 0x4, PropSize: 0x10x1150(0x1)(None)
	uint8                                        bAttachArrowToWeaponMesh3P : 1;                    // Mask: 0x8, PropSize: 0x10x1150(0x1)(None)
	uint8                                        bReloadOnEmptyClip : 1;                            // Mask: 0x10, PropSize: 0x10x1150(0x1)(None)
	uint8                                        BitPad_3A6 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DB9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ArrowOnWeaponAttachPoint3P;                        // 0x1154(0x8)(None)
	uint8                                        Pad_3DBA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  ArrowMesh3P;                                       // 0x1160(0x8)(ZeroConstructor)
	class FName                                  ArrowAttachPoint3P;                                // 0x1168(0x8)(None)
	class UStaticMeshComponent*                  ArrowMesh1P;                                       // 0x1170(0x8)(ZeroConstructor)
	class FName                                  ArrowAttachPoint1P;                                // 0x1178(0x8)(None)
	uint8                                        bPendingPullString : 1;                            // Mask: 0x1, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bNewPullStringEvent : 1;                           // Mask: 0x2, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bIsPullingString : 1;                              // Mask: 0x4, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bIsPlayingPullStringAnim : 1;                      // Mask: 0x8, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bDidFireWeapon : 1;                                // Mask: 0x10, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bIsLastArrow : 1;                                  // Mask: 0x20, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bDontRequireIdleForReload : 1;                     // Mask: 0x40, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bUseBPCanStartFire : 1;                            // Mask: 0x80, PropSize: 0x10x1180(0x1)(None)
	uint8                                        bForceServerCheckPullingTime : 1;                  // Mask: 0x1, PropSize: 0x10x1181(0x1)(None)
	uint8                                        BitPad_3A7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DBB[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PullingTime;                                       // 0x1184(0x4)(None)
	float                                        ProjectileSpeed;                                   // 0x1188(0x4)(None)
	uint8                                        Pad_3DBC[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWeaponBow* GetDefaultObj();

	void UpdateTPVBowAnimation();
	void UnHideArrow();
	void ServerSetPullString(bool bIsPulling);
	void HideArrow();
	void BPSimulatedResetSetPullingTime();
	void BPCanStartFire(bool ReturnValue);
};

// 0x8 (0x11A0 - 0x1198)
// Class ShooterGame.PrimalWeaponBoomerang
class APrimalWeaponBoomerang : public APrimalWeaponBow
{
public:
	float                                        ChanceToBreak;                                     // 0x1198(0x4)(None)
	uint8                                        bClientHideBoomerang : 1;                          // Mask: 0x1, PropSize: 0x10x119C(0x1)(None)
	uint8                                        Pad_3DBD[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWeaponBoomerang* GetDefaultObj();

	void OnRep_ClientHideBoomerang();
};

// 0x8 (0x1040 - 0x1038)
// Class ShooterGame.ShooterWeapon_Melee
class AShooterWeapon_Melee : public AShooterWeapon
{
public:
	bool                                         bUseAltFireOnNormalFire;                           // 0x1038(0x1)(None)
	uint8                                        Pad_3DBE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Melee* GetDefaultObj();

};

// 0xC0 (0x1100 - 0x1040)
// Class ShooterGame.PrimalWeaponElectronicBinoculars
class APrimalWeaponElectronicBinoculars : public AShooterWeapon_Melee
{
public:
	float                                        YPosDistance;                                      // 0x1040(0x4)(None)
	float                                        XPosDistance;                                      // 0x1044(0x4)(None)
	float                                        CompSize;                                          // 0x1048(0x4)(None)
	float                                        DistanceX;                                         // 0x104C(0x4)(None)
	float                                        DistanceY;                                         // 0x1050(0x4)(None)
	float                                        DistanceSize;                                      // 0x1054(0x4)(None)
	class UClass*                                NightVisionBuff;                                   // 0x1058(0x8)(ZeroConstructor)
	class USceneComponent*                       AudioListener;                                     // 0x1060(0x8)(ZeroConstructor)
	class UMaterialInterface*                    ScopeCompassMI;                                    // 0x1068(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              ScopeCompassMID;                                   // 0x1070(0x8)(ZeroConstructor)
	class UMaterialInterface*                    LatitudeMI;                                        // 0x1078(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LatitudeMID;                                       // 0x1080(0x8)(ZeroConstructor)
	class UMaterialInterface*                    LongitudeMI;                                       // 0x1088(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LongitudeMID;                                      // 0x1090(0x8)(ZeroConstructor)
	float                                        LatLongInterpSpeed;                                // 0x1098(0x4)(None)
	uint8                                        Pad_3DBF[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              CurrentCompassAngle;                               // 0x10A8(0x18)(None)
	float                                        CompassNorthAngle;                                 // 0x10C0(0x4)(None)
	float                                        CompassInterpSpeed;                                // 0x10C4(0x4)(None)
	float                                        LatitudeOrigin;                                    // 0x10C8(0x4)(None)
	float                                        LatitudeScale;                                     // 0x10CC(0x4)(None)
	float                                        LongitudeOrigin;                                   // 0x10D0(0x4)(None)
	float                                        LongitudeScale;                                    // 0x10D4(0x4)(None)
	float                                        SoundFadeInSpeed;                                  // 0x10D8(0x4)(None)
	float                                        MinTargetingFOV;                                   // 0x10DC(0x4)(None)
	float                                        MaxTargetingFOV;                                   // 0x10E0(0x4)(None)
	uint8                                        Pad_3DC0[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bZoomIn;                                           // 0x10FA(0x1)(None)
	bool                                         bZoomOut;                                          // 0x10FB(0x1)(None)
	bool                                         bIsNightVisionOn;                                  // 0x10FC(0x1)(None)
	uint8                                        Pad_3DC1[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWeaponElectronicBinoculars* GetDefaultObj();

	void SetBinocularsTargeting(bool SetTargeting);
	void ServerSetActivateNightVision(int8 bActive);
	void GetZoomFloat(float ReturnValue);
	void ClientSetActivateNightVision(int8 bActive);
};

// 0x2F0 (0x1330 - 0x1040)
// Class ShooterGame.PrimalWeaponGPS
class APrimalWeaponGPS : public AShooterWeapon_Melee
{
public:
	class USkeletalMeshComponent*                CompassMesh1P;                                     // 0x1040(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                CompassMesh3P;                                     // 0x1048(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                MapMesh3P;                                         // 0x1050(0x8)(ZeroConstructor)
	class UStaticMesh*                           AssetSM_MarkerMesh;                                // 0x1058(0x8)(ZeroConstructor)
	class UStaticMesh*                           AssetSM_PlayerMarkerMesh;                          // 0x1060(0x8)(ZeroConstructor)
	class UStaticMesh*                           AssetSM_BalloonMarkerMesh;                         // 0x1068(0x8)(ZeroConstructor)
	float                                        MarkerMapScaleX;                                   // 0x1070(0x4)(None)
	float                                        MarkerMapScaleY;                                   // 0x1074(0x4)(None)
	float                                        MarkerOffsetZ;                                     // 0x1078(0x4)(None)
	uint8                                        Pad_3DC2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              MarkerRotationMin;                                 // 0x1080(0x18)(None)
	struct FRotator                              MarkerRotationMax;                                 // 0x1098(0x18)(None)
	int32                                        MaxMapMarkers;                                     // 0x10B0(0x4)(None)
	struct FColor                                MarkerTextColor;                                   // 0x10B4(0x4)(None)
	struct FColor                                PlayerMarkerTextColor;                             // 0x10B8(0x4)(None)
	uint8                                        Pad_3DC3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshComponent*>          MarkerComponents;                                  // 0x10C0(0x10)(ZeroConstructor)
	uint8                                        Pad_3DC4[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  PlayerLocationMArkerComponent;                     // 0x10E0(0x8)(ZeroConstructor)
	uint8                                        Pad_3DC5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  ItemBalloonMarkerComponent;                        // 0x10F8(0x8)(ZeroConstructor)
	class FName                                  MapAttachPoint3P;                                  // 0x1100(0x8)(None)
	class FName                                  CompassAttachPoint1P;                              // 0x1108(0x8)(None)
	class FName                                  GPSBoneName1P;                                     // 0x1110(0x8)(None)
	struct FWeaponAnim                           ZoomInMapAnim;                                     // 0x1118(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ZoomInGPSAnim;                                     // 0x1128(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ZoomInCompassAnim;                                 // 0x1138(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ZoomOutMapAnim;                                    // 0x1148(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ZoomOutGPSAnim;                                    // 0x1158(0x10)(ZeroConstructor)
	struct FWeaponAnim                           ZoomOutCompassAnim;                                // 0x1168(0x10)(ZeroConstructor)
	struct FWeaponAnim                           DisplayMapAnim;                                    // 0x1178(0x10)(ZeroConstructor)
	struct FWeaponAnim                           DisplayGPSAnim;                                    // 0x1188(0x10)(ZeroConstructor)
	struct FWeaponAnim                           DisplayCompassAnim;                                // 0x1198(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipMapAnim;                                    // 0x11A8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipGPSAnim;                                    // 0x11B8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipCompassAnim;                                // 0x11C8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnequipCompassAndMapAnim;                          // 0x11D8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeMapAnim;                                      // 0x11E8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeGPSAnim;                                      // 0x11F8(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeCompassAnim;                                  // 0x1208(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MeleeCompassMapAnim;                               // 0x1218(0x10)(ZeroConstructor)
	class UAnimMontage*                          TPV_MapOnlyIdle;                                   // 0x1228(0x8)(ZeroConstructor)
	class UAnimMontage*                          TPV_GPSOnlyIdle;                                   // 0x1230(0x8)(ZeroConstructor)
	class UAnimMontage*                          TPV_MapAndGPSIdle;                                 // 0x1238(0x8)(ZeroConstructor)
	class FName                                  DigitParameterName;                                // 0x1240(0x8)(None)
	int32                                        LatitudeMaterialIndex1;                            // 0x1248(0x4)(None)
	int32                                        LatitudeMaterialIndex2;                            // 0x124C(0x4)(None)
	int32                                        LatitudeMaterialIndex3;                            // 0x1250(0x4)(None)
	int32                                        LongitudeMaterialIndex1;                           // 0x1254(0x4)(None)
	int32                                        LongitudeMaterialIndex2;                           // 0x1258(0x4)(None)
	int32                                        LongitudeMaterialIndex3;                           // 0x125C(0x4)(None)
	int32                                        MapMaterialIndex;                                  // 0x1260(0x4)(None)
	float                                        LatitudeOrigin;                                    // 0x1264(0x4)(None)
	float                                        LatitudeScale;                                     // 0x1268(0x4)(None)
	float                                        LongitudeOrigin;                                   // 0x126C(0x4)(None)
	float                                        LongitudeScale;                                    // 0x1270(0x4)(None)
	int32                                        GPSCompassMaterialIndex;                           // 0x1274(0x4)(None)
	class FName                                  CompassCenterParameterName;                        // 0x1278(0x8)(None)
	class FName                                  FogOfWarTextureParameterName;                      // 0x1280(0x8)(None)
	float                                        CompassNorthAngle;                                 // 0x1288(0x4)(None)
	float                                        CompassInterpSpeed;                                // 0x128C(0x4)(None)
	float                                        SwingSpeed;                                        // 0x1290(0x4)(None)
	float                                        MaxSwingAngle;                                     // 0x1294(0x4)(None)
	struct FVector                               ItemBalloonLocation;                               // 0x1298(0x18)(None)
	uint8                                        bShowMap : 1;                                      // Mask: 0x1, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        bShowGPS : 1;                                      // Mask: 0x2, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        bUseCompassInsteadOfGPS : 1;                       // Mask: 0x4, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        bZoomInMap : 1;                                    // Mask: 0x8, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        bZoomInGPS : 1;                                    // Mask: 0x10, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        bWasFirstPerson : 1;                               // Mask: 0x20, PropSize: 0x10x12B0(0x1)(None)
	uint8                                        BitPad_3A8 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3DC6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              CurrentCompassAngle;                               // 0x12B8(0x18)(None)
	float                                        CurrentSwingAngle;                                 // 0x12D0(0x4)(None)
	float                                        CurrentSwingFactor;                                // 0x12D4(0x4)(None)
	float                                        CurrentSwingTime;                                  // 0x12D8(0x4)(None)
	float                                        PreviousPawnYaw;                                   // 0x12DC(0x4)(None)
	class UMaterialInstanceDynamic*              GPSCompassMaterialInstance;                        // 0x12E0(0x8)(ZeroConstructor)
	int32                                        PreviousLatitudeNumber;                            // 0x12E8(0x4)(None)
	int32                                        PreviousLongitudeNumber;                           // 0x12EC(0x4)(None)
	int32                                        PreviousBalloonLatitudeNumber;                     // 0x12F0(0x4)(None)
	int32                                        PreviousBalloonLongitudeNumber;                    // 0x12F4(0x4)(None)
	class UMaterialInstanceDynamic*              LatitudeDigit1_MI;                                 // 0x12F8(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LatitudeDigit2_MI;                                 // 0x1300(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LatitudeDigit3_MI;                                 // 0x1308(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LongitudeDigit1_MI;                                // 0x1310(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LongitudeDigit2_MI;                                // 0x1318(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              LongitudeDigit3_MI;                                // 0x1320(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              Map_MI;                                            // 0x1328(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalWeaponGPS* GetDefaultObj();

	void ServerShowNone();
	void ServerShowMapOnly();
	void ServerShowGPSOnly();
	void ServerShowBoth();
	void ServerSetUseCompassInsteadOfGPS(bool bUseCompass);
	void RefreshUseCompass();
};

// 0x30 (0x1140 - 0x1110)
// Class ShooterGame.PrimalWeaponGrapplingHook
class APrimalWeaponGrapplingHook : public AShooterWeapon_Projectile
{
public:
	bool                                         bDetachGrapHookOnUnequip;                          // 0x1110(0x1)(None)
	bool                                         bPreventReeling;                                   // 0x1111(0x1)(None)
	bool                                         bPullingRope;                                      // 0x1112(0x1)(None)
	uint8                                        Pad_3DC7[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeWithGrapHook;                              // 0x1118(0x8)(None)
	class USceneComponent*                       CableAttach1P;                                     // 0x1120(0x8)(ZeroConstructor)
	class USceneComponent*                       CableAttach3P;                                     // 0x1128(0x8)(ZeroConstructor)
	class USoundCue*                             ReelInSoundCue;                                    // 0x1130(0x8)(ZeroConstructor)
	class USoundCue*                             ReelOutSoundCue;                                   // 0x1138(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalWeaponGrapplingHook* GetDefaultObj();

};

// 0x88 (0x1198 - 0x1110)
// Class ShooterGame.PrimalWeaponGrenade
class APrimalWeaponGrenade : public AShooterWeapon_Projectile
{
public:
	struct FWeaponAnim                           PrepareThrowAnim;                                  // 0x1110(0x10)(ZeroConstructor)
	struct FWeaponAnim                           QuickThrowAnim;                                    // 0x1120(0x10)(ZeroConstructor)
	struct FWeaponAnim                           OvercookHurtAnim;                                  // 0x1130(0x10)(ZeroConstructor)
	class FName                                  GrenadeBoneName;                                   // 0x1140(0x8)(None)
	class FName                                  GrenadePinBoneName;                                // 0x1148(0x8)(None)
	float                                        MaxGrenadeLife;                                    // 0x1150(0x4)(None)
	uint8                                        bDontCookGrenade : 1;                              // Mask: 0x1, PropSize: 0x10x1154(0x1)(None)
	uint8                                        bHideGrenadeOnFireProjectile : 1;                  // Mask: 0x2, PropSize: 0x10x1154(0x1)(None)
	uint8                                        bEnablePrepareThrowAnim : 1;                       // Mask: 0x4, PropSize: 0x10x1154(0x1)(None)
	uint8                                        bPreventCookingWhileProne : 1;                     // Mask: 0x8, PropSize: 0x10x1154(0x1)(None)
	uint8                                        BitPad_3A9 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bIsThrowingGrenade;                                // 0x1155(0x1)(None)
	bool                                         bIsCookingGrenade;                                 // 0x1156(0x1)(None)
	bool                                         bUseBlueprintSpeed;                                // 0x1157(0x1)(None)
	bool                                         bHideSkeletalMesh;                                 // 0x1158(0x1)(None)
	uint8                                        Pad_3DC8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CookingTime;                                       // 0x115C(0x4)(None)
	struct FVector                               ProjectileOrigin;                                  // 0x1160(0x18)(None)
	struct FVector                               ProjectileShootDir;                                // 0x1178(0x18)(None)
	uint8                                        Pad_3DC9[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsWeapScout;                                      // 0x1191(0x1)(None)
	bool                                         bPlayBothFirstAndThirdPersonOnStartFire;           // 0x1192(0x1)(None)
	uint8                                        Pad_3DCA[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWeaponGrenade* GetDefaultObj();

	void UnHidePin();
	void UnHideGrenade();
	void ServerFixScout();
	void HidePin();
	void HideGrenade();
	void BPGetProjectileSpeed(float ReturnValue);
	void BPFixScout();
};

// 0xE8 (0x3300 - 0x3218)
// Class ShooterGame.PrimalWheeledVehicleCharacter
class APrimalWheeledVehicleCharacter : public APrimalDinoCharacter
{
public:
	float                                        RetainPlayerCameraRotationWhileMovingFor;          // 0x3218(0x4)(None)
	float                                        CameraRotationInterpolationSpeed;                  // 0x321C(0x4)(None)
	class UPrimalWheeledVehicleDustType*         DustType;                                          // 0x3220(0x8)(ZeroConstructor)
	class UParticleSystemComponent*              DustPSC[0x4];                                      // 0x3228(0x20)(ZeroConstructor)
	class UAudioComponent*                       EngineAC;                                          // 0x3248(0x8)(ZeroConstructor)
	class UAudioComponent*                       HonkAC;                                            // 0x3250(0x8)(ZeroConstructor)
	class UAudioComponent*                       SkidAC;                                            // 0x3258(0x8)(ZeroConstructor)
	class USoundCue*                             SkidSound;                                         // 0x3260(0x8)(ZeroConstructor)
	class USoundCue*                             HonkSound;                                         // 0x3268(0x8)(ZeroConstructor)
	class USoundCue*                             SkidSoundStop;                                     // 0x3270(0x8)(ZeroConstructor)
	class USoundCue*                             LandingSound;                                      // 0x3278(0x8)(ZeroConstructor)
	class USoundCue*                             ImpactSound;                                       // 0x3280(0x8)(ZeroConstructor)
	float                                        SkidFadeoutTime;                                   // 0x3288(0x4)(None)
	float                                        SkidThresholdVelocity;                             // 0x328C(0x4)(None)
	float                                        LongSlipSkidThreshold;                             // 0x3290(0x4)(None)
	float                                        LateralSlipSkidThreshold;                          // 0x3294(0x4)(None)
	float                                        SkidDurationRequiredForStopSound;                  // 0x3298(0x4)(None)
	uint8                                        Pad_3DCB[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpringCompressionLandingThreshold;                 // 0x32A8(0x4)(None)
	uint8                                        Pad_3DCC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       DeathFX;                                           // 0x32B0(0x8)(ZeroConstructor)
	float                                        UpForce;                                           // 0x32B8(0x4)(None)
	float                                        BackForce;                                         // 0x32BC(0x4)(None)
	bool                                         bFollowCamera;                                     // 0x32C0(0x1)(None)
	uint8                                        Pad_3DCD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinimumDamageSpeed;                                // 0x32C4(0x4)(None)
	uint8                                        Pad_3DCE[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CenterTraceLocationOffset;                         // 0x32E0(0x18)(None)
	uint8                                        Pad_3DCF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWheeledVehicleCharacter* GetDefaultObj();

	void StopHonk();
	void StartHonk();
	void ServerHonk(bool bEnable);
	void NetHonk(bool bEnable);
};

// 0x90 (0xC0 - 0x30)
// Class ShooterGame.PrimalWheeledVehicleDustType
class UPrimalWheeledVehicleDustType : public UDataAsset
{
public:
	class UParticleSystem*                       DefaultFX;                                         // 0x30(0x8)(ZeroConstructor)
	class UParticleSystem*                       ConcreteFX;                                        // 0x38(0x8)(ZeroConstructor)
	class UParticleSystem*                       DirtFX;                                            // 0x40(0x8)(ZeroConstructor)
	class UParticleSystem*                       WaterFX;                                           // 0x48(0x8)(ZeroConstructor)
	class UParticleSystem*                       MetalFX;                                           // 0x50(0x8)(ZeroConstructor)
	class UParticleSystem*                       WoodFX;                                            // 0x58(0x8)(ZeroConstructor)
	class UParticleSystem*                       GrassFX;                                           // 0x60(0x8)(ZeroConstructor)
	class UParticleSystem*                       FleshFX;                                           // 0x68(0x8)(ZeroConstructor)
	class UParticleSystem*                       LeavesFX;                                          // 0x70(0x8)(ZeroConstructor)
	class UParticleSystem*                       RockFX;                                            // 0x78(0x8)(ZeroConstructor)
	class UParticleSystem*                       SandFX;                                            // 0x80(0x8)(ZeroConstructor)
	class UParticleSystem*                       SnowFX;                                            // 0x88(0x8)(ZeroConstructor)
	float                                        DefaultMinSpeed;                                   // 0x90(0x4)(None)
	float                                        ConcreteMinSpeed;                                  // 0x94(0x4)(None)
	float                                        DirtMinSpeed;                                      // 0x98(0x4)(None)
	float                                        WaterMinSpeed;                                     // 0x9C(0x4)(None)
	float                                        MetalMinSpeed;                                     // 0xA0(0x4)(None)
	float                                        WoodMinSpeed;                                      // 0xA4(0x4)(None)
	float                                        GrassMinSpeed;                                     // 0xA8(0x4)(None)
	float                                        FleshMinSpeed;                                     // 0xAC(0x4)(None)
	float                                        LeavesMinSpeed;                                    // 0xB0(0x4)(None)
	float                                        RockMinSpeed;                                      // 0xB4(0x4)(None)
	float                                        SandMinSpeed;                                      // 0xB8(0x4)(None)
	float                                        SnowMinSpeed;                                      // 0xBC(0x4)(None)

	static class UClass* StaticClass();
	static class UPrimalWheeledVehicleDustType* GetDefaultObj();

};

// 0x190 (0x248 - 0xB8)
// Class ShooterGame.PrimalWindSourceComponent
class UPrimalWindSourceComponent : public UActorComponent
{
public:
	uint8                                        bEnableFluidInteraction : 1;                       // Mask: 0x1, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bEnableBubbleSpawnWhenUnderwaterIfWaterInteractionIsEnabled : 1; // Mask: 0x2, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bEnableFoliageInteraction : 1;                     // Mask: 0x4, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bFluidInteractionWasThrottled : 1;                 // Mask: 0x8, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bFoliageInteractionWasThrottled : 1;               // Mask: 0x10, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bEnableFoliageInteractionOnBabies : 1;             // Mask: 0x20, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bEnableFluidEmissionTexture : 1;                   // Mask: 0x40, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bEnabled : 1;                                      // Mask: 0x80, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bUseVolumetricDispatcher : 1;                      // Mask: 0x1, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bTriggerConstant : 1;                              // Mask: 0x2, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bTriggerPeriodically : 1;                          // Mask: 0x4, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bTriggerManual : 1;                                // Mask: 0x8, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bUseActorVelForStrength : 1;                       // Mask: 0x10, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bUseActorVelForDirection : 1;                      // Mask: 0x20, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bUseBPExitedFluidSurface : 1;                      // Mask: 0x40, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bUseBPImpactedFluidSurface : 1;                    // Mask: 0x80, PropSize: 0x10xB9(0x1)(None)
	uint8                                        bUseBPImpactingFluidSurfaceTick : 1;               // Mask: 0x1, PropSize: 0x10xBA(0x1)(None)
	uint8                                        bEnableDebug : 1;                                  // Mask: 0x2, PropSize: 0x10xBA(0x1)(None)
	uint8                                        SelectThisComponent : 1;                           // Mask: 0x4, PropSize: 0x10xBA(0x1)(None)
	uint8                                        SpecialCheck_DetermineInnerSphereImpactsFluid : 1; // Mask: 0x8, PropSize: 0x10xBA(0x1)(None)
	uint8                                        bClearedParameters : 1;                            // Mask: 0x10, PropSize: 0x10xBA(0x1)(None)
	uint8                                        bWasEnabled : 1;                                   // Mask: 0x20, PropSize: 0x10xBA(0x1)(None)
	uint8                                        BitPad_3AA : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EWindSourceMode                   WindSourceMode;                                    // 0xBB(0x1)(None)
	uint8                                        Pad_3DD4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               WindSourceRelativeOffset;                          // 0xC0(0x18)(None)
	struct FVector                               ExtraCapsuleWindSourceRelativeOffset;              // 0xD8(0x18)(None)
	float                                        RadiusInner;                                       // 0xF0(0x4)(None)
	float                                        RadiusOuter;                                       // 0xF4(0x4)(None)
	enum class EEffectScope                      EffectScope;                                       // 0xF8(0x1)(None)
	uint8                                        Pad_3DD5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CharacterAttachmentSocket;                         // 0xFC(0x8)(None)
	int32                                        Priority;                                          // 0x104(0x4)(None)
	float                                        MinimumFoliageInteractionRadiusForBabies;          // 0x108(0x4)(None)
	float                                        Strength;                                          // 0x10C(0x4)(None)
	float                                        VelStrengthMultiplierXY;                           // 0x110(0x4)(None)
	float                                        VelStrengthMultiplierZ;                            // 0x114(0x4)(None)
	float                                        PlasticityAmount;                                  // 0x118(0x4)(None)
	float                                        PlasticityAmountAbsolute;                          // 0x11C(0x4)(None)
	struct FVector3f                             SourceScale;                                       // 0x120(0xC)(None)
	float                                        OscillationSpeed;                                  // 0x12C(0x4)(None)
	struct FVector3f                             DirectionalRadial;                                 // 0x130(0xC)(None)
	float                                        BendAmount;                                        // 0x13C(0x4)(None)
	float                                        MinVelocityThresholdSquared;                       // 0x140(0x4)(None)
	float                                        WindSpeed;                                         // 0x144(0x4)(None)
	float                                        WindHeading;                                       // 0x148(0x4)(None)
	float                                        WindFrequency;                                     // 0x14C(0x4)(None)
	float                                        WindStrength;                                      // 0x150(0x4)(None)
	float                                        TriggerPeriodicInterval;                           // 0x154(0x4)(None)
	struct FVector3f                             CurrentVelocity;                                   // 0x158(0xC)(None)
	struct FVector3f                             CurrentAcceleration;                               // 0x164(0xC)(None)
	struct FVector3f                             ExtraCapsuleCurrentVelocity;                       // 0x170(0xC)(None)
	struct FVector3f                             ExtraCapsuleCurrentAcceleration;                   // 0x17C(0xC)(None)
	double                                       LastTriggeredPeriodicTime;                         // 0x188(0x8)(None)
	double                                       BeginPlayTime;                                     // 0x190(0x8)(None)
	struct FVector                               PreviousLocation;                                  // 0x198(0x18)(None)
	struct FVector3f                             PreviousVelocity;                                  // 0x1B0(0xC)(None)
	uint8                                        Pad_3DD6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ExtraCapsulePreviousLocation;                      // 0x1C0(0x18)(None)
	struct FVector3f                             ExtraCapsulePreviousVelocity;                      // 0x1D8(0xC)(None)
	uint8                                        Pad_3DD7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCurveFloat*                           PlasticityCurve;                                   // 0x1E8(0x8)(ZeroConstructor)
	class APrimalFoliageSolver*                  MyFoliageSolver;                                   // 0x1F0(0x8)(ZeroConstructor)
	class AVolumetricDispatcher*                 MyDispatcher;                                      // 0x1F8(0x8)(ZeroConstructor)
	class FName                                  ExtraCapsuleAttachmentSocket;                      // 0x200(0x8)(None)
	class FName                                  AttachmentSocket;                                  // 0x208(0x8)(None)
	int32                                        CollectionIndex;                                   // 0x210(0x4)(None)
	uint8                                        Pad_3DD8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimitiveComponent*                   AttachmentComponent;                               // 0x218(0x8)(ZeroConstructor)
	uint64                                       LastFrameBelowFluidSurface;                        // 0x220(0x8)(None)
	uint64                                       LastFrameAboveFluidSurface;                        // 0x228(0x8)(None)
	bool                                         SpecialCheck_IsInnerSphereAboveWater;              // 0x230(0x1)(None)
	uint8                                        Pad_3DD9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint64                                       LastFrameAppliedBySolver;                          // 0x238(0x8)(None)
	uint8                                        Pad_3DDA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BubbleComponentIsActive : 1;                       // Mask: 0x1, PropSize: 0x10x244(0x1)(None)
	uint8                                        Pad_3DDB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalWindSourceComponent* GetDefaultObj();

	void SetAttachment(class UPrimitiveComponent* NewAttachmentComponent, int32 AttachmentCollectionIndex);
	void RefreshAttachment();
	void IsInteractionEnabled(bool ReturnValue);
	void IsAttachedToPrimalStructure(bool ReturnValue);
	void IsAttachedToPrimalCharacter(bool ReturnValue);
	void GetScaledRadiiForFoliageInteraction(class UPrimalWindSourceComponent* WindSource, float Inner, float Outer);
	void GetCurrentWindSourceLocation(const struct FVector& ReturnValue);
	void GetCurrentExtraCapsuleWindSourceLocation(const struct FVector& ReturnValue);
	void BPImpactingFluidSurfaceTick(const struct FVector& ImpactLocation, float PenetrationScalar);
	void BPImpactedFluidSurface(const struct FVector& ImpactLocation, float PenetrationScalar);
	void BPHandleCreatingBubbles();
	void BPExitedFluidSurface(const struct FVector& ImpactLocation, float PenetrationScalar);
	void BPDeactivateBubbleComponent();
	void AttachWindSourceToMeshComponent(class UMeshComponent* AttachMeshComp, class FName AttachSocket);
};

// 0x30 (0x60 - 0x30)
// Class ShooterGame.PrimalWirelessExchangeData
class UPrimalWirelessExchangeData : public UDataAsset
{
public:
	enum class EWirelessTransmissionType         WirelessType;                                      // 0x30(0x1)(None)
	uint8                                        Pad_3DDC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  WirelessTag;                                       // 0x34(0x8)(None)
	uint8                                        Pad_3DDD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          WirelessTagOverrides;                              // 0x40(0x10)(None)
	float                                        SupplyRange;                                       // 0x50(0x4)(None)
	float                                        SupplyLinkRange;                                   // 0x54(0x4)(None)
	float                                        ConsumeRange;                                      // 0x58(0x4)(None)
	bool                                         bShowPlacementPreview;                             // 0x5C(0x1)(None)
	uint8                                        Pad_3DDE[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalWirelessExchangeData* GetDefaultObj();

};

// 0x428 (0x458 - 0x30)
// Class ShooterGame.PrimalWordFilter
class UPrimalWordFilter : public UDataAsset
{
public:
	uint8                                        Pad_3DE1[0x414];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         WordsNeedSpaces;                                   // 0x444(0x1)(None)
	bool                                         DontCheckLetterRepeats;                            // 0x445(0x1)(None)
	uint8                                        Pad_3DE2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        CensoredWords;                                     // 0x448(0x10)(None)

	static class UClass* StaticClass();
	static class UPrimalWordFilter* GetDefaultObj();

	void SanitizeString(const class FString& ToSanitize);
	void HasIllegalWord(const class FString& ToCheck, bool ReturnValue);
	void HasBadParseCharacter(const class FString& ToCheck, bool AllowMultiline, bool ReturnValue);
};

// 0x8 (0x30 - 0x28)
// Class ShooterGame.PrimalWorldBuffCustomImplement
class UPrimalWorldBuffCustomImplement : public UObject
{
public:
	class FName                                  WorldBuffID;                                       // 0x28(0x8)(None)

	static class UClass* StaticClass();
	static class UPrimalWorldBuffCustomImplement* GetDefaultObj();

	void UpdateBuffCustomPersistantData();
	void Tick(float DeltaSeconds);
	void PreDeconstruction();
	void PostConstruction();
	void GetWorld(class UWorld* ReturnValue);
	void GetOwner(class UObject* ReturnValue);
	void BuffTimerRefreshed();
	void BuffStackIncreased(int32 NewStackCount);
	void BuffStackDecrease(int32 NewStackCount);
};

// 0x28 (0x50 - 0x28)
// Class ShooterGame.PrimalWorldBuffData
class UPrimalWorldBuffData : public UObject
{
public:
	TArray<struct FWorldBuffDefinition>          WorldBuffDefinitions;                              // 0x28(0x10)(ZeroConstructor)
	TArray<class UPrimalWorldBuffCustomImplement*> ConstructedWorldBuffImplements;                    // 0x38(0x10)(None)
	uint8                                        Pad_3DE8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UPrimalWorldBuffData* GetDefaultObj();

	void UnsuspendWorldBuffs();
	void SuspendWorldBuffs();
	void RemoveWorldBuff(class UObject* WorldContextObject, class FName WorldBuffIdentifier);
	void GetWorldBuffSet(class FName WorldBuffSetName, const TArray<struct FWorldBuffDefinition>& ReturnValue);
	void GetWorldBuffDefinitionByName(class FName WorldBuffIdentifier, const struct FWorldBuffDefinition& OutWorldBuffDefinition, bool ReturnValue);
	void GetWorldBuffData(class UPrimalWorldBuffData* ReturnValue);
	void CanActivateWorldBuff(class UObject* WorldContextObject, class FName WorldBuffIdentifier, const TArray<class FName>& OutWorldBuffsToBeReplaced, bool ReturnValue);
	void AddWorldBuff(class UObject* WorldContextObject, class FName WorldBuffIdentifier, int32 StacksToGive);
};

// 0x78 (0x530 - 0x4B8)
// Class ShooterGame.PrimalWorldModifier
class APrimalWorldModifier : public AActor
{
public:
	bool                                         bUseMapExclusionListAsExclusiveList;               // 0x4B8(0x1)(None)
	uint8                                        Pad_3DED[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        MapExclusionList;                                  // 0x4C0(0x10)(None)
	TArray<class FName>                          PriorityTags;                                      // 0x4D0(0x10)(None)
	TArray<class AInstancedFoliageActor*>        ReskinnedFoliageTrackingList;                      // 0x4E0(0x10)(ZeroConstructor)
	TArray<struct FFoliageReskinDefinition>      FoliageReskinList;                                 // 0x4F0(0x10)(ZeroConstructor)
	TArray<class AStaticMeshActor*>              ReskinnedLevelStaticMeshTrackingList;              // 0x500(0x10)(ZeroConstructor)
	TArray<struct FSublevelOverrideGroup>        SublevelOverrideGroups;                            // 0x510(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnFoliageSkinned;                                  // 0x520(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class APrimalWorldModifier* GetDefaultObj();

	void TrySublevelSwaps();
	void TryStaticMeshActorReskin(class AStaticMeshActor* ForStaticMeshActor, const struct FSublevelOverrideGroup& CurrentSublevelOverrideGroup);
	void TryFoliageReskin(class AInstancedFoliageActor* ForFoliageActor);
	void RescanForMapStaticMeshes();
	void RescanForFoliage();
	void IsAllowedOnCurrentMap(bool ReturnValue);
	void HasPriority(bool ReturnValue);
	void GetCurrentSublevelOverrideGroup(const struct FSublevelOverrideGroup& OutSublevelOverrideGroup);
	void DoRescanForSublevelLoaded();
	void BPSkinFoliage(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance);
	void BPPreFoliageScan();
	void BPPostInitializationHasPriority();
	void BPPostFoliageScan();
};

// 0x8B8 (0x21E8 - 0x1930)
// Class ShooterGame.PrimalWorldSettings
class APrimalWorldSettings : public AARKNXWorldSettings
{
public:
	class UClass*                                GraphClass;                                        // 0x1930(0x8)(ZeroConstructor)
	bool                                         bDisableReplicationGraph;                          // 0x1938(0x1)(None)
	bool                                         bMapSupportsMissions;                              // 0x1939(0x1)(None)
	uint8                                        Pad_3DF2[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                DefaultCameraPositionActor;                        // 0x1940(0x8)(ZeroConstructor)
	TArray<class UObject*>                       DynamicResourceRefs;                               // 0x1948(0x10)(ZeroConstructor)
	bool                                         bEditorEnableNPCSpawners;                          // 0x1958(0x1)(None)
	bool                                         bEditorDoForceDisableNPCSpawners;                  // 0x1959(0x1)(None)
	bool                                         bPreventGlobalNonEventSpawnOverrides;              // 0x195A(0x1)(None)
	bool                                         bEditorForceSpawnCharacterAsFemale;                // 0x195B(0x1)(None)
	class FName                                  PlacingStructureToggleMeshTagVisibility;           // 0x195C(0x8)(None)
	bool                                         bForcePreventPhysicsSimulation;                    // 0x1964(0x1)(None)
	bool                                         bForceEnablePhysicsSimulation;                     // 0x1965(0x1)(None)
	bool                                         bGenerateTerrain;                                  // 0x1966(0x1)(None)
	bool                                         bForceSpawnAnimationTest;                          // 0x1967(0x1)(None)
	bool                                         bOverrideLongitudeAndLatitude;                     // 0x1968(0x1)(None)
	uint8                                        Pad_3DF3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LongitudeScale;                                    // 0x196C(0x4)(None)
	float                                        RegularWildDinoResistanceVersusTamesMultiplier;    // 0x1970(0x4)(None)
	float                                        RegularWildDinoDamageVersusTamesMultiplier;        // 0x1974(0x4)(None)
	float                                        RegularWildDinoXPMultiplier;                       // 0x1978(0x4)(None)
	float                                        LatitudeScale;                                     // 0x197C(0x4)(None)
	float                                        LongitudeOrigin;                                   // 0x1980(0x4)(None)
	float                                        LatitudeOrigin;                                    // 0x1984(0x4)(None)
	float                                        MinKillX;                                          // 0x1988(0x4)(None)
	float                                        MaxKillX;                                          // 0x198C(0x4)(None)
	float                                        MinKillY;                                          // 0x1990(0x4)(None)
	float                                        MaxKillY;                                          // 0x1994(0x4)(None)
	float                                        MaxKillZ;                                          // 0x1998(0x4)(None)
	float                                        MaxUnderWorldTraceRangeZ;                          // 0x199C(0x4)(None)
	class UClass*                                CurrentMinimapData;                                // 0x19A0(0x8)(ZeroConstructor)
	class UTexture2D*                            OverrideWeaponMapTextureEmpty;                     // 0x19A8(0x8)(ZeroConstructor)
	class UTexture2D*                            OverrideWeaponMapTextureFilled;                    // 0x19B0(0x8)(ZeroConstructor)
	class UTexture2D*                            OverrideUIMapTextureEmpty;                         // 0x19B8(0x8)(ZeroConstructor)
	class UTexture2D*                            OverrideUIMapTextureFilled;                        // 0x19C0(0x8)(ZeroConstructor)
	class UTexture2D*                            OverrideUIMapTextureSmall;                         // 0x19C8(0x8)(ZeroConstructor)
	class AActor*                                LevelBlueprintContainerActor;                      // 0x19D0(0x8)(ZeroConstructor)
	class UClass*                                PrimalGameDataOverride;                            // 0x19D8(0x8)(ZeroConstructor)
	class FString                                ForceLoadMapName;                                  // 0x19E0(0x10)(None)
	TArray<class FString>                        OverridePlayerSpawnRegions;                        // 0x19F0(0x10)(None)
	TArray<int32>                                OverridePlayerSpawnRegionDifficulties;             // 0x1A00(0x10)(None)
	TArray<uint8>                                OverridePlayerSpawnRegionsHideInSpawnUI;           // 0x1A10(0x10)(None)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> LevelUseNPCClasses;                                // 0x1A20(0x10)(ZeroConstructor)
	class AMatineeActorManager*                  MatineeManager;                                    // 0x1A30(0x8)(ZeroConstructor)
	uint8                                        Pad_3DF4[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       DefaultWaterReverbSettings;                        // 0x1A90(0x20)(ZeroConstructor)
	struct FInteriorSettings                     DefaultWaterAmbientZoneSettings;                   // 0x1AB0(0x24)(None)
	uint8                                        Pad_3DF5[0x64];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClassRemappingWeight>         NPCRandomSpawnClassWeights;                        // 0x1B38(0x10)(ZeroConstructor)
	TArray<struct FClassRemappingWeight>         SinglePlayerNPCRandomSpawnClassWeights;            // 0x1B48(0x10)(ZeroConstructor)
	struct FVector2D                             SpawnLevelBoundsMax;                               // 0x1B58(0x10)(None)
	struct FVector2D                             SpawnLevelBoundsMin;                               // 0x1B68(0x10)(None)
	float                                        AutoSpectatorNamesMinZ;                            // 0x1B78(0x4)(None)
	bool                                         bUseSpawnLevelBounds;                              // 0x1B7C(0x1)(None)
	uint8                                        Pad_3DF6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        CachedPersistentObjectClasses;                     // 0x1B80(0x10)(ZeroConstructor)
	float                                        DinosLerpToMaxRandomBaseLevel;                     // 0x1B90(0x4)(None)
	uint8                                        Pad_3DF7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                DefaultSpawnPointRandomIndices;                    // 0x1B98(0x10)(None)
	class UAnimMontage*                          OverrideFirstSpawnAnim;                            // 0x1BA8(0x8)(ZeroConstructor)
	class UAnimMontage*                          OverrideSpawnAnim;                                 // 0x1BB0(0x8)(ZeroConstructor)
	float                                        TheWorldGammaOffset;                               // 0x1BB8(0x4)(None)
	bool                                         bWaterDinosUseFlightBlocking;                      // 0x1BBC(0x1)(None)
	uint8                                        Pad_3DF8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalHarvestHealthMultiplier;                     // 0x1BC0(0x4)(None)
	float                                        GlobalHarvestAmountMultiplier;                     // 0x1BC4(0x4)(None)
	bool                                         bFlyersStructurePreventionDismountingAnywhere;     // 0x1BC8(0x1)(None)
	bool                                         bFlyersStructurePreventionDismountingUnderTerrainOnly; // 0x1BC9(0x1)(None)
	uint8                                        Pad_3DF9[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OverrideDifficultyMax;                             // 0x1BCC(0x4)(None)
	TArray<struct FItemMultiplier>               GlobalSpoilingTimeMultipliers;                     // 0x1BD0(0x10)(ZeroConstructor)
	float                                        GlobalStatusAdjustmentRateMultipliersPositive[0xC]; // 0x1BE0(0x30)(None)
	float                                        GlobalStatusAdjustmentRateMultipliersNegative[0xC]; // 0x1C10(0x30)(None)
	int32                                        ValidEngramGroupsBitMask;                          // 0x1C40(0x4)(None)
	uint8                                        Pad_3DFA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppends;                         // 0x1C48(0x10)(ZeroConstructor)
	TArray<struct FInventoryComponentDefaultItemsAppend> InventoryComponentAppendsNonDedicated;             // 0x1C58(0x10)(ZeroConstructor)
	float                                        DayCycleSpeedScale;                                // 0x1C68(0x4)(None)
	float                                        DayTimeSpeedScale;                                 // 0x1C6C(0x4)(None)
	float                                        NightTimeSpeedScale;                               // 0x1C70(0x4)(None)
	float                                        NegativeHyperthermalInsulationMultiplier;          // 0x1C74(0x4)(None)
	float                                        PositiveHyperthermalInsulationMultiplier;          // 0x1C78(0x4)(None)
	float                                        NegativeHypothermalInsulationMultiplier;           // 0x1C7C(0x4)(None)
	float                                        PositiveHypothermalInsulationMultiplier;           // 0x1C80(0x4)(None)
	uint8                                        Pad_3DFB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        GlobalCuddleFoodList;                              // 0x1C88(0x10)(ZeroConstructor)
	float                                        CarnivoreNaturalTargetingRangeMultiplier;          // 0x1C98(0x4)(None)
	float                                        HerbivoreNaturalTargetingRangeMultiplier;          // 0x1C9C(0x4)(None)
	class USoundBase*                            OverrideCombatMusicDay;                            // 0x1CA0(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight;                          // 0x1CA8(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicDay_Heavy;                      // 0x1CB0(0x8)(ZeroConstructor)
	class USoundBase*                            OverrideCombatMusicNight_Heavy;                    // 0x1CB8(0x8)(ZeroConstructor)
	class USoundBase*                            SplitscreenUnderwaterSound;                        // 0x1CC0(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalHarvestingComponent>> HarvestComponentHealthScaleParents;                // 0x1CC8(0x10)(ZeroConstructor)
	TArray<float>                                HarvestComponentHealthScaleParentsValue;           // 0x1CD8(0x10)(None)
	TArray<TSoftClassPtr<class UPrimalHarvestingComponent>> HarvestComponentHealthScaleExactMatch;             // 0x1CE8(0x10)(ZeroConstructor)
	TArray<float>                                HarvestComponentHealthScaleExactMatchValue;        // 0x1CF8(0x10)(None)
	class USoundBase*                            Override_Sound_ReconnectToCharacter;               // 0x1D08(0x8)(ZeroConstructor)
	int32                                        RequiresID;                                        // 0x1D10(0x4)(None)
	bool                                         bIgnoreBiomeWind;                                  // 0x1D14(0x1)(None)
	uint8                                        Pad_3DFC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    Override_PostProcess_ColorLUT;                     // 0x1D18(0x8)(ZeroConstructor)
	float                                        DefaultWaterLineStartZ;                            // 0x1D20(0x4)(None)
	float                                        DefaultDeepWaterStartZ;                            // 0x1D24(0x4)(None)
	float                                        MaximumPlayerFlyZ;                                 // 0x1D28(0x4)(None)
	uint8                                        Pad_3DFD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UObject>>        ExtraReferences;                                   // 0x1D30(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> AllowDownloadDinoClasses;                          // 0x1D40(0x10)(ZeroConstructor)
	class FString                                DefaultBiomeName;                                  // 0x1D50(0x10)(None)
	class UDeferredMovementContext*              DeferredMovement;                                  // 0x1D60(0x8)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> PreventStructureClasses;                           // 0x1D68(0x10)(ZeroConstructor)
	float                                        MaxFallSpeedMultiplier;                            // 0x1D78(0x4)(None)
	bool                                         bDisableStructureObstructedByWorldGeometryCheck;   // 0x1D7C(0x1)(None)
	bool                                         bForceEnableTurretLimit;                           // 0x1D7D(0x1)(None)
	bool                                         bUseMissions;                                      // 0x1D7E(0x1)(None)
	bool                                         bUseMissionsMetaData;                              // 0x1D7F(0x1)(None)
	int32                                        LoadForceRespawnDinosVersion;                      // 0x1D80(0x4)(None)
	float                                        FirstSpawnNotTargetableForTime;                    // 0x1D84(0x4)(None)
	bool                                         bIgnoreInMeshCheckingUnderwater;                   // 0x1D88(0x1)(None)
	bool                                         bAllowRidingFliers;                                // 0x1D89(0x1)(None)
	bool                                         bForceDinoDrawHUD;                                 // 0x1D8A(0x1)(None)
	bool                                         bDisableFirstPersonRiding;                         // 0x1D8B(0x1)(None)
	bool                                         bForceDinoHighQualityAttacks;                      // 0x1D8C(0x1)(None)
	bool                                         bScaleDinoFloatingHUDByMeshSize;                   // 0x1D8D(0x1)(None)
	uint8                                        Pad_3DFE[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceCameraTransitionTimeUponPossession;           // 0x1D90(0x4)(None)
	float                                        AdditionalDinoHealthBarOffsetY;                    // 0x1D94(0x4)(None)
	float                                        AIOverrideNotifyNeighborsRange;                    // 0x1D98(0x4)(None)
	uint8                                        Pad_3DFF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnAnimationLocationOffset;                      // 0x1DA0(0x18)(None)
	class UClass*                                MissionMultiUseEntryToolTipWidget;                 // 0x1DB8(0x8)(ZeroConstructor)
	class UClass*                                MissionDataBuff;                                   // 0x1DC0(0x8)(ZeroConstructor)
	class UClass*                                ActiveEventSpawnActor;                             // 0x1DC8(0x8)(ZeroConstructor)
	TArray<struct FAvailableMission>             AvailableMissions;                                 // 0x1DD0(0x10)(ZeroConstructor)
	TArray<struct FMissionMetaData>              AvailableMissionsMetaData;                         // 0x1DE0(0x10)(ZeroConstructor)
	TArray<struct FMissionMetaData>              NonPlayerFacingMissionsMetaData;                   // 0x1DF0(0x10)(ZeroConstructor)
	uint8                                        Pad_3E02[0x148];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalDinoCountValue;                              // 0x1F48(0x4)(None)
	uint8                                        Pad_3E03[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        ServerForceReplicateObjectClasses;                 // 0x1F68(0x10)(ZeroConstructor)
	TSoftClassPtr<class UObject>                 ActiveEventOverrideObjectBlueprint;                // 0x1F78(0x30)(ZeroConstructor)
	TMap<class FName, TSoftClassPtr<class UObject>> EventNameToActiveEventOverrideObject;              // 0x1FA8(0x50)(ZeroConstructor)
	TSet<class AActor*>                          DeferredTickActors;                                // 0x1FF8(0x50)(ZeroConstructor)
	TArray<class AActor*>                        UnregisteredDeferredTickActors;                    // 0x2048(0x10)(ZeroConstructor)
	class UPrimalWorldSettingsEventOverrides*    ActiveEventOverrides;                              // 0x2058(0x8)(ZeroConstructor)
	class UClass*                                MetaTagInfoClass;                                  // 0x2060(0x8)(ZeroConstructor)
	bool                                         bEnforceSingleBiomeBuff;                           // 0x2068(0x1)(None)
	bool                                         bHideMissionSortByDistance;                        // 0x2069(0x1)(None)
	bool                                         bPlayPersistentPlayer;                             // 0x206A(0x1)(None)
	uint8                                        Pad_3E07[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SM4DirectionalLightMultiplier;                     // 0x206C(0x4)(None)
	float                                        SM4SKyLightMultiplier;                             // 0x2070(0x4)(None)
	float                                        SM5DirectionalLightMultiplier;                     // 0x2074(0x4)(None)
	float                                        SM5SKyLightMultiplier;                             // 0x2078(0x4)(None)
	float                                        NoTrueSkySM5DirectionalLightMultiplier;            // 0x207C(0x4)(None)
	float                                        NoTrueSkySM5SKyLightMultiplier;                    // 0x2080(0x4)(None)
	float                                        ConsoleSM5DirectionalLightMultiplier;              // 0x2084(0x4)(None)
	float                                        ConsoleSM5SKyLightMultiplier;                      // 0x2088(0x4)(None)
	float                                        GlobalIBLCaptureBrightness;                        // 0x208C(0x4)(None)
	float                                        GlobalBakeAndStreamIBLMultiplier;                  // 0x2090(0x4)(None)
	uint8                                        Pad_3E08[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TrueSkyColorMultiplier;                            // 0x2098(0x18)(None)
	float                                        SkyIBLIntensityMultiplier;                         // 0x20B0(0x4)(None)
	float                                        GroundColorMultiplier;                             // 0x20B4(0x4)(None)
	float                                        SkyColorMultiplier;                                // 0x20B8(0x4)(None)
	uint8                                        Pad_3E09[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               AtmosphericFogMultiplier;                          // 0x20C0(0x18)(None)
	float                                        TrueSkyIntensityMultiplier;                        // 0x20D8(0x4)(None)
	float                                        GlobalViewDistanceMultiplier;                      // 0x20DC(0x4)(None)
	float                                        GlobalProxyDistanceMultiplier;                     // 0x20E0(0x4)(None)
	uint8                                        Pad_3E0A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                IntroMoviePath;                                    // 0x20E8(0x10)(None)
	int32                                        IntroExplorerNoteID;                               // 0x20F8(0x4)(None)
	uint8                                        Pad_3E0B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OutroMoviePath;                                    // 0x2100(0x10)(None)
	int32                                        OutroExplorerNoteID;                               // 0x2110(0x4)(None)
	bool                                         bAllowRagdolls;                                    // 0x2114(0x1)(None)
	uint8                                        Pad_3E0C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          MainMapDataLayers;                                 // 0x2118(0x10)(None)
	int32                                        GloballyLimitedParticleNum;                        // 0x2128(0x4)(None)
	uint8                                        Pad_3E0D[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAdditionalStaticMeshSockets>  AdditionalFakeStaticMeshSockets;                   // 0x2180(0x10)(ZeroConstructor)
	TSet<TWeakObjectPtr<class UFXSystemComponent>> DeferredFXActivations;                             // 0x2190(0x50)(ZeroConstructor)
	bool                                         bDisableAllASAFluidSim;                            // 0x21E0(0x1)(None)
	uint8                                        Pad_3E0E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class APrimalWorldSettings* GetDefaultObj();

	void IsAllowedInLevelBounds(const struct FVector& AtLocat, bool ReturnValue);
	void GetMissionMetaData(class FName MissionTag, const struct FMissionMetaData& Value, bool ReturnValue);
	void GetFoliageAndFluidSimEnabled(bool ReturnValue);
	void GetExtraStaticMeshSocketByName(class UStaticMesh* ForStaticMesh, class FName FakeSocketName, const struct FFakeStaticMeshSocketData& OutFakeSocketData, bool ReturnValue);
	void CanSpawnGloballyLimitedParticle(class UNiagaraComponent* ForNiagaraComponent, bool ReturnValue);
};

// 0x30 (0x58 - 0x28)
// Class ShooterGame.PrimalWorldSettingsEventOverrides
class UPrimalWorldSettingsEventOverrides : public UObject
{
public:
	TArray<struct FClassRemappingWeight>         NPCRandomSpawnClassWeights;                        // 0x28(0x10)(ZeroConstructor)
	TArray<struct FClassRemappingWeight>         SinglePlayerNPCRandomSpawnClassWeights;            // 0x38(0x10)(None)
	TArray<struct FActiveEventGlobalStatusAdjustments> AdditionalGlobalStatusAdjustmentsDuringEvent;      // 0x48(0x10)(None)

	static class UClass* StaticClass();
	static class UPrimalWorldSettingsEventOverrides* GetDefaultObj();

};

// 0x160 (0x8F0 - 0x790)
// Class ShooterGame.ProgressBarWidget
class UProgressBarWidget : public UCustomCanvasWidget
{
public:
	class UTexture2D*                            ProgressBarBackground;                             // 0x790(0x8)(ZeroConstructor)
	class UTexture2D*                            ProgressBarForeground;                             // 0x798(0x8)(ZeroConstructor)
	float                                        CurrentPercent;                                    // 0x7A0(0x4)(None)
	struct FLinearColor                          BarForegroundColor;                                // 0x7A4(0x10)(None)
	float                                        PercentInterpolationSpeed;                         // 0x7B4(0x4)(None)
	float                                        MinValueStartRedFlash;                             // 0x7B8(0x4)(None)
	float                                        MaxValueStartRedFlash;                             // 0x7BC(0x4)(None)
	float                                        MinValueStartYellowFlash;                          // 0x7C0(0x4)(None)
	float                                        MaxValueStartYellowFlash;                          // 0x7C4(0x4)(None)
	struct FLinearColor                          BarFlashColor;                                     // 0x7C8(0x10)(None)
	struct FLinearColor                          BarFlashColorBackground;                           // 0x7D8(0x10)(None)
	struct FLinearColor                          RedBarFlashColor;                                  // 0x7E8(0x10)(None)
	struct FLinearColor                          RedBarFlashColorBackground;                        // 0x7F8(0x10)(None)
	struct FLinearColor                          YellowBarFlashColor;                               // 0x808(0x10)(None)
	struct FLinearColor                          YellowBarFlashColorBackground;                     // 0x818(0x10)(None)
	float                                        BarFlashSpeed;                                     // 0x828(0x4)(None)
	float                                        BarFlashThreshold;                                 // 0x82C(0x4)(None)
	float                                        BarFlashDuration;                                  // 0x830(0x4)(None)
	uint8                                        Pad_3E17[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DisplayString;                                     // 0x838(0x10)(None)
	struct FLinearColor                          DisplayStringColor;                                // 0x848(0x10)(None)
	class UFont*                                 DisplayStringFont;                                 // 0x858(0x8)(ZeroConstructor)
	struct FVector2D                             DisplayStringOffset;                               // 0x860(0x10)(None)
	struct FVector2D                             DisplayStringScale;                                // 0x870(0x10)(None)
	uint8                                        bDisplayStringCenterX : 1;                         // Mask: 0x1, PropSize: 0x10x880(0x1)(None)
	uint8                                        bDisplayStringCenterY : 1;                         // Mask: 0x2, PropSize: 0x10x880(0x1)(None)
	uint8                                        bPrintNumbersInDisplayString : 1;                  // Mask: 0x4, PropSize: 0x10x880(0x1)(None)
	uint8                                        bAlwaysDrawDisplayString : 1;                      // Mask: 0x8, PropSize: 0x10x880(0x1)(None)
	uint8                                        bDisplayStringNumbersUseFloats : 1;                // Mask: 0x10, PropSize: 0x10x880(0x1)(None)
	uint8                                        bBarFlashThresholdAbsolute : 1;                    // Mask: 0x20, PropSize: 0x10x880(0x1)(None)
	uint8                                        bDoBarFlashOnDecrease : 1;                         // Mask: 0x40, PropSize: 0x10x880(0x1)(None)
	uint8                                        bDoBarFlashOnIncrease : 1;                         // Mask: 0x80, PropSize: 0x10x880(0x1)(None)
	uint8                                        bInterpolatePercent : 1;                           // Mask: 0x1, PropSize: 0x10x881(0x1)(None)
	uint8                                        bUseDisplayString : 1;                             // Mask: 0x2, PropSize: 0x10x881(0x1)(None)
	uint8                                        bUseLinkedCharacterStatus : 1;                     // Mask: 0x4, PropSize: 0x10x881(0x1)(None)
	uint8                                        bUseOutlineDropShadow : 1;                         // Mask: 0x8, PropSize: 0x10x881(0x1)(None)
	uint8                                        BitPad_3AB : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EPrimalCharacterStatusState       LinkedCharacterStatusStateType;                    // 0x882(0x1)(None)
	enum class EPrimalCharacterStatusValue       LinkedCharacterStatusValueType;                    // 0x883(0x1)(None)
	uint8                                        bUseLinkedStatusStateToFlashRed : 1;               // Mask: 0x1, PropSize: 0x10x884(0x1)(None)
	uint8                                        BitPad_3AC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E18[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          BarBackgroundColor;                                // 0x888(0x10)(None)
	uint8                                        Pad_3E19[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UProgressBarWidget* GetDefaultObj();

};

// 0xF8 (0x120 - 0x28)
// Class ShooterGame.RadialSelectorHUD
class URadialSelectorHUD : public UObject
{
public:
	int32                                        NumDivisions;                                      // 0x28(0x4)(None)
	float                                        InnerDistance;                                     // 0x2C(0x4)(None)
	float                                        OuterDistance;                                     // 0x30(0x4)(None)
	float                                        OuterDistanceScaleCountOffset;                     // 0x34(0x4)(None)
	float                                        BaseUISizeY;                                       // 0x38(0x4)(None)
	float                                        SelectionDistanceOffset;                           // 0x3C(0x4)(None)
	float                                        CenterImageSizeX;                                  // 0x40(0x4)(None)
	float                                        CenterImageSizeY;                                  // 0x44(0x4)(None)
	class UMaterialInstance*                     MI;                                                // 0x48(0x8)(ZeroConstructor)
	class UTexture2D*                            CenterImage;                                       // 0x50(0x8)(ZeroConstructor)
	class UTexture2D*                            SegmentTexture;                                    // 0x58(0x8)(ZeroConstructor)
	class UTexture2D*                            SelectedTexture;                                   // 0x60(0x8)(ZeroConstructor)
	class UMaterialInstance*                     RadialMaterial;                                    // 0x68(0x8)(ZeroConstructor)
	class UFont*                                 TextFont;                                          // 0x70(0x8)(ZeroConstructor)
	int32                                        CurrentSelection;                                  // 0x78(0x4)(None)
	int32                                        SelectedSelection;                                 // 0x7C(0x4)(None)
	int32                                        TargetSelection;                                   // 0x80(0x4)(None)
	int32                                        ActivationSelection;                               // 0x84(0x4)(None)
	float                                        SelectionTime;                                     // 0x88(0x4)(None)
	uint8                                        Pad_3E1A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                DivisionAlpha;                                     // 0x90(0x10)(None)
	TArray<class FString>                        ActionNames;                                       // 0xA0(0x10)(None)
	class UMaterialInstanceDynamic*              Segment_SelectedDynamicMI;                         // 0xB0(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              Segment_UnselectedDynamicMI;                       // 0xB8(0x8)(ZeroConstructor)
	class UMaterialInstance*                     AnalogDirectionDynamicMI;                          // 0xC0(0x8)(None)
	uint8                                        Pad_3E1B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IconDefaultSize;                                   // 0xD0(0x4)(None)
	float                                        IconSizeScaleFactor;                               // 0xD4(0x4)(None)
	float                                        IconMaxSize;                                       // 0xD8(0x4)(None)
	bool                                         bDisableTransitionScaling;                         // 0xDC(0x1)(None)
	bool                                         bStayOnScreen;                                     // 0xDD(0x1)(None)
	bool                                         bAllowMovement;                                    // 0xDE(0x1)(None)
	uint8                                        Pad_3E1C[0x41];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialSelectorHUD* GetDefaultObj();

};

// 0x70 (0x190 - 0x120)
// Class ShooterGame.RadialSelectorHUD_Custom
class URadialSelectorHUD_Custom : public URadialSelectorHUD
{
public:
	uint8                                        Pad_3E1D[0x68];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TextScaleCountOffset;                              // 0x188(0x4)(None)
	uint8                                        Pad_3E1E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialSelectorHUD_Custom* GetDefaultObj();

};

// 0x98 (0x1B8 - 0x120)
// Class ShooterGame.RadialSelectorHUD_Inventory
class URadialSelectorHUD_Inventory : public URadialSelectorHUD
{
public:
	class UPrimalInventoryComponent*             PlayerInventory;                                   // 0x120(0x8)(ZeroConstructor)
	uint8                                        Pad_3E1F[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ClearTameOrderingGroupIcon;                        // 0x150(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    DinoGroupIconArray;                                // 0x158(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    CommandsBindingsIcons;                             // 0x168(0x10)(ZeroConstructor)
	class UTexture2D*                            StartYellingIcon;                                  // 0x178(0x8)(ZeroConstructor)
	class UTexture2D*                            StopYellingIcon;                                   // 0x180(0x8)(ZeroConstructor)
	class UTexture2D*                            StartTalkingIcon;                                  // 0x188(0x8)(ZeroConstructor)
	class UTexture2D*                            StopTalkingIcon;                                   // 0x190(0x8)(ZeroConstructor)
	class UTexture2D*                            StartWhisperingIcon;                               // 0x198(0x8)(ZeroConstructor)
	class UTexture2D*                            StopWhisperingIcon;                                // 0x1A0(0x8)(ZeroConstructor)
	TArray<class UTexture2D*>                    ChatIcons;                                         // 0x1A8(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class URadialSelectorHUD_Inventory* GetDefaultObj();

};

// 0x48 (0x168 - 0x120)
// Class ShooterGame.RadialSelectorHUD_MultiUse
class URadialSelectorHUD_MultiUse : public URadialSelectorHUD
{
public:
	uint8                                        Pad_3E20[0x34];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TextScaleCountOffset;                              // 0x154(0x4)(None)
	uint8                                        Pad_3E21[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialSelectorHUD_MultiUse* GetDefaultObj();

};

// 0xA0 (0x1C0 - 0x120)
// Class ShooterGame.RadialSelectorHUD_PlayerAction
class URadialSelectorHUD_PlayerAction : public URadialSelectorHUD
{
public:
	TArray<enum class EPlayerActionIndex>        ActionBindings;                                    // 0x120(0x10)(None)
	TArray<class UTexture2D*>                    ActionBindingsIcons;                               // 0x130(0x10)(ZeroConstructor)
	uint8                                        Pad_3E22[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAddUnlockableEmotes;                              // 0x170(0x1)(None)
	uint8                                        Pad_3E23[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            ShowHatIcon;                                       // 0x178(0x8)(ZeroConstructor)
	class UTexture2D*                            HideHatIcon;                                       // 0x180(0x8)(ZeroConstructor)
	uint8                                        Pad_3E24[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TextScaleCountOffset;                              // 0x190(0x4)(None)
	uint8                                        Pad_3E25[0x2C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URadialSelectorHUD_PlayerAction* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class ShooterGame.RCONServer
class URCONServer : public UObject
{
public:
	uint8                                        Pad_3E26[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UShooterCheatManager*                  CheatManager;                                      // 0x50(0x8)(None)
	uint8                                        Pad_3E27[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class URCONServer* GetDefaultObj();

};

// 0x0 (0x80 - 0x80)
// Class ShooterGame.ReportServerReplicatedFunctionsCommandlet
class UReportServerReplicatedFunctionsCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass();
	static class UReportServerReplicatedFunctionsCommandlet* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.SaveGameActorTickable
class ASaveGameActorTickable : public ASaveGameActor
{
public:

	static class UClass* StaticClass();
	static class ASaveGameActorTickable* GetDefaultObj();

};

// 0x48 (0x920 - 0x8D8)
// Class ShooterGame.ServerInfoInfoEntryButton
class UServerInfoInfoEntryButton : public UDataListEntryButton
{
public:
	uint8                                        bIsCustom : 1;                                     // Mask: 0x1, PropSize: 0x10x8D8(0x1)(None)
	uint8                                        BitPad_3AD : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E28[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                InfoName;                                          // 0x8E0(0x10)(None)
	class FString                                InfoValue;                                         // 0x8F0(0x10)(None)
	bool                                         bCenterDisplayName;                                // 0x900(0x1)(None)
	uint8                                        Pad_3E29[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          DisplayStringSelectedColor;                        // 0x904(0x10)(None)
	float                                        TextClipOffset;                                    // 0x914(0x4)(None)
	float                                        FolderNameTextFontScale;                           // 0x918(0x4)(None)
	uint8                                        Pad_3E2A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UServerInfoInfoEntryButton* GetDefaultObj();

};

// 0x0 (0x298 - 0x298)
// Class ShooterGame.ShooterActorChannel
class UShooterActorChannel : public UActorChannel
{
public:

	static class UClass* StaticClass();
	static class UShooterActorChannel* GetDefaultObj();

};

// 0xE40 (0x28F0 - 0x1AB0)
// Class ShooterGame.ShooterCharacter
class AShooterCharacter : public APrimalCharacter
{
public:
	uint8                                        Pad_3E76[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              ListenServerBoundsPSC;                             // 0x1AB8(0x8)(ZeroConstructor)
	uint8                                        Pad_3E78[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          SpawnIntroAnim1P;                                  // 0x1AC8(0x8)(ZeroConstructor)
	class UAnimMontage*                          RespawnIntroAnim1P;                                // 0x1AD0(0x8)(ZeroConstructor)
	class UAnimMontage*                          ProneInAnim;                                       // 0x1AD8(0x8)(ZeroConstructor)
	class UAnimMontage*                          ProneOutAnim;                                      // 0x1AE0(0x8)(ZeroConstructor)
	class UAnimMontage*                          StartRidingAnim;                                   // 0x1AE8(0x8)(ZeroConstructor)
	class UAnimMontage*                          StopRidingAnim;                                    // 0x1AF0(0x8)(ZeroConstructor)
	class UAnimMontage*                          TalkingAnim;                                       // 0x1AF8(0x8)(ZeroConstructor)
	class UAnimMontage*                          VoiceTalkingAnim;                                  // 0x1B00(0x8)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UAnimMontage>>   EmoteAnims;                                        // 0x1B08(0x10)(ZeroConstructor)
	class UAnimMontage*                          FireBallistaAnimation;                             // 0x1B18(0x8)(ZeroConstructor)
	class UAnimMontage*                          ReloadBallistaAnimation;                           // 0x1B20(0x8)(ZeroConstructor)
	class UAnimMontage*                          DraggingCharacterAnim;                             // 0x1B28(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             CheckCancelEmoteBuffClass;                         // 0x1B30(0x30)(ZeroConstructor)
	uint8                                        Pad_3E7C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bWasProne;                                         // 0x1B78(0x1)(None)
	bool                                         bIsPreviewCharacter;                               // 0x1B79(0x1)(None)
	uint8                                        Pad_3E7D[0x12];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WalkBobMagnitude;                                  // 0x1B8C(0x4)(None)
	float                                        WalkBobInterpSpeed;                                // 0x1B90(0x4)(None)
	float                                        MinimumDistanceThresholdToCrouch;                  // 0x1B94(0x4)(None)
	float                                        MinimumDistanceThresholdToProneFromStanding;       // 0x1B98(0x4)(None)
	float                                        MinimumDistanceThresholdToProneFromCrouch;         // 0x1B9C(0x4)(None)
	float                                        TargetingTime;                                     // 0x1BA0(0x4)(None)
	float                                        BobMaxMovementSpeed;                               // 0x1BA4(0x4)(None)
	float                                        WeaponBobMaxMovementSpeed;                         // 0x1BA8(0x4)(None)
	float                                        MinRunSpeedThreshold;                              // 0x1BAC(0x4)(None)
	uint8                                        bIsTargeting : 1;                                  // Mask: 0x1, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsCrafting : 1;                                   // Mask: 0x2, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsRiding : 1;                                     // Mask: 0x4, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsIndoors : 1;                                    // Mask: 0x8, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsClimbing : 1;                                   // Mask: 0x10, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsViewingInventory : 1;                           // Mask: 0x20, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bUseAlternateFallBlendspace : 1;                   // Mask: 0x40, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bIsFemale : 1;                                     // Mask: 0x80, PropSize: 0x10x1BB0(0x1)(None)
	uint8                                        bPlaySpawnAnim : 1;                                // Mask: 0x1, PropSize: 0x10x1BB1(0x1)(None)
	uint8                                        bPlayFirstSpawnAnim : 1;                           // Mask: 0x2, PropSize: 0x10x1BB1(0x1)(None)
	uint8                                        bNoPhysics : 1;                                    // Mask: 0x4, PropSize: 0x10x1BB1(0x1)(None)
	uint8                                        BitPad_3AE : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bGaveInitialItems : 1;                             // Mask: 0x1, PropSize: 0x10x1BB2(0x1)(None)
	uint8                                        bReceivedGenesisSeasonPassItems : 1;               // Mask: 0x2, PropSize: 0x10x1BB2(0x1)(None)
	uint8                                        BitPad_3AF : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E80[0x65];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DefaultWeapon;                                     // 0x1C18(0x8)(ZeroConstructor)
	class UClass*                                OverrideDefaultWeapon;                             // 0x1C20(0x8)(ZeroConstructor)
	class UClass*                                MapWeapon;                                         // 0x1C28(0x8)(ZeroConstructor)
	class UClass*                                GPSWeapon;                                         // 0x1C30(0x8)(ZeroConstructor)
	class UClass*                                CompassWeapon;                                     // 0x1C38(0x8)(ZeroConstructor)
	uint8                                        Pad_3E82[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerName;                                        // 0x1C48(0x10)(None)
	TWeakObjectPtr<class APrimalDinoCharacter>   RidingDino;                                        // 0x1C58(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                Mesh1P;                                            // 0x1C60(0x8)(ZeroConstructor)
	TArray<class FName>                          LowerBodyPartRootBones;                            // 0x1C68(0x10)(None)
	class UPhysicsAsset*                         FPVCameraAnimationPhysicsAsset;                    // 0x1C78(0x8)(ZeroConstructor)
	class UAnimMontage*                          DropItemAnimation;                                 // 0x1C80(0x8)(ZeroConstructor)
	class UAnimMontage*                          ThrowItemAnimation;                                // 0x1C88(0x8)(ZeroConstructor)
	class UAnimMontage*                          PickupItemAnimation;                               // 0x1C90(0x8)(ZeroConstructor)
	class UAnimMontage*                          ActivateInventoryAnimation;                        // 0x1C98(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                SurvivorProfilePreviewMesh;                        // 0x1CA0(0x8)(ZeroConstructor)
	struct FRotator                              LastDinoAimRotationOffset;                         // 0x1CA8(0x18)(None)
	uint8                                        Pad_3E87[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalProjectileBoomerang*            LastFiredBoomerang;                                // 0x1CD8(0x8)(ZeroConstructor)
	class APrimalProjectileGrapplingHook*        LastFiredGrapHook;                                 // 0x1CE0(0x8)(ZeroConstructor)
	class UPrimalCableComponent*                 GrapplingHookCable;                                // 0x1CE8(0x8)(ZeroConstructor)
	class UAudioComponent*                       LastGrapHookAC;                                    // 0x1CF0(0x8)(ZeroConstructor)
	int32                                        _GrapHookCableObjectCount;                         // 0x1CF8(0x4)(None)
	uint8                                        Pad_3E88[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               GrapHookDefaultOffset;                             // 0x1D00(0x18)(None)
	float                                        GrapHookCableWidth;                                // 0x1D18(0x4)(None)
	uint8                                        Pad_3E89[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    GrapHookMaterial;                                  // 0x1D20(0x8)(ZeroConstructor)
	float                                        LadderJumpVelocity;                                // 0x1D28(0x4)(None)
	float                                        GrapHookPulledRopeDistance;                        // 0x1D2C(0x4)(None)
	float                                        GrapHookSyncTime;                                  // 0x1D30(0x4)(None)
	bool                                         bReleasingGrapHook;                                // 0x1D34(0x1)(None)
	uint8                                        Pad_3E8A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeDestroyedWeapon;                           // 0x1D38(0x8)(None)
	uint8                                        Pad_3E8B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlatformProfileName;                               // 0x1D48(0x10)(None)
	struct FUniqueNetIdRepl                      PlatformProfileID;                                 // 0x1D58(0x30)(None)
	TArray<struct FPlayerStatusStateCharacterSound> CharacterStatusStateSounds;                        // 0x1D88(0x10)(ZeroConstructor)
	class UAudioComponent*                       CharacterStatusStateSoundComponent;                // 0x1D98(0x8)(ZeroConstructor)
	double                                       LastUncrouchTime;                                  // 0x1DA0(0x8)(None)
	double                                       LastUnproneTime;                                   // 0x1DA8(0x8)(None)
	double                                       LastTimeStartedCrouchOrProneTransition;            // 0x1DB0(0x8)(None)
	uint8                                        Pad_3E8F[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DefaultTPVAnimBlueprint;                           // 0x1DE8(0x8)(ZeroConstructor)
	class FName                                  WeaponAttachPoint;                                 // 0x1DF0(0x8)(None)
	float                                        TargetingSpeedModifier;                            // 0x1DF8(0x4)(None)
	uint8                                        Pad_3E92[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            LowHealthSound;                                    // 0x1E00(0x8)(ZeroConstructor)
	class USoundBase*                            FastTravelSound;                                   // 0x1E08(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallFollowAnim;                                    // 0x1E10(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallStayAnim;                                      // 0x1E18(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallFollowAnimSingle;                              // 0x1E20(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallStayAnimSingle;                                // 0x1E28(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallMoveToAnim;                                    // 0x1E30(0x8)(ZeroConstructor)
	class UAnimMontage*                          CallAttackAnim;                                    // 0x1E38(0x8)(ZeroConstructor)
	class UAudioComponent*                       LowHealthWarningPlayer;                            // 0x1E40(0x8)(ZeroConstructor)
	uint8                                        Pad_3E93[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CraftingMovementSpeedModifier;                     // 0x1E60(0x4)(None)
	uint8                                        Pad_3E94[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               WeaponBobMagnitudes;                               // 0x1E68(0x18)(None)
	struct FVector                               WeaponBobPeriods;                                  // 0x1E80(0x18)(None)
	struct FVector                               WeaponBobOffsets;                                  // 0x1E98(0x18)(None)
	struct FVector                               WeaponBobMagnitudes_Targeting;                     // 0x1EB0(0x18)(None)
	struct FVector                               WeaponBobPeriods_Targeting;                        // 0x1EC8(0x18)(None)
	struct FVector                               WeaponBobOffsets_Targeting;                        // 0x1EE0(0x18)(None)
	float                                        WeaponBobMinimumSpeed;                             // 0x1EF8(0x4)(None)
	float                                        WeaponBobSpeedBase;                                // 0x1EFC(0x4)(None)
	float                                        WeaponBobSpeedBaseFalling;                         // 0x1F00(0x4)(None)
	uint8                                        Pad_3E95[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FItemAttachmentInfo>           DefaultAttachmentInfos;                            // 0x1F08(0x10)(ZeroConstructor)
	class USoundBase*                            StartCrouchSound;                                  // 0x1F18(0x8)(ZeroConstructor)
	class USoundBase*                            EndCrouchSound;                                    // 0x1F20(0x8)(ZeroConstructor)
	class USoundBase*                            StartProneSound;                                   // 0x1F28(0x8)(ZeroConstructor)
	class USoundBase*                            EndProneSound;                                     // 0x1F30(0x8)(ZeroConstructor)
	class UClass*                                NextInventoryWeapon;                               // 0x1F38(0x8)(ZeroConstructor)
	struct FItemNetID                            PreMapWeaponItemNetID;                             // 0x1F40(0x8)(None)
	struct FItemNetID                            CurrentWeaponItemID;                               // 0x1F48(0x8)(None)
	float                                        ServerSeatedViewRotationYaw;                       // 0x1F50(0x4)(None)
	float                                        ServerSeatedViewRotationPitch;                     // 0x1F54(0x4)(None)
	class AShooterWeapon*                        CurrentWeapon;                                     // 0x1F58(0x8)(ZeroConstructor)
	uint8                                        Pad_3E96[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDrawHealthBar : 1;                                // Mask: 0x1, PropSize: 0x10x1F68(0x1)(None)
	uint8                                        BitPad_3B0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E97[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        HealthBarOffsetY;                                  // 0x1F6C(0x4)(None)
	uint8                                        bBPOverrideHealthBarOffset : 1;                    // Mask: 0x1, PropSize: 0x10x1F70(0x1)(None)
	uint8                                        bUseCustomHealthBarColor : 1;                      // Mask: 0x2, PropSize: 0x10x1F70(0x1)(None)
	uint8                                        BitPad_3B1 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E98[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint64                                       LinkedPlayerDataID;                                // 0x1F78(0x8)(None)
	uint8                                        Pad_3E99[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AShooterPlayerController> LastValidPlayerController;                         // 0x1FA8(0x8)(ZeroConstructor)
	class UAnimMontage*                          DrinkingAnimation;                                 // 0x1FB0(0x8)(ZeroConstructor)
	double                                       LastRequestedTribeTime;                            // 0x1FB8(0x8)(None)
	int32                                        LastRequestedTribeID;                              // 0x1FC0(0x4)(None)
	uint8                                        Pad_3E9A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                LastRequestedTribeName;                            // 0x1FC8(0x10)(None)
	TWeakObjectPtr<class AShooterCharacter>      LastRequestedTribePlayerCharacter;                 // 0x1FD8(0x8)(ZeroConstructor)
	float                                        IndoorsHyperthermiaInsulation;                     // 0x1FE0(0x4)(None)
	float                                        IndoorsHypothermiaInsulation;                      // 0x1FE4(0x4)(None)
	float                                        IndoorCheckInterval;                               // 0x1FE8(0x4)(None)
	uint8                                        Pad_3E9B[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemNetID                            PreRidingWeaponItemNetID;                          // 0x1FF8(0x8)(None)
	struct FItemNetID                            PreInventoryWeaponItemNetID;                       // 0x2000(0x8)(None)
	TArray<struct FOverrideAnimBlueprintEntry>   OverrideAnimBlueprints;                            // 0x2008(0x10)(ZeroConstructor)
	class UAnimSequence*                         ViewingInventoryAnimation;                         // 0x2018(0x8)(ZeroConstructor)
	class UAnimSequence*                         DefaultDinoRidingAnimation;                        // 0x2020(0x8)(ZeroConstructor)
	class UAnimSequence*                         DefaultDinoRidingMoveAnimation;                    // 0x2028(0x8)(ZeroConstructor)
	class UAnimSequence*                         DefaultSeatingAnimation;                           // 0x2030(0x8)(ZeroConstructor)
	class UAnimSequence*                         DefaultShieldAnimation;                            // 0x2038(0x8)(ZeroConstructor)
	class UAnimMontage*                          ShieldCoverAnimation;                              // 0x2040(0x8)(ZeroConstructor)
	class UAnimMontage*                          ShieldCoverAnimationForCrouch;                     // 0x2048(0x8)(ZeroConstructor)
	uint8                                        bDisableLookYaw : 1;                               // Mask: 0x1, PropSize: 0x10x2050(0x1)(None)
	uint8                                        bPlayingShieldCoverAnimation : 1;                  // Mask: 0x2, PropSize: 0x10x2050(0x1)(None)
	uint8                                        bPlayingShieldCoverAnimationForCrouch : 1;         // Mask: 0x4, PropSize: 0x10x2050(0x1)(None)
	uint8                                        bTriggerBPUnstasis : 1;                            // Mask: 0x8, PropSize: 0x10x2050(0x1)(None)
	uint8                                        BitPad_3B2 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHatHidden : 1;                                    // Mask: 0x80, PropSize: 0x10x2050(0x1)(None)
	uint8                                        BitPad_3B3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowDPC : 1;                                     // Mask: 0x2, PropSize: 0x10x2051(0x1)(None)
	uint8                                        BitPad_3B4 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsConnected : 1;                                  // Mask: 0x8, PropSize: 0x10x2051(0x1)(None)
	uint8                                        BitPad_3B5 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bLockedToSeatingStructure : 1;                     // Mask: 0x40, PropSize: 0x10x2051(0x1)(None)
	uint8                                        bPreventAllWeapons : 1;                            // Mask: 0x80, PropSize: 0x10x2051(0x1)(None)
	uint8                                        bForceBuffAimOverride : 1;                         // Mask: 0x1, PropSize: 0x10x2052(0x1)(None)
	uint8                                        bIsHidingFPVMesh : 1;                              // Mask: 0x2, PropSize: 0x10x2052(0x1)(None)
	uint8                                        BitPad_3B6 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3E9C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EnemyPlayerMaxCursorHUDDistanceProne;              // 0x2054(0x4)(None)
	float                                        EnemyPlayerMaxCursorHUDDistanceCrouched;           // 0x2058(0x4)(None)
	float                                        EnemyPlayerMaxCursorHUDDistanceStanding;           // 0x205C(0x4)(None)
	uint8                                        Pad_3E9D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSaddlePassengerSeatDefinition        CurrentPassengerSeatDefinition;                    // 0x2068(0x110)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UAnimMontage>>   AnimsOverrideFrom;                                 // 0x2178(0x10)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UAnimMontage>>   AnimOverrideTo;                                    // 0x2188(0x10)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UAnimSequence>>  AnimSequencesOverrideFrom;                         // 0x2198(0x10)(ZeroConstructor)
	TArray<TSoftObjectPtr<class UAnimSequence>>  AnimSequenceOverrideTo;                            // 0x21A8(0x10)(ZeroConstructor)
	uint8                                        Pad_3E9E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          BodyColors[0x4];                                   // 0x21BC(0x40)(None)
	uint8                                        FacialHairIndex;                                   // 0x21FC(0x1)(None)
	uint8                                        HeadHairIndex;                                     // 0x21FD(0x1)(None)
	uint8                                        EyebrowIndex;                                      // 0x21FE(0x1)(None)
	uint8                                        Pad_3E9F[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RawBoneModifiers[0x1A];                            // 0x2200(0x68)(None)
	uint8                                        Pad_3EA0[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        DynamicMaterialBytes[0x32];                        // 0x2288(0x32)(None)
	uint8                                        DynamicOverrideHairDyeBytes[0x4];                  // 0x22BA(0x4)(None)
	uint8                                        Pad_3EA1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimaryDataAsset*                     Player_Voice_Collection;                           // 0x22C0(0x8)(ZeroConstructor)
	float                                        LoggedOutTargetingDesirability;                    // 0x22C8(0x4)(None)
	bool                                         bIsRainWatered;                                    // 0x22CC(0x1)(None)
	uint8                                        Pad_3EA2[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UniqueNetIdTypeHash;                               // 0x22DC(0x4)(None)
	uint32                                       SplitscreenMainPlayerUniqueNetIdTypeHash;          // 0x22E0(0x4)(None)
	uint8                                        Pad_3EA3[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          SpawnAnim;                                         // 0x22F8(0x8)(ZeroConstructor)
	class UAnimMontage*                          FirstSpawnAnim;                                    // 0x2300(0x8)(ZeroConstructor)
	class UAnimMontage*                          SleepOutAnim;                                      // 0x2308(0x8)(ZeroConstructor)
	uint8                                        Pad_3EA4[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UPrimalItem*>                   OldItemSlots;                                      // 0x2330(0x10)(ZeroConstructor)
	bool                                         bIsFastInventoryActivated;                         // 0x2340(0x1)(None)
	uint8                                        Pad_3EA5[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        FastInventoryLastIndex;                            // 0x2350(0x4)(None)
	int32                                        FastInventoryLastMaxRow;                           // 0x2354(0x4)(None)
	int32                                        FastInventoryQuantitySlots;                        // 0x2358(0x4)(None)
	uint8                                        Pad_3EA6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                CustomFolderFastInventory;                         // 0x2360(0x10)(None)
	uint8                                        Pad_3EA7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SavedLastTimeHadController;                        // 0x2378(0x8)(None)
	double                                       LastTimeHadController;                             // 0x2380(0x8)(None)
	float                                        LastTaggedTime;                                    // 0x2388(0x4)(None)
	float                                        LastTaggedTimeExtra;                               // 0x238C(0x4)(None)
	float                                        LastTaggedTimeThird;                               // 0x2390(0x4)(None)
	float                                        ExtraFloatVar;                                     // 0x2394(0x4)(None)
	struct FVector                               ExtraVectorVar;                                    // 0x2398(0x18)(None)
	struct FVector                               ExtraExtraVectorVar;                               // 0x23B0(0x18)(None)
	class FName                                  ExtraNameVar;                                      // 0x23C8(0x8)(None)
	bool                                         bIsOnSeatingStructure;                             // 0x23D0(0x1)(None)
	bool                                         bIsControllingBallista;                            // 0x23D1(0x1)(None)
	bool                                         bUseBallistaAimOffset;                             // 0x23D2(0x1)(None)
	uint8                                        Pad_3EA8[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurrentControlledBallistaYaw;                      // 0x23D4(0x4)(None)
	bool                                         bIsServerAdmin;                                    // 0x23D8(0x1)(None)
	uint8                                        Pad_3EA9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalStructureSeating> SeatingStructure;                                  // 0x23DC(0x8)(ZeroConstructor)
	int32                                        SeatingStructureSeatNumber;                        // 0x23E4(0x4)(None)
	uint8                                        Pad_3EAA[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            ThrowCharacterSound;                               // 0x2400(0x8)(ZeroConstructor)
	uint8                                        Pad_3EAB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        PlayerBadgeGroup;                                  // 0x2418(0x1)(None)
	bool                                         bShouldInvertTurnInput;                            // 0x2419(0x1)(None)
	uint8                                        Pad_3EAC[0x36];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InventoryDragWeightScale;                          // 0x2450(0x4)(None)
	uint8                                        Pad_3EAD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimMontage*                          MountedCarryingDinoAnimation;                      // 0x2458(0x8)(ZeroConstructor)
	class UAnimMontage*                          CuddleAnimation;                                   // 0x2460(0x8)(ZeroConstructor)
	uint8                                        Pad_3EAE[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         CharacterAdditiveStandingAnim;                     // 0x24C0(0x8)(ZeroConstructor)
	uint8                                        Pad_3EAF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                HeadHairComponent;                                 // 0x24D8(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                FacialHairComponent;                               // 0x24E0(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                EyebrowsComponent;                                 // 0x24E8(0x8)(ZeroConstructor)
	class USkeletalMeshComponent*                EyelashesComponent;                                // 0x24F0(0x8)(ZeroConstructor)
	float                                        IntervalForFullHeadHairGrowth;                     // 0x24F8(0x4)(None)
	float                                        IntervalForFullFacialHairGrowth;                   // 0x24FC(0x4)(None)
	float                                        PercentOfFullFacialHairGrowth;                     // 0x2500(0x4)(None)
	float                                        PercentOfFullHeadHairGrowth;                       // 0x2504(0x4)(None)
	struct FLinearColor                          OriginalHairColor;                                 // 0x2508(0x10)(None)
	struct FShooterCharacterPostUpdateTickFunction PostUpdateTick;                                    // 0x2518(0x30)(None)
	uint8                                        Pad_3EB0[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedWeight;                                  // 0x2554(0x4)(None)
	uint8                                        Pad_3EB1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              LocalCorpseEmitter;                                // 0x2560(0x8)(ZeroConstructor)
	double                                       LocalDiedAtTime;                                   // 0x2568(0x8)(None)
	uint8                                        Pad_3EB2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            ProneMoveSound;                                    // 0x2578(0x8)(ZeroConstructor)
	double                                       UploadEarliestValidTime;                           // 0x2580(0x8)(None)
	uint8                                        Pad_3EB3[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AController>            SpawnedForController;                              // 0x2594(0x8)(ZeroConstructor)
	uint8                                        Pad_3EB4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystemComponent*              JunctionLinkCableParticle;                         // 0x25A0(0x8)(ZeroConstructor)
	uint8                                        Pad_3EB5[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreventWeaponMovementAnims;                       // 0x25CC(0x1)(None)
	uint8                                        Pad_3EB6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalStructure>       CurrentItemBalloon;                                // 0x25D0(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyWeaponUnequipped;                            // 0x25D8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyWeaponEquipped;                              // 0x25E8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyWeaponFired;                                 // 0x25F8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            NotifyOnWeaponEquip;                               // 0x2608(0x10)(ZeroConstructor)
	int32                                        PlayerHexagonCount;                                // 0x2618(0x4)(None)
	int32                                        DefaultHexagonAmountEarnedOnMissionCompletion;     // 0x261C(0x4)(None)
	uint8                                        Pad_3EB7[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MeshHeightAdjustment;                              // 0x2660(0x4)(None)
	float                                        BuffExtraDamageMultiplier;                         // 0x2664(0x4)(None)
	bool                                         bNormalizeHeadPosition;                            // 0x2668(0x1)(None)
	uint8                                        Pad_3EB8[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnFirstPersonCameraView;                           // 0x2680(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnThirdPersonCameraView;                           // 0x2690(0x10)(ZeroConstructor)
	uint32                                       ExpectedBaseID;                                    // 0x26A0(0x4)(None)
	uint8                                        Pad_3EB9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastExpectedBaseTime;                              // 0x26A8(0x8)(None)
	bool                                         bPreventShowHUDOnSpawnIntroCompletion;             // 0x26B0(0x1)(None)
	uint8                                        Pad_3EBA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHideFloatingHUD : 1;                              // Mask: 0x1, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        bForceDrawHUD : 1;                                 // Mask: 0x2, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        bForceSeatingAnim : 1;                             // Mask: 0x4, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        bIsPressingRunning : 1;                            // Mask: 0x8, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        bAutoDestroyPlayerWeapons : 1;                     // Mask: 0x10, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        BitPad_3B7 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseDefaultWeaponWhenOpeningInventory : 1;         // Mask: 0x40, PropSize: 0x10x26B4(0x1)(None)
	uint8                                        BitPad_3B8 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3EBB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalDinoCharacter>   SavedRidingDino;                                   // 0x26B8(0x8)(ZeroConstructor)
	class UAudioComponent*                       DialogueSoundComponent;                            // 0x26C0(0x8)(ZeroConstructor)
	TArray<class UMaterialInterface*>            CachedPlayerMaterials;                             // 0x26C8(0x10)(ZeroConstructor)
	TArray<class UMaterialInterface*>            CachedAttachmentMaterials;                         // 0x26D8(0x10)(ZeroConstructor)
	double                                       CurrentShadowOpactiy;                              // 0x26E8(0x8)(None)
	double                                       FPVShadowThreshold;                                // 0x26F0(0x8)(None)
	double                                       FPVShadowFade;                                     // 0x26F8(0x8)(None)
	class UAnimationAsset*                       ReplicatedSleepAnim;                               // 0x2700(0x8)(ZeroConstructor)
	TSoftObjectPtr<class UAnimationAsset>        SavedSleepAnim;                                    // 0x2708(0x30)(ZeroConstructor)
	float                                        AimMagnetismStrength;                              // 0x2738(0x4)(None)
	float                                        AimMagnetismOffsetDecaySpeed;                      // 0x273C(0x4)(None)
	float                                        AimMagnetismOffsetMultiplier;                      // 0x2740(0x4)(None)
	uint8                                        Pad_3EBC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, class AShooterProjectile*>       FiredProjectilesCache;                             // 0x2748(0x50)(ZeroConstructor)
	uint8                                        Pad_3EBD[0x44];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LocallyInterpolatedViewLocationZSpeed;             // 0x27DC(0x4)(None)
	uint8                                        Pad_3EBE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bNeedsHairOrBodyUpdate : 1;                        // Mask: 0x1, PropSize: 0x10x27E8(0x1)(None)
	uint8                                        BitPad_3B9 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3EBF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultPercentOfFullHeadHairGrowth;                // 0x27EC(0x4)(None)
	int32                                        DefaultHeadHairIndex;                              // 0x27F0(0x4)(None)
	float                                        DefaultPercentOfFullFacialHairGrowth;              // 0x27F4(0x4)(None)
	int32                                        DefaultFacialHairIndex;                            // 0x27F8(0x4)(None)
	uint8                                        bSKDynamicMatsHaveBeenRecentlyChangedAndNeedUpdatingOnTheAnimbp : 1; // Mask: 0x1, PropSize: 0x10x27FC(0x1)(None)
	uint8                                        BitPad_3BA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3EC0[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClearRiderCameraTransitionInterpSpeed;             // 0x2808(0x4)(None)
	float                                        ClearRiderCameraTransitionInterpTime;              // 0x280C(0x4)(None)
	float                                        TPVCameraExtraCollisionZOffset;                    // 0x2810(0x4)(None)
	uint8                                        Pad_3EC1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            TribeManagementOptionsIcon;                        // 0x2818(0x8)(ZeroConstructor)
	class UTexture2D*                            RecruitToTribeIcon;                                // 0x2820(0x8)(ZeroConstructor)
	class UTexture2D*                            BanishFromTribeIcon;                               // 0x2828(0x8)(ZeroConstructor)
	class UTexture2D*                            PromoteToAdminIcon;                                // 0x2830(0x8)(ZeroConstructor)
	class UTexture2D*                            AcceptTribeInvitationIcon;                         // 0x2838(0x8)(ZeroConstructor)
	class UTexture2D*                            MergeTribeAcceptInvitationIcon;                    // 0x2840(0x8)(ZeroConstructor)
	class UTexture2D*                            ViewTribeInfoIcon;                                 // 0x2848(0x8)(ZeroConstructor)
	class UTexture2D*                            TribeInvitationOptionsIcon;                        // 0x2850(0x8)(ZeroConstructor)
	class UTexture2D*                            InviteToAllianceIcon;                              // 0x2858(0x8)(ZeroConstructor)
	class UTexture2D*                            CantInviteToAllianceIcon;                          // 0x2860(0x8)(ZeroConstructor)
	class UTexture2D*                            AcceptInviteToAllianceIcon;                        // 0x2868(0x8)(ZeroConstructor)
	class UTexture2D*                            CantAcceptInviteToAllianceIcon;                    // 0x2870(0x8)(ZeroConstructor)
	class UTexture2D*                            DeclareTribeWarIcon;                               // 0x2878(0x8)(ZeroConstructor)
	class UTexture2D*                            AcceptTribeWarIcon;                                // 0x2880(0x8)(ZeroConstructor)
	class UTexture2D*                            ShowUserPageIcon;                                  // 0x2888(0x8)(ZeroConstructor)
	float                                        EquippedArmorDurabilityPercent3;                   // 0x2890(0x4)(None)
	float                                        EquippedArmorDurabilityPercent4;                   // 0x2894(0x4)(None)
	float                                        EquippedArmorDurabilityPercent5;                   // 0x2898(0x4)(None)
	float                                        EquippedArmorDurabilityPercent6;                   // 0x289C(0x4)(None)
	uint8                                        Pad_3EC2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimePushed;                                    // 0x28A8(0x8)(None)
	uint8                                        Pad_3EC3[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastPushedDirection;                               // 0x28D0(0x4)(None)
	float                                        VisualVelocitySizeWhenPushed;                      // 0x28D4(0x4)(None)
	uint8                                        Pad_3EC4[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterCharacter* GetDefaultObj();

	void UseAlternateStandingAnim(bool ReturnValue);
	void UseAltAimOffsetAnim(bool ReturnValue);
	void UseAdditiveStandingAnim(bool ReturnValue);
	void UpdateProjectileCache();
	void UpdateExpectedBase();
	void UpdateAutoTurn();
	void UpdateAutoPlayer();
	void UpdateAutoMove();
	void UpdateAutoJump();
	void UpdateAutoFire();
	void UpdateAllyRadarDatas(const TArray<struct FAllyRadarDatas>& NewDatas);
	void TryLaunchMountedDino();
	void TryCutEnemyGrapplingCable();
	void SyncGrapHookDistance(float Distance);
	void StructurePlacementUseAlternateOriginActor(class AActor* ReturnValue);
	void StartWeaponSwitch(class UPrimalItem* APrimalItem, bool bDontClearLastWeapon);
	void StartCameraTransition(float Duration);
	void ShowWeapon();
	void SetPreventEquipAllWeapons(bool bPrevent);
	void SetPlayerHexagonCount(int32 NewHexagonCount, bool ReturnValue);
	void SetImplantSuicideCooldownStartTime(double StartTime);
	void SetHairOnComponent(class USkeletalMeshComponent* HairComponent, class USkeletalMeshComponent* LeaderPoseComponent, TSoftObjectPtr<class USkeletalMesh> HairMesh, class UClass* AnimBlueprint, TSoftObjectPtr<class UMaterialInterface> FemaleHairOverride);
	void SetFastInventoryMode(bool Activate);
	void SetExpectedBase(class APrimalStructure* BaseStructure);
	void SetCarriedPitchYaw(float NewCarriedPitch, float NewCarriedYaw);
	void SetCameraMode(bool bFirstPerson, bool bIgnoreSettingFirstPersonRiding, bool bForce);
	void SetAutoPlayer(bool bEnable);
	void ServerToClientsPlayFireBallistaAnimation();
	void ServerSwitchMap();
	void ServerSwitchBallistaAmmo();
	void ServerStopFireBallista();
	void ServerStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bShouldInvertInput);
	void ServerSetViewingInventory(bool bIsViewing, bool bMulticast);
	void ServerSetTargeting(bool bNewTargeting);
	void ServerSetBallistaTargeting(bool StartTargeting);
	void ServerSetBallistaNewRotation(float Pitch, float Yaw);
	void ServerSeatingStructureAction(uint8 ActionNumber);
	void ServerRequestHexagonTrade(int32 RequestedTradableItemIndex, int32 Quantity);
	void ServerReleaseGrapHookCable(bool bReleasing);
	void ServerReceiveTribeInvite(class AShooterPlayerController* PlayerSendingInvite);
	void ServerPrepareMountedDinoForLaunch(const struct FVector& ViewLoc, const struct FVector& ViewDir);
	void ServerPlayFireBallistaAnimation();
	void ServerNotifyProjectileImpact(const struct FHitResult& HitResult, bool bFromReplication, int32 FromProjectileID);
	void ServerNotifyBallistaShot(const struct FHitResult& Impact, const struct FVector_NetQuantizeNormal& ShootDir);
	void ServerNetEndClimbingLadder(bool bIsClimbOver, const struct FVector& ClimbOverLoc, const struct FVector& JumpDir);
	void ServerLaunchMountedDino();
	void ServerForceUpdatedAimedActors(float OverrideMaxDistance, bool bReplicateToSimulatedClients);
	void ServerFireBallistaProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
	void ServerDetachGrapHookCable(bool bDoUpwardsJump, float UpwardsJumpYaw);
	void ServerClearSwitchingWeapon(bool bOnlyIfDefaultWeapon, bool bClientRequestNextWeaponID);
	void ServerCheckDrinkingWater();
	void ResetRootAimRotation();
	void RenamePlayer(const class FString& NewName);
	void RefreshRiderSocket();
	void PlayEmoteAnimation(uint8 EmoteIndex);
	void PlayDrinkingAnimation();
	void OnWeaponUnequipped(class AShooterWeapon* OldWeapon);
	void OnWeaponEquipped(class AShooterWeapon* NewWeapon);
	void OnRep_RawBoneModifiers();
	void OnRep_LastPushedDirection();
	void OnRep_HatHidden();
	void OnRep_CurrentWeapon(class AShooterWeapon* LastWeapon);
	void OnRep_bIsClimbing();
	void NetSimulatedForceUpdateAimedActors(float OverrideMaxDistance);
	void NetSetOverrideHeadHairColor(uint8 HairColor, int32 ToIndex);
	void NetSetOverrideFacialHairColor(uint8 HairColor, int32 ToIndex);
	void NetSetHeadHairPercent(float ThePercent, int32 NewHeadHairIndex);
	void NetSetFacialHairPercent(float ThePercent, int32 NewFacialHairIndex);
	void NetSetEyebrowStyle(int32 NewEyebrowIndex);
	void LinkedPlayerIDString(const class FString& ReturnValue);
	void LaunchMountedDino();
	void IsWatchingExplorerNote(bool ReturnValue);
	void IsUsingShield(bool ReturnValue);
	void IsUsingClimbingPick(bool ReturnValue);
	void IsTargeting(bool ReturnValue);
	void IsProjectileInCache(int32 ProjectileID, bool ReturnValue);
	void IsPreInventoryItem(class UPrimalItem* TheItem, bool ReturnValue);
	void IsPlayingUpperBodyCallAnimation(bool ReturnValue);
	void IsPlayingRepawnAnim(bool ReturnValue);
	void IsPlayingInitialSpawnAnim(bool ReturnValue);
	void IsOutside(bool ReturnValue);
	void IsNearTopOfLadder(bool ReturnValue);
	void IsIndoorsAtLoc(class UWorld* TheWorld, const struct FVector& ActorLoc, bool ReturnValue);
	void IsGrapplingHardAttached(bool ReturnValue);
	void IsGrapplingAttachedToMe(bool ReturnValue);
	void IsFiring(bool ReturnValue);
	void IsCurrentPassengerLimitCameraYaw(bool ReturnValue);
	void IsCarriedAsPassenger(bool ReturnValue);
	void IsBlockingWithShield(bool ReturnValue);
	void HideWeapon();
	void HasAnyOtherBuffsUsingConsolidatedMultiUse(class APrimalBuff* BuffToSkip, bool ReturnValue);
	void GivePrimalItemWeapon(class UPrimalItem* APrimalItem);
	void GiveHexagonsOnMissionReward(class FName MissionTag, int32 BonusEarnedHexagons, int32 HexagonAmountOverride, int32 ReturnValue);
	void GiveHexagons(int32 NumHexagons, int32 TriggerIndex, float OverrideHexGainFalloffRate, int32 OverrideHexGainFalloffMin, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int32 OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts, int32 ReturnValue);
	void GiveDefaultWeaponTimer();
	void GiveDefaultWeapon(bool bForceGiveDefaultWeapon);
	void GetWeapon(class AShooterWeapon* ReturnValue);
	void GetTargetingSpeedModifier(float ReturnValue);
	void GetSpawnedForController(class AShooterPlayerController* ReturnValue);
	void GetSeatingAnimation(class UAnimSequence* ReturnValue);
	void GetRidingDinoAnimSpeedRatio(float ReturnValue);
	void GetRidingDino(class APrimalDinoCharacter* ReturnValue);
	void GetPlayerHexagonCount(int32 ReturnValue);
	void GetPlayerData(class UPrimalPlayerData* ReturnValue);
	void GetPercentageOfHeadHairGrowth(float ReturnValue);
	void GetPercentageOfFacialHairGrowth(float ReturnValue);
	void GetLastAttackTime(double ReturnValue);
	void GetHeadHairIndex(int32 ReturnValue);
	void GetHeadHairColor(const struct FLinearColor& ReturnValue);
	void GetFacialHairIndex(int32 ReturnValue);
	void GetFacialHairColor(const struct FLinearColor& ReturnValue);
	void GetEyebrowIndex(int32 ReturnValue);
	void GetDinoRidingMoveAnimation(class UAnimSequence* ReturnValue);
	void GetDinoRidingAnimation(class UAnimSequence* ReturnValue);
	void GetCharacterCreatorDynamicMatValue(int32 GameData_DefaultDynamicMaterialByteFloats_index, const struct FPlayerDynamicMaterialFloat& AssociatedDynamicMatModifierRange, float ReturnValue);
	void GetBoneModifierValue(enum class EBoneModifierType BoneModifierType, const struct FBoneModifierRangeArray& AssociatedBoneModifierRange, float ReturnValue);
	void GetBlockingShieldOffsets(const struct FVector& OutBlockingShieldFPVTranslation, const struct FRotator& OutBlockingShieldFPVRotation, bool ReturnValue);
	void GetAlternateStandingAnim(float OutBlendInTime, float OutBlendOutTime, class UAnimSequence* ReturnValue);
	void GetAllBoneModifierValues(const TArray<enum class EBoneModifierType>& AssociatedBoneModifierType, const TArray<struct FBoneModifierRangeArray>& AssociatedBoneModifierRanges, const TArray<float>& ReturnValue);
	void GetAdditiveStandingAnimNonAdditive(bool ReturnValue);
	void GetAdditiveStandingAnim(float OutBlendInTime, float OutBlendOutTime, class UAnimSequence* ReturnValue);
	void GetActualTargetingFOV(float DefaultTargetingFOV, float ReturnValue);
	void GetActiveMission(class AMissionType* ReturnValue);
	void GameStateHandleEvent(class FName NameParam, const struct FVector& VecParam);
	void FinishWeaponSwitch();
	void FindForPlayerController(class AShooterPlayerController* APC, class AShooterCharacter* ReturnValue);
	void DoForceStreamComponents(bool bFirstPerson, bool bForceMaxTexturesOnConsole);
	void DetachGrapHookCable();
	void DetachFromLadder();
	void CycleFastInventoryNext(bool Next);
	void CycleFastInventory(bool bRefresh, bool bNext);
	void ClientWasPushed();
	void ClientUpdatedInventory();
	void ClientsSpawnHexagonVFX(int32 NumHexagons, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int32 OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts);
	void ClientSetExpectedBase(uint32 BaseID);
	void ClientReceiveNextWeaponID(const struct FItemNetID& TheItemID);
	void ClientPlayHarvestAnim();
	void ClientNotifyTribeRequest(const class FString& RequestTribeName, class AShooterCharacter* PlayerCharacter);
	void ClientNetEndClimbingLadder();
	void ClientInviteToAlliance(int32 RequestingTeam, uint32 AllianceID, const class FString& AllianceName, const class FString& InviteeName);
	void ClientClearTribeRequest();
	void ClearSpawnAnim();
	void ClearRidingDino(bool bFromDino, int32 OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
	void ClearPreInventoryWeaponItemNetID();
	void CanStartWeaponSwitch(class UPrimalItem* APrimalItem, bool ReturnValue);
	void CanEquipWeapons(bool ReturnValue);
	void CallGameStateHandleEvent(class FName NameParam, const struct FVector& VecParam);
	void BuffsPreventFirstPerson(bool ReturnValue);
	void BreakGrapple();
	void BPUnstasis();
	void BPUnlockedAllExplorerNotes();
	void BPSetupFirstPersonHandsMesh();
	void BPSetPlayerHexagonCount(int32 NewHexagonCount, bool ReturnValue);
	void BPSetFirstPersonMasterPoseComponent(class USkeletalMeshComponent* FirstPersonMasterPosecomponent);
	void BPOverrideHealthBarOffset(class APlayerController* ForPC, float ReturnValue);
	void BPNonDedicatedPostAnimUpdate();
	void BPGetPlayerHexagonCount(int32 ReturnValue);
	void BPGetHealthBarColor(const struct FVector& ReturnValue);
	void BPCanImplantSuicide(bool ReturnValue);
	void AuthPostSpawnInit();
	void AttachToLadder(class USceneComponent* Parent);
	void ApplyBoneModifiers();
	void ApplyBodyColors(class USkeletalMeshComponent* ToMesh);
	void AnimUseAimOffset(bool ReturnValue);
};

// 0x60 (0x15A0 - 0x1540)
// Class ShooterGame.ShooterCharacterMovement
class UShooterCharacterMovement : public UPrimalCharacterMovement
{
public:
	float                                        MaxSpeedMultiplier;                                // 0x1540(0x4)(None)
	bool                                         bUseAdditionalLinePenetrationChecks;               // 0x1544(0x1)(None)
	uint8                                        Pad_3EC6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bWaterBaseOnly : 1;                                // Mask: 0x1, PropSize: 0x10x1548(0x1)(None)
	uint8                                        bAllowWaterWalking : 1;                            // Mask: 0x2, PropSize: 0x10x1548(0x1)(None)
	uint8                                        Pad_3EC7[0x57];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterCharacterMovement* GetDefaultObj();

	void UpdateAnalogueInputModifier();
	void SetCurrentAcceleration(const struct FVector& NewAcceleration);
	void SetClimbingTarget(const struct FVector& TargetPosition, const struct FRotator& TargetRotation);
	void IsWaterWalking(bool ReturnValue);
	void BPApplyVelocityBraking(float DeltaTime, float Friction, float BrakingDeceleration, const struct FVector& InOutVelocity);
	void BP_PhysicsRotation(float DeltaTime);
	void BP_PerformMovement(float DeltaTime);
	void BP_GetAnalogueInputModifier(float ReturnValue);
};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.ExplorerNoteLocations
class UExplorerNoteLocations : public UDataAsset
{
public:
	TArray<struct FExplorerNoteLocationsPair>    LocationPairs;                                     // 0x30(0x10)(None)

	static class UClass* StaticClass();
	static class UExplorerNoteLocations* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.PrimalCheatManagerExtension
class UPrimalCheatManagerExtension : public UCheatManagerExtension
{
public:

	static class UClass* StaticClass();
	static class UPrimalCheatManagerExtension* GetDefaultObj();

	void JumpToNextExplorerNote();
	void JumpToExplorerNoteByIndex(int32 ExplorerNoteIndex, bool bOnlyIfUnopened);
	void JTNN();
	void JTEN(int32 ExplorerNoteIndex, bool bOnlyIfUnopened);
	void GetTargetActor(class AActor* ReturnValue);
	void GetRidingDino(class APrimalDinoCharacter* ReturnValue);
	void GetPlayerCharacter(class AShooterCharacter* ReturnValue);
	void GetAllExplorerNoteActors(const TArray<class AActor*>& ReturnValue);
	void GetAllActorsInRadius(enum class ECheatActorType Type, float Radius, const TArray<class AActor*>& ReturnValue);
};

// 0x2168 (0x2C90 - 0xB28)
// Class ShooterGame.ShooterPlayerController
class AShooterPlayerController : public ABasePlayerController
{
public:
	class UPaintingStreamingComponent*           PaintingStreamingComponent;                        // 0xB28(0x8)(ZeroConstructor)
	uint8                                        HeldItemSlot[0xA];                                 // 0xB30(0xA)(None)
	uint8                                        UsedItemSlot[0xA];                                 // 0xB3A(0xA)(None)
	uint8                                        Pad_3FB6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastRepeatUseConsumableTime[0xA];                  // 0xB48(0x50)(None)
	int32                                        LastFrameScrollUp;                                 // 0xB98(0x4)(None)
	int32                                        LastFrameScrollDown;                               // 0xB9C(0x4)(None)
	double                                       HeldItemSlotTime[0xA];                             // 0xBA0(0x50)(None)
	double                                       LastUsedItemSlotTimes[0xA];                        // 0xBF0(0x50)(None)
	float                                        RespawnSoundDelay;                                 // 0xC40(0x4)(None)
	uint8                                        Pad_3FB7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PauseMenuUITemplate;                               // 0xC48(0x8)(ZeroConstructor)
	uint8                                        Pad_3FB8[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               CurrentPlayerCharacterLocation;                    // 0xC78(0x18)(None)
	uint8                                        Pad_3FB9[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPreventControllerAutoUnfreeze : 1;                // Mask: 0x1, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bShouldAutoUploadTribeFlag : 1;                    // Mask: 0x2, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        bGamepadHotbarModifierPressed : 1;                 // Mask: 0x4, PropSize: 0x10xCA8(0x1)(None)
	uint8                                        BitPad_3BB : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FBA[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalStructurePlacer*                StructurePlacer;                                   // 0xCB8(0x8)(ZeroConstructor)
	uint8                                        Pad_3FBB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastDeathLocation;                                 // 0xCD0(0x18)(None)
	double                                       LastDeathTime;                                     // 0xCE8(0x8)(None)
	double                                       LastDeathMark;                                     // 0xCF0(0x8)(None)
	uint8                                        Pad_3FBC[0x200];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APrimalCharacter>       LastDeathPrimalCharacter;                          // 0xEF8(0x8)(ZeroConstructor)
	uint8                                        Pad_3FBD[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bFirstSpecatorCycleSinceDeath;                     // 0xF18(0x1)(None)
	bool                                         bShowGameModeHUD;                                  // 0xF19(0x1)(None)
	uint8                                        Pad_3FBE[0x26];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             SelectSlotSound;                                   // 0xF40(0x8)(ZeroConstructor)
	class UClass*                                FogOfWarClass;                                     // 0xF48(0x8)(ZeroConstructor)
	class UFogOfWar*                             FogOfWar;                                          // 0xF50(0x8)(ZeroConstructor)
	class UPrimalLocalProfile*                   PrimalLocalProfile;                                // 0xF58(0x8)(ZeroConstructor)
	uint8                                        Pad_3FBF[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentGameModeMaxNumOfRespawns;                   // 0xF80(0x4)(None)
	uint8                                        Pad_3FC0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     LastDiedListenServerHost;                          // 0xF88(0x8)(ZeroConstructor)
	struct FVector                               LastRawInputDir;                                   // 0xF90(0x18)(None)
	uint8                                        Pad_3FC1[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                StructurePlacerClass;                              // 0xFC0(0x8)(ZeroConstructor)
	uint8                                        Pad_3FC2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxUseDistance;                                    // 0xFD0(0x4)(None)
	float                                        MaxUseCheckRadius;                                 // 0xFD4(0x4)(None)
	TArray<bool>                                 SavedSurvivorProfileSettings;                      // 0xFD8(0x10)(None)
	bool                                         bCachedOnlyShowOnlineTribeMembers;                 // 0xFE8(0x1)(None)
	uint8                                        Pad_3FC3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SavedMissionBiomeFilterMask;                       // 0xFEC(0x4)(None)
	bool                                         bInitializedMissionUI;                             // 0xFF0(0x1)(None)
	bool                                         bMissionSortByDistance;                            // 0xFF1(0x1)(None)
	uint8                                        Pad_3FC4[0x16];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUsingExtendedInfoMap;                             // 0x1008(0x1)(None)
	uint8                                        Pad_3FC5[0x27];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         IsChangingCameraMode;                              // 0x1030(0x1)(None)
	uint8                                        Pad_3FC6[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseOldMiniMap;                                    // 0x1048(0x1)(None)
	uint8                                        Pad_3FC7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMinimapMark                          CurrentTrackingMark;                               // 0x1050(0x78)(ZeroConstructor)
	uint8                                        Pad_3FC8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDinoMapMarkerInfo>            MapDinos;                                          // 0x10D0(0x10)(ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimalInventoryComponent>> RemoteViewingInventories;                          // 0x10E0(0x10)(ZeroConstructor)
	uint8                                        bUseBPServerCycleSpectator : 1;                    // Mask: 0x1, PropSize: 0x10x10F0(0x1)(None)
	uint8                                        BitPad_3BC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FC9[0x5F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 FastTravelDroppedInventory;                        // 0x1150(0x8)(ZeroConstructor)
	uint8                                        Pad_3FCA[0x19];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreventCanOpenMap;                                // 0x1171(0x1)(None)
	uint8                                        Pad_3FCB[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                PhotoModeMarkerActor;                              // 0x1178(0x8)(ZeroConstructor)
	uint8                                        Pad_3FCC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsFirstSpawn : 1;                                 // Mask: 0x1, PropSize: 0x10x1188(0x1)(None)
	uint8                                        bIsRespawning : 1;                                 // Mask: 0x2, PropSize: 0x10x1188(0x1)(None)
	uint8                                        BitPad_3BD : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FCD[0x2F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SteamInventoryStatusUITemplate;                    // 0x11B8(0x8)(ZeroConstructor)
	uint8                                        Pad_3FCE[0xD0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FItemNetID                            LastSteamItemIDToRemove;                           // 0x1290(0x8)(None)
	struct FItemNetID                            LastSteamItemIDToAdd;                              // 0x1298(0x8)(None)
	uint8                                        Pad_3FCF[0x220];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SpectatorCycleIndex;                               // 0x14C0(0x4)(None)
	uint8                                        Pad_3FD0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsFastTravelling;                                 // 0x14C5(0x1)(None)
	bool                                         bLastSpawnWasFastTravel;                           // 0x14C6(0x1)(None)
	bool                                         bEnableTargetingInput;                             // 0x14C7(0x1)(None)
	bool                                         bEnableFire;                                       // 0x14C8(0x1)(None)
	bool                                         bEnableAltFire;                                    // 0x14C9(0x1)(None)
	uint8                                        Pad_3FD1[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreventPaintingStreaming;                         // 0x14E9(0x1)(None)
	uint8                                        Pad_3FD2[0xCE];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FServerChatMessage>            ServerMessageQueue;                                // 0x15B8(0x10)(ZeroConstructor)
	bool                                         bReachedTamedDinoLimit;                            // 0x15C8(0x1)(None)
	bool                                         bHasSurvivedOneDay;                                // 0x15C9(0x1)(None)
	bool                                         bHasReachedHighestPeak;                            // 0x15CA(0x1)(None)
	bool                                         bHasReachedLowestDepth;                            // 0x15CB(0x1)(None)
	uint8                                        Pad_3FD3[0x9C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseCustomCrosshairBP;                             // 0x1668(0x1)(None)
	uint8                                        Pad_3FD4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPointOfInterestData_ForCompanion> WaypointsSOTF;                                     // 0x1670(0x10)(ZeroConstructor)
	uint8                                        Pad_3FD5[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<uint8>                                LastDownloadPlayerDataBytes;                       // 0x16F8(0x10)(None)
	uint8                                        Pad_3FD6[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ViewingWheelCategory;                              // 0x1740(0x4)(None)
	uint8                                        Pad_3FD7[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_3BE : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNotifyPawnBuffsOfDamageEvents : 1;                // Mask: 0x4, PropSize: 0x10x1768(0x1)(None)
	uint8                                        BitPad_3BF : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FD8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bForceHideGameplayUI;                              // 0x1771(0x1)(None)
	uint8                                        Pad_3FD9[0x36];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreventDefaultCharacterItems;                     // 0x17A8(0x1)(None)
	uint8                                        Pad_3FDA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SFXVolumeMultiplier;                               // 0x17AC(0x4)(None)
	uint8                                        Pad_3FDB[0xD9];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsOnlyViewingRemoteInventory;                     // 0x1889(0x1)(None)
	bool                                         bHasViewOnlyInventoryOpen;                         // 0x188A(0x1)(None)
	bool                                         bDrawBlackBackground;                              // 0x188B(0x1)(None)
	uint8                                        Pad_3FDC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                CreativeModeBuff;                                  // 0x1890(0x8)(ZeroConstructor)
	float                                        PrimalStatsCacheFlushInterval;                     // 0x1898(0x4)(None)
	uint8                                        Pad_3FDD[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PingCoolDownTime;                                  // 0x18D4(0x4)(None)
	double                                       LastPingTime;                                      // 0x18D8(0x8)(None)
	float                                        PingTraceDistance;                                 // 0x18E0(0x4)(None)
	int32                                        MaxTeamPingDataOnClient;                           // 0x18E4(0x4)(None)
	TArray<struct FTeamPingDataForClient>        CurrentClientTeamPings;                            // 0x18E8(0x10)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_GoHere;                           // 0x18F8(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_Follow;                           // 0x1978(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_FollowMe;                         // 0x19F8(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_Attack;                           // 0x1A78(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_Tame;                             // 0x1AF8(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_LootIt;                           // 0x1B78(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_Danger;                           // 0x1BF8(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_Track;                            // 0x1C78(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_RallyPoint;                       // 0x1CF8(0x80)(ZeroConstructor)
	struct FTeamPingDataForClient                TeamPingSettings_ClearRallyPoint;                  // 0x1D78(0x80)(ZeroConstructor)
	float                                        PingNotifyRadius;                                  // 0x1DF8(0x4)(None)
	float                                        PingLifetime;                                      // 0x1DFC(0x4)(None)
	float                                        PingLifetime_Dying;                                // 0x1E00(0x4)(None)
	uint8                                        Pad_3FDE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            PingIcon_Default;                                  // 0x1E08(0x8)(ZeroConstructor)
	class UTexture2D*                            PingIcon_Players;                                  // 0x1E10(0x8)(ZeroConstructor)
	class UTexture2D*                            PingIcon_Dinos;                                    // 0x1E18(0x8)(ZeroConstructor)
	class UTexture2D*                            PingIcon_Structures;                               // 0x1E20(0x8)(ZeroConstructor)
	TArray<struct FPingData>                     CurrentPings;                                      // 0x1E28(0x10)(ZeroConstructor)
	uint8                                        Pad_3FDF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTeamPingData                         TribeCacheRallyPointData;                          // 0x1E48(0x50)(ZeroConstructor)
	bool                                         bTribeCacheHaveRallyPointData;                     // 0x1E98(0x1)(None)
	uint8                                        Pad_3FE0[0x1CB];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bWantsToPing : 1;                                  // Mask: 0x1, PropSize: 0x10x2064(0x1)(None)
	uint8                                        bEnablePingSystem : 1;                             // Mask: 0x2, PropSize: 0x10x2064(0x1)(None)
	uint8                                        bIgnoreNextToggleInGameMenu : 1;                   // Mask: 0x4, PropSize: 0x10x2064(0x1)(None)
	uint8                                        BitPad_3C0 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FE1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDebugPOIs;                                        // 0x2068(0x1)(None)
	uint8                                        Pad_3FE2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        POI_SearchTickInterval_Current;                    // 0x206C(0x4)(None)
	struct FVector2D                             POI_SearchTickInterval_RandRanges;                 // 0x2070(0x10)(None)
	float                                        POI_SearchRadius;                                  // 0x2080(0x4)(None)
	uint8                                        Pad_3FE3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       POI_LastSearchTickTime;                            // 0x2088(0x8)(None)
	TArray<class UUserWidget*>                   SpawnedPointWidgets;                               // 0x2090(0x10)(ZeroConstructor)
	TArray<class APointOfInterestCosmeticActor*> SpawnedPointCosmeticActors;                        // 0x20A0(0x10)(ZeroConstructor)
	TArray<struct FPointOfInterestData_ForCompanion> NearbyPointsOfInterest;                            // 0x20B0(0x10)(ZeroConstructor)
	struct FMissionWaypointInfo                  MissionWaypoint;                                   // 0x20C0(0x38)(None)
	uint8                                        Pad_3FE4[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_3C1 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWasGamepadHotbarModifierPressed_RightShoulder : 1; // Mask: 0x2, PropSize: 0x10x210C(0x1)(None)
	uint8                                        BitPad_3C2 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3FE5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnClientReceiveStructuresPlacedOnFloor;            // 0x2110(0x10)(ZeroConstructor)
	uint8                                        Pad_3FE6[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsInAdvancedCinematicMode;                        // 0x2140(0x1)(None)
	uint8                                        Pad_3FE7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Gen1ENFixDesyncValue;                              // 0x2144(0x4)(None)
	TArray<struct FStructHighlightInfo>          HighlightedStructures;                             // 0x2148(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalStructure>> EnforcementRelevantStructures;                     // 0x2158(0x10)(ZeroConstructor)
	TArray<struct FLinearColor>                  EnforcementColors;                                 // 0x2168(0x10)(None)
	uint8                                        Pad_3FE8[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableSpectatorDetach;                            // 0x21CC(0x1)(None)
	bool                                         bEnableSpectatorCycling;                           // 0x21CD(0x1)(None)
	uint8                                        Pad_3FE9[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FUserCosmeticInfo                     UserCosmeticInfo;                                  // 0x21D0(0x10)(None)
	TMap<int32, class AActor*>                   ActiveWaypoints_Creatures;                         // 0x21E0(0x50)(ZeroConstructor)
	TMap<int32, class AActor*>                   ActiveWaypoints_Players;                           // 0x2230(0x50)(ZeroConstructor)
	double                                       LastNetworkTimeRequestedFilterCachedTeamTameList;  // 0x2280(0x8)(None)
	uint8                                        Pad_3FEA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTamingWaypointInfo>           TamingWaypoints;                                   // 0x2290(0x10)(ZeroConstructor)
	uint8                                        Pad_3FEB[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTrackedActorWaypointInfo>     TrackedActorWaypoints;                             // 0x22B8(0x10)(ZeroConstructor)
	TArray<struct FTrackedActorWaypointInfo>     TrackedActorWaypoints_TeammatesOnMap;              // 0x22C8(0x10)(ZeroConstructor)
	uint8                                        Pad_3FEC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CustomActorTracking_DisplayedResultsCount;         // 0x22DC(0x4)(None)
	int32                                        CustomActorTracking_LastSavedCustomTameSelectionType; // 0x22E0(0x4)(None)
	int32                                        CustomActorTracking_LastSavedDinoGroup;            // 0x22E4(0x4)(None)
	class FString                                CustomActorTracking_LastSavedCustomTameSearchText; // 0x22E8(0x10)(None)
	int32                                        CustomActorTracking_LastSavedScrollbarIndex;       // 0x22F8(0x4)(None)
	bool                                         CustomActorTracking_HasJustChangedSelectionType;   // 0x22FC(0x1)(None)
	bool                                         CustomActorTracking_HasJustChangedDinoGroup;       // 0x22FD(0x1)(None)
	bool                                         CustomActorTracking_HasJustChangedSearchText;      // 0x22FE(0x1)(None)
	uint8                                        Pad_3FED[0x29];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, struct FTrackedActorPlusInfoStruct> AllCreaturesWhosInfoIsBeingSentToClientFromServer; // 0x2328(0x50)(ZeroConstructor)
	TMap<int32, struct FTrackedActorPlusInfoStruct> AllPlayersWhosInfoIsBeingSentToClientFromServer_NotTeammates; // 0x2378(0x50)(ZeroConstructor)
	TMap<int32, struct FTrackedActorPlusInfoStruct> AllPlayersWhosInfoIsBeingSentToClientFromServer_Teammates; // 0x23C8(0x50)(ZeroConstructor)
	TArray<struct FCustomTrackedActorInfo>       TrackedActorIDs_TotalForFilter_Ordered;            // 0x2418(0x10)(ZeroConstructor)
	TMap<int32, int32>                           TrackedActorIDs_OrderMap_Players;                  // 0x2428(0x50)(None)
	TMap<int32, int32>                           TrackedActorIDs_OrderMap_Creatures;                // 0x2478(0x50)(None)
	TMap<int32, bool>                            CreaturesAlreadyHandledByTamingAutoAdd;            // 0x24C8(0x50)(None)
	double                                       CachedTeamTameListUpdateInterval;                  // 0x2518(0x8)(None)
	int32                                        CustomActorTracking_MaxAllowedFavoritedActors;     // 0x2520(0x4)(None)
	int32                                        CustomActorTracking_MaxAllowedWaypointTrackedActors; // 0x2524(0x4)(None)
	float                                        ServerRequestCustomTrackedActorListInterval_WithoutUI; // 0x2528(0x4)(None)
	float                                        ServerRequestCustomTrackedActorListInterval_WithUI; // 0x252C(0x4)(None)
	int32                                        ClientTimerCachedTameSelectionType;                // 0x2530(0x4)(None)
	int32                                        ClientTimerCachedDinoGroup;                        // 0x2534(0x4)(None)
	class FString                                ClientTimerCachedCustomTameSearchText;             // 0x2538(0x10)(None)
	int32                                        ClientTimerCachedNewScrollbarIndex;                // 0x2548(0x4)(None)
	bool                                         LatestClientAutoTrackTamesSetting;                 // 0x254C(0x1)(None)
	uint8                                        Pad_3FEE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TrackActorPOILocationLerpRateWhenNotInClientRange; // 0x2550(0x4)(None)
	float                                        ActorTrackingPOIAlphaOnScreen;                     // 0x2554(0x4)(None)
	float                                        ActorTrackingPOIScaleOnScreen;                     // 0x2558(0x4)(None)
	float                                        ActorTrackingPOIAlphaOffScreen;                    // 0x255C(0x4)(None)
	float                                        ActorTrackingPOIScaleOffScreen;                    // 0x2560(0x4)(None)
	float                                        DesiredDistanceForActorTrackingPOILoweredTransparency; // 0x2564(0x4)(None)
	struct FVector2D                             ActorTrackingPOIDistanceToScreenCenterForTransparency; // 0x2568(0x10)(None)
	struct FVector2D                             POIDistanceToScreenCenterDismiss;                  // 0x2578(0x10)(None)
	uint8                                        Pad_3FEF[0xE8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DistanceNearDeathWaypointToClearPOI;               // 0x2670(0x4)(None)
	bool                                         ClientsideTrackLatestDeathPOI;                     // 0x2674(0x1)(None)
	uint8                                        Pad_3FF0[0x43];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APostProcessVolume*                    LastHighestPriorityPostProcessVolume;              // 0x26B8(0x8)(ZeroConstructor)
	struct FPrimalPlayerDataStruct               MyPlayerDataStruct;                                // 0x26C0(0x4F8)(ZeroConstructor)
	class AVolumetricDispatcher*                 MyVolumetricDispatcher;                            // 0x2BB8(0x8)(ZeroConstructor)
	uint8                                        DebugPingLifetime : 1;                             // Mask: 0x1, PropSize: 0x10x2BC0(0x1)(None)
	uint8                                        bEnablingSpectator : 1;                            // Mask: 0x2, PropSize: 0x10x2BC0(0x1)(None)
	uint8                                        Pad_3FF1[0xCF];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterPlayerController* GetDefaultObj();

	void ZoneVolumeReport();
	void WriteVideoReplayBufferToDisk();
	void WritePNTScreenshot(const class FString& Filename, const class FString& ReturnValue);
	void ViewingAnUploadTerminal(bool ReturnValue);
	void UseFastInventory();
	void UpdateTrackingWaypointMark(class FName WithCustomTag);
	void UpdateRallyPoinTimer();
	void UpdateCustomActorTrackListEntries_Combined(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh, bool IsPlayer, const TArray<struct FCustomTrackedActorInfo>& ReturnValue);
	void UnlockExplorerNote(int32 ExplorerNoteIndex, bool ForceShowExplorerNoteUI, bool SavePlayerData);
	void UnlockEmote(class FName EmoteName);
	void UndermeshSphere(int32 Radius);
	void TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox();
	void TurnInput(float Val);
	void TryToForceUploadCharacter();
	void TryCreateTeamPingType(enum class ETeamPingType PingType, bool ReturnValue);
	void TraceTeamPingType(enum class ETeamPingType PingType, const struct FHitResult& Hit, enum class ETeamPingType ReturnPingType, bool ReturnValue);
	void ToggleWeaponAccessory();
	void ToggleHud();
	void Tick_UpdatePings(float DeltaTime);
	void Tick_SearchForPOIs(float DeltaTime);
	void TestPurchaseEP();
	void TestPhysxPerf(int32 RayCount, float DistanceOfRays);
	void TestNotification();
	void TestAlarmNotification(const class FString& Title, const class FString& Message);
	void TellServerAboutNewAutoTrackSetting_ServerLogic(bool SelectedAutotrack);
	void TellServerAboutNewAutoTrackSetting(bool SelectedAutotrack);
	void SwitchFastInventory(bool bNext);
	void SwitchChangeCameraMode();
	void StopTrackingItem(class UPrimalItem* ItemReference);
	void StopSpectating();
	void StartWhistleSelection();
	void StartTrackingItem(class UPrimalItem* ItemReference);
	void StartSurfaceCameraForPassenger(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll);
	void StartSurfaceCamera(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll, float OnSurfaceCameraInterpolationSpeed, bool UseSurfaceCameraInterpolation, const struct FVector& CameraOffset);
	void StartPlacingStructrue(class UClass* BuildingStructure);
	void StartEmoteSelection();
	void StartArkGamepadFaceButtonTop();
	void StartArkGamepadFaceButtonRight();
	void StartArkGamepadFaceButtonLeft();
	void StartArkGamepadFaceButtonBottom();
	void StartArkGamepadBackButton();
	void SpectatorDetachOrbitCamera();
	void SpawnTestStructures(int32 NumStructures, float Spacing, int32 StructureArrayIndex, int32 NumStructureTypes);
	void SpawnTestDinos(int32 NumDinos, float Spacing, int32 DinoArrayIndex, int32 NumDinoTypes);
	void ShowTribeManagerBP();
	void ShowTribeFlagPainting(bool AutoUploadLastPainting, class APrimalStructureTribeFlag* TribeFlag);
	void ShowMyAdminManager();
	void ShowCustomTrackedDinoListMenu(int32 SpecificCharacterID, bool IsPlayer, bool IsFavorite, bool IsWaypoint);
	void ShouldSpawnWaterInteraction(bool ReturnValue);
	void ShouldShowExtendedHUDInfo(bool ReturnValue);
	void ShouldHideGameplayUI(bool ReturnValue);
	void SetVideoReplayEnabled(bool ShouldEnabled);
	void SetupNewTrackBP();
	void SetReplayVideoQuality(int32 VideoQuality);
	void SetPlayerPos(float X, float Y, float Z);
	void SetNumReplaySecondsToStore(int32 NumSecondsToStore);
	void SetMultiUseWheelCategory(int32 Category, class APrimalBuff* OptionalBuff, class AActor* OverrideTargetActor);
	void SetMissionWaypointVisible(bool bInIsVisible);
	void SetMissionWaypointInfo(const class FString& InWaypointTitle, const struct FVector& InWaypointDestination, class FName InWaypointID);
	void SetLastInventoryRetrievalTime();
	void SetInfiniteStats(bool bInfinite);
	void SetGodMode(bool bEnable);
	void SetFCustomTrackedPlayerInfoMembersByPlayerRef(class AShooterCharacter* HandledPlayer, bool Isfavorited, bool IsATeammateOnMap, bool bIsTrackedWaypoint, bool bIsValidForCurrentFilter, const struct FCustomTrackedActorInfo& ReturnValue);
	void SetFCustomTrackedDinoInfoMembersByDinoRef(class APrimalDinoCharacter* HandledDino, bool Isfavorited, bool bIsTrackedWaypoint, bool bIsValidForCurrentFilter, const struct FCustomTrackedActorInfo& ReturnValue);
	void SetDoFInterpTime(float InterpTime);
	void SetCustomActorTracking_LastSavedScrollbarIndex(int32 NewScrollbarIndex);
	void SetCustomActorTracking_LastSavedDinoGroup(int32 DinoGroup);
	void SetCustomActorTracking_LastSavedCustomTameSelectionType(int32 CustomTameSelectionType);
	void SetCustomActorTracking_LastSavedCustomTameSearchText(const class FString& CustomTameSearchText);
	void SetControllerGamepadActive(bool bIsActive);
	void SetCinematicModeAdvanced(bool bInCinematicMode, bool bPreventCameraAnimFPV, bool bSetHUDHidden, bool bDisableKeymappings, const TArray<class FName>& KeyActionNames, bool bDisableChat);
	void SetCheatPlayer(bool bEnable);
	void SetChangingCameraMode(bool bSet);
	void SetAutoPlayer(bool bEnable);
	void SetAdminIcon(bool bAdminIcon);
	void ServerVerifyStructurePlacementItemData(const struct FItemNetID& PlaceUsingItemID);
	void ServerUploadDino(class APrimalDinoCharacter* DownloadedDino);
	void ServerUploadCurrentCharacterAndItems(class UPrimalInventoryComponent* InventoryComp);
	void ServerUploadCharaterDataToArk(class UPrimalInventoryComponent* InventoryComp);
	void ServerUpdateCustomActorTrackListEntries_Players(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerUpdateCustomActorTrackListEntries_Creatures(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerUntrackAllActors_ServerLogic();
	void ServerUntrackAllActors();
	void ServerUnlockPerMapExplorerNote(int32 ExplorerNoteIndex, bool bAvoidBuff, bool SavePlayerData);
	void ServerUnbanPlayer(const class FString& PlayerSteamName);
	void ServerTransferToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, bool bAlsoTryToEqup, int32 RequestedQuantity);
	void ServerTransferredPlayerConfirmationResult(bool bAccept);
	void ServerTransferFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, int32 RequestedQuantity, int32 ToSlotIndex, bool bEquipItem);
	void ServerTransferAllToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView, bool OnlySkins, bool AlsoSkins);
	void ServerTransferAllFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView);
	void ServerTogglePOIVisibilityForTrackedPlayerWaypoint_ServerLogic(int32 TrackedPlayerIndex, bool ShouldMarkActive);
	void ServerTogglePOIVisibilityForTrackedPlayerWaypoint(int32 TrackedPlayerIndex, bool ShouldMarkActive);
	void ServerTogglePOIVisibilityForTrackedCreatureWaypoint_ServerLogic(int32 TrackedCreatureIndex, bool ShouldMarkActive);
	void ServerTogglePOIVisibilityForTrackedCreatureWaypoint(int32 TrackedCreatureIndex, bool ShouldMarkActive);
	void ServerTogglePOIVisibilityForTrackedActorWaypoint_Combined(int32 TrackedActorIndex, bool ShouldMarkActive, bool IsPlayer, bool bDoToggle);
	void ServerSuicide();
	void ServerStopWeaponFire(class AShooterWeapon* Weapon);
	void ServerStopWeaponAltFire(class AShooterWeapon* Weapon);
	void ServerStopSpectating();
	void ServerStayAlive();
	void ServerStartWeaponFire(class AShooterWeapon* Weapon);
	void ServerStartWeaponAltFire(class AShooterWeapon* Weapon);
	void ServerSpectateToPlayerByID(uint64 PlayerID);
	void ServerShowMessageOfTheDay();
	void ServerSetVRPlayer(bool bSetVRPlayer);
	void ServerSetSupressAdminIcon(bool bSuppress);
	void ServerSetSubscribedApp(int32 AppID, bool bPreventDefaultItems);
	void ServerSetSlomoRateFromSpectator(float Rate);
	void ServerSetMessageOfTheDay(const class FString& Message);
	void ServerSetItemBalloonLocation(class APrimalStructureMovingContainer* ItemBalloon, const struct FPrimalMapMarkerEntryData& MapMarker);
	void ServerSetFreeCraftingQuantity(class UPrimalInventoryComponent* InventoryComp, int32 Quantity);
	void ServerSetFavoriteTrackedPlayerViaCharacterIndex_ServerLogic(int32 TrackedPlayerIndex, bool ShouldFavorite);
	void ServerSetFavoriteTrackedPlayerViaCharacterIndex(int32 TrackedPlayerIndex, bool ShouldFavorite);
	void ServerSetFavoriteTrackedCreatureViaCharacterIndex_ServerLogic(int32 TrackedPlayerIndex, bool ShouldFavorite);
	void ServerSetFavoriteTrackedCreatureViaCharacterIndex(int32 TrackedPlayerIndex, bool ShouldFavorite);
	void ServerSetFavoriteTrackedActorViaCharacterIndex_Combined(int32 TrackedPlayerIndex, bool ShouldFavorite, bool IsPlayer);
	void ServerSetDeathWaypointVisible_ServerLogic(int32 DeathLocationIndex);
	void ServerSetDeathWaypointVisible(int32 DeathLocationIndex);
	void ServerSetDeathWaypointInvisible_ServerLogic(int32 DeathLocationIndex);
	void ServerSetDeathWaypointInvisible(int32 DeathLocationIndex);
	void ServerSetActiveWaypointTrackedPlayerViaCharacterIndex_ServerLogic(int32 TrackedPlayerIndex, bool ShouldMarkActive);
	void ServerSetActiveWaypointTrackedPlayerViaCharacterIndex(int32 TrackedPlayerIndex, bool ShouldMarkActive);
	void ServerSetActiveWaypointTrackedCreatureViaCharacterIndex_ServerLogic(int32 TrackedCreatureIndex, bool ShouldMarkActive);
	void ServerSetActiveWaypointTrackedCreatureViaCharacterIndex(int32 TrackedCreatureIndex, bool ShouldMarkActive);
	void ServerSetActiveWaypointTrackedActorViaCharacterIndex_Combined(int32 TrackedPlayerIndex, bool ShouldMarkActive, bool IsPlayer);
	void ServerSendDirectMessage(const class FString& PlayerSteamID, const class FString& Message);
	void ServerSendChatMessage(const class FString& ChatMessage, enum class EChatSendMode SendMode);
	void ServerSendArkDataPayloadEnd(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType);
	void ServerSendArkDataPayloadBegin(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, const TArray<class FString>& DataStats, uint32 ID1, uint32 ID2);
	void ServerSendArkDataPayload(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType, const TArray<uint8>& DataBytes);
	void ServerSelectedCustomItemAction(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, class FName SelectedOption);
	void ServerSaveWorld();
	void ServerRequestUpdateTrackedWaypointsOnly_ServerLogic(bool ClientAutoTrackTamesSetting);
	void ServerRequestUpdateTrackedWaypointsOnly(bool ClientAutoTrackTamesSetting);
	void ServerRequestUpdateTrackedWaypointsAndMapPlayers_ServerLogic(bool ClientAutoTrackTamesSetting);
	void ServerRequestUpdateTrackedWaypointsAndMapPlayers(bool ClientAutoTrackTamesSetting);
	void ServerRequestUpdateActiveMissionTags();
	void ServerRequestTribeLog();
	void ServerRequestTamingInfoList_ServerLogic();
	void ServerRequestTamingInfoList();
	void ServerRequestStructuresPlacedOnFloor(const TArray<class APrimalStructure*>& OnStructures);
	void ServerRequestShowLeaderboards(class UClass* LeaderboardType, class FName MissionTag);
	void ServerRequestSetPin(class UObject* ForTarget, int32 PinValue, bool bIsSetting, int32 TheCustomIndex);
	void ServerRequestSetDefaultDestination(int32 ForSpawnPointID, int32 SpawnPointID);
	void ServerRequestRespawnAtPoint(int32 SpawnPointID, int32 SpawnRegionIndex);
	void ServerRequestRemoveWeaponClipAmmo(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRequestRemoveWeaponAccessoryOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRequestRemoveItemSkinOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRequestRemoveItemSkin(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRequestRemoveDinoFromTamingListByID_ServerLogic(int32 InID1, int32 InID2);
	void ServerRequestRemoveDinoFromTamingListByID(int32 InID1, int32 InID2);
	void ServerRequestRemoteDropAllItems(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter);
	void ServerRequestPlaceStructure(int32 StructureIndex, const struct FVector& BuildLocation, const struct FRotator& BuildRotation, const struct FRotator& PlayerViewRotation, const struct FItemNetID& PlaceUsingItemID, const struct FPlacementData& PlacementData, bool bIsCheat, bool bIsFlipped, int32 WithSnapPointCycle);
	void ServerRequestMyTribeOnlineList();
	void ServerRequestLevelUp(class UPrimalCharacterStatusComponent* ForStatusComp, enum class EPrimalCharacterStatusValue ValueType);
	void ServerRequestInventoryUseItemWithItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2, int32 AdditionalData);
	void ServerRequestInventoryUseItemWithActor(class AActor* AnActor, class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, int32 AdditionalData);
	void ServerRequestInventoryUseItemRemoteWithItemLocal(class UPrimalInventoryComponent* Localinv, class UPrimalInventoryComponent* Remoteinv, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2, int32 AdditionalData);
	void ServerRequestInventoryUseItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRequestInventorySwapItems(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
	void ServerRequestFastTravelToPoint(int32 FromSpawnPointID, int32 SpawnPointID);
	void ServerRequestDropAllItems(const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, bool OnlySkins, bool AlsoSkins);
	void ServerRequestDownloadPlayerCharacter(const struct FArkTributePlayerData& DownloadedCharacter, int32 SpawnPointID, int32 SpawnRegionIndex);
	void ServerRequestDownloadDino(const struct FARKTributeDino& DownloadedDino);
	void ServerRequestDinoCharStats(class APrimalDinoCharacter* TheDinoChar);
	void ServerRequestDinoAncestors(class APrimalDinoCharacter* ForDino);
	void ServerRequestCustomTrackedActorList_ServerLogic(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, int32 NewScrollbarIndex, bool ClientAutoTrackTamesSetting);
	void ServerRequestCustomTrackedActorList(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, int32 NewScrollbarIndex, bool ClientAutoTrackTamesSetting);
	void ServerRequestCreateMissionDataBuff();
	void ServerRequestContainerFuel(class APrimalStructureItemContainer* Container);
	void ServerRequestActorItems(class UPrimalInventoryComponent* ForInventory, bool bInventoryItems, bool bWithFirstSpawn);
	void ServerRepeatMultiUse(class UObject* ForObject, int32 UseIndex);
	void ServerRepairItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerRemoveSteamItemSucceeded();
	void ServerRemoveSteamItem(uint32 ItemdDefId);
	void ServerRemovePawnItem(const struct FItemNetID& ItemID, bool bSecondryAction);
	void ServerRemovePassenger();
	void ServerRemoveCustomActorTrackListEntries_FromTotalList_TeammatePlayers(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ServerRemoveCustomActorTrackListEntries_FromTotalList_Players(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ServerRemoveCustomActorTrackListEntries_FromTotalList_Creatures(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ServerRemoveAdminPlayer(const class FString& PlayerSteamName);
	void ServerReleaseSeatingStructure();
	void ServerRefreshSteamInventory();
	void ServerReceiveCustomActorTrackList_Players(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerReceiveCustomActorTrackList_Creatures(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerReadMessageOFTheDay();
	void ServerProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerProcessItemNetExecCommandBP(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ServerPaint(class UStructurePaintingComponent* Structure, const TArray<struct FPaintItem>& Paints, bool bLastBatch, bool bFromLoadFile, bool ReplicateToClients);
	void ServerNotifyEditText(const class FString& TextToUse, bool CheckedBox, class UClass* ForObjectClass, uint32 ExtraID1, uint32 ExtraID2, class UObject* ForObject);
	void ServerMultiUse(class UObject* ForObject, int32 UseIndex);
	void ServerLoadWorld();
	void ServerLoadUploadedDinos();
	void ServerLoadUploadedCharacters();
	void ServerLoadArkInventoryItems(const TArray<struct FItemNetInfo>& ArkInventoryItems, bool bFinalBatch);
	void ServerListPlayers();
	void ServerKickPlayer(const class FString& PlayerSteamName);
	void ServerInventoryClearCraftQueue(class UPrimalInventoryComponent* InventoryComp);
	void ServerGrindItemInRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, bool GrindStack);
	void ServerGlobalCommand(const class FString& Msg);
	void ServerGiveItem(const struct FSoftObjectPath& ItemString, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint, bool UseExactQuality, bool bGiveEngram);
	void ServerGetVersion();
	void ServerGetOriginalHairColor();
	void ServerGetMessageOfTheDay();
	void ServerFixScoutPlayerState();
	void ServerEquipToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerEquipPawnItem(const struct FItemNetID& ItemID);
	void ServerDropFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerDropAllNotReadyForUploadItems();
	void ServerDPC();
	void ServerDownloadTransferredPlayer(int32 SpawnPointID, int32 SpawnPointRegionIndex);
	void ServerDisallowPlayerToJoinNoCheck(const class FString& PlayerID);
	void ServerDeleteItemFromCustomFolder(class UPrimalInventoryComponent* ForInventory, const class FString& CFolderName, int32 InventoryCompType, const struct FItemNetID& ItemID);
	void ServerDeleteCustomFolder(class UPrimalInventoryComponent* ForInventory, const class FString& CFolderName, int32 InventoryCompType);
	void ServerDataSetRPC(const TArray<struct FDataSet>& DataSets);
	void ServerCycleSpectator(bool bNext);
	void ServerCraftItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID);
	void ServerClearPOIVisibilityForAllActors_ServerLogic();
	void ServerClearPOIVisibilityForAllActors();
	void ServerClearDeathWaypoint_ServerLogic(int32 DeathLocationIndex);
	void ServerClearDeathWaypoint(int32 DeathLocationIndex);
	void ServerCheckUnfreeze();
	void ServerCheckIsValidPlayerToDownload(const struct FArkTributePlayerData& PlayerData);
	void ServerCheckIfWildDinoChildCanBeImprinted_ServerLogic();
	void ServerCheckIfWildDinoChildCanBeImprinted();
	void ServerCharacterUploadWithItems_UploadItem(uint64 PlayerDataID, const struct FItemNetInfo& InvItem);
	void ServerCharacterUploadWithItems_Start(uint64 PlayerDataID, const struct FArkTributePlayerData& PlayerData);
	void ServerCharacterUploadWithItems_FinishAndCreateCharacter(uint64 PlayerDataID);
	void ServerCharacterUploadWithItems_CharaterPayload(uint64 PlayerDataID, const TArray<uint8>& PlayerDataChunk);
	void ServerBanPlayer(const class FString& PlayerSteamName);
	void ServerAutoStackItemIDs(class UPrimalInventoryComponent* InventoryComp, const TArray<struct FItemNetID>& ItemIDs);
	void ServerAsyncLoadArkInventoryItems(const TArray<struct FItemNetInfo>& ArkInventoryItems, bool bFinalBatch);
	void ServerAllowPlayerToJoinNoCheck(const class FString& PlayerID);
	void ServerAddItemToCustomFolder(class UPrimalInventoryComponent* ForInventory, const class FString& CFolderName, int32 InventoryCompType, const struct FItemNetID& ItemID);
	void ServerAddItemToArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, int32 RequestedQuantity);
	void ServerAddItemFromArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID, int32 RequestedQuantity);
	void ServerAddCustomActorTrackListEntries_Players(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerAddCustomActorTrackListEntries_Creatures_ForcePOIVisible(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerAddCustomActorTrackListEntries_Creatures(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh);
	void ServerAddAdminPlayer(const class FString& PlayerSteamName);
	void ServerAddAchievementID(const class FString& AchievementID, bool bIsOnSpawn);
	void ServerActorViewRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
	void ServerActorCloseRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
	void Server_UpdateRallyPointData();
	void Server_SendBlockListFromClient(const TArray<class FString>& BlockedEOSUserIds);
	void Server_SelectAndJoinVoiceChannel(int32 VoiceFilterType);
	void Server_RespondToPing(const struct FReplicatePingData& RespondToPingData);
	void Server_RequestLastDeathTrackingActorLoc_ServerLogic();
	void Server_RequestLastDeathTrackingActorLoc();
	void Server_Ping(const struct FReplicatePingData& WithPingData);
	void Server_DoTeamPing(const struct FTeamPingData& WithPingData);
	void SendAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message);
	void SCP();
	void SameLinkedId(int64 Value, bool ReturnValue);
	void RPCStayAlive();
	void RespondToPing(const struct FReplicatePingData& RespondToPingData);
	void RequestUpdateCachedTeamTameList();
	void RequestSpectator(const class FString& InSpectatorPass);
	void RemoveMinimapMark(class FName WithCustomTag, class FName OnMap);
	void RemoveItemSucceeded();
	void RemoveCustomActorTrackListEntries_FromTotalList_Combined(const TArray<int32>& InfoList, bool IsInfoFresh, bool IsPlayer, bool Teammateplayers);
	void RemoteServerCheat(const class FString& Msg);
	void RemoteCheat(const class FString& Msg);
	void ReleasedChangeCameraMode();
	void RefreshDinoTrackInfo();
	void ReceiveCustomActorTrackList_Combined(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh, bool IsPlayer, const TArray<struct FCustomTrackedActorInfo>& ReturnValue);
	void QuitToMainMenu();
	void QueryGDKStats();
	void PurchaseEngramPoint(int32 NumPointsToPurchase);
	void PrintColors();
	void PressedChangeCameraMode();
	void PlayHitMarkerStructureAlly();
	void PlayHitMarkerStructure();
	void PlayHitMarkerCharacterBP(bool bHitFriendlyTarget, const struct FHitMarkerSettings& HitMarkerSettings);
	void PlayHitMarkerCharacter(bool bHitFriendlyTarget, const struct FHitMarkerSettings& HitMarkerSettings);
	void PlayerCommand(const class FString& TheCommand, const class FString& ReturnValue);
	void PingNearbyPlayers(const struct FReplicatePingData& WithPingData);
	void OnWhistlePress();
	void OnToggleInGameMenu();
	void OnToggleDoFMenu();
	void OnStopTargeting();
	void OnStopFire();
	void OnStartTargeting();
	void OnStartInGameMenu();
	void OnStartFire();
	void OnSpectatorIncreaseBaseSpeedStart();
	void OnSpectatorDecreaseBaseSpeedStart();
	void OnServerRefreshSteamInventoryFinished(bool bSuccess, uint64 SteamID);
	void OnRefreshSteamInventoryToCheckConsumeFinished(bool bSuccess, uint64 SteamID);
	void OnRefreshSteamInventoryFinished(bool bSuccess, uint64 SteamID);
	void OnRecievedUpdatedCachedTeamTameList(bool IsInfoFresh, int32 DesiredIndexOfWidgetThatShouldHaveItsCreatureReturned);
	void OnPingUp();
	void OnPingDown();
	void OnLoadArkTributePlayersDataFinished(bool Success, const TArray<struct FArkTributePlayerData>& PlayersData, int32 FailureResponseCode);
	void OnLevelView();
	void OnFirstSaveAfterCharacterDownloadFinished(bool Success);
	void OnEmoteKey2Release();
	void OnEmoteKey2Press();
	void OnEmoteKey1Release();
	void OnEmoteKey1Press();
	void OnDisableSpectator();
	void OnCurrentCharacterAndItemsUploaded(bool Success);
	void OnConsumeItemFinished(bool bSuccess, uint64 SteamID);
	void OnArkTributeSaved(bool Success);
	void OnAddItemFinished(bool bSuccess, const TArray<uint64>& SteamItemUserIDs, uint64 SteamID);
	void OnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, const TArray<int32>& MasterIndexNum);
	void NotifyTribeWarStatus(const class FString& EnemyTribeString, int32 StatusType);
	void NotifyPawnBuffsOfDamageEvent(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
	void NewMinimapMark(const struct FMinimapMark& NewMark);
	void NetSpawnFoliageVFXActorAtLocationAndDoFoliageInteraction_Simple(class UClass* AnActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, int32 DataIndex, const struct FVector_NetQuantize& FoliageOrigin_ImpactPoint, float TraceEndpointZ, class USceneComponent* AttachToComponent);
	void NetSpawnFoliageVFXActorAtLocationAndDoFoliageInteraction(class UClass* AnActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, int32 DataIndex, const struct FVector_NetQuantize& FoliageOrigin_ImpactPoint, const struct FVector_NetQuantize& TraceEndpoint, class USceneComponent* AttachToComponent);
	void NetSpawnActorAtLocation(class UClass* AnActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, class USceneComponent* AttachToComponent, int32 DataIndex, class FName AttachSocketName);
	void MobileSpawnTameConsoleAdd(class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, int32 DinoLevel, bool ShouldTame, bool IsBaby, class UClass* SaddleItem);
	void MobileSpawnTame(class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, int32 DinoLevel, bool ShouldTame, bool IsBaby, class UClass* SaddleItem, bool ShouldGender, bool IsFemale);
	void MarkDinoListEntryWidgetFavoritePlayer(int32 ID);
	void MarkDinoListEntryWidgetFavoriteCreature(int32 ID);
	void MarkDinoListEntryWidgetFavoriteCombined(int32 ID, bool IsPlayer);
	void LogChatMessage(const struct FPrimalChatMessage& Message);
	void LockEmote(class FName EmoteName);
	void LoadUserCosmeticsInfo();
	void LinkedPlayerIDString(const class FString& ReturnValue);
	void LevelView();
	void LeaveMeAlone();
	void JoinVoiceChannel(const class FString& InChannelName, const class FString& InChannelCredentials);
	void IsViewingInventoryUI(bool ReturnValue);
	void IsTribeAdmin(bool ReturnValue);
	void IsTargetSleeping();
	void IsSpectator(bool bIncludeSOTFIntro, bool ReturnValue);
	void IsSOTFIntro(bool ReturnValue);
	void IsRemoteControlling(bool ReturnValue);
	void IsPOINearCenterOfScreen(const struct FVector2D& POIPosition, const struct FVector2D& DeadZone, bool ReturnValue);
	void IsPlayerViewingPing(class AShooterPlayerController* ForPC, const struct FPingData& CheckPingData, bool ReturnValue);
	void IsPingedItem(class UPrimitiveComponent* PingComponent, bool ReturnValue);
	void IsPawnAcknowledged(bool ReturnValue);
	void IsMinimapOpened(bool ReturnValue);
	void IsJumpInputPressed(bool ReturnValue);
	void IsInTribe(bool ReturnValue);
	void IsInputPressed(class FName InputName, class FName GamepadInputName, bool ReturnValue);
	void IsHudVisible(bool ReturnValue);
	void IsGameInputAllowed(bool ReturnValue);
	void IsFirstLocalPlayerOrLivingLocalPlayer(bool ReturnValue);
	void IsFirstLocalPlayer(bool ReturnValue);
	void IsEmoteUnlocked(class FName EmoteName, bool ReturnValue);
	void IsAtPersonalTameLimit(bool bIsForStructure, bool ReturnValue);
	void IsAltFireInputPressed(bool ReturnValue);
	void InitPing(const struct FPingData& ForPingData, const struct FReplicatePingData& InitFromData, bool ReturnValue);
	void InitCharacterPainting(class APrimalCharacter* Char);
	void InfiniteStats();
	void IncrementStat(enum class EPrimalGDKStat StatToIncrement);
	void HideRiders(bool bDoHide);
	void HideFPVMesh();
	void HavePingDataOfPlayer(int32 PlayerID, int32 ReturnIndex, bool ReturnValue);
	void HasGodMode(bool ReturnValue);
	void HasBestScoreForMission(class FName MissionTag, bool ReturnValue);
	void GlobalCommand(const class FString& Msg);
	void GiveSlotItemNum(int32 MasterIndexNum, int32 SlotNum, int32 QuantityOverride, bool ReturnValue);
	void GiveSlotItem(const class FString& BlueprintPath, int32 SlotNum, int32 QuantityOverride, bool ReturnValue);
	void GiveColors(int32 Quantity);
	void GetTrackedActorCategoryEnumFromInt(int32 InputInt, enum class ETrackedActorCategory ReturnValue);
	void GetTeamPingSettingsByType(enum class ETeamPingType TeamPingType, const struct FTeamPingDataForClient& ReturnValue);
	void GetTamedDinosNearBy(const TArray<class APrimalDinoCharacter*>& Dinos, float RangeRadius, const struct FVector& NearLocation);
	void GetSubscribedAppIds(int32 ReturnValue);
	void GetShooterSpectatorPawn(class AShooterSpectatorPawn* ReturnValue);
	void GetShooterHud(class AShooterHUD* ReturnValue);
	void GetPlayerViewPointNoModifiers(const struct FVector& Out_Location, const struct FRotator& Out_Rotation, bool ForAiming, bool bNoTPVAim);
	void GetPlayerCharacterName(const class FString& ReturnValue);
	void GetPlayerCharacterEvenIfDead(class AShooterCharacter* ReturnValue);
	void GetPlayerCharacter(class AShooterCharacter* ReturnValue);
	void GetPingTitleForActor(class AActor* ForActor, const class FString& ReturnValue);
	void GetPingIconForComponent(class UPrimitiveComponent* ForComponent, class UTexture2D* ReturnValue);
	void GetPersonalTameLimitString(const class FString& ReturnValue);
	void GetPawnInventoryComponent(class UPrimalInventoryComponent* ReturnValue);
	void GetNearbyPOIs(const TArray<struct FPointOfInterestData_ForCompanion>& ReturnValue);
	void GetMapMarkerPOIs();
	void GetLocalPlayerViewSize(const struct FVector2D& ReturnValue);
	void GetLinkedPlayerID(int32 ReturnValue);
	void GetLastInventoryRetrievalTime(double ReturnValue);
	void GetInventoryUISelectedSkinRemote(class UPrimalItem* ReturnValue);
	void GetInventoryUISelectedSkinLocal(class UPrimalItem* ReturnValue);
	void GetInventoryUISelectedItemRemote(class UPrimalItem* ReturnValue);
	void GetInventoryUISelectedItemLocal(class UPrimalItem* ReturnValue);
	void GetIntFromTrackedActorCategoryEnum(enum class ETrackedActorCategory InputEnum, int32 ReturnValue);
	void GetHeldItemSlots(const TArray<uint8>& ReturnValue);
	void GetExplorerNoteEntry(int32 ExplorerNoteIndex, const struct FExplorerNoteEntry& ReturnValue);
	void GetControllerPlayer(class AShooterCharacter* ReturnValue);
	void GetBestScoreForMission(class FName MissionTag, const struct FLeaderboardRow& ReturnValue);
	void GetAllMatinees();
	void GetAllCachedTeamTames(const TArray<struct FTrackedActorPlusInfoStruct>& ReturnValue);
	void GetAllAimedHarvestActors(float MaxDistance, const TArray<class AActor*>& OutHarvestActors, const TArray<class UActorComponent*>& OutHarvestComponents, const TArray<int32>& OutHitBodyIndices, bool ReturnValue);
	void GetActiveMission(class AMissionType* ReturnValue);
	void FormatTextWithKeyBindings(const class FString& InText, bool bIgnoreMarkup, int32 IconOffset, const class FString& ReturnValue);
	void ForceSpectatorCycleBP();
	void FlushPrimalStats();
	void FlushLevelStreaming();
	void FinishInputBlockingTimeout();
	void FindGetTrackedActorWaypointIndexID(int32 PlayerID, int32 PlayerCategory, int32 ReturnValue);
	void FindGetTrackedActorWaypointIndex(int32 PlayerID, enum class ETrackedActorCategory PlayerCategory, int32 ReturnValue);
	void FindGetTrackedActorFavoritedIndexID(int32 PlayerID, int32 PlayerCategory, int32 ReturnValue);
	void FindGetTrackedActorFavoritedIndex(int32 PlayerID, enum class ETrackedActorCategory PlayerCategory, int32 ReturnValue);
	void FinalFlushLevelStreaming();
	void EnvQA();
	void EnforcementHighlight(bool bEnable);
	void EndWhistleSelectionInput(bool bFromRelease);
	void EndWhistleSelection();
	void EndSurfaceCamera();
	void EndEmoteSelection(bool bFromRelease);
	void EndArkGamepadFaceButtonTop();
	void EndArkGamepadFaceButtonRight();
	void EndArkGamepadFaceButtonLeft();
	void EndArkGamepadFaceButtonBottom();
	void EndArkGamepadBackButton();
	void EnableSpectator(bool DestroyPlayerCharacter);
	void EditorReconnect();
	void DrawMultiUsePingEntry(int32 Index, class FName Text, class UCanvas* Canvas, const struct FVector2D& CanvasPosition);
	void DrawCrosshairOnScreenBP(const struct FVector2D& ReturnValue);
	void DoServerCheckUnfreeze();
	void DoPlayerCommand(const class FString& TheCommand);
	void DoPingTrace(const struct FReplicatePingData& NewPing, bool bIsResponding, bool ReturnValue);
	void DoesPlayerOwnPing(class AShooterPlayerController* PlayerPC, int32 PingOwnerID, bool ReturnValue);
	void DoCrash();
	void DisableSurfaceCameraInterpolation();
	void DisableEnemyInvisible();
	void DebugStructures();
	void DebugCheckSeven(bool bEnable);
	void CopyWorldBuffStatus();
	void CopyCoordsToClipboard();
	void ConditonalEndGamepadModiferState();
	void ClientUsedActorItem(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID);
	void ClientUploadedDinosLoaded(const TArray<struct FARKTributeDinoListing>& UploadedDinosDataListings);
	void ClientUploadedCharactersLoaded(bool Success, const TArray<struct FArkTributePlayerDataListing>& UploadedCharactersDataListings);
	void ClientUploadDino(class APrimalDinoCharacter* DownloadedDino);
	void ClientUpdateMyPlayerDataStruct(const struct FPrimalPlayerDataStruct& NetMyPlayerDataStruct);
	void ClientUpdateItemWeaponClipAmmo(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID, int32 Ammo);
	void ClientUpdateItemQuantity(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID, int32 ItemQuantity);
	void ClientUpdateItemDurability(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID, float ItemDurability);
	void ClientUpdateItemCustomData(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID, const struct FCustomItemData& InData);
	void ClientUpdateInventoryCraftQueue(class UPrimalInventoryComponent* ForInventory, const TArray<struct FItemCraftQueueEntry>& CraftQueueEntries);
	void ClientUpdateCustomActorTrackListEntries_Players(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientUpdateCustomActorTrackListEntries_Creatures(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientUnlockExplorerNote(int32 ExplorerNoteIndex, bool ForceShowExplorerNoteUI, bool SavePlayerData);
	void ClientUnlockAchievement(const class FString& AchievementID, bool SavePlayerData);
	void ClientTeleportSpectator(const struct FVector& Location, uint64 PlayerID);
	void ClientSwapActorItems(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
	void ClientStopLocalSound(class USoundBase* ASound);
	void ClientStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
	void ClientStartReceivingTribeLog();
	void ClientStartReceivingActorItems(class UPrimalInventoryComponent* ForInventory, bool bEquippedItems);
	void ClientStartActivity(const class FString& AcitivityName);
	void ClientSimpleMarkTrackedActorInfoUpdated();
	void ClientShowTransferredPlayerConfirmationDialog();
	void ClientShowSpawnUIForTransferringPlayer(class UClass* NewHUDClass, uint64 TransferingPlayerID, bool bUseTimer);
	void ClientShowSpawnUI(float Delay);
	void ClientShowPaintingUI(class UObject* ObjectToPaint);
	void ClientShowLeaderboard(class UClass* LeaderboardType, class FName MissionTag, const TArray<struct FLeaderboardRow>& LeaderboardRows, bool bPlayerHasValidLatestScore, const struct FLeaderboardRow& LatestPlayerScore);
	void ClientShowCharacterCreationUI(bool bShowDownloadCharacter);
	void ClientShooterWasKicked(class FText KickReason);
	void ClientSetSpectatorLocation(const struct FVector& NewLocation);
	void ClientSetPersonalDinoTameCount(int32 NewPersonalDinoTameCount);
	void ClientSetHUDAndInitUIScenes(class UClass* NewHUDClass);
	void ClientSetControlRotation(const struct FRotator& NewRotation);
	void ClientSetContainerFuel(class APrimalStructureItemContainer* Container, float FuelQuantity);
	void ClientSetCanEnableCheats(bool bIsPossible);
	void ClientSetArkTributeLimits(bool LimitItems, bool LimitDinos, bool LimitCharacters, int32 MaxItems, int32 MaxDinos, int32 MaxCharacters);
	void ClientServerSOTFNotificationCustom(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32 TribeID);
	void ClientServerSOTFNotification(enum class ESTOFNotificationType NotificationType, const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, bool bLastPlayer, const class FString& TribeName, const TArray<class FString>& PlayerNames, const class FString& DeathReason, const TArray<struct FPrimalPlayerCharacterConfigStructReplicated>& DeadPlayersData, int32 TribeID);
	void ClientServerNotificationSingle(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32 MessageTypeID, int32 Priority);
	void ClientServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32 Priority);
	void ClientServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
	void ClientServerChatDirectMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
	void ClientSendVersion(const class FString& Version);
	void ClientSendItemNetExecCommandToServer(class UPrimalItem* ForItem, class FName CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
	void ClientSendFolderData(class UPrimalInventoryComponent* ForInventory, const TArray<struct FServerCustomFolder>& ServerCustomFolder);
	void ClientSendArkDataPayloadEnd(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType, uint64 PlayerDataID);
	void ClientSendArkDataPayloadBegin(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, const TArray<class FString>& DataStats, uint32 ID1, uint32 ID2);
	void ClientSendArkDataPayload(const struct FGuid& ID, enum class EPrimalARKTributeDataType ArkDataType, const TArray<uint8>& DataBytes);
	void ClientRunLocalConsoleCommand(const class FString& Command, bool bWriteToLog);
	void ClientResetRespawningFlag();
	void ClientRequestNewTrackInfoFromServer_TimerRestriction(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, int32 NewScrollbarIndex);
	void ClientRequestNewTrackInfoFromServer(bool FromUI, int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, int32 NewScrollbarIndex);
	void ClientRequestDeathPOIHidden_TimerRestriction();
	void ClientRemoveItemFromSteamInventory(const TArray<uint64>& ItemSteamUserID, int32 Quantity);
	void ClientRemoveItemFromArk(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& RemovedItemID);
	void ClientRemoveCustomActorTrackListEntries_FromTotalList_TeammatePlayers(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ClientRemoveCustomActorTrackListEntries_FromTotalList_Players(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ClientRemoveCustomActorTrackListEntries_FromTotalList_Creatures(const TArray<int32>& InfoList, bool IsInfoFresh);
	void ClientRemoveActorItem(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ItemID, bool ShowHUDMessage);
	void ClientRefreshSteamInventoryFinished(bool bSuccess);
	void ClientReceiveTribeLog(const class FString& LogString);
	void ClientReceiveTamingInfoList(const TArray<struct FTamingDinoInfo>& InfoList);
	void ClientReceiveStructuresPlacedOnFloor(const TArray<struct FStructuresOnFloor>& Structures);
	void ClientReceiveOriginalHairColor(const struct FLinearColor& HairColor);
	void ClientReceiveMyTribeOnlineList(const TArray<uint32>& OnlinePlayerIDs);
	void ClientReceiveDinoCharStats(class APrimalDinoCharacter* TheDinoChar, const TArray<float>& CurValues, const TArray<float>& MaxValues);
	void ClientReceiveDinoAncestors(class APrimalDinoCharacter* ForDino, const TArray<struct FDinoAncestorsEntry>& DinoAncestors, const TArray<struct FDinoAncestorsEntry>& DinoAncestorsMale, int32 RandomMutationsFemale, int32 RandomMutationsMale);
	void ClientReceiveCustomActorTrackList_Players(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientReceiveCustomActorTrackList_Creatures(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientReceiveActiveMissionTags(const TArray<class FName>& MissionTags);
	void ClientProgressAchievementInteger(const class FString& AchievementID, int32 ProgressInteger, bool SavePlayerData);
	void ClientProgressAchievement(const class FString& AchievementID, float Progress, bool SavePlayerData);
	void ClientProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientProcessItemNetExecCommandBP(class UPrimalInventoryComponent* ForInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, class FName CommandName, const struct FBPNetExecParams& ExecParams);
	void ClientPlayLocalSound(class USoundBase* ASound, bool bAttach);
	void ClientPlayerIsValidToDownload(bool bIsValid, const struct FArkTributePlayerData& PlayerData);
	void ClientOnStartDownloadTransferredPlayerCharacter();
	void ClientOnEndDownloadTransferredPlayerCharacter(bool Success, int32 FailureResponseCode, const class FString& FailureResponseMessage);
	void ClientOnDropAllNotReadyForUploadItemsFinished();
	void ClientOnCurrentCharacterAndItemsUploaded(uint64 TransferringPlayerDataId);
	void ClientOnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, const TArray<int32>& MasterIndexNum);
	void ClientNotifyUnlockHairStyleOrEmote(class FName HairstyleOrEmoteName);
	void ClientNotifyUnlockedEngram(class UClass* ItemClass, bool bTekGram);
	void ClientNotifyUnlockedAllExplorerNotes();
	void ClientNotifyTribeXP(float HowMuch);
	void ClientNotifyTorpidityIncrease();
	void ClientNotifyTamedDino(class UClass* DinoClass);
	void ClientNotifySummonedDino(class UClass* DinoClass);
	void ClientNotifyShowProfileRequest(const struct FUniqueNetIdRepl& ProfileId);
	void ClientNotifyRemotePlayerDeath(const class FString& PlayerName, const class FString& AttackerName);
	void ClientNotifyPlayerKill(class AActor* PlayerPawn, class APawn* VictimPawn);
	void ClientNotifyPlayerDeathReason(const class FString& ReasonString);
	void ClientNotifyPlayerDeath(class APawn* InstigatingPawn);
	void ClientNotifyPaintFinished(bool bSuccess);
	void ClientNotifyMessageOfTheDay(const class FString& Message, float TimeToDisplay);
	void ClientNotifyListenServerOutOfRange();
	void ClientNotifyLevelUp(class APrimalCharacter* ForChar, int32 NewLevel);
	void ClientNotifyHitHarvest();
	void ClientNotifyEditText(class UClass* ForObjectClass, int32 ExtraID1, int32 ExtraID2, class UObject* ForObject);
	void ClientNotifyDinoKill(class APrimalDinoCharacter* InstigatingPawn, class APawn* VictimPawn);
	void ClientNotifyDinoDeath(const class FString& DinoName, const class FString& AttackerName, bool bIsVehicle);
	void ClientNotifyDefeatedDino(class UClass* DinoClass);
	void ClientNotifyCantHitHarvest();
	void ClientNotifyCantHarvest();
	void ClientNotifyAdmin();
	void ClientLoadArkItems(class UPrimalInventoryComponent* ForInventory, const TArray<struct FItemNetInfo>& ItemInfos, bool bClear, bool bFinalBatch);
	void ClientInsertActorItem(class UPrimalInventoryComponent* ForInventory, const struct FItemNetInfo& ItemInfo, const struct FItemNetID& InsertAfterItemID);
	void ClientHUDNotificationTypeParams(int32 MessageType, int32 MessageType1, int32 MessageParam2, class UObject* ObjectParam1);
	void ClientGetMessageOfTheDay(const class FString& Message);
	void ClientFinishedReceivingActorItems(class UPrimalInventoryComponent* ForInventory, bool bEquippedItems);
	void ClientFinishedLoadArkItems(class UPrimalInventoryComponent* ForInventory);
	void ClientFailedToAddItemFromArkInventory();
	void ClientFailedRemoveSaddle();
	void ClientEndReceivingTribeLog();
	void ClientEndActivity(const class FString& ActivityName, bool bIsCompleted);
	void ClientDrawUndermeshSphere(int32 Radius);
	void ClientDrawBrushComponentInGame(class UBrushComponent* BrushComponent, float Duration, bool bDrawSolidBox);
	void ClientDownloadPlayerCharacterRequestFinished(bool Success);
	void ClientDownloadDinoRequestFinished(bool Success);
	void ClientDoMultiUse(class UObject* ForObject, int32 UseIndex);
	void ClientDisplayNotificationDialog(const class FString& Message, const class FString& Title, bool bIsError, bool OnOkGoToMainMenu, bool bAutoClose, bool bCanBeTop, bool bHideXBoxFooter);
	void ClientDataSetRPC(const TArray<struct FDataSet>& DataSets);
	void ClientCreateDeathMark(const struct FVector& Location);
	void ClientCollectedAchievementItem(class UClass* ItemClass);
	void ClientChatMessage(const struct FPrimalChatMessage& Chat);
	void ClientAddItemToArk(class UPrimalInventoryComponent* ForInventory, const struct FItemNetInfo& ItemInfo, bool bFromLoad);
	void ClientAddFolderToInventoryComponent(class UPrimalInventoryComponent* ForInventory, const class FString& NewCustomFolderName, int32 InventoryCompType);
	void ClientAddFloatingText(const struct FVector_NetQuantize& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
	void ClientAddFloatingDamageText(const struct FVector_NetQuantize& AtLocation, int32 DamageAmount, int32 FromTeamID);
	void ClientAddCustomActorTrackListEntries_Players(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientAddCustomActorTrackListEntries_Creatures_ForcePOIVisible(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientAddCustomActorTrackListEntries_Creatures(const TArray<struct FCustomTrackedActorInfo>& InfoList, bool IsInfoFresh);
	void ClientAddActorItemToFolder(class UPrimalInventoryComponent* ForInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification, const class FString& ToFolder);
	void ClientAddActorItem(class UPrimalInventoryComponent* ForInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification);
	void Client_UpdateRallyPointData(bool DestroyRallyPoint, const struct FTeamPingData& RallyPointData);
	void Client_RecieveBlockedUserIdsFromServer(const TArray<uint32>& BlockedUserIds);
	void Client_ReceivePingResponse(const struct FReplicatePingData& ResponseData, class AShooterCharacter* RespondingPlayer);
	void Client_ReceivePing(const struct FReplicatePingData& ReceivedPingData);
	void Client_ReceiveLastDeathTrackingActorLoc(int32 Index, const struct FVector& Loc);
	void Client_ReceiveBuffFromDayCycle(class UClass* GiveBuffClass, class ADayCycleManager* FromDayCycle);
	void Client_AddTeamPing(const struct FTeamPingData& WithPingData);
	void CheckRequestSpectator(const class FString& InSpectatorPass);
	void CheckForPlayerInventory();
	void CheckforOrbiting();
	void CheckCheatsPassword(const class FString& Pass);
	void CheckCanEnableCheats();
	void Cheat(const class FString& Msg);
	void ChangeServerRequestCustomTrackedActorListInterval_WithUI(float AdjustedTime);
	void ChangeServerRequestCustomTrackedActorListInterval_WithoutUI(float AdjustedTime);
	void CCC();
	void CanTeamPing(bool ReturnValue);
	void CanPingRallyPoint(bool ReturnValue);
	void CanPingPlayer(class AShooterCharacter* ForPlayer, bool ReturnValue);
	void CanDoPlayerCharacterInput(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry, bool ReturnValue);
	void CanDismissPOI(const struct FPointOfInterestData& DataPOI, bool ReturnValue);
	void CallServerRestartPlayer();
	void BPSetFCustomTrackedPlayerInfoMembersByPlayerRef(class AShooterCharacter* HandledPlayer, bool Isfavorited, bool IsATeammateOnMap, bool bIsTrackedWaypoint, bool bIsValidForCurrentFilter, const struct FCustomTrackedActorInfo& ReturnValue);
	void BPServerRequestUpdateTrackedWaypointsOnly();
	void BPServerRequestUpdateTrackedWaypointsAndMapPlayers();
	void BPServerRequestRespawnAtPoint(int32 SpawnPointID, int32 SpawnRegionIndex);
	void BPServerRequestCustomTrackedActorList(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, bool Handled, int32 NewScrollbarIndex);
	void BPServerRemovePawnItem(const struct FItemNetID& ItemID, bool bSecondryAction);
	void BPServerHandleDataSetRPC(const TArray<struct FDataSet>& DataSets);
	void BPServerCycleSpectator(bool bNext, class AActor* ReturnValue);
	void BPSearchForPOIs(bool ReturnValue);
	void BPReceivedPlayer(class UPlayer* InPlayer);
	void BPPreventTurnInput(bool bIsSpectatorTurn, bool ReturnValue);
	void BPPreventChangeCamera(bool ReturnValue);
	void BPOnSpawnPlayerCameraManager();
	void BPOnRecievedUpdatedCachedTeamTameList(int32 CustomTameSelectionType, int32 DinoGroup, const class FString& CustomTameSearchText, bool IsInfoFresh, int32 DesiredIndexOfWidgetThatShouldHaveItsCreatureReturned, bool Handled, int32 ScrollbarIndex);
	void BPGetExtraWaypointsSOTF(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, const TArray<struct FPointOfInterestData_ForCompanion>& IndicatorsIn, const TArray<struct FPointOfInterestData_ForCompanion>& IndicatorsOut);
	void BPDisableSpectator();
	void BPClientUnlockExplorerNote(int32 ExplorerNoteIndex, bool ForceShowExplorerNoteUI);
	void BPClientHandleDataSetRPC(const TArray<struct FDataSet>& DataSets);
	void BPCheckClientPossession(bool ReturnValue);
	void BPCheckCanDinoSpawnFromLocation(class UClass* DinoClass, const struct FVector& CheckLocation, const struct FVector& ReturnValue);
	void BPApplyFoliageHarvestEffectOnHitAndCollect(const struct FVector& FoliageOrigin_ImpactPoint, const struct FVector& TraceEndpoint, const struct FVector& InteractDir);
	void BPActivatedMultiUseSelection();
	void BPAcknowledgePossession(class APawn* P);
	void BlueprintGiveLevels(const TArray<int32>& Levels);
	void BlueprintGiveItem(TSoftClassPtr<class UPrimalItem> Item, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint, bool UseExactQuality, bool bGiveEngram);
	void AutoCycle(float Duration);
	void AttemptTransferRedownload();
	void AsyncLoadInventory();
	void AllowTribeGroupPermission(enum class ETribeGroupPermission TribeGroupPermission, class UObject* OnObject, bool ReturnValue);
	void AllowedToSpectateAllTeams(bool ReturnValue);
	void AdminCheat(const class FString& Msg);
	void AddFloatingDamageText(const struct FVector& AtLocation, float DamageAmount, class AActor* DamagedActor, class AActor* DamageCauser, class AShooterPlayerController* EventInstigator, bool ReturnValue);
	void AddCustomActorTrackListEntries_Combined(const TArray<struct FTrackedActorPlusInfoStruct>& InfoList, bool IsInfoFresh, bool IsPlayer, bool ForcePOIVisible, const TArray<struct FCustomTrackedActorInfo>& ReturnValue);
};

// 0x30 (0xB8 - 0x88)
// Class ShooterGame.ShooterCheatManager
class UShooterCheatManager : public UCheatManager
{
public:
	TArray<TSoftClassPtr<class UCheatManagerExtension>> CheatManagerExtentions;                            // 0x88(0x10)(ZeroConstructor)
	uint8                                        Pad_402F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsRCONCheatManager;                               // 0xA0(0x1)(None)
	uint8                                        Pad_4030[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterCheatManager* GetDefaultObj();

	void WhatIsMyTarget();
	void VisualizeWorldGeo();
	void VisualizeWorld();
	void VisualizeClass(const class FString& ClassIn, int32 MaxTotal);
	void VerifyTransferInventory();
	void UnlockEngram(const class FString& ItemClassName);
	void UnlockEmote(const class FString& EmoteName);
	void UnlockAllExplorerNotes();
	void UnlockAchievement(const class FString& AchievementID);
	void UnbanPlayer(const class FString& PlayerSteamName);
	void TTC(const class FString& DinoID);
	void TTAL(const class FString& ActorName, int32 Index);
	void TribeStructureAudit(int32 TribeTeamID);
	void TribeMessage(int32 TribeTeamID, const class FString& Message);
	void TribeDinoAudit(int32 TribeTeamID);
	void TransferImprints(const class FString& OldPlayerUniqueNetId, int32 NewPlayerId, const class FString& NewImprinterName);
	void TPName(const class FString& PlayerName);
	void TPCoords(float Lat, float Lon, float Z);
	void TP(const class FString& LocationName);
	void ToggleVolumetricDispatcherDebug();
	void ToggleVolumetricDispatcher();
	void ToggleTracker();
	void ToggleNavSystem();
	void ToggleLowGravSpin();
	void ToggleLocation();
	void ToggleHud();
	void ToggleGun();
	void ToggleFreezeStatusValues();
	void ToggleFoliageInteraction();
	void ToggleFluidInteraction();
	void ToggleDamageNumbers();
	void ToggleDamageLogging();
	void ToggleClawStepping();
	void TOD(const class FString& TimeString);
	void TimeOfDay(const class FString& TimeString);
	void TestSteamRefreshItems();
	void TeleportToPlayerName(const class FString& PlayerName);
	void TeleportToPlayer(int64 PlayerID);
	void TeleportToNearestDino(float X, float Y, float Z, float ScanRange, bool bIgnoreTames, int32 NearestIncrement);
	void TeleportToCreature(const class FString& DinoID);
	void TeleportToActorLocation(const class FString& ActorName);
	void TeleportToActiveHorde(int32 EventIndex);
	void TeleportPlayerNameToMe(const class FString& PlayerName);
	void TeleportPlayerIDToMe(int64 PlayerID);
	void TeleportCreatureToMe(const class FString& DinoID);
	void TCTM(const class FString& DinoID);
	void TameAOE(float Radius, float Affinity, float Effectiveness);
	void TakeTribe(int32 TribeTeamID);
	void TakeAllStructure();
	void TakeAllDino();
	void TacoBell();
	void SummonTamed(const class FString& ClassName);
	void Suicide();
	void StopLoggingSavedMoves();
	void StartSaveBackup();
	void StartNearestHorde(class FName HordeType, int32 DifficultyLevel, bool Teleport);
	void StartMissionWithMetaData(class FName MissionTag);
	void StartMission(class FName MissionTag);
	void StartLoggingSavedMoves();
	void SpoilItem();
	void SPIG(float X, float Y, float Z, float Yaw, float Pitch);
	void SPI(float X, float Y, float Z, float Yaw, float Pitch);
	void SpectateMyTarget();
	void SpawnSetupDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int32 DinoLevel, const class FString& DinoStats, float SpawnDistance, float YOffset, float ZOffset);
	void SpawnExactDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int32 BaseLevel, int32 ExtraLevels, const class FString& BaseStats, const class FString& AddedStats, const class FString& DinoName, int8 Cloned, int8 Neutered, const class FString& TamedOn, const class FString& UploadedFrom, const class FString& ImprinterName, const class FString& ImprinterUniqueNetId, float ImprintQuality, const class FString& Colors, int64 DinoID, int64 Exp, float SpawnDistance, float YOffset, float ZOffset);
	void SpawnEgg();
	void SpawnDino(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset, int32 DinoLevel);
	void SpawnActorTamed(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset);
	void SpawnActorSpreadTamed(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset, int32 NumberActors, float SpreadAmount);
	void SpawnActorSpread(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset, int32 NumberActors, float SpreadAmount);
	void SpawnActorBaby(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset);
	void SpawnActor(const class FString& BlueprintPath, float SpawnDistance, float SpawnYOffset, float ZOffset);
	void ShowTutorial(int32 TutorialIndex, bool bForceDisplay);
	void ShowMessageOfTheDay();
	void ShowInGameMenu();
	void ShowHibernatingDino(const class FString& DinoString);
	void ShowDebugPingLifetime(bool bEnable);
	void ShowCheatMenu();
	void ShowAvailableMissionTags();
	void ShowActiveMissions();
	void SetVideoReplayEnabled(bool ShouldEnabled);
	void SetUnstasisRadius(float Value);
	void SetTimeOfDay(const class FString& TimeString);
	void SetTargetPlayerColorVal(int32 ColorValIndex, float ColorVal);
	void SetTargetPlayerBodyVal(int32 BodyValIndex, float BodyVal);
	void SetTargetDinoColor(int32 ColorRegion, int32 ColorID);
	void SetTamingEffectivenessModifier(float TameEff);
	void SetStatOnTarget(class FName StatName, float Value);
	void SetSleepingAOE(float Radius, bool bIsSleeping);
	void SetShowAllPlayers(bool bEnable);
	void SetPlayerPos(float X, float Y, float Z);
	void SetPlayerLevel(int64 PlayerID, int16 Level);
	void SetPerfCheck(int32 PerfCheckLocation);
	void SetNumReplaySecondsToStore(int32 NumSecondsToStore);
	void SetNetworkTime(float NewTime);
	void SetMyTargetSleeping(bool bIsSleeping);
	void SetMessageOfTheDay(const class FString& Message, const class FString& SetterID);
	void SetMaterialParamaterCollectionByNameAndFloatValue(class FName ParamaterName, float ParamaterValue);
	void SetInstantHarvest(bool bEnable);
	void SetInfiniteStats(bool bInfinite);
	void SetImprintQuality(float ImprintQuality);
	void SetImprintedPlayer(const class FString& NewImprinterName, const class FString& NewImprinterUniqueNetId);
	void SetHeadHairstyle(int32 HairStyleIndex);
	void SetHeadHairPercent(float ThePercent);
	void SetGraphicsQuality(int32 Val);
	void SetGodMode(bool bEnable);
	void SetGlobalPause(bool bIsPaused);
	void SetFacialHairstyle(int32 HairStyleIndex);
	void SetFacialHairPercent(float ThePercent);
	void SetDifficultyValue(float NewTime);
	void SetDebugMeleeAttacks(bool bDebugMelee, float DrawDuration);
	void SetDayCycleSpeed(float Speed);
	void SetDay(int32 Day);
	void SetChatLogMaxAgeInDays(int32 NumDays);
	void SetCameraProfile(class FName CameraProfileName);
	void SetBabyAgeAOE(float AgeValue, float Radius);
	void SetBabyAge(float AgeValue);
	void SetAllAvailableMissionsComplete();
	void SetActiveMissionDebugFlags(int32 DebugFlags);
	void ServerChatToPlayer(const class FString& PlayerName, const class FString& MessageText);
	void ServerChatTo(const class FString& SteamID, const class FString& MessageText);
	void ServerChat(const class FString& MessageText);
	void SendDataDogMetric(const class FString& Message);
	void SDFRide(class FName DinoBlueprintPath, int32 DinoLevel, bool bLoadIfUnloaded);
	void SDFBaby(class FName DinoBlueprintPath, int32 DinoLevel, int32 BabyCount, bool bLoadIfUnloaded);
	void SDF(class FName DinoBlueprintPath, bool bIsTamed, int32 DinoLevel, bool bLoadIfUnloaded);
	void ScriptCommand(const class FString& CommandString);
	void Scatter();
	void SaveWorldDisableTransfer();
	void SaveWorld();
	void SAP();
	void RunDinoTest(class FName DinoBlueprintPath, int32 DinoLevel, float AbilityDelay);
	void RespawnPlayer(bool KeepGender);
	void ResetLiveTuningOverloads();
	void ResetLeaderboards();
	void RequestUpdateActiveMissionTags();
	void ReportSpawnManagers();
	void ReportLeastSpawnManagers();
	void RepairArea(float Radius);
	void RenameTribeID(int32 TribeID, const class FString& NewName);
	void RenameTribe(const class FString& TribeName, const class FString& NewName);
	void RenamePlayerId(int32 PlayerID, const class FString& NewName);
	void RenamePlayer(const class FString& PlayerName, const class FString& NewName);
	void RemoveWorldBuff(const class FString& WorldBuffIdentifier);
	void RemoveTribeAdmin();
	void RemoveDinoTest(class FName DinoBlueprintPath);
	void RemoveAllWorldBuffs();
	void RegrowFoliage(float Radius);
	void RefillStats();
	void ReassertColorization();
	void RainMonkeys(int32 NumberActors, float SpreadAmount, float ZOffset);
	void RainDinos(int32 NumberActors, float SpreadAmount, float ZOffset);
	void RainDanger(int32 NumberActors, float SpreadAmount, float ZOffset);
	void RainCritters(int32 NumberActors, float SpreadAmount, float ZOffset);
	void Psc(const class FString& Command);
	void PrintDinoStats();
	void PrintActorLocation(const class FString& ActorName);
	void PlayerCommand(const class FString& TheCommand);
	void Pgosweep();
	void PerformGCAndCleanupActors();
	void OpenMap(const class FString& MapName);
	void OnToggleInGameMenu();
	void OneHPTarget();
	void OneHPAOE(class FName Category, float Radius, int32 TribeID);
	void OneHP();
	void NextPerfCheck();
	void MoveTargetTo(float X, float Y, float Z);
	void Mission(class FName CheatName, float Value);
	void MaxAscend(int32 PlayerID);
	void MakeTribeFounder();
	void MakeTribeAdmin();
	void LvlUp(int64 PlayerID, int16 Level);
	void LogStackTrace();
	void LMA();
	void ListPlayers();
	void ListMyTargetBuffs();
	void ListMyBuffs();
	void ListDinos();
	void ListAllPlayerBuffs();
	void ListAllItems();
	void ListActiveHordeEvents();
	void LevelUpTarget(class FName StatName, int32 NumLevels);
	void LevelUpAOE(class FName StatName, float Radius, int32 NumLevels);
	void LevelUp(class FName StatName, int32 NumLevels);
	void LessThan(int32 TribeTeamID, int32 Connections, bool IncludeContainers);
	void LeaveMission();
	void LeaveMeAlone();
	void KillSplitscreenPlayer();
	void KillPlayer(int64 PlayerID);
	void KillAOETribe(class FName Category, float Radius, int32 TribeID, bool DestroyOnly);
	void KillAOE(class FName Category, float Radius);
	void Kill();
	void KickPlayer(const class FString& PlayerSteamName);
	void JoinTribe(int64 PlayerID, int32 TribeTeamID);
	void IsUndermesh(float DebugDrawSeconds);
	void InteractWithFluid(float Radius, float Speed, bool Splash, bool Ripple);
	void InfiniteWeight();
	void InfiniteStats();
	void InfiniteGod(bool bSet);
	void HurtMyTarget(int32 HowMuch);
	void HurtMyAOE(int32 HowMuch, float Radius);
	void HiWarp(const class FString& ClassName, int32 Index);
	void HideTutorial(int32 TutorialIndex);
	void HibernationReport(const class FString& ClassName);
	void HatchEgg();
	void GTIPL(int32 TribeID);
	void GTIDPL(int32 TribeID);
	void GoToFirstMutagenDrop();
	void GMSummon(const class FString& ClassName, int32 Level);
	void GMComp(int32 Level);
	void GMBuff();
	void GlobalObjectCount();
	void GiveWeaponSet(class FName Tier, class FName Quality);
	void GiveToMeAOE(float Radius);
	void GiveToMe();
	void GiveTekEngramsTo(int64 PlayerID, class FName BlueprintPath);
	void GiveResources();
	void GiveMaxLevel(int32 PlayerID);
	void GiveItemToPlayer(int32 PlayerID, const class FString& BlueprintPath, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint);
	void GiveItemSkins(const class FString& EquipmentType);
	void GiveItemSet(class FName Tier);
	void GiveItemNumToPlayer(int32 PlayerID, int32 MasterIndexNum, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint);
	void GiveItemNum(int32 MasterIndexNum, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint);
	void GiveItem(const class FString& BlueprintPath, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint);
	void GiveInfiniteStatsToTarget();
	void GiveExpToTarget(float HowMuch, bool FromTribeShare, bool bPreventSharingWithTribe);
	void GiveExpToPlayer(int64 PlayerID, float HowMuch, bool FromTribeShare, bool bPreventSharingWithTribe);
	void GiveExplorerNote(int32 NoteIndex);
	void GiveEngramsTekOnly();
	void GiveEngrams();
	void GiveDinoSet(class FName Tier, int32 NumDinos);
	void GiveCreativeModeToTarget();
	void GiveCreativeModeToPlayer(int64 PlayerID);
	void GiveCreativeMode();
	void GiveBossItems();
	void GiveBossEngrams(int32 PlayerID, class FName BossName, int8 Difficulty);
	void GiveArmorSet(class FName Tier, class FName Quality);
	void GiveAllStructure();
	void GiveAllExplorerNotes();
	void GFID(class FName BlueprintPath);
	void GFI(class FName BlueprintPath, int32 QuantityOverride, float QualityOverride, bool bForceBlueprint);
	void GetTribeIdPlayerList(int32 TribeID);
	void GetTribe(int32 TribeID);
	void GetSteamIDForPlayerID(int32 PlayerID);
	void GetSpoiledEgg(int32 NumMutationsToAdd);
	void GetPlayerIDForSteamID(int32 SteamID);
	void GetNearestAlliedPlayerOrDino();
	void GetGameLog();
	void GetEgg(int32 NumMutationsToAdd);
	void GetChat();
	void GetAllTamesNumber();
	void GetAllStructuresNumber();
	void GetAllNumbers();
	void GetAllMyTarget(const class FString& VariableName);
	void GetAllItemsNumber();
	void GCMT();
	void GCMP(int64 PlayerID);
	void GCM();
	void GameCommand(const class FString& TheCommand);
	void FSM(bool PreventFinishTheMatch, bool UseQuetzalBus);
	void ForceUpdateDynamicConfig();
	void ForceTribes(const class FString& PlayerName1, const class FString& PlayerName2, const class FString& NewTribeName);
	void ForceTameAOE(float Radius);
	void ForceTame();
	void ForceStartMission(class FName MissionTag);
	void ForceStartMatch(bool PreventFinishTheMatch, bool UseQuetzalBus);
	void ForceReturnIsXboxOneBuildOnPC(bool ReturnValue);
	void ForceReturnIsPS4BuildOnPC(bool ReturnValue);
	void ForcePoop();
	void ForcePlayerToJoinTribeId(int64 PlayerID, int32 TribeTeamID);
	void ForcePlayerToJoinTribe(int64 PlayerID, const class FString& TribeName);
	void ForcePlayerToJoinTargetTribe(int64 PlayerID);
	void ForceMutagenSpawn();
	void ForceJoinTribe();
	void ForceGiveBuff(class FName BuffBlueprintPath, bool bEnable);
	void ForceEnableMeshCheckingOnMe(bool bEnableChecking, bool bEnableTeleportingChecking);
	void ForceCompleteActiveMission(const class FString& MissionStateSimValues);
	void ForceCheckInMesh();
	void FindMutagenDrops();
	void FEMCOM(bool bEnableKillChecking, bool bEnableTeleportingChecking);
	void EnemyInVisible(bool Invisible);
	void EnableSpectator();
	void EnableCheats(const class FString& Pass);
	void EnableAllMating();
	void DupeLastItem();
	void DumpFallbackSeeds();
	void DumpDinoStats();
	void DumpConfig();
	void DumpAssetProperties(const class FString& Asset);
	void DrawDebugBoxForVolumes(float Duration, int32 VolumeClassIndex, bool bDebugAllVolumeClasses, bool bDrawSolidBox, float LineThickness);
	void DrainWater(float HowMuch);
	void DrainFood(float HowMuch);
	void DragMyTarget();
	void DoTestingThing();
	void DoTame();
	void DoRestartLevel();
	void DoHang();
	void DoExit();
	void DoDamagePct(float PercentDamage, float SpeedOfImpact, float Impulse);
	void DisallowPlayerToJoinNoCheck(const class FString& SteamID);
	void DisableSpectator();
	void DisableAllMating();
	void DinoSet(class FName CheatName, float Value);
	void Dino(class FName CheatName);
	void DetachChar();
	void DestroyWildDinos();
	void DestroyWildDinoClasses(const class FString& ClassName, bool bExactMatch);
	void DestroyTribeStructuresLessThan(int32 TribeTeamID, int32 Connections, bool IncludeContainers, bool IncludeLargeGates);
	void DestroyTribeStructures();
	void DestroyTribePlayers();
	void DestroyTribeIdStructures(int32 TribeTeamID);
	void DestroyTribeIdPlayers(int32 TribeTeamID);
	void DestroyTribeIdDinos(int32 TribeTeamID);
	void DestroyTribeId(int32 TribeTeamID);
	void DestroyTribeDinos();
	void DestroyStructures();
	void DestroyMyTarget4();
	void DestroyMyTarget3();
	void DestroyMyTarget2();
	void DestroyMyTarget();
	void DestroyMyPawn();
	void DestroyFoliage(float Radius, bool PutFoliageResourcesInInventory);
	void DestroyAOE(class FName Category, float Radius);
	void DestroyAllTames();
	void DestroyAllEnemies();
	void DestroyActors(const class FString& ClassName, bool bExactMatch);
	void DefeatBoss(int32 PlayerID, class FName BossName, int8 Difficulty);
	void DefeatAllBosses(int32 PlayerID);
	void DeepPockets();
	void DebugToggleHLNAMonologue();
	void DebugPathsForTarget();
	void DebugMyTarget();
	void DebugMyDinoTarget();
	void DebugCompanionReactions();
	void DebugCompanionAsyncLoadedFiles();
	void DebugCheckDinoPawnsOctree();
	void DebugAllowVRMissionTeleport();
	void DeactivateMission();
	void DCMSet(class FName Cheat, float Val);
	void CryoMyTarget();
	void CryoAOE(float Radius);
	void Cryo(const class FString& DinoID);
	void CompleteMission();
	void CloneDino();
	void ClearTutorials();
	void ClearPlayerInventory(int32 PlayerID, bool bClearInventory, bool bClearSlotItems, bool bClearEquippedItems);
	void ClearMyBuffs();
	void ClearMessageOfTheDay();
	void ClearDinoTest();
	void ClearCryoSickness();
	void CheatAction(const class FString& ActionName);
	void ChatLogAppend(const class FString& MessageText);
	void CamZoomOut();
	void CamZoomIn();
	void Broadcast(const class FString& MessageText);
	void BPCheckDenySpawningInThisMap(const class FString& PackageName, bool ReturnValue);
	void BanPlayer(const class FString& PlayerSteamName, const class FString& Duration);
	void ArkChangeUIPlatform(const class FString& Platform);
	void AreAllSublevelsForDataLayerLoaded(const class FString& DataLayerName);
	void AllowPlayerToJoinNoCheck(const class FString& SteamID);
	void AddWorldBuff(const class FString& WorldBuffIdentifier);
	void AddTokens(int32 Quantity);
	void AddMutations(int32 StatType, int32 HowMany);
	void AddItemToAllClustersInventory(const class FString& UserId, int32 MasterIndexNum);
	void AddHexagons(float HowMuch);
	void AddExperienceToTarget(float HowMuch, bool FromTribeShare, bool bPreventSharingWithTribe);
	void AddExperience(float HowMuch, bool FromTribeShare, bool bPreventSharingWithTribe);
	void AddEquipmentDurability(float Durability);
	void AddDinoTest(class FName DinoBlueprintPath, int32 DinoLevel, float AbilityDelay);
	void AddChibiExpToPlayer(int64 PlayerID, float HowMuch);
	void AddChibiExp(float HowMuch);
	void AddBuffPreventTagToSelf(class FName TagName);
};

// 0x100 (0x168 - 0x68)
// Class ShooterGame.ShooterDamageType
class UShooterDamageType : public UPrimalDamageType
{
public:
	class UClass*                                HitTargetableActorImpactEffects;                   // 0x68(0x8)(ZeroConstructor)
	float                                        DamageTorpidityIncreaseMultiplier;                 // 0x70(0x4)(None)
	uint8                                        Pad_404E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCanvasIcon                           KillIcon;                                          // 0x78(0x18)(ZeroConstructor)
	class UForceFeedbackEffect*                  HitForceFeedback;                                  // 0x90(0x8)(ZeroConstructor)
	class UForceFeedbackEffect*                  KilledForceFeedback;                               // 0x98(0x8)(ZeroConstructor)
	TArray<struct FDamagePrimalCharacterStatusValueModifier> DamageCharacterStatusValueModifiers;               // 0xA0(0x10)(ZeroConstructor)
	uint8                                        bIsMeleeDamage : 1;                                // Mask: 0x1, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bDontActuallyDealDamage : 1;                       // Mask: 0x2, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bPreventMeleeHarvesting : 1;                       // Mask: 0x4, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bHarvestDamageWithNoResourceGrab : 1;              // Mask: 0x8, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bPreventMomentumWhenFalling : 1;                   // Mask: 0x10, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bOnlyGiveBuffToPlayerOrTamed : 1;                  // Mask: 0x20, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bDamageProjectiles : 1;                            // Mask: 0x40, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bOnlyGiveBuffToPlayer : 1;                         // Mask: 0x80, PropSize: 0x10xB0(0x1)(None)
	uint8                                        bOnlyGiveBuffToDino : 1;                           // Mask: 0x1, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bHasRiderIgnoreDamage : 1;                         // Mask: 0x2, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bAllowShieldBlockAllPointDamage : 1;               // Mask: 0x4, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bPreventDefaultTargetHurtEffect : 1;               // Mask: 0x8, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bDamageInstigator : 1;                             // Mask: 0x10, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bApplyMomentumToBigPawns : 1;                      // Mask: 0x20, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bAutoDragDeadDino : 1;                             // Mask: 0x40, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bImpulseResetsDinoVelocity : 1;                    // Mask: 0x80, PropSize: 0x10xB1(0x1)(None)
	uint8                                        bPreventHitPawnEffectsFromLocalInstigator : 1;     // Mask: 0x1, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bRiderIgnoreDamage : 1;                            // Mask: 0x2, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bNoFriendlyDamage : 1;                             // Mask: 0x4, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bIsTurretDamage : 1;                               // Mask: 0x8, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bForceGeneralArmorUsage : 1;                       // Mask: 0x10, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bDamageImpulseOnly : 1;                            // Mask: 0x20, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bIgnoreDinoFlyers : 1;                             // Mask: 0x40, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bUseBPAdjustDamage : 1;                            // Mask: 0x80, PropSize: 0x10xB2(0x1)(None)
	uint8                                        bUseBPAdjustAggro : 1;                             // Mask: 0x1, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bUseBPAdjustHarvestingDamage : 1;                  // Mask: 0x2, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bDisplayHitMarker : 1;                             // Mask: 0x4, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bHitMarkerPlaySound : 1;                           // Mask: 0x8, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bDinoDamageCauserAllowSameTeam : 1;                // Mask: 0x10, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bOnlyApplyDamageTorpidityToPlayersAndTames : 1;    // Mask: 0x20, PropSize: 0x10xB3(0x1)(None)
	uint8                                        bDinoOnDinoDamageCauserAllowSameTeam : 1;          // Mask: 0x40, PropSize: 0x10xB3(0x1)(None)
	uint8                                        BitPad_3C3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        DamageInstigatorPercentage;                        // 0xB4(0x4)(None)
	uint8                                        bForceRespawnCooldown : 1;                         // Mask: 0x1, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bAllowDamageCorpses : 1;                           // Mask: 0x2, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bForceAllowFriendlyFire : 1;                       // Mask: 0x4, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bForceAllowPvEDamage : 1;                          // Mask: 0x8, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bDestroyOnKill : 1;                                // Mask: 0x10, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bPreventDinoKillVictimItemCollection : 1;          // Mask: 0x20, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bIsInstantDamage : 1;                              // Mask: 0x40, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bPreventHurtAnim : 1;                              // Mask: 0x80, PropSize: 0x10xB8(0x1)(None)
	uint8                                        bPreventHurtSoundAndCameraShake : 1;               // Mask: 0x1, PropSize: 0x10xB9(0x1)(None)
	uint8                                        BitPad_3C4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_4051[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UseSpecialDamageInterval;                          // 0xBC(0x4)(None)
	float                                        WildDinoForcedAggroDuration;                       // 0xC0(0x4)(None)
	uint8                                        Pad_4052[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class APrimalBuff>             BuffToGiveVictimCharacter;                         // 0xC8(0x30)(ZeroConstructor)
	float                                        MassScaleDamageImpulseExponent;                    // 0xF8(0x4)(None)
	uint8                                        Pad_4053[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class AActor>>          DamageIgnoreActorClasses;                          // 0x100(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class AActor>>          DamageOnlyActorClasses;                            // 0x110(0x10)(ZeroConstructor)
	TArray<struct FOverrideDamageHarvestingEntry> OverrideDamageHarvestEntries;                      // 0x120(0x10)(ZeroConstructor)
	class UClass*                                InvalidHarvestOverrideDamageType;                  // 0x130(0x8)(ZeroConstructor)
	TArray<struct FTargetClassDamageScaler>      TargetClassDamageScalers;                          // 0x138(0x10)(ZeroConstructor)
	TArray<class UClass*>                        OverrideDamageForResourceHarvestingItems;          // 0x148(0x10)(ZeroConstructor)
	TArray<class UClass*>                        OverrideDamageForResourceHarvestingDamageTypes;    // 0x158(0x10)(None)

	static class UClass* StaticClass();
	static class UShooterDamageType* GetDefaultObj();

	void OverrideBuffToGiveVictimCharacter(class APrimalCharacter* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, class UClass* ReturnValue);
	void BPAdjustHarvestingDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, float ReturnValue);
	void BPAdjustDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, float ReturnValue);
	void BPAdjustAggro(class APrimalDinoAIController* DamagedCharacterController, class APrimalCharacter* DamagedCharacter, float DesiredAggroValue, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, float ReturnValue);
};

// 0x30 (0x1058 - 0x1028)
// Class ShooterGame.ShooterEngine
class UShooterEngine : public UGameEngine
{
public:
	uint8                                        Pad_4055[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalRichTextBlock*                  StartupScreenTextBlock;                            // 0x1048(0x8)(ZeroConstructor)
	uint8                                        Pad_4056[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterEngine* GetDefaultObj();

};

// 0x50 (0x80 - 0x30)
// Class ShooterGame.MusicDataAsset
class UMusicDataAsset : public UDataAsset
{
public:
	TMap<class FName, TSoftObjectPtr<class USoundWave>> NameToSoundWaveMap;                                // 0x30(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UMusicDataAsset* GetDefaultObj();

};

// 0x88 (0xB0 - 0x28)
// Class ShooterGame.MusicPlayer
class UMusicPlayer : public UObject
{
public:
	TMap<class FName, struct FAudioComponentWrapper> PlayingMusicMap;                                   // 0x28(0x50)(ZeroConstructor)
	class UMusicDataAsset*                       MusicDataAsset;                                    // 0x78(0x8)(None)
	uint8                                        Pad_4057[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UMusicPlayer* GetDefaultObj();

};

// 0x688 (0x848 - 0x1C0)
// Class ShooterGame.ShooterGameInstance
class UShooterGameInstance : public UPrimalGameInstance
{
public:
	uint8                                        Pad_4066[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAsyncAssetLoaded;                                // 0x218(0x10)(ZeroConstructor)
	uint8                                        Pad_4067[0xF0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UOpenColorIODisplayExtensionWrapper*   OpenColorIOObject;                                 // 0x318(0x8)(ZeroConstructor)
	TArray<struct FAssetPathObjectPair>          AsyncLoadededAssetReferences;                      // 0x320(0x10)(ZeroConstructor)
	class UWorldModifiersContainer*              WorldModifiersContainer;                           // 0x330(0x8)(ZeroConstructor)
	uint8                                        Pad_4068[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMusicPlayer*                          MusicPlayer;                                       // 0x388(0x8)(ZeroConstructor)
	class FString                                WelcomeScreenMap;                                  // 0x390(0x10)(None)
	class FString                                MainMenuMap;                                       // 0x3A0(0x10)(None)
	int32                                        AutoPgoSweepInterval;                              // 0x3B0(0x4)(None)
	uint8                                        Pad_4069[0x204];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       ObjectsPendingTimeShift;                           // 0x5B8(0x10)(ZeroConstructor)
	uint8                                        Pad_406A[0x1E0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ActiveEvent;                                       // 0x7A8(0x8)(None)
	class FString                                WorldModifierConfigOverride;                       // 0x7B0(0x10)(None)
	uint8                                        Pad_406B[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_3C5 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasPlayedMainMenuIntroOnce : 1;                   // Mask: 0x2, PropSize: 0x10x810(0x1)(None)
	uint8                                        Pad_406C[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGameInstance* GetDefaultObj();

	void LoadTheGameMedia();
	void EnableOpenColorIOObject(bool bEnable);
	void DisplayGlobalMainMenuNotification();
	void CanUseUserGeneratedContent(class UUserWidget* OurWidget, bool ReturnValue);
	void AsyncUnloadAssetFromPath(const class FString& AssetPathToUnload, bool bForceGarbageCollection);
	void AsyncUnloadAssetFromObject(class UObject* AssetObjectToUnload, bool bForceGarbageCollection);
	void AsyncLoadAssetFromPath(const class FString& AssetPath);
};

// 0x398 (0x870 - 0x4D8)
// Class ShooterGame.ShooterGameSession
class AShooterGameSession : public AGameSession
{
public:
	uint8                                        Pad_406F[0x398];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterGameSession* GetDefaultObj();

};

// 0x6A0 (0x7E8 - 0x148)
// Class ShooterGame.ShooterGameUserSettings
class UShooterGameUserSettings : public UGameUserSettings
{
public:
	int32                                        AdvancedGraphicsQuality;                           // 0x148(0x4)(None)
	float                                        MasterAudioVolume;                                 // 0x14C(0x4)(None)
	float                                        MusicAudioVolume;                                  // 0x150(0x4)(None)
	float                                        SFXAudioVolume;                                    // 0x154(0x4)(None)
	float                                        VoiceAudioVolume;                                  // 0x158(0x4)(None)
	float                                        SoundUIAudioVolume;                                // 0x15C(0x4)(None)
	float                                        CharacterAudioVolume;                              // 0x160(0x4)(None)
	uint8                                        Pad_4074[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ConsoleCommandHistory;                             // 0x168(0x10)(None)
	float                                        StructureTooltipMaxSpeedMultiply;                  // 0x178(0x4)(None)
	float                                        UIScaling;                                         // 0x17C(0x4)(None)
	float                                        UIQuickbarScaling;                                 // 0x180(0x4)(None)
	float                                        CameraShakeScale;                                  // 0x184(0x4)(None)
	bool                                         bFirstPersonRiding;                                // 0x188(0x1)(None)
	bool                                         bThirdPersonPlayer;                                // 0x189(0x1)(None)
	bool                                         bShowStatusNotificationMessages;                   // 0x18A(0x1)(None)
	uint8                                        Pad_4075[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TrueSkyQuality;                                    // 0x18C(0x4)(None)
	float                                        FOVMultiplier;                                     // 0x190(0x4)(None)
	float                                        GroundClutterDensity;                              // 0x194(0x4)(None)
	bool                                         bFilmGrain;                                        // 0x198(0x1)(None)
	bool                                         bMotionBlur;                                       // 0x199(0x1)(None)
	bool                                         bUseGamepadSpeaker;                                // 0x19A(0x1)(None)
	bool                                         bUseDFAO;                                          // 0x19B(0x1)(None)
	bool                                         bUseSSAO;                                          // 0x19C(0x1)(None)
	bool                                         bShowChatBox;                                      // 0x19D(0x1)(None)
	bool                                         bCameraViewBob;                                    // 0x19E(0x1)(None)
	bool                                         bInvertLookY;                                      // 0x19F(0x1)(None)
	bool                                         bFloatingNames;                                    // 0x1A0(0x1)(None)
	bool                                         bChatBubbles;                                      // 0x1A1(0x1)(None)
	bool                                         bHideServerInfo;                                   // 0x1A2(0x1)(None)
	bool                                         bJoinNotifications;                                // 0x1A3(0x1)(None)
	bool                                         bDisableNameYourTamePopup;                         // 0x1A4(0x1)(None)
	bool                                         MinimalFloatingNameSetting;                        // 0x1A5(0x1)(None)
	bool                                         bCraftablesShowAllItems;                           // 0x1A6(0x1)(None)
	bool                                         bLocalInventoryItemsShowAllItems;                  // 0x1A7(0x1)(None)
	bool                                         bLocalInventoryCraftingShowAllItems;               // 0x1A8(0x1)(None)
	bool                                         bRemoteInventoryItemsShowAllItems;                 // 0x1A9(0x1)(None)
	bool                                         bRemoteInventoryCraftingShowAllItems;              // 0x1AA(0x1)(None)
	bool                                         bRemoteInventoryShowEngrams;                       // 0x1AB(0x1)(None)
	bool                                         bEnableLowLightEnhancement;                        // 0x1AC(0x1)(None)
	bool                                         bEnableFluidInteraction;                           // 0x1AD(0x1)(None)
	bool                                         bDisableHLOD;                                      // 0x1AE(0x1)(None)
	bool                                         bRequiresRestart;                                  // 0x1AF(0x1)(None)
	float                                        LookLeftRightSensitivity;                          // 0x1B0(0x4)(None)
	float                                        LookUpDownSensitivity;                             // 0x1B4(0x4)(None)
	float                                        TPVCameraHorizontalOffsetFactor;                   // 0x1B8(0x4)(None)
	int32                                        GraphicsQuality;                                   // 0x1BC(0x4)(None)
	int32                                        ActiveLingeringWorldTiles;                         // 0x1C0(0x4)(None)
	int32                                        ClientNetQuality;                                  // 0x1C4(0x4)(None)
	float                                        TheGammaCorrection;                                // 0x1C8(0x4)(None)
	int32                                        LastServerSearchType;                              // 0x1CC(0x4)(None)
	int32                                        LastServerSort;                                    // 0x1D0(0x4)(None)
	int32                                        LastPVESearchType;                                 // 0x1D4(0x4)(None)
	int32                                        LastDLCTypeSearchType;                             // 0x1D8(0x4)(None)
	bool                                         LastServerSortAsc;                                 // 0x1DC(0x1)(None)
	bool                                         LastAutoFavorite;                                  // 0x1DD(0x1)(None)
	bool                                         LastServerSearchHideFull;                          // 0x1DE(0x1)(None)
	bool                                         LastServerSearchProtected;                         // 0x1DF(0x1)(None)
	bool                                         LastPlatformSpecificServerSearch;                  // 0x1E0(0x1)(None)
	bool                                         HideItemTextOverlay;                               // 0x1E1(0x1)(None)
	bool                                         bForceShowItemNames;                               // 0x1E2(0x1)(None)
	bool                                         bDistanceFieldShadowing;                           // 0x1E3(0x1)(None)
	bool                                         bDisableShadows;                                   // 0x1E4(0x1)(None)
	uint8                                        Pad_4080[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LODScalar;                                         // 0x1E8(0x4)(None)
	bool                                         bToggleToTalk;                                     // 0x1EC(0x1)(None)
	bool                                         HighQualityMaterials;                              // 0x1ED(0x1)(None)
	bool                                         HighQualitySurfaces;                               // 0x1EE(0x1)(None)
	bool                                         bTemperatureF;                                     // 0x1EF(0x1)(None)
	bool                                         bDisableTorporEffect;                              // 0x1F0(0x1)(None)
	bool                                         bChatShowSteamName;                                // 0x1F1(0x1)(None)
	bool                                         bChatShowTribeName;                                // 0x1F2(0x1)(None)
	bool                                         bReverseTribeLogOrder;                             // 0x1F3(0x1)(None)
	int32                                        EmoteKeyBind1;                                     // 0x1F4(0x4)(None)
	int32                                        EmoteKeyBind2;                                     // 0x1F8(0x4)(None)
	bool                                         bNoBloodEffects;                                   // 0x1FC(0x1)(None)
	bool                                         bLowQualityVFX;                                    // 0x1FD(0x1)(None)
	bool                                         bSpectatorManualFloatingNames;                     // 0x1FE(0x1)(None)
	bool                                         bSuppressAdminIcon;                                // 0x1FF(0x1)(None)
	bool                                         bUseSimpleDistanceMovement;                        // 0x200(0x1)(None)
	bool                                         bHasSavedGame;                                     // 0x201(0x1)(None)
	bool                                         bDisableMeleeCameraSwingAnims;                     // 0x202(0x1)(None)
	bool                                         bPreventInventoryOpeningSounds;                    // 0x203(0x1)(None)
	bool                                         bPreventBiomeWalls;                                // 0x204(0x1)(None)
	bool                                         bPreventHitMarkers;                                // 0x205(0x1)(None)
	bool                                         bPreventCrosshair;                                 // 0x206(0x1)(None)
	bool                                         bPreventColorizedItemNames;                        // 0x207(0x1)(None)
	bool                                         bHighQualityLODs;                                  // 0x208(0x1)(None)
	bool                                         bExtraLevelStreamingDistance;                      // 0x209(0x1)(None)
	bool                                         bEnableColorGrading;                               // 0x20A(0x1)(None)
	uint8                                        Pad_4081[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VSyncMode;                                         // 0x20C(0x4)(None)
	float                                        DOFSettingInterpTime;                              // 0x210(0x4)(None)
	uint8                                        Pad_4082[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDepthOfFieldSetting>          DOFSettings;                                       // 0x218(0x10)(None)
	TArray<class FString>                        LastJoinedSessionPerCategory;                      // 0x228(0x10)(None)
	int32                                        LastSessionCategoryJoined;                         // 0x238(0x4)(None)
	int32                                        PendingLastSessionCategoryJoined;                  // 0x23C(0x4)(None)
	bool                                         bDisableMenuTransitions;                           // 0x240(0x1)(None)
	bool                                         bEnableInventoryItemTooltips;                      // 0x241(0x1)(None)
	bool                                         bRemoteInventoryShowCraftables;                    // 0x242(0x1)(None)
	bool                                         bNoTooltipDelay;                                   // 0x243(0x1)(None)
	int32                                        LocalItemSortType;                                 // 0x244(0x4)(None)
	int32                                        LocalCraftingSortType;                             // 0x248(0x4)(None)
	int32                                        RemoteItemSortType;                                // 0x24C(0x4)(None)
	int32                                        RemoteCraftingSortType;                            // 0x250(0x4)(None)
	uint8                                        Pad_4083[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VersionMetaTag;                                    // 0x258(0x4)(None)
	bool                                         ShowExplorerNoteSubtitles;                         // 0x25C(0x1)(None)
	bool                                         DisableMenuMusic;                                  // 0x25D(0x1)(None)
	bool                                         DisableDefaultCharacterItems;                      // 0x25E(0x1)(None)
	bool                                         DisableLoadScreenMusic;                            // 0x25F(0x1)(None)
	bool                                         bRequestDefaultCharacterItemsOnce;                 // 0x260(0x1)(None)
	bool                                         bHasSeenGen2Intro;                                 // 0x261(0x1)(None)
	uint8                                        Pad_4084[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<int32, bool>                            CinematicForNoteShouldReset;                       // 0x268(0x50)(None)
	bool                                         bHasSetupDifficultySP;                             // 0x2B8(0x1)(None)
	bool                                         bHasSetupVisualSettings;                           // 0x2B9(0x1)(None)
	uint8                                        Pad_4085[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, struct FDateTime>        AgreedToTerms;                                     // 0x2C0(0x50)(None)
	bool                                         bHasRunAutoSettings;                               // 0x310(0x1)(None)
	bool                                         bHideFloatingPlayerNames;                          // 0x311(0x1)(None)
	bool                                         bHideGamepadItemSelectionModifier;                 // 0x312(0x1)(None)
	bool                                         bToggleExtendedHUDInfo;                            // 0x313(0x1)(None)
	bool                                         PlayActionWheelClickSound;                         // 0x314(0x1)(None)
	bool                                         PlayHUDRolloverSound;                              // 0x315(0x1)(None)
	uint8                                        Pad_4086[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CompanionReactionVerbosity;                        // 0x318(0x4)(None)
	bool                                         EnableEnvironmentalReactions;                      // 0x31C(0x1)(None)
	bool                                         EnableRespawnReactions;                            // 0x31D(0x1)(None)
	bool                                         EnableDeathReactions;                              // 0x31E(0x1)(None)
	bool                                         EnableSayHelloReactions;                           // 0x31F(0x1)(None)
	bool                                         EnableEmoteReactions;                              // 0x320(0x1)(None)
	bool                                         EnableMovementSounds;                              // 0x321(0x1)(None)
	bool                                         DisableSubtitles;                                  // 0x322(0x1)(None)
	bool                                         bEnableASACamera;                                  // 0x323(0x1)(None)
	bool                                         ConsoleAccess;                                     // 0x324(0x1)(None)
	uint8                                        Pad_4087[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CompanionSubtitleVerbosityLevel;                   // 0x328(0x4)(None)
	bool                                         CompanionIsHiddenState;                            // 0x32C(0x1)(None)
	uint8                                        Pad_4088[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxAscensionLevel;                                 // 0x330(0x4)(None)
	bool                                         bHostSessionHasBeenOpened;                         // 0x334(0x1)(None)
	bool                                         bForceTPVCameraOffset;                             // 0x335(0x1)(None)
	bool                                         bDisableTPVCameraInterpolation;                    // 0x336(0x1)(None)
	bool                                         bEnableHDROutput;                                  // 0x337(0x1)(None)
	float                                        HDRDisplayMinLuminance;                            // 0x338(0x4)(None)
	float                                        HDRDisplayMidLuminance;                            // 0x33C(0x4)(None)
	float                                        HDRDisplayMaxLuminance;                            // 0x340(0x4)(None)
	float                                        FoliageInteractionDistance;                        // 0x344(0x4)(None)
	float                                        FoliageInteractionDistanceLimit;                   // 0x348(0x4)(None)
	float                                        FoliageInteractionQuantityLimit;                   // 0x34C(0x4)(None)
	float                                        HDRDisplayMinLuminanceMinValue;                    // 0x350(0x4)(None)
	float                                        HDRDisplayMidLuminanceMinValue;                    // 0x354(0x4)(None)
	float                                        HDRDisplayMaxLuminanceMinValue;                    // 0x358(0x4)(None)
	float                                        HDRDisplayMinLuminanceMaxValue;                    // 0x35C(0x4)(None)
	float                                        HDRDisplayMidLuminanceMaxValue;                    // 0x360(0x4)(None)
	float                                        HDRDisplayMaxLuminanceMaxValue;                    // 0x364(0x4)(None)
	float                                        GUI3DWidgetQuality;                                // 0x368(0x4)(None)
	bool                                         bFPVClimbingGear;                                  // 0x36C(0x1)(None)
	bool                                         bFPVGlidingGear;                                   // 0x36D(0x1)(None)
	bool                                         bHasInitializedScreenPercentage;                   // 0x36E(0x1)(None)
	uint8                                        Pad_4089[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, float>                     CameraZoomPerDinoNameTag;                          // 0x370(0x50)(None)
	TMap<class FName, float>                     CameraHeightPerDinoNameTag;                        // 0x3C0(0x50)(None)
	TMap<class FName, class FString>             PhotomodePresets_Camera;                           // 0x410(0x50)(None)
	TMap<class FName, class FString>             PhotomodePresets_Movement;                         // 0x460(0x50)(None)
	TMap<class FName, class FString>             PhotomodePresets_Splines;                          // 0x4B0(0x50)(None)
	TMap<class FName, class FString>             PhotomodePresets_PPs;                              // 0x500(0x50)(None)
	TMap<class FName, class FString>             PhotomodePresets_Targeting;                        // 0x550(0x50)(None)
	TMap<class FName, class FString>             PhotomodeLastUsedSettings;                         // 0x5A0(0x50)(None)
	TArray<struct FMinimapMark>                  SavedMinimapMarks;                                 // 0x5F0(0x10)(ZeroConstructor)
	int32                                        MaxLastDeathMark;                                  // 0x600(0x4)(None)
	bool                                         bSaveLastDeathMark;                                // 0x604(0x1)(None)
	bool                                         bShowPingsOnMap;                                   // 0x605(0x1)(None)
	bool                                         bShowDinosOnMap;                                   // 0x606(0x1)(None)
	bool                                         bShowWaypointsOnMap;                               // 0x607(0x1)(None)
	bool                                         bShowPlayersOnMap;                                 // 0x608(0x1)(None)
	bool                                         bShowBedsOnMap;                                    // 0x609(0x1)(None)
	uint8                                        Pad_408A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AimAssistStrengthMultiplier;                       // 0x60C(0x4)(None)
	bool                                         bForceShowRadialWheelTexts;                        // 0x610(0x1)(None)
	bool                                         bHideStructurePlacementCrosshair;                  // 0x611(0x1)(None)
	uint8                                        Pad_408B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SavedMainMapZoom;                                  // 0x614(0x4)(None)
	float                                        SavedOverlayMapZoom;                               // 0x618(0x4)(None)
	bool                                         bMinimalUI;                                        // 0x61C(0x1)(None)
	enum class ETooltipMode                      FloatingTooltipStructureMode;                      // 0x61D(0x1)(None)
	enum class ETooltipMode                      FloatingTooltipDinoMode;                           // 0x61E(0x1)(None)
	enum class ETooltipMode                      FloatingTooltipDroppedItemsMode;                   // 0x61F(0x1)(None)
	enum class ETooltipMode                      FloatingTooltipPlayerMode;                         // 0x620(0x1)(None)
	enum class ENotificationMode                 TopNotificationMode;                               // 0x621(0x1)(None)
	enum class ENotificationMode                 ItemNotificationMode;                              // 0x622(0x1)(None)
	bool                                         bMinimapOverlayUseLowOpacity;                      // 0x623(0x1)(None)
	int32                                        FilterTypeInventoryLocal;                          // 0x624(0x4)(None)
	int32                                        FilterTypeInventoryRemote;                         // 0x628(0x4)(None)
	enum class EAimAssistType                    bUseGamepadAimAssist;                              // 0x62C(0x1)(None)
	uint8                                        Pad_408C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Gamma1;                                            // 0x630(0x4)(None)
	float                                        Gamma2;                                            // 0x634(0x4)(None)
	bool                                         bDisableBloom;                                     // 0x638(0x1)(None)
	bool                                         bDisableLightShafts;                               // 0x639(0x1)(None)
	bool                                         bUseLowQualityLevelStreaming;                      // 0x63A(0x1)(None)
	bool                                         bUseDistanceFieldAmbientOcclusion;                 // 0x63B(0x1)(None)
	bool                                         bPreventItemCraftingSounds;                        // 0x63C(0x1)(None)
	bool                                         bHighQualityAnisotropicFiltering;                  // 0x63D(0x1)(None)
	uint8                                        Pad_408D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmbientSoundVolume;                                // 0x640(0x4)(None)
	bool                                         bUseOldThirdPersonCameraTrace;                     // 0x644(0x1)(None)
	bool                                         bUseOldThirdPersonCameraOffset;                    // 0x645(0x1)(None)
	bool                                         bShowedGenesisDLCBackground;                       // 0x646(0x1)(None)
	bool                                         bShowedGenesis2DLCBackground;                      // 0x647(0x1)(None)
	bool                                         bHasStartedTheGameOnce;                            // 0x648(0x1)(None)
	bool                                         bViewedAnimatedSeriesTrailer;                      // 0x649(0x1)(None)
	bool                                         bViewedARK2Trailer;                                // 0x64A(0x1)(None)
	bool                                         bShowRTSKeyBinds;                                  // 0x64B(0x1)(None)
	float                                        TemporaryMusicStingerReductionMultiplier;          // 0x64C(0x4)(None)
	bool                                         bHasCompletedGen2;                                 // 0x650(0x1)(None)
	bool                                         bEnableFootstepDecals;                             // 0x651(0x1)(None)
	bool                                         bEnableFootstepParticles;                          // 0x652(0x1)(None)
	bool                                         bShowInfoButtons;                                  // 0x653(0x1)(None)
	bool                                         bDisablePaintings;                                 // 0x654(0x1)(None)
	bool                                         StopExplorerNoteAudioOnClose;                      // 0x655(0x1)(None)
	bool                                         bVibration;                                        // 0x656(0x1)(None)
	bool                                         bUIVibration;                                      // 0x657(0x1)(None)
	float                                        RadialSelectionSpeed;                              // 0x658(0x4)(None)
	bool                                         bDisableVirtualCursor;                             // 0x65C(0x1)(None)
	uint8                                        Pad_408E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         PreventDetailGraphics;                             // 0x65E(0x1)(None)
	uint8                                        Pad_408F[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GroundClutterRadius;                               // 0x660(0x4)(None)
	int32                                        HFSQuality;                                        // 0x664(0x4)(None)
	bool                                         bMenuGyro;                                         // 0x668(0x1)(None)
	uint8                                        Pad_4090[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GyroSensitivity;                                   // 0x66C(0x4)(None)
	float                                        VirtualCursorSensitivity;                          // 0x670(0x4)(None)
	float                                        BubbleParticlesMultiplier;                         // 0x674(0x4)(None)
	float                                        CrosshairScale;                                    // 0x678(0x4)(None)
	float                                        CrosshairOpacity;                                  // 0x67C(0x4)(None)
	struct FLinearColor                          CrosshairColor;                                    // 0x680(0x10)(None)
	struct FVector2D                             CrosshairColorPickerValue;                         // 0x690(0x10)(None)
	struct FLinearColor                          CrosshairColorOverEnemy;                           // 0x6A0(0x10)(None)
	struct FVector2D                             CrosshairColorPickerValueOverEnemy;                // 0x6B0(0x10)(None)
	struct FLinearColor                          CrosshairColorOverAlly;                            // 0x6C0(0x10)(None)
	struct FVector2D                             CrosshairColorPickerValueOverAlly;                 // 0x6D0(0x10)(None)
	struct FLinearColor                          CrosshairColorHitmark;                             // 0x6E0(0x10)(None)
	struct FVector2D                             CrosshairColorPickerValueHitmark;                  // 0x6F0(0x10)(None)
	int32                                        CurrentCameraModeIndex;                            // 0x700(0x4)(None)
	int32                                        CurrentDinoCameraModeIndex;                        // 0x704(0x4)(None)
	bool                                         bShowAmbientInsectsVFX;                            // 0x708(0x1)(None)
	uint8                                        Pad_4091[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TextChatFilterType;                                // 0x70C(0x4)(None)
	int32                                        VoiceChatFilterType;                               // 0x710(0x4)(None)
	bool                                         bAutomaticallyCreateWaypointOnTamingCreatures;     // 0x714(0x1)(None)
	bool                                         bAutomaticallyCreatePOIOnDeath;                    // 0x715(0x1)(None)
	bool                                         bEnableDLSS;                                       // 0x716(0x1)(None)
	bool                                         bEnableDLFG;                                       // 0x717(0x1)(None)
	bool                                         bEnableReflex;                                     // 0x718(0x1)(None)
	uint8                                        Pad_4092[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SuperResolutionQualityLevel;                       // 0x71C(0x4)(None)
	bool                                         bOCIOIsEnabled;                                    // 0x720(0x1)(None)
	uint8                                        Pad_4093[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                OCIOAsset;                                         // 0x728(0x10)(None)
	int32                                        OCIOColorSpace;                                    // 0x738(0x4)(None)
	int32                                        OCIODisplayView;                                   // 0x73C(0x4)(None)
	class UOpenColorIOConfiguration*             CurrentOCIOConfiguration;                          // 0x740(0x8)(ZeroConstructor)
	struct FOpenColorIODisplayConfiguration      CurrenOCIODisplayConfiguration;                    // 0x748(0xA0)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UShooterGameUserSettings* GetDefaultObj();

	void SetSuperResolutionQualityLevel(int32 QualityLevel);
	void SetEnableReflex(bool bEnable);
	void SetEnableDLSS(bool bEnable);
	void SetEnableDLFG(bool bEnable);
	void GetUserSettings(class UShooterGameUserSettings* ReturnValue);
	void GetSupportedSuperResolutionQualityLevels(const TArray<int32>& ReturnValue);
	void GetSuperResolutionQualityLevelName(int32 QualityLevel, const class FString& ReturnValue);
	void GetSuperResolutionQualityLevel(int32 ReturnValue);
	void GetQualityLevelPostProcessing(int32 ReturnValue);
	void GetEnableReflex(bool ReturnValue);
	void GetEnableDLSS(bool ReturnValue);
	void GetEnableDLFG(bool ReturnValue);
	void GetDLSSSupported(bool ReturnValue);
	void GetDLSSModeIndex(const class FString& Value, int32 ReturnValue);
	void AddToAgreedToTerms();
};

// 0x140 (0x4F0 - 0x3B0)
// Class ShooterGame.ShooterGameViewportClient
class UShooterGameViewportClient : public UGameViewportClient
{
public:
	TArray<class UObject*>                       ViewPortWidgets;                                   // 0x3B0(0x10)(ZeroConstructor)
	uint8                                        Pad_4097[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            LoadingMusic;                                      // 0x3D0(0x8)(ZeroConstructor)
	class UFont*                                 InfoFont;                                          // 0x3D8(0x8)(ZeroConstructor)
	uint8                                        Pad_4098[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalUI_Toast*                       UpdatingModsUI;                                    // 0x408(0x8)(ZeroConstructor)
	uint8                                        Pad_4099[0x9];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         VideoReplayEnabled;                                // 0x419(0x1)(None)
	uint8                                        Pad_409A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumReplaySecondsToStore;                           // 0x41C(0x4)(None)
	uint8                                        Pad_409B[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGameViewportClient* GetDefaultObj();

	void IsAnyUIConsumingInput(class UClass* PrimalUIClass, class AShooterPlayerController* Owner, class UPrimalUI* ReturnValue);
	void GetViewportClient(class UWorld* ForWorld, class UShooterGameViewportClient* ReturnValue);
	void GetUIScenesFromClass(class UClass* PrimalUIClass, const TArray<class UPrimalUI*>& ReturnValue);
	void GetUISceneFromClass(class UClass* PrimalUIClass, class ABasePlayerController* Owner, class UPrimalUI* ReturnValue);
	void GetTopUI(int32 ControllerId, class UPrimalUI* ReturnValue);
	void GetGameWorld(class UWorld* ReturnValue);
	void GetAllUIScenesFromClass(class UClass* PrimalUIClass, class ABasePlayerController* Owner, const TArray<class UPrimalUI*>& ReturnValue);
	void CloseAllUIsOnDie(class AShooterPlayerController* SPC, bool ReturnValue);
	void AnyScenesWithMouseCapture(bool ReturnValue);
	void AnyNonInventoryScenesWithMouseCapture(class AShooterPlayerController* ForPC, bool ReturnValue);
};

// 0x28 (0x58 - 0x30)
// Class ShooterGame.ShooterGameLoadingScreenManager
class UShooterGameLoadingScreenManager : public UEngineSubsystem
{
public:
	uint8                                        Pad_409C[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGameLoadingScreenManager* GetDefaultObj();

};

// 0xA8 (0x648 - 0x5A0)
// Class ShooterGame.ShooterGame_Menu
class AShooterGame_Menu : public AGameMode
{
public:
	class FString                                MenuMusic;                                         // 0x5A0(0x10)(None)
	class UClass*                                SponsoredModsMenu;                                 // 0x5B0(0x8)(ZeroConstructor)
	class FName                                  ActiveEvent;                                       // 0x5B8(0x8)(None)
	TArray<struct FActiveEventMainMenuOverride>  ActiveEventMainMenuOverrides;                      // 0x5C0(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    BackgroundTextureOverrides;                        // 0x5D0(0x10)(ZeroConstructor)
	TMap<class UTexture2D*, class FString>       SoundToPlayPerBackground;                          // 0x5E0(0x50)(ZeroConstructor)
	bool                                         HasStartedMusic;                                   // 0x630(0x1)(None)
	uint8                                        Pad_409E[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterGame_Menu* GetDefaultObj();

	void PlayMusic();
	void GetMainMenuOverrideData(const struct FActiveEventMainMenuOverride& OverrideData, bool ReturnValue);
	void GetMainMenuBackgroundTexture(class UTexture2D* ReturnValue);
};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.ShooterHaptics
class UShooterHaptics : public UDataAsset
{
public:
	TArray<struct FShooterForceFeedback>         ForceFeedbackTable;                                // 0x30(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UShooterHaptics* GetDefaultObj();

};

// 0x938 (0xEE8 - 0x5B0)
// Class ShooterGame.ShooterHUD
class AShooterHUD : public AHUD
{
public:
	class UClass*                                HurtCameraShake;                                   // 0x5B0(0x8)(ZeroConstructor)
	class UUI_SavingOverlay*                     SavingOverlay;                                     // 0x5B8(0x8)(ZeroConstructor)
	float                                        MaxDamageCameraShakeScale;                         // 0x5C0(0x4)(None)
	float                                        MaxDamageCameraShakeSpeedInverse;                  // 0x5C4(0x4)(None)
	bool                                         bShowAllPlayersWhenSpectating;                     // 0x5C8(0x1)(None)
	uint8                                        Pad_40E4[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShowAllPlayersWhenSpectatingLocal;                // 0x5CA(0x1)(None)
	uint8                                        Pad_40E5[0xD];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlayerInfoRequestTimeInterval;                     // 0x5D8(0x4)(None)
	uint8                                        Pad_40E6[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTrackingItemUI*                       TrackingItemsHUD;                                  // 0x5F0(0x8)(ZeroConstructor)
	class UPlayerHUDUI*                          MyPlayerHUD;                                       // 0x5F8(0x8)(ZeroConstructor)
	class UPrimalUI*                             MyPlayerHUDSOTF;                                   // 0x600(0x8)(ZeroConstructor)
	class UPrimalUI*                             CurrentMinimapHUD;                                 // 0x608(0x8)(ZeroConstructor)
	class UPrimalUI*                             ChangeCameraModeUI;                                // 0x610(0x8)(ZeroConstructor)
	class UHUDCustomStatusWidget*                MyPlayerCustomStatusHUD;                           // 0x618(0x8)(ZeroConstructor)
	class UHUDActiveMissionWidget*               MyPlayerActiveMissionHUD;                          // 0x620(0x8)(ZeroConstructor)
	class UHUDPointsOfInterestContainer*         MyPlayerPointsOfInterestHUD;                       // 0x628(0x8)(ZeroConstructor)
	class UHUDPingsContainer*                    MyPlayerPingHUD;                                   // 0x630(0x8)(ZeroConstructor)
	class UUI_LeaderboardWidget*                 MyPlayerLeaderboardHUD;                            // 0x638(0x8)(ZeroConstructor)
	class UUI_Subtitles*                         MySubtitlesHUD;                                    // 0x640(0x8)(ZeroConstructor)
	class UUI_HudOverlay*                        MyOverlayHUD;                                      // 0x648(0x8)(ZeroConstructor)
	class UUI_HudOverlay*                        MyTopOverlayHUD;                                   // 0x650(0x8)(ZeroConstructor)
	class UUI_ChatBox*                           ChatBoxUI;                                         // 0x658(0x8)(ZeroConstructor)
	class UBuildingUI*                           BuildingUI;                                        // 0x660(0x8)(ZeroConstructor)
	class UClass*                                HubUITemplate;                                     // 0x668(0x8)(ZeroConstructor)
	class UClass*                                SurvivorProfileUITemplate;                         // 0x670(0x8)(ZeroConstructor)
	class UClass*                                PlayerHUDUITemplate;                               // 0x678(0x8)(ZeroConstructor)
	class UClass*                                PlayerHUDCustomStatusTemplate;                     // 0x680(0x8)(ZeroConstructor)
	class UClass*                                PlayerHUDActiveMissionTemplate;                    // 0x688(0x8)(ZeroConstructor)
	class UClass*                                PlayerHUDPointsOfInterestTemplate;                 // 0x690(0x8)(ZeroConstructor)
	class UClass*                                TrackingItemsTemplate;                             // 0x698(0x8)(ZeroConstructor)
	class UClass*                                LeaderboardsUITemplate;                            // 0x6A0(0x8)(ZeroConstructor)
	class UClass*                                SubtitlesUITemplate;                               // 0x6A8(0x8)(ZeroConstructor)
	class UClass*                                SavingOverlayUITemplate;                           // 0x6B0(0x8)(ZeroConstructor)
	class UClass*                                OverlayHUDUITemplate;                              // 0x6B8(0x8)(ZeroConstructor)
	class UClass*                                TopOverlayHUDUITemplate;                           // 0x6C0(0x8)(ZeroConstructor)
	class UClass*                                InventoryUITemplate;                               // 0x6C8(0x8)(ZeroConstructor)
	class UClass*                                MissionListUITemplate;                             // 0x6D0(0x8)(ZeroConstructor)
	class UClass*                                AdminMangmentUITemplate;                           // 0x6D8(0x8)(ZeroConstructor)
	class UClass*                                ConsoleDedicatedUITemplate;                        // 0x6E0(0x8)(ZeroConstructor)
	class UClass*                                TribeManagerUITemplate;                            // 0x6E8(0x8)(ZeroConstructor)
	class UClass*                                TribeWarUITemplate;                                // 0x6F0(0x8)(ZeroConstructor)
	class UClass*                                PinEntryUITemplate;                                // 0x6F8(0x8)(ZeroConstructor)
	class UClass*                                TextEntryUITemplate;                               // 0x700(0x8)(ZeroConstructor)
	class UClass*                                MapMarkersUITemplate;                              // 0x708(0x8)(ZeroConstructor)
	class UClass*                                SpawnUITemplate;                                   // 0x710(0x8)(ZeroConstructor)
	class UClass*                                AllPlayersListTemplate;                            // 0x718(0x8)(ZeroConstructor)
	class UClass*                                ChatBoxUITemplate;                                 // 0x720(0x8)(ZeroConstructor)
	class UClass*                                TutorialUITemplate;                                // 0x728(0x8)(ZeroConstructor)
	class UClass*                                MinimapUITemplate;                                 // 0x730(0x8)(ZeroConstructor)
	class UClass*                                BuildingUITemplate;                                // 0x738(0x8)(ZeroConstructor)
	class UClass*                                PlayerHUDSOTF;                                     // 0x740(0x8)(ZeroConstructor)
	class UClass*                                ChangeCameraModeTemplate;                          // 0x748(0x8)(ZeroConstructor)
	bool                                         bShowChatBoxByDefault;                             // 0x750(0x1)(None)
	uint8                                        Pad_40E8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                InventoryRadialSelectorTemplate;                   // 0x758(0x8)(ZeroConstructor)
	class UClass*                                MultiUseRadialSelectorTemplate;                    // 0x760(0x8)(ZeroConstructor)
	class UClass*                                PlayerActionRadialSelectorTemplate;                // 0x768(0x8)(ZeroConstructor)
	class UClass*                                WhistleRadialSelectorTemplate;                     // 0x770(0x8)(ZeroConstructor)
	class UClass*                                EmoteRadialSelectorTemplate;                       // 0x778(0x8)(ZeroConstructor)
	class UClass*                                CustomRadialSelectorTemplate;                      // 0x780(0x8)(ZeroConstructor)
	class UClass*                                CustomTrackedDinoListUITemplate;                   // 0x788(0x8)(ZeroConstructor)
	class URadialSelectorHUD*                    CurrentRadialSelector;                             // 0x790(0x8)(ZeroConstructor)
	class URadialSelectorHUD_Inventory*          InventoryRadialSelector;                           // 0x798(0x8)(ZeroConstructor)
	class URadialSelectorHUD_MultiUse*           MultiUseRadialSelector;                            // 0x7A0(0x8)(ZeroConstructor)
	class URadialSelectorHUD_PlayerAction*       PlayerActionRadialSelector;                        // 0x7A8(0x8)(ZeroConstructor)
	class URadialSelectorHUD_PlayerAction*       WhistleRadialSelector;                             // 0x7B0(0x8)(ZeroConstructor)
	class URadialSelectorHUD_PlayerAction*       EmoteRadialSelector;                               // 0x7B8(0x8)(ZeroConstructor)
	class URadialSelectorHUD_Custom*             CustomRadialSelector;                              // 0x7C0(0x8)(ZeroConstructor)
	uint8                                        Pad_40E9[0xC8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FloatingMultiUseIconSize;                          // 0x890(0x4)(None)
	uint8                                        Pad_40EA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             FloatingMultiUseIconOffset;                        // 0x898(0x10)(None)
	struct FLinearColor                          FloatingMultiUseIconBGColor;                       // 0x8A8(0x10)(None)
	struct FColor                                DisableUseIconColor;                               // 0x8B8(0x4)(None)
	uint8                                        Pad_40EB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            GenericMultiUseIcon;                               // 0x8C0(0x8)(ZeroConstructor)
	class UTexture2D*                            GenericBackIcon;                                   // 0x8C8(0x8)(ZeroConstructor)
	class UTexture2D*                            GenericSubMenuMultiUseIcon;                        // 0x8D0(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemAddedNotificationIcon;                         // 0x8D8(0x8)(ZeroConstructor)
	class UTexture2D*                            ItemRemovedNotificationIcon;                       // 0x8E0(0x8)(ZeroConstructor)
	struct FLinearColor                          ItemAddedNotificationIconColor;                    // 0x8E8(0x10)(None)
	struct FLinearColor                          ItemRemovedNotificationIconColor;                  // 0x8F8(0x10)(None)
	uint8                                        Pad_40EC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 BigFont;                                           // 0x910(0x8)(ZeroConstructor)
	class UFont*                                 NormalFont;                                        // 0x918(0x8)(ZeroConstructor)
	class UFont*                                 SmallFont;                                         // 0x920(0x8)(ZeroConstructor)
	class UTexture2D*                            HitNotifyTexture;                                  // 0x928(0x8)(ZeroConstructor)
	class UTexture2D*                            HUDMainTextureAtlas;                               // 0x930(0x8)(ZeroConstructor)
	class UTexture2D*                            HUDAssets02TextureAtlas;                           // 0x938(0x8)(ZeroConstructor)
	class UTexture2D*                            LowHealthOverlayTexture;                           // 0x940(0x8)(ZeroConstructor)
	class UTexture2D*                            HitMarkerTexture;                                  // 0x948(0x8)(ZeroConstructor)
	class UClass*                                MultiUseUITemplate;                                // 0x950(0x8)(ZeroConstructor)
	float                                        TimeToHideChat;                                    // 0x958(0x4)(None)
	uint8                                        Pad_40ED[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            DeathIcon;                                         // 0x960(0x8)(ZeroConstructor)
	class UTexture2D*                            KilledIcon;                                        // 0x968(0x8)(ZeroConstructor)
	float                                        ChatPopupInterval;                                 // 0x970(0x4)(None)
	uint8                                        Pad_40EE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            SpeechBubble;                                      // 0x978(0x8)(ZeroConstructor)
	uint8                                        Pad_40EF[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCanvasIcon                           HitNotifyIcon[0x8];                                // 0x9B8(0xC0)(ZeroConstructor)
	struct FCanvasIcon                           Crosshair[0x5];                                    // 0xA78(0x78)(ZeroConstructor)
	struct FCanvasIcon                           HitNotifyCrosshair;                                // 0xAF0(0x18)(ZeroConstructor)
	uint8                                        Pad_40F0[0x168];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FHUDNotification>              HUDNotifications;                                  // 0xC70(0x10)(ZeroConstructor)
	TArray<struct FHUDNotification>              ItemHUDNotifications;                              // 0xC80(0x10)(ZeroConstructor)
	TArray<struct FHUDNotification>              SingletonHUDNotifications;                         // 0xC90(0x10)(ZeroConstructor)
	uint8                                        Pad_40F1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHUDHidden;                                        // 0xCB0(0x1)(None)
	bool                                         bShowChatPopup;                                    // 0xCB1(0x1)(None)
	uint8                                        Pad_40F2[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCustomWheelSettings                  TeamPingWheelSettings;                             // 0xCB8(0x48)(ZeroConstructor)
	TArray<enum class ETeamPingType>             TeamPingTypes;                                     // 0xD00(0x10)(None)
	uint8                                        Pad_40F6[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUI_Inventory*                         CurrentOpenedInventory;                            // 0xD50(0x8)(ZeroConstructor)
	class UUI_Hub*                               CurrentlyOpenedHubUI;                              // 0xD58(0x8)(ZeroConstructor)
	bool                                         bMultiUseIsDrawingUIHUD;                           // 0xD60(0x1)(None)
	uint8                                        Pad_40F7[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 LastTargetedActor;                                 // 0xD70(0x8)(ZeroConstructor)
	TArray<struct FHintReplacementKeysForKeyboardControls> GenericGamepadReplacementsForKeyboardControls;     // 0xD78(0x10)(None)
	float                                        AdditionalDinoMultiuseCheckDistance;               // 0xD88(0x4)(None)
	uint8                                        Pad_40F8[0x12C];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UUI_Tutorial*                          TutorialUI;                                        // 0xEB8(0x8)(ZeroConstructor)
	uint8                                        Pad_40F9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APrimalDinoCharacter*>          CachedFloatingOverlaps;                            // 0xED0(0x10)(ZeroConstructor)
	uint8                                        Pad_40FA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDefeatedBossPreventingSpawnUICreation : 1;        // Mask: 0x1, PropSize: 0x10xEE4(0x1)(None)
	uint8                                        BitPad_3C6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bShowingMinimapTooltip;                            // 0xEE5(0x1)(None)
	uint8                                        Pad_40FB[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterHUD* GetDefaultObj();

	void StartCustomWheelRadialSelector(const struct FCustomWheelSettings& WheelSettings, const TArray<struct FCustomWheelEntry>& Entries, bool bFromGamepad, class UObject* ForcedEntryTarget, bool AllowMovement, bool ReturnValue);
	void ShowTeamPingWheel(bool CanTrack);
	void ShowSurvivorProfileUI(class UUI_SurvivorProfile* ReturnValue);
	void ShowSpawnUI(class APrimalStructure* FastTravelIgnoreBed);
	void ShowPinEntryUI(class AActor* ATargetable, bool bIsSetting, int32 CustomIndex);
	void ShowNewMinimap(class AShooterPlayerController* ToSPC, class UPrimalUI* ReturnValue);
	void ShowMultiUseUIFor(class AActor* AnActor, bool bFromGamepad, const struct FMultiUseWheelOption& WheelCategoryEntry);
	void ShowMissionList(class UObject* FromDispatcher, class UUI_MissionList* ReturnValue);
	void ShowMissionAlert(enum class EMissionAlertType AlertType, const class FString& AlertTitle, const TArray<struct FMissionAlertEntry>& AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop);
	void ShowMap(class UMinimapSubMenuUI* ReturnValue);
	void ShowInventory(class UPrimalInventoryComponent* InventoryComp, class UUI_Inventory* ReturnValue);
	void ShowEngramsMenu(bool bInputDelay, class UUI_EngramsMenu* ReturnValue);
	void ShowChatBox(bool bShow, bool bIsFromNewChat);
	void ShowChangeCameraModeUI(class UPrimalUI* ReturnValue);
	void ShowBuildingUI(class UBuildingUI* ReturnValue);
	void SetAllowShowChatBox(bool bAllow);
	void ReplaceKeyboardControlsTextWithXboxControlIconPaths(const class FString& ActionKey, int32 IconOffset, const class FString& ReturnValue);
	void RemoveBuildingUI();
	void NotifyOutOfAmmo();
	void IsUsingCustomWheelRadialSelector(bool ReturnValue);
	void IsUsingBuildingUI(bool ReturnValue);
	void IsMissionAlertVisible(bool bGetTopAlertVisibility, bool ReturnValue);
	void IsChatBoxVisible(bool ReturnValue);
	void HitchDetected(const struct FSoftObjectPath& ForAsset, float HitchTime);
	void HideTopMissionAlert();
	void HideMissionAlert();
	void HideChatBox();
	void GetSubtitlesWidget(class UUI_Subtitles* ReturnValue);
	void GetShooterPC(class AShooterPlayerController* ReturnValue);
	void GetSelectedCustomWheelEntry(const struct FCustomWheelEntry& SelectedEntry, bool ReturnValue);
	void GetPlayerOwner(class APlayerController* ReturnValue);
	void GetOrCreateSpawnMenu(class UPrimalUI* ReturnValue);
	void GetOrCreateActiveHub(class UUI_Hub* ReturnValue);
	void GetOffLineSmallFont(class UFont* ReturnValue);
	void GetOffLineNormalFont(class UFont* ReturnValue);
	void GetOffLineBigFont(class UFont* ReturnValue);
	void GetMultiUseRadialSelection(const struct FMultiUseEntry& SelectedEntry, bool bIncludeTimedEntries, bool ReturnValue);
	void GetIconForKey(const class FString& ActionKey, class UTexture2D* ReturnValue);
	void GetFloatingHUDScreenEdgeFadeAlpha(const struct FVector2D& ScreenPosition, float ReturnValue);
	void GetCurrentHubUI(class UUI_Hub* ReturnValue);
	void GetCurrentCrosshairScreenLocation(const struct FVector2D& ReturnValue);
	void GetChatBoxWidget(class UUI_ChatBox* ReturnValue);
	void GetAdditionalExplorerNoteDynamicMaterialParams(const struct FExplorerNoteEntry& ExplorerNote, const TArray<struct FNameScalarPair>& ScalarMaterialParams, const TArray<struct FNameColorPair>& ColorMaterialParams);
	void FormatTextureAsRichText(class UTexture2D* InTexture, const class FString& ReturnValue);
	void FormatRichTextWithKeyBindings(const class FString& InText, bool bIgnoreMarkup, const class FString& ReturnValue);
	void FormatRichTextWithColor(const class FString& InText, const struct FLinearColor& InColor, const class FString& ReturnValue);
	void ForceHUDHidden(bool bForcedHidden);
	void EndMultiUseRadialSelector();
	void EndCustomWheelRadialSelector();
	void EndAllRadialSelectors();
	void DrawMultiUseIcon(const struct FVector2D& Vec, float Size, const struct FMultiUseEntry& Entry, class UTexture2D* Icon, class UMaterialInterface* MatIcon, const struct FColor& Color);
	void DrawCrosshairOnScreen(const struct FVector2D& AtScreenLocation, float WithCrossSpread, const struct FColor& WithDrawColor, float WithAlphaPercent, float WithScale);
	void CreateOrGetTrackItemUI(class UTrackingItemUI* ReturnValue);
	void CloseSpawnMenu(bool ReturnValue);
	void CloseChangeCameraModeUI();
	void CloseActiveHub(bool ReturnValue);
	void CancelCustomWheelRadialSelector();
	void BPUpdateHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
	void BPUpdateHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int32 Index);
	void BPUpdateHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPUpdateAllHUDRichTextOverlays(const TArray<struct FHUDRichTextOverlayData>& InOverlayData);
	void BPSimulateHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator);
	void BPShowUIScene(class UClass* UISceneTemplate, class UObject* AssociatedObject1, class UObject* AssociatedObject2, int32 ExtraID1, int32 ExtraID2, class UPrimalUI* ReturnValue);
	void BPSetHUDRichTextOverlayVerticalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, enum class EVerticalAlignment InAlignV, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayVerticalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, enum class EVerticalAlignment InAnchorV, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayUseAutoWrap(const struct FHUDRichTextOverlayData& InOverlay, bool InAutoWrap, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayScale(const struct FHUDRichTextOverlayData& InOverlay, float InScale, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayPosition(const struct FHUDRichTextOverlayData& InOverlay, const struct FVector2D& InPosition, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayInstigator(const struct FHUDRichTextOverlayData& InOverlay, class AActor* InInstigator, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayHorizontalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, enum class EHorizontalAlignment InAlignH, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayHorizontalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, enum class EHorizontalAlignment InAnchorH, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayDisplayText(const struct FHUDRichTextOverlayData& InOverlay, const class FString& InString, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPSetHUDRichTextOverlayDefaultTextColor(const struct FHUDRichTextOverlayData& InOverlay, const struct FLinearColor& InColor, const struct FHUDRichTextOverlayData& OutOverlay, bool bUpdateAfterSetting);
	void BPRemoveHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
	void BPRemoveHUDRichTextOverlayAtIndex(int32 Index);
	void BPRemoveHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPRemoveAllHUDRichTextOverlays();
	void BPGetHUDRichTextOverlays(const TArray<struct FHUDRichTextOverlayData>& ReturnValue);
	void BPForceReinitUI();
	void BPCustomAddHUDNotification(const class FString& NotificationString, const struct FColor& NotificationColor, class UMaterialInterface* NotificationMaterial, class UTexture2D* NotificationTexture, float DisplayTime, float DisplayScale, bool bIsSingleton, int32 MessageTypeID, int32 Priority, bool ReturnValue);
	void BPAddHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int32 InsertAtIndex);
	void BPAddHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
	void BPAddHUDNotification(const class FString& NotificationString, const struct FColor& NotificationColor, class UMaterialInterface* NotificationMaterial, class UTexture2D* NotificationTexture, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay, int32 MessageTypeID, int32 ItemMsgType, class UClass* ItemClass, const class FString& ItemName, int32 ItemQuantity, float ItemQuantityFloat, int32 Priority);
	void AcceptTeamPingWheel();
};

// 0x398 (0x850 - 0x4B8)
// Class ShooterGame.ShooterImpactEffect
class AShooterImpactEffect : public AActor
{
public:
	class UParticleSystem*                       SurfaceImpactFX[0x10];                             // 0x4B8(0x80)(ZeroConstructor)
	class USoundBase*                            WaeponImpactSound;                                 // 0x538(0x8)(ZeroConstructor)
	class USoundBase*                            SurfaceImpactSound[0x10];                          // 0x540(0x80)(ZeroConstructor)
	float                                        MaxDecalRange;                                     // 0x5C0(0x4)(None)
	uint8                                        Pad_40FD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDecalData                            SurfaceDecalData[0x10];                            // 0x5C8(0x200)(ZeroConstructor)
	class UClass*                                SurfaceImpactSpawnActors[0x10];                    // 0x7C8(0x80)(ZeroConstructor)
	uint8                                        bOverridePawnHitDecal : 1;                         // Mask: 0x1, PropSize: 0x10x848(0x1)(None)
	uint8                                        bOverridePawnHitFX : 1;                            // Mask: 0x2, PropSize: 0x10x848(0x1)(None)
	uint8                                        bNoHitEffectOnPawns : 1;                           // Mask: 0x4, PropSize: 0x10x848(0x1)(None)
	uint8                                        bNoSoundEffectOnPawns : 1;                         // Mask: 0x8, PropSize: 0x10x848(0x1)(None)
	uint8                                        bNoSpawnActorOnPawns : 1;                          // Mask: 0x10, PropSize: 0x10x848(0x1)(None)
	uint8                                        bNoDecalOnPawns : 1;                               // Mask: 0x20, PropSize: 0x10x848(0x1)(None)
	uint8                                        Pad_40FE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterImpactEffect* GetDefaultObj();

	void StaticSpawnImpactEffects(class UObject* WorldContextObject, class UClass* ImpactEffectClass, const struct FHitResult& SurfaceHit, const struct FVector& ShotDirection, bool UseShotDirectionForImpactEffectActorClassRotation, bool AttachImpactEffectActorToSurfaceHitActor, class UParticleSystemComponent* ReturnValue);
};

// 0x18 (0x9E0 - 0x9C8)
// Class ShooterGame.ShooterLaserBeamComponent
class UShooterLaserBeamComponent : public UParticleSystemComponent
{
public:
	bool                                         bIsOwnerWeapon;                                    // 0x9C8(0x1)(None)
	uint8                                        Pad_40FF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LaserBeamRange;                                    // 0x9CC(0x4)(None)
	uint8                                        Pad_4100[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterLaserBeamComponent* GetDefaultObj();

};

// 0x1198 (0x1650 - 0x4B8)
// Class ShooterGame.ShooterLocalPlayer
class UShooterLocalPlayer : public ULocalPlayer
{
public:
	TSet<class UPrimalUI*>                       UITicks;                                           // 0x4B8(0x50)(ZeroConstructor)
	class UOnlineSession*                        OnlineSession;                                     // 0x508(0x8)(ZeroConstructor)
	class UShooterPersistentUser*                PersistentUser;                                    // 0x510(0x8)(ZeroConstructor)
	uint8                                        Pad_4101[0x1138];                                  // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterLocalPlayer* GetDefaultObj();

};

// 0x0 (0x1E0 - 0x1E0)
// Class ShooterGame.ShooterOnlineSessionClient
class UShooterOnlineSessionClient : public UOnlineSessionClient
{
public:

	static class UClass* StaticClass();
	static class UShooterOnlineSessionClient* GetDefaultObj();

};

// 0x28 (0xE8 - 0xC0)
// Class ShooterGame.ShooterPendingNetGame
class UShooterPendingNetGame : public UPendingNetGame
{
public:
	uint8                                        Pad_4102[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterPendingNetGame* GetDefaultObj();

};

// 0x40 (0x68 - 0x28)
// Class ShooterGame.ShooterPersistentUser
class UShooterPersistentUser : public USaveGame
{
public:
	int32                                        Kills;                                             // 0x28(0x4)(None)
	int32                                        Deaths;                                            // 0x2C(0x4)(None)
	int32                                        Wins;                                              // 0x30(0x4)(None)
	int32                                        Losses;                                            // 0x34(0x4)(None)
	int32                                        BulletsFired;                                      // 0x38(0x4)(None)
	int32                                        RocketsFired;                                      // 0x3C(0x4)(None)
	int32                                        BotsCount;                                         // 0x40(0x4)(None)
	float                                        Gamma;                                             // 0x44(0x4)(None)
	float                                        AimSensitivity;                                    // 0x48(0x4)(None)
	bool                                         bInvertedYAxis;                                    // 0x4C(0x1)(None)
	uint8                                        Pad_4103[0x1B];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterPersistentUser* GetDefaultObj();

};

// 0x2390 (0x5D40 - 0x39B0)
// Class ShooterGame.ShooterPlayerCameraManager
class AShooterPlayerCameraManager : public APlayerCameraManager
{
public:
	TMap<class UMaterialInterface*, float>       MatFadeDown;                                       // 0x39B0(0x50)(ZeroConstructor)
	struct FMinimalViewInfo                      LastPreModifierCameraCache;                        // 0x3A00(0x860)(ZeroConstructor)
	float                                        NormalFOV;                                         // 0x4260(0x4)(None)
	float                                        TargetingFOV;                                      // 0x4264(0x4)(None)
	float                                        TPVZOffsetInterpSpeed;                             // 0x4268(0x4)(None)
	uint8                                        Pad_4123[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PPMaterials;                                       // 0x4270(0x770)(ZeroConstructor)
	uint8                                        Pad_4124[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasCustomDepthStencil;                            // 0x49EC(0x1)(None)
	bool                                         bCustomDepthStencilIgnoreHealth;                   // 0x49ED(0x1)(None)
	bool                                         bCompleteCustomDepthStencilOverride;               // 0x49EE(0x1)(None)
	uint8                                        Pad_4125[0x19];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  LastActualCameraStyle;                             // 0x4A08(0x8)(None)
	uint8                                        Pad_4126[0x10E8];                                  // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastTPVCameraOffset;                               // 0x5AF8(0x18)(None)
	float                                        LastTPVCollisionHeight;                            // 0x5B10(0x4)(None)
	float                                        TPVCollisionHeightInterpSpeed;                     // 0x5B14(0x4)(None)
	uint8                                        Pad_4127[0xC4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFloatSpringState                     CameraArmLengthSpringState;                        // 0x5BDC(0xC)(None)
	struct FFloatSpringState                     CameraPivotLocationSpringStateX;                   // 0x5BE8(0xC)(None)
	struct FFloatSpringState                     CameraPivotLocationSpringStateY;                   // 0x5BF4(0xC)(None)
	struct FFloatSpringState                     CameraPivotLocationSpringStateZ;                   // 0x5C00(0xC)(None)
	uint8                                        Pad_4128[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuaternionSpringState                CameraPivotRotationSpringState;                    // 0x5C10(0x40)(None)
	uint8                                        Pad_4129[0xF0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterPlayerCameraManager* GetDefaultObj();

	void UpdateCameraState(class APrimalCharacter* ForChar);
	void StartCameraTransition(float TransitionDuration, bool bUseFinalModifiedViewTarget, bool bAllowSpectorPawn);
	void ShouldUseSlowInterpToOldCamera(class APrimalCharacter* ForChar, bool ReturnValue);
	void ShouldUseASACamera(class APrimalCharacter* ForChar, bool bCheckShouldSwitchToOldCamera, bool ReturnValue);
	void SetLastTargetLocationLoc(const struct FVector& NewTargetLocationLoc);
	void PrimalCameraQuaternionSpringInterp(const struct FQuat& Current, const struct FQuat& Target, const struct FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget, const struct FQuat& ReturnValue);
	void PrimalCameraFloatSpringInterp(float Current, float Target, const struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget, float ReturnValue);
	void OnCameraStateChanged(class APrimalCharacter* ForChar, enum class EPrimalCameraState PreviousState);
	void IsInFrustum(const struct FVector& BoxLocation, const struct FVector& BoxExtents, bool ReturnValue);
	void IsFirstPerson(bool ReturnValue);
	void HandleTurn(float Val, bool ReturnValue);
	void HandleLook(float Val, bool ReturnValue);
	void GetTPVCollisionHeight(class AActor* ForTarget, bool bIncludeHeightScalar, float ReturnValue);
	void GetPrimalCameraState(enum class EPrimalCameraState ReturnValue);
	void GetPrimalCameraCurrentPivotLocationOffset(class APrimalCharacter* ForChar, bool bCheckShouldSwitchToOldCamera, const struct FVector& ReturnValue);
	void GetPrimalCameraCurrentPivotLocation(class APrimalCharacter* ForChar, bool bCheckShouldSwitchToOldCamera, const struct FVector& ReturnValue);
	void GetColorCodedStencil(enum class EStencilAlliance InAlliance, float HealthPercent, uint8 ReturnValue);
	void GetCameraStyle(class FName ReturnValue);
	void GetCameraAimViewPoint(const struct FVector& OutCamLoc, const struct FRotator& OutCamRot);
	void GetCahcedCameraStyle(class FName ReturnValue);
	void GetBlendableFromMIC(class UMaterialInterface* InInterface, class UObject* ReturnValue);
	void CameraGetRotationForPawnMovementInput(class APrimalCharacter* ForPawn, const struct FRotator& InControlRotation, const struct FRotator& ReturnValue);
};

// 0x8 (0xB30 - 0xB28)
// Class ShooterGame.ShooterPlayerController_Menu
class AShooterPlayerController_Menu : public ABasePlayerController
{
public:
	class UPrimalLocalProfile*                   PrimalLocalProfile;                                // 0xB28(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AShooterPlayerController_Menu* GetDefaultObj();

};

// 0xBC8 (0x1198 - 0x5D0)
// Class ShooterGame.ShooterPlayerState
class AShooterPlayerState : public APlayerState
{
public:
	uint8                                        Pad_418D[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalPlayerData*                     MyPlayerData;                                      // 0x600(0x8)(ZeroConstructor)
	struct FPrimalPlayerDataStruct               MyPlayerDataStruct;                                // 0x608(0x4F8)(ZeroConstructor)
	class UClass*                                DefaultItemSlotClasses[0xA];                       // 0xB00(0x50)(ZeroConstructor)
	uint8                                        DefaultItemSlotEngrams[0xA];                       // 0xB50(0xA)(None)
	uint8                                        Pad_418E[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTribeData                            MyTribeData;                                       // 0xB60(0x1A8)(ZeroConstructor)
	struct FTribeData                            LastTribeInviteData;                               // 0xD08(0x1A8)(ZeroConstructor)
	uint8                                        Pad_418F[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSpawnPointInfo>               CachedSpawnPointInfos;                             // 0xF00(0x10)(ZeroConstructor)
	int32                                        TotalEngramPoints;                                 // 0xF10(0x4)(None)
	int32                                        FreeEngramPoints;                                  // 0xF14(0x4)(None)
	TArray<class UClass*>                        EngramItemBlueprints;                              // 0xF18(0x10)(ZeroConstructor)
	uint8                                        Pad_4190[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       NextAllowedRespawnTime;                            // 0xF78(0x8)(None)
	float                                        AllowedRespawnInterval;                            // 0xF80(0x4)(None)
	uint8                                        Pad_4191[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastTimeDiedToEnemyTeam;                           // 0xF88(0x8)(None)
	int32                                        CurrentlySelectedDinoOrderGroup;                   // 0xF90(0x4)(None)
	uint8                                        Pad_4192[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDinoOrderGroup                       DinoOrderGroups[0xA];                              // 0xF98(0x1E0)(ZeroConstructor)
	double                                       GenesisAbilityErrorLastTime;                       // 0x1178(0x8)(None)
	double                                       NextAllowTurretCopySettingsTime;                   // 0x1180(0x8)(None)
	uint8                                        Pad_4193[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bQuitter : 1;                                      // Mask: 0x1, PropSize: 0x10x1190(0x1)(None)
	uint8                                        Pad_4194[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterPlayerState* GetDefaultObj();

	void UpdatedPlayerData();
	void ServerUnlockEngram(class UClass* ForItemEntry, bool bNotifyPlayerHUD, bool bForceUnlock);
	void ServerTribeRequestRemoveRankGroup(int32 RankGroupIndex);
	void ServerTribeRequestNewRallyPoint(const struct FTeamPingData& RallyPointData);
	void ServerTribeRequestNewAlliance(const class FString& AllianceName);
	void ServerTribeRequestApplyRankGroupSettings(int32 RankGroupIndex, const struct FTribeRankGroup& NewGroupSettings);
	void ServerTribeRequestAddRankGroup(const class FString& GroupName);
	void ServerSetSelectedDinoOrderGroup(int32 NewGroup);
	void ServerSetDinoGroupName(int32 GroupIndex, const class FString& GroupName);
	void ServerSetDefaultItemSlotClass(int32 SlotNum, class UClass* ItemClass, bool bIsEngram);
	void ServerRequestTransferOwnershipInMyTribe(int32 PlayerIndexInTribe);
	void ServerRequestSpawnPointsForDownloadedCharacters(uint64 PlayerDataID, int32 IgnoreBedID);
	void ServerRequestSetTribeMemberGroupRank(int32 PlayerIndexInTribe, int32 RankGroupIndex);
	void ServerRequestSetTribeGovernment(const struct FTribeGovernment& TribeGovernment);
	void ServerRequestRenameTribe(const class FString& ServerRequestRenameTribe);
	void ServerRequestRemovePlayerIndexFromMyTribe(int32 PlayerIndexInTribe);
	void ServerRequestRemoveAllianceMember(uint32 AllianceID, uint32 MemberID);
	void ServerRequestPromotePlayerInMyTribe(int32 PlayerIndexInTribe);
	void ServerRequestPromoteAllianceMember(uint32 AllianceID, uint32 MemberID);
	void ServerRequestMySpawnPoints(int32 IgnoreBedID, class UClass* FilterClass);
	void ServerRequestLeaveTribe();
	void ServerRequestLeaveAlliance(uint32 AllianceID);
	void ServerRequestDinoOrderGroups();
	void ServerRequestDemotePlayerInMyTribe(int32 PlayerIndexInTribe);
	void ServerRequestCreateNewTribe(const class FString& TribeName, const struct FTribeGovernment& TribeGovernment);
	void ServerRequestCreateNewPlayer(const struct FPrimalPlayerCharacterConfigStructReplicated& PlayerCharacterConfig);
	void ServerRequestApplyEngramPoints(class UClass* ForItemEntry);
	void ServerRejectTribeWar(int32 EnemyTeamID);
	void ServerGetServerOptions();
	void ServerGetPlayerWhiteListedData();
	void ServerGetPlayerConnectedData();
	void ServerGetPlayerBannedData();
	void ServerGetPlayerAdministratorData();
	void ServerGetAllPlayerNamesAndLocations();
	void ServerGetAlivePlayerConnectedData();
	void ServerDinoOrderGroup_RemoveEntryByIndex(int32 GroupIndex, bool bIsClass, int32 EntryIndex);
	void ServerDinoOrderGroup_Clear(int32 GroupIndex, bool bClearClasses, bool bClearChars);
	void ServerDinoOrderGroup_AddOrRemoveDinoClass(int32 GroupIndex, class UClass* DinoClass, bool bAdd);
	void ServerDinoOrderGroup_AddOrRemoveDinoCharacter(int32 GroupIndex, class APrimalDinoCharacter* DinoCharacter, bool bAdd);
	void ServerDeclareTribeWar(int32 EnemyTeamID, int32 StartDayNum, int32 EndDayNumber, float WarStartTime, float WarEndTime);
	void ServerAcceptTribeWar(int32 EnemyTeamID);
	void SendTribeInviteData(const struct FTribeData& TribeInviteData);
	void OnRep_UpdatedEngrams();
	void NotifyUniqueDinoDownloaded(const class FString& TheDinoName);
	void NotifyUniqueDinoDownloadAllowed(const class FString& TheDinoName);
	void NotifyTribememberLeft(const class FString& ThePlayerName);
	void NotifyTribememberJoined(const class FString& ThePlayerName);
	void NotifyPlayerLeftTribe(const class FString& ThePlayerName, const class FString& TribeName, bool Joinee);
	void NotifyPlayerLeft(const class FString& ThePlayerName);
	void NotifyPlayerJoinedTribe(const class FString& ThePlayerName, const class FString& TribeName, bool Joinee);
	void NotifyPlayerJoined(const class FString& ThePlayerName);
	void IsTribeAdmin(bool ReturnValue);
	void IsInTribe(bool ReturnValue);
	void IsFriendly(int32 OtherTeam, bool ReturnValue);
	void IsDinoInOrderGroup(int32 GroupIndex, class APrimalDinoCharacter* DinoChar, bool ReturnValue);
	void IsDinoClassInOrderGroup(int32 GroupIndex, class UClass* DinoClass, bool ReturnValue);
	void IsAlliedWith(int32 OtherTeam, bool ReturnValue);
	void HasEngram(class UClass* ItemClass, bool ReturnValue);
	void GetUniqueNetIdAsString(const class FString& ReturnValue);
	void GetUniqueIdString(const class FString& ReturnValue);
	void GetTribeId(int32 ReturnValue);
	void GetHexCostToPurchaseNextEngramPoint(int32 ReturnValue);
	void GetDefaultItemSlotClasses(const TArray<class UClass*>& ReturnValue);
	void DoRespec(class UPrimalPlayerData* ForPlayerData, class AShooterCharacter* ForCharacte, bool bSetRespecedAtCharacterLevel);
	void ClientUpdateNewRallyPoint(bool DestroyRallyPoint, const struct FTeamPingData& RallyPointData);
	void ClientRefreshDinoOrderGroup(int32 GroupIndex, const struct FDinoOrderGroup& GroupData, int32 UseCurrentlySelectedGroup);
	void ClientReceiveSpawnPoints(const TArray<struct FSpawnPointInfo>& SpawnPointsInfos);
	void ClientNotifyLevelUpAvailable();
	void ClientGetServerOptions(const struct FServerOptions& Info);
	void ClientGetPlayerWhiteListedData(const TArray<struct FAdminPlayerDataInfo>& List);
	void ClientGetPlayerConnectedData(const TArray<struct FAdminPlayerDataInfo>& List);
	void ClientGetPlayerBannedData(const TArray<struct FAdminPlayerDataInfo>& List);
	void ClientGetPlayerAdministratorData(const TArray<struct FAdminPlayerDataInfo>& List);
	void ClientGetAllPlayerNamesAndLocations(const TArray<struct FAliveNameAndLocation>& List);
	void ClientGetAlivePlayerConnectedData(const TArray<struct FAlivePlayerDataInfo>& List);
	void ClearTribe(bool bDontRemoveFromTribe, bool bForce, class APlayerController* ForPC);
	void BroadcastDeath(class AShooterPlayerState* KillerPlayerState, class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState);
	void AllowTribeGroupPermission(enum class ETribeGroupPermission TribeGroupPermission, class UObject* OnObject, bool ReturnValue);
	void AllowDinoOrderByGroup(class APrimalDinoCharacter* OrderDino, bool ReturnValue);
	void AddToTribe(const struct FTribeData& MyNewTribe, bool bMergeTribe, bool bForce, bool bIsFromInvite, class APlayerController* InviterPC, bool ReturnValue);
};

// 0x0 (0x218 - 0x218)
// Class ShooterGame.ShooterProjectileMovement
class UShooterProjectileMovement : public UProjectileMovementComponent
{
public:

	static class UClass* StaticClass();
	static class UShooterProjectileMovement* GetDefaultObj();

};

// 0x218 (0x9A0 - 0x788)
// Class ShooterGame.ShooterProjectile_Swarm
class AShooterProjectile_Swarm : public AShooterProjectile
{
public:
	class USceneComponent*                       SwarmRoot;                                         // 0x788(0x8)(ZeroConstructor)
	int32                                        SwarmSize;                                         // 0x790(0x4)(None)
	int32                                        SwarmLeaderCount;                                  // 0x794(0x4)(None)
	float                                        BoidCollisionRadius;                               // 0x798(0x4)(None)
	uint8                                        Pad_4198[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoidBehavior                         SwarmBehavior;                                     // 0x7A0(0x40)(None)
	float                                        DynamicAvoidanceDuration;                          // 0x7E0(0x4)(None)
	uint8                                        Pad_4199[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFlockPersistentData                  SwarmPersistentData;                               // 0x7E8(0x38)(None)
	class UParticleSystem*                       SwarmParticleSystem;                               // 0x820(0x8)(ZeroConstructor)
	class FName                                  SwarmOpacityParticleParamName;                     // 0x828(0x8)(None)
	bool                                         bFadeOutSwarmOverProjectileLife;                   // 0x830(0x1)(None)
	uint8                                        Pad_419A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SwarmOpacityFadeTimeOnBoidImpact;                  // 0x834(0x4)(None)
	float                                        LifespanAfterImpact;                               // 0x838(0x4)(None)
	float                                        SwarmDelayedStartTime;                             // 0x83C(0x4)(None)
	float                                        BoidSpawnInterval;                                 // 0x840(0x4)(None)
	float                                        BoidInitialFollowProjectileTime;                   // 0x844(0x4)(None)
	float                                        BoidInitialDisableCollisionTime;                   // 0x848(0x4)(None)
	float                                        SwarmLifetimeAfterPrimaryProjectileDestruction;    // 0x84C(0x4)(None)
	float                                        SwarmSpawnRadius;                                  // 0x850(0x4)(None)
	uint8                                        Pad_419B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             SwarmInitialSpeedRange;                            // 0x858(0x10)(None)
	struct FVector2D                             SwarmMaxSpeedRange;                                // 0x868(0x10)(None)
	struct FVector2D                             SwarmMaxForceRange;                                // 0x878(0x10)(None)
	struct FVector2D                             SwarmTurnRateRange;                                // 0x888(0x10)(None)
	float                                        SwarmTargetRadius;                                 // 0x898(0x4)(None)
	float                                        SwarmTargetHelixSpeed;                             // 0x89C(0x4)(None)
	TArray<struct FBoid>                         SwarmData;                                         // 0x8A0(0x10)(None)
	TArray<class UParticleSystemComponent*>      SwarmComps;                                        // 0x8B0(0x10)(ZeroConstructor)
	TArray<double>                               BoidSpawnTimes;                                    // 0x8C0(0x10)(None)
	TArray<double>                               BoidExplodeTimes;                                  // 0x8D0(0x10)(None)
	TArray<int32>                                FlockingWhitelist;                                 // 0x8E0(0x10)(None)
	bool                                         bUseCrazinessMultiplier;                           // 0x8F0(0x1)(None)
	uint8                                        Pad_419C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrazinessMultiplier;                               // 0x8F4(0x4)(None)
	bool                                         bUseBPGetBoidSpawnLocationAndVelocity;             // 0x8F8(0x1)(None)
	uint8                                        Pad_419D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FProjectileArc                        LaunchArc;                                         // 0x900(0x58)(None)
	double                                       ProjectileSpawnTime;                               // 0x958(0x8)(None)
	float                                        ProjectilePeakTime;                                // 0x960(0x4)(None)
	float                                        ProjectileImpactTime;                              // 0x964(0x4)(None)
	uint8                                        Pad_419E[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterProjectile_Swarm* GetDefaultObj();

	void TimeSinceProjectileSpawn(float ReturnValue);
	void SpawnSwarm();
	void MultiSyncSwarm(const TArray<struct FBoid>& ServerSwarmData);
	void MultiPrimaryProjectileDestroyed(const struct FVector& ImpactLocation, double DestroyNetworkTime);
	void GetNumberOfBoidsInFlight(int32 ReturnValue);
	void DoSwarmSync();
	void BPOnBoidExplode(int32 BoidIndex, class UParticleSystemComponent* BoidParticles, const struct FHitResult& Hit);
	void BPGetBoidSpawnLocationAndVelocity(int32 BoidIndex, const struct FBoid& BoidData, const struct FVector& SpawnLocation, const struct FVector& SpawnVelocity);
};

// 0x0 (0x120 - 0x120)
// Class ShooterGame.ShooterGraphNode_AlwaysRelevant
class UShooterGraphNode_AlwaysRelevant : public UReplicationGraphNode_ActorList
{
public:

	static class UClass* StaticClass();
	static class UShooterGraphNode_AlwaysRelevant* GetDefaultObj();

};

// 0xF0 (0x140 - 0x50)
// Class ShooterGame.ShooterGraphNode_TeamAlwaysRelevant
class UShooterGraphNode_TeamAlwaysRelevant : public UReplicationGraphNode
{
public:
	TMap<int32, class UShooterGraphNode_AlwaysRelevant*> TeamNodes;                                         // 0x50(0x50)(ZeroConstructor)
	uint8                                        Pad_41A1[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGraphNode_TeamAlwaysRelevant* GetDefaultObj();

};

// 0x50 (0x170 - 0x120)
// Class ShooterGame.ShooterGraphNode_Default
class UShooterGraphNode_Default : public UReplicationGraphNode_ActorList
{
public:
	uint8                                        Pad_41A4[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGraphNode_Default* GetDefaultObj();

};

// 0x50 (0x170 - 0x120)
// Class ShooterGame.ShooterGraphNode_StaggeredByDistance
class UShooterGraphNode_StaggeredByDistance : public UReplicationGraphNode_ActorList
{
public:
	uint8                                        Pad_41A5[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGraphNode_StaggeredByDistance* GetDefaultObj();

};

// 0x0 (0x270 - 0x270)
// Class ShooterGame.ShooterGraphNode_BaseSpatialGrid
class UShooterGraphNode_BaseSpatialGrid : public UReplicationGraphNode_GridSpatialization2D
{
public:

	static class UClass* StaticClass();
	static class UShooterGraphNode_BaseSpatialGrid* GetDefaultObj();

};

// 0x0 (0x170 - 0x170)
// Class ShooterGame.ShooterGraphNode_DynamicGridCell
class UShooterGraphNode_DynamicGridCell : public UReplicationGraphNode_GridCell
{
public:

	static class UClass* StaticClass();
	static class UShooterGraphNode_DynamicGridCell* GetDefaultObj();

};

// 0x0 (0x270 - 0x270)
// Class ShooterGame.ShooterGraphNode_DynamicSpatialGrid
class UShooterGraphNode_DynamicSpatialGrid : public UShooterGraphNode_BaseSpatialGrid
{
public:

	static class UClass* StaticClass();
	static class UShooterGraphNode_DynamicSpatialGrid* GetDefaultObj();

};

// 0x50 (0x1C0 - 0x170)
// Class ShooterGame.ShooterGraphNode_DormantGridCell
class UShooterGraphNode_DormantGridCell : public UReplicationGraphNode_GridCell
{
public:
	TSet<class AActor*>                          ActorSet;                                          // 0x170(0x50)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UShooterGraphNode_DormantGridCell* GetDefaultObj();

};

// 0x50 (0x2C0 - 0x270)
// Class ShooterGame.ShooterGraphNode_DormantSpatialGrid
class UShooterGraphNode_DormantSpatialGrid : public UShooterGraphNode_BaseSpatialGrid
{
public:
	uint8                                        Pad_41AC[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterGraphNode_DormantSpatialGrid* GetDefaultObj();

};

// 0x18 (0x388 - 0x370)
// Class ShooterGame.ShooterReplicationConnectionGraph
class UShooterReplicationConnectionGraph : public UNetReplicationGraphConnection
{
public:
	class UShooterGraphNode_AlwaysRelevant*      AlwaysRelevantNode;                                // 0x370(0x8)(ZeroConstructor)
	TArray<class UShooterGraphNode_DormantGridCell*> DormantCells;                                      // 0x378(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UShooterReplicationConnectionGraph* GetDefaultObj();

};

// 0x50 (0x5C0 - 0x570)
// Class ShooterGame.ShooterReplicationGraph
class UShooterReplicationGraph : public UReplicationGraph
{
public:
	float                                        DynamicCellSize;                                   // 0x570(0x4)(None)
	float                                        DormantCellSize;                                   // 0x574(0x4)(None)
	float                                        DistanceMultiplier;                                // 0x578(0x4)(None)
	uint8                                        Pad_41AD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableSpatialRebuilds;                            // 0x580(0x1)(None)
	uint8                                        Pad_41AE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UShooterGraphNode_DynamicSpatialGrid*  DynamicGrid;                                       // 0x588(0x8)(ZeroConstructor)
	class UShooterGraphNode_DormantSpatialGrid*  DormantGrid;                                       // 0x590(0x8)(ZeroConstructor)
	class UShooterGraphNode_Default*             DefaultBehaviorNode;                               // 0x598(0x8)(ZeroConstructor)
	class UShooterGraphNode_AlwaysRelevant*      AlwaysRelevantNode;                                // 0x5A0(0x8)(ZeroConstructor)
	class UShooterGraphNode_TeamAlwaysRelevant*  TeamAlwaysRelevantNode;                            // 0x5A8(0x8)(ZeroConstructor)
	uint8                                        Pad_41AF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UShooterReplicationGraph* GetDefaultObj();

};

// 0x78 (0x610 - 0x598)
// Class ShooterGame.ShooterSpectatorPawn
class AShooterSpectatorPawn : public ASpectatorPawn
{
public:
	uint8                                        Pad_41B5[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxOrbitRadius;                                    // 0x5B0(0x4)(None)
	float                                        MinOrbitRadius;                                    // 0x5B4(0x4)(None)
	uint8                                        Pad_41B6[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AActor>                 CurrentOrbitCamTarget;                             // 0x5E0(0x8)(ZeroConstructor)
	uint8                                        Pad_41B7[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterSpectatorPawn* GetDefaultObj();

	void SpectatorIncreaseBaseSpeedStart();
	void SpectatorIncreaseBaseSpeedEnd();
	void SpectatorDecreaseBaseSpeedStart();
	void SpectatorDecreaseBaseSpeedEnd();
	void SetSavedSpectatorPositionForIndex(int32 Index, const struct FVector& Position, const struct FRotator& Rotation);
	void SaveSpectatorPositionForIndex(int32 Index);
	void OrbitCamOff();
	void LoadSpectatorPositionFromIndex(int32 Index);
	void GetSavedSpectatorPositions(const TArray<struct FVector>& Positions, const TArray<struct FRotator>& Rotations);
	void BPOrbitCamOn(class AActor* OrbitTarget);
};

// 0xB0 (0x10E8 - 0x1038)
// Class ShooterGame.ShooterWeapon_FlameThrower
class AShooterWeapon_FlameThrower : public AShooterWeapon
{
public:
	int32                                        InstantDamageAmount;                               // 0x1038(0x4)(None)
	float                                        DamageTestSphereRadius;                            // 0x103C(0x4)(None)
	float                                        DamageTestBoxExtentSide;                           // 0x1040(0x4)(None)
	float                                        DamageTestMuzzleOffset;                            // 0x1044(0x4)(None)
	float                                        FlameHurtMaxDistance;                              // 0x1048(0x4)(None)
	uint8                                        Pad_41B8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       DamageImpactPoints;                                // 0x1050(0x10)(None)
	struct FVector                               MuzzleDirectionOffset;                             // 0x1060(0x18)(None)
	enum class ETickingGroup                     MuzzlePSCTickGroupOverride;                        // 0x1078(0x1)(None)
	uint8                                        Pad_41B9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseMuzzlePSCTickGroupOverride : 1;                // Mask: 0x1, PropSize: 0x10x107C(0x1)(None)
	uint8                                        BitPad_3C7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_41BA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                FlameThrowerFXDefaultColor;                        // 0x1080(0x4)(None)
	uint8                                        Pad_41BB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DamageType;                                        // 0x1088(0x8)(ZeroConstructor)
	class UParticleSystem*                       FlameThrowerFX;                                    // 0x1090(0x8)(ZeroConstructor)
	class UParticleSystem*                       FlameThrowerFX_FPV;                                // 0x1098(0x8)(ZeroConstructor)
	class UParticleSystem*                       OnFireFX;                                          // 0x10A0(0x8)(ZeroConstructor)
	class UParticleSystem*                       HarvestFX;                                         // 0x10A8(0x8)(ZeroConstructor)
	uint8                                        Pad_41BC[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShotDelay;                                         // 0x10C0(0x4)(None)
	uint8                                        Pad_41BD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FXDelay;                                           // 0x10C8(0x4)(None)
	uint8                                        Pad_41BE[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMuzzlePSC_IsTPV : 1;                              // Mask: 0x1, PropSize: 0x10x10E0(0x1)(None)
	uint8                                        Pad_41BF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_FlameThrower* GetDefaultObj();

	void TickShootFX();
	void StopShootFX();
	void SpawnImpactEffects();
	void ServerTickShootFX();
	void ServerStopShootFX();
	void ServerBeginShootFX();
	void EndFXDelay();
	void ClientSpawnHarvestFX(const TArray<struct FVector>& Impacts);
	void BPSpawnHarvestEffects(const TArray<struct FVector>& Impacts);
	void BeginShootFX();
};

// 0xE8 (0x11D0 - 0x10E8)
// Class ShooterGame.ShooterWeapon_Activated
class AShooterWeapon_Activated : public AShooterWeapon_FlameThrower
{
public:
	uint8                                        bIsActivated : 1;                                  // Mask: 0x1, PropSize: 0x10x10E8(0x1)(None)
	uint8                                        BitPad_3C8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_41CD[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FWeaponAnim>                   ActivateAnim;                                      // 0x10F8(0x10)(ZeroConstructor)
	TArray<struct FWeaponAnim>                   DeactivateAnim;                                    // 0x1108(0x10)(ZeroConstructor)
	struct FWeaponAnim                           StopFireAnim;                                      // 0x1118(0x10)(ZeroConstructor)
	struct FWeaponAnim                           MovementFireAnim;                                  // 0x1128(0x10)(ZeroConstructor)
	uint8                                        Pad_41CE[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDamagePawns;                                      // 0x1140(0x1)(None)
	uint8                                        Pad_41CF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ActivateCameraShake;                               // 0x1148(0x8)(ZeroConstructor)
	float                                        ActivateCameraShakeSpeedScale;                     // 0x1150(0x4)(None)
	uint8                                        Pad_41D0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FireOrigin;                                        // 0x1158(0x18)(None)
	struct FVector                               FireDirection;                                     // 0x1170(0x18)(None)
	struct FVector                               TargetLocation;                                    // 0x1188(0x18)(None)
	class FName                                  BeamTargetParameterName;                           // 0x11A0(0x8)(None)
	class USoundCue*                             FireLoopSound;                                     // 0x11A8(0x8)(ZeroConstructor)
	class UAudioComponent*                       FireLoopAC;                                        // 0x11B0(0x8)(ZeroConstructor)
	class USoundCue*                             IdleSound;                                         // 0x11B8(0x8)(ZeroConstructor)
	class UAudioComponent*                       IdleAC;                                            // 0x11C0(0x8)(ZeroConstructor)
	class USoundCue*                             EmptySound;                                        // 0x11C8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AShooterWeapon_Activated* GetDefaultObj();

	void ServerPreFire(const struct FVector& Origin, const struct FVector& ShootDir);
	void ServerCancelActivation();
	void ServerActivateWeapon(bool bActivate, int32 NAnimIndex);
	void IsActivationAnimPlaying(bool ReturnValue);
	void HandleActivation(bool bActive);
	void GetBeamTarget(const struct FVector& ReturnValue);
	void EndActivationAnim();
	void ClientHandleActivation(bool bActivate);
	void ClientActivateWeapon(bool bActivate);
	void BPPreFireEvent(const struct FVector& Origin, const struct FVector& ShootDir);
	void ActivateWeapon(bool bActivate, int32 NAnimIndex);
};

// 0x38 (0x1070 - 0x1038)
// Class ShooterGame.ShooterWeapon_ChainSaw
class AShooterWeapon_ChainSaw : public AShooterWeapon
{
public:
	TArray<struct FWeaponAnim>                   ShootAnimList;                                     // 0x1038(0x10)(ZeroConstructor)
	TArray<struct FWeaponAnim>                   ShootWithHitAnimList;                              // 0x1048(0x10)(ZeroConstructor)
	class USoundCue*                             IdleSound;                                         // 0x1058(0x8)(ZeroConstructor)
	class UAudioComponent*                       IdleAC;                                            // 0x1060(0x8)(ZeroConstructor)
	uint8                                        Pad_41D8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_ChainSaw* GetDefaultObj();

	void ServerStopFireAnim();
	void ServerReloadWeapon();
	void ServerHit();
	void ClientSimulateChangeFireAnim();
};

// 0x740 (0x1780 - 0x1040)
// Class ShooterGame.ShooterWeapon_Climb
class AShooterWeapon_Climb : public AShooterWeapon_Melee
{
public:
	float                                        MinStaminaToClimb;                                 // 0x1040(0x4)(None)
	uint8                                        ClimbingMode;                                      // 0x1044(0x1)(None)
	uint8                                        PreviousClimbingMode;                              // 0x1045(0x1)(None)
	uint8                                        ClimbingType;                                      // 0x1046(0x1)(None)
	uint8                                        CurrentClimbingMovementType;                       // 0x1047(0x1)(None)
	uint8                                        bClimbingLeftArm : 1;                              // Mask: 0x1, PropSize: 0x10x1048(0x1)(None)
	uint8                                        bInitialAttach : 1;                                // Mask: 0x2, PropSize: 0x10x1048(0x1)(None)
	uint8                                        bEarthquakeLocked : 1;                             // Mask: 0x4, PropSize: 0x10x1048(0x1)(None)
	uint8                                        BitPad_3C9 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_4216[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector_NetQuantize100                ClimbingAnchorPosition;                            // 0x1050(0x18)(None)
	struct FVector_NetQuantizeNormal             ClimbingAnchorNormal;                              // 0x1068(0x18)(None)
	uint8                                        Pad_4217[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PreviousClimbingAnchorPosition;                    // 0x1088(0x18)(None)
	struct FVector                               PreviousClimbingAnchorNormal;                      // 0x10A0(0x18)(None)
	struct FVector                               ClimbingDirection;                                 // 0x10B8(0x18)(None)
	struct FVector                               ClimbingAnchorDirection;                           // 0x10D0(0x18)(None)
	float                                        ClimbingOvershootTime;                             // 0x10E8(0x4)(None)
	float                                        ClimbingLookingToSide;                             // 0x10EC(0x4)(None)
	class USoundCue*                             ClimbLowStaminaLoopSC;                             // 0x10F0(0x8)(ZeroConstructor)
	class UAudioComponent*                       ClimbLowStaminaLoopAC;                             // 0x10F8(0x8)(ZeroConstructor)
	float                                        ClimbLowStaminaPercentagePlaySound;                // 0x1100(0x4)(None)
	uint8                                        Pad_4218[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FClimbingAnims                        ClimbAnims;                                        // 0x1108(0x400)(ZeroConstructor)
	struct FWeaponAnim                           TurnLeftAnim;                                      // 0x1508(0x10)(ZeroConstructor)
	struct FWeaponAnim                           TurnRightAnim;                                     // 0x1518(0x10)(ZeroConstructor)
	struct FWeaponAnim                           TurnLeftAnimHanging;                               // 0x1528(0x10)(ZeroConstructor)
	struct FWeaponAnim                           TurnRightAnimHanging;                              // 0x1538(0x10)(ZeroConstructor)
	class UAnimSequence*                         RightClimbingAnimation;                            // 0x1548(0x8)(ZeroConstructor)
	class UAnimSequence*                         LeftClimbingAnimation;                             // 0x1550(0x8)(ZeroConstructor)
	class UAnimSequence*                         RightClimbingHangAnimation;                        // 0x1558(0x8)(ZeroConstructor)
	class UAnimSequence*                         LeftClimbingHangAnimation;                         // 0x1560(0x8)(ZeroConstructor)
	class UAnimSequence*                         InventoryRightClimbAnimation;                      // 0x1568(0x8)(ZeroConstructor)
	class UAnimSequence*                         InventoryLeftClimbAnimation;                       // 0x1570(0x8)(ZeroConstructor)
	class UAnimSequence*                         InventoryRightClimbHangAnimation;                  // 0x1578(0x8)(ZeroConstructor)
	class UAnimSequence*                         InventoryLeftClimbHangAnimation;                   // 0x1580(0x8)(ZeroConstructor)
	struct FWeaponAnim                           SlideDownLeftAnim;                                 // 0x1588(0x10)(ZeroConstructor)
	struct FWeaponAnim                           SlideDownRightAnim;                                // 0x1598(0x10)(ZeroConstructor)
	class FName                                  LeftMesh1PComponentName;                           // 0x15A8(0x8)(None)
	class FName                                  RightMesh1PComponentName;                          // 0x15B0(0x8)(None)
	class FName                                  LeftMesh3PComponentName;                           // 0x15B8(0x8)(None)
	class FName                                  RightMesh3PComponentName;                          // 0x15C0(0x8)(None)
	class FName                                  LeftPickAttachPoint3P;                             // 0x15C8(0x8)(None)
	class UStaticMeshComponent*                  LeftMesh1P;                                        // 0x15D0(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  RightMesh1P;                                       // 0x15D8(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  LeftMesh3P;                                        // 0x15E0(0x8)(ZeroConstructor)
	class UStaticMeshComponent*                  RightMesh3P;                                       // 0x15E8(0x8)(ZeroConstructor)
	class UClass*                                ClimbPickHitCameraShake;                           // 0x15F0(0x8)(ZeroConstructor)
	struct FBiomeZoneImpactEffect                LeftClimbImpactEffects;                            // 0x15F8(0x80)(ZeroConstructor)
	struct FBiomeZoneImpactEffect                RightClimbImpactEffects;                           // 0x1678(0x80)(ZeroConstructor)
	class FName                                  ImpactSocketName;                                  // 0x16F8(0x8)(None)
	int32                                        MaxSpawnedImpactEffects;                           // 0x1700(0x4)(None)
	uint8                                        ServerCurrentClimbingType;                         // 0x1704(0x1)(None)
	uint8                                        Pad_4219[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ServerCurrentClimbingDirection;                    // 0x1708(0x18)(None)
	float                                        UpdatingDirectionTime;                             // 0x1720(0x4)(None)
	uint8                                        Pad_421A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        ActiveImpactEffects;                               // 0x1728(0x10)(ZeroConstructor)
	class UClass*                                ClimbingSettingsClass;                             // 0x1738(0x8)(ZeroConstructor)
	class UCameraModifier*                       ActiveCameraModifer;                               // 0x1740(0x8)(ZeroConstructor)
	float                                        ClimbingMinAttachedDurationBeforeAllowingDetach;   // 0x1748(0x4)(None)
	uint8                                        Pad_421B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ClimbingLastAttachedStartedTime;                   // 0x1750(0x8)(None)
	uint8                                        Pad_421C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasAValidClimbingTarget;                          // 0x175C(0x1)(None)
	uint8                                        Pad_421D[0x23];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Climb* GetDefaultObj();

	void ShouldShowTargetingArray(bool ReturnValue);
	void SetClimbingAnchorPoint(uint8 Type, uint8 Mode, const struct FVector_NetQuantize100& Direction, const struct FVector_NetQuantize100& Position, const struct FVector_NetQuantizeNormal& Normal);
	void ServerSetClimbingLeftArm(bool ClimbingLeftArm);
	void ServerRequestClimbMove(uint8 Type, const struct FVector& Direction, bool ClimbingLeftArm);
	void ServerReleaseClimbingAnchor(bool bWithJump, const struct FVector_NetQuantizeNormal& InputDir, bool bForceMinTimeCheckBeforeReleasing);
	void ServerPerformTurn(bool ClimbingLeftArm);
	void ReleaseClimbingAnchor(bool bWithJump, const struct FVector& InputDir, bool bForceMinTimeCheckBeforeReleasing);
	void IsClimbingUp(bool ReturnValue);
	void IsClimbingHanging(bool ReturnValue);
	void GetViewLocation(const struct FVector& ReturnValue);
	void GetViewDirection(const struct FVector& ReturnValue);
	void ClimbTrace(const struct FHitResult& HitResult, uint8 Type, const struct FVector& Direction, enum class ECollisionChannel Channel, bool ReturnValue);
	void ClientNotifyNoClimbSurface();
	void CanLandOnSurface(const struct FHitResult& HitResult, bool ReturnValue);
	void CanClimbOnSurface(const struct FHitResult& HitResult, bool ReturnValue);
	void BPUpdateClimbTarget(float DeltaSeconds, bool bClimbing, const struct FVector& AnchorPosition, const struct FVector& AnchorNormal, bool bCanClimb, bool bCanLand, const struct FVector& ClimbLocation, const struct FVector& ClimbNormal, bool bHudVisible);
};

// 0x48 (0x1080 - 0x1038)
// Class ShooterGame.ShooterWeapon_Instant
class AShooterWeapon_Instant : public AShooterWeapon
{
public:
	uint8                                        Pad_4251[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       TrailFX;                                           // 0x1040(0x8)(ZeroConstructor)
	class UParticleSystem*                       TrailFX_Local;                                     // 0x1048(0x8)(ZeroConstructor)
	class FName                                  TrailTargetParam;                                  // 0x1050(0x8)(None)
	float                                        OriginCheckDistance;                               // 0x1058(0x4)(None)
	uint8                                        Pad_4252[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumTracesPerShot;                                  // 0x1070(0x4)(None)
	uint8                                        Pad_4253[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPlayFireSoundOnInstantHit : 1;                    // Mask: 0x1, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bExecSpread : 1;                                   // Mask: 0x2, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bFireFromMuzzle : 1;                               // Mask: 0x4, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bPreventSimulatingMultipleShots : 1;               // Mask: 0x8, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bPerformObstructionCheck : 1;                      // Mask: 0x10, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bSpawnTrailToHit : 1;                              // Mask: 0x20, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bClampTrailToMaxWeaponRange : 1;                   // Mask: 0x40, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bUseBPSpawnImpactEffects : 1;                      // Mask: 0x80, PropSize: 0x10x1078(0x1)(None)
	uint8                                        bAllowNativeWithSpawnedImpacts : 1;                // Mask: 0x1, PropSize: 0x10x1079(0x1)(None)
	uint8                                        bRotateTrailFXByFireDirection : 1;                 // Mask: 0x2, PropSize: 0x10x1079(0x1)(None)
	uint8                                        bAttachTrailFXToFirstPersonMuzzle : 1;             // Mask: 0x4, PropSize: 0x10x1079(0x1)(None)
	uint8                                        bUseBPGetCurrentSpread : 1;                        // Mask: 0x8, PropSize: 0x10x1079(0x1)(None)
	uint8                                        bUseBPKillImpactEffects : 1;                       // Mask: 0x10, PropSize: 0x10x1079(0x1)(None)
	uint8                                        Pad_4256[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Instant* GetDefaultObj();

	void SimulateInstantHit(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bForceOnLocal, int32 ShotIndex);
	void ServerNotifyShotOrigin(const struct FVector& Origin, const TArray<struct FHitResult>& Impacts, const TArray<struct FVector_NetQuantizeNormal>& ShootDirs);
	void ServerNotifyShot(const TArray<struct FHitResult>& Impacts, const TArray<struct FVector_NetQuantizeNormal>& ShootDirs);
	void ServerForceShot(const struct FHitResult& Impact, const struct FVector& StartShotLoc, const struct FVector& EndShotLoc);
	void NetSimulateForceShot(const struct FVector& ShotOrigin, const struct FVector& ShootDir);
	void GetFireLocationAndDirection(const struct FVector& Location, const struct FVector& Direction);
	void GetCurrentSpread(float ReturnValue);
	void CheckRefireTimer();
	void BPSpawnImpactEffects(const struct FHitResult& Impact, const struct FVector& ShootDir, bool bIsEntryHit, float WeaponMaxRange);
	void BPPostSpawnTrailEffect(class UParticleSystemComponent* TrailPSC, const struct FVector& StartPoint, const struct FVector& EndPoint);
	void BPKillImpactEffects();
	void BPGetCurrentSpread(float ReturnValue);
};

// 0x10 (0x1090 - 0x1080)
// Class ShooterGame.ShooterWeapon_InstantCharging
class AShooterWeapon_InstantCharging : public AShooterWeapon_Instant
{
public:
	uint8                                        bDidFireWeapon : 1;                                // Mask: 0x1, PropSize: 0x10x1080(0x1)(None)
	uint8                                        BitPad_3CA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_4257[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ChargeStartTime;                                   // 0x1088(0x8)(None)

	static class UClass* StaticClass();
	static class AShooterWeapon_InstantCharging* GetDefaultObj();

	void ServerSetCharging(double StartTime);
};

// 0x68 (0x10E8 - 0x1080)
// Class ShooterGame.ShooterWeapon_InstantPenetrating
class AShooterWeapon_InstantPenetrating : public AShooterWeapon_Instant
{
public:
	float                                        MaxPenetrationTraceDistance;                       // 0x1080(0x4)(None)
	float                                        PenaltyPerPenetration;                             // 0x1084(0x4)(None)
	float                                        PenaltyPerUnrealUnit;                              // 0x1088(0x4)(None)
	bool                                         bUseBPStopPenetratingAtHit;                        // 0x108C(0x1)(None)
	uint8                                        Pad_4269[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDebugPenetration : 1;                             // Mask: 0x1, PropSize: 0x10x1090(0x1)(None)
	uint8                                        Pad_426A[0x57];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_InstantPenetrating* GetDefaultObj();

	void WeaponPenetrationTrace(const struct FVector& Start, const struct FVector& End, bool FilterVisuals, bool bDebugDraw, float DebugDrawDuration, const TArray<struct FHitResult>& HitResults, const TArray<bool>& IsEntryHit, float MaxDistance);
	void PassiveUseAmmo(int32 Amount, int32 ReturnValue);
	void BPStopPenetratingAtHit(const struct FHitResult& CurrentHit, bool bIsEntryHit, float CurrentDistance, float CurrentMaxDistance, bool ReturnValue);
};

// 0xE8 (0x1128 - 0x1040)
// Class ShooterGame.ShooterWeapon_MeleeLock
class AShooterWeapon_MeleeLock : public AShooterWeapon_Melee
{
public:
	uint8                                        Pad_426F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockValue;                                         // 0x1048(0x4)(None)
	float                                        LockVFXValue;                                      // 0x104C(0x4)(None)
	double                                       LastAttackTime;                                    // 0x1050(0x8)(None)
	double                                       LastHitTime;                                       // 0x1058(0x8)(None)
	bool                                         HitThisAttack;                                     // 0x1060(0x1)(None)
	uint8                                        Pad_4270[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockDecayValue;                                    // 0x1064(0x4)(None)
	float                                        LockHitIncrement;                                  // 0x1068(0x4)(None)
	float                                        LockMissDecrement;                                 // 0x106C(0x4)(None)
	enum class ESimpleCurve                      AnimationRateCurve;                                // 0x1070(0x1)(None)
	uint8                                        Pad_4271[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinAnimationRate;                                  // 0x1074(0x4)(None)
	float                                        MaxAnimationRate;                                  // 0x1078(0x4)(None)
	enum class ESimpleCurve                      DamageCurve;                                       // 0x107C(0x1)(None)
	uint8                                        Pad_4272[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDamageMultiplier;                               // 0x1080(0x4)(None)
	float                                        MaxDamageMultiplier;                               // 0x1084(0x4)(None)
	TSoftClassPtr<class APrimalBuff>             TargetBuff_MaxDamage;                              // 0x1088(0x30)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             OwnerBuff_MaxDamage;                               // 0x10B8(0x30)(ZeroConstructor)
	float                                        LockTurnRate;                                      // 0x10E8(0x4)(None)
	float                                        MinPullDistance;                                   // 0x10EC(0x4)(None)
	float                                        MaxPullDistance;                                   // 0x10F0(0x4)(None)
	float                                        MaxTargetDistance;                                 // 0x10F4(0x4)(None)
	float                                        TargetAngle;                                       // 0x10F8(0x4)(None)
	float                                        MaxLockTime;                                       // 0x10FC(0x4)(None)
	float                                        AttackMoveSpeed;                                   // 0x1100(0x4)(None)
	float                                        AttackAirImpulse;                                  // 0x1104(0x4)(None)
	float                                        AttackMoveDuration;                                // 0x1108(0x4)(None)
	float                                        MaxPowerThreshold;                                 // 0x110C(0x4)(None)
	uint8                                        Pad_4273[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSteppingEnabled;                                  // 0x1124(0x1)(None)
	uint8                                        Pad_4274[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_MeleeLock* GetDefaultObj();

	void OnRep_LockValue();
	void EndMeleeAttack();
};

// 0x80 (0x10B8 - 0x1038)
// Class ShooterGame.ShooterWeapon_Placer
class AShooterWeapon_Placer : public AShooterWeapon
{
public:
	class UClass*                                StructureToPlace;                                  // 0x1038(0x8)(ZeroConstructor)
	struct FWeaponAnim                           SecondaryActionAnim;                               // 0x1040(0x10)(ZeroConstructor)
	struct FWeaponAnim                           UnableToPlaceAnim;                                 // 0x1050(0x10)(ZeroConstructor)
	struct FWeaponAnim                           PlaceOnSelfAnim;                                   // 0x1060(0x10)(ZeroConstructor)
	struct FWeaponAnim                           EquipItemAnim;                                     // 0x1070(0x10)(ZeroConstructor)
	uint8                                        bCanDetonateExplosives : 1;                        // Mask: 0x1, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bHideLeftArmFPVWhenNoAmmo : 1;                     // Mask: 0x2, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bPlaySecondaryActionAnim : 1;                      // Mask: 0x4, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bUseAnimNotifyToPlaceStructure : 1;                // Mask: 0x8, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bModifyDetonatorMaterial : 1;                      // Mask: 0x10, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bPlacingStructureConsumeItemAmmo : 1;              // Mask: 0x20, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bDontPlaceStructureOnFire : 1;                     // Mask: 0x40, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bUseBPSecondaryAction : 1;                         // Mask: 0x80, PropSize: 0x10x1080(0x1)(None)
	uint8                                        bUseBPPreFireAction : 1;                           // Mask: 0x1, PropSize: 0x10x1081(0x1)(None)
	uint8                                        bSkipStartPlacingCheatCheck : 1;                   // Mask: 0x2, PropSize: 0x10x1081(0x1)(None)
	uint8                                        BitPad_3CB : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_4275[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeToHideLeftArmFPV;                              // 0x1084(0x4)(None)
	class FName                                  ExplosiveBoneName;                                 // 0x1088(0x8)(None)
	class USkeletalMeshComponent*                ItemToPlace3P;                                     // 0x1090(0x8)(ZeroConstructor)
	class FName                                  ItemAttachPoint3P;                                 // 0x1098(0x8)(None)
	float                                        DetonateExplosivesMaxRadius;                       // 0x10A0(0x4)(None)
	bool                                         ChangeMaterialDiffrentBehaviour;                   // 0x10A4(0x1)(None)
	bool                                         bHiddenExplosive;                                  // 0x10A5(0x1)(None)
	bool                                         bWaitingForPlacement;                              // 0x10A6(0x1)(None)
	uint8                                        Pad_4276[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlacementWaitTimeFromEquip;                        // 0x10A8(0x4)(None)
	float                                        MinimumTimeBetweenPlacements;                      // 0x10AC(0x4)(None)
	uint8                                        Pad_4277[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Placer* GetDefaultObj();

	void ServerDetonateExplosives();
	void PlaceStructureWithSecondaryAction();
	void GetPlacementOrigin(const struct FVector& OriginLocation, const struct FRotator& OriginRotation);
	void BPSecondaryAction(bool ReturnValue);
	void BPPrefireAction();
};

// 0x60 (0x10A0 - 0x1040)
// Class ShooterGame.ShooterWeapon_Whip
class AShooterWeapon_Whip : public AShooterWeapon_Melee
{
public:
	class UClass*                                StunBuff;                                          // 0x1040(0x8)(ZeroConstructor)
	class UClass*                                BlockedByShieldBuff;                               // 0x1048(0x8)(ZeroConstructor)
	class UClass*                                HerdDinoBuff;                                      // 0x1050(0x8)(ZeroConstructor)
	struct FVector                               HarvestingBoxExtent;                               // 0x1058(0x18)(None)
	struct FVector                               HarvestingWhipTipOffset;                           // 0x1070(0x18)(None)
	float                                        MaxDinoDragWeightToApplyBuff;                      // 0x1088(0x4)(None)
	float                                        MaxFlyerDinoDragWeightToApplyBuff;                 // 0x108C(0x4)(None)
	float                                        DurabilityMultiplierForFriendDinos;                // 0x1090(0x4)(None)
	float                                        DurabilityMultiplierForHarvesting;                 // 0x1094(0x4)(None)
	uint8                                        Pad_4278[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AShooterWeapon_Whip* GetDefaultObj();

};

// 0x0 (0x68 - 0x68)
// Class ShooterGame.SilentDamageType
class USilentDamageType : public UPrimalDamageType
{
public:

	static class UClass* StaticClass();
	static class USilentDamageType* GetDefaultObj();

};

// 0x0 (0x4B8 - 0x4B8)
// Class ShooterGame.HideActorList
class AHideActorList : public AActor
{
public:

	static class UClass* StaticClass();
	static class AHideActorList* GetDefaultObj();

	void HandleHideActorsList(class UObject* WorldContextObject);
	void GetDomeTag(class FName ReturnValue);
	void GetDomeState(enum class EDomeState ReturnValue);
};

// 0x78 (0x530 - 0x4B8)
// Class ShooterGame.SkyBoxLoader
class ASkyBoxLoader : public AHideActorList
{
public:
	TArray<struct FSoftObjectPath>               SkyBoxStringReferences;                            // 0x4B8(0x10)(None)
	TArray<struct FSoftObjectPath>               FogScatterStringReferences;                        // 0x4C8(0x10)(None)
	TArray<struct FSoftObjectPath>               FogLossStringReferences;                           // 0x4D8(0x10)(None)
	TArray<struct FSkyBoxLoadedStatus>           LoadedStatus;                                      // 0x4E8(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    LoadedSkyTextures;                                 // 0x4F8(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    LoadedFogScatterTextures;                          // 0x508(0x10)(ZeroConstructor)
	TArray<class UTexture2D*>                    LoadedFogLossTextures;                             // 0x518(0x10)(ZeroConstructor)
	uint8                                        Pad_427C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASkyBoxLoader* GetDefaultObj();

	void SetSkyTextureIndices(int32 Texture0, int32 Texture1, bool ReturnValue);
	void LoadSkyTextureIndexArray(const TArray<int32>& TextureInices, bool ReturnValue);
	void LoadSkyTextureIndex(int32 TextureIdx, bool ReturnValue);
	void K2_OnTextureIndicesLoaded(const TArray<int32>& TextureIndices);
};

// 0x2E0 (0x798 - 0x4B8)
// Class ShooterGame.SOTFNotification
class ASOTFNotification : public AActor
{
public:
	float                                        NightBloomMultiplier;                              // 0x4B8(0x4)(None)
	float                                        EffectScale;                                       // 0x4BC(0x4)(None)
	struct FVector                               BackgroundOffset;                                  // 0x4C0(0x18)(None)
	class UStaticMesh*                           BackgroundMesh;                                    // 0x4D8(0x8)(ZeroConstructor)
	struct FRotator                              BackgroundRotation;                                // 0x4E0(0x18)(None)
	float                                        BackgroundMeshScale;                               // 0x4F8(0x4)(None)
	float                                        BackgroundMeshDoubleScale;                         // 0x4FC(0x4)(None)
	float                                        PreviewImageBloom;                                 // 0x500(0x4)(None)
	float                                        FadeOutInterval;                                   // 0x504(0x4)(None)
	float                                        FadeInInterval;                                    // 0x508(0x4)(None)
	uint8                                        bAnimateScaling : 1;                               // Mask: 0x1, PropSize: 0x10x50C(0x1)(None)
	uint8                                        BitPad_3CC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_4282[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LightBrightness;                                   // 0x510(0x4)(None)
	uint8                                        Pad_4283[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              LightRotation;                                     // 0x518(0x18)(None)
	float                                        GapBetweenPlayerImages;                            // 0x530(0x4)(None)
	struct FColor                                BannerEliminationTextColor;                        // 0x534(0x4)(None)
	struct FColor                                BannerVictoryTextColor;                            // 0x538(0x4)(None)
	float                                        BannerTextBloom;                                   // 0x53C(0x4)(None)
	float                                        BannerTextFontScale;                               // 0x540(0x4)(None)
	float                                        MinSizePerPlayer;                                  // 0x544(0x4)(None)
	struct FVector                               BannerTextOffset;                                  // 0x548(0x18)(None)
	class FString                                EliminationText;                                   // 0x560(0x10)(None)
	class FString                                VictoryText;                                       // 0x570(0x10)(None)
	float                                        ScrollingTextFadePower;                            // 0x580(0x4)(None)
	float                                        ScrollingTextSpeed;                                // 0x584(0x4)(None)
	float                                        ScrollingTextBloom;                                // 0x588(0x4)(None)
	float                                        ScrollingTextInterval;                             // 0x58C(0x4)(None)
	struct FVector                               ScrollingTextOffset;                               // 0x590(0x18)(None)
	float                                        ScrollingTextLifeTime;                             // 0x5A8(0x4)(None)
	float                                        ScrollingTextDoubleMultiplier;                     // 0x5AC(0x4)(None)
	float                                        ScrollingTextScale;                                // 0x5B0(0x4)(None)
	int32                                        ScrollingTextCount;                                // 0x5B4(0x4)(None)
	struct FColor                                ScrollingTextColor;                                // 0x5B8(0x4)(None)
	uint8                                        Pad_4284[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PreviewCameraLocation;                             // 0x5C0(0x18)(None)
	struct FRotator                              PreviewCameraRotation;                             // 0x5D8(0x18)(None)
	float                                        PreviewCameraFOV;                                  // 0x5F0(0x4)(None)
	uint8                                        Pad_4285[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              PreviewMeshRotation;                               // 0x5F8(0x18)(None)
	enum class ESkyLightSourceType               AmbientSourceType;                                 // 0x610(0x1)(None)
	uint8                                        Pad_4286[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          AmbientCubemap;                                    // 0x618(0x8)(ZeroConstructor)
	struct FColor                                AmbientLightColor;                                 // 0x620(0x4)(None)
	float                                        AmbientBrightness;                                 // 0x624(0x4)(None)
	class UFont*                                 TextFont;                                          // 0x628(0x8)(ZeroConstructor)
	class UMaterial*                             TextMaterial;                                      // 0x630(0x8)(ZeroConstructor)
	struct FRotator                              TextRotation;                                      // 0x638(0x18)(None)
	float                                        PlayerNameFontSize;                                // 0x650(0x4)(None)
	uint8                                        Pad_4287[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PlayerNameOffset;                                  // 0x658(0x18)(None)
	float                                        PlayerNameTextBloom;                               // 0x670(0x4)(None)
	uint8                                        Pad_4288[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DeathReasonOffset;                                 // 0x678(0x18)(None)
	float                                        DeathReasonFontSize;                               // 0x690(0x4)(None)
	struct FColor                                DeathReasonTextColor;                              // 0x694(0x4)(None)
	float                                        DeathReasonTextBloom;                              // 0x698(0x4)(None)
	struct FColor                                PlayerNameTextColor;                               // 0x69C(0x4)(None)
	class UStaticMesh*                           PlayerImageMesh;                                   // 0x6A0(0x8)(ZeroConstructor)
	class USoundCue*                             DeathSound;                                        // 0x6A8(0x8)(ZeroConstructor)
	class USoundCue*                             TribeEliminatedSound;                              // 0x6B0(0x8)(ZeroConstructor)
	class USoundBase*                            PlayerDeathMusic1;                                 // 0x6B8(0x8)(ZeroConstructor)
	class USoundBase*                            PlayerDeathMusic2;                                 // 0x6C0(0x8)(ZeroConstructor)
	class USoundBase*                            TribeEliminationMusic;                             // 0x6C8(0x8)(ZeroConstructor)
	class USoundBase*                            VictoryMusic;                                      // 0x6D0(0x8)(ZeroConstructor)
	float                                        DefaultNotificationInterval;                       // 0x6D8(0x4)(None)
	uint8                                        Pad_428A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSOTFNotificationInfo>         NotificationsQueue;                                // 0x6E0(0x10)(None)
	struct FSOTFNotificationInfo                 CurrentNotification;                               // 0x6F0(0x78)(None)
	TArray<class AShooterCharacter*>             PreviewCharacter;                                  // 0x768(0x10)(ZeroConstructor)
	TArray<class UPreviewImage*>                 PreviewImages;                                     // 0x778(0x10)(ZeroConstructor)
	uint8                                        Pad_428B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASOTFNotification* GetDefaultObj();

	void ComputeHeadHairMorphTargetValue(bool bFemale, uint8 HairIndex, float PercentOfGrowth, float ReturnValue);
	void ComputeFacialHairMorphTargetValue(bool bFemale, uint8 HairIndex, float PercentOfGrowth, float ReturnValue);
	void ColorBG(const struct FLinearColor& ReturnValue);
};

// 0x58 (0x510 - 0x4B8)
// Class ShooterGame.SOTFNotificationDisplay
class ASOTFNotificationDisplay : public AActor
{
public:
	class ASOTFNotification*                     NotificationSystem;                                // 0x4B8(0x8)(ZeroConstructor)
	TArray<struct FScrollingTextInfo>            ScrollableTexts;                                   // 0x4C0(0x10)(ZeroConstructor)
	TArray<struct FPlayerPreviewImage>           CachedPlayerImages;                                // 0x4D0(0x10)(ZeroConstructor)
	struct FBannerTextInfo                       BannerText;                                        // 0x4E0(0x18)(ZeroConstructor)
	double                                       LastScrollingTextActivationTime;                   // 0x4F8(0x8)(None)
	uint8                                        Pad_428C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASOTFNotificationDisplay* GetDefaultObj();

};

// 0x0 (0x48 - 0x48)
// Class ShooterGame.SoundNodeLocalPlayer
class USoundNodeLocalPlayer : public USoundNode
{
public:

	static class UClass* StaticClass();
	static class USoundNodeLocalPlayer* GetDefaultObj();

};

// 0x8 (0x80 - 0x78)
// Class ShooterGame.SoundNodeDelayedRandom
class USoundNodeDelayedRandom : public USoundNodeRandom
{
public:
	class USoundWave*                            RetainedWave;                                      // 0x78(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USoundNodeDelayedRandom* GetDefaultObj();

};

// 0x20 (0x68 - 0x48)
// Class ShooterGame.SoundNodeVehicleEngine
class USoundNodeVehicleEngine : public USoundNode
{
public:
	TArray<struct FVehicleEngineDatum>           EngineSamples;                                     // 0x48(0x10)(None)
	uint8                                        Pad_428D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CurrentRPM;                                        // 0x5C(0x4)(None)
	uint8                                        Pad_428E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class USoundNodeVehicleEngine* GetDefaultObj();

};

// 0x80 (0x810 - 0x790)
// Class ShooterGame.SpawnMapWidget
class USpawnMapWidget : public UCustomCanvasWidget
{
public:
	class UMaterialInstance*                     MI;                                                // 0x790(0x8)(ZeroConstructor)
	bool                                         bDisableMapDrawing;                                // 0x798(0x1)(None)
	bool                                         bDisableMarkersAndSpawnPoints;                     // 0x799(0x1)(None)
	uint8                                        Pad_428F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  FogOfWarTextureParameterName;                      // 0x79C(0x8)(None)
	float                                        TimeToUpdateTooltipForEachSpawnPoint;              // 0x7A4(0x4)(None)
	float                                        SpawnPointAreaToMapAreaPercentage;                 // 0x7A8(0x4)(None)
	uint8                                        Pad_4290[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SpawnPointUITemplate;                              // 0x7B0(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              Map_DynamicMI;                                     // 0x7B8(0x8)(ZeroConstructor)
	class UMaterialInterface*                    RegionMarkerMI;                                    // 0x7C0(0x8)(ZeroConstructor)
	struct FVector2D                             RegionMarkerSize;                                  // 0x7C8(0x10)(None)
	uint8                                        Pad_4294[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UUI_Spawn*                             SpawnUI;                                           // 0x808(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class USpawnMapWidget* GetDefaultObj();

};

// 0x10 (0x1C30 - 0x1C20)
// Class ShooterGame.SpherePostProcessVolume
class ASpherePostProcessVolume : public APostProcessVolume
{
public:
	float                                        SphereVolumeRadius;                                // 0x1C20(0x4)(None)
	uint8                                        Pad_4297[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USphereComponent*                      SphereComponent;                                   // 0x1C28(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ASpherePostProcessVolume* GetDefaultObj();

};

// 0x0 (0x508 - 0x508)
// Class ShooterGame.FoliageInclusionVolume
class AFoliageInclusionVolume : public AVolume
{
public:

	static class UClass* StaticClass();
	static class AFoliageInclusionVolume* GetDefaultObj();

};

// 0x8 (0x4C0 - 0x4B8)
// Class ShooterGame.HierarchicalInstancedStaticMeshActor
class AHierarchicalInstancedStaticMeshActor : public AActor
{
public:
	class UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;                      // 0x4B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AHierarchicalInstancedStaticMeshActor* GetDefaultObj();

};

// 0x4B8 (0xC10 - 0x758)
// Class ShooterGame.StatsPanelWidget
class UStatsPanelWidget : public UPrimalUI
{
public:
	class FName                                  MultiUseButton1Name;                               // 0x758(0x8)(None)
	class FName                                  MultiUseButton2Name;                               // 0x760(0x8)(None)
	class FName                                  MultiUseButton3Name;                               // 0x768(0x8)(None)
	class FName                                  MultiUseButton4Name;                               // 0x770(0x8)(None)
	class FName                                  MultiUseButton5Name;                               // 0x778(0x8)(None)
	class FName                                  MultiUseButton6Name;                               // 0x780(0x8)(None)
	struct FCustomButtonWidgetStyle              DefaultMultiuseButtonExtendedStyle;                // 0x788(0x48)(None)
	struct FButtonStyle                          DefaultMultiuseButtonStyle;                        // 0x7D0(0x3F0)(ZeroConstructor)
	uint8                                        Pad_429B[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatsPanelWidget* GetDefaultObj();

};

// 0x360 (0xF70 - 0xC10)
// Class ShooterGame.StatsPanelWidget_Character
class UStatsPanelWidget_Character : public UStatsPanelWidget
{
public:
	class FName                                  PlayerStatusBoxName;                               // 0xC10(0x8)(None)
	class FName                                  ExperienceBoxName;                                 // 0xC18(0x8)(None)
	class FName                                  UpgradesBoxName;                                   // 0xC20(0x8)(None)
	class FName                                  EquipmentDataListPanelName;                        // 0xC28(0x8)(None)
	class FName                                  DisabledEquipmentPanelName;                        // 0xC30(0x8)(None)
	class FName                                  GenderSwitcherName;                                // 0xC38(0x8)(None)
	class FName                                  NameLabelName;                                     // 0xC40(0x8)(None)
	class FName                                  LevelLabelName;                                    // 0xC48(0x8)(None)
	class FName                                  TribeLabelName;                                    // 0xC50(0x8)(None)
	class FName                                  BiomeRegionLabelName;                              // 0xC58(0x8)(None)
	class FName                                  SpawnRegionLabelName;                              // 0xC60(0x8)(None)
	class FName                                  TameLimitLabelName;                                // 0xC68(0x8)(None)
	class FName                                  ArmorLabelName;                                    // 0xC70(0x8)(None)
	class FName                                  HypothermalInsulationLabelName;                    // 0xC78(0x8)(None)
	class FName                                  HyperthermalInsulationLabelName;                   // 0xC80(0x8)(None)
	class FName                                  HypothermalInsulationNameLabelName;                // 0xC88(0x8)(None)
	class FName                                  HyperthermalInsulationNameLabelName;               // 0xC90(0x8)(None)
	class FName                                  ExperienceBarName;                                 // 0xC98(0x8)(None)
	class FName                                  ExperienceLabelName;                               // 0xCA0(0x8)(None)
	class FName                                  StatWidgetNames[0xC];                              // 0xCA8(0x60)(None)
	class FName                                  ImprintingStatWidgetName;                          // 0xD08(0x8)(None)
	class FName                                  ShowAncestorsButtonName;                           // 0xD10(0x8)(None)
	class FName                                  NumUpgradePointsAvailableLabelName;                // 0xD18(0x8)(None)
	class FName                                  HyperthermalInsulationBoxName;                     // 0xD20(0x8)(None)
	class FName                                  HypothermalInsulationBoxName;                      // 0xD28(0x8)(None)
	class FName                                  TameLimitBoxName;                                  // 0xD30(0x8)(None)
	class FName                                  StatDayValueTextBlockName;                         // 0xD38(0x8)(None)
	class FName                                  StatTimeValueTextBlockName;                        // 0xD40(0x8)(None)
	class FName                                  StatTmpValueTextBlockName;                         // 0xD48(0x8)(None)
	class FName                                  StatWindValueTextBlockName;                        // 0xD50(0x8)(None)
	uint8                                        Pad_429C[0x1E8];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsOnBuffTab;                                      // 0xF40(0x1)(None)
	uint8                                        Pad_429D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimalCharacterStatusComponent*       StatusCharacter;                                   // 0xF48(0x8)(ZeroConstructor)
	uint8                                        Pad_429E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                PanelBuffTemplate;                                 // 0xF60(0x8)(ZeroConstructor)
	uint8                                        Pad_429F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatsPanelWidget_Character* GetDefaultObj();

	void SwitchTabStatsBuff(bool bShowStats);
	void OnSwitchTabStatsBuffBP(bool bShowingStats);
};

// 0x80 (0xC90 - 0xC10)
// Class ShooterGame.StatsPanelWidget_Obelisk
class UStatsPanelWidget_Obelisk : public UStatsPanelWidget
{
public:
	class FName                                  NameLabelName;                                     // 0xC10(0x8)(None)
	class FName                                  DescriptionLabelName;                              // 0xC18(0x8)(None)
	class FName                                  UploadCharacterDataButtonName;                     // 0xC20(0x8)(None)
	class FName                                  TravelToAnotherServerButtonName;                   // 0xC28(0x8)(None)
	class FName                                  RefreshArkButtonName;                              // 0xC30(0x8)(None)
	class FName                                  ArkStorageStatName;                                // 0xC38(0x8)(None)
	class FName                                  ArkDinoStatName;                                   // 0xC40(0x8)(None)
	class FName                                  StorageStatName;                                   // 0xC48(0x8)(None)
	uint8                                        Pad_42A0[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatsPanelWidget_Obelisk* GetDefaultObj();

};

// 0xB0 (0xCC0 - 0xC10)
// Class ShooterGame.StatsPanelWidget_Structure
class UStatsPanelWidget_Structure : public UStatsPanelWidget
{
public:
	class FName                                  EquipmentDataListPanelName;                        // 0xC10(0x8)(None)
	class FName                                  DisabledEquipmentPanelName;                        // 0xC18(0x8)(None)
	class FName                                  StructureNameLabelName;                            // 0xC20(0x8)(None)
	class FName                                  OwnerLabelName;                                    // 0xC28(0x8)(None)
	class FName                                  DescriptionLabelName;                              // 0xC30(0x8)(None)
	class FName                                  HealthStatName;                                    // 0xC38(0x8)(None)
	class FName                                  StorageStatName;                                   // 0xC40(0x8)(None)
	class FName                                  WeightStatName;                                    // 0xC48(0x8)(None)
	uint8                                        Pad_42A1[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatsPanelWidget_Structure* GetDefaultObj();

};

// 0x98 (0x3C8 - 0x330)
// Class ShooterGame.StatWidget
class UStatWidget : public UPrimalUserWidget
{
public:
	class FText                                  StatName;                                          // 0x330(0x18)(None)
	class UTexture2D*                            StatIcon;                                          // 0x348(0x8)(ZeroConstructor)
	uint8                                        Pad_42A2[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  StatTextBlockName;                                 // 0x364(0x8)(None)
	class FName                                  StatValueBlockName;                                // 0x36C(0x8)(None)
	class FName                                  StatImageName;                                     // 0x374(0x8)(None)
	class FName                                  StatBarName;                                       // 0x37C(0x8)(None)
	class FName                                  StatButtonName;                                    // 0x384(0x8)(None)
	uint8                                        Pad_42A3[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UButton*                               StatUpgradeButton;                                 // 0x3B0(0x8)(ZeroConstructor)
	class UWidgetSwitcher*                       PulsatingSwitcher;                                 // 0x3B8(0x8)(ZeroConstructor)
	uint8                                        Pad_42A4[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStatWidget* GetDefaultObj();

	void ClickedButton(class UWidget* ClickedWidget);
};

// 0x110 (0x8A0 - 0x790)
// Class ShooterGame.StoreItemWidget
class UStoreItemWidget : public UCustomCanvasWidget
{
public:
	float                                        ItemPrice;                                         // 0x790(0x4)(None)
	uint8                                        Pad_42A5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ItemName;                                          // 0x798(0x10)(None)
	uint8                                        Pad_42A6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           ItemIcon;                                          // 0x7B0(0xD0)(ZeroConstructor)
	struct FSlateColor                           ForegroundColor;                                   // 0x880(0x14)(None)
	float                                        PriceOffset;                                       // 0x894(0x4)(None)
	float                                        NameOffset;                                        // 0x898(0x4)(None)
	uint8                                        Pad_42A7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStoreItemWidget* GetDefaultObj();

};

// 0xE8 (0x1A0 - 0xB8)
// Class ShooterGame.StructurePaintingComponent
class UStructurePaintingComponent : public UActorComponent
{
public:
	uint8                                        Pad_42A9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PaintingSizeX;                                     // 0xC8(0x4)(None)
	int32                                        PaintingSizeY;                                     // 0xCC(0x4)(None)
	TArray<struct FColor>                        ColorTable;                                        // 0xD0(0x10)(None)
	int32                                        PaintingTextureUVIndex;                            // 0xE0(0x4)(None)
	int32                                        PaintingRevision;                                  // 0xE4(0x4)(None)
	int32                                        UniquePaintingId;                                  // 0xE8(0x4)(None)
	uint8                                        Pad_42AA[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              PreviewCameraRotation;                             // 0xF0(0x18)(None)
	struct FVector                               PreviewCameraPivotOffset;                          // 0x108(0x18)(None)
	float                                        PreviewCameraDistanceScaleFactor;                  // 0x120(0x4)(None)
	float                                        PreviewCameraDefaultZoomMultiplier;                // 0x124(0x4)(None)
	float                                        PreviewCameraMaxZoomMultiplier;                    // 0x128(0x4)(None)
	uint8                                        bMultiplicativeBlending : 1;                       // Mask: 0x1, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bMirroredTexCoordU : 1;                            // Mask: 0x2, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bIsExtraDinoSaddleCanvas : 1;                      // Mask: 0x4, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bApplyRootBoneTranslationsWhenPainting : 1;        // Mask: 0x8, PropSize: 0x10x12C(0x1)(None)
	uint8                                        bSaveToTribeFlagPainting : 1;                      // Mask: 0x10, PropSize: 0x10x12C(0x1)(None)
	uint8                                        BitPad_3CD : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42AB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  PaintingTextureParamName;                          // 0x130(0x8)(None)
	double                                       LastStreamRequestTime;                             // 0x138(0x8)(None)
	uint8                                        Pad_42AC[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPaintingTextureSet;                              // 0x180(0x10)(ZeroConstructor)
	bool                                         ForceReplicateToServer;                            // 0x190(0x1)(None)
	uint8                                        Pad_42AD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                TransparencyReplacedWithBackgroundColor;           // 0x194(0x4)(None)
	uint8                                        Pad_42AE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructurePaintingComponent* GetDefaultObj();

	void UnloadExtraPaintingComponent();
	void TryPaintExtraPaintingComponent();
	void SaveLocalPainting(const class FString& Filename, const class FString& PaintingClass, bool OverrideExisting, bool ReturnValue);
	void OnRep_PaintingRevision();
	void OnRep_PaintingId(int32 PrevUniquePaintingId);
	void HasPaintingTexture(bool ReturnValue);
	void ClientPaint(class AShooterPlayerController* Painter, const TArray<struct FPaintItem>& Paints);
};

// 0x40 (0x548 - 0x508)
// Class ShooterGame.StructurePreventionZoneVolume
class AStructurePreventionZoneVolume : public AVolume
{
public:
	uint8                                        bOnlyPreventInPvE : 1;                             // Mask: 0x1, PropSize: 0x10x508(0x1)(None)
	uint8                                        bOnlyPreventInDedicated : 1;                       // Mask: 0x2, PropSize: 0x10x508(0x1)(None)
	uint8                                        bPreventAllStructures : 1;                         // Mask: 0x4, PropSize: 0x10x508(0x1)(None)
	uint8                                        bDisabled : 1;                                     // Mask: 0x8, PropSize: 0x10x508(0x1)(None)
	uint8                                        BitPad_3CE : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42BF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class APrimalStructure>> OnlyAllowStructuresOfType;                         // 0x510(0x10)(ZeroConstructor)
	uint8                                        bPreventionVolumeForcePreventFlyers : 1;           // Mask: 0x1, PropSize: 0x10x520(0x1)(None)
	uint8                                        bPreventionVolumePreventsFlyers : 1;               // Mask: 0x2, PropSize: 0x10x520(0x1)(None)
	uint8                                        bPreventionVolumeForceAllowFlyers : 1;             // Mask: 0x4, PropSize: 0x10x520(0x1)(None)
	uint8                                        bPreventStructureDamageIncrease : 1;               // Mask: 0x8, PropSize: 0x10x520(0x1)(None)
	uint8                                        bStructurePreventionOnly : 1;                      // Mask: 0x10, PropSize: 0x10x520(0x1)(None)
	uint8                                        bOptionallyEnabled : 1;                            // Mask: 0x20, PropSize: 0x10x520(0x1)(None)
	uint8                                        bForceEnabledWhenAllowCaveBuildingPVPIsFalse : 1;  // Mask: 0x40, PropSize: 0x10x520(0x1)(None)
	uint8                                        bForceOnGenesis : 1;                               // Mask: 0x80, PropSize: 0x10x520(0x1)(None)
	uint8                                        bIsMissionZone : 1;                                // Mask: 0x1, PropSize: 0x10x521(0x1)(None)
	uint8                                        bForceAllowUndergroundCheck : 1;                   // Mask: 0x2, PropSize: 0x10x521(0x1)(None)
	uint8                                        BitPad_3CF : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42C1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StructureDamageMultiplier;                         // 0x524(0x4)(None)
	TArray<class FName>                          ForcePreventStructuresWithTheseTags;               // 0x528(0x10)(None)
	TArray<TSoftClassPtr<class AShooterWeapon>>  PreventUsingWeapons;                               // 0x538(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AStructurePreventionZoneVolume* GetDefaultObj();

	void BPIsWithinAnyStructurePreventionVolume(class UWorld* ForWorld, const struct FVector& AtPoint, bool bCheckDisabled, bool bIsForDamageCheck, bool bIgnoreOptionalVolumes, class AStructurePreventionZoneVolume* ReturnValue);
};

// 0x60 (0x7B8 - 0x758)
// Class ShooterGame.StructureStatWidget
class UStructureStatWidget : public UPrimalUI
{
public:
	class FText                                  StatName;                                          // 0x758(0x18)(None)
	class UTexture2D*                            StatIcon;                                          // 0x770(0x8)(ZeroConstructor)
	class FName                                  StatTextBlockName;                                 // 0x778(0x8)(None)
	class FName                                  StatValueBlockName;                                // 0x780(0x8)(None)
	class FName                                  StatImageName;                                     // 0x788(0x8)(None)
	class FName                                  StatBarName;                                       // 0x790(0x8)(None)
	uint8                                        Pad_42C2[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UStructureStatWidget* GetDefaultObj();

};

// 0x48 (0x500 - 0x4B8)
// Class ShooterGame.SupplyCrateSpawningSettings
class ASupplyCrateSpawningSettings : public AActor
{
public:
	TArray<struct FSupplyCrateSpawnEntry>        LinkedSupplyCrateEntries;                          // 0x4B8(0x10)(ZeroConstructor)
	uint8                                        bUseSpawnPointWeights : 1;                         // Mask: 0x1, PropSize: 0x10x4C8(0x1)(None)
	uint8                                        BitPad_3D0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42C3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxNumCrates;                                      // 0x4CC(0x4)(None)
	float                                        DelayBeforeFirstCrate;                             // 0x4D0(0x4)(None)
	float                                        MaxDelayBeforeFirstCrate;                          // 0x4D4(0x4)(None)
	int32                                        ZoneVolumeMaxNumberOfNPCBuffer;                    // 0x4D8(0x4)(None)
	float                                        IntervalBetweenCrateSpawns;                        // 0x4DC(0x4)(None)
	float                                        MaxIntervalBetweenCrateSpawns;                     // 0x4E0(0x4)(None)
	float                                        IntervalBetweenMaxedCrateSpawns;                   // 0x4E4(0x4)(None)
	float                                        MaxIntervalBetweenMaxedCrateSpawns;                // 0x4E8(0x4)(None)
	float                                        MinCrateDistanceFromPlayer;                        // 0x4EC(0x4)(None)
	float                                        MinCrateDistanceFromStructure;                     // 0x4F0(0x4)(None)
	float                                        NoValidSpawnReCheckInterval;                       // 0x4F4(0x4)(None)
	float                                        MinTimeBetweenCrateSpawnsAtSamePoint;              // 0x4F8(0x4)(None)
	uint8                                        Pad_42C4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASupplyCrateSpawningSettings* GetDefaultObj();

};

// 0xA8 (0x5B0 - 0x508)
// Class ShooterGame.SupplyCrateSpawningVolume
class ASupplyCrateSpawningVolume : public AVolume
{
public:
	TArray<struct FSupplyCrateSpawnEntry>        LinkedSupplyCrateEntries;                          // 0x508(0x10)(ZeroConstructor)
	uint8                                        Pad_42C7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSupplyCrateSpawnPointEntry>   LinkedSpawnPointEntries;                           // 0x528(0x10)(ZeroConstructor)
	uint8                                        bIsEnabled : 1;                                    // Mask: 0x1, PropSize: 0x10x538(0x1)(None)
	uint8                                        bUseSpawnPointWeights : 1;                         // Mask: 0x2, PropSize: 0x10x538(0x1)(None)
	uint8                                        bDoSpawnCrateOnTopOfStructures : 1;                // Mask: 0x4, PropSize: 0x10x538(0x1)(None)
	uint8                                        bForcePreventCrateOnTopOfStructures : 1;           // Mask: 0x8, PropSize: 0x10x538(0x1)(None)
	uint8                                        bReallyUseCrateRequiresLoadedLevel : 1;            // Mask: 0x10, PropSize: 0x10x538(0x1)(None)
	uint8                                        BitPad_3D1 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42C8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxNumCrates;                                      // 0x53C(0x4)(None)
	float                                        DelayBeforeFirstCrate;                             // 0x540(0x4)(None)
	float                                        MaxDelayBeforeFirstCrate;                          // 0x544(0x4)(None)
	int32                                        ZoneVolumeMaxNumberOfNPCBuffer;                    // 0x548(0x4)(None)
	float                                        IntervalBetweenCrateSpawns;                        // 0x54C(0x4)(None)
	float                                        MaxIntervalBetweenCrateSpawns;                     // 0x550(0x4)(None)
	float                                        IntervalBetweenMaxedCrateSpawns;                   // 0x554(0x4)(None)
	float                                        MaxIntervalBetweenMaxedCrateSpawns;                // 0x558(0x4)(None)
	float                                        SP_IntervalBetweenCrateSpawns;                     // 0x55C(0x4)(None)
	float                                        SP_MaxIntervalBetweenCrateSpawns;                  // 0x560(0x4)(None)
	float                                        SP_IntervalBetweenMaxedCrateSpawns;                // 0x564(0x4)(None)
	float                                        SP_MaxIntervalBetweenMaxedCrateSpawns;             // 0x568(0x4)(None)
	float                                        SP_NoValidSpawnRecheckInterval;                    // 0x56C(0x4)(None)
	float                                        SP_DelayBeforeFirstCrate;                          // 0x570(0x4)(None)
	float                                        SP_MaxDelayBeforeFirstCrate;                       // 0x574(0x4)(None)
	float                                        MinCrateDistanceFromPlayer;                        // 0x578(0x4)(None)
	float                                        MinCrateDistanceFromStructure;                     // 0x57C(0x4)(None)
	float                                        NoValidSpawnReCheckInterval;                       // 0x580(0x4)(None)
	float                                        MinTimeBetweenCrateSpawnsAtSamePoint;              // 0x584(0x4)(None)
	float                                        MinDistanceFromOtherCrate;                         // 0x588(0x4)(None)
	class FName                                  CrateSpawningRequiresLoadedDataLayer;              // 0x58C(0x8)(None)
	bool                                         bForceRandomSupplyCratePoints;                     // 0x594(0x1)(None)
	uint8                                        Pad_42C9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class APrimalStructureItemContainer_SupplyCrate*> MyCrates;                                          // 0x598(0x10)(ZeroConstructor)
	uint8                                        Pad_42CA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ASupplyCrateSpawningVolume* GetDefaultObj();

	void SpawnCratesFromAllVolumes(class UWorld* TheWorld);
	void SpawnCratesFromAllPoints();
	void SetSpawnEnabled(bool bEnable);
	void CheckForSupplyCrateStart();
	void CheckCrateSpawn();
};

// 0x0 (0x60 - 0x60)
// Class ShooterGame.SwitchMountedDLCManager
class USwitchMountedDLCManager : public UMountedDLCManager
{
public:

	static class UClass* StaticClass();
	static class USwitchMountedDLCManager* GetDefaultObj();

};

// 0x168 (0x8C0 - 0x758)
// Class ShooterGame.TamingListEntryWidget
class UTamingListEntryWidget : public UBaseSelectableButtonWidget
{
public:
	class FString                                ItemLabelName;                                     // 0x758(0x10)(None)
	struct FLinearColor                          NameLabelColor_Default;                            // 0x768(0x10)(None)
	struct FLinearColor                          NameLabelColor_Female;                             // 0x778(0x10)(None)
	struct FLinearColor                          NameLabelColor_Male;                               // 0x788(0x10)(None)
	struct FLinearColor                          BackgroundColor_Default;                           // 0x798(0x10)(None)
	struct FLinearColor                          BackgroundColor_Tracked;                           // 0x7A8(0x10)(None)
	struct FLinearColor                          BackgroundColor_Completed;                         // 0x7B8(0x10)(None)
	struct FLinearColor                          SeparatorColor;                                    // 0x7C8(0x10)(None)
	class UTexture2D*                            DistanceIconTexture;                               // 0x7D8(0x8)(ZeroConstructor)
	class UTexture2D*                            CompletedIconTexture;                              // 0x7E0(0x8)(ZeroConstructor)
	class UTexture2D*                            TooltipBackgroundTexture;                          // 0x7E8(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Male;                                   // 0x7F0(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Female;                                 // 0x7F8(0x8)(ZeroConstructor)
	uint8                                        Pad_42CD[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTamingListEntryWidget* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.TargetableInterface
class ITargetableInterface : public IInterface
{
public:

	static class UClass* StaticClass();
	static class ITargetableInterface* GetDefaultObj();

	void ToUObject(class UObject* ReturnValue);
};

// 0x10 (0x4C8 - 0x4B8)
// Class ShooterGame.TargetArea
class ATargetArea : public AActor
{
public:
	float                                        Radius;                                            // 0x4B8(0x4)(None)
	uint8                                        Pad_42CE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USphereComponent*                      MySphereComponent;                                 // 0x4C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class ATargetArea* GetDefaultObj();

};

// 0x50 (0x408 - 0x3B8)
// Class ShooterGame.TargetingInfoToolTipWidget
class UTargetingInfoToolTipWidget : public UToolTipWidget
{
public:
	uint8                                        Pad_42CF[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTargetingInfoToolTipWidget* GetDefaultObj();

};

// 0x10 (0x340 - 0x330)
// Class ShooterGame.TestItemWidget
class UTestItemWidget : public UPrimalUserWidget
{
public:
	class FString                                ItemLabelName;                                     // 0x330(0x10)(None)

	static class UClass* StaticClass();
	static class UTestItemWidget* GetDefaultObj();

};

// 0x40 (0xF8 - 0xB8)
// Class ShooterGame.TickingHelperComponent
class UTickingHelperComponent : public UActorComponent
{
public:
	struct FTimeRange                            ThrottledTickTimeRange;                            // 0xB8(0x8)(None)
	enum class ETickingGroup                     InitWithTickGroup;                                 // 0xC0(0x1)(None)
	bool                                         bUsePerFrameTickEvents;                            // 0xC1(0x1)(None)
	bool                                         bUseThrottledTickEvents;                           // 0xC2(0x1)(None)
	uint8                                        Pad_42D0[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPerFrameTickEvent;                               // 0xC8(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            OnThrottledTickEvent;                              // 0xD8(0x10)(ZeroConstructor)
	uint8                                        Pad_42D1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTickingHelperComponent* GetDefaultObj();

	void SetComponentTickGroup(enum class ETickingGroup NewTickGroup);
	void OnThrottledTick(float DeltaTime);
};

// 0x128 (0x630 - 0x508)
// Class ShooterGame.TogglePainVolume
class ATogglePainVolume : public AVolume
{
public:
	uint8                                        Pad_42D9[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnabled;                                          // 0x558(0x1)(None)
	uint8                                        Pad_42DB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftClassPtr<class UObject>>         ActorClassesToExclude;                             // 0x560(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UObject>>         ActorClassesToInclude;                             // 0x570(0x10)(ZeroConstructor)
	TArray<class AEmitter*>                      ToggleEmitters;                                    // 0x580(0x10)(ZeroConstructor)
	TArray<class AActor*>                        StructureDamageOverlapPoints;                      // 0x590(0x10)(ZeroConstructor)
	TArray<struct FVector>                       SavedStructureDamageOverlapPoints;                 // 0x5A0(0x10)(None)
	float                                        StructureDamageOverlapRadius;                      // 0x5B0(0x4)(None)
	uint8                                        Pad_42DE[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPainCausing : 1;                                  // Mask: 0x1, PropSize: 0x10x5C0(0x1)(None)
	uint8                                        BitPad_3D2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42DF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamagePerSec;                                      // 0x5C4(0x4)(None)
	float                                        StructureDamagePerSec;                             // 0x5C8(0x4)(None)
	uint8                                        Pad_42E0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                DamageType;                                        // 0x5D0(0x8)(ZeroConstructor)
	class UClass*                                StructureDamageType;                               // 0x5D8(0x8)(ZeroConstructor)
	float                                        PainInterval;                                      // 0x5E0(0x4)(None)
	uint8                                        bEntryPain : 1;                                    // Mask: 0x1, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bPainWalkingOnly : 1;                              // Mask: 0x2, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bUseBeginOverlapEvent : 1;                         // Mask: 0x4, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bUseEndOverlapEvent : 1;                           // Mask: 0x8, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bUseCausedPainEvent : 1;                           // Mask: 0x10, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bIgnoreWildDinos : 1;                              // Mask: 0x20, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        bTriggerUndermeshDetection : 1;                    // Mask: 0x40, PropSize: 0x10x5E4(0x1)(None)
	uint8                                        BitPad_3D3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_42E2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           DamageInstigator;                                  // 0x5E8(0x8)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            BeginOverlapEvent;                                 // 0x5F0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            EndOverlapEvent;                                   // 0x600(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            CausedPainEvent;                                   // 0x610(0x10)(ZeroConstructor)
	float                                        DelayTogglePainActive;                             // 0x620(0x4)(None)
	uint8                                        Pad_42E4[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class ATogglePainVolume* GetDefaultObj();

	void SetPainVolumeEnabled(bool bEnable);
	void OnInterpToggle(bool bEnable);
	void OnEndOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void OnBeginOverlap(class AActor* OverlappedActor, class AActor* Actor);
	void GetOverlappedActors(const TArray<class AActor*>& OutActors);
	void GetOverlappedActorNum(int32 ReturnValue);
};

// 0x18 (0x348 - 0x330)
// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplay
class UToolTipWidgetPrimalStructureModuleItemsToDisplay : public UPrimalUserWidget
{
public:
	class UClass*                                DisplayItemListEntryTemplate;                      // 0x330(0x8)(ZeroConstructor)
	uint8                                        Pad_42E9[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToolTipWidgetPrimalStructureModuleItemsToDisplay* GetDefaultObj();

};

// 0x10 (0x340 - 0x330)
// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem
class UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem : public UPrimalUserWidget
{
public:
	uint8                                        Pad_42EC[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem* GetDefaultObj();

};

// 0x9D8 (0x1130 - 0x758)
// Class ShooterGame.TrackedDinoListEntryWidget
class UTrackedDinoListEntryWidget : public UBaseSelectableButtonWidget
{
public:
	class FString                                ItemLabelName;                                     // 0x758(0x10)(None)
	struct FLinearColor                          NameLabelColor_Default;                            // 0x768(0x10)(None)
	struct FLinearColor                          NameLabelColor_Female;                             // 0x778(0x10)(None)
	struct FLinearColor                          NameLabelColor_Male;                               // 0x788(0x10)(None)
	struct FLinearColor                          BackgroundColor_Default;                           // 0x798(0x10)(None)
	struct FLinearColor                          BackgroundColor_Tracked;                           // 0x7A8(0x10)(None)
	struct FLinearColor                          BackgroundColor_Completed;                         // 0x7B8(0x10)(None)
	struct FLinearColor                          SeparatorColor;                                    // 0x7C8(0x10)(None)
	class UTexture2D*                            DistanceIconTexture;                               // 0x7D8(0x8)(ZeroConstructor)
	class UTexture2D*                            CompletedIconTexture;                              // 0x7E0(0x8)(ZeroConstructor)
	class UTexture2D*                            TooltipBackgroundTexture;                          // 0x7E8(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Male;                                   // 0x7F0(0x8)(ZeroConstructor)
	class UTexture2D*                            GenderIcon_Female;                                 // 0x7F8(0x8)(ZeroConstructor)
	class UTexture2D*                            PlayerIcon;                                        // 0x800(0x8)(ZeroConstructor)
	uint8                                        Pad_42EE[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FButtonStyle                          DefaultButtonStyle;                                // 0x940(0x3F0)(ZeroConstructor)
	struct FButtonStyle                          TrackedButtonStyle;                                // 0xD30(0x3F0)(ZeroConstructor)
	int32                                        WidgetIndex;                                       // 0x1120(0x4)(None)
	uint8                                        Pad_42EF[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTrackedDinoListEntryWidget* GetDefaultObj();

	void RecentlyUpdatedInfoTimerEnd();
	void OnPOIOptButtonPressed();
	void OnPOIOptButton_SelectedPressed();
	void OnFavoriteButtonPressed();
	void OnFavoriteButton_SelectedPressed();
	void BPOnFavoriteButtonPressed(bool Favorited, bool Handled);
};

// 0xB0 (0x808 - 0x758)
// Class ShooterGame.TrackingItemUI
class UTrackingItemUI : public UPrimalUI
{
public:
	uint8                                        Pad_42F1[0x98];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        TrackingResourcesItem;                             // 0x7F0(0x10)(ZeroConstructor)
	uint8                                        Pad_42F2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTrackingItemUI* GetDefaultObj();

	void UpdateTrackingInfoBP();
	void StopTrackItem(class UClass* ItemClass);
	void RemoveInfoTrackIndex(int32 Index);
};

// 0x80 (0x7D8 - 0x758)
// Class ShooterGame.TradeItemButtonWidget
class UTradeItemButtonWidget : public UBaseSelectableButtonWidget
{
public:
	class FName                                  ItemCostTextBlockName;                             // 0x758(0x8)(None)
	class FName                                  ItemQuantityTextBlockName;                         // 0x760(0x8)(None)
	class FName                                  ItemImageName;                                     // 0x768(0x8)(None)
	class FName                                  ItemWeightTextBlockName;                           // 0x770(0x8)(None)
	struct FLinearColor                          CanAffordPriceText;                                // 0x778(0x10)(None)
	struct FLinearColor                          TooExpensivePriceText;                             // 0x788(0x10)(None)
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x798(0x1)(None)
	uint8                                        Pad_42F5[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTradeItemButtonWidget* GetDefaultObj();

};

// 0x18 (0x770 - 0x758)
// Class ShooterGame.TribeManagerListButton
class UTribeManagerListButton : public UBaseSelectableButtonWidget
{
public:
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        Pad_42F9[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTribeManagerListButton* GetDefaultObj();

};

// 0x40 (0x798 - 0x758)
// Class ShooterGame.TribeMemberButtonWidget
class UTribeMemberButtonWidget : public UBaseSelectableButtonWidget
{
public:
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        Pad_42FA[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTribeMemberButtonWidget* GetDefaultObj();

};

// 0x30 (0x788 - 0x758)
// Class ShooterGame.TribeWarButtonWidget
class UTribeWarButtonWidget : public UBaseSelectableButtonWidget
{
public:
	uint8                                        bSelectOnClicked : 1;                              // Mask: 0x1, PropSize: 0x10x758(0x1)(None)
	uint8                                        Pad_42FB[0x2F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UTribeWarButtonWidget* GetDefaultObj();

};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.TriggerEffectLibrary
class UTriggerEffectLibrary : public UDataAsset
{
public:
	TArray<struct FTriggerEffectLibraryEntry>    Library;                                           // 0x30(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UTriggerEffectLibrary* GetDefaultObj();

};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.UIMainModShop
class UUIMainModShop : public UPrimalUI
{
public:
	uint8                                        Pad_42FC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         ModUninstallDialogOpen;                            // 0x760(0x1)(None)
	uint8                                        Pad_42FD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUIMainModShop* GetDefaultObj();

	void OnUserAuthenticated();
	void IsModInstallPageOpen(bool ReturnValue);
	void GamepadChangeTab(bool Forward);
	void CloseModInstallPage();
};

// 0x498 (0xBF0 - 0x758)
// Class ShooterGame.UI_AdminMangment
class UUI_AdminMangment : public UPrimalUI
{
public:
	uint8                                        Pad_4302[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  FPSValueName;                                      // 0x7B0(0x8)(None)
	class FName                                  NumConnectedName;                                  // 0x7B8(0x8)(None)
	class FName                                  NumBannedName;                                     // 0x7C0(0x8)(None)
	class FName                                  NumWhiteListedName;                                // 0x7C8(0x8)(None)
	class FName                                  MaxStructuresInRangeName;                          // 0x7D0(0x8)(None)
	class FName                                  RemoveFromWhiteListButtonName;                     // 0x7D8(0x8)(None)
	class FName                                  CancelCheatCommandButtonName;                      // 0x7E0(0x8)(None)
	class FName                                  ExcuteCheatCommandButtonName;                      // 0x7E8(0x8)(None)
	class FName                                  CopyPlayerIDCheatCommandButtonName;                // 0x7F0(0x8)(None)
	class FName                                  CopySteamIDCheatCommandButtonName;                 // 0x7F8(0x8)(None)
	class FName                                  CheatsScrollBoxName;                               // 0x800(0x8)(None)
	class UClass*                                CheatSlotButtonTemplate;                           // 0x808(0x8)(ZeroConstructor)
	uint8                                        Pad_4303[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CancelManualBanButtonName;                         // 0x820(0x8)(None)
	class FName                                  ExcuteManualBanButtonName;                         // 0x828(0x8)(None)
	class FName                                  CancelManualwhiteListedButtonName;                 // 0x830(0x8)(None)
	class FName                                  ExcuteManualwhiteListedButtonName;                 // 0x838(0x8)(None)
	class FName                                  KickButtonName;                                    // 0x840(0x8)(None)
	class FName                                  RefreshButtonName;                                 // 0x848(0x8)(None)
	class FName                                  ParamtersPanelName;                                // 0x850(0x8)(None)
	class FName                                  ManualBanPanelName;                                // 0x858(0x8)(None)
	class FName                                  ManualWhiteListedPaneName;                         // 0x860(0x8)(None)
	class FName                                  ConnectedPlayerPanelName;                          // 0x868(0x8)(None)
	class FName                                  RefreshingConnectedPlayerPanelName;                // 0x870(0x8)(None)
	class FName                                  BannedPlayerPanelName;                             // 0x878(0x8)(None)
	class FName                                  RefreshingBannedPlayerPanelName;                   // 0x880(0x8)(None)
	class FName                                  WhiteListedPlayerPanelName;                        // 0x888(0x8)(None)
	class FName                                  RefreshingWhiteListedPlayerPanelName;              // 0x890(0x8)(None)
	class FName                                  ParmterTextFieldName;                              // 0x898(0x8)(None)
	class FName                                  ChetFunctionSelectedImageName;                     // 0x8A0(0x8)(None)
	class FName                                  DifficultyOffsetName;                              // 0x8A8(0x8)(None)
	class FName                                  GlobalVoiceChatName;                               // 0x8B0(0x8)(None)
	class FName                                  ProximityChatName;                                 // 0x8B8(0x8)(None)
	class FName                                  NoTributeDownloadsName;                            // 0x8C0(0x8)(None)
	class FName                                  AllowThirdPersonPlayerName;                        // 0x8C8(0x8)(None)
	class FName                                  AlwaysNotifyPlayerLeftName;                        // 0x8D0(0x8)(None)
	class FName                                  DontAlwaysNotifyPlayerJoinedName;                  // 0x8D8(0x8)(None)
	class FName                                  AddToWhiteListButtonName;                          // 0x8E0(0x8)(None)
	class FName                                  ManualAddToWhiteListButtonName;                    // 0x8E8(0x8)(None)
	class FName                                  ServerHardcoreName;                                // 0x8F0(0x8)(None)
	class FName                                  ServerPVEName;                                     // 0x8F8(0x8)(None)
	class FName                                  ServerCrosshairName;                               // 0x900(0x8)(None)
	class FName                                  ServerForceNoHUDName;                              // 0x908(0x8)(None)
	class FName                                  FunctionDiscriptionName;                           // 0x910(0x8)(None)
	class FName                                  ShowMapPlayerLocationName;                         // 0x918(0x8)(None)
	class FName                                  ServerPasswordName;                                // 0x920(0x8)(None)
	class FName                                  ServerAdminPasswordName;                           // 0x928(0x8)(None)
	class FName                                  PositionName;                                      // 0x930(0x8)(None)
	class FName                                  MessgaeOfTheDayName;                               // 0x938(0x8)(None)
	class FName                                  SetMessgaeOfTheDayName;                            // 0x940(0x8)(None)
	class FName                                  AllConnectedPlayerScrollBoxName;                   // 0x948(0x8)(None)
	class FName                                  AllBannedPlayerScrollBoxName;                      // 0x950(0x8)(None)
	class FName                                  AllWhiteListedPlayerScrollBoxName;                 // 0x958(0x8)(None)
	class FName                                  ServerScrollBoxName;                               // 0x960(0x8)(None)
	class UClass*                                SlotButtonTemplate;                                // 0x968(0x8)(ZeroConstructor)
	class UClass*                                ServerInfoButtonTemplate;                          // 0x970(0x8)(ZeroConstructor)
	class FName                                  BanButtonName;                                     // 0x978(0x8)(None)
	class FName                                  ManualBanButtonName;                               // 0x980(0x8)(None)
	class FName                                  EnterPramterName;                                  // 0x988(0x8)(None)
	class FName                                  UnBanButtonName;                                   // 0x990(0x8)(None)
	class FName                                  CloseButtonName;                                   // 0x998(0x8)(None)
	class FName                                  DirectMessageTextFieldName;                        // 0x9A0(0x8)(None)
	class FName                                  DirectMessageButtonName;                           // 0x9A8(0x8)(None)
	class FName                                  ErrorBlockName;                                    // 0x9B0(0x8)(None)
	class FName                                  ErrorBlockManualBanName;                           // 0x9B8(0x8)(None)
	class FName                                  ErrorBlockManualWhiteListedName;                   // 0x9C0(0x8)(None)
	class FName                                  ErrorBlockMessageOfTheDayName;                     // 0x9C8(0x8)(None)
	class FName                                  ManualBanningSteamIDTextFieldName;                 // 0x9D0(0x8)(None)
	class FName                                  ManualWhiteListedSteamIDTextFieldName;             // 0x9D8(0x8)(None)
	class AShooterPlayerController*              OwnerPlayerController;                             // 0x9E0(0x8)(ZeroConstructor)
	class FName                                  CustomGameUIButtonName;                            // 0x9E8(0x8)(None)
	class UServerInfoInfoEntryButton*            FPSEntry;                                          // 0x9F0(0x8)(ZeroConstructor)
	uint8                                        Pad_4304[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxDirectMessageChars;                             // 0xA38(0x4)(None)
	int32                                        MaxSteamIDChars;                                   // 0xA3C(0x4)(None)
	int32                                        MaxMessageofthedayChars;                           // 0xA40(0x4)(None)
	uint8                                        Pad_4305[0x1AC];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_AdminMangment* GetDefaultObj();

	void OnTextCommittedWhiteListed(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextCommittedMessageOfTheDay(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextCommittedManualBan(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextChangedMessageOfTheDay(class FText Text);
	void OnTextChangedManulaBan(class FText Text);
	void OnTextChangedManualWhiteLised(class FText Text);
	void OnTextChanged(class FText Text);
};

// 0x90 (0x7E8 - 0x758)
// Class ShooterGame.UI_AllPlayersList
class UUI_AllPlayersList : public UPrimalUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x758(0x8)(None)
	class FName                                  AllPlayersListBoxName;                             // 0x760(0x8)(None)
	class UClass*                                SlotButtonTemplate;                                // 0x768(0x8)(ZeroConstructor)
	uint8                                        Pad_4306[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_AllPlayersList* GetDefaultObj();

	void OnTribeNameFilterChanged(class FText Text);
	void OnPlayerNameFilterChanged(class FText Text);
};

// 0xE0 (0x838 - 0x758)
// Class ShooterGame.UI_ChatBox
class UUI_ChatBox : public UPrimalUI
{
public:
	class UClass*                                ChatMessageUITemplate;                             // 0x758(0x8)(ZeroConstructor)
	class UClass*                                ServerBroadCastMessageUITemplate;                  // 0x760(0x8)(ZeroConstructor)
	class FString                                ChatBoxName;                                       // 0x768(0x10)(None)
	class FString                                EditTextBoxName;                                   // 0x778(0x10)(None)
	class FString                                SendingModelLabelName;                             // 0x788(0x10)(None)
	class FString                                InputBoxName;                                      // 0x798(0x10)(None)
	class FName                                  DisplayModeLabelName;                              // 0x7A8(0x8)(None)
	class FName                                  CanavasPanelName;                                  // 0x7B0(0x8)(None)
	class FString                                ServerSenderText;                                  // 0x7B8(0x10)(None)
	int32                                        ChatHistoryLimit;                                  // 0x7C8(0x4)(None)
	uint8                                        Pad_4308[0x6C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ChatBox* GetDefaultObj();

	void SwitchChatMode();
	void OnChatUITapped();
	void HandleChatTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void HandleChatTextChanged(class FText Text);
};

// 0x78 (0x7D0 - 0x758)
// Class ShooterGame.UI_ChatMessage
class UUI_ChatMessage : public UPrimalUI
{
public:
	class FString                                ChatBlockName;                                     // 0x758(0x10)(None)
	uint8                                        Pad_4309[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ChatMessage* GetDefaultObj();

};

// 0x888 (0xFE0 - 0x758)
// Class ShooterGame.UI_ListSessions
class UUI_ListSessions : public UPrimalUI
{
public:
	struct FSlateColor                           SearchingColor;                                    // 0x758(0x14)(None)
	struct FSlateColor                           SearchingCompleteColor;                            // 0x76C(0x14)(None)
	class FName                                  JoinButtonName;                                    // 0x780(0x8)(None)
	class FName                                  RefreshButtonName;                                 // 0x788(0x8)(None)
	class FName                                  FavoritesButtonName;                               // 0x790(0x8)(None)
	class FName                                  FavoritesButtonLabelName;                          // 0x798(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x7A0(0x8)(None)
	class FName                                  RentYourOwnServerButtonName;                       // 0x7A8(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x7B0(0x8)(None)
	class FName                                  SearchingTextBlockName;                            // 0x7B8(0x8)(None)
	class FName                                  SessionsPanelName;                                 // 0x7C0(0x8)(None)
	class FName                                  FindSessionTextFieldName;                          // 0x7C8(0x8)(None)
	class FName                                  PasswordAcceptButtonName;                          // 0x7D0(0x8)(None)
	class FName                                  DarkBGName;                                        // 0x7D8(0x8)(None)
	class FName                                  PasswordCancelButtonName;                          // 0x7E0(0x8)(None)
	class FName                                  PasswordTextFieldName;                             // 0x7E8(0x8)(None)
	class FName                                  PasswordPanelName;                                 // 0x7F0(0x8)(None)
	class FName                                  ErrorBlockName;                                    // 0x7F8(0x8)(None)
	class FName                                  ServersCountBlockName;                             // 0x800(0x8)(None)
	class FName                                  ShowProtectedSessionsCheckBoxName;                 // 0x808(0x8)(None)
	class FName                                  ShowAvailableServersCheckBoxName;                  // 0x810(0x8)(None)
	class FName                                  ShowServersTypeComboBoxName;                       // 0x818(0x8)(None)
	class FName                                  ShowPlatformSpecificServersCheckBoxName;           // 0x820(0x8)(None)
	class FName                                  OfficialStatusLabelName;                           // 0x828(0x8)(None)
	class UClass*                                SlotButtonTemplate;                                // 0x830(0x8)(ZeroConstructor)
	class UClass*                                TermsAndConditionsUITemplate;                      // 0x838(0x8)(ZeroConstructor)
	int32                                        MaxPasswordChars;                                  // 0x840(0x4)(None)
	uint8                                        Pad_4310[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           AscendingIcon;                                     // 0x850(0xD0)(ZeroConstructor)
	struct FSlateBrush                           DescendingIcon;                                    // 0x920(0xD0)(ZeroConstructor)
	uint8                                        Pad_4311[0x5D0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ChineseLaunchURL;                                  // 0xFC0(0x10)(None)
	uint8                                        Pad_4312[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ListSessions* GetDefaultObj();

	void SwapSortAscendingDescending();
	void SlotButtonSelected(class UWidget* TheWidget);
	void SetupLayout();
	void SetCurrentServerSearchType(int32 ServerType);
	void RefreshSlotButtons();
	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextChanged(class FText Text);
	void OnSortComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnServersFilterComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnServerListingClickedModPopup(bool bNeedInit, const TArray<int64>& ModIds, const class FString& ServerName, int64 ServerID);
	void OnModPopupEventReport(class UPrimalUserWidget* WithUI, int64 ServerID);
	void OnModPopupEventJoin(class UPrimalUserWidget* WithUI, int64 ServerID);
	void OnModPopupEventFavorite(class UPrimalUserWidget* WithUI, int64 ServerID);
	void OnModPopupEventBack(class UPrimalUserWidget* WithUI, int64 ServerID);
	void OnMapComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnGameModeComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnCheckBoxChecked(bool InNewState);
	void OnAutoFavoriteChecked(bool InNewState);
	void ForceUpdateServerTypeSelection();
	void FailedLastPlayedShortcut();
	void ChangeSortAscendingDescending(bool Ascending);
	void BPSetupLayout();
};

// 0x10 (0xFF0 - 0xFE0)
// Class ShooterGame.UI_ClusterServersListSessions
class UUI_ClusterServersListSessions : public UUI_ListSessions
{
public:
	class AShooterGameSession*                   ClustersServersListGameSession;                    // 0xFE0(0x8)(ZeroConstructor)
	uint8                                        Pad_4313[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ClusterServersListSessions* GetDefaultObj();

};

// 0xC0 (0x3F0 - 0x330)
// Class ShooterGame.UI_Compass
class UUI_Compass : public UPrimalUserWidget
{
public:
	uint8                                        Pad_4314[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LatitudeOrigin;                                    // 0x338(0x4)(None)
	float                                        LatitudeScale;                                     // 0x33C(0x4)(None)
	float                                        LongitudeOrigin;                                   // 0x340(0x4)(None)
	float                                        LongitudeScale;                                    // 0x344(0x4)(None)
	float                                        CompassNorthAngle;                                 // 0x348(0x4)(None)
	float                                        CompassInterpSpeed;                                // 0x34C(0x4)(None)
	float                                        SwingSpeed;                                        // 0x350(0x4)(None)
	float                                        MaxSwingAngle;                                     // 0x354(0x4)(None)
	struct FRotator                              CurrentCompassAngle;                               // 0x358(0x18)(None)
	float                                        CurrentSwingAngle;                                 // 0x370(0x4)(None)
	float                                        CurrentSwingFactor;                                // 0x374(0x4)(None)
	float                                        CurrentSwingTime;                                  // 0x378(0x4)(None)
	class FName                                  CompassCenterParameterName;                        // 0x37C(0x8)(None)
	float                                        PreviousPawnYaw;                                   // 0x384(0x4)(None)
	class UMaterialInterface*                    CompassMI;                                         // 0x388(0x8)(ZeroConstructor)
	class UMaterialInstanceDynamic*              CompassMID;                                        // 0x390(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalBuff>             buffRequiredForVisibility;                         // 0x398(0x30)(ZeroConstructor)
	class FName                                  LongitudeText;                                     // 0x3C8(0x8)(None)
	class FName                                  LatitudeText;                                      // 0x3D0(0x8)(None)
	uint8                                        Pad_4315[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Compass* GetDefaultObj();

};

// 0x68 (0x7C0 - 0x758)
// Class ShooterGame.UI_ConsoleCommand
class UUI_ConsoleCommand : public UPrimalUI
{
public:
	uint8                                        Pad_4317[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ButtonTemplate;                                    // 0x7B8(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_ConsoleCommand* GetDefaultObj();

	void OnTextCommited(class FText Text, enum class ETextCommit CommitMethod);
	void ButtonSelected(class UWidget* TheWidget);
};

// 0x298 (0x9F0 - 0x758)
// Class ShooterGame.UI_ConsoleDedicated
class UUI_ConsoleDedicated : public UPrimalUI
{
public:
	uint8                                        Pad_4319[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SlotButtonTemplate;                                // 0x7E8(0x8)(ZeroConstructor)
	int32                                        MaxDirectMessageChars;                             // 0x7F0(0x4)(None)
	class FName                                  ExitToMenuButtonName;                              // 0x7F4(0x8)(None)
	class FName                                  RemoveFromWhiteListButtonName;                     // 0x7FC(0x8)(None)
	class FName                                  AdminUIButtonName;                                 // 0x804(0x8)(None)
	class FName                                  NumWhiteListedName;                                // 0x80C(0x8)(None)
	class FName                                  WhiteListedPlayerPanelName;                        // 0x814(0x8)(None)
	class FName                                  RefreshingWhiteListedPlayerPanelName;              // 0x81C(0x8)(None)
	class FName                                  AddToWhiteListButtonName;                          // 0x824(0x8)(None)
	class FName                                  AllWhiteListedPlayerScrollBoxName;                 // 0x82C(0x8)(None)
	class FName                                  BannedPlayerPanelName;                             // 0x834(0x8)(None)
	class FName                                  RefreshingBannedPlayerPanelName;                   // 0x83C(0x8)(None)
	class FName                                  AllBannedPlayerScrollBoxName;                      // 0x844(0x8)(None)
	class FName                                  UnBanButtonName;                                   // 0x84C(0x8)(None)
	class FName                                  TextMessageEditableBoxName;                        // 0x854(0x8)(None)
	class FName                                  BroadcastingVoiceTextBlockName;                    // 0x85C(0x8)(None)
	class FName                                  ServerNameTextBlockName;                           // 0x864(0x8)(None)
	class FName                                  ServerPassTextBlockName;                           // 0x86C(0x8)(None)
	class FName                                  InviteFriendsButtonName;                           // 0x874(0x8)(None)
	class FName                                  BanButtonName;                                     // 0x87C(0x8)(None)
	class FName                                  NumConnectedName;                                  // 0x884(0x8)(None)
	class FName                                  AllConnectedPlayerScrollBoxName;                   // 0x88C(0x8)(None)
	class FName                                  ConnectedPlayerPanelName;                          // 0x894(0x8)(None)
	class FName                                  RefreshingConnectedPlayerPanelName;                // 0x89C(0x8)(None)
	class FName                                  RefreshButtonName;                                 // 0x8A4(0x8)(None)
	class FName                                  DirectMessageTextFieldName;                        // 0x8AC(0x8)(None)
	class FName                                  DirectMessageButtonName;                           // 0x8B4(0x8)(None)
	class FName                                  ErrorBlockName;                                    // 0x8BC(0x8)(None)
	class FName                                  KickButtonName;                                    // 0x8C4(0x8)(None)
	class FName                                  NumBannedName;                                     // 0x8CC(0x8)(None)
	uint8                                        Pad_431A[0x11C];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ConsoleDedicated* GetDefaultObj();

	void PlayerDoubleClicked(class UDataListEntryButton* TheButton);
	void OnTextChanged(class FText Text);
	void HandleTextMessageTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
};

// 0x158 (0x8B0 - 0x758)
// Class ShooterGame.UI_Cooking
class UUI_Cooking : public UPrimalUI
{
public:
	TArray<class UClass*>                        DrinkRecipeTemplates;                              // 0x758(0x10)(ZeroConstructor)
	TArray<class UClass*>                        FoodRecipeTemplates;                               // 0x768(0x10)(ZeroConstructor)
	class UClass*                                NoteItemTemplate;                                  // 0x778(0x8)(ZeroConstructor)
	uint8                                        Pad_431B[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FColor>                        PaletteColors;                                     // 0x7F0(0x10)(None)
	uint8                                        Pad_431C[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInstanceDynamic*              ItemIconMIC;                                       // 0x858(0x8)(ZeroConstructor)
	uint8                                        Pad_431D[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Cooking* GetDefaultObj();

	void RefreshItemLists();
	void RefreshInventoryViewer();
	void OnRefreshColorRegionSlidersBP();
	void OnRedSliderValueChanged(float SliderValue);
	void OnItemNameChanged(class FText Text);
	void OnItemDescriptionChanged(class FText Text);
	void OnGreenSliderValueChanged(float SliderValue);
	void OnBlueSliderValueChanged(float SliderValue);
	void MyInventoryItemDoubleClicked(class UDataListEntryButton* TheButton);
};

// 0x0 (0x758 - 0x758)
// Class ShooterGame.UI_Cosmetics
class UUI_Cosmetics : public UPrimalUI
{
public:

	static class UClass* StaticClass();
	static class UUI_Cosmetics* GetDefaultObj();

};

// 0x48 (0x7A0 - 0x758)
// Class ShooterGame.UI_CustomOverlay
class UUI_CustomOverlay : public UPrimalUI
{
public:
	class UClass*                                MouseClass;                                        // 0x758(0x8)(ZeroConstructor)
	class UUserWidget*                           MouseObject;                                       // 0x760(0x8)(ZeroConstructor)
	bool                                         UseArrow;                                          // 0x768(0x1)(None)
	uint8                                        Pad_431F[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_CustomOverlay* GetDefaultObj();

	void UseCirclePointer();
	void UseArrowPointer();
	void ShowReticule(bool Show);
	void SetupMouse();
	void SetPointerScale(float Scale);
	void SetPointerColorAdd(float Add);
	void SetMouseVisibility(bool bIsVisible);
	void SetMousePositionFromPC(class APlayerController* PC);
	void SetMousePosition(const struct FVector2D& ViewportPosition);
	void SetInnerRingScales(float Scale0, float Scale1, float Scale2);
	void SetArrowAlpha(float TheLeftRightAlpha, float TheUpDownAlpha);
	void AddChildToCanvas(class UUserWidget* Child, const struct FVector2D& Size, int32 ZOrder);
};

// 0x228 (0x990 - 0x768)
// Class ShooterGame.UI_CustomTrackedDinoList
class UUI_CustomTrackedDinoList : public UPrimalSubMenuUI
{
public:
	class UClass*                                TrackedActorListEntryTemplate;                     // 0x768(0x8)(ZeroConstructor)
	class UTexture2D*                            POI_Icon;                                          // 0x770(0x8)(ZeroConstructor)
	class FName                                  FilterSelectionComboBoxName;                       // 0x778(0x8)(None)
	uint8                                        Pad_4324[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  DinoGroupSelectionComboBoxName;                    // 0x788(0x8)(None)
	uint8                                        Pad_4325[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AdditionalSearchTermsTextboxName;                  // 0x798(0x8)(None)
	uint8                                        Pad_4326[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AdditionalSearchInputTitleName;                    // 0x7A8(0x8)(None)
	uint8                                        Pad_4327[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ObtainingLatestInfoTextName;                       // 0x7B8(0x8)(None)
	uint8                                        Pad_4328[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        WaypointsFilterOptionIndex;                        // 0x7C8(0x4)(None)
	int32                                        FavoritesFilterOptionIndex;                        // 0x7CC(0x4)(None)
	int32                                        TeammateFilterOptionIndex;                         // 0x7D0(0x4)(None)
	int32                                        AllTamesFilterOptionIndex;                         // 0x7D4(0x4)(None)
	uint8                                        Pad_4329[0x1B8];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_CustomTrackedDinoList* GetDefaultObj();

	void SearchTextChanged(class FText Text);
	void OpenToSpecificEntry(int32 SpecificCharacterID, bool IsPlayer, bool IsFavorite, bool IsWaypoint);
	void OnFilterSelectionComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnActorGroupSelectionComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void MarkDinoListEntryWidgetFavorite(int32 ID, bool IsPlayer);
	void AdditionalSearchTermsTextboxChanged(class FText Text);
};

// 0x10 (0x330 - 0x320)
// Class ShooterGame.UI_DebugSpawnMenuEntry
class UUI_DebugSpawnMenuEntry : public UUserWidget
{
public:
	class FString                                EntryName;                                         // 0x320(0x10)(None)

	static class UClass* StaticClass();
	static class UUI_DebugSpawnMenuEntry* GetDefaultObj();

};

// 0x320 (0xA78 - 0x758)
// Class ShooterGame.UI_DebugSpawnMenu
class UUI_DebugSpawnMenu : public UPrimalUI
{
public:
	bool                                         Alphabetize_Rebuild;                               // 0x758(0x1)(None)
	uint8                                        Pad_432A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UTexture2D*>                    FolderIcons;                                       // 0x760(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> DinoBlueprintIDs;                                  // 0x770(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     SaddleBlueprintIDs;                                // 0x780(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     SaddleBlueprintIDs2;                               // 0x790(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ResourceBlueprintIDs;                              // 0x7A0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     FoodBlueprintIDs;                                  // 0x7B0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     SeedBlueprintIDs;                                  // 0x7C0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ClothingBlueprintIDs;                              // 0x7D0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     WeaponBlueprintIDs;                                // 0x7E0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ToolBlueprintIDs;                                  // 0x7F0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     AmmoBlueprintIDs;                                  // 0x800(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ThatchStructureBlueprintIDs;                       // 0x810(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     WoodStructureBlueprintIDs;                         // 0x820(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     StoneStructureBlueprintIDs;                        // 0x830(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     MetalStructureBlueprintIDs;                        // 0x840(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ElectricStructureBlueprintIDs;                     // 0x850(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     MiscStructureBlueprintIDs;                         // 0x860(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     FurnatureStructureBlueprintIDs;                    // 0x870(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     DinoEggBlueprintIDs;                               // 0x880(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     DinoFertEggBlueprintIDs;                           // 0x890(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     KibbleBlueprintIDs;                                // 0x8A0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     DyeBlueprintIDs;                                   // 0x8B0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ArtifactBlueprintIDs;                              // 0x8C0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     SkinBlueprintIDs;                                  // 0x8D0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     TekBlueprintIDs;                                   // 0x8E0(0x10)(ZeroConstructor)
	TArray<struct FCheatMenuCharacterPresetItems> CharacterPresetItems;                              // 0x8F0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ScorchedEarthItemBlueprints;                       // 0x900(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ScorchedEarthStructureBlueprintIDs;                // 0x910(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ScorchedEarthDinoSaddles;                          // 0x920(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> ScorchedEarthDinos;                                // 0x930(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ScorchedEarthEggBlueprintIDs;                      // 0x940(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ScorchedEarthFertEggBlueprintIDs;                  // 0x950(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     AberrationItemBlueprints;                          // 0x960(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     AberrationDinoSaddles;                             // 0x970(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ExtraAberrationDinoSaddles;                        // 0x980(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> AberrationUniqueDinos;                             // 0x990(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> AberrantDinos;                                     // 0x9A0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     AberrantDinoSaddles;                               // 0x9B0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> CommunityDinos;                                    // 0x9C0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     CommunityDinoSaddles;                              // 0x9D0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     CommunityItemBlueprints;                           // 0x9E0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ExtinctionItemBlueprints;                          // 0x9F0(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ExtinctionDinoSaddles;                             // 0xA00(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> ExtinctionDinos;                                   // 0xA10(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> ExtinctionCorruptedDinos;                          // 0xA20(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ExtinctionEggBlueprintIDs;                         // 0xA30(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     ExtinctionFertEggBlueprintIDs;                     // 0xA40(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class UPrimalItem>>     EventItemsBlueprintIDs;                            // 0xA50(0x10)(ZeroConstructor)
	TArray<TSoftClassPtr<class APrimalDinoCharacter>> EventDinos;                                        // 0xA60(0x10)(ZeroConstructor)
	uint8                                        Pad_432B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_DebugSpawnMenu* GetDefaultObj();

	void SortSelection(const TArray<class UUI_DebugSpawnMenuEntry*>& OutDataListEntries);
};

// 0x198 (0x8F0 - 0x758)
// Class ShooterGame.UI_DepthOfFieldMenu
class UUI_DepthOfFieldMenu : public UPrimalUI
{
public:
	class FName                                  SaveButtonName;                                    // 0x758(0x8)(None)
	class FName                                  ApplyButtonName;                                   // 0x760(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x768(0x8)(None)
	class FName                                  NearButtonName;                                    // 0x770(0x8)(None)
	class FName                                  MediumButtonName;                                  // 0x778(0x8)(None)
	class FName                                  FarButtonName;                                     // 0x780(0x8)(None)
	class FName                                  ClearButtonName;                                   // 0x788(0x8)(None)
	class FName                                  FocalDistanceSliderName;                           // 0x790(0x8)(None)
	class FName                                  FocalRegionSliderName;                             // 0x798(0x8)(None)
	class FName                                  NearTransitionRegionSliderName;                    // 0x7A0(0x8)(None)
	class FName                                  FarTransitionRegionSliderName;                     // 0x7A8(0x8)(None)
	class FName                                  ScaleSliderName;                                   // 0x7B0(0x8)(None)
	class FName                                  MaxBokehSliderName;                                // 0x7B8(0x8)(None)
	class FName                                  OcclusionSliderName;                               // 0x7C0(0x8)(None)
	class FName                                  FocalDistanceTextBoxName;                          // 0x7C8(0x8)(None)
	class FName                                  FocalRegionTextBoxName;                            // 0x7D0(0x8)(None)
	class FName                                  NearTransitionRegionTextBoxName;                   // 0x7D8(0x8)(None)
	class FName                                  FarTransitionRegionTextBoxName;                    // 0x7E0(0x8)(None)
	class FName                                  ScaleTextBoxName;                                  // 0x7E8(0x8)(None)
	class FName                                  MaxBokehTextBoxName;                               // 0x7F0(0x8)(None)
	class FName                                  OcclusionTextBoxName;                              // 0x7F8(0x8)(None)
	class FName                                  BlurModeComboBoxName;                              // 0x800(0x8)(None)
	uint8                                        Pad_432D[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_DepthOfFieldMenu* GetDefaultObj();

	void OnSliderValueChanged(float SliderValue);
	void OnNumericValueCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnCheckBoxChanged(bool IsChecked);
};

// 0xE8 (0x850 - 0x768)
// Class ShooterGame.UI_DinoOrderGroups
class UUI_DinoOrderGroups : public UPrimalSubMenuUI
{
public:
	class UClass*                                DinoOrderGroupEntryTemplate;                       // 0x768(0x8)(ZeroConstructor)
	class UClass*                                ContextMenuClass;                                  // 0x770(0x8)(ZeroConstructor)
	uint8                                        Pad_432E[0xD8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_DinoOrderGroups* GetDefaultObj();

	void RefreshEntries();
	void DinoOrderGroupSelected(class UWidget* TheWidget);
	void DinoClassSelected(class UWidget* TheWidget);
	void DinoCharSelected(class UWidget* TheWidget);
};

// 0x2C0 (0xA18 - 0x758)
// Class ShooterGame.UI_DyeItem
class UUI_DyeItem : public UPrimalUI
{
public:
	class FString                                DyeItemsDataListName;                              // 0x758(0x10)(None)
	class FString                                BrushItemsDataListName;                            // 0x768(0x10)(None)
	class FName                                  CloseButtonName;                                   // 0x778(0x8)(None)
	class FName                                  LoadPaintingsButtonName;                           // 0x780(0x8)(None)
	class FName                                  SavePaintingsButtonName;                           // 0x788(0x8)(None)
	class FName                                  ResetCameraButtonName;                             // 0x790(0x8)(None)
	class FName                                  ItemLabelName;                                     // 0x798(0x8)(None)
	class FName                                  DyeLabelName;                                      // 0x7A0(0x8)(None)
	TArray<class FName>                          DyeRegionButtonsNames;                             // 0x7A8(0x10)(None)
	class FName                                  DyeButtonName;                                     // 0x7B8(0x8)(None)
	class FName                                  DyeIconImageName;                                  // 0x7C0(0x8)(None)
	class FName                                  DurabilityProgressBarName;                         // 0x7C8(0x8)(None)
	class FName                                  ItemIconImageName;                                 // 0x7D0(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x7D8(0x8)(None)
	class FName                                  PreviewWidgetName;                                 // 0x7E0(0x8)(None)
	class FName                                  PaintLabelName;                                    // 0x7E8(0x8)(None)
	class FName                                  EraseAllButtonName;                                // 0x7F0(0x8)(None)
	class FName                                  BackgroundImageName;                               // 0x7F8(0x8)(None)
	class UClass*                                PantingListUITemplate;                             // 0x800(0x8)(ZeroConstructor)
	class UClass*                                SaveDialogUITemplate;                              // 0x808(0x8)(ZeroConstructor)
	TArray<class FName>                          PlayerPreviewMaterialFloatParameterNamesToReset;   // 0x810(0x10)(None)
	uint8                                        Pad_4330[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CursorWidgetName;                                  // 0x838(0x8)(None)
	bool                                         bCosmeticFlagPainting;                             // 0x840(0x1)(None)
	uint8                                        Pad_4331[0x1D7];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_DyeItem* GetDefaultObj();

	void ShowUploadTribeFlagWindow(bool AutoUploadLastPainting, bool bCloseParentUIAfterFinished);
	void SavePainting(const class FString& Filename, bool OverrideExisting, bool ReturnValue);
	void HandleOnSearchTextChanged(class FText Text);
	void DyeItemDoubleClicked(class UDataListEntryButton* TheButton);
	void DrawWithNewDye(bool UploadingTribeFlag);
	void DeleteLastUploadedTribeFlag();
	void ClearTribeFlag();
};

// 0x128 (0x890 - 0x768)
// Class ShooterGame.UI_EngramsMenu
class UUI_EngramsMenu : public UPrimalSubMenuUI
{
public:
	class FName                                  ARKPrimeEngramsButtonName;                         // 0x768(0x8)(None)
	class FName                                  ScorchedEarthEngramsButtonName;                    // 0x770(0x8)(None)
	class FName                                  TekgramsButtonName;                                // 0x778(0x8)(None)
	class FName                                  LearnEngramButtonTextName;                         // 0x780(0x8)(None)
	class FName                                  AvailablePointsTextName;                           // 0x788(0x8)(None)
	class FName                                  UnlearnedEngramsButtonName;                        // 0x790(0x8)(None)
	class FName                                  AberrationEngramsButtonName;                       // 0x798(0x8)(None)
	class FName                                  ExtinctionEngramsButtonName;                       // 0x7A0(0x8)(None)
	class FName                                  GenesisEngramsButtonName;                          // 0x7A8(0x8)(None)
	class FName                                  EngramTitleLabelName;                              // 0x7B0(0x8)(None)
	class FName                                  EngramsDataListName;                               // 0x7B8(0x8)(None)
	class FName                                  EngramFilterTextBoxName;                           // 0x7C0(0x8)(None)
	class FName                                  LearnEngramButtonName;                             // 0x7C8(0x8)(None)
	uint8                                        Pad_4332[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_EngramsMenu* GetDefaultObj();

	void OnEngramsFilterChanged(bool bIsChecked);
	void OnEngramFilterChanged(class FText Text);
	void EngramSelected(class UDataListEntryButton* TheButton);
	void EngramDoubleClicked(class UDataListEntryButton* TheButton);
};

// 0x78 (0x7D0 - 0x758)
// Class ShooterGame.UI_GenericConfirmationDialog
class UUI_GenericConfirmationDialog : public UPrimalUI
{
public:
	class FName                                  TitleLabelName;                                    // 0x758(0x8)(None)
	class FName                                  MessageLabelName;                                  // 0x760(0x8)(None)
	class FName                                  GamePadPanelName;                                  // 0x768(0x8)(None)
	class FName                                  ButtonAcceptConfirmationName;                      // 0x770(0x8)(None)
	class FName                                  ButtonDenyConfirmationName;                        // 0x778(0x8)(None)
	class FName                                  GamepadImageAcceptName;                            // 0x780(0x8)(None)
	class FName                                  GamepadImageDenyName;                              // 0x788(0x8)(None)
	uint8                                        Pad_4333[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnClosedEventObject;                               // 0x7C0(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_GenericConfirmationDialog* GetDefaultObj();

	void OverrideCancelButtonText(class FText CancelText);
	void OverrideAcceptButtonText(class FText AcceptText);
	void GetSplitscreenLocalPlayerIndex(int32 ReturnValue);
};

// 0x250 (0x9A8 - 0x758)
// Class ShooterGame.UI_Hairstyle
class UUI_Hairstyle : public UPrimalUI
{
public:
	class FName                                  TabBgSwitcherName;                                 // 0x758(0x8)(None)
	class FName                                  HeadHairEnabledEffectName;                         // 0x760(0x8)(None)
	class FName                                  FacialHairEnabledEffectName;                       // 0x768(0x8)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x770(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x780(0x10)(None)
	class UClass*                                HairStyleEntryTemplate;                            // 0x790(0x8)(ZeroConstructor)
	uint8                                        Pad_4334[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class AShooterCharacter>      TargetActor;                                       // 0x7F0(0x8)(ZeroConstructor)
	uint8                                        Pad_4335[0xC8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            TheHairStyleSelectedDelegate;                      // 0x8C0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ClearHeadHairButtonClickedDelegate;                // 0x8D0(0x10)(ZeroConstructor)
	FMulticastInlineDelegateProperty_            ClearFacialHairButtonClickedDelegate;              // 0x8E0(0x10)(ZeroConstructor)
	uint8                                        Pad_4336[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          HairMaterialsNames;                                // 0x930(0x10)(None)
	TArray<class FName>                          HairDyeMaterialsNames;                             // 0x940(0x10)(None)
	int32                                        NewHeadHairIndex;                                  // 0x950(0x4)(None)
	int32                                        NewEyebrowIndex;                                   // 0x954(0x4)(None)
	int32                                        NewFacialHairIndex;                                // 0x958(0x4)(None)
	float                                        NewHeadHairPercent;                                // 0x95C(0x4)(None)
	float                                        NewFacialHairPercent;                              // 0x960(0x4)(None)
	uint8                                        Pad_4337[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                HeadHairDyeID1;                                    // 0x968(0x10)(None)
	TArray<int32>                                HeadHairDyeID2;                                    // 0x978(0x10)(None)
	TArray<int32>                                FacialHairDyeID1;                                  // 0x988(0x10)(None)
	TArray<int32>                                FacialHairDyeID2;                                  // 0x998(0x10)(None)

	static class UClass* StaticClass();
	static class UUI_Hairstyle* GetDefaultObj();

	void UpdateHeadHairStyleIndex(int32 Index);
	void UpdateFacialHairStyleIndex(int32 Index);
	void UpdateEyebrowStyleIndex(int32 Index);
	void OnHeadHairStyleButtonClicked(class UWidget* TheWidget);
	void OnFacialHairStyleButtonClicked(class UWidget* TheWidget);
	void OnEyebrowStyleButtonClicked(class UWidget* TheWidget);
	void GetDyeItemSelectors(const TArray<class UDyeItemSelector*>& ReturnValue);
	void BPSetupForPreviewMesh();
};

// 0xF0 (0x848 - 0x758)
// Class ShooterGame.UI_HelpPage
class UUI_HelpPage : public UPrimalUI
{
public:
	uint8                                        Pad_4338[0xF0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_HelpPage* GetDefaultObj();

};

// 0x8F8 (0x1050 - 0x758)
// Class ShooterGame.UI_HexagonConversion
class UUI_HexagonConversion : public UPrimalUI
{
public:
	uint8                                        Pad_4339[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ItemIconName;                                      // 0x890(0x8)(None)
	class FName                                  ItemIconPanelName;                                 // 0x898(0x8)(None)
	class FName                                  ItemNameTextBoxName;                               // 0x8A0(0x8)(None)
	class FName                                  CostPanelName;                                     // 0x8A8(0x8)(None)
	class FName                                  CostCountTextBoxName;                              // 0x8B0(0x8)(None)
	class FName                                  CurrentCountTextBoxName;                           // 0x8B8(0x8)(None)
	class FName                                  SubtotalCountTextBoxName;                          // 0x8C0(0x8)(None)
	class FName                                  RemainingCountTextBoxName;                         // 0x8C8(0x8)(None)
	class FName                                  AvailableItemsScrollboxName;                       // 0x8D0(0x8)(None)
	class FName                                  ConvertButtonName;                                 // 0x8D8(0x8)(None)
	class FName                                  CloseButtonName;                                   // 0x8E0(0x8)(None)
	class FName                                  ItemQuantityTextBoxName;                           // 0x8E8(0x8)(None)
	class FName                                  ItemDescriptionTextBoxName;                        // 0x8F0(0x8)(None)
	class FName                                  ItemWeightValueTextBlockName;                      // 0x8F8(0x8)(None)
	class FName                                  ItemInventoryQuantityValueTextBlockName;           // 0x900(0x8)(None)
	class FName                                  ConvertButtonItemIconName;                         // 0x908(0x8)(None)
	class FName                                  QuantitySelectorTextBlockName;                     // 0x910(0x8)(None)
	class FName                                  ConvertButtonSubtotalTextBlockName;                // 0x918(0x8)(None)
	class FName                                  ConvertButtonQuantityTextBlockName;                // 0x920(0x8)(None)
	class FName                                  WeightBeforePurchaseTextBlockName;                 // 0x928(0x8)(None)
	class FName                                  WeightAfterPurchaseTextBlockName;                  // 0x930(0x8)(None)
	class FName                                  WeightBeforePurchaseProgressBarName;               // 0x938(0x8)(None)
	class FName                                  WeightAfterPurchaseProgressBarName;                // 0x940(0x8)(None)
	class FName                                  IncreaseQuantityButtonName;                        // 0x948(0x8)(None)
	class FName                                  IncreaseQuantity10ButtonName;                      // 0x950(0x8)(None)
	class FName                                  MaxIncreaseQuantityButtonName;                     // 0x958(0x8)(None)
	class FName                                  DecreaseQuantityButtonName;                        // 0x960(0x8)(None)
	class FName                                  DecreaseQuantity10ButtonName;                      // 0x968(0x8)(None)
	class FName                                  MaxDecreaseQuantityButtonName;                     // 0x970(0x8)(None)
	class FName                                  SearchTextBoxName;                                 // 0x978(0x8)(None)
	int32                                        AvailableItemsPerRow;                              // 0x980(0x4)(None)
	uint8                                        Pad_433A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<bool>                                 CurrentAvailableItems;                             // 0x988(0x10)(None)
	uint8                                        Pad_433B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SlotButtonTemplate;                                // 0x9A8(0x8)(ZeroConstructor)
	class UClass*                                EmptySlotButtonTemplate;                           // 0x9B0(0x8)(ZeroConstructor)
	struct FCustomButtonWidgetStyle              UnavailableItemButtonStyle;                        // 0x9B8(0x48)(None)
	uint8                                        Pad_433C[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCustomButtonWidgetStyle              UnavailableConvertButtonStyle;                     // 0xA48(0x48)(None)
	uint8                                        Pad_433D[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateColor                           NotAbleToPurchaseTextColor;                        // 0xAD8(0x14)(None)
	struct FSlateColor                           AbleToPurchaseTextColor;                           // 0xAEC(0x14)(None)
	struct FSlateColor                           NeutralTextColor;                                  // 0xB00(0x14)(None)
	uint8                                        Pad_433E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCompanionReactionData                PurchaseItemReaction;                              // 0xB18(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                CloseStoreReactionNoPurchase;                      // 0xBC8(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                CloseStoreReactionDidPurchase;                     // 0xC78(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                OpenStoreReaction;                                 // 0xD28(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                OpenStoreReactionSale;                             // 0xDD8(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                OpenStoreReactionChange;                           // 0xE88(0xB0)(ZeroConstructor)
	struct FCompanionReactionData                OpenStoreReactionNewItemUnlocked;                  // 0xF38(0xB0)(ZeroConstructor)
	uint8                                        Pad_433F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         DebugTestSaleReaction;                             // 0xFEA(0x1)(None)
	bool                                         DebugTestChangeReaction;                           // 0xFEB(0x1)(None)
	bool                                         DebugTestNewReaction;                              // 0xFEC(0x1)(None)
	uint8                                        Pad_4340[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             StoreOpenSound;                                    // 0xFF0(0x8)(ZeroConstructor)
	class USoundCue*                             StoreCloseSound;                                   // 0xFF8(0x8)(ZeroConstructor)
	int32                                        RequiredQuantity;                                  // 0x1000(0x4)(None)
	uint8                                        Pad_4341[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UHexagonTradableOption*                CurrentTradableItemOption;                         // 0x1008(0x8)(ZeroConstructor)
	struct FSlateColor                           WeightTextColor;                                   // 0x1010(0x14)(None)
	struct FSlateColor                           OverencumberedTextColor;                           // 0x1024(0x14)(None)
	int32                                        ItemRow;                                           // 0x1038(0x4)(None)
	int32                                        ItemColumn;                                        // 0x103C(0x4)(None)
	uint8                                        Pad_4342[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_HexagonConversion* GetDefaultObj();

	void TradableItemSelected(class UWidget* TheWidget);
	void PopulateAvailableTradeItems(const TArray<bool>& AvailableItems);
	void OnSearchTextChanged(class FText Text);
	void HideItem(int32 ItemIndex);
	void GetWidgetIndexOfAssociatedItemIndex(int32 ItemIndex, int32 ReturnValue);
	void GetCurrentlySelectedTradeItemWidgetIndex(int32 ReturnValue);
	void FilterAvailableTradeItems(const TArray<bool>& AvailableTradableItems, const class FString& FilterText);
};

// 0x1170 (0x18C8 - 0x758)
// Class ShooterGame.UI_HostSession
class UUI_HostSession : public UPrimalUI
{
public:
	TArray<struct FMapDescription>               MapDescriptionsArray;                              // 0x758(0x10)(ZeroConstructor)
	class FName                                  ProceduralButtonName;                              // 0x768(0x8)(None)
	class FName                                  DeleteProceduralArkButtonName;                     // 0x770(0x8)(None)
	class FName                                  HostButtonName;                                    // 0x778(0x8)(None)
	class FName                                  HostDedicatedButtonName;                           // 0x780(0x8)(None)
	class FName                                  HostListenButtonName;                              // 0x788(0x8)(None)
	class FName                                  UpdateModsButtonName;                              // 0x790(0x8)(None)
	class FName                                  ProgressTextName;                                  // 0x798(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x7A0(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x7A8(0x8)(None)
	uint8                                        Pad_4350[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  MySwitchScrollBoxName;                             // 0x7B8(0x8)(None)
	class FName                                  SessionsPanelName;                                 // 0x7C0(0x8)(None)
	class FName                                  ClearLocalDataButtonName;                          // 0x7C8(0x8)(None)
	class FName                                  ConnectingPanelName;                               // 0x7D0(0x8)(None)
	class FName                                  PasswordAcceptButtonName;                          // 0x7D8(0x8)(None)
	class FName                                  PasswordCancelButtonName;                          // 0x7E0(0x8)(None)
	class FName                                  PasswordTextFieldName;                             // 0x7E8(0x8)(None)
	class FName                                  PasswordAdminTextFieldName;                        // 0x7F0(0x8)(None)
	class FName                                  SessionNameTextFieldName;                          // 0x7F8(0x8)(None)
	class FName                                  PasswordPanelName;                                 // 0x800(0x8)(None)
	class FName                                  ErrorBlockName;                                    // 0x808(0x8)(None)
	class UClass*                                SlotButtonTemplate;                                // 0x810(0x8)(ZeroConstructor)
	class UClass*                                ProceduralSettingsTemplate;                        // 0x818(0x8)(ZeroConstructor)
	uint8                                        Pad_4351[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxPasswordChars;                                  // 0x828(0x4)(None)
	int32                                        MaxSessionNameChars;                               // 0x82C(0x4)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x830(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x840(0x10)(None)
	float                                        PlayerDamageScale;                                 // 0x850(0x4)(None)
	float                                        PlayerDamageOffset;                                // 0x854(0x4)(None)
	float                                        PlayerDamageDefault;                               // 0x858(0x4)(None)
	float                                        PlayerResistanceScale;                             // 0x85C(0x4)(None)
	float                                        PlayerResistanceOffset;                            // 0x860(0x4)(None)
	float                                        PlayerResistanceDefault;                           // 0x864(0x4)(None)
	float                                        PlayerWaterDrainScale;                             // 0x868(0x4)(None)
	float                                        PlayerWaterDrainOffset;                            // 0x86C(0x4)(None)
	float                                        PlayerWaterDrainDefault;                           // 0x870(0x4)(None)
	float                                        PlayerFoodDrainScale;                              // 0x874(0x4)(None)
	float                                        PlayerFoodDrainOffset;                             // 0x878(0x4)(None)
	float                                        PlayerFoodDrainDefault;                            // 0x87C(0x4)(None)
	float                                        PlayerStaminaDrainScale;                           // 0x880(0x4)(None)
	float                                        PlayerStaminaDrainOffset;                          // 0x884(0x4)(None)
	float                                        PlayerStaminaDrainDefault;                         // 0x888(0x4)(None)
	float                                        PlayerHealthRecoveryScale;                         // 0x88C(0x4)(None)
	float                                        PlayerHealthRecoveryOffset;                        // 0x890(0x4)(None)
	float                                        PlayerHealthRecoveryDefault;                       // 0x894(0x4)(None)
	float                                        PlayerHarvestingDamageScale;                       // 0x898(0x4)(None)
	float                                        PlayerHarvestingDamageOffset;                      // 0x89C(0x4)(None)
	float                                        PlayerHarvestingDamageDefault;                     // 0x8A0(0x4)(None)
	float                                        DinoCountScale;                                    // 0x8A4(0x4)(None)
	float                                        DinoCountOffset;                                   // 0x8A8(0x4)(None)
	float                                        DinoCountDefault;                                  // 0x8AC(0x4)(None)
	float                                        DinoDamageScale;                                   // 0x8B0(0x4)(None)
	float                                        DinoDamageOffset;                                  // 0x8B4(0x4)(None)
	float                                        DinoDamageDefault;                                 // 0x8B8(0x4)(None)
	float                                        DinoResistanceScale;                               // 0x8BC(0x4)(None)
	float                                        DinoResistanceOffset;                              // 0x8C0(0x4)(None)
	float                                        DinoResistanceDefault;                             // 0x8C4(0x4)(None)
	float                                        DinoFoodDrainScale;                                // 0x8C8(0x4)(None)
	float                                        DinoFoodDrainOffset;                               // 0x8CC(0x4)(None)
	float                                        DinoFoodDrainDefault;                              // 0x8D0(0x4)(None)
	float                                        DinoStaminaDrainScale;                             // 0x8D4(0x4)(None)
	float                                        DinoStaminaDrainOffset;                            // 0x8D8(0x4)(None)
	float                                        DinoStaminaDrainDefault;                           // 0x8DC(0x4)(None)
	float                                        DinoHealthRecoveryScale;                           // 0x8E0(0x4)(None)
	float                                        DinoHealthRecoveryOffset;                          // 0x8E4(0x4)(None)
	float                                        DinoHealthRecoveryDefault;                         // 0x8E8(0x4)(None)
	float                                        DinoHarvestingDamageScale;                         // 0x8EC(0x4)(None)
	float                                        DinoHarvestingDamageOffset;                        // 0x8F0(0x4)(None)
	float                                        DinoHarvestingDamageDefault;                       // 0x8F4(0x4)(None)
	float                                        DinoTurretDamageScale;                             // 0x8F8(0x4)(None)
	float                                        DinoTurretDamageOffset;                            // 0x8FC(0x4)(None)
	float                                        DinoTurretDamageDefault;                           // 0x900(0x4)(None)
	float                                        StructureDamageScale;                              // 0x904(0x4)(None)
	float                                        StructureDamageOffset;                             // 0x908(0x4)(None)
	float                                        StructureDamageDefault;                            // 0x90C(0x4)(None)
	float                                        StructureResistanceScale;                          // 0x910(0x4)(None)
	float                                        StructureResistanceOffset;                         // 0x914(0x4)(None)
	float                                        StructureResistanceDefault;                        // 0x918(0x4)(None)
	float                                        StructureDamageRepairCDScale;                      // 0x91C(0x4)(None)
	float                                        StructureDamageRepairCDOffset;                     // 0x920(0x4)(None)
	float                                        StructureDamageRepairCDDefault;                    // 0x924(0x4)(None)
	float                                        StructureMaxInRangeScale;                          // 0x928(0x4)(None)
	float                                        StructureMaxInRangeOffset;                         // 0x92C(0x4)(None)
	float                                        StructureMaxInRangeDefault;                        // 0x930(0x4)(None)
	float                                        XPMultiplierScale;                                 // 0x934(0x4)(None)
	float                                        XPMultiplierOffset;                                // 0x938(0x4)(None)
	float                                        XPMultiplierDefault;                               // 0x93C(0x4)(None)
	float                                        TamingSpeedScale;                                  // 0x940(0x4)(None)
	float                                        TamingSpeedOffset;                                 // 0x944(0x4)(None)
	float                                        TamingSpeedDefault;                                // 0x948(0x4)(None)
	float                                        HarvestAmountScale;                                // 0x94C(0x4)(None)
	float                                        HarvestAmountOffset;                               // 0x950(0x4)(None)
	float                                        HarvestAmountDefault;                              // 0x954(0x4)(None)
	float                                        DifficultyValueScale;                              // 0x958(0x4)(None)
	float                                        DifficultyValueOffset;                             // 0x95C(0x4)(None)
	float                                        DifficultyValueDefault;                            // 0x960(0x4)(None)
	float                                        ListenServerTetherDistanceScale;                   // 0x964(0x4)(None)
	float                                        ListenServerTetherDistanceOffset;                  // 0x968(0x4)(None)
	float                                        ListenServerTetherDistanceDefault;                 // 0x96C(0x4)(None)
	float                                        AutoStartTimeScale;                                // 0x970(0x4)(None)
	float                                        AutoStartTimeOffset;                               // 0x974(0x4)(None)
	float                                        AutoStartTimeDefault;                              // 0x978(0x4)(None)
	float                                        AutoStopTimeScale;                                 // 0x97C(0x4)(None)
	float                                        AutoStopTimeOffset;                                // 0x980(0x4)(None)
	float                                        AutoStopTimeDefault;                               // 0x984(0x4)(None)
	float                                        PvEStructureDecayPeriodScale;                      // 0x988(0x4)(None)
	float                                        PvEStructureDecayPeriodOffset;                     // 0x98C(0x4)(None)
	float                                        PvEStructureDecayPeriodDefault;                    // 0x990(0x4)(None)
	float                                        PvEDinoDecayPeriodScale;                           // 0x994(0x4)(None)
	float                                        PvEDinoDecayPeriodOffset;                          // 0x998(0x4)(None)
	float                                        PvEDinoDecayPeriodDefault;                         // 0x99C(0x4)(None)
	float                                        IncreasePvPRespawnIntervalCheckPeriodScale;        // 0x9A0(0x4)(None)
	float                                        IncreasePvPRespawnIntervalCheckPeriodOffset;       // 0x9A4(0x4)(None)
	float                                        IncreasePvPRespawnIntervalCheckPeriodDefault;      // 0x9A8(0x4)(None)
	float                                        IncreasePvPRespawnIntervalMultiplierScale;         // 0x9AC(0x4)(None)
	float                                        IncreasePvPRespawnIntervalMultiplierOffset;        // 0x9B0(0x4)(None)
	float                                        IncreasePvPRespawnIntervalMultiplierDefault;       // 0x9B4(0x4)(None)
	float                                        IncreasePvPRespawnIntervalBaseAmountScale;         // 0x9B8(0x4)(None)
	float                                        IncreasePvPRespawnIntervalBaseAmountOffset;        // 0x9BC(0x4)(None)
	float                                        IncreasePvPRespawnIntervalBaseAmountDefault;       // 0x9C0(0x4)(None)
	float                                        PreventOfflinePvPIntervalScale;                    // 0x9C4(0x4)(None)
	float                                        PreventOfflinePvPIntervalOffset;                   // 0x9C8(0x4)(None)
	float                                        PreventOfflinePvPIntervalDefault;                  // 0x9CC(0x4)(None)
	float                                        PvPZoneStructureDamageScale;                       // 0x9D0(0x4)(None)
	float                                        PvPZoneStructureDamageOffset;                      // 0x9D4(0x4)(None)
	float                                        PvPZoneStructureDamageDefault;                     // 0x9D8(0x4)(None)
	float                                        StructurePreventResourceRadiusScale;               // 0x9DC(0x4)(None)
	float                                        StructurePreventResourceRadiusOffset;              // 0x9E0(0x4)(None)
	float                                        StructurePreventResourceRadiusDefault;             // 0x9E4(0x4)(None)
	float                                        DayCycleSpeedScale;                                // 0x9E8(0x4)(None)
	float                                        DayCycleSpeedOffset;                               // 0x9EC(0x4)(None)
	float                                        DayCycleSpeedDefault;                              // 0x9F0(0x4)(None)
	float                                        DayTimeSpeedScale;                                 // 0x9F4(0x4)(None)
	float                                        DayTimeSpeedOffset;                                // 0x9F8(0x4)(None)
	float                                        DayTimeSpeedDefault;                               // 0x9FC(0x4)(None)
	float                                        NightTimeSpeedScale;                               // 0xA00(0x4)(None)
	float                                        NightTimeSpeedOffset;                              // 0xA04(0x4)(None)
	float                                        NightTimeSpeedDefault;                             // 0xA08(0x4)(None)
	float                                        StartTimeHourScale;                                // 0xA0C(0x4)(None)
	float                                        StartTimeHourOffset;                               // 0xA10(0x4)(None)
	float                                        StartTimeHourDefault;                              // 0xA14(0x4)(None)
	float                                        GlobalSpoilingTimeScale;                           // 0xA18(0x4)(None)
	float                                        GlobalSpoilingTimeOffset;                          // 0xA1C(0x4)(None)
	float                                        GlobalSpoilingTimeDefault;                         // 0xA20(0x4)(None)
	float                                        GlobalItemDecompositionTimeScale;                  // 0xA24(0x4)(None)
	float                                        GlobalItemDecompositionTimeOffset;                 // 0xA28(0x4)(None)
	float                                        GlobalItemDecompositionTimeDefault;                // 0xA2C(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeScale;                // 0xA30(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeOffset;               // 0xA34(0x4)(None)
	float                                        GlobalCorpseDecompositionTimeDefault;              // 0xA38(0x4)(None)
	float                                        ResourceNoReplenishRadiusPlayersScale;             // 0xA3C(0x4)(None)
	float                                        ResourceNoReplenishRadiusPlayersOffset;            // 0xA40(0x4)(None)
	float                                        ResourceNoReplenishRadiusPlayersDefault;           // 0xA44(0x4)(None)
	float                                        ResourceNoReplenishRadiusStructuresScale;          // 0xA48(0x4)(None)
	float                                        ResourceNoReplenishRadiusStructuresOffset;         // 0xA4C(0x4)(None)
	float                                        ResourceNoReplenishRadiusStructuresDefault;        // 0xA50(0x4)(None)
	float                                        HarvestHealthScale;                                // 0xA54(0x4)(None)
	float                                        HarvestHealthOffset;                               // 0xA58(0x4)(None)
	float                                        HarvestHealthDefault;                              // 0xA5C(0x4)(None)
	float                                        ResourcesRespawnPeriodScale;                       // 0xA60(0x4)(None)
	float                                        ResourcesRespawnPeriodOffset;                      // 0xA64(0x4)(None)
	float                                        ResourcesRespawnPeriodDefault;                     // 0xA68(0x4)(None)
	float                                        CropGrowthSpeedScale;                              // 0xA6C(0x4)(None)
	float                                        CropGrowthSpeedOffset;                             // 0xA70(0x4)(None)
	float                                        CropGrowthSpeedDefault;                            // 0xA74(0x4)(None)
	float                                        CropDecaySpeedScale;                               // 0xA78(0x4)(None)
	float                                        CropDecaySpeedOffset;                              // 0xA7C(0x4)(None)
	float                                        CropDecaySpeedDefault;                             // 0xA80(0x4)(None)
	float                                        PoopIntervalScale;                                 // 0xA84(0x4)(None)
	float                                        PoopIntervalOffset;                                // 0xA88(0x4)(None)
	float                                        PoopIntervalDefault;                               // 0xA8C(0x4)(None)
	float                                        MatingIntervalScale;                               // 0xA90(0x4)(None)
	float                                        MatingIntervalOffset;                              // 0xA94(0x4)(None)
	float                                        MatingIntervalDefault;                             // 0xA98(0x4)(None)
	float                                        LayEggIntervalScale;                               // 0xA9C(0x4)(None)
	float                                        LayEggIntervalOffset;                              // 0xAA0(0x4)(None)
	float                                        LayEggIntervalDefault;                             // 0xAA4(0x4)(None)
	float                                        EggHatchSpeedScale;                                // 0xAA8(0x4)(None)
	float                                        EggHatchSpeedOffset;                               // 0xAAC(0x4)(None)
	float                                        EggHatchSpeedDefault;                              // 0xAB0(0x4)(None)
	float                                        BabyMatureSpeedScale;                              // 0xAB4(0x4)(None)
	float                                        BabyMatureSpeedOffset;                             // 0xAB8(0x4)(None)
	float                                        BabyMatureSpeedDefault;                            // 0xABC(0x4)(None)
	float                                        BabyFoodConsumptionSpeedScale;                     // 0xAC0(0x4)(None)
	float                                        BabyFoodConsumptionSpeedOffset;                    // 0xAC4(0x4)(None)
	float                                        BabyFoodConsumptionSpeedDefault;                   // 0xAC8(0x4)(None)
	float                                        BabyCuddleIntervalScale;                           // 0xACC(0x4)(None)
	float                                        BabyCuddleIntervalOffset;                          // 0xAD0(0x4)(None)
	float                                        BabyCuddleIntervalDefault;                         // 0xAD4(0x4)(None)
	float                                        BabyCuddleGracePeriodScale;                        // 0xAD8(0x4)(None)
	float                                        BabyCuddleGracePeriodOffset;                       // 0xADC(0x4)(None)
	float                                        BabyCuddleGracePeriodDefault;                      // 0xAE0(0x4)(None)
	float                                        BabyCuddleLoseImprintQualitySpeedScale;            // 0xAE4(0x4)(None)
	float                                        BabyCuddleLoseImprintQualitySpeedOffset;           // 0xAE8(0x4)(None)
	float                                        BabyCuddleLoseImprintQualitySpeedDefault;          // 0xAEC(0x4)(None)
	float                                        BabyImprintingStatScaleScale;                      // 0xAF0(0x4)(None)
	float                                        BabyImprintingStatScaleOffset;                     // 0xAF4(0x4)(None)
	float                                        BabyImprintingStatScaleDefault;                    // 0xAF8(0x4)(None)
	float                                        PerLevelStatDinoWildHealthScale;                   // 0xAFC(0x4)(None)
	float                                        PerLevelStatDinoWildHealthOffset;                  // 0xB00(0x4)(None)
	float                                        PerLevelStatDinoWildHealthDefault;                 // 0xB04(0x4)(None)
	float                                        PerLevelStatDinoWildStaminaScale;                  // 0xB08(0x4)(None)
	float                                        PerLevelStatDinoWildStaminaOffset;                 // 0xB0C(0x4)(None)
	float                                        PerLevelStatDinoWildStaminaDefault;                // 0xB10(0x4)(None)
	float                                        PerLevelStatDinoWildTorpidityScale;                // 0xB14(0x4)(None)
	float                                        PerLevelStatDinoWildTorpidityOffset;               // 0xB18(0x4)(None)
	float                                        PerLevelStatDinoWildTorpidityDefault;              // 0xB1C(0x4)(None)
	float                                        PerLevelStatDinoWildOxygenScale;                   // 0xB20(0x4)(None)
	float                                        PerLevelStatDinoWildOxygenOffset;                  // 0xB24(0x4)(None)
	float                                        PerLevelStatDinoWildOxygenDefault;                 // 0xB28(0x4)(None)
	float                                        PerLevelStatDinoWildFoodScale;                     // 0xB2C(0x4)(None)
	float                                        PerLevelStatDinoWildFoodOffset;                    // 0xB30(0x4)(None)
	float                                        PerLevelStatDinoWildFoodDefault;                   // 0xB34(0x4)(None)
	float                                        PerLevelStatDinoWildWaterScale;                    // 0xB38(0x4)(None)
	float                                        PerLevelStatDinoWildWaterOffset;                   // 0xB3C(0x4)(None)
	float                                        PerLevelStatDinoWildWaterDefault;                  // 0xB40(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureScale;              // 0xB44(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureOffset;             // 0xB48(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureDefault;            // 0xB4C(0x4)(None)
	float                                        PerLevelStatDinoWildWeightScale;                   // 0xB50(0x4)(None)
	float                                        PerLevelStatDinoWildWeightOffset;                  // 0xB54(0x4)(None)
	float                                        PerLevelStatDinoWildWeightDefault;                 // 0xB58(0x4)(None)
	float                                        PerLevelStatDinoWildDamageScale;                   // 0xB5C(0x4)(None)
	float                                        PerLevelStatDinoWildDamageOffset;                  // 0xB60(0x4)(None)
	float                                        PerLevelStatDinoWildDamageDefault;                 // 0xB64(0x4)(None)
	float                                        PerLevelStatDinoWildSpeedScale;                    // 0xB68(0x4)(None)
	float                                        PerLevelStatDinoWildSpeedOffset;                   // 0xB6C(0x4)(None)
	float                                        PerLevelStatDinoWildSpeedDefault;                  // 0xB70(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureFortitudeScale;     // 0xB74(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureFortitudeOffset;    // 0xB78(0x4)(None)
	float                                        PerLevelStatDinoWildTemperatureFortitudeDefault;   // 0xB7C(0x4)(None)
	float                                        PerLevelStatDinoTamedHealthScale;                  // 0xB80(0x4)(None)
	float                                        PerLevelStatDinoTamedHealthOffset;                 // 0xB84(0x4)(None)
	float                                        PerLevelStatDinoTamedHealthDefault;                // 0xB88(0x4)(None)
	float                                        PerLevelStatDinoTamedStaminaScale;                 // 0xB8C(0x4)(None)
	float                                        PerLevelStatDinoTamedStaminaOffset;                // 0xB90(0x4)(None)
	float                                        PerLevelStatDinoTamedStaminaDefault;               // 0xB94(0x4)(None)
	float                                        PerLevelStatDinoTamedTorpidityScale;               // 0xB98(0x4)(None)
	float                                        PerLevelStatDinoTamedTorpidityOffset;              // 0xB9C(0x4)(None)
	float                                        PerLevelStatDinoTamedTorpidityDefault;             // 0xBA0(0x4)(None)
	float                                        PerLevelStatDinoTamedOxygenScale;                  // 0xBA4(0x4)(None)
	float                                        PerLevelStatDinoTamedOxygenOffset;                 // 0xBA8(0x4)(None)
	float                                        PerLevelStatDinoTamedOxygenDefault;                // 0xBAC(0x4)(None)
	float                                        PerLevelStatDinoTamedFoodScale;                    // 0xBB0(0x4)(None)
	float                                        PerLevelStatDinoTamedFoodOffset;                   // 0xBB4(0x4)(None)
	float                                        PerLevelStatDinoTamedFoodDefault;                  // 0xBB8(0x4)(None)
	float                                        PerLevelStatDinoTamedWaterScale;                   // 0xBBC(0x4)(None)
	float                                        PerLevelStatDinoTamedWaterOffset;                  // 0xBC0(0x4)(None)
	float                                        PerLevelStatDinoTamedWaterDefault;                 // 0xBC4(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureScale;             // 0xBC8(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureOffset;            // 0xBCC(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureDefault;           // 0xBD0(0x4)(None)
	float                                        PerLevelStatDinoTamedWeightScale;                  // 0xBD4(0x4)(None)
	float                                        PerLevelStatDinoTamedWeightOffset;                 // 0xBD8(0x4)(None)
	float                                        PerLevelStatDinoTamedWeightDefault;                // 0xBDC(0x4)(None)
	float                                        PerLevelStatDinoTamedDamageScale;                  // 0xBE0(0x4)(None)
	float                                        PerLevelStatDinoTamedDamageOffset;                 // 0xBE4(0x4)(None)
	float                                        PerLevelStatDinoTamedDamageDefault;                // 0xBE8(0x4)(None)
	float                                        PerLevelStatDinoTamedSpeedScale;                   // 0xBEC(0x4)(None)
	float                                        PerLevelStatDinoTamedSpeedOffset;                  // 0xBF0(0x4)(None)
	float                                        PerLevelStatDinoTamedSpeedDefault;                 // 0xBF4(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureFortitudeScale;    // 0xBF8(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureFortitudeOffset;   // 0xBFC(0x4)(None)
	float                                        PerLevelStatDinoTamedTemperatureFortitudeDefault;  // 0xC00(0x4)(None)
	float                                        PerLevelStatDinoTamedAddHealthScale;               // 0xC04(0x4)(None)
	float                                        PerLevelStatDinoTamedAddHealthOffset;              // 0xC08(0x4)(None)
	float                                        PerLevelStatDinoTamedAddHealthDefault;             // 0xC0C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddStaminaScale;              // 0xC10(0x4)(None)
	float                                        PerLevelStatDinoTamedAddStaminaOffset;             // 0xC14(0x4)(None)
	float                                        PerLevelStatDinoTamedAddStaminaDefault;            // 0xC18(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTorpidityScale;            // 0xC1C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTorpidityOffset;           // 0xC20(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTorpidityDefault;          // 0xC24(0x4)(None)
	float                                        PerLevelStatDinoTamedAddOxygenScale;               // 0xC28(0x4)(None)
	float                                        PerLevelStatDinoTamedAddOxygenOffset;              // 0xC2C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddOxygenDefault;             // 0xC30(0x4)(None)
	float                                        PerLevelStatDinoTamedAddFoodScale;                 // 0xC34(0x4)(None)
	float                                        PerLevelStatDinoTamedAddFoodOffset;                // 0xC38(0x4)(None)
	float                                        PerLevelStatDinoTamedAddFoodDefault;               // 0xC3C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWaterScale;                // 0xC40(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWaterOffset;               // 0xC44(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWaterDefault;              // 0xC48(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureScale;          // 0xC4C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureOffset;         // 0xC50(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureDefault;        // 0xC54(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWeightScale;               // 0xC58(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWeightOffset;              // 0xC5C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddWeightDefault;             // 0xC60(0x4)(None)
	float                                        PerLevelStatDinoTamedAddDamageScale;               // 0xC64(0x4)(None)
	float                                        PerLevelStatDinoTamedAddDamageOffset;              // 0xC68(0x4)(None)
	float                                        PerLevelStatDinoTamedAddDamageDefault;             // 0xC6C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddSpeedScale;                // 0xC70(0x4)(None)
	float                                        PerLevelStatDinoTamedAddSpeedOffset;               // 0xC74(0x4)(None)
	float                                        PerLevelStatDinoTamedAddSpeedDefault;              // 0xC78(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureFortitudeScale; // 0xC7C(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureFortitudeOffset; // 0xC80(0x4)(None)
	float                                        PerLevelStatDinoTamedAddTemperatureFortitudeDefault; // 0xC84(0x4)(None)
	float                                        PerLevelStatDinoTamedAffHealthScale;               // 0xC88(0x4)(None)
	float                                        PerLevelStatDinoTamedAffHealthOffset;              // 0xC8C(0x4)(None)
	float                                        PerLevelStatDinoTamedAffHealthDefault;             // 0xC90(0x4)(None)
	float                                        PerLevelStatDinoTamedAffStaminaScale;              // 0xC94(0x4)(None)
	float                                        PerLevelStatDinoTamedAffStaminaOffset;             // 0xC98(0x4)(None)
	float                                        PerLevelStatDinoTamedAffStaminaDefault;            // 0xC9C(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTorpidityScale;            // 0xCA0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTorpidityOffset;           // 0xCA4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTorpidityDefault;          // 0xCA8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffOxygenScale;               // 0xCAC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffOxygenOffset;              // 0xCB0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffOxygenDefault;             // 0xCB4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffFoodScale;                 // 0xCB8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffFoodOffset;                // 0xCBC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffFoodDefault;               // 0xCC0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWaterScale;                // 0xCC4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWaterOffset;               // 0xCC8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWaterDefault;              // 0xCCC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureScale;          // 0xCD0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureOffset;         // 0xCD4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureDefault;        // 0xCD8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWeightScale;               // 0xCDC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWeightOffset;              // 0xCE0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffWeightDefault;             // 0xCE4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffDamageScale;               // 0xCE8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffDamageOffset;              // 0xCEC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffDamageDefault;             // 0xCF0(0x4)(None)
	float                                        PerLevelStatDinoTamedAffSpeedScale;                // 0xCF4(0x4)(None)
	float                                        PerLevelStatDinoTamedAffSpeedOffset;               // 0xCF8(0x4)(None)
	float                                        PerLevelStatDinoTamedAffSpeedDefault;              // 0xCFC(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureFortitudeScale; // 0xD00(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureFortitudeOffset; // 0xD04(0x4)(None)
	float                                        PerLevelStatDinoTamedAffTemperatureFortitudeDefault; // 0xD08(0x4)(None)
	float                                        PerLevelStatPlayerHealthScale;                     // 0xD0C(0x4)(None)
	float                                        PerLevelStatPlayerHealthOffset;                    // 0xD10(0x4)(None)
	float                                        PerLevelStatPlayerHealthDefault;                   // 0xD14(0x4)(None)
	float                                        PerLevelStatPlayerStaminaScale;                    // 0xD18(0x4)(None)
	float                                        PerLevelStatPlayerStaminaOffset;                   // 0xD1C(0x4)(None)
	float                                        PerLevelStatPlayerStaminaDefault;                  // 0xD20(0x4)(None)
	float                                        PerLevelStatPlayerTorpidityScale;                  // 0xD24(0x4)(None)
	float                                        PerLevelStatPlayerTorpidityOffset;                 // 0xD28(0x4)(None)
	float                                        PerLevelStatPlayerTorpidityDefault;                // 0xD2C(0x4)(None)
	float                                        PerLevelStatPlayerOxygenScale;                     // 0xD30(0x4)(None)
	float                                        PerLevelStatPlayerOxygenOffset;                    // 0xD34(0x4)(None)
	float                                        PerLevelStatPlayerOxygenDefault;                   // 0xD38(0x4)(None)
	float                                        PerLevelStatPlayerFoodScale;                       // 0xD3C(0x4)(None)
	float                                        PerLevelStatPlayerFoodOffset;                      // 0xD40(0x4)(None)
	float                                        PerLevelStatPlayerFoodDefault;                     // 0xD44(0x4)(None)
	float                                        PerLevelStatPlayerWaterScale;                      // 0xD48(0x4)(None)
	float                                        PerLevelStatPlayerWaterOffset;                     // 0xD4C(0x4)(None)
	float                                        PerLevelStatPlayerWaterDefault;                    // 0xD50(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureScale;                // 0xD54(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureOffset;               // 0xD58(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureDefault;              // 0xD5C(0x4)(None)
	float                                        PerLevelStatPlayerWeightScale;                     // 0xD60(0x4)(None)
	float                                        PerLevelStatPlayerWeightOffset;                    // 0xD64(0x4)(None)
	float                                        PerLevelStatPlayerWeightDefault;                   // 0xD68(0x4)(None)
	float                                        PerLevelStatPlayerDamageScale;                     // 0xD6C(0x4)(None)
	float                                        PerLevelStatPlayerDamageOffset;                    // 0xD70(0x4)(None)
	float                                        PerLevelStatPlayerDamageDefault;                   // 0xD74(0x4)(None)
	float                                        PerLevelStatPlayerSpeedScale;                      // 0xD78(0x4)(None)
	float                                        PerLevelStatPlayerSpeedOffset;                     // 0xD7C(0x4)(None)
	float                                        PerLevelStatPlayerSpeedDefault;                    // 0xD80(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureFortitudeScale;       // 0xD84(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureFortitudeOffset;      // 0xD88(0x4)(None)
	float                                        PerLevelStatPlayerTemperatureFortitudeDefault;     // 0xD8C(0x4)(None)
	float                                        KillXPMultiplierScale;                             // 0xD90(0x4)(None)
	float                                        KillXPMultiplierOffset;                            // 0xD94(0x4)(None)
	float                                        KillXPMultiplierDefault;                           // 0xD98(0x4)(None)
	float                                        HarvestXPMultiplierScale;                          // 0xD9C(0x4)(None)
	float                                        HarvestXPMultiplierOffset;                         // 0xDA0(0x4)(None)
	float                                        HarvestXPMultiplierDefault;                        // 0xDA4(0x4)(None)
	float                                        CraftXPMultiplierScale;                            // 0xDA8(0x4)(None)
	float                                        CraftXPMultiplierOffset;                           // 0xDAC(0x4)(None)
	float                                        CraftXPMultiplierDefault;                          // 0xDB0(0x4)(None)
	float                                        GenericXPMultiplierScale;                          // 0xDB4(0x4)(None)
	float                                        GenericXPMultiplierOffset;                         // 0xDB8(0x4)(None)
	float                                        GenericXPMultiplierDefault;                        // 0xDBC(0x4)(None)
	float                                        SpecialXPMultiplierScale;                          // 0xDC0(0x4)(None)
	float                                        SpecialXPMultiplierOffset;                         // 0xDC4(0x4)(None)
	float                                        SpecialXPMultiplierDefault;                        // 0xDC8(0x4)(None)
	float                                        ExplorerNoteXPMultiplierScale;                     // 0xDCC(0x4)(None)
	float                                        ExplorerNoteXPMultiplierOffset;                    // 0xDD0(0x4)(None)
	float                                        ExplorerNoteXPMultiplierDefault;                   // 0xDD4(0x4)(None)
	float                                        BossKillXPMultiplierScale;                         // 0xDD8(0x4)(None)
	float                                        BossKillXPMultiplierOffset;                        // 0xDDC(0x4)(None)
	float                                        BossKillXPMultiplierDefault;                       // 0xDE0(0x4)(None)
	float                                        AlphaKillXPMultiplierScale;                        // 0xDE4(0x4)(None)
	float                                        AlphaKillXPMultiplierOffset;                       // 0xDE8(0x4)(None)
	float                                        AlphaKillXPMultiplierDefault;                      // 0xDEC(0x4)(None)
	float                                        WildKillXPMultiplierScale;                         // 0xDF0(0x4)(None)
	float                                        WildKillXPMultiplierOffset;                        // 0xDF4(0x4)(None)
	float                                        WildKillXPMultiplierDefault;                       // 0xDF8(0x4)(None)
	float                                        CaveKillXPMultiplierScale;                         // 0xDFC(0x4)(None)
	float                                        CaveKillXPMultiplierOffset;                        // 0xE00(0x4)(None)
	float                                        CaveKillXPMultiplierDefault;                       // 0xE04(0x4)(None)
	float                                        TamedKillXPMultiplierScale;                        // 0xE08(0x4)(None)
	float                                        TamedKillXPMultiplierOffset;                       // 0xE0C(0x4)(None)
	float                                        TamedKillXPMultiplierDefault;                      // 0xE10(0x4)(None)
	float                                        UnclaimedKillXPMultiplierScale;                    // 0xE14(0x4)(None)
	float                                        UnclaimedKillXPMultiplierOffset;                   // 0xE18(0x4)(None)
	float                                        UnclaimedKillXPMultiplierDefault;                  // 0xE1C(0x4)(None)
	float                                        RaidDinoCharacterFoodDrainScale;                   // 0xE20(0x4)(None)
	float                                        RaidDinoCharacterFoodDrainOffset;                  // 0xE24(0x4)(None)
	float                                        RaidDinoCharacterFoodDrainDefault;                 // 0xE28(0x4)(None)
	float                                        FishingLootQualityScale;                           // 0xE2C(0x4)(None)
	float                                        FishingLootQualityOffset;                          // 0xE30(0x4)(None)
	float                                        FishingLootQualityDefault;                         // 0xE34(0x4)(None)
	float                                        CustomRecipeEffectivenessScale;                    // 0xE38(0x4)(None)
	float                                        CustomRecipeEffectivenessOffset;                   // 0xE3C(0x4)(None)
	float                                        CustomRecipeEffectivenessDefault;                  // 0xE40(0x4)(None)
	float                                        CustomRecipeSkillScale;                            // 0xE44(0x4)(None)
	float                                        CustomRecipeSkillOffset;                           // 0xE48(0x4)(None)
	float                                        CustomRecipeSkillDefault;                          // 0xE4C(0x4)(None)
	float                                        FuelConsumptionIntervalScale;                      // 0xE50(0x4)(None)
	float                                        FuelConsumptionIntervalOffset;                     // 0xE54(0x4)(None)
	float                                        FuelConsumptionIntervalDefault;                    // 0xE58(0x4)(None)
	float                                        PerPlatformMaxStructuresScale;                     // 0xE5C(0x4)(None)
	float                                        PerPlatformMaxStructuresOffset;                    // 0xE60(0x4)(None)
	float                                        PerPlatformMaxStructuresDefault;                   // 0xE64(0x4)(None)
	float                                        OverrideMaxExperiencePointsPlayerScale;            // 0xE68(0x4)(None)
	float                                        OverrideMaxExperiencePointsPlayerOffset;           // 0xE6C(0x4)(None)
	float                                        OverrideMaxExperiencePointsPlayerDefault;          // 0xE70(0x4)(None)
	float                                        OverrideMaxExperiencePointsDinoScale;              // 0xE74(0x4)(None)
	float                                        OverrideMaxExperiencePointsDinoOffset;             // 0xE78(0x4)(None)
	float                                        OverrideMaxExperiencePointsDinoDefault;            // 0xE7C(0x4)(None)
	float                                        MaxNumberOfPlayersInTribeScale;                    // 0xE80(0x4)(None)
	float                                        MaxNumberOfPlayersInTribeOffset;                   // 0xE84(0x4)(None)
	float                                        MaxNumberOfPlayersInTribeDefault;                  // 0xE88(0x4)(None)
	float                                        CraftingSkillBonusScale;                           // 0xE8C(0x4)(None)
	float                                        CraftingSkillBonusOffset;                          // 0xE90(0x4)(None)
	float                                        CraftingSkillBonusDefault;                         // 0xE94(0x4)(None)
	float                                        SupplyCrateLootQualityScale;                       // 0xE98(0x4)(None)
	float                                        SupplyCrateLootQualityOffset;                      // 0xE9C(0x4)(None)
	float                                        SupplyCrateLootQualityDefault;                     // 0xEA0(0x4)(None)
	uint8                                        Pad_4352[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDifficultyValues>             DifficultyDefaultValues;                           // 0xEA8(0x10)(None)
	uint8                                        Pad_4353[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EngramFilterIndex;                                 // 0xECC(0x4)(None)
	uint8                                        Pad_4354[0x920];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UTexture2DDynamic*>             ModPreviewGCStore;                                 // 0x17F0(0x10)(ZeroConstructor)
	uint8                                        Pad_4355[0xA8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MapSelectTimer;                                    // 0x18A8(0x4)(None)
	int32                                        SwitchSelectedMapIndex;                            // 0x18AC(0x4)(None)
	int32                                        SwitchSelectedMapMode;                             // 0x18B0(0x4)(None)
	int32                                        SliderValueStoredSigDigits;                        // 0x18B4(0x4)(None)
	uint8                                        Pad_4356[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWidget*                               LastHostWidgetClicked;                             // 0x18C0(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_HostSession* GetDefaultObj();

	void UpdateDifficultyRules(int32 Difficulty);
	void SlotButtonSelected(class UWidget* TheWidget);
	void ShowConfirmationForSettingsMedium();
	void ShowConfirmationForSettingsHard();
	void ShowConfirmationForSettingsEasy();
	void SetupLayout();
	void SetTextIntFromSettingsData(int32 Value, class UEditableTextBox* TextBox);
	void SetSliderFromSettingsData(float Value, class UDataListValueGeneric* Slider, float Scale, float Offset, bool bZeroUseDefaultValue, float DefaultValue);
	void SetSettingsWithSettingsDataAsset(class UPrimalGameSettingsData* SettingsData);
	void SetSelectedMapIndex(int32 Index);
	void SetCheckBoxFromSettingsData(bool Value, class UDataListValueGeneric* CheckBox);
	void SelectMapButtonPressed();
	void QueueMapSelect();
	void OnSliderValueChanged(float SliderValue);
	void OnSessionPasswordTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnSessionPasswordTextChanged(class FText Text);
	void OnSessionNameTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnSessionNameTextChanged(class FText Text);
	void OnNumericValueCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnModInfoRequested(int64 ModId);
	void OnImageLoadFinish(class UTexture2DDynamic* NewTexture);
	void OnEngramTabOpened();
	void OnDeleteMapServerDataButtonClicked(class UWidget* TheWidget);
	void OnDeleteMapSaveGameButtonClicked(class UWidget* TheWidget);
	void OnCFCoreUIRegister();
	void OnCFCoreUIControllerInit();
	void OnAdminPasswordTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnAdminPasswordTextChanged(class FText Text);
	void OnActiveModReorderButtonClicked(class UWidget* TheWidget);
	void MoveToMapScreen();
	void ModSelected(class UWidget* TheWidget);
	void IsInMapSelectView(bool ReturnValue);
	void HighlightPresetButton(class UCustomButtonWidget* WhichButton);
	void HasSaveForMapIndex(int32 MapIndex, bool ReturnValue);
	void HasDLCforMapIndex(int32 MapIndex, bool ReturnValue);
	void GetSwitchMapEntryForIndex(int32 MapIndex, class UDataListEntryButton_HostSession* ReturnValue);
	void GetSelectedMapIndex(int32 ReturnValue);
	void GetModMaps(const TArray<class UDataListEntryButton_HostSession*>& ReturnValue);
	void GetMapSelectScrollBox(class UScrollBox* ReturnValue);
	void GetMapInfo(int32 MapIndex, class FText OutMapName, const struct FMapDescription& OutDescription);
	void EngramDoubleClicked(class UDataListEntryButton* TheButton);
	void DoesSettingsMatchSettingsDataAsset(class UPrimalGameSettingsData* SettingsData, bool ReturnValue);
	void DeleteSingleplayerData(int32 SelectedIndex);
	void ConfirmedChangeSettingsToMedium();
	void ConfirmedChangeSettingsToHard();
	void ConfirmedChangeSettingsToEasy();
	void BPPostPopulateMods();
	void BPPopulateMods(const TArray<struct FInstalledMod>& ReturnValue);
	void BPOnUpdateSavedDataButtons();
	void BPIsPresetDifficultyUIOpen(bool ReturnValue);
	void ActiveModSelected(class UWidget* TheWidget);
};

// 0x250 (0x9A8 - 0x758)
// Class ShooterGame.UI_Hub
class UUI_Hub : public UPrimalUI
{
public:
	class FName                                  TopRecenteringSpacerName;                          // 0x758(0x8)(None)
	class FName                                  InventoryMenuButtonName;                           // 0x760(0x8)(None)
	class FName                                  EngramsMenuButtonName;                             // 0x768(0x8)(None)
	class FName                                  TribeManagerMenuButtonName;                        // 0x770(0x8)(None)
	class FName                                  TameGroupsMenuButtonName;                          // 0x778(0x8)(None)
	class FName                                  SurvivorProfileMenuButtonName;                     // 0x780(0x8)(None)
	class FName                                  MissionListMenuButtonName;                         // 0x788(0x8)(None)
	class FName                                  MinimapMenuButtonName;                             // 0x790(0x8)(None)
	class FName                                  OptionsMenuButtonName;                             // 0x798(0x8)(None)
	class FName                                  SubMenuWidgetSwitcherName;                         // 0x7A0(0x8)(None)
	class FName                                  CloseHubButtonName;                                // 0x7A8(0x8)(None)
	class FName                                  OpenPauseMenuName;                                 // 0x7B0(0x8)(None)
	class FName                                  HexagonCurrencyValuePanelName;                     // 0x7B8(0x8)(None)
	class FName                                  HexagonCurrencyValueTextBlockName;                 // 0x7C0(0x8)(None)
	class UClass*                                InventoryUITemplate;                               // 0x7C8(0x8)(ZeroConstructor)
	class UClass*                                TribeManagerUITemplate;                            // 0x7D0(0x8)(ZeroConstructor)
	class UClass*                                EngramsMenuUITemplate;                             // 0x7D8(0x8)(ZeroConstructor)
	class UClass*                                TameGroupsUITemplate;                              // 0x7E0(0x8)(ZeroConstructor)
	class UClass*                                SurvivorProfileUITemplate;                         // 0x7E8(0x8)(ZeroConstructor)
	class UClass*                                MissionListUITemplate;                             // 0x7F0(0x8)(ZeroConstructor)
	class UClass*                                MinimapUITemplate;                                 // 0x7F8(0x8)(ZeroConstructor)
	class UClass*                                OptionsMenuUITemplate;                             // 0x800(0x8)(ZeroConstructor)
	class UClass*                                TamingListUITemplate;                              // 0x808(0x8)(ZeroConstructor)
	class UClass*                                CustomTrackedDinoListUITemplate;                   // 0x810(0x8)(ZeroConstructor)
	class USoundCue*                             TabSwitchSound;                                    // 0x818(0x8)(ZeroConstructor)
	uint8                                        Pad_436F[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SelectedMissionEntryIndex;                         // 0x880(0x4)(None)
	int32                                        SelectedBiomeFilterMask;                           // 0x884(0x4)(None)
	uint8                                        Pad_4370[0x120];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Hub* GetDefaultObj();

	void RecenterHub();
	void IsSubMenuActive(enum class EHubSubMenu MenuType, bool ReturnValue);
	void GetSurvivorProfileMenu(bool bAutoShow, class UUI_SurvivorProfile* ReturnValue);
};

// 0x28 (0x780 - 0x758)
// Class ShooterGame.UI_HudOverlay
class UUI_HudOverlay : public UPrimalUI
{
public:
	class FName                                  HudOverlayWidgetName;                              // 0x758(0x8)(None)
	class UCanvasPanel*                          ToolTipPanel;                                      // 0x760(0x8)(ZeroConstructor)
	uint8                                        Pad_4384[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_HudOverlay* GetDefaultObj();

	void ShowOverlayTooltip(class AShooterPlayerController* HUDOwner, class UObject* SponsorObject, class UClass* ToolTipPrefab, const struct FVector2D& ScreenPos, enum class EAlignHorizontalUI HorizontalAlignment, enum class EAlignVerticalUI VerticalAlignment, const struct FVector2D& WithPadding, const struct FVector2D& OverlayScale, bool bRetainScreenProjectionFromWorld, const struct FVector& ScreenProjectionWorldPosition, const struct FVector2D& ScreenProjectionPositionOffset, class UToolTipWidget* ReturnValue);
};

// 0x380 (0xAE8 - 0x768)
// Class ShooterGame.UI_Inventory
class UUI_Inventory : public UPrimalSubMenuUI
{
public:
	class FName                                  PanelContainerLeftName;                            // 0x768(0x8)(None)
	class FName                                  PanelContainerCenterName;                          // 0x770(0x8)(None)
	class FName                                  PanelContainerRightName;                           // 0x778(0x8)(None)
	class FName                                  WidgetSwitcherRightName;                           // 0x780(0x8)(None)
	class FName                                  QuickActionSlotPanelName;                          // 0x788(0x8)(None)
	class FName                                  QuickActionSlotDataListName;                       // 0x790(0x8)(None)
	class FName                                  PlayerCharacterPanelName;                          // 0x798(0x8)(None)
	class FName                                  PlayerInventoryPanelName;                          // 0x7A0(0x8)(None)
	class FName                                  RemoteInventoryPanelName;                          // 0x7A8(0x8)(None)
	class FName                                  StatsPanelName;                                    // 0x7B0(0x8)(None)
	class FName                                  DinoAncestryOverlayName;                           // 0x7B8(0x8)(None)
	class UClass*                                ListSessionsUITemplate;                            // 0x7C0(0x8)(ZeroConstructor)
	class UClass*                                SteamInventoryStatusUITemplate;                    // 0x7C8(0x8)(ZeroConstructor)
	class USoundCue*                             ErrorSound;                                        // 0x7D0(0x8)(ZeroConstructor)
	uint8                                        Pad_4399[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasRemoteInventory;                               // 0x7F0(0x1)(None)
	uint8                                        Pad_43A1[0x2F7];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Inventory* GetDefaultObj();

	void SetInventoryVisibility(bool bVisible);
};

// 0x50 (0x7A8 - 0x758)
// Class ShooterGame.UI_LeaderboardWidget
class UUI_LeaderboardWidget : public UPrimalUI
{
public:
	class FName                                  LeaderboardHeaderContainerName;                    // 0x758(0x8)(None)
	class FName                                  LeaderboardRowContainerName;                       // 0x760(0x8)(None)
	class FName                                  CloseButtonName;                                   // 0x768(0x8)(None)
	float                                        TableWidth;                                        // 0x770(0x4)(None)
	uint8                                        Pad_43A4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPanelWidget*                          HeaderContainer;                                   // 0x778(0x8)(ZeroConstructor)
	class ULeaderboardRowWidget*                 HeaderRowWidget;                                   // 0x780(0x8)(ZeroConstructor)
	class UButton*                               CloseButton;                                       // 0x788(0x8)(ZeroConstructor)
	class UVerticalBox*                          RowContainer;                                      // 0x790(0x8)(ZeroConstructor)
	TArray<class ULeaderboardRowWidget*>         RowWidgets;                                        // 0x798(0x10)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_LeaderboardWidget* GetDefaultObj();

	void SetRows(class UClass* LeaderboardRowWidget, const struct FLeaderboardDisplayRow& HeaderRow, const TArray<struct FLeaderboardDisplayRow>& Rows);
	void SetLeaderboardWidgetVisible(bool bIsVisible);
};

// 0x328 (0xA80 - 0x758)
// Class ShooterGame.UI_ListCharacterData
class UUI_ListCharacterData : public UPrimalUI
{
public:
	class FName                                  DownloadButtonName;                                // 0x758(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x760(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x768(0x8)(None)
	class FName                                  CharacterStatsPanelName;                           // 0x770(0x8)(None)
	class UClass*                                CharacterSlotButtonTemplate;                       // 0x778(0x8)(ZeroConstructor)
	class FName                                  CharacterLabelName;                                // 0x780(0x8)(None)
	class FName                                  CharacterViewPanelName;                            // 0x788(0x8)(None)
	class FName                                  CharacterViewBlockerName;                          // 0x790(0x8)(None)
	class FName                                  ExperienceLabelName;                               // 0x798(0x8)(None)
	class FName                                  ExperienceBarName;                                 // 0x7A0(0x8)(None)
	class FName                                  CharacterHypoThermalInsulationLabelName;           // 0x7A8(0x8)(None)
	class FName                                  CharacterHyperThermalInsulationLabelName;          // 0x7B0(0x8)(None)
	class FName                                  StatsWidgetNames[0xC];                             // 0x7B8(0x60)(None)
	float                                        CameraFocalOffset;                                 // 0x818(0x4)(None)
	uint8                                        Pad_43A8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SteamInventoryStatusUITemplate;                    // 0x820(0x8)(ZeroConstructor)
	uint8                                        Pad_43A9[0x258];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ListCharacterData* GetDefaultObj();

	void CharacterSlotButtonSelected(class UWidget* TheWidget);
};

// 0x1D0 (0x928 - 0x758)
// Class ShooterGame.UI_ListTamedDinos
class UUI_ListTamedDinos : public UPrimalUI
{
public:
	class FName                                  DownloadButtonName;                                // 0x758(0x8)(None)
	class FName                                  UploadButtonName;                                  // 0x760(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x768(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x770(0x8)(None)
	class UClass*                                DinoSlotButtonTemplate;                            // 0x778(0x8)(ZeroConstructor)
	class FName                                  CharacterStatsPanelName;                           // 0x780(0x8)(None)
	class FName                                  CharacterLabelName;                                // 0x788(0x8)(None)
	class FName                                  ExperienceLabelName;                               // 0x790(0x8)(None)
	class FName                                  ExperienceBarName;                                 // 0x798(0x8)(None)
	class FName                                  CharacterHypoThermalInsulationLabelName;           // 0x7A0(0x8)(None)
	class FName                                  CharacterHyperThermalInsulationLabelName;          // 0x7A8(0x8)(None)
	class FName                                  StatsLabelNames[0xC];                              // 0x7B0(0x60)(None)
	uint8                                        Pad_43AA[0x118];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ListTamedDinos* GetDefaultObj();

};

// 0x278 (0x9D0 - 0x758)
// Class ShooterGame.UI_MainMenu
class UUI_MainMenu : public UPrimalUI
{
public:
	class FString                                OptionsButtonName;                                 // 0x758(0x10)(None)
	class FString                                HostButtonName;                                    // 0x768(0x10)(None)
	class FString                                JoinButtonName;                                    // 0x778(0x10)(None)
	class FString                                ExitButtonName;                                    // 0x788(0x10)(None)
	class FString                                ListSessionsName;                                  // 0x798(0x10)(None)
	class FString                                HelpButtonName;                                    // 0x7A8(0x10)(None)
	class FString                                NewsLabelName;                                     // 0x7B8(0x10)(None)
	class FName                                  ConnectingPanelName;                               // 0x7C8(0x8)(None)
	class FString                                EditableTextJoinName;                              // 0x7D0(0x10)(None)
	class FName                                  EditableTextJoinPanelName;                         // 0x7E0(0x8)(None)
	class FName                                  ConnectingDialogPanelName;                         // 0x7E8(0x8)(None)
	class UClass*                                ListSessionsUITemplate;                            // 0x7F0(0x8)(ZeroConstructor)
	class UClass*                                OptionsMenuUITemplate;                             // 0x7F8(0x8)(ZeroConstructor)
	class UClass*                                OptionsMenuUITemplate_PC;                          // 0x800(0x8)(ZeroConstructor)
	class UClass*                                OptionsMenuUITemplate_UWP;                         // 0x808(0x8)(ZeroConstructor)
	class UClass*                                HostSessoinUITemplate;                             // 0x810(0x8)(ZeroConstructor)
	class UClass*                                HelpPageUITemplate;                                // 0x818(0x8)(ZeroConstructor)
	class UClass*                                SlotButtonTemplate;                                // 0x820(0x8)(ZeroConstructor)
	class UClass*                                NotifClass;                                        // 0x828(0x8)(ZeroConstructor)
	class UClass*                                WelcomeClass;                                      // 0x830(0x8)(ZeroConstructor)
	class UClass*                                ModShopUITemplate;                                 // 0x838(0x8)(ZeroConstructor)
	class UClass*                                TermsAndConditionsUITemplate;                      // 0x840(0x8)(ZeroConstructor)
	class UClass*                                UpdatingModsUITemplate;                            // 0x848(0x8)(ZeroConstructor)
	bool                                         bIsNewMainMenu;                                    // 0x850(0x1)(None)
	bool                                         bIsPlayingIntroCinematic;                          // 0x851(0x1)(None)
	uint8                                        Pad_43AF[0x5E];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UScrollBox*                            TotalConversionsScrollBox;                         // 0x8B0(0x8)(ZeroConstructor)
	TArray<class UDataListEntryButton_MainMenu*> TotalConversionsEntryWidgets;                      // 0x8B8(0x10)(ZeroConstructor)
	uint8                                        Pad_43B0[0xFE];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         WaitingForPrivileges;                              // 0x9C6(0x1)(None)
	uint8                                        Pad_43B1[0x9];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MainMenu* GetDefaultObj();

	void TotalConversionSelected(class UWidget* TheWidget);
	void StopIntroCinematic();
	void StopAllCardAnims();
	void StartMainMenuPressed();
	void SettingsOverlayIsOpen(bool ReturnValue);
	void SetMainJoinedButtonVisibility(enum class ESlateVisibility NewVisibilty);
	void OverrideBGImage(class UTexture2D* BGOverrideTexture, bool InstantChange);
	void OpenModShop();
	void OnLastPlayedButtonClicked();
	void OnGamepadSelectionChanged(class UWidget* Widget);
	void OnCFCoreUIControllerInit();
	void JumpToNonDedicatedView();
	void JumpToListSessionView();
	void JumpToIslandSP();
	void JumpToFirstSP();
	void JoinLastPlayedServerShortcutSkip();
	void HighlightStartButton();
	void HandleDLCInstalledEvent();
	void ForceListSessionToTab();
	void EscapeMainMenuPressed();
};

// 0x1A8 (0x900 - 0x758)
// Class ShooterGame.UI_MapMarkersEntry
class UUI_MapMarkersEntry : public UPrimalUI
{
public:
	class UClass*                                SlotButtonTemplate;                                // 0x758(0x8)(ZeroConstructor)
	class FName                                  TabBgSwitcherName;                                 // 0x760(0x8)(None)
	class FName                                  AddEnabledEffectName;                              // 0x768(0x8)(None)
	class FName                                  RemoveEnabledEffectName;                           // 0x770(0x8)(None)
	class FName                                  CloseButtonName;                                   // 0x778(0x8)(None)
	class FName                                  AcceptButtonName;                                  // 0x780(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x788(0x8)(None)
	class FName                                  CoordOneLabelName;                                 // 0x790(0x8)(None)
	class FName                                  CoordTwoLabelName;                                 // 0x798(0x8)(None)
	class FName                                  MarkerNameLabelName;                               // 0x7A0(0x8)(None)
	class FName                                  MarkerNameTextBoxName;                             // 0x7A8(0x8)(None)
	class FName                                  CoordOneTextBoxName;                               // 0x7B0(0x8)(None)
	class FName                                  CoordTwoTextBoxName;                               // 0x7B8(0x8)(None)
	class FName                                  ErrorBlockName;                                    // 0x7C0(0x8)(None)
	class FName                                  RemoveCloseButtonName;                             // 0x7C8(0x8)(None)
	class FName                                  RemoveAcceptButtonName;                            // 0x7D0(0x8)(None)
	class FName                                  RemoveMarkersListName;                             // 0x7D8(0x8)(None)
	class FName                                  RemoveMarkersPanelName;                            // 0x7E0(0x8)(None)
	class FName                                  AddMarkersPanelName;                               // 0x7E8(0x8)(None)
	class FName                                  GoToAddButtonName;                                 // 0x7F0(0x8)(None)
	class FName                                  GoToRemoveButtonName;                              // 0x7F8(0x8)(None)
	float                                        MaxOpenTime;                                       // 0x800(0x4)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x804(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x814(0x10)(None)
	uint8                                        Pad_43BE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLinearColor>                  ColorSetMarkers;                                   // 0x828(0x10)(None)
	uint8                                        Pad_43BF[0xC8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MapMarkersEntry* GetDefaultObj();

	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextChanged(class FText Text);
	void OnColorSliderValueChanged(float SliderValue);
	void MarkerButtonSelected(class UWidget* TheWidget);
};

// 0x2A0 (0x5D0 - 0x330)
// Class ShooterGame.UI_MenuCarousel
class UUI_MenuCarousel : public UPrimalUserWidget
{
public:
	class FName                                  EntryContainerName;                                // 0x330(0x8)(None)
	class FName                                  PipContainerName;                                  // 0x338(0x8)(None)
	class FName                                  RolloverProgressName;                              // 0x340(0x8)(None)
	class FName                                  NavButtonForwardName;                              // 0x348(0x8)(None)
	class FName                                  NavButtonBackName;                                 // 0x350(0x8)(None)
	class FName                                  MainButtonCoverName;                               // 0x358(0x8)(None)
	TArray<struct FCarouselEntryData>            CarouselData;                                      // 0x360(0x10)(None)
	TArray<struct FCarouselEntryData>            CarouselData_WebSourced;                           // 0x370(0x10)(None)
	class UClass*                                DefaultCarouselEntryTemplateClass;                 // 0x380(0x8)(ZeroConstructor)
	TMap<class FName, class UClass*>             CarouselEntryTemplateClasses;                      // 0x388(0x50)(ZeroConstructor)
	class UClass*                                DefaultCarouselPipTemplateClass;                   // 0x3D8(0x8)(ZeroConstructor)
	TMap<class FName, class UClass*>             CarouselPipTemplateClasses;                        // 0x3E0(0x50)(ZeroConstructor)
	uint8                                        bHasInitialized : 1;                               // Mask: 0x1, PropSize: 0x10x430(0x1)(None)
	uint8                                        bHasStarted : 1;                                   // Mask: 0x2, PropSize: 0x10x430(0x1)(None)
	uint8                                        bIsDownloadingImages : 1;                          // Mask: 0x4, PropSize: 0x10x430(0x1)(None)
	uint8                                        bUseWebDataSource : 1;                             // Mask: 0x8, PropSize: 0x10x430(0x1)(None)
	uint8                                        bUseLocalizedWebDataSources : 1;                   // Mask: 0x10, PropSize: 0x10x430(0x1)(None)
	uint8                                        bAddLocToWebRequestData : 1;                       // Mask: 0x20, PropSize: 0x10x430(0x1)(None)
	uint8                                        bUseAutoScrollInterval : 1;                        // Mask: 0x40, PropSize: 0x10x430(0x1)(None)
	uint8                                        BitPad_3D4 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_43CA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AutoScrollInterval;                                // 0x434(0x4)(None)
	class FString                                WebDataSourceDefaultURL;                           // 0x438(0x10)(None)
	class FString                                WebDataSourceLocalizedURLFormat;                   // 0x448(0x10)(None)
	class FString                                WebDataSourceKeyName;                              // 0x458(0x10)(None)
	TMap<class FString, class FString>           WebDataSourceRequestHeaders;                       // 0x468(0x50)(None)
	TMap<class FString, class FString>           WebDataSourceURLEncodedContent;                    // 0x4B8(0x50)(None)
	TMap<class FString, class FString>           ExternalLinkURLEncodedContent;                     // 0x508(0x50)(None)
	uint8                                        Pad_43CB[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MenuCarousel* GetDefaultObj();

	void OnNavForward(class UWidget* TheWidget);
	void OnNavBack(class UWidget* TheWidget);
	void OnMainClick(class UWidget* TheWidget);
	void OnImageDownloadSuccess(class UTexture2DDynamic* NewTexture);
	void OnImageDownloadFailure(class UTexture2DDynamic* NewTexture);
	void OnClickPip(class UWidget* TheWidget);
	void DoFocusActionStart(const class FString& ActionKey, const class FString& ActionValue);
	void DoFocusActionEnd(const class FString& ActionKey, const class FString& ActionValue);
	void DoClickAction(const class FString& ActionKey, const class FString& ActionValue);
	void BlueprintInit();
};

// 0x10 (0x768 - 0x758)
// Class ShooterGame.UI_MenuCarouselButtonWidget
class UUI_MenuCarouselButtonWidget : public UBaseSelectableButtonWidget
{
public:
	class FName                                  TheButtonWidgetName;                               // 0x758(0x8)(None)
	class UCustomButtonWidget*                   TheButton;                                         // 0x760(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_MenuCarouselButtonWidget* GetDefaultObj();

};

// 0x10 (0x340 - 0x330)
// Class ShooterGame.UI_MenuCarouselEntryWidget
class UUI_MenuCarouselEntryWidget : public UPrimalUserWidget
{
public:
	class FName                                  ResourceImageName;                                 // 0x330(0x8)(None)
	class UImage*                                ResourceImage;                                     // 0x338(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_MenuCarouselEntryWidget* GetDefaultObj();

	void Init(const class FString& RawExtraData);
	void EntryFocusTick(float DeltaTime);
	void EntryFocusStart(bool bInstigatedByAutoRollover);
	void EntryFocusEnd(bool bInstigatedByAutoRollover);
	void BlueprintInit(const class FString& RawExtraData);
	void AllowAutoscrollNavTo(bool ReturnValue);
};

// 0x8 (0x770 - 0x768)
// Class ShooterGame.UI_MenuCarouselPipWidget
class UUI_MenuCarouselPipWidget : public UUI_MenuCarouselButtonWidget
{
public:
	uint8                                        Pad_43CC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MenuCarouselPipWidget* GetDefaultObj();

	void SetPip(bool bNewState);
	void PipStateChanged(bool NewState);
	void IsPipActive(bool ReturnValue);
	void Init(const class FString& RawExtraData);
	void EntryFocusTick(float DeltaTime);
	void EntryFocusStart(bool bInstigatedByAutoRollover);
	void EntryFocusEnd(bool bInstigatedByAutoRollover);
	void BlueprintInit(const class FString& RawExtraData);
};

// 0x580 (0xCE8 - 0x768)
// Class ShooterGame.UI_MissionList
class UUI_MissionList : public UPrimalSubMenuUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x768(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x770(0x8)(None)
	class FName                                  MissionListContainerName;                          // 0x778(0x8)(None)
	class FName                                  MissionDetailsContainerName;                       // 0x780(0x8)(None)
	class FName                                  MissionDetails_MissionNameTextBlockName;           // 0x788(0x8)(None)
	class FName                                  MissionDetails_MissionDescriptionTextBlockName;    // 0x790(0x8)(None)
	class FName                                  MissionDetails_StartMissionButtonName;             // 0x798(0x8)(None)
	class FName                                  MissionDetails_StartMissionButtonTextName;         // 0x7A0(0x8)(None)
	class FName                                  MissionDetails_LeaderboardsButtonName;             // 0x7A8(0x8)(None)
	class FName                                  MissionDetails_LeaderboardsButtonTextName;         // 0x7B0(0x8)(None)
	class FName                                  MissionDetails_DifficultyTextBlockName;            // 0x7B8(0x8)(None)
	class FName                                  MissionStatusPanelName;                            // 0x7C0(0x8)(None)
	class UClass*                                MetaTagInfoClass;                                  // 0x7C8(0x8)(ZeroConstructor)
	class UClass*                                MissionList_WidgetType;                            // 0x7D0(0x8)(ZeroConstructor)
	class UClass*                                MissionRequirement_WidgetType;                     // 0x7D8(0x8)(ZeroConstructor)
	class UClass*                                MissionObjective_WidgetType;                       // 0x7E0(0x8)(ZeroConstructor)
	class UClass*                                MissionTimer_WidgetType;                           // 0x7E8(0x8)(ZeroConstructor)
	class UClass*                                WorldBuffEffectListEntry_WidgetType;               // 0x7F0(0x8)(ZeroConstructor)
	class UClass*                                MissionRequirementEntry_WidgetType;                // 0x7F8(0x8)(ZeroConstructor)
	class FString                                StartButtonDisplayText_StartMission;               // 0x800(0x10)(None)
	class FString                                StartButtonDisplayText_LeaveMission;               // 0x810(0x10)(None)
	class FString                                StartButtonDisplayText_EnableStatTracker;          // 0x820(0x10)(None)
	class FString                                StartButtonDisplayText_DisableStatTracker;         // 0x830(0x10)(None)
	class FName                                  MissionList_EntryButtonWidgetName;                 // 0x840(0x8)(None)
	class FName                                  MissionList_NameWidgetName;                        // 0x848(0x8)(None)
	class FName                                  MissionList_DescWidgetName;                        // 0x850(0x8)(None)
	class FName                                  MissionList_ErrorTextWidgetName;                   // 0x858(0x8)(None)
	class FName                                  MissionList_EligibilityWidgetName;                 // 0x860(0x8)(None)
	class FName                                  MissionList_StartButtonTextWidgetName;             // 0x868(0x8)(None)
	class FName                                  MissionList_StartButtonWidgetName;                 // 0x870(0x8)(None)
	class UTexture2D*                            ArcticIcon;                                        // 0x878(0x8)(ZeroConstructor)
	class UTexture2D*                            BogIcon;                                           // 0x880(0x8)(ZeroConstructor)
	class UTexture2D*                            LunarIcon;                                         // 0x888(0x8)(ZeroConstructor)
	class UTexture2D*                            OceanIcon;                                         // 0x890(0x8)(ZeroConstructor)
	class UTexture2D*                            VolcanicIcon;                                      // 0x898(0x8)(ZeroConstructor)
	class UTexture2D*                            SoloIcon;                                          // 0x8A0(0x8)(ZeroConstructor)
	class UTexture2D*                            MultiplayerIcon;                                   // 0x8A8(0x8)(ZeroConstructor)
	float                                        TableWidth;                                        // 0x8B0(0x4)(None)
	float                                        LatestScoreTableWidth;                             // 0x8B4(0x4)(None)
	int32                                        MaxLeaderboardRowsToDisplay;                       // 0x8B8(0x4)(None)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x8BC(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x8CC(0x10)(None)
	uint8                                        Pad_43D3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            TabBackgroundTexture;                              // 0x8E0(0x8)(ZeroConstructor)
	class UTexture2D*                            TabMirroredBackgroundTexture;                      // 0x8E8(0x8)(ZeroConstructor)
	struct FLinearColor                          AlphaMissionColor;                                 // 0x8F0(0x10)(None)
	struct FLinearColor                          BetaMissionColor;                                  // 0x900(0x10)(None)
	struct FLinearColor                          GammaMissionColor;                                 // 0x910(0x10)(None)
	struct FLinearColor                          ActiveMissionColor;                                // 0x920(0x10)(None)
	struct FLinearColor                          InactiveMissionColor;                              // 0x930(0x10)(None)
	struct FLinearColor                          AvailableMissionColor;                             // 0x940(0x10)(None)
	struct FLinearColor                          UnavailableMissionColor;                           // 0x950(0x10)(None)
	struct FLinearColor                          DefaultTextColor;                                  // 0x960(0x10)(None)
	struct FLinearColor                          GlitchTintColor;                                   // 0x970(0x10)(None)
	struct FLinearColor                          GlitchTextColor;                                   // 0x980(0x10)(None)
	uint8                                        Pad_43D4[0x2C8];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class ULeaderboardRowWidget*                 HeaderRowWidget;                                   // 0xC58(0x8)(ZeroConstructor)
	class UVerticalBox*                          RowContainer;                                      // 0xC60(0x8)(ZeroConstructor)
	TArray<class ULeaderboardRowWidget*>         RowWidgets;                                        // 0xC68(0x10)(ZeroConstructor)
	class ULeaderboardRowWidget*                 LatestScoreRowWidget;                              // 0xC78(0x8)(ZeroConstructor)
	class UVerticalBox*                          LatestPlayerScoreRowContainer;                     // 0xC80(0x8)(ZeroConstructor)
	uint8                                        Pad_43D5[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MissionList* GetDefaultObj();

	void OnMissionFilterChanged(class FText Text);
};

// 0x48 (0x7A0 - 0x758)
// Class ShooterGame.UI_MultiUse
class UUI_MultiUse : public UPrimalUI
{
public:
	class FName                                  MyScrollBoxName;                                   // 0x758(0x8)(None)
	class FName                                  ActorDescriptionLabelName;                         // 0x760(0x8)(None)
	class UClass*                                ButtonEntryWidgetTemplate;                         // 0x768(0x8)(ZeroConstructor)
	uint8                                        Pad_43D6[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_MultiUse* GetDefaultObj();

	void ClickedEntry(class UWidget* ClickedWidget);
};

// 0x60 (0x7B8 - 0x758)
// Class ShooterGame.UI_Notification
class UUI_Notification : public UPrimalUI
{
public:
	class FName                                  TitleLabelName;                                    // 0x758(0x8)(None)
	class FName                                  MessageLabelName;                                  // 0x760(0x8)(None)
	class FName                                  OkButtonName;                                      // 0x768(0x8)(None)
	class FName                                  BoxCanvasPanelName;                                // 0x770(0x8)(None)
	bool                                         bReturnToMainMenuOnClose;                          // 0x778(0x1)(None)
	uint8                                        Pad_43D7[0x3F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Notification* GetDefaultObj();

};

// 0x78 (0x7E0 - 0x768)
// Class ShooterGame.UI_OptionsMenu
class UUI_OptionsMenu : public UPrimalSubMenuUI
{
public:
	class UClass*                                EntryTemplate;                                     // 0x768(0x8)(ZeroConstructor)
	TArray<struct FOptionsSet>                   OptionsSets;                                       // 0x770(0x10)(None)
	uint8                                        Pad_43D8[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UPrimalUserWidget>       ModShopUIClass;                                    // 0x7B0(0x30)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_OptionsMenu* GetDefaultObj();

	void ResetTutorials(class UWidget* ClickedWidget);
	void ResetCinematics(class UWidget* ClickedWidget);
	void OpenModShop(class UWidget* ClickedWidget);
	void OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem);
	void OnGraphicsPresetValueChanged();
};

// 0x438 (0xBA0 - 0x768)
// Class ShooterGame.UI_OptionsMenu_UWP
class UUI_OptionsMenu_UWP : public UPrimalSubMenuUI
{
public:
	class FName                                  SaveButtonName;                                    // 0x768(0x8)(None)
	class FName                                  ApplyButtonName;                                   // 0x770(0x8)(None)
	class FName                                  ResetButtonName;                                   // 0x778(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x780(0x8)(None)
	class FName                                  ResolutionWidthTextBoxName;                        // 0x788(0x8)(None)
	class FName                                  ResolutionHeightTextBoxName;                       // 0x790(0x8)(None)
	class FName                                  ResolutionsComboBoxName;                           // 0x798(0x8)(None)
	class FName                                  WindowModeComboBoxName;                            // 0x7A0(0x8)(None)
	class FName                                  GraphicsQualityComboBoxName;                       // 0x7A8(0x8)(None)
	class FName                                  ResolutionScaleSliderName;                         // 0x7B0(0x8)(None)
	class FName                                  ViewDistanceComboBoxName;                          // 0x7B8(0x8)(None)
	class FName                                  AntiAliasingComboBoxName;                          // 0x7C0(0x8)(None)
	class FName                                  PostProcessingComboBoxName;                        // 0x7C8(0x8)(None)
	class FName                                  ShadowsComboBoxName;                               // 0x7D0(0x8)(None)
	class FName                                  TexturesComboBoxName;                              // 0x7D8(0x8)(None)
	class FName                                  EffectsComboBoxName;                               // 0x7E0(0x8)(None)
	class FName                                  AudioVolumeSliderName;                             // 0x7E8(0x8)(None)
	TArray<struct FKeyBindingItem>               KeyBindings;                                       // 0x7F0(0x10)(None)
	class FName                                  InvertMouseYCheckBoxName;                          // 0x800(0x8)(None)
	class FName                                  CameraShakeScaleSliderName;                        // 0x808(0x8)(None)
	class FName                                  FirstPersonRidingCheckboxName;                     // 0x810(0x8)(None)
	class FName                                  ToggleToTalkCheckBoxName;                          // 0x818(0x8)(None)
	class FName                                  ToggleExtendedHUDInfoCheckboxName;                 // 0x820(0x8)(None)
	uint8                                        Pad_43DB[0x378];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_OptionsMenu_UWP* GetDefaultObj();

	void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnWidthChanged(class FText Text);
	void OnViewDistanceComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnResolutionsComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnResolutionScaleChanged(float SliderValue);
	void OnHeightChanged(class FText Text);
	void OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem);
	void OnGraphicsPresetValueChanged();
};

// 0x1A8 (0x900 - 0x758)
// Class ShooterGame.UI_PaintingsList
class UUI_PaintingsList : public UPrimalUI
{
public:
	class FName                                  PaintingListName;                                  // 0x758(0x8)(None)
	class FName                                  SelectButtonName;                                  // 0x760(0x8)(None)
	class FName                                  CloseButtonName;                                   // 0x768(0x8)(None)
	class FName                                  DeleteButtonName;                                  // 0x770(0x8)(None)
	class FName                                  FailCloseButtonName;                               // 0x778(0x8)(None)
	class FName                                  LoadingLabelName;                                  // 0x780(0x8)(None)
	class FName                                  LoadingCanvasName;                                 // 0x788(0x8)(None)
	class FName                                  MissingTextName;                                   // 0x790(0x8)(None)
	class FName                                  NeededTextName;                                    // 0x798(0x8)(None)
	class FName                                  ResourcesScrollBoxName;                            // 0x7A0(0x8)(None)
	class FName                                  MissingScrollBoxName;                              // 0x7A8(0x8)(None)
	class FName                                  RenamePaintingName;                                // 0x7B0(0x8)(None)
	class UClass*                                SlotButtonTemplate;                                // 0x7B8(0x8)(ZeroConstructor)
	class UClass*                                ResourceEntryTemplate;                             // 0x7C0(0x8)(ZeroConstructor)
	uint8                                        Pad_43DC[0xA4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         UploadingTribeFlag;                                // 0x86C(0x1)(None)
	uint8                                        Pad_43DD[0x73];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPaintingTexture*                      Preview;                                           // 0x8E0(0x8)(ZeroConstructor)
	uint8                                        Pad_43DE[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_PaintingsList* GetDefaultObj();

	void SetUploadingTribeFlag(bool AutoUploadLastPainting, bool bCloseParentUIAfterFinished);
};

// 0x0 (0x758 - 0x758)
// Class ShooterGame.UI_PartySystem
class UUI_PartySystem : public UPrimalUI
{
public:

	static class UClass* StaticClass();
	static class UUI_PartySystem* GetDefaultObj();

};

// 0x260 (0x9B8 - 0x758)
// Class ShooterGame.UI_PauseMenu
class UUI_PauseMenu : public UPrimalUI
{
public:
	class FString                                CloseButtonName;                                   // 0x758(0x10)(None)
	class FString                                QuitButtonName;                                    // 0x768(0x10)(None)
	class FString                                QuitButtonTextBlockName;                           // 0x778(0x10)(None)
	class FString                                TestWidgetName;                                    // 0x788(0x10)(None)
	class FName                                  InventoryButtonName;                               // 0x798(0x8)(None)
	class FName                                  TribeManagerButtonName;                            // 0x7A0(0x8)(None)
	class FName                                  OptionsButtonName;                                 // 0x7A8(0x8)(None)
	class FString                                InviteFriendsButtonName;                           // 0x7B0(0x10)(None)
	class FName                                  ServerPingTextBlockName;                           // 0x7C0(0x8)(None)
	class FString                                HelpButtonName;                                    // 0x7C8(0x10)(None)
	class FString                                LeaveSplitScreenButtonName;                        // 0x7D8(0x10)(None)
	TSoftClassPtr<class UUI_OptionsMenu>         OptionsMenuUITemplate;                             // 0x7E8(0x30)(ZeroConstructor)
	class UClass*                                ConsoleCommandUITemplate;                          // 0x818(0x8)(ZeroConstructor)
	TSoftClassPtr<class UUI_OptionsMenu_UWP>     OptionsMenuUITemplate_UWP;                         // 0x820(0x30)(ZeroConstructor)
	TSoftClassPtr<class UUI_PCOptionsMenu>       OptionsMenuUITemplate_PC;                          // 0x850(0x30)(ZeroConstructor)
	TArray<TSoftClassPtr<class AShooterWeapon>>  HandcuffList;                                      // 0x880(0x10)(ZeroConstructor)
	uint8                                        Pad_43DF[0x128];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_PauseMenu* GetDefaultObj();

	void UpdateRespawnButtonLabel();
	void UpdatePlayerList(const class FString& PlayerList);
	void OpenConsoleCommandUI();
};

// 0x7D0 (0xF38 - 0x768)
// Class ShooterGame.UI_PCOptionsMenu
class UUI_PCOptionsMenu : public UPrimalSubMenuUI
{
public:
	class FName                                  SaveButtonName;                                    // 0x768(0x8)(None)
	class FName                                  ApplyButtonName;                                   // 0x770(0x8)(None)
	class FName                                  ResetButtonName;                                   // 0x778(0x8)(None)
	class FName                                  CancelButtonName;                                  // 0x780(0x8)(None)
	class FName                                  ResolutionWidthTextBoxName;                        // 0x788(0x8)(None)
	class FName                                  ResolutionHeightTextBoxName;                       // 0x790(0x8)(None)
	class FName                                  ResolutionsComboBoxName;                           // 0x798(0x8)(None)
	class FName                                  WindowModeComboBoxName;                            // 0x7A0(0x8)(None)
	class FName                                  GraphicsQualityComboBoxName;                       // 0x7A8(0x8)(None)
	class FName                                  ResolutionScaleSliderName;                         // 0x7B0(0x8)(None)
	class FName                                  ViewDistanceComboBoxName;                          // 0x7B8(0x8)(None)
	class FName                                  AntiAliasingComboBoxName;                          // 0x7C0(0x8)(None)
	class FName                                  PostProcessingComboBoxName;                        // 0x7C8(0x8)(None)
	class FName                                  ShadowsComboBoxName;                               // 0x7D0(0x8)(None)
	class FName                                  TexturesComboBoxName;                              // 0x7D8(0x8)(None)
	class FName                                  EffectsComboBoxName;                               // 0x7E0(0x8)(None)
	class FName                                  AudioVolumeSliderName;                             // 0x7E8(0x8)(None)
	TArray<struct FKeyBindingItem>               KeyBindings;                                       // 0x7F0(0x10)(None)
	class FName                                  InvertMouseYCheckBoxName;                          // 0x800(0x8)(None)
	class FName                                  CameraShakeScaleSliderName;                        // 0x808(0x8)(None)
	class FName                                  FirstPersonRidingCheckboxName;                     // 0x810(0x8)(None)
	class FName                                  ToggleToTalkCheckBoxName;                          // 0x818(0x8)(None)
	class FName                                  ToggleFluidInteractionCheckboxName;                // 0x820(0x8)(None)
	class FName                                  ToggleExtendedHUDInfoCheckboxName;                 // 0x828(0x8)(None)
	class FName                                  CrosshairSizeSliderName;                           // 0x830(0x8)(None)
	class FName                                  CrosshairOpacitySliderName;                        // 0x838(0x8)(None)
	class FName                                  CrosshairColorSliderName_R;                        // 0x840(0x8)(None)
	class FName                                  CrosshairColorSliderName_G;                        // 0x848(0x8)(None)
	class FName                                  CrosshairColorSliderName_B;                        // 0x850(0x8)(None)
	class FName                                  FramecapTextBoxName;                               // 0x858(0x8)(None)
	class FName                                  EnableFramecapCheckBoxName;                        // 0x860(0x8)(None)
	bool                                         bCancelButtonIsBackButton;                         // 0x868(0x1)(None)
	uint8                                        Pad_43E3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TextChatFilterComboBoxName;                        // 0x86C(0x8)(None)
	class FName                                  VoiceChatFilterComboBoxName;                       // 0x874(0x8)(None)
	class FName                                  VirtualCursorSensitivitySliderName;                // 0x87C(0x8)(None)
	class FName                                  BubbleParticlesMultiplierSliderName;               // 0x884(0x8)(None)
	class FName                                  ControllerVibrationCheckboxName;                   // 0x88C(0x8)(None)
	class FName                                  ControllerUIVibrationCheckboxName;                 // 0x894(0x8)(None)
	class FName                                  DisablePaintingsCheckboxName;                      // 0x89C(0x8)(None)
	class FName                                  DisableVirtualCursorCheckboxName;                  // 0x8A4(0x8)(None)
	uint8                                        Pad_43E4[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UPrimalUserWidget>       ModShopUIClass;                                    // 0x8B8(0x30)(ZeroConstructor)
	uint8                                        Pad_43E5[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bHasChangedAnyValue;                               // 0x918(0x1)(None)
	uint8                                        Pad_43E6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ConfirmationDialogType;                            // 0x91C(0x4)(None)
	uint8                                        Pad_43E7[0x330];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             CrosshairColorPickerValue;                         // 0xC50(0x10)(None)
	uint8                                        Pad_43E8[0x2D8];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_PCOptionsMenu* GetDefaultObj();

	void UseConsoleVideoOptions(bool ReturnValue);
	void UseAutoDetectSettingsCheckboxChanged(bool bIsChecked);
	void UnblockAllModsCallback(bool Accepted);
	void ShowFinalUnblockModsMessage();
	void ResetOptionsMenuValueChanged();
	void OptionsMenuValueChanged();
	void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OpenModShop(class UWidget* ClickedWidget);
	void OnWidthChanged(class FText Text);
	void OnViewDistanceComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnResolutionsComboBoxSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnHeightChanged(class FText Text);
	void OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem);
	void OnGraphicsPresetValueChanged();
	void OnFPSCapChanged(class FText Text);
	void OnComboBoxGenericChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void LoadSettings();
	void IsNvidiaGraphicCard(bool ReturnValue);
	void InitializeUI();
	void GetLivePCOptionsMenu(class UUI_PCOptionsMenu* ReturnValue);
	void CancelUnblockAllMods(bool bAccept);
	void BackButtonClicked();
};

// 0xC0 (0x818 - 0x758)
// Class ShooterGame.UI_PinEntry
class UUI_PinEntry : public UPrimalUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x758(0x8)(None)
	class FName                                  UseLastPinButtonName;                              // 0x760(0x8)(None)
	class FName                                  UseLastPinButtonLabelName;                         // 0x768(0x8)(None)
	class FName                                  ToggleShowLastPinButtonName;                       // 0x770(0x8)(None)
	class FName                                  ToggleShowLastPinButtonLabelName;                  // 0x778(0x8)(None)
	class FName                                  PinLabelName;                                      // 0x780(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x788(0x8)(None)
	TArray<class FName>                          PinButtonsNames;                                   // 0x790(0x10)(None)
	uint8                                        Pad_43E9[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_PinEntry* GetDefaultObj();

};

// 0x2B0 (0xA40 - 0x790)
// Class ShooterGame.UI_PreviewWidget
class UUI_PreviewWidget : public UCustomCanvasWidget
{
public:
	uint8                                        Pad_43EA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    RenderMaterial;                                    // 0x798(0x8)(ZeroConstructor)
	float                                        FOV;                                               // 0x7A0(0x4)(None)
	uint8                                        Pad_43EB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UTextureRenderTarget2D*>        RenderTargets;                                     // 0x7A8(0x10)(ZeroConstructor)
	struct FVector                               MeshScale;                                         // 0x7B8(0x18)(None)
	struct FRotator                              MeshRotation;                                      // 0x7D0(0x18)(None)
	struct FVector                               CameraPivotOffset;                                 // 0x7E8(0x18)(None)
	struct FVector                               OverrideCameraOffset;                              // 0x800(0x18)(None)
	struct FVector2D                             PanExtents;                                        // 0x818(0x10)(None)
	float                                        CustomLimitedPanExtentsY;                          // 0x828(0x4)(None)
	float                                        PanSpeed;                                          // 0x82C(0x4)(None)
	float                                        PanBrakeSpeed;                                     // 0x830(0x4)(None)
	float                                        CameraDistance;                                    // 0x834(0x4)(None)
	float                                        MaximumZoomMultiplier;                             // 0x838(0x4)(None)
	float                                        MinimumZoomMultiplier;                             // 0x83C(0x4)(None)
	float                                        DefaultZoomMultiplier;                             // 0x840(0x4)(None)
	float                                        PCRenderTargetScale;                               // 0x844(0x4)(None)
	bool                                         bLimitPivotOffset;                                 // 0x848(0x1)(None)
	uint8                                        Pad_43EC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxLimitPivotOffset;                               // 0x84C(0x4)(None)
	float                                        FemalePivotOffsetMultiplier;                       // 0x850(0x4)(None)
	float                                        BrakeSpeed;                                        // 0x854(0x4)(None)
	float                                        ZoomInterpSpeed;                                   // 0x858(0x4)(None)
	float                                        WheelDeltaMultiplier;                              // 0x85C(0x4)(None)
	float                                        RotationSpeed;                                     // 0x860(0x4)(None)
	float                                        MinPitch;                                          // 0x864(0x4)(None)
	float                                        MaxPitch;                                          // 0x868(0x4)(None)
	bool                                         bAutoRotateWidget;                                 // 0x86C(0x1)(None)
	uint8                                        Pad_43ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              AutoRotator;                                       // 0x870(0x18)(None)
	bool                                         bCanResetCamera;                                   // 0x888(0x1)(None)
	enum class ESkyLightSourceType               AmbientSourceType;                                 // 0x889(0x1)(None)
	uint8                                        Pad_43EE[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          AmbientCubemap;                                    // 0x890(0x8)(ZeroConstructor)
	struct FColor                                AmbientLightColor;                                 // 0x898(0x4)(None)
	float                                        AmbientBrightness;                                 // 0x89C(0x4)(None)
	uint8                                        bSwapInput : 1;                                    // Mask: 0x1, PropSize: 0x10x8A0(0x1)(None)
	uint8                                        bChangeDirectionalLightRelativeRotation : 1;       // Mask: 0x2, PropSize: 0x10x8A0(0x1)(None)
	uint8                                        BitPad_3D5 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_43EF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              DirectionalLightRelativeRotation;                  // 0x8A8(0x18)(None)
	struct FVector                               DirectionalLightRelativeLocation;                  // 0x8C0(0x18)(None)
	struct FColor                                DirectionalLightColor;                             // 0x8D8(0x4)(None)
	float                                        DirectionalLightBrightness;                        // 0x8DC(0x4)(None)
	float                                        RTQualityMultiplier;                               // 0x8E0(0x4)(None)
	float                                        OverrideShadowBias;                                // 0x8E4(0x4)(None)
	class UTextureRenderTarget2D*                RenderTarget;                                      // 0x8E8(0x8)(ZeroConstructor)
	float                                        ZoomMultiplier;                                    // 0x8F0(0x4)(None)
	uint32                                       UpdateSkyTickCount;                                // 0x8F4(0x4)(None)
	uint8                                        Pad_43F0[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                GameWorld;                                         // 0x940(0x8)(ZeroConstructor)
	float                                        TargetZoomMultiplier;                              // 0x948(0x4)(None)
	uint8                                        Pad_43F1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USceneComponent*>               PreviewComponents;                                 // 0x950(0x10)(ZeroConstructor)
	struct FVector2D                             RotationVelocity;                                  // 0x960(0x10)(None)
	struct FVector2D                             PanVelocity;                                       // 0x970(0x10)(None)
	struct FVector2D                             Pan;                                               // 0x980(0x10)(None)
	class UMeshComponent*                        PreviewMesh;                                       // 0x990(0x8)(ZeroConstructor)
	class UWorld*                                PreviewWorld;                                      // 0x998(0x8)(ZeroConstructor)
	class USceneCaptureComponent2D*              CaptureComponent;                                  // 0x9A0(0x8)(ZeroConstructor)
	class UDirectionalLightComponent*            DirctionalLight;                                   // 0x9A8(0x8)(ZeroConstructor)
	class USkyLightComponent*                    SkyLight;                                          // 0x9B0(0x8)(ZeroConstructor)
	class ULineBatchComponent*                   LineBatcher;                                       // 0x9B8(0x8)(ZeroConstructor)
	struct FLinearColor                          PreviewWidgetColorFactor;                          // 0x9C0(0x10)(None)
	uint8                                        Pad_43F2[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class APrimalPreviewSceneSetup*              PreviewSceneSetup;                                 // 0x9E0(0x8)(ZeroConstructor)
	class UClass*                                PreviewSceneSetupTemplate;                         // 0x9E8(0x8)(ZeroConstructor)
	TSoftClassPtr<class APrimalPreviewSceneSetup> PreviewSceneSetupTemplateSoftRef;                  // 0x9F0(0x30)(ZeroConstructor)
	bool                                         bManuallyInitializePreviewSceneSetup;              // 0xA20(0x1)(None)
	uint8                                        Pad_43F3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              OrbitRotation;                                     // 0xA28(0x18)(None)

	static class UClass* StaticClass();
	static class UUI_PreviewWidget* GetDefaultObj();

	void UpdateSkyCaptures();
	void SetTargetZoomMultiplier(float Mult);
	void ResetZoomTo(float Zoom);
	void InitializePreviewSceneSetup();
	void GetPreviewMesh(class UMeshComponent* ReturnValue);
	void GetMeshComponent(class UMeshComponent* ReturnValue);
	void GetCaptureComponent(class USceneCaptureComponent2D* ReturnValue);
	void ClearRotationVelocity();
};

// 0x20 (0x778 - 0x758)
// Class ShooterGame.UI_PrimalTest
class UUI_PrimalTest : public UPrimalUI
{
public:
	class FString                                VerticalBoxName;                                   // 0x758(0x10)(None)
	class UClass*                                ChildWidgetTemplate;                               // 0x768(0x8)(ZeroConstructor)
	uint8                                        Pad_43F4[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_PrimalTest* GetDefaultObj();

};

// 0xD90 (0x14E8 - 0x758)
// Class ShooterGame.UI_ProceduralSettings
class UUI_ProceduralSettings : public UPrimalUI
{
public:
	class FName                                  CancelButtonName;                                  // 0x758(0x8)(None)
	class FName                                  HostButtonName;                                    // 0x760(0x8)(None)
	class FName                                  ResetButtonName;                                   // 0x768(0x8)(None)
	class FName                                  RandomizeButtonName;                               // 0x770(0x8)(None)
	class FName                                  LoadFavoriteButtonName;                            // 0x778(0x8)(None)
	class FName                                  SaveFavoriteButtonName;                            // 0x780(0x8)(None)
	class FName                                  PresetsComboBoxName;                               // 0x788(0x8)(None)
	class FName                                  FavoriteComboBoxName;                              // 0x790(0x8)(None)
	class FName                                  ArkNameTextBoxName;                                // 0x798(0x8)(None)
	class FName                                  MapSeedTextBoxName;                                // 0x7A0(0x8)(None)
	class FName                                  LandscapeRadiusTextBoxName;                        // 0x7A8(0x8)(None)
	class FName                                  WaterFrequencyTextBoxName;                         // 0x7B0(0x8)(None)
	class FName                                  MountainFrequencyTextBoxName;                      // 0x7B8(0x8)(None)
	class FName                                  MountainSlopeTextBoxName;                          // 0x7C0(0x8)(None)
	class FName                                  MountainHeightTextBoxName;                         // 0x7C8(0x8)(None)
	class FName                                  TurbulencePowerTextBoxName;                        // 0x7D0(0x8)(None)
	class FName                                  ShoreSlopeTextBoxName;                             // 0x7D8(0x8)(None)
	class FName                                  WaterLevelTextBoxName;                             // 0x7E0(0x8)(None)
	class FName                                  GrassDensityTextBoxName;                           // 0x7E8(0x8)(None)
	class FName                                  JungleGrassDensityTextBoxName;                     // 0x7F0(0x8)(None)
	class FName                                  OceanFloorLevelTextBoxName;                        // 0x7F8(0x8)(None)
	class FName                                  SnowBiomeSizeTextBoxName;                          // 0x800(0x8)(None)
	class FName                                  RedwoodBiomeSizeTextBoxName;                       // 0x808(0x8)(None)
	class FName                                  MountainBiomeStartTextBoxName;                     // 0x810(0x8)(None)
	class FName                                  MountainTreeDensityTextBoxName;                    // 0x818(0x8)(None)
	class FName                                  JungleBiomeStartTextBoxName;                       // 0x820(0x8)(None)
	class FName                                  IslandBorderCurveTextBoxName;                      // 0x828(0x8)(None)
	class FName                                  MaxSawnHeightTextBoxName;                          // 0x830(0x8)(None)
	class FName                                  MountainGrassDensityTextBoxName;                   // 0x838(0x8)(None)
	class FName                                  SnowGrassDensityTextBoxName;                       // 0x840(0x8)(None)
	class FName                                  SnowMountainGrassDensityTextBoxName;               // 0x848(0x8)(None)
	class FName                                  SnowBiomeLocationXTextBoxName;                     // 0x850(0x8)(None)
	class FName                                  SnowBiomeLocationYTextBoxName;                     // 0x858(0x8)(None)
	class FName                                  RedwoodBiomeLocationXTextBoxName;                  // 0x860(0x8)(None)
	class FName                                  RedwoodBiomeLocationYTextBoxName;                  // 0x868(0x8)(None)
	class FName                                  TerrainScaleXTextBoxName;                          // 0x870(0x8)(None)
	class FName                                  TerrainScaleYTextBoxName;                          // 0x878(0x8)(None)
	class FName                                  TerrainScaleZTextBoxName;                          // 0x880(0x8)(None)
	class FName                                  North1StartXTextBoxName;                           // 0x888(0x8)(None)
	class FName                                  North1StartYTextBoxName;                           // 0x890(0x8)(None)
	class FName                                  North1EndXTextBoxName;                             // 0x898(0x8)(None)
	class FName                                  North1EndYTextBoxName;                             // 0x8A0(0x8)(None)
	class FName                                  North2StartXTextBoxName;                           // 0x8A8(0x8)(None)
	class FName                                  North2StartYTextBoxName;                           // 0x8B0(0x8)(None)
	class FName                                  North2EndXTextBoxName;                             // 0x8B8(0x8)(None)
	class FName                                  North2EndYTextBoxName;                             // 0x8C0(0x8)(None)
	class FName                                  North3StartXTextBoxName;                           // 0x8C8(0x8)(None)
	class FName                                  North3StartYTextBoxName;                           // 0x8D0(0x8)(None)
	class FName                                  North3EndXTextBoxName;                             // 0x8D8(0x8)(None)
	class FName                                  North3EndYTextBoxName;                             // 0x8E0(0x8)(None)
	class FName                                  South1StartXTextBoxName;                           // 0x8E8(0x8)(None)
	class FName                                  South1StartYTextBoxName;                           // 0x8F0(0x8)(None)
	class FName                                  South1EndXTextBoxName;                             // 0x8F8(0x8)(None)
	class FName                                  South1EndYTextBoxName;                             // 0x900(0x8)(None)
	class FName                                  South2StartXTextBoxName;                           // 0x908(0x8)(None)
	class FName                                  South2StartYTextBoxName;                           // 0x910(0x8)(None)
	class FName                                  South2EndXTextBoxName;                             // 0x918(0x8)(None)
	class FName                                  South2EndYTextBoxName;                             // 0x920(0x8)(None)
	class FName                                  South3StartXTextBoxName;                           // 0x928(0x8)(None)
	class FName                                  South3StartYTextBoxName;                           // 0x930(0x8)(None)
	class FName                                  South3EndXTextBoxName;                             // 0x938(0x8)(None)
	class FName                                  South3EndYTextBoxName;                             // 0x940(0x8)(None)
	class FName                                  East1StartXTextBoxName;                            // 0x948(0x8)(None)
	class FName                                  East1StartYTextBoxName;                            // 0x950(0x8)(None)
	class FName                                  East1EndXTextBoxName;                              // 0x958(0x8)(None)
	class FName                                  East1EndYTextBoxName;                              // 0x960(0x8)(None)
	class FName                                  East2StartXTextBoxName;                            // 0x968(0x8)(None)
	class FName                                  East2StartYTextBoxName;                            // 0x970(0x8)(None)
	class FName                                  East2EndXTextBoxName;                              // 0x978(0x8)(None)
	class FName                                  East2EndYTextBoxName;                              // 0x980(0x8)(None)
	class FName                                  East3StartXTextBoxName;                            // 0x988(0x8)(None)
	class FName                                  East3StartYTextBoxName;                            // 0x990(0x8)(None)
	class FName                                  East3EndXTextBoxName;                              // 0x998(0x8)(None)
	class FName                                  East3EndYTextBoxName;                              // 0x9A0(0x8)(None)
	class FName                                  West1StartXTextBoxName;                            // 0x9A8(0x8)(None)
	class FName                                  West1StartYTextBoxName;                            // 0x9B0(0x8)(None)
	class FName                                  West1EndXTextBoxName;                              // 0x9B8(0x8)(None)
	class FName                                  West1EndYTextBoxName;                              // 0x9C0(0x8)(None)
	class FName                                  West2StartXTextBoxName;                            // 0x9C8(0x8)(None)
	class FName                                  West2StartYTextBoxName;                            // 0x9D0(0x8)(None)
	class FName                                  West2EndXTextBoxName;                              // 0x9D8(0x8)(None)
	class FName                                  West2EndYTextBoxName;                              // 0x9E0(0x8)(None)
	class FName                                  West3StartXTextBoxName;                            // 0x9E8(0x8)(None)
	class FName                                  West3StartYTextBoxName;                            // 0x9F0(0x8)(None)
	class FName                                  West3EndXTextBoxName;                              // 0x9F8(0x8)(None)
	class FName                                  West3EndYTextBoxName;                              // 0xA00(0x8)(None)
	uint8                                        Pad_43F7[0xAE0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ProceduralSettings* GetDefaultObj();

	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnPresetSelectionChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
};

// 0x60 (0x7B8 - 0x758)
// Class ShooterGame.UI_SavePainting
class UUI_SavePainting : public UPrimalUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x758(0x8)(None)
	class FName                                  SaveButtonName;                                    // 0x760(0x8)(None)
	class FName                                  FileNameTextBoxName;                               // 0x768(0x8)(None)
	class FName                                  ErrorTextBoxName;                                  // 0x770(0x8)(None)
	uint8                                        Pad_43FC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         OverrideExisting;                                  // 0x780(0x1)(None)
	uint8                                        Pad_43FD[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SavePainting* GetDefaultObj();

	void HandleFilterStringTextCommitted(class FText NewText, enum class ETextCommit CommitMethod);
	void HandleFilterStringTextChanged(class FText NewText);
};

// 0x8 (0x760 - 0x758)
// Class ShooterGame.UI_SavingOverlay
class UUI_SavingOverlay : public UPrimalUI
{
public:
	uint8                                        Pad_43FE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SavingOverlay* GetDefaultObj();

};

// 0xC8 (0x820 - 0x758)
// Class ShooterGame.UI_ServerBroadcastMessage
class UUI_ServerBroadcastMessage : public UPrimalUI
{
public:
	class FString                                MessageTextBlockName;                              // 0x758(0x10)(None)
	struct FSlateFontInfo                        BoldFont;                                          // 0x768(0x58)(ZeroConstructor)
	struct FSlateFontInfo                        RegularFont;                                       // 0x7C0(0x58)(ZeroConstructor)
	uint8                                        Pad_43FF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_ServerBroadcastMessage* GetDefaultObj();

};

// 0x38 (0x790 - 0x758)
// Class ShooterGame.UI_SessionSortArrow
class UUI_SessionSortArrow : public UPrimalUI
{
public:
	uint8                                        Pad_4400[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ImageName;                                         // 0x760(0x8)(None)
	class UTexture2D*                            UpImage;                                           // 0x768(0x8)(ZeroConstructor)
	class UTexture2D*                            DownImage;                                         // 0x770(0x8)(ZeroConstructor)
	class UTexture2D*                            EmptyImage;                                        // 0x778(0x8)(ZeroConstructor)
	uint8                                        Pad_4401[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SessionSortArrow* GetDefaultObj();

};

// 0xA10 (0x1168 - 0x758)
// Class ShooterGame.UI_Spawn
class UUI_Spawn : public UPrimalUI
{
public:
	class FName                                  SkinColorPreviewName;                              // 0x758(0x8)(None)
	class FName                                  HairColorPreviewName;                              // 0x760(0x8)(None)
	class FName                                  EyeColorPreviewName;                               // 0x768(0x8)(None)
	class FName                                  SavedPresetListPanelName;                          // 0x770(0x8)(None)
	class FName                                  SavedBonePresetsListPanelName;                     // 0x778(0x8)(None)
	class FName                                  IslandRgionButtonListPanelName;                    // 0x780(0x8)(None)
	class FName                                  LoadConfirmationButtonName;                        // 0x788(0x8)(None)
	class FName                                  CancelLoadButtonName;                              // 0x790(0x8)(None)
	class FName                                  LoadFromFileScrollBoxName;                         // 0x798(0x8)(None)
	class FName                                  LoadBonePresetsConfirmationButtonName;             // 0x7A0(0x8)(None)
	class FName                                  CancelLoadBonePresetsButtonName;                   // 0x7A8(0x8)(None)
	class FName                                  LoadBonePresetsFromFileScrollBoxName;              // 0x7B0(0x8)(None)
	class FName                                  RandomizeButtonName;                               // 0x7B8(0x8)(None)
	class FName                                  TabBgSwitcherName;                                 // 0x7C0(0x8)(None)
	class FName                                  MaleEnabledEffectName;                             // 0x7C8(0x8)(None)
	class FName                                  FemaleEnabledEffectName;                           // 0x7D0(0x8)(None)
	class FName                                  SaveToFileButtonName;                              // 0x7D8(0x8)(None)
	class FName                                  LoadFromFileButtonName;                            // 0x7E0(0x8)(None)
	class FName                                  LoadBonePresetFromFileButtonName;                  // 0x7E8(0x8)(None)
	class FString                                PreviewWidgetName;                                 // 0x7F0(0x10)(None)
	class FName                                  RespawnButtonName;                                 // 0x800(0x8)(None)
	class FName                                  CreateNewPlayerButtonName;                         // 0x808(0x8)(None)
	class FName                                  DefaultDestinationButtonName;                      // 0x810(0x8)(None)
	class FName                                  DefaultDestinationButtonLabelName;                 // 0x818(0x8)(None)
	class FName                                  RespawnLabelName;                                  // 0x820(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x828(0x8)(None)
	class FName                                  CharConfigMaleButtonName;                          // 0x830(0x8)(None)
	class FName                                  CharConfigFemaleButtonName;                        // 0x838(0x8)(None)
	class FName                                  DoCreateNewPlayerButtonName;                       // 0x840(0x8)(None)
	class FName                                  NewCharacterPanelName;                             // 0x848(0x8)(None)
	class FName                                  RespawnPanelName;                                  // 0x850(0x8)(None)
	class FName                                  RespawnPanelButtonName;                            // 0x858(0x8)(None)
	class FName                                  RespawnPanelMapName;                               // 0x860(0x8)(None)
	class FName                                  GenderLabelName;                                   // 0x868(0x8)(None)
	class FName                                  BodyColorSliderName;                               // 0x870(0x8)(None)
	class FName                                  HairColorSliderName;                               // 0x878(0x8)(None)
	class FName                                  HairTipColorSliderName;                            // 0x880(0x8)(None)
	class FName                                  BeardColorSliderName;                              // 0x888(0x8)(None)
	class FName                                  BeardTipColorSliderName;                           // 0x890(0x8)(None)
	class FName                                  EyeColorSliderName;                                // 0x898(0x8)(None)
	class FName                                  EyeIrisColorSliderName;                            // 0x8A0(0x8)(None)
	class FName                                  EyebrowStyleSliderName;                            // 0x8A8(0x8)(None)
	class FName                                  HairStyleSliderName;                               // 0x8B0(0x8)(None)
	class FName                                  HairLengthSliderName;                              // 0x8B8(0x8)(None)
	class FName                                  BeardLengthSliderName;                             // 0x8C0(0x8)(None)
	class FName                                  BeardStyleSliderName;                              // 0x8C8(0x8)(None)
	class FName                                  GlobalMuscleMaterialSliderName;                    // 0x8D0(0x8)(None)
	class FName                                  GlobalFatMaterialSliderName;                       // 0x8D8(0x8)(None)
	class FName                                  DebugLightsUIName;                                 // 0x8E0(0x8)(None)
	TArray<struct FBoneModifierSlider>           BoneModifiersSliders;                              // 0x8E8(0x10)(None)
	TArray<struct FDynamicMaterialSlider>        DynamicMaterialSliders;                            // 0x8F8(0x10)(None)
	class FName                                  PlayerVoiceSelectorComboboxName;                   // 0x908(0x8)(None)
	uint8                                        Pad_4412[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPlayVoiceSample;                                  // 0x918(0x1)(None)
	uint8                                        Pad_4413[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  CharacterNameBoxName;                              // 0x91C(0x8)(None)
	class FName                                  RespawnButtonLabelName;                            // 0x924(0x8)(None)
	uint8                                        Pad_4414[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                SlotButtonTemplate;                                // 0x930(0x8)(ZeroConstructor)
	float                                        RequestSpawnPointsInterval;                        // 0x938(0x4)(None)
	class FName                                  DownloadCharacterDataButtonName;                   // 0x93C(0x8)(None)
	class FName                                  ShowRegionsButtonName;                             // 0x944(0x8)(None)
	class FName                                  ShowBedsButtonName;                                // 0x94C(0x8)(None)
	uint8                                        Pad_4415[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                ListCharacterDataSceneTemplate;                    // 0x958(0x8)(ZeroConstructor)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x960(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x970(0x10)(None)
	uint8                                        Pad_4416[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCameraLocationSetting>        CameraSettingsPerTab;                              // 0x988(0x10)(None)
	TArray<struct FCameraLocationSetting>        CameraSettingsPerTabFemale;                        // 0x998(0x10)(None)
	uint8                                        Pad_4417[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UAnimInstance>           OverwrittenAnimbpMale;                             // 0x9E8(0x30)(ZeroConstructor)
	TSoftClassPtr<class UAnimInstance>           OverwrittenAnimbpFemale;                           // 0xA18(0x30)(ZeroConstructor)
	uint8                                        Pad_4418[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsFastTravel;                                     // 0xA49(0x1)(None)
	bool                                         bCharacterFirstSpawn;                              // 0xA4A(0x1)(None)
	bool                                         bIsRespawning;                                     // 0xA4B(0x1)(None)
	int32                                        CurrentSpawnPointID;                               // 0xA4C(0x4)(None)
	TWeakObjectPtr<class APrimalStructure>       FastTravelIgnoreBed;                               // 0xA50(0x8)(ZeroConstructor)
	uint8                                        Pad_4419[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCharacterPreset>              GenericCharacterPresets;                           // 0xA60(0x10)(None)
	uint8                                        Pad_441A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             MousePositionOverCharacterView;                    // 0xA80(0x10)(None)
	uint8                                        Pad_441B[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AShooterCharacter*                     PreviewCharacter;                                  // 0xAB0(0x8)(ZeroConstructor)
	class UUI_PreviewWidget*                     PreviewWidget;                                     // 0xAB8(0x8)(ZeroConstructor)
	uint8                                        Pad_441C[0xB8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDinoListButtonWidget*>         EntryWidgets;                                      // 0xB78(0x10)(ZeroConstructor)
	uint8                                        Pad_441D[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDinoListButtonWidget*>         RespawnEntryWidgets;                               // 0xBB8(0x10)(ZeroConstructor)
	TArray<class UDinoListButtonWidget*>         SavedPresetWidgets;                                // 0xBC8(0x10)(ZeroConstructor)
	uint8                                        Pad_441E[0x80];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxDistanceForMultiSpawnPointSelect;               // 0xC58(0x4)(None)
	uint8                                        Pad_441F[0x3C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDinoListButtonWidget*>         MultiSpawnPointWidgets;                            // 0xC98(0x10)(ZeroConstructor)
	uint8                                        Pad_4420[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bCharConfigIsFemale;                               // 0xCF8(0x1)(None)
	uint8                                        Pad_4421[0x1C7];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSavedVoiceCollectionActualIndex> MasculineVoiceOptions;                             // 0xEC0(0x10)(ZeroConstructor)
	TArray<struct FSavedVoiceCollectionActualIndex> FeminineVoiceOptions;                              // 0xED0(0x10)(ZeroConstructor)
	TArray<struct FSavedVoiceCollectionActualIndex> AdditionalVoiceOptions;                            // 0xEE0(0x10)(ZeroConstructor)
	TArray<struct FSavedVoiceCollectionActualIndex> CustomModVoiceOptions;                             // 0xEF0(0x10)(ZeroConstructor)
	TArray<struct FSavedVoiceCollectionActualIndex> CurrentlyDisplayedVoiceOptions;                    // 0xF00(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         MaleOnlyBodyBonePresetOptions;                     // 0xF10(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         FemaleOnlyBodyBonePresetOptions;                   // 0xF20(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         UniversalBodyBonePresetOptions;                    // 0xF30(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         Custom_MaleOnlyBodyBonePresetOptions;              // 0xF40(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         Custom_FemaleOnlyBodyBonePresetOptions;            // 0xF50(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         Custom_UniversalBodyBonePresetOptions;             // 0xF60(0x10)(ZeroConstructor)
	TArray<struct FPlayerBoneBodyPreset>         CurrentlyDisplayedBodyBonePresetOptions;           // 0xF70(0x10)(ZeroConstructor)
	struct FPlayerBoneBodyPreset                 CachedBodyBonePreset;                              // 0xF80(0x60)(ZeroConstructor)
	TArray<struct FCustomPreviewMeshInfo>        CustomPreviewMeshes;                               // 0xFE0(0x10)(ZeroConstructor)
	struct FLinearColor                          SkinToneColor;                                     // 0xFF0(0x10)(None)
	struct FLinearColor                          EyeToneColor;                                      // 0x1000(0x10)(None)
	struct FLinearColor                          HairToneColor;                                     // 0x1010(0x10)(None)
	TArray<class UDataListValueGeneric*>         BoneSliderRefs;                                    // 0x1020(0x10)(ZeroConstructor)
	uint8                                        Pad_4422[0x130];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class UCanvasPanel*                          SplitscreenBackdrop;                               // 0x1160(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class UUI_Spawn* GetDefaultObj();

	void UpdateCharacterPreviewImage();
	void UpdateCharacterFirstSpawnBP(bool Active);
	void UpdateCharacterFirstSpawn(bool Active);
	void SwitchTheButton(bool Next);
	void SpawnPointSelected(int32 SpawnPointID, class UUI_SpawnPoint* SpawnPoint);
	void SlotButtonSelected(class UWidget* TheWidget);
	void SetGenderVoiceOptions();
	void SetGenderBodyBoneOptions();
	void SavedPresetListButtonSelected(class UWidget* TheWidget);
	void SavedBonePresetListButtonSelected(class UWidget* TheWidget);
	void RespawnSlotButtonSelected(class UWidget* TheWidget);
	void ResetToDefault(bool Recall);
	void PrintCharacterSettings();
	void OnSaveToFileEditableCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnResetToDefault();
	void OnMoviePlaybackFinished_SPDownload(const class FString& MoviePath, bool bPlaybackWasCancelled);
	void OnMoviePlaybackFinished_SpawnAtPoint(const class FString& MoviePath, bool bPlaybackWasCancelled);
	void OnMoviePlaybackFinished_Download(const class FString& MoviePath, bool bPlaybackWasCancelled);
	void OnMoviePlaybackFinished(const class FString& MoviePath, bool bPlaybackWasCancelled);
	void OnMaterialSliderChanged(float SliderValue);
	void OnGenderChange(bool IsFemale);
	void OnBedFilterChanged(class FText Text);
	void MultiSelectSpawnPointButtonSelected(class UWidget* TheWidget);
	void GetSpawnPointName(int32 Index, const class FString& ReturnValue);
	void GetRespawnPanelMap(class USpawnMapWidget* ReturnValue);
	void GetRealBedName(int32 ChachedID, const class FString& ReturnValue);
	void GetIsSpawnPointIDDefaultDestination(int32 SpawnPointID, bool ReturnValue);
	void GetDifficultRegionString(int32 Index, const class FString& ReturnValue);
	void GetCurrentCharacterSetting(const struct FCharacterPreset& ReturnValue);
	void GetCanvasLocationForRegionPoint(const struct FVector& Location, const struct FVector2D& ReturnValue);
	void GetCanvasLocationForMinimapPoint(const struct FVector& Location, const struct FVector2D& ReturnValue);
	void GetCameraSettingsForTab(int32 TabIndex, const struct FCameraLocationSetting& ReturnValue);
	void GetAllVectorSliders(const TArray<class UDataListValueGeneric*>& ReturnValue);
	void GetAllFloatSliders(const TArray<class UDataListValueGeneric*>& ReturnValue);
	void GetAllColorSliders(const TArray<class UDataListValueGeneric*>& ReturnValue);
	void BPSetupButtonDataForSpawnRegion(int32 SpawnRegionIndex, const class FString& Text, const class FString& SecondText);
	void BPSetupBed(int32 BedIndex, int32 SpawnPointID, const class FString& BedName, const struct FVector& AtLocation, double NextAllowedUseTime, bool bAllowedUse, int32 NumBeds);
	void BPSetSelectedSpawnRegion(int32 SpawnRegionIndex, const struct FVector& Location);
	void BPRemoveBed(int32 SpawnPointID);
	void BPCreatedSpawnRegionWidget(int32 SpawnRegionIndex, const struct FVector& Location, int32 Difficult);
	void BP_FinalAdjustPlayerCharacterConfigBeforeSpawn(const struct FPrimalPlayerCharacterConfigStruct& InPlayerCharacterConfig, const struct FPrimalPlayerCharacterConfigStruct& ReturnValue);
	void ApplyCharacterPreset(const struct FCharacterPreset& CharacterPreset);
	void ApplyBodyBonePreset(const struct FPlayerBoneBodyPreset& BodyPreset);
};

// 0x68 (0x7C0 - 0x758)
// Class ShooterGame.UI_SpawnPoint
class UUI_SpawnPoint : public UPrimalUI
{
public:
	uint8                                        Pad_4423[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SpawnPointImageName;                               // 0x76C(0x8)(None)
	uint8                                        Pad_4424[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            SpawnPointImageNormal;                             // 0x778(0x8)(ZeroConstructor)
	class UTexture2D*                            SpawnPointImageDisabled;                           // 0x780(0x8)(ZeroConstructor)
	class UTexture2D*                            SpawnPointImageSelected;                           // 0x788(0x8)(ZeroConstructor)
	class UTexture2D*                            CurrentLocation;                                   // 0x790(0x8)(ZeroConstructor)
	class UTexture2D*                            MarkerTexture;                                     // 0x798(0x8)(ZeroConstructor)
	class FName                                  DefaultDestinationImageName;                       // 0x7A0(0x8)(None)
	uint8                                        Pad_4425[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SpawnPoint* GetDefaultObj();

};

// 0x90 (0x7E8 - 0x758)
// Class ShooterGame.UI_SteamInventoryStatusPopup
class UUI_SteamInventoryStatusPopup : public UPrimalUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x758(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x760(0x8)(None)
	class FName                                  DownloadMessageLabelName;                          // 0x768(0x8)(None)
	class FName                                  UploadMessageLabelName;                            // 0x770(0x8)(None)
	class FString                                TitleText;                                         // 0x778(0x10)(None)
	class FString                                MessageText;                                       // 0x788(0x10)(None)
	int32                                        NumberOfDots;                                      // 0x798(0x4)(None)
	float                                        TimeoutInterval;                                   // 0x79C(0x4)(None)
	float                                        DotsUpdateInterval;                                // 0x7A0(0x4)(None)
	uint8                                        Pad_4426[0x44];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SteamInventoryStatusPopup* GetDefaultObj();

};

// 0x90 (0x7E8 - 0x758)
// Class ShooterGame.UI_Subtitles
class UUI_Subtitles : public UPrimalUI
{
public:
	class FName                                  SubtitlesTextBoxName;                              // 0x758(0x8)(None)
	class FName                                  DialogueTextBoxName;                               // 0x760(0x8)(None)
	class FName                                  DialogueIconImageName;                             // 0x768(0x8)(None)
	FMulticastInlineDelegateProperty_            OnProcessDynamicMaterialForDialogueIcon;           // 0x770(0x10)(ZeroConstructor)
	TArray<struct FSubtitleCue>                  SoundWaveSubtitles;                                // 0x780(0x10)(None)
	uint8                                        Pad_442B[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             CurrentlyPlayingSound;                             // 0x7A8(0x8)(ZeroConstructor)
	class USoundWave*                            CurrentlyPlayingSoundWave;                         // 0x7B0(0x8)(ZeroConstructor)
	uint8                                        Pad_442C[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Subtitles* GetDefaultObj();

	void SetSubtitleFromText(class FText SubtitleTextLine);
	void SetSubtitleFromStringWithDurationAndIcon(const class FString& SubtitleTextLine, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetSubtitleFromString(const class FString& SubtitleTextLine);
	void SetSubtitleFromSoundWave(class USoundWave* SoundWave, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetSubtitleFromSoundCue(class USoundCue* SoundCueWithSubtitles, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
	void SetIconMaterialParams(const TArray<struct FNameScalarPair>& ScalarParams, const TArray<struct FNameColorPair>& ColorParams, class UTexture2D* CurrentAT);
	void OnShowSubtitles();
	void OnHideSubtitles();
	void IsIconVisible(bool ReturnValue);
	void IsCurrentIconEqualToGivenIcon(class UMaterialInterface* DialogueIcon, bool ReturnValue);
	void HideSubtitles();
	void ForceSetSubtitlesManualTime(float ManualGlobalStartTime);
};

// 0x458 (0xBC0 - 0x768)
// Class ShooterGame.UI_SurvivorProfile
class UUI_SurvivorProfile : public UPrimalSubMenuUI
{
public:
	uint8                                        Pad_442F[0x288];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundWave*                            AsyncLoadedSoundWave;                              // 0x9F0(0x8)(ZeroConstructor)
	uint8                                        Pad_4430[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInstanceDynamic*>      ExplorerNoteDynamicMaterials;                      // 0xA50(0x10)(ZeroConstructor)
	uint8                                        Pad_4431[0x60];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundCue*                             AsyncLoadedSoundCue;                               // 0xAC0(0x8)(ZeroConstructor)
	uint8                                        Pad_4432[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UGenericDataListEntry*                 AsyncLoadingDinoEntry;                             // 0xB38(0x8)(ZeroConstructor)
	class UTexture2D*                            AsyncLoadedDinoTexture;                            // 0xB40(0x8)(ZeroConstructor)
	class UTexture2D*                            AsyncLoadedDialogueAnimTexture;                    // 0xB48(0x8)(ZeroConstructor)
	class UAudioComponent*                       DialogueSoundComponent;                            // 0xB50(0x8)(ZeroConstructor)
	bool                                         bShowingDossiers;                                  // 0xB58(0x1)(None)
	bool                                         bShowingScorchedEarth;                             // 0xB59(0x1)(None)
	uint8                                        Pad_4433[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  ExplorerNoteMaterialParameterName;                 // 0xB5C(0x8)(None)
	class FName                                  ExplorerNoteAnimTextureParamName;                  // 0xB64(0x8)(None)
	class FName                                  ExplorerNoteAnimTextureStartTimeParamName;         // 0xB6C(0x8)(None)
	class FName                                  ExplorerNoteAnimTextureDurationParamName;          // 0xB74(0x8)(None)
	float                                        ExplorerNoteAnimTextureDurationOffset;             // 0xB7C(0x4)(None)
	float                                        ExplorerNoteFadeInSpeed;                           // 0xB80(0x4)(None)
	float                                        ExplorerNoteFadeOutSpeed;                          // 0xB84(0x4)(None)
	float                                        ShowDossierTitleDelayTime;                         // 0xB88(0x4)(None)
	float                                        ExplorerNoteExtraCloseTime;                        // 0xB8C(0x4)(None)
	TArray<class FString>                        NoteCategoryNames;                                 // 0xB90(0x10)(None)
	TArray<struct FSlateBrush>                   CategoryIcons;                                     // 0xBA0(0x10)(ZeroConstructor)
	uint8                                        Pad_4434[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_SurvivorProfile* GetDefaultObj();

	void ShowExplorerNoteEntry(int32 ExplorerNoteIndex, bool bFromMainPanel);
	void SetFirstFitDisplay(int32 ID);
	void OnSubtitlesCheckboxChanged(bool InNewState);
	void OnNoteNameFilterChanged(class FText Text);
	void OnMoviePlaybackFinished(const class FString& MoviePath, bool bPlaybackWasCancelled);
	void HideDossier();
};

// 0x108 (0x870 - 0x768)
// Class ShooterGame.UI_TamingList
class UUI_TamingList : public UPrimalSubMenuUI
{
public:
	class UClass*                                TamingListEntryTemplate;                           // 0x768(0x8)(ZeroConstructor)
	class UTexture2D*                            POI_Icon;                                          // 0x770(0x8)(ZeroConstructor)
	uint8                                        Pad_4435[0xF8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_TamingList* GetDefaultObj();

	void SearchTextChanged(class FText Text);
};

// 0x98 (0x7F0 - 0x758)
// Class ShooterGame.UI_TextEntry
class UUI_TextEntry : public UPrimalUI
{
public:
	class FName                                  CloseButtonName;                                   // 0x758(0x8)(None)
	class FName                                  AcceptButtonName;                                  // 0x760(0x8)(None)
	class FName                                  TitleLabelName;                                    // 0x768(0x8)(None)
	class FName                                  EditTextBoxName;                                   // 0x770(0x8)(None)
	class FName                                  CheckBoxName;                                      // 0x778(0x8)(None)
	class FName                                  CheckBoxLabelName;                                 // 0x780(0x8)(None)
	float                                        MaxOpenTime;                                       // 0x788(0x4)(None)
	uint8                                        Pad_4437[0x56];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bNumericValue;                                     // 0x7E2(0x1)(None)
	bool                                         bLimitInput;                                       // 0x7E3(0x1)(None)
	int32                                        LimitCount;                                        // 0x7E4(0x4)(None)
	bool                                         bCanCommitEmptyString;                             // 0x7E8(0x1)(None)
	bool                                         bNumericAndChar;                                   // 0x7E9(0x1)(None)
	uint8                                        Pad_4438[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_TextEntry* GetDefaultObj();

	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextChanged(class FText Text);
};

// 0x4C8 (0xC30 - 0x768)
// Class ShooterGame.UI_TribeManager
class UUI_TribeManager : public UPrimalSubMenuUI
{
public:
	class FName                                  CreateNewTribeButtonName;                          // 0x768(0x8)(None)
	class FName                                  LeaveTribeButtonName;                              // 0x770(0x8)(None)
	class FName                                  TribeNameLabelName;                                // 0x778(0x8)(None)
	class FName                                  TribeNameEditBoxName;                              // 0x780(0x8)(None)
	class FName                                  RemovePlayerFromTribeButtonName;                   // 0x788(0x8)(None)
	class FName                                  ManageTribePanelName;                              // 0x790(0x8)(None)
	class FName                                  NewTribePanelName;                                 // 0x798(0x8)(None)
	class FName                                  MyScrollBoxName;                                   // 0x7A0(0x8)(None)
	class FName                                  ReverseLogOrderButtonName;                         // 0x7A8(0x8)(None)
	class UClass*                                TribePlayerEntryButtonTemplate;                    // 0x7B0(0x8)(ZeroConstructor)
	class UClass*                                TribeWarEntryButtonTemplate;                       // 0x7B8(0x8)(ZeroConstructor)
	class UClass*                                TribeAllianceEntryButtonTemplate;                  // 0x7C0(0x8)(ZeroConstructor)
	class UClass*                                TribeAllianceMemberEntryButtonTemplate;            // 0x7C8(0x8)(ZeroConstructor)
	class UClass*                                RankEntryButtonTemplate;                           // 0x7D0(0x8)(ZeroConstructor)
	struct FLinearColor                          SwitcherTextActiveColor;                           // 0x7D8(0x10)(None)
	struct FLinearColor                          SwitcherTextInactiveColor;                         // 0x7E8(0x10)(None)
	double                                       LastPlayerRefreshTime;                             // 0x7F8(0x8)(None)
	uint8                                        Pad_443B[0x430];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_TribeManager* GetDefaultObj();

	void TribeWarEntryButtonSelected(class UWidget* TheWidget);
	void TribeAllianceMemberButtonSelected(class UWidget* TheWidget);
	void TribeAllianceEntryButtonSelected(class UWidget* TheWidget);
	void RankGroupButtonSelected(class UWidget* TheWidget);
	void PlayerEntryButtonSelected(class UWidget* TheWidget);
	void OnGroupRankSelectedSelector(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnGroupRankSelected(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void BPRankGroupIndexSelected(int32 Index);
	void BPRankGroupIndexApplied(int32 Index);
};

// 0x58 (0x7B0 - 0x758)
// Class ShooterGame.UI_TribeWarEntry
class UUI_TribeWarEntry : public UPrimalUI
{
public:
	uint8                                        Pad_443D[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_TribeWarEntry* GetDefaultObj();

	void OnTextCommitted(class FText Text, enum class ETextCommit CommitMethod);
	void OnTextChanged(class FText Text);
};

// 0x30 (0x788 - 0x758)
// Class ShooterGame.UI_Tutorial
class UUI_Tutorial : public UPrimalUI
{
public:
	class FName                                  TutorialTitleLabelName;                            // 0x758(0x8)(None)
	class FName                                  TutorialTextLabelName;                             // 0x760(0x8)(None)
	class FName                                  TutorialImageName;                                 // 0x768(0x8)(None)
	uint8                                        Pad_443E[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Tutorial* GetDefaultObj();

};

// 0x60 (0x7B8 - 0x758)
// Class ShooterGame.UI_Welcome
class UUI_Welcome : public UPrimalUI
{
public:
	class FName                                  NicknameLabelName;                                 // 0x758(0x8)(None)
	class FName                                  LoadingLabelName;                                  // 0x760(0x8)(None)
	class FName                                  OkButtonName;                                      // 0x768(0x8)(None)
	class UClass*                                MainMenuTemplate;                                  // 0x770(0x8)(ZeroConstructor)
	class UClass*                                NotifClass;                                        // 0x778(0x8)(ZeroConstructor)
	uint8                                        Pad_443F[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_Welcome* GetDefaultObj();

};

// 0x48 (0x7A0 - 0x758)
// Class ShooterGame.UI_XBoxFooter
class UUI_XBoxFooter : public UPrimalUI
{
public:
	uint8                                        Pad_4440[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UUI_XBoxFooter* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.VictoryCoreHighest
class UVictoryCoreHighest : public UObject
{
public:

	static class UClass* StaticClass();
	static class UVictoryCoreHighest* GetDefaultObj();

};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.VictoryCore
class UVictoryCore : public UVictoryCoreHighest
{
public:

	static class UClass* StaticClass();
	static class UVictoryCore* GetDefaultObj();

	void VTraceSphereBP_IgnoreActorsArray(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FHitResult& HitOut, float Radius, const TArray<class AActor*>& ExtraIgnoreActors, class AActor* InIgnoreActor, enum class ECollisionChannel Channel, int32 CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, class FName TraceTag, float DebugDrawDuration, bool ReturnValue);
	void VTraceSphereBP(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FHitResult& HitOut, float Radius, class AActor* ActorToIgnore, enum class ECollisionChannel Channel, int32 CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, class FName TraceTag, class AActor* OtherActorToIgnore, class AActor* AnotherActorToIgnore, float DebugDrawDuration, bool ReturnValue);
	void VTraceSingleBP_IgnoreActorsArray(class UObject* WorldContextObject, const struct FHitResult& OutHit, const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& ExtraIgnoreActors, class AActor* InIgnoreActor, enum class ECollisionChannel TraceChannel, int32 CollisionGroups, class FName TraceTag, bool bReturnPhysMaterial, bool bTraceComplex, float DebugDrawDuration, bool ReturnValue);
	void VTraceSingleBP(class UObject* WorldContextObject, const struct FHitResult& OutHit, const struct FVector& Start, const struct FVector& End, enum class ECollisionChannel TraceChannel, int32 CollisionGroups, class FName TraceTag, bool bTraceComplex, class AActor* ActorToIgnore, float DebugDrawDuration, bool ReturnValue);
	void VTraceShapeMultiBP(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutHits, const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& ExtraIgnoreActors, class AActor* InIgnoreActor, float ShapeRadius, float ShapeHalfHeight, const struct FVector& ShapeBoxExtent, const struct FRotator& ShapeRotation, enum class ECollisionChannel Channel, int32 CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, class FName TraceTag, float DebugDrawDuration, bool ReturnValue);
	void VTraceShapeBP(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FHitResult& HitOut, const TArray<class AActor*>& ExtraIgnoreActors, class AActor* InIgnoreActor, float ShapeRadius, float ShapeHalfHeight, const struct FVector& ShapeBoxExtent, const struct FRotator& ShapeRotation, enum class ECollisionChannel Channel, int32 CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, class FName TraceTag, float DebugDrawDuration, bool ReturnValue);
	void VTraceMultiBP_IgnoreActorsArray(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutHits, const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& ExtraIgnoreActors, class AActor* InIgnoreActor, int32 CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, enum class ECollisionChannel TraceChannel, bool bTraceComplex, class FName TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration, bool ReturnValue);
	void VTraceMultiBP(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutHits, const struct FVector& Start, const struct FVector& End, class AActor* InIgnoreActor, int32 CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, enum class ECollisionChannel TraceChannel, bool bTraceComplex, class FName TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, class AActor* AdditionalIgnoreActor, class AActor* AnotherIgnoreActor, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration, bool ReturnValue);
	void VTraceAgainstActorExpensive(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FHitResult& HitOut, class AActor* ActorToTraceAgainst, enum class ECollisionChannel Channel, int64 CollisionGroups, float SphereRadius, bool bReturnPhysMaterial, bool bTraceComplex, const struct FVector& BoxExtent, class FName TraceTag, bool bSort, bool ReturnValue);
	void VNewObjectTransient(class UClass* ClassToUse, class UObject* ReturnValue);
	void VNewObjectFromBlueprintOuter(class UObject* OuterObject, class UClass* ClassToUse, class UObject* ReturnValue);
	void VNewObjectFromBlueprint(class UObject* WorldContextObject, class UClass* ClassToUse, class UObject* ReturnValue);
	void VisualLog_Print(class AActor* Actor, const class FString& Message, bool bIsError);
	void VisualLog_Location(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Location, const struct FLinearColor& PointColor, float Size, bool bAlsoPrintMessage);
	void VisualLog_LineSegment(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, float Thickness, bool bAlsoPrintMessage);
	void VisualLog_Histogram(class AActor* Actor, const struct FVector2D& DataSample, class FName GraphName, class FName DataName);
	void VisualLog_AxisAlignedBox(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& BoxMin, const struct FVector& BoxMax, const struct FLinearColor& BoxColor, bool bAlsoPrintMessage);
	void ViewTrailer(bool bAnimatedSeriesTrailer, bool bARK2Trailer);
	void ViewDirectionAngleOffset(const struct FVector& ViewDirection, const struct FVector& RightVector, float AngleOffsetDegrees, float MaxAngleDegreesBeforeInterpToUp, const struct FVector& ReturnValue);
	void VectorDistance(const struct FVector& A, const struct FVector& B, float ReturnValue);
	void UseCooldown(class UObject* WorldContextObject, double CooldownClock);
	void UnRegisterComponentBP(class UActorComponent* Component);
	void TrimArray_Vector(const TArray<struct FVector>& Array, int32 MaxLength, bool bRemoveFromEnd);
	void TrimArray_Float(const TArray<float>& Array, int32 MaxLength, bool bRemoveFromEnd);
	void TransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& OutVec, const struct FVector2D& ReturnValue);
	void TraceProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, const struct FHitResult& HitResult, const struct FVector& EndLocation, float EndArcTime, const struct FVector& ArcPeakLocation, float MaxArcLength, const TArray<class AActor*>& ActorsToIgnore, float ArcTimeStep, enum class ECollisionChannel CollisionChannel, bool bTraceObjectTypeOnly, bool bDrawDebug, float DebugDrawDuration, bool ReturnValue);
	void ToggleFreezeLevelStreaming(class UObject* WorldContextObject);
	void TimeSince_Utc(double OldTime, float ReturnValue);
	void TimeSince_Network(class UObject* WorldContextObject, double OldTime, float ReturnValue);
	void TimeSince(class UObject* WorldContextObject, double OldTime, float ReturnValue);
	void TimeSeconds(class UObject* WorldContextObject, float ReturnValue);
	void SupportsShaderModel5(bool ReturnValue);
	void StringToIntAscii(const class FString& SourceString, int32 StringIndex, int32 ReturnValue);
	void StringReferenceToClass(const class FString& StringReference, class UClass* ReturnValue);
	void StopMusic(class UObject* WorldContextObject, const class FString& TrackToStop, float CrossFadeOutDuration);
	void StopMovie();
	void StopCompanionEventForPlayer(class APrimalCharacter* Player);
	void StopAllMusicTracks(class UObject* WorldContextObject);
	void SteamOverlayOpenURL(const class FString& ToURL);
	void StaticPlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, class UInitialActiveSoundParams* InitialParams, bool bAlwaysPlay);
	void StaticGetTimeSince(class UObject* WorldContextObject, double Time, float ReturnValue);
	void StaticCheckForCommand(const class FString& CommandName, bool ReturnValue);
	void StartCompanionEventForPlayer(class APrimalCharacter* Player, const struct FCompanionEventData& EventData, class AActor* EventActor);
	void SplineLineTrace(class USplineComponent* SplineComponent, const TArray<class AActor*>& ActorsToIgnore, const TArray<struct FHitResult>& OutHits, int32 NumTracesPerSegment, enum class ECollisionChannel Channel, bool bStopOnBlockingHit, float DebugDrawDuration, bool ReturnValue);
	void SphereOverlapFast(class UObject* WorldContextObject, const struct FVector& Loc, float Radius, bool ReturnValue);
	void SpawnSaddleAttachedStructure(class APrimalDinoCharacter* ParentDino, class UClass* StructureToSpawn, const struct FVector& Location, const struct FRotator& Rotation, class APrimalStructure* ParentStructure, bool bLinkToParent, int32 ConfigIndex, class FName SKAttachmentSocketOrBoneName, class APrimalStructure* ReturnValue);
	void SpawnFollowerBasedOnRNG(class UWorld* World, class APrimalDinoCharacter* ParentDino, const TArray<float>& WeightedChanceArray, TSoftClassPtr<class APrimalDinoCharacter> FollowerClass, float SpawnChanceMultiplier, float SpawnCountMultiplier, bool bIsChild, float AgeMin, float AgeMax, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void SpawnFollower(class UWorld* World, class APrimalDinoCharacter* ParentDino, TSoftClassPtr<class APrimalDinoCharacter> FollowerClass, bool bIsChild, float AgeMin, float AgeMax, class APrimalDinoCharacter* ReturnValue);
	void SpawnCustomDino(class UObject* WorldContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, bool bUseExactSpawnLocation, bool bSkipAddingTamedLevels, bool bSuppressTamingNotifications, class AMissionType* Mission, class UClass* ColorSet, class APrimalDinoCharacter* ReturnValue);
	void SpawnBoxBrushActorFast(class UClass* BrushType, const struct FTransform& BrushTransform, const struct FVector& BoxExtent, class ABrush* ReturnValue);
	void SpawnBoxBrushActor(class UClass* BrushType, const struct FTransform& BrushTransform, const struct FVector& BoxExtent, class ABrush* ReturnValue);
	void SpawnActorInWorld(class UObject* WorldContextObject, class UClass* AnActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class USceneComponent* AttachToComponent, int32 DataIndex, class FName AttachSocketName, class AActor* OwnerActor, class APawn* InstigatorPawn, class AActor* ReturnValue);
	void SpawnActorDeferred(class UClass* Class, class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, class AActor* Owner, class APawn* Instigator, bool bNoCollisionFail, class AActor* ReturnValue);
	void SortPointsByDistance(const struct FVector& FromLoc, const TArray<struct FVector>& Points, const TArray<struct FVector>& ReturnValue);
	void SortActorsByType(const TArray<class AActor*>& Actors, const TArray<class AActor*>& ReturnValue);
	void SortActorsByTag(int32 TagIndex, const TArray<class AActor*>& Actors, const TArray<class AActor*>& ReturnValue);
	void SortActorsByDistanceReturnNearest(const struct FVector& FromLoc, const TArray<class AActor*>& Actors, bool bRemoveNullEntries, class AActor* ReturnValue);
	void SortActorsByDistance(const struct FVector& FromLoc, const TArray<class AActor*>& Actors, const TArray<class AActor*>& ReturnValue);
	void SimpleReplaceUnicodeWithSupportedAlternatives(const class FString& OriginalString, const class FString& ReturnValue);
	void SimpleFloatString(float InputVal, const class FString& ReturnValue);
	void SimpleCurveInterpClampedVector(const struct FVector& A, const struct FVector& B, float Alpha, enum class ESimpleCurve CurveType, const struct FVector& ReturnValue);
	void SimpleCurveInterpClampedTransform(const struct FTransform& A, const struct FTransform& B, float Alpha, enum class ESimpleCurve CurveType, const struct FTransform& ReturnValue);
	void SimpleCurveInterpClampedRotator(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, enum class ESimpleCurve CurveType, const struct FRotator& ReturnValue);
	void SimpleCurveInterpClampedLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, enum class ESimpleCurve CurveType, const struct FLinearColor& ReturnValue);
	void SimpleCurveInterpClamped(float A, float B, float Alpha, enum class ESimpleCurve CurveType, float ReturnValue);
	void SimpleCurveEval(float Value, enum class ESimpleCurve CurveType, float ReturnValue);
	void ShowEditorNotification(class UObject* WorldContextObject, const class FString& Message, enum class EEditorMessageLogLevel LogLevel, float Duration, bool bServerOnly);
	void SetTickGroupBP(class UActorComponent* Component, enum class ETickingGroup TickGroup);
	void SetSessionPrefix(const class FString& InPrefix);
	void SetSelectedLevelActors(const TArray<class AActor*>& ActorsToSelect, bool bClearPreviousSelection);
	void SetMultiUseEntryPriority(const TArray<struct FMultiUseEntry>& Entries, bool bFindByUseIndexInsteadOfArrayIndex, int32 Index, int32 NewPriority, bool ReturnValue);
	void SetMousePosition(class APlayerController* Controller, float X, float Y);
	void SetMaterialColorizationFromItemColors(class UPrimalItem* Item, class UMaterialInstanceDynamic* DynamicMic);
	void SetLevelActorFolderPath(class AActor* Actor, class FName FolderPath);
	void SetLastMapPlayed(const class FString& NewLastMapPlayed);
	void SetGrassEnable(bool bGrassEnable);
	void SetDinoSetupPointsPerStat(const struct FDinoSetup& DinoSetup, enum class EPrimalCharacterStatusValue StatusType, int32 Value, bool bIsPlayerAdded, bool bAddInsteadOfSet);
	void SetComponentCustomNavigableGeometry(class UPrimitiveComponent* Component, uint8 CustomNavigableGeometryType);
	void SetBoolArrayElemTrue(const TArray<bool>& TheArray, int32 TheIndex);
	void SetBoolArrayElemFalse(const TArray<bool>& TheArray, int32 TheIndex);
	void SetAnimBPOffsets(class UAnimInstance* ForAnimInstance, const struct FVector& RootLocationOffset, const struct FRotator& RootRotationOffset, const struct FTransform& RootOffsetTransform);
	void SetAllowControllerInputWithCursor(bool bAllow);
	void ServerSearchFoliageByResource(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, const TArray<struct FOverlappedFoliageElement>& OutFoliage, const TArray<class UClass*>& HarvestResources, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
	void ServerSearchFoliage(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, const TArray<struct FOverlappedFoliageElement>& OutFoliage, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
	void ServerOctreeOverlapActorsClassBitMask(class UObject* WorldContextObject, const struct FVector& AtLoc, float Radius, int32 OctreeTypeBitMask, class UClass* ActorClass, bool bForceActorLocationDistanceCheck, const TArray<class AActor*>& ReturnValue);
	void ServerOctreeOverlapActorsClass(class UObject* WorldContextObject, const struct FVector& AtLoc, float Radius, enum class EServerOctreeGroup OctreeType, class UClass* ActorClass, bool bForceActorLocationDistanceCheck, const TArray<class AActor*>& ReturnValue);
	void ServerOctreeOverlapActorsBitMask(class UObject* WorldContextObject, const struct FVector& AtLoc, float Radius, int32 OctreeTypeBitMask, bool bForceActorLocationDistanceCheck, const TArray<class AActor*>& ReturnValue);
	void ServerOctreeOverlapActors(class UObject* WorldContextObject, const struct FVector& AtLoc, float Radius, enum class EServerOctreeGroup OctreeType, bool bForceActorLocationDistanceCheck, const TArray<class AActor*>& ReturnValue);
	void ServerCheckMeshingOnActor(class AActor* OnActor, bool bForceUseActorCenterBounds, bool ReturnValue);
	void SelectVectorIfWithinRange(const struct FVector& A, const struct FVector& B, bool PickedA, float MaxDistance, const struct FVector& ReturnValue);
	void SelectCloserVector(const struct FVector& Origin, const struct FVector& A, const struct FVector& B, bool PickedA, const struct FVector& ReturnValue);
	void RotateDirToTargetWithAngleLimits(const struct FVector& RotateDir, const struct FVector& TowardsDir, const struct FRotator& WithAngleLimits, bool bForceZeroRoll, const struct FVector& ReturnValue);
	void ReupdateCaptures(class UObject* WorldContextObject, bool bReinitSkylights);
	void ResetMousePositionToCenter(class APlayerController* Controller);
	void ResetCooldown(double CooldownClock);
	void RemoveRollFromRotator(const struct FRotator& FromRotator, const struct FRotator& ReturnValue);
	void RemovePitchAndRollFromRotator(const struct FRotator& FromRotator, const struct FRotator& ReturnValue);
	void RemoveInvalidObjectsInContainer(const TArray<class APrimalDinoCharacter*>& FContainer, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void RemoveFromActorList(class UObject* WorldContextObject, int32 ActorListNum, class AActor* ActorRef);
	void RemoveActorFromCustomActorList(class UObject* WorldContextObject, class FName SearchCustomTag, class AActor* ActorToRemove, bool ReturnValue);
	void RegisterComponentBP(class UActorComponent* Component);
	void RefreshApplySoundVolumes();
	void RefreshApplySoundAndMusicVolumes();
	void RecursivelyApplDynamicMaterialParamsToMeshAndChildren_Helper(class UMeshComponent* WithMesh, const TArray<class FName>& DynamicMaterialParams_Scalar_Names, const TArray<float>& DynamicMaterialParams_Scalar, const TArray<class FName>& DynamicMaterialParams_Vector_Names, const TArray<struct FVector>& DynamicMaterialParams_Vector, const TArray<class FName>& DynamicMaterialParams_Texture_Names, const TArray<class UTexture*>& DynamicMaterialParams_Texture);
	void RecordMeshingMetrics(class AActor* ForActor, bool bWasDestroyed);
	void ReallySupportsShaderModel5(bool ReturnValue);
	void RandomPointInBoundingBoxFromStream(const struct FVector& Origin, const struct FVector& BoxExtent, const struct FRandomStream& Stream, const struct FVector& ReturnValue);
	void PureDefaultObject(class UObject* FromObjectInstance, class UObject* ReturnValue);
	void PureClassDefaultObject(class UClass* FromClass, class UObject* ReturnValue);
	void ProjectWorldLocationToScreenOrScreenEdgePosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, const struct FVector2D& ScreenPosition, float ScreenMarginPercent, bool WidgetSpace, bool OnScreen, bool bAdjustWithScreenDPI, bool ReturnValue);
	void ProjectVectorOntoInsideOfSphere(const struct FVector& ProjectVector, const struct FVector& ProjectVectorLocation, const struct FVector& SphereOrigin, bool bOnlyProjectIfVectorIsLeavingSphere, const struct FVector& ReturnValue);
	void ProjectScreenLocationIntoWorld(class APlayerController* ForPC, const struct FVector2D& ScreenLocation, float ProjectionDist, const struct FVector& ReturnValue);
	void ProjectLocationToEdgeOfSphere(bool bOutDidProject, const struct FVector& ForLocation, const struct FVector& SphereOrigin, float SphereRadius, bool bOnlyProjectIfWithinRadius, bool bForceProjection2D, bool bDebug, class AActor* DebugContextActor, float DebugDuration, const struct FVector& ReturnValue);
	void PrintMessageInShippingBuild(const class FString& Msg);
	void PrecisionRound(float InputVal, int32 Precision, float ReturnValue);
	void PointsRandomDist(const struct FVector& Location, int32 NumPoints, float Radius, float PointRadius, const TArray<struct FVector>& ReturnValue);
	void PointsOnAGrid(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, float MinSize, int32 NumPoints, float DebugDrawDuration, const TArray<struct FVector>& ReturnValue);
	void PointsOnACircle(const struct FVector& Center, float Radius, int32 NumPoints, const TArray<struct FVector>& ReturnValue);
	void PointOnSphere(float Radius, float DegreesI, float DegreesJ, const struct FVector& ReturnValue);
	void PointOnCircle(float Radius, float AngleDegrees, const struct FVector2D& ReturnValue);
	void PlayMusic(class UObject* WorldContextObject, const class FString& MusicFile, bool bLooping, float CrossfadeDuration, bool bDontFadeInIfNoOtherTracks, bool bPlayEvenIfCurrentlyPlaying, float OverrideVolume);
	void PlayMovie(class UObject* WorldContextObject, const class FString& MoviePath, bool bMovieIsSkippable, FDelegateProperty_ OnMoviePlaybackFinishedDelegate, bool bPlayedOnClient, enum class EPlayMovieVolumeType VolumeType, bool ReturnValue);
	void PlayerOwnsScorchedEarthServer(class AShooterPlayerController* Controller, bool ReturnValue);
	void PlayerOwnsGenesisSeasonPassServer(class AShooterPlayerController* Controller, bool ReturnValue);
	void PlayerOwnsExtinctionServer(class AShooterPlayerController* Controller, bool ReturnValue);
	void PlayerOwnsAberrationServer(class AShooterPlayerController* Controller, bool ReturnValue);
	void PlayCompanionReactionToPlayers(const TArray<class APrimalCharacter*>& PlayersWhoGetReaction, const struct FCompanionReactionData& ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int32 UniqueID);
	void PlayCompanionReactionOnSolePlayer(class APrimalCharacter* PlayersWhoGetReaction, const struct FCompanionReactionData& ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int32 UniqueID);
	void PlaceStructure(class AShooterCharacter* PlacingPawn, class UClass* StructureToPlace, const struct FItemNetID& ItemID, bool DisplayFailMessage);
	void OwnsSteamAppID(int32 AppID, bool ReturnValue);
	void OwnsScorchedEarth(bool ReturnValue);
	void OwnsGenesisSeasonPass(bool ReturnValue);
	void OwnsGenesis(bool ReturnValue);
	void OwnsExtinction(bool ReturnValue);
	void OwnsDLC(const class FString& DLCName, bool ReturnValue);
	void OwnsCrystalIsles(bool ReturnValue);
	void OwnsAberration(bool ReturnValue);
	void OverlappingStationaryObjectsTraceBP(class UObject* WorldContextObject, class APrimalCharacter* SourceCharacter, const TArray<struct FOverlapResult>& Overlaps, const struct FVector& Origin, float Radius, enum class ECollisionChannel TraceChannel, class AActor* InIgnoreActor, class FName TraceName, bool bComplexOverlapTest, bool ReturnValue);
	void OverlappingActorsTraceBP(class UObject* WorldContextObject, const TArray<struct FOverlapResult>& Overlaps, const struct FVector& Origin, float Radius, enum class ECollisionChannel TraceChannel, class AActor* InIgnoreActor, class FName TraceName, bool bComplexOverlapTest, bool ReturnValue);
	void OverlappingActorsBP(class UObject* WorldContextObject, const TArray<struct FOverlapResult>& Overlaps, const struct FVector& Origin, float Radius, int32 CollisionGroups, class AActor* InIgnoreActor, class FName TraceName, bool bComplexOverlapTest, bool ReturnValue);
	void OpenStorePageForDLC(const class FString& DLCName);
	void ObjectRefToClassRef(class UObject* InObject, class UClass* ReturnValue);
	void ObjectIsChildOfSoftRef(class UObject* Object, TSoftClassPtr<class UObject> ParentClass, bool bExactMatch, bool ReturnValue);
	void ObjectIsChildOf(class UObject* Object, class UClass* ObjectType, bool bExactMatch, bool ReturnValue);
	void NormalizeRotator(const struct FRotator& InRotator, const struct FRotator& ReturnValue);
	void NetworkTimeToRealWorldUtcTime(class UObject* WorldContextObject, double NetworkTime, double ReturnValue);
	void MultiTraceProjectSphere(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutResults, const struct FVector& Origin, enum class ECollisionChannel TraceChannel, int32 HorizResolution, int32 VertResolution, float StartDistance, float EndDistance, float NorthConeSubtractAngle, float SouthConeSubtractAngle, int32 PctChanceToTrace, int32 MaxTraceCount, bool bDrawDebugLines, float DebugDrawDuration, bool bStopOnFirstHit);
	void MultiLinePenetrationTraceByChannel(class UObject* WorldContextObject, const TArray<struct FPenetrationTraceHit>& OutResults, const struct FVector& Start, const struct FVector& End, enum class ECollisionChannel TraceChannel, const TArray<class AActor*>& ActorsToIgnore, bool bTraceComplex, bool bIgnoreSelf, bool bDrawDebugLines, float DebugDrawDuration);
	void MulticastDrawDebugString(class AActor* ReplicatedActor, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void MulticastDrawDebugSphere(class AActor* ReplicatedActor, const struct FVector& Center, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration);
	void MulticastDrawDebugPoint(class AActor* ReplicatedActor, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void MulticastDrawDebugLine(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool AllowInShipping);
	void MulticastDrawDebugCylinder(class AActor* ReplicatedActor, const struct FVector& Start, const struct FVector& End, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration);
	void MulticastDrawDebugCoordinateSystem(class AActor* ReplicatedActor, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void MulticastDrawDebugCapsuleWithExtents(class AActor* ReplicatedActor, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void MulticastDrawDebugCapsule(class AActor* ReplicatedActor, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration);
	void MulticastDrawDebugCamera(class AActor* ReplicatedActor, class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void MulticastDrawDebugBox(class AActor* ReplicatedActor, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration);
	void MulticastDrawDebugArrow(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration);
	void ModifyDinoSetupTargetLevel(const struct FDinoSetup& DinoSetup, float LevelMultiplier, int32 MinLevel, int32 MaxLevel, const struct FDinoSetup& ReturnValue);
	void MarkGen2IntroAsSeen(class UObject* WorldContextObject);
	void MapRangeToCurveClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, enum class ESimpleCurve CurveType, float ReturnValue);
	void MapAngleRangeToCurveClamped(float AngleDegrees, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, enum class ESimpleCurve CurveType, float ReturnValue);
	void MakePlayerCharacterConfigStructReplicated(bool bIsFemale, const TArray<struct FLinearColor>& BodyColors, const class FString& PlayerCharacterName, const TArray<float>& RawBoneModifiers, int32 PlayerSpawnRegionIndex, uint8 HeadHairIndex, uint8 FacialHairIndex, float PercentOfFullHeadHairGrowth, float PercentOfFullFacialHairGrowth, const TArray<uint8>& OverrideHeadHairColor, const TArray<uint8>& OverrideFacialHairColor, const TArray<uint8>& DynamicMaterialBytes, int32 PlayerVoiceCollectionIndex, bool bUsingCustomPlayerVoiceCollection, const struct FPrimalPlayerCharacterConfigStructReplicated& ReturnValue);
	void MakePlaneWithPoints(const struct FVector& A, const struct FVector& B, const struct FVector& C, const struct FPlane& ReturnValue);
	void MakeHitResult(const struct FVector& Location, const struct FVector& Normal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, class FName HitBoneName, int32 HitItem, bool bBlockingHit, const struct FHitResult& ReturnValue);
	void LogStackTrace();
	void LeadTargetPosition(const struct FVector& ProjLocation, float ProjSpeed, const struct FVector& TargetLocation, const struct FVector& TargetVelocity, const struct FVector& ReturnValue);
	void LeaderboardColumnNameToString(enum class ELeaderboardColumnName ColumnType, const class FString& ReturnValue);
	void KillTargetCharacterOrStructure(class AActor* ActorToKill, class AActor* DamageCauser, bool bTryDestroyActor, bool ReturnValue);
	void JoinStringArrayWithNewlines(const TArray<class FString>& SourceArray, const class FString& ReturnValue);
	void IsXboxOneBuild(bool ReturnValue);
	void IsWorkshopIDSubscribed(const class FString& WorkshopID, bool ReturnValue);
	void IsVerboseDisplayEnabled(class UObject* WorldContextObject, bool ReturnValue);
	void IsValidItemForGrinding(class UPrimalItem* Item, class UPrimalInventoryComponent* Inventory, bool ReturnValue);
	void IsUWPBuild(bool ReturnValue);
	void IsUndermesh(class APrimalCharacter* Character, const struct FVector& CheckSevenHitLocation, bool bOverlapping, class UActorComponent* CheckSevenResult, bool DebugDraw, float DebugDrawSeconds, bool ReturnValue);
	void IsTimeSince_Utc(double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime, bool ReturnValue);
	void IsTimeSince_Network(class UObject* WorldContextObject, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime, bool ReturnValue);
	void IsTimeSince(class UObject* WorldContextObject, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime, bool ReturnValue);
	void IsSplitscreen(bool ReturnValue);
	void IsSOTFLobby(bool ReturnValue);
	void IsSOTF(bool ReturnValue);
	void IsShipping(bool ReturnValue);
	void IsSavingSaveGame(bool ReturnValue);
	void IsRunningTotalConversion(bool ReturnValue);
	void IsPVEServer(class UObject* WorldContextObject, bool ReturnValue);
	void IsPS4Build(bool ReturnValue);
	void IsPointStuckWithinMesh(class UObject* WorldContextObject, const struct FVector& TestPoint, int32 HemisphereSubdivisions, float RayDistance, float PercentageConsideredStuck, class AActor* ActorToIgnore, bool ReturnValue);
	void IsPointInCone(const struct FVector& Point, const struct FVector& ConeOrigin, const struct FVector& ConeDir, float ConeLength, float ConeHalfAngle, bool ReturnValue);
	void IsPlayingMovie(bool ReturnValue);
	void IsPlayInEditor(class UObject* WorldContextObject, bool ReturnValue);
	void IsOfficialServer(bool ReturnValue);
	void IsNonHostPlayer(class UObject* WorldContextObject, class AController* PlayerController, bool ReturnValue);
	void IsMissionTagActiveAnywhere(class AShooterPlayerController* FromPC, class FName MissionTag, bool ReturnValue);
	void IsMissionActiveAnywhere(class UClass* MissionType, bool ReturnValue);
	void IsLowMemPlatform(bool ReturnValue);
	void IsLockhart(bool ReturnValue);
	void IsLocationLikelyWithinAnIncorrectlyPlacedWaterVolume(class UObject* WorldContextObject, const struct FVector& ImpactLocation, const struct FVector& ImpactDirection, bool ReturnValue);
	void IsLoadingSaveGame(bool ReturnValue);
	void IsLinuxOrMacBuild(bool ReturnValue);
	void IsInsideOrIntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent, bool ReturnValue);
	void IsInsideBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent, bool ReturnValue);
	void IsGameWorld(class UObject* WorldContextObject, bool ReturnValue);
	void IsGamePadConnected(bool ReturnValue);
	void IsFluidInteractionEnabled(class UObject* WorldContext, bool ReturnValue);
	void IsEpicClient(bool ReturnValue);
	void IsEngramGroupAllowed(class AShooterPlayerController* ForPC, int32 EngramGroup, bool ReturnValue);
	void IsEditor(bool ReturnValue);
	void IsDistanceLessThan(const struct FVector& A, const struct FVector& B, float Distance, bool ReturnValue);
	void IsDistanceGreaterThan(const struct FVector& A, const struct FVector& B, float Distance, bool ReturnValue);
	void IsDinoDuped(class UObject* WorldContextObject, int32 ID1, int32 ID2, bool ReturnValue);
	void IsCryopodNerfEnabled(class UObject* WorldContextObject, float DamageMult, float Duration, float IncomingDamageMultPercent, bool ReturnValue);
	void IsCooldownComplete(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration, bool ReturnValue);
	void IsConsoleServerBuild(bool ReturnValue);
	void IsConsoleBuild(bool ReturnValue);
	void IsChildOfClassesSoftRef(class UClass* ChildClass, const TArray<TSoftClassPtr<class UObject>>& ParentClassesArray, int32 ReturnValue);
	void IsChildOfClassesSoft(class UClass* ChildClass, const TArray<class FString>& ParentClassesArraySoft, int32 ReturnValue);
	void IsChildOfClasses(class UClass* ChildClass, const TArray<class UClass*>& ParentClassesArray, int32 ReturnValue);
	void IsBrainControllingDinoAttached(class APrimalCharacter* Character, bool ReturnValue);
	void InverseTransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& OutVec, const struct FVector2D& ReturnValue);
	void InverseTransform(const struct FTransform& TransformIn, const struct FTransform& ReturnValue);
	void IntToStringAscii(int32 CharValue, const class FString& ReturnValue);
	void IntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent, bool ReturnValue);
	void InlineLoadLevels(const TArray<class FName>& LevelNames, const TArray<class FName>& LevelNamesToUnload, bool bDisableDistanceStreamingOnLevels);
	void Helix(float Radius, float Time, const struct FVector& ReturnValue);
	void HasPlayerSeenGen2Intro(class UObject* WorldContextObject, bool ReturnValue);
	void HasCraftingRequirementsGreaterThanOne(class UPrimalItem* Item, bool ReturnValue);
	void GrindItemIntoInventory(class UPrimalItem* Item, class UPrimalInventoryComponent* Inventory, bool bGrindStack, int32 MaxQuantityToGrind, float GrindGiveItemsPercent, int32 MaxItemsToGivePerGrind, bool ReturnValue);
	void GrindAllItemsToInventory(class UPrimalInventoryComponent* Inventory, bool bGrindStack, int32 MaxQuantityToGrind, float GrindGiveItemsPercent, int32 MaxItemsToGivePerGrind);
	void GridTraceAroundPoint(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutResults, const struct FVector& Origin, const struct FRotator& GridRotation, const TArray<class AActor*>& ActorsToIgnore, enum class ECollisionChannel CollisionChannel, int32 NumTracesX, int32 NumTracesY, float SpacingX, float SpacingY, float ZStartOffset, float ZEndOffset, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration);
	void GiveItemToCharacter(class APrimalCharacter* Character, class UClass* ItemType, int32 NumItems, float Quality, bool bAutoEquip, const TArray<class UPrimalItem*>& ReturnValue);
	void GetWorldSublevels(class UObject* WorldContextObject, const TArray<class ULevelStreaming*>& ReturnValue);
	void GetWorldLoadedAtTime(class UObject* WorldContextObject, double ReturnValue);
	void GetWeightedRandomIndexFromArray(const TArray<float>& PArray, float ForceRand, int32 ReturnValue);
	void GetVolumeOfCapsule(float CapsuleRadius, float CapsuleHalfHeight, float ReturnValue);
	void GetVelocityDeltaBetweenChars(class APrimalCharacter* CharA, class APrimalCharacter* CharB, const struct FVector& ReturnValue);
	void GetUpsellIndex(int32 ReturnValue);
	void GetTwoLetterISOLanguageName(const class FString& ReturnValue);
	void GetTimeSince(class APawn* Pawn, float Time, float ReturnValue);
	void GetTimeSeconds(class APawn* Pawn, float ReturnValue);
	void GetTeamColor(int32 TargetingTeam, const struct FColor& ReturnValue);
	void GetStaticMeshBounds(class UStaticMesh* ForMesh, const struct FBoxSphereBounds& ReturnValue);
	void GetSpecialActorList(class UObject* WorldContextObject, enum class EActorListsBP ActorListType, const TArray<class AActor*>& OutActors);
	void GetSoundWaveLocalizedSpokenText(class USoundWave* InSound, const class FString& ReturnValue);
	void GetSoundCueLocalizedSpokenText(class USoundCue* InSound, const class FString& ReturnValue);
	void GetSimpleMontageDuration(class UAnimMontage* GivenMontage, float GivenPlayRate, float ReturnValue);
	void GetShooterGameUserSettings(class UShooterGameUserSettings* ReturnValue);
	void GetShooterCharacterFromPawn(class APawn* Pawn, class AShooterCharacter* ReturnValue);
	void GetShooterCharacterFromController(class AController* Controller, class AShooterCharacter* ReturnValue);
	void GetSelectedLevelActors(const TArray<class AActor*>& ReturnValue);
	void GetSecondsIntoDay(int32 ReturnValue);
	void GetScreenPercentLocation(class APlayerController* ForPC, const struct FVector2D& ScreenPercentages, const struct FVector2D& ReturnValue);
	void GetScreenPercentage(float ReturnValue);
	void GetScreenFramePerfScalar(float ReturnValue);
	void GetRealWorldUtcTimeInSeconds(double ReturnValue);
	void GetRandomWeightedDinoSetup(const TArray<struct FDinoSetup>& DinoSetupEntries, const struct FDinoSetup& DinoSetup, bool ReturnValue);
	void GetRandomCircleCenterPointEncompassingPointWithinOuterCircle(float RandomCircleRadius, const struct FVector2D& PointToEncompass, const struct FVector2D& OuterCircleCenterPoint, float OuterCircleRadius, int32 MaxRetries, const struct FVector2D& ReturnValue);
	void GetProjectileArcPeakTime(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float ReturnValue);
	void GetPrimaryWorld(class UWorld* ReturnValue);
	void GetPrimaryCameraLocationDistanceFromPoint(const struct FVector& WorldPoint, float ReturnValue);
	void GetPrimaryCameraLocation(const struct FVector& ReturnValue);
	void GetPreviousTrackedActorLinkedEntry(TMap<int32, struct FTrackedActorOverallContainer> GivenTMap, int32 ID, int32 Category, int32 NextLinkedEntryID, int32 NextLinkedEntryCategory, const struct FTrackedActorPlusInfoStruct& FoundTrackedActorPlusInfoStruct, bool ReturnValue);
	void GetPlayerCharacterByIndex(class UObject* WorldContextObject, int32 PlayerIndex, class AShooterCharacter* ReturnValue);
	void GetPlayerCharacterByController(class APlayerController* PC, class AShooterCharacter* ReturnValue);
	void GetPlatformName(const class FString& ReturnValue);
	void GetPlaneNormal(const struct FPlane& ForPlane, const struct FVector& ReturnValue);
	void GetOverlappedHarvestActors(class UObject* WorldContextObject, const struct FVector& AtLoc, float AtRadius, const TArray<class AActor*>& OutHarvestActors, const TArray<class UActorComponent*>& OutHarvestComponents, const TArray<struct FVector>& OutHarvestLocations, const TArray<int32>& OutHitBodyIndices, bool ReturnValue);
	void GetObjectString(class UObject* ForObject, const class FString& ReturnValue);
	void GetObjectsReferencedBy(class UObject* ForObject, const TArray<class UObject*>& OutReferencedObjects, bool bIgnoreTransient);
	void GetObjectPathName(class UObject* ForObject, const class FString& ReturnValue);
	void GetObjectName(class UObject* ForObject, class FName ReturnValue);
	void GetObjectFName(class UObject* ForObject, class FName ReturnValue);
	void GetNextTrackedActorLinkedEntry(TMap<int32, struct FTrackedActorOverallContainer> GivenTMap, int32 ID, int32 Category, int32 NextLinkedEntryID, int32 NextLinkedEntryCategory, const struct FTrackedActorPlusInfoStruct& FoundTrackedActorPlusInfoStruct, bool ReturnValue);
	void GetNewlineCharacter(const class FString& ReturnValue);
	void GetNetworkTimeInSeconds(class UObject* WorldContextObject, double ReturnValue);
	void GetNearestAnimSequenceFromBlendSpace(const struct FVector& BlendSpaceInput, class UBlendSpace* BlendSpace, class UAnimSequence* ReturnValue);
	void GetNearestAlliedPlayer(class UObject* WorldContextObject, int32 TargetingTeam, const struct FVector& Location, const TArray<class AActor*>& IgnoreActors, class AActor* ReturnValue);
	void GetNearestAlliedDinoElsePlayer(class UObject* WorldContextObject, int32 TargetingTeam, const struct FVector& Location, const TArray<class AActor*>& IgnoreActors, class AActor* ReturnValue);
	void GetNearestAllieDDino(class UObject* WorldContextObject, int32 TargetingTeam, const struct FVector& Location, const TArray<class AActor*>& IgnoreActors, class AActor* ReturnValue);
	void GetMontageGroupName(class UAnimMontage* GivenMontage, class FName ReturnValue);
	void GetMontageFromAnimAsset(class UAnimationAsset* ForAnimAsset, const struct FVector& ForDirection, class UAnimMontage* ReturnValue);
	void GetMissionNetworkStartTime(class UObject* WorldContextObject, class FName MissionTag, double ReturnValue);
	void GetMissionActorOfTypes(class UObject* WorldContextObject, const TArray<class UClass*>& TheMissionTypes, class AActor* ReturnValue);
	void GetMissionActorOfType(class UObject* WorldContextObject, class UClass* TheMissionType, bool bExactMatch, class AActor* ReturnValue);
	void GetMatineeLength(class AMatineeActor* MatineeActor, float ReturnValue);
	void GetLocaleSpecificSoundWaveAnimTexturePairArrays(const TArray<struct FLocalizedSoundWaveAnimTexturePairArrays>& LocalizedSoundWaveAnimTextures, const struct FLocalizedSoundWaveAnimTexturePairArrays& OutLocalizedAudio, bool FoundLocalizedSoundWavesForThisLanguage, const class FString& LanguageOverride, bool ReturnValue);
	void GetLocaleSpecificAudio(const TArray<struct FLocalizedSoundCueEntry>& LocalizedSoundCues, const struct FLocalizedSoundCueEntry& OutLocalizedAudio, const class FString& LanguageOverride, bool ReturnValue);
	void GetLoadedStreamingLevelNames(const TArray<class FName>& ReturnValue);
	void GetLaunchVelocityAndGravity(const struct FVector& StartLocation, const struct FVector& TargetLocation, float LateralSpeed, float PeakHeightZ, const struct FVector& LaunchVelocity, float Gravity);
	void GetLastMapPlayed(const class FString& ReturnValue);
	void GetLastHostedMapPlayed(const class FString& ReturnValue);
	void GetKeyNameFromActionName(class FName ActionName, const class FString& ReturnValue);
	void GetKeyName(const struct FKey& Key, const class FString& ReturnValue);
	void GetKeybindName(class FName KeyBind, class FName ReturnValue);
	void GetKeybindDisplayName(class FName KeyBind, class FText ReturnValue);
	void GetKeybindByPredicate(class FName KeybindName, const struct FKey& ReturnValue);
	void GetItemClassFromItemSetup(const struct FItemSetup& ItemSetup, class UClass* ReturnValue);
	void GetHitBoneNameFromDamageEvent(class APrimalCharacter* Character, class AController* HitInstigator, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointHitResult, class FName MatchCollisionPresetName, class FName ReturnValue);
	void GetHarvestingComponentFromHitBodyIndex(class UInstancedStaticMeshComponent* FromISMC, int32 WithHitBodyIndex, class UPrimalHarvestingComponent* ReturnValue);
	void GetGroundLocation(class UObject* WorldContextObject, const struct FVector& TheGroundLoc, const struct FVector& StartLoc, const struct FVector& OffsetUp, const struct FVector& OffsetDown, bool ReturnValue);
	void GetGrinderReplacementItem(class UClass* Current, class UClass* ReturnValue);
	void GetFirstDirectionalLight(class UObject* WorldContextObject, class ADirectionalLight* ReturnValue);
	void GetEditorBuildRevision(int32 ReturnValue);
	void GetDLCNameFromSelector(enum class EDLCSelector SelectedDLC, const class FString& ReturnValue);
	void GetDistanceToCollision(class UPrimitiveComponent* Comp, const struct FVector& Point, const struct FVector& ClosestPoint, float ReturnValue);
	void GetDinoStaticClass(const struct FDinoSetup& DinoSetup, class UClass* ReturnValue);
	void GetDinoSetupPointsPerStat(const struct FDinoSetup& DinoSetup, enum class EPrimalCharacterStatusValue StatusType, bool bGetPlayerAdded, int32 ReturnValue);
	void GetDinoSetupGroup_WeightedRandom(const TArray<struct FDinoSetupGroup>& DinoSetupGroups, const struct FDinoSetupGroup& Group, bool ReturnValue);
	void GetDinoSetupGroup_ByName(class FName GroupName, const TArray<struct FDinoSetupGroup>& DinoSetupGroups, const struct FDinoSetupGroup& Group, bool ReturnValue);
	void GetDinoSetupDinoType(const struct FDinoSetup& DinoSetup, class UClass* ReturnValue);
	void GetDinoSetupCapsuleSize(const struct FDinoSetup& DinoSetup, float CapsuleRadius, float CapsuleHalfHeight, bool ReturnValue);
	void GetDinoCharacterByID(class UObject* WorldContextObject, int32 DinoID1, int32 DinoID2, bool bSearchTamedOnly, class APrimalDinoCharacter* ReturnValue);
	void GetDefaultObject(class UObject* FromObjectInstance, class UObject* ReturnValue);
	void GetCustomDinoSpawnLocation(class UObject* WorldContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, const struct FVector& ReturnValue);
	void GetCustomActorList(class UObject* WorldContextObject, class FName SearchCustomTag, class ACustomActorList* ReturnValue);
	void GetCurrentCameraExposure(float ReturnValue);
	void GetControllerMovementInputs(class APlayerController* ForPC, const struct FVector2D& ReturnValue);
	void GetClosestActorArray(const struct FVector& ToPoint, const TArray<class AActor*>& ActorArray, class AActor* ReturnValue);
	void GetClassString(class UClass* ForClass, const class FString& ReturnValue);
	void GetClassPathName(class UObject* ForClass, const class FString& ReturnValue);
	void GetClassFName(class UClass* ForClass, class FName ReturnValue);
	void GetClassDefaultObjectFromAsset(const struct FAssetData& ForAsset, class UObject* ReturnValue);
	void GetClassDefaultObject(class UClass* FromClass, class UObject* ReturnValue);
	void GetCharacterCapsuleSize(class UClass* CharClass, float CapsuleRadius, float CapsuleHalfHeight, bool ReturnValue);
	void GetBlockingMissionTag(class AShooterPlayerController* FromPC, class FName MissionTag, class FName ReturnValue);
	void GetBestHitInfoFromDamageEvent(const struct FDamageEvent& DamageEvent, const struct FHitResult& OutHitInfo, const struct FVector& OutImpulseDir);
	void GetArrayIndicesSorted_Int(const TArray<int32>& Array, bool bSortLowToHigh, const TArray<int32>& ReturnValue);
	void GetArrayIndicesSorted_Float(const TArray<float>& Array, bool bSortLowToHigh, const TArray<int32>& ReturnValue);
	void GetArrayIndicesSorted_Double(const TArray<double>& Array, bool bSortLowToHigh, const TArray<int32>& ReturnValue);
	void GetAngleBetweenVectorsPure(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis, float ReturnValue);
	void GetAngleBetweenVectors(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis, float ReturnValue);
	void GetAllPlayerStarts(class UObject* WorldContextObject, const TArray<class AActor*>& ReturnValue);
	void GetAllMissionDispatchers(class UObject* WorldContextObject, const TArray<class AActor*>& ReturnValue);
	void GetAllMissionDispatcherPoints(class UObject* WorldContextObject, const TArray<class AActor*>& ReturnValue);
	void GetAllMissionActors(class UObject* WorldContextObject, const TArray<class AActor*>& ReturnValue);
	void GetAllLocalPlayerControllers(class UObject* WorldContextObject, const TArray<class AShooterPlayerController*>& ReturnValue);
	void GetAllLocalPlayerCharacters(class UObject* WorldContextObject, const TArray<class AShooterCharacter*>& ReturnValue);
	void GetAllLocalPlayerCameraManagers(class UObject* WorldContextObject, const TArray<class APlayerCameraManager*>& ReturnValue);
	void GetAllKeybindsByPredicate(class FName KeybindName, const TArray<struct FKey>& ReturnValue);
	void GetAllClassesOfType(const TArray<class UClass*>& Subclasses, class UClass* ParentClass, bool bAllowAbstract, const class FString& Path);
	void GetAllBlueprintAssetsOfNativeClass(class UClass* InNativeClass, const TArray<struct FAssetData>& FoundAssets, bool ReturnValue);
	void GetAllAvailableMissionsAsTags(class UObject* WorldContextObject, const TArray<class FName>& ReturnValue);
	void GetAllAvailableMissions(class UObject* WorldContextObject, const TArray<struct FAvailableMission>& ReturnValue);
	void GetAllAnimationSequencesFromMontage(class UAnimMontage* InMontage, const TArray<class UAnimationAsset*>& AnimationAssets, bool ReturnValue);
	void GetAllActorsOfClassSoft(class UObject* WorldContextObject, TSoftClassPtr<class AActor> ActorClass, const TArray<class AActor*>& OutActors);
	void GetActorFromOverlapResult(const struct FOverlapResult& OverlapResult, class AActor* ReturnValue);
	void GenerateRandomLootItemFromLootTable(const TArray<struct FLootTableEntry>& Entries, int32 ItemQuantity, float ItemQuality, class UClass* ReturnValue);
	void GenerateRandomLootItem(enum class ELootItemType LootItemType, class UClass* ReturnValue);
	void GenerateDeathBlendSpacesForDino(class APrimalDinoCharacter* Dino);
	void Generate_UUID(const class FString& ReturnValue);
	void FuseChunkedFString(const TArray<class FString>& InputStringArray, const class FString& ReturnValue);
	void FormatAsTimeLong(int32 InTime, const class FString& ReturnValue);
	void FormatAsTime(int32 InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds, const class FString& ReturnValue);
	void ForceScreenColorFade(class UObject* WorldContextObject, const struct FLinearColor& FadeColor, float FullOpacityInterval, float TheFadeOutInterval);
	void ForceLevelStreamingToBlock(class UObject* WorldContextObject, float ForTime);
	void FloatToDouble(float Value, double ReturnValue);
	void FlattenDirectionVectorInLocalSpace(const struct FVector& Direction, const struct FRotator& Rotation, const struct FVector& ReturnValue);
	void FlattenDirectionVector(const struct FVector& Direction, const struct FVector& ReturnValue);
	void FinishSpawning(class AActor* Actor);
	void FindWorldActors(class UObject* WorldContextObject, const TArray<class AActor*>& FContainer, class UClass* FType, class FName FTag, bool ReturnValue);
	void FindValidLocationNextToTarget(class UObject* WorldContextObject, const struct FVector& OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, int32 MaxTraceCount, class AActor* ActorToIgnore, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration, bool SkipCloseDistanceRestriction, bool AllowLocationInAir, bool ReturnValue);
	void FindValidLocationInFrontOfTarget(const struct FVector& OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, enum class ECollisionChannel CollisionChannel, bool bFailIfLocationNotOnGround, class AActor* ActorToIgnore, bool bTraceComplex, float DebugDrawDuration, bool ReturnValue);
	void FindSocketClosestToDirection(class USkeletalMeshComponent* Mesh, const struct FVector& TargetDirection, const TArray<class FName>& Sockets, const TArray<float>& DotProducts, bool bOnlySocketsWithPrefix, const class FString& SocketPrefix, class FName ReturnValue);
	void FindNearbyCharactersOfClass(class UObject* WorldContextObject, const struct FVector& AtLoc, float Radius, class UClass* CharacterClass, bool bTamedDinosOnly, bool bWildDinosOnly, const TArray<class APrimalCharacter*>& ReturnValue);
	void FindLocalizedVersionOfFilename(const struct FSoftObjectPath& OriginalFile, const class FString& ReturnValue);
	void FindActorAIState(class UClass* FStateType, const TArray<struct FDinoAttackInfo>& FContainerOfStates, class UPrimalAIState* ReturnValue);
	void ExitApplication();
	void EvalProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float Time, const struct FVector& ReturnValue);
	void ECC_TO_BITFIELD_BP(enum class ECollisionChannel ConvertChannel, int32 ReturnValue);
	void DrawDebugCapsuleWithExtents(class UObject* WorldContextObject, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
	void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& CapsuleTop, const struct FVector& CapsuleBottom, float Radius, const struct FColor& Color, bool bPersistentLines, float LifeTime, uint8 DepthPriority);
	void DoForceStreamComponents(const TArray<class UMeshComponent*>& ComponentsArray, bool bIsFirstPerson, bool bForceMaxTexturesOnConsole);
	void DoesOwnSelectedDLC(enum class EDLCSelector SelectedDLC, bool ReturnValue);
	void DisableGCM(class AActor* ShooterCharacter);
	void DestroyAllCharactersWithinMissionTileVolumes(class UObject* WorldContextObject, bool bOnlyCheckForDeadCharacters, class FName ForceOnTileStreamVolumeCustomTag);
	void DeferredSpawnAndFireProjectile_Start(const struct FVector& Origin, const struct FVector& ShootDir, class UClass* ProjectileClass, class APrimalCharacter* ForCharacter, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AShooterProjectile* ReturnValue);
	void DeferredSpawnAndFireProjectile_Finish(class AShooterProjectile* TheProjectile, const struct FTransform& SpawnTransform);
	void DebugDrawProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float MaxArcTime, float ArcTimeStep, const struct FLinearColor& LineColor, float LineThickness, float DebugDrawDuration);
	void DeactivateMissionForPlayerCharacter(class AShooterCharacter* PlayerPawn, bool bOverrideForcePreventLeavingMissions);
	void DateTimeToSeconds(const struct FDateTime& DateTimeValue, double ReturnValue);
	void CreateBlendSpaceFromAnimationNameSubstring(const class FString& SubString, class USkeletalMesh* Mesh, float CardinalBlendSpaceXYOffset, float CardinalBlendSpaceYOffset, class UBlendSpace* ReturnValue);
	void CopyDinoColorSetIndicies(class APrimalDinoCharacter* Src, class APrimalDinoCharacter* Dest);
	void CooldownTimeRemaining(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration, float ReturnValue);
	void ConvertRotatorFromWorldToLocal(const struct FRotator& ConvertRot, const struct FRotator& ToParentRotation, const struct FRotator& ReturnValue);
	void ConvertRotatorFromLocalToWorld(const struct FRotator& ConvertRot, const struct FRotator& FromParentRotation, const struct FRotator& ReturnValue);
	void ConvertPlayerCharacterConfigStructReplicated(const struct FPrimalPlayerCharacterConfigStruct& Structdata, const struct FPrimalPlayerCharacterConfigStructReplicated& ReturnValue);
	void ConvertIntToStringWithCommas(int32 GivenNumber, const class FString& ReturnValue);
	void Conv_VectorToVectorNetQuantizeNormal(const struct FVector& InVector, const struct FVector_NetQuantizeNormal& ReturnValue);
	void Conv_VectorToVectorNetQuantize(const struct FVector& InVector, const struct FVector_NetQuantize& ReturnValue);
	void ConstructObjectBP(class UClass* Class, class UObject* Outer, class FName Name, class UObject* ReturnValue);
	void ConstructObjectAutoNameBP(class UClass* Class, class UObject* Outer, class UObject* ReturnValue);
	void ComponentGetBoundsSphereRadius(class UPrimitiveComponent* Comp, float ReturnValue);
	void ComponentBoundsEncompassesPoint(class UPrimitiveComponent* Comp, const struct FVector& Point, float BoundsMultiplier, bool ReturnValue);
	void ClipLineInsideBox(const struct FVector& Origin, const struct FVector& Extent, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& OutLineStart, const struct FVector& OutLineEnd, bool ReturnValue);
	void ClassToStringReference(class UClass* ForClass, const class FString& ReturnValue);
	void ClassRefToObjectRef(class UClass* InClass, class UObject* ReturnValue);
	void ClampRotAxis(float BaseAxis, float DesiredAxis, float MaxDiff, float ReturnValue);
	void ClampLocation(const struct FVector& BaseLocation, const struct FVector& DesiredLocation, float MaxDiff, bool bTraceClampLocation, class UObject* WorldContextObject, const struct FVector& TraceFromLocation, const struct FVector& ReturnValue);
	void ChunkFStringIntoArray(const class FString& InputString, int32 ChunkSize, const TArray<class FString>& ReturnValue);
	void ChangeSaturation(const struct FLinearColor& InColor, float NewSaturation, const struct FLinearColor& ReturnValue);
	void CapsuleSweepProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, const struct FRotator& CapsuleRotation, float CapsuleRadius, float CapsuleHalfHeight, bool bRotateCapsuleAlongPath, bool bTraceComplex, const struct FHitResult& HitResult, const struct FVector& EndLocation, float EndArcTime, float MaxArcLength, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, float ArcTimeStep, enum class ECollisionChannel CollisionChannel, bool bDrawDebug, float DebugDrawDuration, bool ReturnValue);
	void CapsuleSweepMulti(class UObject* WorldContextObject, const TArray<struct FHitResult>& OutHits, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, enum class ECollisionChannel CollisionChannel, bool bTraceComplex, bool bDebugDraw, float DebugDrawDuration, bool bFindInitialOverlaps, bool ReturnValue);
	void CapsuleSweepFast(class UObject* WorldContextObject, const struct FHitResult& OutHit, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, enum class ECollisionChannel CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, bool ReturnValue);
	void CapsuleOverlapFast(class UObject* WorldContextObject, class AActor* FirstOverlappedActor, const struct FVector& Origin, const struct FRotator& CapsuleRotation, float Radius, float HalfHeight, enum class ECollisionChannel CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, bool bBlockingOnly, bool ReturnValue);
	void CanTeleport(class APrimalDinoCharacter* Target, bool ReturnValue);
	void CanSpawnCustomDino(class UObject* WorldContextObject, const struct FVector& OutCalculatedSpawnLocation, const struct FVector& PlayerLocation, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bDoLosCheck, bool bDoExtraSafetyChecks, class APrimalCharacter* SpawningCharacter, bool bDoOverlapCheck, bool ReturnValue);
	void CallGlobalLevelEvent(class UObject* WorldContextObject, class FName EventName);
	void CalculateGPSCoordinates(class UObject* WorldContextObject, const struct FVector& WorldPos, const struct FIntPoint& ReturnValue);
	void BreakPlayerCharacterConfigStructReplicated(const struct FPrimalPlayerCharacterConfigStructReplicated& FromStruct, bool bIsFemale, const TArray<struct FLinearColor>& BodyColors, const class FString& PlayerCharacterName, const TArray<float>& RawBoneModifiers, int32 PlayerSpawnRegionIndex, uint8 HeadHairIndex, uint8 FacialHairIndex, float PercentOfFullHeadHairGrowth, float PercentOfFullFacialHairGrowth, const TArray<uint8>& OverrideHeadHairColor, const TArray<uint8>& OverrideFacialHairColor, const TArray<uint8>& DynamicMaterialBytes, int32 PlayerVoiceCollectionIndex, bool bUsingCustomPlayerVoiceCollection);
	void BPSweepComponent(class UPrimitiveComponent* Component, const struct FHitResult& OutHit, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FVector& Extent, bool bTraceComplex, bool ReturnValue);
	void BPRTransformInverse(const struct FRotator& R, const struct FRotator& RBasis, const struct FRotator& ReturnValue);
	void BPRTransform(const struct FRotator& R, const struct FRotator& RBasis, const struct FRotator& ReturnValue);
	void BPRotatorLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, const struct FRotator& ReturnValue);
	void BPRequestRenameTribe(class AShooterPlayerState* PlayerState, const class FString& TribeName);
	void BPRequestLeaveTribe(class AShooterPlayerState* PlayerState);
	void BPRequestCreateTribe(class AShooterPlayerState* PlayerState, const class FString& TribeName);
	void BPProjectWorldToScreenPositionRaw(class APlayerController* ThePC, const struct FVector& WorldLocation, const struct FVector2D& Out_ScreenLocation, const struct FVector& Out_ViewLocation, bool Out_bIsScreenLocationInsideViewRect, bool bIgnoreScreenProjectionGlobalTransform, bool ReturnValue);
	void BPProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* ThePC, const struct FVector2D& ReturnValue);
	void BPLoadObject(const class FString& PathName, class UObject* ReturnValue);
	void BPLoadClass(const class FString& PathName, class UClass* ReturnValue);
	void BPIsTemplate(class UObject* AnObject, bool ReturnValue);
	void BPIsDinoIDEqual(int32 FirstDinoID1, int32 FirstDinoID2, int32 SecondDinoID1, int32 SecondDinoID2, bool ReturnValue);
	void BPGetWeightedRandomIndex(const TArray<float>& PArray, float ForceRand, int32 ReturnValue);
	void BPGetPrimaryMapName(class UObject* WorldContextObject, const class FString& ReturnValue);
	void BPGetBiomeWind(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalWind, float ReturnValue);
	void BPGetBiomeTemperature(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalTemperature, float ReturnValue);
	void BPFormatAsTimeLong(int32 InTime, const class FString& ReturnValue);
	void BPFormatAsTime(int32 InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds, const class FString& ReturnValue);
	void BPFLerpFastPure(float InMin, float InMax, float InPercent, float ReturnValue);
	void BPFLerpFast(float InMin, float InMax, float InPercent, float ReturnValue);
	void BPFLerp(float InMin, float InMax, float InPercent, bool bClampToMin, bool bClampToMax, float ReturnValue);
	void BPFastTrace(class UObject* WorldContextObject, const struct FVector& TraceEnd, const struct FVector& TraceStart, class AActor* ActorToIgnore, float DebugDrawDuration, bool ReturnValue);
	void BoxFromOriginAndExtent(const struct FVector& Origin, const struct FVector& Extent, const struct FVector& OutBoxMin, const struct FVector& OutBoxMax);
	void BlockTillAllStreamingRequestsFinished();
	void AttemptToSpawnAWildFollower(class UWorld* World, class APrimalDinoCharacter* ParentDino, const TArray<float>& WeightedChanceArrayMultipliers, const TArray<class APrimalDinoCharacter*>& ReturnValue);
	void AreVectorsNearlyEqual(const struct FVector& VectorA, const struct FVector& VectorB, float WithinError, bool ReturnValue);
	void AreVector2DsNearlyEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB, float WithinError, bool ReturnValue);
	void AreVector2DsEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB, bool ReturnValue);
	void AreTransformsNearlyEqual(const struct FTransform& TransformA, const struct FTransform& TransformB, float WithinError, bool ReturnValue);
	void AreRotatorsNearlyEqual(const struct FRotator& RotatorA, const struct FRotator& RotatorB, float WithinError, bool ReturnValue);
	void AreAllSublevelsForDataLayerLoaded(class UObject* WorldContextObject, class FName DataLayerName, bool ReturnValue);
	void ApplyEnvironmentalInteractionShotHit_Universal(class UObject* WorldContextObject, const struct FHitResult& ImpactHitInfo, const struct FVector& VelocityOrShootDirection, float FluidSimSplashStrength, class UNiagaraSystem* FluidSimSplashTemplateOverride, float Radius);
	void ApplyEnvironmentalInteractionExplosion_Universal(class UObject* WorldContextObject, const struct FVector& Location, float ExplosionRadius, float FluidSimSplashStrength, class UNiagaraSystem* FluidSimSplashTemplateOverride);
	void AmbientInsectsVFXEnabled(bool ReturnValue);
	void AdjustScreenPositionWithScreenDPI(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition);
	void AddToEditorMessageLog(class UObject* WorldContextObject, const class FString& Message, enum class EEditorMessageLogLevel LogLevel, bool bServerOnly);
	void AddToActorList(class UObject* WorldContextObject, int32 ActorListNum, class AActor* ActorRef);
	void AddFoliageInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float Plasticity);
	void AddFoliageCapsuleInteractionEffect(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float FoliagePlasticity);
	void AddFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddEnvironmentInteractionEffect(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float FoliagePlasticity, bool bFoliageInteraction, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddEnvironmentCapsuleInteractionEffect(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float FoliagePlasticity, bool bFoliageInteraction, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, bool DontAddIfOverLimits, const struct FVector& SplashLocation, float SplashRadius);
	void AddCombinedFoliageFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float Plasticity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddCombinedFoliageFluidCapsuleInteractionEffect(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, float FoliageInteractionStrength, float FoliagePlasticity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddAnimSlotToSkeleton(class USkeleton* Skeleton, class FName SlotName, class FName SlotGroup);
	void AddActorToCustomActorList(class UObject* WorldContextObject, class FName SearchCustomTag, class AActor* ActorToAdd, bool CreateListIfMissing);
	void ActorHasLineOfSightToWorldLocation(class AActor* FromActor, const struct FVector& ToLocation, class AActor* OutBlockingActor, enum class ECollisionChannel Channel, float DebugDrawDuration, bool ReturnValue);
	void ActorHasLineOfSight(class AActor* FromActor, class AActor* ToActor, class AActor* OutBlockingActor, const struct FVector& ToActorOffset, enum class ECollisionChannel Channel, float DebugDrawDuration, bool ReturnValue);
};

// 0x0 (0x28 - 0x28)
// Class ShooterGame.VirtualCursor
class UVirtualCursor : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass();
	static class UVirtualCursor* GetDefaultObj();

	void IsVirtualCursorEnabled(class APlayerController* PlayerController, bool ReturnValue);
	void IsOverInteractableWidget(class APlayerController* PlayerController, bool ReturnValue);
	void Enable(class APlayerController* PlayerController, bool bUseLeftStick);
	void Disable(class APlayerController* PlayerController);
};

// 0x10 (0x40 - 0x30)
// Class ShooterGame.VirtualCursorManager
class UVirtualCursorManager : public ULocalPlayerSubsystem
{
public:
	uint8                                        Pad_4725[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVirtualCursorManager* GetDefaultObj();

	void IsCursorValid(bool ReturnValue);
	void IsCursorOverInteractableWidget(bool ReturnValue);
	void EnableAnalogCursor(bool bUseLeftStick);
	void DisableAnalogCursor();
	void ContainsGamepadCursorInputProcessor(bool ReturnValue);
};

// 0x68 (0x7C0 - 0x758)
// Class ShooterGame.VisualSettingsUI
class UVisualSettingsUI : public UPrimalUI
{
public:
	uint8                                        Pad_4728[0x48];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UOpenColorIOConfiguration*>     ArrayOCIODisplayConfiguration;                     // 0x7A0(0x10)(ZeroConstructor)
	float                                        HDRDisplayMinLuminance;                            // 0x7B0(0x4)(None)
	float                                        HDRDisplayMidLuminance;                            // 0x7B4(0x4)(None)
	float                                        HDRDisplayMaxLuminance;                            // 0x7B8(0x4)(None)
	uint8                                        Pad_4729[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVisualSettingsUI* GetDefaultObj();

	void OnOcioSettingUpdated(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void OnOcioSettingChanged(const class FString& SelectedItem, enum class ESelectInfo SelectionType);
	void ApplyDefaultSettings();
};

// 0x178 (0x630 - 0x4B8)
// Class ShooterGame.VolumetricDispatcher
class AVolumetricDispatcher : public AActor
{
public:
	TArray<struct FVolumetricDispatchDetailLevel> DetailLevels;                                      // 0x4B8(0x10)(None)
	int32                                        CurrentDetailLevel;                                // 0x4C8(0x4)(None)
	uint8                                        Pad_4740[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class AActor>>         CachedActorList;                                   // 0x4D0(0x10)(ZeroConstructor)
	int32                                        LastListBuildFrames;                               // 0x4E0(0x4)(None)
	uint8                                        Pad_4741[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FComponentVolumetricDispatch>  ComponentDispatches;                               // 0x4E8(0x10)(ZeroConstructor)
	TArray<struct FVolumetricDispatch>           PendingWaterDispatches;                            // 0x4F8(0x10)(None)
	TArray<struct FVolumetricDispatch>           PendingWaterDispatches_Delayed;                    // 0x508(0x10)(None)
	TArray<struct FVolumetricDispatch>           PendingOneTimeFoliageDispatches;                   // 0x518(0x10)(None)
	TArray<struct FVolumetricDispatch>           PendingOneTimeFoliageDispatches_Delayed;           // 0x528(0x10)(None)
	TArray<struct FVolumetricDispatch>           PendingOneTimeCombinedFoliageFluidDispatches;      // 0x538(0x10)(None)
	TArray<struct FVolumetricDispatch>           PendingOneTimeCombinedFoliageFluidDispatches_Delayed; // 0x548(0x10)(None)
	TArray<class UPrimalWindSourceComponent*>    WindSourceComponents;                              // 0x558(0x10)(ZeroConstructor)
	uint8                                        Pad_4742[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bEnableFluidInteraction;                           // 0x608(0x1)(None)
	bool                                         bEnableFoliageInteraction;                         // 0x609(0x1)(None)
	bool                                         bDebug;                                            // 0x60A(0x1)(None)
	bool                                         bEnabled;                                          // 0x60B(0x1)(None)
	uint8                                        Pad_4743[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumFoliageInteractions;                            // 0x618(0x4)(None)
	int32                                        NumFluidInteractions;                              // 0x61C(0x4)(None)
	float                                        MinimumBabyFluidScale;                             // 0x620(0x4)(None)
	bool                                         HasHandledBubblesForThisCompThisTick;              // 0x624(0x1)(None)
	bool                                         WithinBubbleDistanceLimit;                         // 0x625(0x1)(None)
	uint8                                        Pad_4744[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GlobalMaxAllowedFrameDelayBuffer;                  // 0x628(0x4)(None)
	uint8                                        Pad_4745[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AVolumetricDispatcher* GetDefaultObj();

	void UnRegisterWindSource(class UPrimalWindSourceComponent* WindSource);
	void SetEnabled(bool bEnable);
	void RegisterWindSource(class UPrimalWindSourceComponent* WindSource);
	void FluidSpash(const struct FVector& Location, float Radius, const struct FVector& Velocity, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound);
	void AddFoliageInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, float InteractionStrength, float Plasticity);
	void AddFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddCombinedFoliageFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, float Radius, const struct FVector& Velocity, float InteractionStrength, float Plasticity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddCapsuleFoliageInteraction(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, float InteractionStrength, float Plasticity, bool DontAddIfOverLimits);
	void AddCapsuleFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
	void AddCapsuleCombinedFoliageFluidInteraction(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& ExtraCapsuleLocation, float Radius, const struct FVector& Velocity, float InteractionStrength, float Plasticity, bool bSplash, bool bRipple, class UNiagaraSystem* FluidSimSplashTemplateOverride, bool PlaySplashSound, const struct FVector& SplashLocation, float SplashRadius);
};

// 0x18 (0x48 - 0x30)
// Class ShooterGame.VRBattleGroupDataAsset
class UVRBattleGroupDataAsset : public UDataAsset
{
public:
	TArray<struct FVRBattleWaveUnit>             Units;                                             // 0x30(0x10)(ZeroConstructor)
	bool                                         bForceSpawnEntireGroup;                            // 0x40(0x1)(None)
	uint8                                        Pad_4746[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UVRBattleGroupDataAsset* GetDefaultObj();

};

// 0x8 (0x3220 - 0x3218)
// Class ShooterGame.VRMainBoss_Character
class AVRMainBoss_Character : public APrimalDinoCharacter
{
public:
	class AMissionType*                          CurrentMission;                                    // 0x3218(0x8)(ZeroConstructor)

	static class UClass* StaticClass();
	static class AVRMainBoss_Character* GetDefaultObj();

};

// 0x0 (0xB8 - 0xB8)
// Class ShooterGame.WaterVolumeWithFlowVisualizerComponent
class UWaterVolumeWithFlowVisualizerComponent : public UActorComponent
{
public:

	static class UClass* StaticClass();
	static class UWaterVolumeWithFlowVisualizerComponent* GetDefaultObj();

};

// 0xB0 (0x5D8 - 0x528)
// Class ShooterGame.WaterVolumeWithFlow
class AWaterVolumeWithFlow : public APhysicsVolume
{
public:
	float                                        CellSize;                                          // 0x528(0x4)(None)
	uint8                                        Pad_474B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             FlowMagnitudeMinMax;                               // 0x530(0x10)(None)
	uint8                                        Pad_474C[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGridIndex>                    GridIDs;                                           // 0x590(0x10)(None)
	TArray<struct FVector2D>                     FlowVectors;                                       // 0x5A0(0x10)(None)
	bool                                         bHasValidGridSize;                                 // 0x5B0(0x1)(None)
	uint8                                        Pad_474D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGridIndex                            CachedGridSize;                                    // 0x5B4(0x8)(None)
	uint8                                        Pad_474E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UClass*>                        BuffsToApply;                                      // 0x5C0(0x10)(ZeroConstructor)
	uint8                                        bApplyBuffsOnClient : 1;                           // Mask: 0x1, PropSize: 0x10x5D0(0x1)(None)
	uint8                                        Pad_474F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class AWaterVolumeWithFlow* GetDefaultObj();

	void SetStrengthFromSplineActor(class AActor* InSplineActor);
	void SetPaintValueAtGridIndex(const struct FGridIndex& Grid, const struct FColor& InColor, enum class EColorChannelTarget Channel);
	void SetDestinationsFromSplineActor(class AActor* InSplineActor);
	void SetDefaultPaintColors();
	void SetCellSize(float NewCellSize);
	void PaintStrengthFromSpline();
	void PaintObstruction();
	void PaintDestinationFromSpline();
	void IsGridIndexValid(const struct FGridIndex& Grid, bool ReturnValue);
	void GetPaintValueAtGridIndex(const struct FGridIndex& Grid, const struct FColor& ReturnValue);
	void GetLocationForGridIndex(const struct FGridIndex& ForIndex, const struct FVector& ReturnValue);
	void GetGridSize(const struct FGridIndex& ReturnValue);
	void GetGridIndexForLocation(const struct FVector& Location, const struct FGridIndex& Grid, bool ReturnValue);
	void GetFlowVectorAtLocation(const struct FVector& Location, bool bInterpFlowVector, const struct FVector& ReturnValue);
	void GenerateFlowField();
	void ClearAllPaintChannels();
	void BuildEverything();
};

// 0xC0 (0x3F0 - 0x330)
// Class ShooterGame.WorldBuffEntryWidget
class UWorldBuffEntryWidget : public UPrimalUserWidget
{
public:
	float                                        DefaultDisplayTime;                                // 0x330(0x4)(None)
	float                                        ExpiringSoonDisplayTime;                           // 0x334(0x4)(None)
	uint8                                        Pad_4751[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass();
	static class UWorldBuffEntryWidget* GetDefaultObj();

	void SyncData(const struct FWorldBuffPersistantData& WorldBuffPersistantData, bool bIsListEntry, bool bShouldReinit, bool bDurationIsStopped);
	void InitializeMe(bool bIsListEntry);
	void FadeOut();
	void Collapse();
	void BeginExpiring();
};

// 0x10 (0x38 - 0x28)
// Class ShooterGame.WorldModifiersContainer
class UWorldModifiersContainer : public UObject
{
public:
	TArray<struct FPrimalWorldModifierList>      WorldModifiers;                                    // 0x28(0x10)(None)

	static class UClass* StaticClass();
	static class UWorldModifiersContainer* GetDefaultObj();

};

}



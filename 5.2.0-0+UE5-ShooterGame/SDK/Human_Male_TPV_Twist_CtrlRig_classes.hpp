#pragma once

// Dumped with Dumper-7!


namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0xE8 (0x4E0 - 0x3F8)
// RigVMBlueprintGeneratedClass Human_Male_TPV_Twist_CtrlRig.Human_Male_TPV_Twist_CtrlRig_C
class UHuman_Male_TPV_Twist_CtrlRig_C : public UControlRig
{
public:
	TArray<struct FVector>                       CurrentSpringPositionWorld;                        // 0x3F8(0x10)(ContainsInstancedReference, AssetRegistrySearchable, AdvancedDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       CurrentSpringPositionGlobal;                       // 0x408(0x10)(AssetRegistrySearchable, AdvancedDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       LastFrameSpringPositionGlobal;                     // 0x418(0x10)(AutoWeak, AdvancedDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       CurrentVelocity;                                   // 0x428(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                       CurrentVelocityGlobal;                             // 0x438(0x10)(AssetRegistrySearchable, SimpleDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FRigElementKey>                BoneArraySpringSolver_RigElements;                 // 0x448(0x10)(None)
	double                                       OverallFat;                                        // 0x458(0x8)(None)
	struct FQuat                                 InverseRotation_LeftUpperArm;                      // 0x460(0x20)(None)
	struct FQuat                                 InverseRotation_RightUpperArm;                     // 0x480(0x20)(None)
	double                                       PhysicsFactor_Belly;                               // 0x4A0(0x8)(None)
	double                                       PhysicsFactor_Breast;                              // 0x4A8(0x8)(None)
	bool                                         bFemale;                                           // 0x4B0(0x1)(None)
	uint8                                        Pad_366F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       CharacterCreatorFatChest;                          // 0x4B8(0x8)(None)
	double                                       CharacterCreatorFatBelly;                          // 0x4C0(0x8)(None)
	double                                       ChestFat_Spring_Local;                             // 0x4C8(0x8)(None)
	double                                       BellyFat_Spring_Local;                             // 0x4D0(0x8)(None)
	double                                       OverallFat_Spring_Local;                           // 0x4D8(0x8)(None)

	static class UClass* StaticClass();
	static class UHuman_Male_TPV_Twist_CtrlRig_C* GetDefaultObj();

};

// 0x2F9 (0x321 - 0x28)
// RigVMMemoryStorageGeneratorClass Human_Male_TPV_Twist_CtrlRig.RigVMMemory_Literal
class URigVMMemory_Literal : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                        RigVMModel___RigUnit_GetTransform_Item__Const;     // 0x28(0xC)(None)
	enum class ERigVMTransformSpace              RigVMModel___RigUnit_GetTransform_Space__Const;    // 0x34(0x1)(None)
	bool                                         RigVMModel___RigUnit_GetTransform_bInitial__Const; // 0x35(0x1)(None)
	bool                                         RigVMModel___RigUnit_GetTransform_1_bInitial__Const; // 0x36(0x1)(None)
	uint8                                        Pad_3676[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RigVMModel___RigVMFunction_MathQuaternionSwingTwist_TwistAxis__Const; // 0x38(0x18)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_Item__Const;      // 0x50(0xC)(None)
	float                                        RigVMModel___RigUnit_SetRotation_Weight__Const;    // 0x5C(0x4)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_2_Item__Const;    // 0x60(0xC)(None)
	float                                        RigVMModel___RigUnit_SetRotation_2_Weight__Const;  // 0x6C(0x4)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_3_Item__Const;    // 0x70(0xC)(None)
	float                                        RigVMModel___RigUnit_SetRotation_3_Weight__Const;  // 0x7C(0x4)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_1_2_Item__Const; // 0x80(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_GetTransform_2_1_1_Item__Const; // 0x8C(0xC)(None)
	float                                        RigVMModel___RigUnit_SetRotation_1_1_2_Weight__Const; // 0x98(0x4)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_1_1_1_Item__Const; // 0x9C(0xC)(None)
	float                                        RigVMModel___RigUnit_SetRotation_1_1_1_1_Weight__Const; // 0xA8(0x4)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_1_Item__Const;  // 0xAC(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_GetTransform_2_1_Item__Const; // 0xB8(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_1_1_Item__Const; // 0xC4(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_GetTransform_2_Item__Const;   // 0xD0(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_Item__Const;    // 0xDC(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_2_Item__Const;  // 0xE8(0xC)(None)
	struct FRigElementKey                        RigVMModel___RigUnit_SetRotation_1_3_Item__Const;  // 0xF4(0xC)(None)
	float                                        RigVMModel___Interpolate_T__Const;                 // 0x100(0x4)(None)
	uint8                                        Pad_367A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       RigVMModel___Remap_1_1_1_1_SourceMinimum__Const;   // 0x108(0x8)(None)
	double                                       RigVMModel___Remap_1_1_1_1_SourceMaximum__Const;   // 0x110(0x8)(None)
	double                                       RigVMModel___Remap_1_1_1_1_TargetMinimum__Const;   // 0x118(0x8)(None)
	double                                       RigVMModel___Remap_1_1_1_1_TargetMaximum__Const;   // 0x120(0x8)(None)
	double                                       RigVMModel___Remap_1_1_2_TargetMinimum__Const;     // 0x128(0x8)(None)
	double                                       RigVMModel___Remap_1_1_2_TargetMaximum__Const;     // 0x130(0x8)(None)
	double                                       RigVMModel___Remap_1_1_1_TargetMinimum__Const;     // 0x138(0x8)(None)
	double                                       RigVMModel___Remap_1_1_1_TargetMaximum__Const;     // 0x140(0x8)(None)
	double                                       RigVMModel___Remap_1_1_TargetMinimum__Const;       // 0x148(0x8)(None)
	double                                       RigVMModel___Remap_1_1_TargetMaximum__Const;       // 0x150(0x8)(None)
	double                                       RigVMModel___Remap_1_2_1_TargetMinimum__Const;     // 0x158(0x8)(None)
	double                                       RigVMModel___Remap_1_2_1_TargetMaximum__Const;     // 0x160(0x8)(None)
	double                                       RigVMModel___Remap_1_3_TargetMinimum__Const;       // 0x168(0x8)(None)
	double                                       RigVMModel___Remap_1_3_TargetMaximum__Const;       // 0x170(0x8)(None)
	double                                       RigVMModel___Remap_1_2_TargetMinimum__Const;       // 0x178(0x8)(None)
	float                                        RigVMModel___Multiply_1_A__Const;                  // 0x180(0x4)(None)
	uint8                                        Pad_3685[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<double>                               RigVMModel___BoneArraySpringSolver_1_Alphas__Const; // 0x188(0x10)(None)
	double                                       RigVMModel___Remap_3_1_SourceMinimum__Const;       // 0x198(0x8)(None)
	double                                       RigVMModel___Remap_3_1_TargetMinimum__Const;       // 0x1A0(0x8)(None)
	double                                       RigVMModel___Remap_3_SourceMinimum__Const;         // 0x1A8(0x8)(None)
	double                                       RigVMModel___Remap_3_SourceMaximum__Const;         // 0x1B0(0x8)(None)
	double                                       RigVMModel___Remap_3_TargetMinimum__Const;         // 0x1B8(0x8)(None)
	double                                       RigVMModel___BoneArraySpringSolver_1_BonesLookAtParentAlpha__Const; // 0x1C0(0x8)(None)
	struct FVector                               LocalVariableDefault__BoneArraySpringSolver_PrevPos__Const; // 0x1C8(0x18)(None)
	struct FVector                               LocalVariableDefault__BoneArraySpringSolver_BonePosition__Const; // 0x1E0(0x18)(None)
	enum class ERigVMTransformSpace              BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_Space__Const; // 0x1F8(0x1)(None)
	bool                                         BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_bInitial__Const; // 0x1F9(0x1)(None)
	uint8                                        Pad_3692[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_IsNearlyZero_Tolerance__Const; // 0x1FC(0x4)(None)
	double                                       SpringSolver_0___SpringSolver_Multiply_7_B__Const; // 0x200(0x8)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Add_1_Add_1_1_B__Const; // 0x208(0x18)(None)
	double                                       SpringSolver_0___SpringSolver_Remap_1_SourceMinimum__Const; // 0x220(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Remap_1_SourceMaximum__Const; // 0x228(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Remap_1_TargetMinimum__Const; // 0x230(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Remap_1_TargetMaximum__Const; // 0x238(0x8)(None)
	bool                                         SpringSolver_0___SpringSolver_Remap_1_bClamp__Const; // 0x240(0x1)(None)
	uint8                                        Pad_3693[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolver_0___SpringSolver_Divide_2_B__Const;   // 0x248(0x8)(None)
	float                                        SpringSolver_0___SpringSolver_MathVectorClampLength_MinimumLength__Const; // 0x250(0x4)(None)
	float                                        SpringSolver_0___SpringSolver_Divide_A__Const;     // 0x254(0x4)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolverGlobal_0_WorldVelocityInfluence__Const; // 0x258(0x18)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Divide_1_A__Const; // 0x270(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Multiply_B__Const; // 0x274(0x4)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Multiply_7_B__Const; // 0x278(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_SourceMinimum__Const; // 0x280(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_SourceMaximum__Const; // 0x288(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_TargetMinimum__Const; // 0x290(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_TargetMaximum__Const; // 0x298(0x8)(None)
	bool                                         SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_bClamp__Const; // 0x2A0(0x1)(None)
	uint8                                        Pad_3695[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Divide_2_B__Const; // 0x2A8(0x8)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_MathVectorClampLength_MinimumLength__Const; // 0x2B0(0x4)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_Divide_A__Const; // 0x2B4(0x4)(None)
	uint8                                        Pad_3696[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_Set_Transform_1_Value__Const; // 0x2C0(0x60)(None)
	bool                                         BoneArraySpringSolver_1___BoneArraySpringSolver_Set_Transform_1_bPropagateToChildren__Const; // 0x320(0x1)(None)

	static class UClass* StaticClass();
	static class URigVMMemory_Literal* GetDefaultObj();

};

// 0x1398 (0x13C0 - 0x28)
// RigVMMemoryStorageGeneratorClass Human_Male_TPV_Twist_CtrlRig.RigVMMemory_Work
class URigVMMemory_Work : public URigVMMemoryStorage
{
public:
	uint8                                        Pad_3699[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuat                                 RigVMModel___Inverse_Result;                       // 0x30(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_Twist; // 0x50(0x20)(None)
	struct FTransform                            RigVMModel___Make_Relative_Local;                  // 0x70(0x60)(None)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_Transform;       // 0xD0(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x130(0x10)(ContainsInstancedReference, SimpleDisplay, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x140(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x1A0(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_Input; // 0x1B0(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_Swing; // 0x1D0(0x20)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_CachedIndex;      // 0x1F0(0x10)(AutoWeak, AssetRegistrySearchable, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_2_CachedIndex;    // 0x200(0x10)(ContainsInstancedReference, Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_3_CachedIndex;    // 0x210(0x10)(Protected, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_1_Twist; // 0x220(0x20)(None)
	struct FTransform                            RigVMModel___Make_Relative_1_1_1_Local;            // 0x240(0x60)(None)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_2_1_1_Transform; // 0x2A0(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_2_1_1_CachedIndex; // 0x300(0x10)(AutoWeak, AssetRegistrySearchable, SimpleDisplay, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_1_1_1_1_Transform; // 0x310(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_1_1_1_1_CachedIndex; // 0x370(0x10)(AutoWeak, ContainsInstancedReference, SimpleDisplay, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_1_Input; // 0x380(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_1_Swing; // 0x3A0(0x20)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_1_2_CachedIndex; // 0x3C0(0x10)(SimpleDisplay, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_1_1_1_CachedIndex; // 0x3D0(0x10)(ContainsInstancedReference, AssetRegistrySearchable, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_Twist; // 0x3E0(0x20)(None)
	struct FTransform                            RigVMModel___Make_Relative_1_1_Local;              // 0x400(0x60)(None)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_2_1_Transform;   // 0x460(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_2_1_CachedIndex; // 0x4C0(0x10)(AutoWeak, ContainsInstancedReference, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_1_1_1_Transform; // 0x4D0(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_1_1_1_CachedIndex; // 0x530(0x10)(AutoWeak, AdvancedDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_Input; // 0x540(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_1_Swing; // 0x560(0x20)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_1_CachedIndex;  // 0x580(0x10)(ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_1_1_CachedIndex; // 0x590(0x10)(AssetRegistrySearchable, SimpleDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___Inverse_1_Result;                     // 0x5A0(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_Twist; // 0x5C0(0x20)(None)
	struct FTransform                            RigVMModel___Make_Relative_1_Local;                // 0x5E0(0x60)(None)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x640(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x6A0(0x10)(AutoWeak, SimpleDisplay, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FTransform                            RigVMModel___RigUnit_GetTransform_1_1_Transform;   // 0x6B0(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_GetTransform_1_1_CachedIndex; // 0x710(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_Input; // 0x720(0x20)(None)
	struct FQuat                                 RigVMModel___RigVMFunction_MathQuaternionSwingTwist_1_Swing; // 0x740(0x20)(None)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_CachedIndex;    // 0x760(0x10)(AssetRegistrySearchable, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_2_CachedIndex;  // 0x770(0x10)(ContainsInstancedReference, BlueprintCallable, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___RigUnit_SetRotation_1_3_CachedIndex;  // 0x780(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, AdvancedDisplay, Protected, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FRigElementKey                        RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element; // 0x790(0xC)(None)
	uint8                                        Pad_369D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RigVMModel___GetTransform_Transform;               // 0x7A0(0x60)(None)
	TArray<struct FCachedRigElement>             RigVMModel___GetTransform_CachedIndex;             // 0x800(0x10)(AutoWeak, AssetRegistrySearchable, SimpleDisplay, AdvancedDisplay, Protected, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             RigVMModel___Set_Transform_CachedIndex;            // 0x810(0x10)(ContainsInstancedReference, SimpleDisplay, AdvancedDisplay, Protected, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	int32                                        RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index; // 0x820(0x4)(None)
	int32                                        RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count; // 0x824(0x4)(None)
	float                                        RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio; // 0x828(0x4)(None)
	class FName                                  RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun; // 0x82C(0x8)(None)
	float                                        RigVMModel___Interpolate_Result;                   // 0x834(0x4)(None)
	float                                        RigVMModel___Interpolate_A;                        // 0x838(0x4)(None)
	float                                        RigVMModel___Interpolate_B;                        // 0x83C(0x4)(None)
	float                                        RigVMModel___Interpolate_1_Result;                 // 0x840(0x4)(None)
	float                                        RigVMModel___Interpolate_1_A;                      // 0x844(0x4)(None)
	float                                        RigVMModel___Interpolate_1_B;                      // 0x848(0x4)(None)
	float                                        RigVMModel___Interpolate_2_Result;                 // 0x84C(0x4)(None)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_If_Result;     // 0x850(0x10)(AutoWeak, AssetRegistrySearchable, SimpleDisplay, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_ArrayMake_2_Array; // 0x860(0x10)(AutoWeak, ContainsInstancedReference, SimpleDisplay, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	double                                       RigVMModel___Remap_1_1_1_1_Result;                 // 0x870(0x8)(None)
	double                                       RigVMModel___Remap_1_1_2_Result;                   // 0x878(0x8)(None)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_ArrayMake_Array; // 0x880(0x10)(SimpleDisplay, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	double                                       RigVMModel___Remap_1_1_1_Result;                   // 0x890(0x8)(None)
	double                                       RigVMModel___Remap_1_1_Result;                     // 0x898(0x8)(None)
	TArray<float>                                RigVMModel___BoneArraySpringSolver_1_SpringStrength; // 0x8A0(0x10)(ContainsInstancedReference, AssetRegistrySearchable, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_If_1_Result;   // 0x8B0(0x10)(AutoWeak, ContainsInstancedReference, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_ArrayMake_1_1_Array; // 0x8C0(0x10)(AutoWeak, AdvancedDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	double                                       RigVMModel___Remap_1_2_1_Result;                   // 0x8D0(0x8)(None)
	double                                       RigVMModel___Remap_1_3_Result;                     // 0x8D8(0x8)(None)
	TArray<double>                               RigVMModel___DISPATCH_RigVMDispatch_ArrayMake_1_Array; // 0x8E0(0x10)(ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	double                                       RigVMModel___Remap_1_2_Result;                     // 0x8F0(0x8)(None)
	double                                       RigVMModel___Remap_1_Result;                       // 0x8F8(0x8)(None)
	TArray<float>                                RigVMModel___BoneArraySpringSolver_1_SpringDamping; // 0x900(0x10)(AssetRegistrySearchable, SimpleDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	float                                        RigVMModel___DISPATCH_RigVMDispatch_If_2_Result;   // 0x910(0x4)(None)
	float                                        RigVMModel___Multiply_1_Result;                    // 0x914(0x4)(None)
	double                                       RigVMModel___Remap_2_Result;                       // 0x918(0x8)(None)
	float                                        RigVMModel___Multiply_1_B;                         // 0x920(0x4)(None)
	float                                        RigVMModel___Multiply_Result;                      // 0x924(0x4)(None)
	double                                       RigVMModel___Remap_Result;                         // 0x928(0x8)(None)
	float                                        RigVMModel___Multiply_B;                           // 0x930(0x4)(None)
	uint8                                        Pad_36AB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       RigVMModel___Multiply_2_Result;                    // 0x938(0x8)(None)
	double                                       RigVMModel___Remap_3_1_Result;                     // 0x940(0x8)(None)
	double                                       RigVMModel___Multiply_2_1_Result;                  // 0x948(0x8)(None)
	double                                       RigVMModel___Remap_3_Result;                       // 0x950(0x8)(None)
	TArray<double>                               RigVMModel___BoneArraySpringSolver_1_Alphas__IO;   // 0x958(0x10)(AutoWeak, SimpleDisplay, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	uint8                                        Pad_36AD[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_Transform; // 0x970(0x60)(None)
	struct FRigElementKey                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayIterator_Element; // 0x9D0(0xC)(None)
	uint8                                        Pad_36AF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_CachedIndex; // 0x9E0(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FVector                               LocalVariable__BoneArraySpringSolver_BonePosition; // 0x9F0(0x18)(None)
	bool                                         BoneArraySpringSolver_1___BoneArraySpringSolver_IsNearlyZero_Result; // 0xA08(0x1)(None)
	uint8                                        Pad_36B2[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_3_Element; // 0xA10(0x18)(None)
	int32                                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayIterator_Index; // 0xA28(0x4)(None)
	uint8                                        Pad_36B4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_To_World_1_World; // 0xA30(0x18)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_1_Element; // 0xA48(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_2_Element; // 0xA4C(0x4)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_To_World_2_World; // 0xA50(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_Element; // 0xA68(0x18)(None)
	double                                       BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolver_0_Strength; // 0xA80(0x8)(None)
	double                                       BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolver_0_Damping; // 0xA88(0x8)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolver_0_Out; // 0xA90(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolver_0_Velocity; // 0xAA8(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_7_Element; // 0xAC0(0x18)(None)
	float                                        SpringSolver_0___SpringSolver_Entry_Maximum_Length; // 0xAD8(0x4)(None)
	uint8                                        Pad_36B6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpringSolver_0___SpringSolver_Return_Velocity;     // 0xAE0(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Entry_VelocityIn;    // 0xAF8(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_MathVectorClampLength_Result; // 0xB10(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Subtract_1_2_Result; // 0xB28(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Add_9_1_Result;      // 0xB40(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Scale_3_Result;      // 0xB58(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Add_1_Add_1_1_Result; // 0xB70(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Add_1_Add_1_Result;  // 0xB88(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Scale_Result;        // 0xBA0(0x18)(None)
	struct FVector                               SpringSolver_0___SpringSolver_Subtract_Result;     // 0xBB8(0x18)(None)
	double                                       SpringSolver_0___SpringSolver_Multiply_7_Result;   // 0xBD0(0x8)(None)
	float                                        SpringSolver_0___SpringSolver_Scale_Factor;        // 0xBD8(0x4)(None)
	uint8                                        Pad_36B7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolver_0___SpringSolver_Multiply_6_Result;   // 0xBE0(0x8)(None)
	float                                        SpringSolver_0___SpringSolver_GetDeltaTime_3_Result; // 0xBE8(0x4)(None)
	uint8                                        Pad_36B8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolver_0___SpringSolver_Multiply_6_A;        // 0xBF0(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Power_1_Result;      // 0xBF8(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Remap_1_Result;      // 0xC00(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Divide_2_Result;     // 0xC08(0x8)(None)
	double                                       SpringSolver_0___SpringSolver_Divide_2_A;          // 0xC10(0x8)(None)
	float                                        SpringSolver_0___SpringSolver_Scale_3_Factor;      // 0xC18(0x4)(None)
	uint8                                        Pad_36B9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpringSolver_0___SpringSolver_Subtract_1_Result;   // 0xC20(0x18)(None)
	float                                        SpringSolver_0___SpringSolver_Divide_Result;       // 0xC38(0x4)(None)
	float                                        SpringSolver_0___SpringSolver_RigVMFunction_GetDeltaTime_Result; // 0xC3C(0x4)(None)
	bool                                         BoneArraySpringSolver_1___BoneArraySpringSolver_IsNearlyZero_1_Result; // 0xC40(0x1)(None)
	uint8                                        Pad_36BA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_3_1_Element; // 0xC48(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_4_Element; // 0xC60(0x18)(None)
	double                                       BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolverGlobal_0_Strength; // 0xC78(0x8)(None)
	double                                       BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolverGlobal_0_Damping; // 0xC80(0x8)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolverGlobal_0_Out; // 0xC88(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Scale_1_1_Result; // 0xCA0(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_1_Result; // 0xCB8(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_From_World_Global; // 0xCD0(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_6_Element; // 0xCE8(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_5_Element; // 0xD00(0x18)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Multiply_Result; // 0xD18(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Divide_1_Result; // 0xD1C(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_RigVMFunction_GetDeltaTime_1_Result; // 0xD20(0x4)(None)
	uint8                                        Pad_36C0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_8_Element; // 0xD28(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_SpringSolverGlobal_0_VelocityGlobal; // 0xD40(0x18)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_Entry_Maximum_Length; // 0xD58(0x4)(None)
	uint8                                        Pad_36C2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Entry_VelocityIn; // 0xD60(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Return_VelocityGlobal; // 0xD78(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_MathVectorClampLength_Result; // 0xD90(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Subtract_1_2_Result; // 0xDA8(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Add_9_1_Result; // 0xDC0(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Scale_3_Result; // 0xDD8(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Add_1_Add_1_1_Result; // 0xDF0(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Add_1_Add_1_Result; // 0xE08(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Multiply_Result; // 0xE20(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Scale_Result; // 0xE38(0x18)(None)
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Subtract_Result; // 0xE50(0x18)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Multiply_7_Result; // 0xE68(0x8)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_Scale_Factor; // 0xE70(0x4)(None)
	uint8                                        Pad_36C4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Multiply_6_Result; // 0xE78(0x8)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_GetDeltaTime_3_Result; // 0xE80(0x4)(None)
	uint8                                        Pad_36C5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Multiply_6_A; // 0xE88(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Power_1_Result; // 0xE90(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Remap_1_Result; // 0xE98(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Divide_2_Result; // 0xEA0(0x8)(None)
	double                                       SpringSolverGlobal_0___SpringSolverGlobal_Divide_2_A; // 0xEA8(0x8)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_Scale_3_Factor; // 0xEB0(0x4)(None)
	uint8                                        Pad_36C6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpringSolverGlobal_0___SpringSolverGlobal_Subtract_1_Result; // 0xEB8(0x18)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_Divide_Result; // 0xED0(0x4)(None)
	float                                        SpringSolverGlobal_0___SpringSolverGlobal_RigVMFunction_GetDeltaTime_Result; // 0xED4(0x4)(None)
	uint8                                        Pad_36C7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_Transform; // 0xEE0(0x60)(None)
	struct FRigElementKey                        BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_Parent; // 0xF40(0xC)(None)
	uint8                                        Pad_36C8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_CachedChild; // 0xF50(0x10)(AssetRegistrySearchable, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_CachedParent; // 0xF60(0x10)(ContainsInstancedReference, Protected, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_CachedIndex; // 0xF70(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, AdvancedDisplay, BlueprintCallable, BlueprintAuthorityOnly, TextExportTransient, NonPIEDuplicateTransient, ExposeOnSpawn, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_Result; // 0xF80(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_B; // 0xF98(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_If_Result; // 0xFB0(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Add_Result; // 0xFC8(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Scale_Result; // 0xFE0(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Unit_Result; // 0xFF8(0x18)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Multiply_2_Result; // 0x1010(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Clamp_Result; // 0x1014(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Divide_Result; // 0x1018(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_RigVMFunction_MathVectorLength_1_Result; // 0x101C(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_RigVMFunction_MathVectorLength_Result; // 0x1020(0x4)(None)
	uint8                                        Pad_36CB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_2_Result; // 0x1028(0x18)(None)
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_1_1_Transform; // 0x1040(0x60)(None)
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_1_1_CachedIndex; // 0x10A0(0x10)(AutoWeak, AdvancedDisplay, BlueprintCallable, ExposeOnSpawn, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_2_A; // 0x10B0(0x18)(None)
	uint8                                        Pad_36CC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_1_Transform; // 0x10D0(0x60)(None)
	struct FRigElementKey                        BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_1_Parent; // 0x1130(0xC)(None)
	uint8                                        Pad_36CD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_1_CachedChild; // 0x1140(0x10)(AutoWeak, ContainsInstancedReference, AssetRegistrySearchable, SimpleDisplay, BlueprintCallable, ExposeOnSpawn, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_HierarchyGetParent_1_CachedParent; // 0x1150(0x10)(AssetRegistrySearchable, SimpleDisplay, BlueprintCallable, ExposeOnSpawn, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_GetTransform_2_1_CachedIndex; // 0x1160(0x10)(ContainsInstancedReference, SimpleDisplay, BlueprintCallable, ExposeOnSpawn, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic, NativeAccessSpecifierProtected, NativeAccessSpecifierPrivate)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_2_B; // 0x1170(0x18)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Clamp_Minimum; // 0x1188(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Clamp_Maximum; // 0x118C(0x4)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_From_World_2_2_Global; // 0x1190(0x18)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_6_1_Element; // 0x11A8(0x18)(None)
	struct FQuat                                 BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_If_1_Result; // 0x11C0(0x20)(None)
	struct FQuat                                 BoneArraySpringSolver_1___BoneArraySpringSolver_Multiply_1_Result; // 0x11E0(0x20)(None)
	struct FQuat                                 BoneArraySpringSolver_1___BoneArraySpringSolver_Scale_1_Result; // 0x1200(0x20)(None)
	struct FQuat                                 BoneArraySpringSolver_1___BoneArraySpringSolver_QuatBetweenDirections_0_Quat; // 0x1220(0x20)(None)
	struct FVector                               BoneArraySpringSolver_1___BoneArraySpringSolver_Subtract_3_Result; // 0x1240(0x18)(None)
	uint8                                        Pad_36D2[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FQuat                                 QuatBetweenDirections_0___QuatBetweenDirections_MathQuaternionFromAxisAndAngle_Result; // 0x1260(0x20)(None)
	struct FVector                               QuatBetweenDirections_0___QuatBetweenDirections_Unit_2_Result; // 0x1280(0x18)(None)
	struct FVector                               QuatBetweenDirections_0___QuatBetweenDirections_MathVectorCross_Result; // 0x1298(0x18)(None)
	struct FVector                               QuatBetweenDirections_0___QuatBetweenDirections_Unit_1_Result; // 0x12B0(0x18)(None)
	struct FVector                               QuatBetweenDirections_0___QuatBetweenDirections_Unit_Result; // 0x12C8(0x18)(None)
	double                                       QuatBetweenDirections_0___QuatBetweenDirections_Acos_Result; // 0x12E0(0x8)(None)
	float                                        QuatBetweenDirections_0___QuatBetweenDirections_Dot___Result; // 0x12E8(0x4)(None)
	uint8                                        Pad_36DB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       QuatBetweenDirections_0___QuatBetweenDirections_Acos_Value; // 0x12F0(0x8)(None)
	float                                        QuatBetweenDirections_0___QuatBetweenDirections_MathQuaternionFromAxisAndAngle_Angle; // 0x12F8(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Scale_1_Factor; // 0x12FC(0x4)(None)
	struct FQuat                                 BoneArraySpringSolver_1___BoneArraySpringSolver_Multiply_1_B; // 0x1300(0x20)(None)
	struct FTransform                            BoneArraySpringSolver_1___BoneArraySpringSolver_Set_Transform_1_Value__IO; // 0x1320(0x60)(None)
	double                                       BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayGetAtIndex_10_Element; // 0x1380(0x8)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_Set_Transform_1_Weight; // 0x1388(0x4)(None)
	uint8                                        Pad_36DD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedRigElement>             BoneArraySpringSolver_1___BoneArraySpringSolver_Set_Transform_1_CachedIndex; // 0x1390(0x10)(None)
	class FName                                  BoneArraySpringSolver_1___BoneArraySpringSolver_RigVMFunction_ControlFlowBranch_1_BlockToRun; // 0x13A0(0x8)(None)
	class FName                                  BoneArraySpringSolver_1___BoneArraySpringSolver_RigVMFunction_ControlFlowBranch_BlockToRun; // 0x13A8(0x8)(None)
	int32                                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayIterator_Count; // 0x13B0(0x4)(None)
	float                                        BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayIterator_Ratio; // 0x13B4(0x4)(None)
	class FName                                  BoneArraySpringSolver_1___BoneArraySpringSolver_DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun; // 0x13B8(0x8)(None)

	static class UClass* StaticClass();
	static class URigVMMemory_Work* GetDefaultObj();

};

}


